#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : Vec<std_string_String>
    | US8_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US9 =
    | US9_0
    | US9_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : string
    | US10_1 of f1_0 : string
and [<Struct>] US11 =
    | US11_0 of f0_0 : std_path_PathBuf
    | US11_1 of f1_0 : string
and [<Struct>] US12 =
    | US12_0 of f0_0 : std_path_PathBuf
    | US12_1
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US5
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and [<Struct>] US35 =
    | US35_0
    | US35_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : US35
    | US34_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : US34
    | US33_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US37 =
    | US37_0 of f0_0 : string
    | US37_1 of f1_0 : string
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
    | US38_2
and [<Struct>] US39 =
    | US39_0 of f0_0 : US38
    | US39_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US40 =
    | US40_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US40_1
and [<Struct>] US41 =
    | US41_0 of f0_0 : int32 * f0_1 : string
    | US41_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US42 =
    | US42_0 of f0_0 : std_collections_HashMap<string, string>
    | US42_1
and [<Struct>] US43 =
    | US43_0 of f0_0 : US5
    | US43_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US44 =
    | US44_0
    | US44_1 of f1_0 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_fs_FileType
    | US45_1 of f1_0 : std_string_String
and [<Struct>] US46 =
    | US46_0
    | US46_1
    | US46_2
and [<Struct>] US47 =
    | US47_0 of f0_0 : async_walkdir_DirEntry
    | US47_1 of f1_0 : std_string_String
and [<Struct>] US48 =
    | US48_0 of f0_0 : string * f0_1 : string
    | US48_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "NAME"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "VERSION"
    let v53 : string = "r#\"" + v52 + "\"#"
    let v54 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v51; v54|]
    let v57 : unativeint = 1 |> unativeint 
    let v61 : unativeint = 0 |> unativeint 
    let v65 : unativeint = 0 |> unativeint 
    let v69 : bool = v61 = v65 
    let v77 : clap_builder_ValueRange =
        if v69 then
            let v72 : string = "clap::builder::ValueRange::new($0..)"
            let v73 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v57 v72 
            v73
        else
            let v74 : string = ""
            let v75 : string = "clap::builder::ValueRange::new($0.." + v74 + "$1)"
            let v76 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v57, v61) v75 
            v76
    let v78 : string = "deps"
    let v79 : string = "r#\"" + v78 + "\"#"
    let v80 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "clap::Arg::new($0)"
    let v82 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "$0.short($1)"
    let v84 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v82, 'd') v83 
    let v85 : string = "r#\"" + v78 + "\"#"
    let v86 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "$0.long($1)"
    let v88 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v84, v86) v87 
    let v89 : string = "$0.to_vec()"
    let v90 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v55 v89 
    let v91 : string = "$0.value_names($1)"
    let v92 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v88, v90) v91 
    let v93 : string = "$0.num_args($1)"
    let v94 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v92, v77) v93 
    let v95 : string = "clap::ArgAction::Append"
    let v96 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "$0.action($1)"
    let v98 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v94, v96) v97 
    let v99 : string = "clap::Command::arg($0, $1)"
    let v100 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v98) v99 
    let v101 : string = "clap::Command::subcommand($0, v100)"
    let v102 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v101 
    let v103 : string = "cuda"
    let v104 : string = "r#\"" + v103 + "\"#"
    let v105 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v104 
    let v106 : string = "clap::Command::new($0)"
    let v107 : clap_Command = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "py-path"
    let v109 : string = "r#\"" + v108 + "\"#"
    let v110 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "clap::Arg::new($0)"
    let v112 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.short($1)"
    let v114 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v112, 'p') v113 
    let v115 : string = "r#\"" + v108 + "\"#"
    let v116 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v115 
    let v117 : string = "$0.long($1)"
    let v118 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v114, v116) v117 
    let v119 : string = "$0.required($1)"
    let v120 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v118, true) v119 
    let v121 : string = "clap::Command::arg($0, $1)"
    let v122 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v107, v120) v121 
    let v123 : string = "env"
    let v124 : string = "r#\"" + v123 + "\"#"
    let v125 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v124 
    let v126 : string = "clap::Arg::new($0)"
    let v127 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : string = "$0.short($1)"
    let v129 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v127, 'e') v128 
    let v130 : string = "r#\"" + v123 + "\"#"
    let v131 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = "$0.long($1)"
    let v133 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v129, v131) v132 
    
    
    let v134 : string list = []
    let v136 : string = "Poetry"
    let v137 : string list = v136 :: v134 
    let v141 : string = "Pip"
    let v142 : string list = v141 :: v137 
    let v146 : (string list -> (string [])) = List.toArray
    let v147 : (string []) = v146 v142
    let v150 : string = "$0.to_vec()"
    let v151 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v147 v150 
    let v152 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "x"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154 
    (* run_target_args'
    let v160 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v161 : string = "&*$0"
    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
    let _run_target_args'_v160 = v162 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : string = "&*$0"
    let v164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v163 
    let _run_target_args'_v160 = v164 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v165 : string = "&*$0"
    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v165 
    let _run_target_args'_v160 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v168 : Ref<Str> = v155 |> unbox<Ref<Str>>
    let _run_target_args'_v160 = v168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
    let _run_target_args'_v160 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v176 : Ref<Str> = v155 |> unbox<Ref<Str>>
    let _run_target_args'_v160 = v176 
    #endif
#else
    let v180 : Ref<Str> = v155 |> unbox<Ref<Str>>
    let _run_target_args'_v160 = v180 
    #endif
    let v183 : Ref<Str> = _run_target_args'_v160 
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "String::from($0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v183 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "String::from($0)"
    let v197 : std_string_String = Fable.Core.RustInterop.emitRustExpr v183 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "String::from($0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v183 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : std_string_String = v183 |> unbox<std_string_String>
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v205 : std_string_String = v183 |> unbox<std_string_String>
    let _run_target_args'_v193 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v209 : std_string_String = v183 |> unbox<std_string_String>
    let _run_target_args'_v193 = v209 
    #endif
#else
    let v213 : std_string_String = v183 |> unbox<std_string_String>
    let _run_target_args'_v193 = v213 
    #endif
    let v216 : std_string_String = _run_target_args'_v193 
    let v222 : string = "Box::new($0)"
    let v223 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v216 v222 
    let v224 : string = "Box::leak($0)"
    let v225 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v223 v224 
    let v226 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v227 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v225 v226 
    let v228 : string = "true; $0 }).collect::<Vec<_>>()"
    let v229 : bool = Fable.Core.RustInterop.emitRustExpr v227 v228 
    let v230 : string = "_vec_map"
    let v231 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v230 
    let v232 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v233 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v231 v232 
    let v234 : string = "$0.value_parser($1)"
    let v235 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v133, v233) v234 
    let v236 : string = "clap::Command::arg($0, $1)"
    let v237 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v122, v235) v236 
    let v238 : string = "r#\"" + v49 + "\"#"
    let v239 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v238 
    let v240 : string = "r#\"" + v52 + "\"#"
    let v241 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v240 
    let v242 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v239; v241|]
    let v244 : unativeint = 1 |> unativeint 
    let v248 : unativeint = 0 |> unativeint 
    let v252 : unativeint = 0 |> unativeint 
    let v256 : bool = v248 = v252 
    let v264 : clap_builder_ValueRange =
        if v256 then
            let v259 : string = "clap::builder::ValueRange::new($0..)"
            let v260 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v244 v259 
            v260
        else
            let v261 : string = ""
            let v262 : string = "clap::builder::ValueRange::new($0.." + v261 + "$1)"
            let v263 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v244, v248) v262 
            v263
    let v265 : string = "r#\"" + v78 + "\"#"
    let v266 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v265 
    let v267 : string = "clap::Arg::new($0)"
    let v268 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v266 v267 
    let v269 : string = "$0.short($1)"
    let v270 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v268, 'd') v269 
    let v271 : string = "r#\"" + v78 + "\"#"
    let v272 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : string = "$0.long($1)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v270, v272) v273 
    let v275 : string = "$0.to_vec()"
    let v276 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v242 v275 
    let v277 : string = "$0.value_names($1)"
    let v278 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v274, v276) v277 
    let v279 : string = "$0.num_args($1)"
    let v280 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v278, v264) v279 
    let v281 : string = "clap::ArgAction::Append"
    let v282 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v281 
    let v283 : string = "$0.action($1)"
    let v284 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v280, v282) v283 
    let v285 : string = "clap::Command::arg($0, $1)"
    let v286 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v237, v284) v285 
    let v287 : string = "clap::Command::subcommand($0, v286)"
    let v288 : clap_Command = Fable.Core.RustInterop.emitRustExpr v102 v287 
    let v289 : string = "fable"
    let v290 : string = "r#\"" + v289 + "\"#"
    let v291 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v290 
    let v292 : string = "clap::Command::new($0)"
    let v293 : clap_Command = Fable.Core.RustInterop.emitRustExpr v291 v292 
    let v294 : string = "fs-path"
    let v295 : string = "r#\"" + v294 + "\"#"
    let v296 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v295 
    let v297 : string = "clap::Arg::new($0)"
    let v298 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v296 v297 
    let v299 : string = "$0.short($1)"
    let v300 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v298, 'f') v299 
    let v301 : string = "r#\"" + v294 + "\"#"
    let v302 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v301 
    let v303 : string = "$0.long($1)"
    let v304 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v300, v302) v303 
    let v305 : string = "$0.required($1)"
    let v306 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v304, true) v305 
    let v307 : string = "clap::Command::arg($0, $1)"
    let v308 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v293, v306) v307 
    let v309 : string = "r#\"" + v0 + "\"#"
    let v310 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "clap::Arg::new($0)"
    let v312 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v310 v311 
    let v313 : string = "$0.short($1)"
    let v314 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v312, 'c') v313 
    let v315 : string = "r#\"" + v0 + "\"#"
    let v316 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v315 
    let v317 : string = "$0.long($1)"
    let v318 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v314, v316) v317 
    let v319 : string = "clap::Command::arg($0, $1)"
    let v320 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v308, v318) v319 
    let v321 : string = "clap::Command::subcommand($0, v320)"
    let v322 : clap_Command = Fable.Core.RustInterop.emitRustExpr v288 v321 
    let v323 : string = "rust"
    let v324 : string = "r#\"" + v323 + "\"#"
    let v325 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v324 
    let v326 : string = "clap::Command::new($0)"
    let v327 : clap_Command = Fable.Core.RustInterop.emitRustExpr v325 v326 
    let v328 : string = "r#\"" + v294 + "\"#"
    let v329 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v328 
    let v330 : string = "clap::Arg::new($0)"
    let v331 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v329 v330 
    let v332 : string = "$0.short($1)"
    let v333 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v331, 'f') v332 
    let v334 : string = "r#\"" + v294 + "\"#"
    let v335 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v334 
    let v336 : string = "$0.long($1)"
    let v337 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v333, v335) v336 
    let v338 : string = "$0.required($1)"
    let v339 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v337, true) v338 
    let v340 : string = "clap::Command::arg($0, $1)"
    let v341 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v327, v339) v340 
    let v342 : string = "r#\"" + v49 + "\"#"
    let v343 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v342 
    let v344 : string = "r#\"" + v52 + "\"#"
    let v345 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v344 
    let v346 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v343; v345|]
    let v348 : unativeint = 1 |> unativeint 
    let v352 : unativeint = 0 |> unativeint 
    let v356 : unativeint = 0 |> unativeint 
    let v360 : bool = v352 = v356 
    let v368 : clap_builder_ValueRange =
        if v360 then
            let v363 : string = "clap::builder::ValueRange::new($0..)"
            let v364 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v348 v363 
            v364
        else
            let v365 : string = ""
            let v366 : string = "clap::builder::ValueRange::new($0.." + v365 + "$1)"
            let v367 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v348, v352) v366 
            v367
    let v369 : string = "r#\"" + v78 + "\"#"
    let v370 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v369 
    let v371 : string = "clap::Arg::new($0)"
    let v372 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v370 v371 
    let v373 : string = "$0.short($1)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v372, 'd') v373 
    let v375 : string = "r#\"" + v78 + "\"#"
    let v376 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v375 
    let v377 : string = "$0.long($1)"
    let v378 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v374, v376) v377 
    let v379 : string = "$0.to_vec()"
    let v380 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v346 v379 
    let v381 : string = "$0.value_names($1)"
    let v382 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v378, v380) v381 
    let v383 : string = "$0.num_args($1)"
    let v384 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v382, v368) v383 
    let v385 : string = "clap::ArgAction::Append"
    let v386 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v385 
    let v387 : string = "$0.action($1)"
    let v388 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v384, v386) v387 
    let v389 : string = "clap::Command::arg($0, $1)"
    let v390 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v341, v388) v389 
    let v392 : unativeint = 0 |> unativeint 
    let v396 : unativeint = 1 |> unativeint 
    let v400 : unativeint = 0 |> unativeint 
    let v404 : bool = v396 = v400 
    let v412 : clap_builder_ValueRange =
        if v404 then
            let v407 : string = "clap::builder::ValueRange::new($0..)"
            let v408 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v392 v407 
            v408
        else
            let v409 : string = "="
            let v410 : string = "clap::builder::ValueRange::new($0.." + v409 + "$1)"
            let v411 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v392, v396) v410 
            v411
    let v413 : string = "wasm"
    let v414 : string = "r#\"" + v413 + "\"#"
    let v415 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v414 
    let v416 : string = "clap::Arg::new($0)"
    let v417 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v415 v416 
    let v418 : string = "$0.short($1)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v417, 'w') v418 
    let v420 : string = "r#\"" + v413 + "\"#"
    let v421 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "$0.long($1)"
    let v423 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, v421) v422 
    let v424 : string = "$0.num_args($1)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v423, v412) v424 
    let v426 : string = "$0.require_equals($1)"
    let v427 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, true) v426 
    let v428 : string = ""
    let v429 : string = "r#\"" + v428 + "\"#"
    let v430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v429 
    let v431 : string = "$0.default_missing_value($1)"
    let v432 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v427, v430) v431 
    let v433 : string = "clap::Command::arg($0, $1)"
    let v434 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v390, v432) v433 
    let v436 : unativeint = 0 |> unativeint 
    let v440 : unativeint = 1 |> unativeint 
    let v444 : unativeint = 0 |> unativeint 
    let v448 : bool = v440 = v444 
    let v456 : clap_builder_ValueRange =
        if v448 then
            let v451 : string = "clap::builder::ValueRange::new($0..)"
            let v452 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v436 v451 
            v452
        else
            let v453 : string = "="
            let v454 : string = "clap::builder::ValueRange::new($0.." + v453 + "$1)"
            let v455 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v436, v440) v454 
            v455
    let v457 : string = "contract"
    let v458 : string = "r#\"" + v457 + "\"#"
    let v459 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v458 
    let v460 : string = "clap::Arg::new($0)"
    let v461 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v459 v460 
    let v462 : string = "$0.short($1)"
    let v463 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v461, 'c') v462 
    let v464 : string = "r#\"" + v457 + "\"#"
    let v465 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v464 
    let v466 : string = "$0.long($1)"
    let v467 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v463, v465) v466 
    let v468 : string = "$0.num_args($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v467, v456) v468 
    let v470 : string = "$0.require_equals($1)"
    let v471 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, true) v470 
    let v472 : string = "r#\"" + v428 + "\"#"
    let v473 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v472 
    let v474 : string = "$0.default_missing_value($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v471, v473) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v434, v475) v476 
    let v478 : string = "cleanup"
    let v479 : string = "r#\"" + v478 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : string = "clap::Arg::new($0)"
    let v482 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v480 v481 
    let v483 : string = "$0.short($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v482, 'l') v483 
    let v485 : string = "r#\"" + v478 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "$0.long($1)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v484, v486) v487 
    let v489 : string = "true"
    let v490 : string = "r#\"" + v489 + "\"#"
    let v491 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v490 
    let v492 : string = "$0.default_value($1)"
    let v493 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v488, v491) v492 
    let v494 : string = "clap::ArgAction::SetFalse"
    let v495 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v494 
    let v496 : string = "$0.action($1)"
    let v497 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v493, v495) v496 
    let v498 : string = "clap::Command::arg($0, $1)"
    let v499 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v477, v497) v498 
    let v500 : string = "clap::Command::subcommand($0, v499)"
    let v501 : clap_Command = Fable.Core.RustInterop.emitRustExpr v322 v500 
    let v502 : string = "typescript"
    let v503 : string = "r#\"" + v502 + "\"#"
    let v504 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v503 
    let v505 : string = "clap::Command::new($0)"
    let v506 : clap_Command = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let v507 : string = "r#\"" + v294 + "\"#"
    let v508 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v507 
    let v509 : string = "clap::Arg::new($0)"
    let v510 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v508 v509 
    let v511 : string = "$0.short($1)"
    let v512 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v510, 'f') v511 
    let v513 : string = "r#\"" + v294 + "\"#"
    let v514 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v513 
    let v515 : string = "$0.long($1)"
    let v516 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v512, v514) v515 
    let v517 : string = "$0.required($1)"
    let v518 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v516, true) v517 
    let v519 : string = "clap::Command::arg($0, $1)"
    let v520 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v506, v518) v519 
    let v521 : string = "r#\"" + v49 + "\"#"
    let v522 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v521 
    let v523 : string = "r#\"" + v52 + "\"#"
    let v524 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v523 
    let v525 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v522; v524|]
    let v527 : unativeint = 1 |> unativeint 
    let v531 : unativeint = 0 |> unativeint 
    let v535 : unativeint = 0 |> unativeint 
    let v539 : bool = v531 = v535 
    let v546 : clap_builder_ValueRange =
        if v539 then
            let v542 : string = "clap::builder::ValueRange::new($0..)"
            let v543 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v527 v542 
            v543
        else
            let v544 : string = "clap::builder::ValueRange::new($0.." + v428 + "$1)"
            let v545 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v527, v531) v544 
            v545
    let v547 : string = "r#\"" + v78 + "\"#"
    let v548 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v547 
    let v549 : string = "clap::Arg::new($0)"
    let v550 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v548 v549 
    let v551 : string = "$0.short($1)"
    let v552 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v550, 'd') v551 
    let v553 : string = "r#\"" + v78 + "\"#"
    let v554 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v553 
    let v555 : string = "$0.long($1)"
    let v556 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v552, v554) v555 
    let v557 : string = "$0.to_vec()"
    let v558 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v525 v557 
    let v559 : string = "$0.value_names($1)"
    let v560 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v556, v558) v559 
    let v561 : string = "$0.num_args($1)"
    let v562 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v560, v546) v561 
    let v563 : string = "clap::ArgAction::Append"
    let v564 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v563 
    let v565 : string = "$0.action($1)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v562, v564) v565 
    let v567 : string = "clap::Command::arg($0, $1)"
    let v568 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v520, v566) v567 
    let v569 : string = "clap::Command::subcommand($0, v568)"
    let v570 : clap_Command = Fable.Core.RustInterop.emitRustExpr v501 v569 
    let v571 : string = "python"
    let v572 : string = "r#\"" + v571 + "\"#"
    let v573 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v572 
    let v574 : string = "clap::Command::new($0)"
    let v575 : clap_Command = Fable.Core.RustInterop.emitRustExpr v573 v574 
    let v576 : string = "r#\"" + v294 + "\"#"
    let v577 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v576 
    let v578 : string = "clap::Arg::new($0)"
    let v579 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v577 v578 
    let v580 : string = "$0.short($1)"
    let v581 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v579, 'f') v580 
    let v582 : string = "r#\"" + v294 + "\"#"
    let v583 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v582 
    let v584 : string = "$0.long($1)"
    let v585 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v581, v583) v584 
    let v586 : string = "$0.required($1)"
    let v587 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v585, true) v586 
    let v588 : string = "clap::Command::arg($0, $1)"
    let v589 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v575, v587) v588 
    let v590 : string = "r#\"" + v49 + "\"#"
    let v591 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v590 
    let v592 : string = "r#\"" + v52 + "\"#"
    let v593 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v592 
    let v594 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v591; v593|]
    let v596 : unativeint = 1 |> unativeint 
    let v600 : unativeint = 0 |> unativeint 
    let v604 : unativeint = 0 |> unativeint 
    let v608 : bool = v600 = v604 
    let v615 : clap_builder_ValueRange =
        if v608 then
            let v611 : string = "clap::builder::ValueRange::new($0..)"
            let v612 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v596 v611 
            v612
        else
            let v613 : string = "clap::builder::ValueRange::new($0.." + v428 + "$1)"
            let v614 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v596, v600) v613 
            v614
    let v616 : string = "r#\"" + v78 + "\"#"
    let v617 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v616 
    let v618 : string = "clap::Arg::new($0)"
    let v619 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v617 v618 
    let v620 : string = "$0.short($1)"
    let v621 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v619, 'd') v620 
    let v622 : string = "r#\"" + v78 + "\"#"
    let v623 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v622 
    let v624 : string = "$0.long($1)"
    let v625 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v621, v623) v624 
    let v626 : string = "$0.to_vec()"
    let v627 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v594 v626 
    let v628 : string = "$0.value_names($1)"
    let v629 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v625, v627) v628 
    let v630 : string = "$0.num_args($1)"
    let v631 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v629, v615) v630 
    let v632 : string = "clap::ArgAction::Append"
    let v633 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v632 
    let v634 : string = "$0.action($1)"
    let v635 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v631, v633) v634 
    let v636 : string = "clap::Command::arg($0, $1)"
    let v637 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v589, v635) v636 
    let v638 : string = "clap::Command::subcommand($0, v637)"
    let v639 : clap_Command = Fable.Core.RustInterop.emitRustExpr v570 v638 
    let v640 : string = "dib"
    let v641 : string = "r#\"" + v640 + "\"#"
    let v642 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v641 
    let v643 : string = "clap::Command::new($0)"
    let v644 : clap_Command = Fable.Core.RustInterop.emitRustExpr v642 v643 
    let v645 : string = "path"
    let v646 : string = "r#\"" + v645 + "\"#"
    let v647 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v646 
    let v648 : string = "clap::Arg::new($0)"
    let v649 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let v650 : string = "$0.short($1)"
    let v651 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v649, 'p') v650 
    let v652 : string = "r#\"" + v645 + "\"#"
    let v653 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v652 
    let v654 : string = "$0.long($1)"
    let v655 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v651, v653) v654 
    let v656 : string = "$0.required($1)"
    let v657 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v655, true) v656 
    let v658 : string = "clap::Command::arg($0, $1)"
    let v659 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v644, v657) v658 
    let v660 : string = "u8"
    let v661 : string = "clap::value_parser!(" + v660 + ").into()"
    let v662 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v661 
    let v663 : string = "retries"
    let v664 : string = "r#\"" + v663 + "\"#"
    let v665 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v664 
    let v666 : string = "clap::Arg::new($0)"
    let v667 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v665 v666 
    let v668 : string = "$0.short($1)"
    let v669 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v667, 'r') v668 
    let v670 : string = "r#\"" + v663 + "\"#"
    let v671 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v670 
    let v672 : string = "$0.long($1)"
    let v673 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v669, v671) v672 
    let v674 : string = "$0.value_parser($1)"
    let v675 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v673, v662) v674 
    let v676 : string = "clap::Command::arg($0, $1)"
    let v677 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v659, v675) v676 
    let v678 : string = "working-directory"
    let v679 : string = "r#\"" + v678 + "\"#"
    let v680 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v679 
    let v681 : string = "clap::Arg::new($0)"
    let v682 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v680 v681 
    let v683 : string = "$0.short($1)"
    let v684 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v682, 'w') v683 
    let v685 : string = "r#\"" + v678 + "\"#"
    let v686 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v685 
    let v687 : string = "$0.long($1)"
    let v688 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v684, v686) v687 
    let v689 : string = "clap::Command::arg($0, $1)"
    let v690 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v677, v688) v689 
    let v691 : string = "clap::Command::subcommand($0, v690)"
    let v692 : clap_Command = Fable.Core.RustInterop.emitRustExpr v639 v691 
    v692
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = method4(v0)
    let v7 : string = "std::env::var(&*$0)"
    let v8 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "x"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "fable_library_rust::String_::fromString($0)"
    let v14 : string = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "true; $0 })"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "_result_map_"
    let v18 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = method5()
    let v20 : string = "$0.unwrap_or($1)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr struct (v18, v19) v20 
    let _run_target_args'_v5 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US3 = US3_1
    let v23 : US4 = US4_3(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _run_target_args'_v5 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : US3 = US3_2
    let v27 : US4 = US4_3(v26)
    let v28 : string = $"env.get_environment_variable / target: {v27} / var: {v0}"
    let v29 : string = failwith<string> v28
    let _run_target_args'_v5 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : string = "process.env[$0] ?? \"\""
    let v31 : string = Fable.Core.JsInterop.emitJsExpr v0 v30 
    let _run_target_args'_v5 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : string = "os"
    let v34 : IOsEnviron = Fable.Core.PyInterop.importAll v33 
    let v35 : string = "v34.environ"
    let v36 : obj = Fable.Core.PyInterop.emitPyExpr () v35 
    let v40 : string = "v36.get($0)"
    let v41 : string = Fable.Core.PyInterop.emitPyExpr v0 v40 
    let mutable _v41 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v45 : (string -> string option) = Option.ofObj
    let v46 : string option = v45 v41
    v46 
    #else
    Some v41 
    #endif
    |> fun x -> _v41 <- Some x
    let v47 : string option = match _v41 with Some x -> x | None -> failwith "optionm'.of_obj / _v41=None"
    let v51 : (string -> US5) = method6()
    let v52 : US5 option = v47 |> Option.map v51 
    let v65 : US5 = US5_1
    let v66 : US5 = v52 |> Option.defaultValue v65 
    let v73 : string =
        match v66 with
        | US5_1 -> (* None *)
            let v71 : string = ""
            v71
        | US5_0(v70) -> (* Some *)
            v70
    let _run_target_args'_v5 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v74 : US3 = US3_1
    let v75 : US4 = US4_1(v74)
    let v76 : string = $"env.get_environment_variable / target: {v75} / var: {v0}"
    let v77 : string = failwith<string> v76
    let _run_target_args'_v5 = v77 
    #endif
#else
    let v78 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v79 : string = v78 v0
    let mutable _v79 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v81 : (string -> string option) = Option.ofObj
    let v82 : string option = v81 v79
    v82 
    #else
    Some v79 
    #endif
    |> fun x -> _v79 <- Some x
    let v83 : string option = match _v79 with Some x -> x | None -> failwith "optionm'.of_obj / _v79=None"
    let v87 : (string -> US5) = method6()
    let v88 : US5 option = v83 |> Option.map v87 
    let v101 : US5 = US5_1
    let v102 : US5 = v88 |> Option.defaultValue v101 
    let v109 : string =
        match v102 with
        | US5_1 -> (* None *)
            let v107 : string = ""
            v107
        | US5_0(v106) -> (* Some *)
            v106
    let _run_target_args'_v5 = v109 
    #endif
    let v110 : string = _run_target_args'_v5 
    v110
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    let v2 : bool = "Verbose" = v1
    let v6 : US1 =
        if v2 then
            let v3 : US0 = US0_0
            US1_0(v3)
        else
            US1_1
    let v47 : US1 =
        match v6 with
        | US1_1 -> (* None *)
            let v9 : bool = "Debug" = v1
            let v13 : US1 =
                if v9 then
                    let v10 : US0 = US0_1
                    US1_0(v10)
                else
                    US1_1
            match v13 with
            | US1_1 -> (* None *)
                let v16 : bool = "Info" = v1
                let v20 : US1 =
                    if v16 then
                        let v17 : US0 = US0_2
                        US1_0(v17)
                    else
                        US1_1
                match v20 with
                | US1_1 -> (* None *)
                    let v23 : bool = "Warning" = v1
                    let v27 : US1 =
                        if v23 then
                            let v24 : US0 = US0_3
                            US1_0(v24)
                        else
                            US1_1
                    match v27 with
                    | US1_1 -> (* None *)
                        let v30 : bool = "Critical" = v1
                        let v34 : US1 =
                            if v30 then
                                let v31 : US0 = US0_4
                                US1_0(v31)
                            else
                                US1_1
                        match v34 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v35) -> (* Some *)
                            US1_0(v35)
                    | US1_0(v28) -> (* Some *)
                        US1_0(v28)
                | US1_0(v21) -> (* Some *)
                    US1_0(v21)
            | US1_0(v14) -> (* Some *)
                US1_0(v14)
        | US1_0(v7) -> (* Some *)
            US1_0(v7)
    let v48 : string = "AUTOMATION"
    let v49 : string = method3(v48)
    let v52 : string = "True"
    let v53 : bool = v49 <> v52 
    let v120 : US2 =
        if v53 then
            US2_1
        else
            (* run_target_args'
            let v59 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v60 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v59 = v60 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v61 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v59 = v61 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v63 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v59 = v63 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v66 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v59 = v66 
            #endif
#if FABLE_COMPILER_PYTHON
            let v67 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v59 = v67 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v68 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v59 = v68 
            #endif
#else
            let v69 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v59 = v69 
            #endif
            let v70 : System.DateTime = _run_target_args'_v59 
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : (System.DateTime -> int64) = _.Ticks
            let v80 : int64 = v79 v70
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : (System.DateTime -> int64) = _.Ticks
            let v82 : int64 = v81 v70
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : int64 = null |> unbox<int64>
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v87 : (System.DateTime -> int64) = _.Ticks
            let v88 : int64 = v87 v70
            let _run_target_args'_v78 = v88 
            #endif
#if FABLE_COMPILER_PYTHON
            let v89 : (System.DateTime -> int64) = _.Ticks
            let v90 : int64 = v89 v70
            let _run_target_args'_v78 = v90 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v91 : (System.DateTime -> int64) = _.Ticks
            let v92 : int64 = v91 v70
            let _run_target_args'_v78 = v92 
            #endif
#else
            let v93 : (System.DateTime -> int64) = _.Ticks
            let v94 : int64 = v93 v70
            let _run_target_args'_v78 = v94 
            #endif
            let v95 : int64 = _run_target_args'_v78 
            let v116 : int64 = v95 |> int64 
            US2_0(v116)
    struct (v47, v120)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v13 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v51 
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "String::from($0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "String::from($0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "String::from($0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v65 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v65 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v73 
    #endif
#else
    let v77 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v77 
    #endif
    let v80 : std_string_String = _run_target_args'_v57 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _run_target_args'_v13 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v89 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v88 
    (* run_target_args'
    let v94 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v95 
    let _run_target_args'_v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v97 
    let _run_target_args'_v94 = v98 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v99 
    let _run_target_args'_v94 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v110 
    #endif
#else
    let v114 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v114 
    #endif
    let v117 : std_string_String = _run_target_args'_v94 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v117 v123 
    let _run_target_args'_v13 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v126 : string = null |> unbox<string>
    let _run_target_args'_v13 = v126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : string = null |> unbox<string>
    let _run_target_args'_v13 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v134 : string = null |> unbox<string>
    let _run_target_args'_v13 = v134 
    #endif
#else
    let v138 : string = null |> unbox<string>
    let _run_target_args'_v13 = v138 
    #endif
    let v141 : string = _run_target_args'_v13 
    let v149 : string = "True"
    let v150 : bool = v141 <> v149 
    let v162 : US2 =
        if v150 then
            US2_1
        else
            let v154 : string = $"near_sdk::env::block_timestamp()"
            let v155 : uint64 = Fable.Core.RustInterop.emitRustExpr () v154 
            let v157 : (uint64 -> int64) = int64
            let v158 : int64 = v157 v155
            US2_0(v158)
    let v163 : US1 = US1_1
    let _run_target_args'_v3 = struct (v163, v162) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v164 : US1, v165 : US2) = method2()
    let _run_target_args'_v3 = struct (v164, v165) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v166 : US1, v167 : US2) = method2()
    let _run_target_args'_v3 = struct (v166, v167) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v168 : US1, v169 : US2) = method2()
    let _run_target_args'_v3 = struct (v168, v169) 
    #endif
#else
    let struct (v170 : US1, v171 : US2) = method2()
    let _run_target_args'_v3 = struct (v170, v171) 
    #endif
    let struct (v172 : US1, v173 : US2) = _run_target_args'_v3 
    let v178 : Mut0 = {l0 = 1L} : Mut0
    let v179 : (string -> unit) = closure4()
    let v180 : Mut1 = {l0 = v179} : Mut1
    let v181 : Mut2 = {l0 = true} : Mut2
    let v182 : string = ""
    let v183 : Mut3 = {l0 = v182} : Mut3
    let v186 : US0 =
        match v172 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v184) -> (* Some *)
            v184
    let v187 : Mut4 = {l0 = v186} : Mut4
    let v195 : int64 option =
        match v173 with
        | US2_1 -> (* None *)
            let v193 : int64 option = None
            v193
        | US2_0(v188) -> (* Some *)
            let v190 : int64 option = Some v188 
            v190
    struct (v178, v180, v181, v183, v187, v195)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : US0 = v28.l0
    let v43 : bool = v26.l0
    let v44 : bool = v43 = false
    if v44 then
        false
    else
        let v45 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v46 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v42
        let v47 : bool = v45 >= v46
        v47
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v165 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v167 : (int64 -> US2) = method9()
    let v168 : US2 option = v5 |> Option.map v167 
    let v181 : US2 = US2_1
    let v182 : US2 = v168 |> Option.defaultValue v181 
    let v300 : System.DateTime =
        match v182 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v283 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v284 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v283 = v284 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v285 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v283 = v285 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v287 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v283 = v287 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v290 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v283 = v290 
            #endif
#if FABLE_COMPILER_PYTHON
            let v291 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v283 = v291 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v292 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v283 = v292 
            #endif
#else
            let v293 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v283 = v293 
            #endif
            let v294 : System.DateTime = _run_target_args'_v283 
            v294
        | US2_0(v186) -> (* Some *)
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v189 = v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v189 = v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v189 = v193 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v196 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v189 = v196 
            #endif
#if FABLE_COMPILER_PYTHON
            let v197 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v189 = v197 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v198 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v189 = v198 
            #endif
#else
            let v199 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v189 = v199 
            #endif
            let v200 : System.DateTime = _run_target_args'_v189 
            (* run_target_args'
            let v208 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v209 : (System.DateTime -> int64) = _.Ticks
            let v210 : int64 = v209 v200
            let _run_target_args'_v208 = v210 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v211 : (System.DateTime -> int64) = _.Ticks
            let v212 : int64 = v211 v200
            let _run_target_args'_v208 = v212 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v214 : int64 = null |> unbox<int64>
            let _run_target_args'_v208 = v214 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v217 : (System.DateTime -> int64) = _.Ticks
            let v218 : int64 = v217 v200
            let _run_target_args'_v208 = v218 
            #endif
#if FABLE_COMPILER_PYTHON
            let v219 : (System.DateTime -> int64) = _.Ticks
            let v220 : int64 = v219 v200
            let _run_target_args'_v208 = v220 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v221 : (System.DateTime -> int64) = _.Ticks
            let v222 : int64 = v221 v200
            let _run_target_args'_v208 = v222 
            #endif
#else
            let v223 : (System.DateTime -> int64) = _.Ticks
            let v224 : int64 = v223 v200
            let _run_target_args'_v208 = v224 
            #endif
            let v225 : int64 = _run_target_args'_v208 
            let v246 : int64 = v225 |> int64 
            let v249 : int64 = v246 - v186
            let v252 : System.TimeSpan = v249 |> System.TimeSpan 
            let v258 : (System.TimeSpan -> int32) = _.Hours
            let v259 : int32 = v258 v252
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v252
            let v268 : (System.TimeSpan -> int32) = _.Seconds
            let v269 : int32 = v268 v252
            let v273 : (System.TimeSpan -> int32) = _.Milliseconds
            let v274 : int32 = v273 v252
            let v278 : System.DateTime = System.DateTime (1, 1, 1, v259, v264, v269, v274)
            v278
    let v302 : string = method10()
    let v306 : bool = v302 = ""
    let v308 : string =
        if v306 then
            let v307 : string = "M-d-y hh:mm:ss tt"
            v307
        else
            v302
    let v309 : (string -> string) = v300.ToString
    let v310 : string = v309 v308
    let _run_target_args'_v165 = v310 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v326 : (int64 -> US2) = method9()
    let v327 : US2 option = v5 |> Option.map v326 
    let v340 : US2 = US2_1
    let v341 : US2 = v327 |> Option.defaultValue v340 
    let v459 : System.DateTime =
        match v341 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v442 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v443 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v442 = v443 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v444 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v442 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v446 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v442 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v449 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v442 = v449 
            #endif
#if FABLE_COMPILER_PYTHON
            let v450 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v442 = v450 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v451 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v442 = v451 
            #endif
#else
            let v452 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v442 = v452 
            #endif
            let v453 : System.DateTime = _run_target_args'_v442 
            v453
        | US2_0(v345) -> (* Some *)
            (* run_target_args'
            let v348 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v349 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v348 = v349 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v350 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v348 = v350 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v352 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v348 = v352 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v355 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v348 = v355 
            #endif
#if FABLE_COMPILER_PYTHON
            let v356 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v348 = v356 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v357 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v348 = v357 
            #endif
#else
            let v358 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v348 = v358 
            #endif
            let v359 : System.DateTime = _run_target_args'_v348 
            (* run_target_args'
            let v367 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v368 : (System.DateTime -> int64) = _.Ticks
            let v369 : int64 = v368 v359
            let _run_target_args'_v367 = v369 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v370 : (System.DateTime -> int64) = _.Ticks
            let v371 : int64 = v370 v359
            let _run_target_args'_v367 = v371 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v373 : int64 = null |> unbox<int64>
            let _run_target_args'_v367 = v373 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v376 : (System.DateTime -> int64) = _.Ticks
            let v377 : int64 = v376 v359
            let _run_target_args'_v367 = v377 
            #endif
#if FABLE_COMPILER_PYTHON
            let v378 : (System.DateTime -> int64) = _.Ticks
            let v379 : int64 = v378 v359
            let _run_target_args'_v367 = v379 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v359
            let _run_target_args'_v367 = v381 
            #endif
#else
            let v382 : (System.DateTime -> int64) = _.Ticks
            let v383 : int64 = v382 v359
            let _run_target_args'_v367 = v383 
            #endif
            let v384 : int64 = _run_target_args'_v367 
            let v405 : int64 = v384 |> int64 
            let v408 : int64 = v405 - v345
            let v411 : System.TimeSpan = v408 |> System.TimeSpan 
            let v417 : (System.TimeSpan -> int32) = _.Hours
            let v418 : int32 = v417 v411
            let v422 : (System.TimeSpan -> int32) = _.Minutes
            let v423 : int32 = v422 v411
            let v427 : (System.TimeSpan -> int32) = _.Seconds
            let v428 : int32 = v427 v411
            let v432 : (System.TimeSpan -> int32) = _.Milliseconds
            let v433 : int32 = v432 v411
            let v437 : System.DateTime = System.DateTime (1, 1, 1, v418, v423, v428, v433)
            v437
    let v461 : string = method10()
    let v465 : bool = v461 = ""
    let v467 : string =
        if v465 then
            let v466 : string = "M-d-y hh:mm:ss tt"
            v466
        else
            v461
    let v468 : (string -> string) = v459.ToString
    let v469 : string = v468 v467
    let _run_target_args'_v165 = v469 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v484 : string = $"near_sdk::env::block_timestamp()"
    let v485 : uint64 = Fable.Core.RustInterop.emitRustExpr () v484 
    let v487 : (int64 -> US2) = method9()
    let v488 : US2 option = v5 |> Option.map v487 
    let v501 : US2 = US2_1
    let v502 : US2 = v488 |> Option.defaultValue v501 
    let v514 : uint64 =
        match v502 with
        | US2_1 -> (* None *)
            v485
        | US2_0(v506) -> (* Some *)
            let v508 : (int64 -> uint64) = uint64
            let v509 : uint64 = v508 v506
            let v512 : uint64 = v485 - v509
            v512
    let v515 : uint64 = v514 / 1000000000UL
    let v516 : uint64 = v515 % 60UL
    let v517 : uint64 = v515 / 60UL
    let v518 : uint64 = v517 % 60UL
    let v519 : uint64 = v515 / 3600UL
    let v520 : uint64 = v519 % 24UL
    let v521 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v522 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v520, v518, v516) v521 
    let v523 : string = "fable_library_rust::String_::fromString($0)"
    let v524 : string = Fable.Core.RustInterop.emitRustExpr v522 v523 
    let _run_target_args'_v165 = v524 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v526 : (int64 -> US2) = method9()
    let v527 : US2 option = v5 |> Option.map v526 
    let v540 : US2 = US2_1
    let v541 : US2 = v527 |> Option.defaultValue v540 
    let v659 : System.DateTime =
        match v541 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v642 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v643 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v642 = v643 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v644 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v642 = v644 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v646 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v642 = v646 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v649 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v642 = v649 
            #endif
#if FABLE_COMPILER_PYTHON
            let v650 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v642 = v650 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v651 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v642 = v651 
            #endif
#else
            let v652 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v642 = v652 
            #endif
            let v653 : System.DateTime = _run_target_args'_v642 
            v653
        | US2_0(v545) -> (* Some *)
            (* run_target_args'
            let v548 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v549 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v548 = v549 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v550 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v548 = v550 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v552 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v548 = v552 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v555 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v548 = v555 
            #endif
#if FABLE_COMPILER_PYTHON
            let v556 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v548 = v556 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v557 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v548 = v557 
            #endif
#else
            let v558 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v548 = v558 
            #endif
            let v559 : System.DateTime = _run_target_args'_v548 
            (* run_target_args'
            let v567 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v568 : (System.DateTime -> int64) = _.Ticks
            let v569 : int64 = v568 v559
            let _run_target_args'_v567 = v569 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v570 : (System.DateTime -> int64) = _.Ticks
            let v571 : int64 = v570 v559
            let _run_target_args'_v567 = v571 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v573 : int64 = null |> unbox<int64>
            let _run_target_args'_v567 = v573 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v576 : (System.DateTime -> int64) = _.Ticks
            let v577 : int64 = v576 v559
            let _run_target_args'_v567 = v577 
            #endif
#if FABLE_COMPILER_PYTHON
            let v578 : (System.DateTime -> int64) = _.Ticks
            let v579 : int64 = v578 v559
            let _run_target_args'_v567 = v579 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v580 : (System.DateTime -> int64) = _.Ticks
            let v581 : int64 = v580 v559
            let _run_target_args'_v567 = v581 
            #endif
#else
            let v582 : (System.DateTime -> int64) = _.Ticks
            let v583 : int64 = v582 v559
            let _run_target_args'_v567 = v583 
            #endif
            let v584 : int64 = _run_target_args'_v567 
            let v605 : int64 = v584 |> int64 
            let v608 : int64 = v605 - v545
            let v611 : System.TimeSpan = v608 |> System.TimeSpan 
            let v617 : (System.TimeSpan -> int32) = _.Hours
            let v618 : int32 = v617 v611
            let v622 : (System.TimeSpan -> int32) = _.Minutes
            let v623 : int32 = v622 v611
            let v627 : (System.TimeSpan -> int32) = _.Seconds
            let v628 : int32 = v627 v611
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v611
            let v637 : System.DateTime = System.DateTime (1, 1, 1, v618, v623, v628, v633)
            v637
    let v661 : string = method11()
    let v665 : bool = v661 = ""
    let v667 : string =
        if v665 then
            let v666 : string = "M-d-y hh:mm:ss tt"
            v666
        else
            v661
    let v668 : (string -> string) = v659.ToString
    let v669 : string = v668 v667
    let _run_target_args'_v165 = v669 
    #endif
#if FABLE_COMPILER_PYTHON
    let v685 : (int64 -> US2) = method9()
    let v686 : US2 option = v5 |> Option.map v685 
    let v699 : US2 = US2_1
    let v700 : US2 = v686 |> Option.defaultValue v699 
    let v818 : System.DateTime =
        match v700 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v801 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v802 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v801 = v802 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v803 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v801 = v803 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v805 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v801 = v805 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v808 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v801 = v808 
            #endif
#if FABLE_COMPILER_PYTHON
            let v809 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v801 = v809 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v810 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v801 = v810 
            #endif
#else
            let v811 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v801 = v811 
            #endif
            let v812 : System.DateTime = _run_target_args'_v801 
            v812
        | US2_0(v704) -> (* Some *)
            (* run_target_args'
            let v707 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v708 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v707 = v708 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v709 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v707 = v709 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v711 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v707 = v711 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v714 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v707 = v714 
            #endif
#if FABLE_COMPILER_PYTHON
            let v715 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v707 = v715 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v716 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v707 = v716 
            #endif
#else
            let v717 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v707 = v717 
            #endif
            let v718 : System.DateTime = _run_target_args'_v707 
            (* run_target_args'
            let v726 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v727 : (System.DateTime -> int64) = _.Ticks
            let v728 : int64 = v727 v718
            let _run_target_args'_v726 = v728 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v729 : (System.DateTime -> int64) = _.Ticks
            let v730 : int64 = v729 v718
            let _run_target_args'_v726 = v730 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v732 : int64 = null |> unbox<int64>
            let _run_target_args'_v726 = v732 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v735 : (System.DateTime -> int64) = _.Ticks
            let v736 : int64 = v735 v718
            let _run_target_args'_v726 = v736 
            #endif
#if FABLE_COMPILER_PYTHON
            let v737 : (System.DateTime -> int64) = _.Ticks
            let v738 : int64 = v737 v718
            let _run_target_args'_v726 = v738 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v739 : (System.DateTime -> int64) = _.Ticks
            let v740 : int64 = v739 v718
            let _run_target_args'_v726 = v740 
            #endif
#else
            let v741 : (System.DateTime -> int64) = _.Ticks
            let v742 : int64 = v741 v718
            let _run_target_args'_v726 = v742 
            #endif
            let v743 : int64 = _run_target_args'_v726 
            let v764 : int64 = v743 |> int64 
            let v767 : int64 = v764 - v704
            let v770 : System.TimeSpan = v767 |> System.TimeSpan 
            let v776 : (System.TimeSpan -> int32) = _.Hours
            let v777 : int32 = v776 v770
            let v781 : (System.TimeSpan -> int32) = _.Minutes
            let v782 : int32 = v781 v770
            let v786 : (System.TimeSpan -> int32) = _.Seconds
            let v787 : int32 = v786 v770
            let v791 : (System.TimeSpan -> int32) = _.Milliseconds
            let v792 : int32 = v791 v770
            let v796 : System.DateTime = System.DateTime (1, 1, 1, v777, v782, v787, v792)
            v796
    let v820 : string = method11()
    let v824 : bool = v820 = ""
    let v826 : string =
        if v824 then
            let v825 : string = "M-d-y hh:mm:ss tt"
            v825
        else
            v820
    let v827 : (string -> string) = v818.ToString
    let v828 : string = v827 v826
    let _run_target_args'_v165 = v828 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v844 : (int64 -> US2) = method9()
    let v845 : US2 option = v5 |> Option.map v844 
    let v858 : US2 = US2_1
    let v859 : US2 = v845 |> Option.defaultValue v858 
    let v977 : System.DateTime =
        match v859 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v960 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v961 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v960 = v961 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v962 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v960 = v962 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v964 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v960 = v964 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v967 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v960 = v967 
            #endif
#if FABLE_COMPILER_PYTHON
            let v968 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v960 = v968 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v969 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v960 = v969 
            #endif
#else
            let v970 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v960 = v970 
            #endif
            let v971 : System.DateTime = _run_target_args'_v960 
            v971
        | US2_0(v863) -> (* Some *)
            (* run_target_args'
            let v866 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v867 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v866 = v867 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v868 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v866 = v868 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v870 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v866 = v870 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v873 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v866 = v873 
            #endif
#if FABLE_COMPILER_PYTHON
            let v874 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v866 = v874 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v875 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v866 = v875 
            #endif
#else
            let v876 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v866 = v876 
            #endif
            let v877 : System.DateTime = _run_target_args'_v866 
            (* run_target_args'
            let v885 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v886 : (System.DateTime -> int64) = _.Ticks
            let v887 : int64 = v886 v877
            let _run_target_args'_v885 = v887 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v888 : (System.DateTime -> int64) = _.Ticks
            let v889 : int64 = v888 v877
            let _run_target_args'_v885 = v889 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v891 : int64 = null |> unbox<int64>
            let _run_target_args'_v885 = v891 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v894 : (System.DateTime -> int64) = _.Ticks
            let v895 : int64 = v894 v877
            let _run_target_args'_v885 = v895 
            #endif
#if FABLE_COMPILER_PYTHON
            let v896 : (System.DateTime -> int64) = _.Ticks
            let v897 : int64 = v896 v877
            let _run_target_args'_v885 = v897 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v898 : (System.DateTime -> int64) = _.Ticks
            let v899 : int64 = v898 v877
            let _run_target_args'_v885 = v899 
            #endif
#else
            let v900 : (System.DateTime -> int64) = _.Ticks
            let v901 : int64 = v900 v877
            let _run_target_args'_v885 = v901 
            #endif
            let v902 : int64 = _run_target_args'_v885 
            let v923 : int64 = v902 |> int64 
            let v926 : int64 = v923 - v863
            let v929 : System.TimeSpan = v926 |> System.TimeSpan 
            let v935 : (System.TimeSpan -> int32) = _.Hours
            let v936 : int32 = v935 v929
            let v940 : (System.TimeSpan -> int32) = _.Minutes
            let v941 : int32 = v940 v929
            let v945 : (System.TimeSpan -> int32) = _.Seconds
            let v946 : int32 = v945 v929
            let v950 : (System.TimeSpan -> int32) = _.Milliseconds
            let v951 : int32 = v950 v929
            let v955 : System.DateTime = System.DateTime (1, 1, 1, v936, v941, v946, v951)
            v955
    let v979 : string = method11()
    let v983 : bool = v979 = ""
    let v985 : string =
        if v983 then
            let v984 : string = "M-d-y hh:mm:ss tt"
            v984
        else
            v979
    let v986 : (string -> string) = v977.ToString
    let v987 : string = v986 v985
    let _run_target_args'_v165 = v987 
    #endif
#else
    let v1003 : (int64 -> US2) = method9()
    let v1004 : US2 option = v5 |> Option.map v1003 
    let v1017 : US2 = US2_1
    let v1018 : US2 = v1004 |> Option.defaultValue v1017 
    let v1136 : System.DateTime =
        match v1018 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1119 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1120 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1119 = v1120 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1121 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1119 = v1121 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1123 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1119 = v1123 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1126 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1119 = v1126 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1127 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1119 = v1127 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1128 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1119 = v1128 
            #endif
#else
            let v1129 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1119 = v1129 
            #endif
            let v1130 : System.DateTime = _run_target_args'_v1119 
            v1130
        | US2_0(v1022) -> (* Some *)
            (* run_target_args'
            let v1025 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1026 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1025 = v1026 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1027 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1025 = v1027 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1029 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1025 = v1029 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1032 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1025 = v1032 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1033 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1025 = v1033 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1034 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1025 = v1034 
            #endif
#else
            let v1035 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1025 = v1035 
            #endif
            let v1036 : System.DateTime = _run_target_args'_v1025 
            (* run_target_args'
            let v1044 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1045 : (System.DateTime -> int64) = _.Ticks
            let v1046 : int64 = v1045 v1036
            let _run_target_args'_v1044 = v1046 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1047 : (System.DateTime -> int64) = _.Ticks
            let v1048 : int64 = v1047 v1036
            let _run_target_args'_v1044 = v1048 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1050 : int64 = null |> unbox<int64>
            let _run_target_args'_v1044 = v1050 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1053 : (System.DateTime -> int64) = _.Ticks
            let v1054 : int64 = v1053 v1036
            let _run_target_args'_v1044 = v1054 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1055 : (System.DateTime -> int64) = _.Ticks
            let v1056 : int64 = v1055 v1036
            let _run_target_args'_v1044 = v1056 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1057 : (System.DateTime -> int64) = _.Ticks
            let v1058 : int64 = v1057 v1036
            let _run_target_args'_v1044 = v1058 
            #endif
#else
            let v1059 : (System.DateTime -> int64) = _.Ticks
            let v1060 : int64 = v1059 v1036
            let _run_target_args'_v1044 = v1060 
            #endif
            let v1061 : int64 = _run_target_args'_v1044 
            let v1082 : int64 = v1061 |> int64 
            let v1085 : int64 = v1082 - v1022
            let v1088 : System.TimeSpan = v1085 |> System.TimeSpan 
            let v1094 : (System.TimeSpan -> int32) = _.Hours
            let v1095 : int32 = v1094 v1088
            let v1099 : (System.TimeSpan -> int32) = _.Minutes
            let v1100 : int32 = v1099 v1088
            let v1104 : (System.TimeSpan -> int32) = _.Seconds
            let v1105 : int32 = v1104 v1088
            let v1109 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1110 : int32 = v1109 v1088
            let v1114 : System.DateTime = System.DateTime (1, 1, 1, v1095, v1100, v1105, v1110)
            v1114
    let v1138 : string = method11()
    let v1142 : bool = v1138 = ""
    let v1144 : string =
        if v1142 then
            let v1143 : string = "M-d-y hh:mm:ss tt"
            v1143
        else
            v1138
    let v1145 : (string -> string) = v1136.ToString
    let v1146 : string = v1145 v1144
    let _run_target_args'_v165 = v1146 
    #endif
    let v1161 : string = _run_target_args'_v165 
    v1161
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v1 : string = "Debug"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_bright_blue"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_bright_blue"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_bright_blue"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[94m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[94m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[94m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[94m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "args"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"%A{v0}"
    let v38 : string = $"{v34}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v2, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v37 : char list = []
    let v39 : char list = '/' :: v37 
    let v43 : char list = ' ' :: v39 
    let v48 : (char list -> (char [])) = List.toArray
    let v49 : (char []) = v48 v43
    let v52 : string = v8.TrimEnd v49 
    v52
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.main"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure8(v24)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : (string -> unit) = closure9()
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = v27.l0
    let v52 : bool = v51 = ""
    let v60 : string =
        if v52 then
            v0
        else
            let v53 : bool = v0 = ""
            if v53 then
                let v54 : string = v27.l0
                v54
            else
                let v55 : string = v27.l0
                let v56 : string = "\n"
                let v57 : string = v55 + v56 
                let v58 : string = v57 + v0 
                v58
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _run_target_args'_v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "&*$0"
    let v69 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "&*$0"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _run_target_args'_v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v81 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v81 
    #endif
#else
    let v85 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v85 
    #endif
    let v88 : Ref<Str> = _run_target_args'_v65 
    let v94 : string = $"$0.chars()"
    let v95 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v88 v94 
    let v96 : string = "$0"
    let v97 : _ = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "$0.collect::<Vec<_>>()"
    let v99 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v101 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v99 v100 
    let v102 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = "x"
    let v105 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v104 
    let v106 : string = "String::from_iter($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "true; $0 }).collect::<Vec<_>>()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_vec_map"
    let v111 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "$0.len()"
    let v113 : unativeint = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v119 : int32 = v113 |> int32 
    let v129 : string = ""
    let v130 : bool = v0 <> v129 
    let v134 : bool =
        if v130 then
            let v133 : bool = v119 <= 1
            v133
        else
            false
    if v134 then
        v27.l0 <- v60
        ()
    else
        v27.l0 <- v129
        let v135 : string = "true; $0.into_iter().for_each(|x| { //"
        let v136 : bool = Fable.Core.RustInterop.emitRustExpr v111 v135 
        let v137 : string = "x"
        let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v137 
        let v139 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v140 : bool = Fable.Core.RustInterop.emitRustExpr v138 v139 
        let v141 : string = $"true"
        let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
        let v143 : string = "true; }); //"
        let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v47 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#else
    v47 v0
    #endif
    // run_target_args' is_unit
    let v145 : (string -> unit) = v25.l0
    v145 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method16(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US8 =
    US8_0(v0)
and method25 () : (Vec<std_string_String> -> US8) =
    closure14()
and method26 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method27 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "extension"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "new_code"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method29 () : string =
    let v0 : string = ""
    v0
and method30 (v0 : string) : string =
    v0
and method31 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method32 () : string =
    let v0 : string = ""
    v0
and method28 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v107 : unit = ()
    let _let'_v107 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v110 : string seq = _let'_v107 
    let v116 : string = method29()
    let v118 : bool = v116 = "\n"
    let v120 : string =
        if v118 then
            method30(v116)
        else
            v116
    let v121 : (string -> (string seq -> string)) = String.concat
    let v122 : (string seq -> string) = v121 v120
    let v123 : string = v122 v110
    let v126 : Result<string, std_io_Error> = Ok v123 
    (* run_target_args'
    let v128 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v129 : string = "$0.unwrap()"
    let v130 : string = Fable.Core.RustInterop.emitRustExpr v126 v129 
    let _run_target_args'_v128 = v130 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v131 : string = "$0.unwrap()"
    let v132 : string = Fable.Core.RustInterop.emitRustExpr v126 v131 
    let _run_target_args'_v128 = v132 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v126 v133 
    let _run_target_args'_v128 = v134 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v135 : string = match v126 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v128 = v135 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : string = match v126 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v128 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : string = match v126 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v128 = v137 
    #endif
#else
    let v138 : string = match v126 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v128 = v138 
    #endif
    let v139 : string = _run_target_args'_v128 
    let _run_target_args'_v5 = v139 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v143 : string = null |> unbox<string>
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : string = "crypto"
    let v151 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v150 
    let v152 : string = "v151.createHash($0)"
    let v153 : string = "sha256"
    let v154 : obj = Fable.Core.JsInterop.emitJsExpr v153 v152 
    let v155 : string = "$0.update($1, 'utf8')"
    let v156 : obj = Fable.Core.JsInterop.emitJsExpr struct (v154, v0) v155 
    let v157 : string = "$0.digest($1)"
    let v158 : string = "hex"
    let v159 : string = Fable.Core.JsInterop.emitJsExpr struct (v156, v158) v157 
    let _run_target_args'_v5 = v159 
    #endif
#if FABLE_COMPILER_PYTHON
    let v161 : string = "hashlib"
    let v162 : IHashlibSha256 = Fable.Core.PyInterop.importAll v161 
    let v163 : string = "v162.sha256()"
    let v164 : obj = Fable.Core.PyInterop.emitPyExpr () v163 
    let v168 : string = "$0.encode($1)"
    let v169 : string = "utf-8"
    let v170 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v169) v168 
    let v173 : string = "v164.update($0)"
    Fable.Core.PyInterop.emitPyExpr v170 v173 
    let v175 : string = "v164.hexdigest()"
    let v176 : string = Fable.Core.PyInterop.emitPyExpr () v175 
    let _run_target_args'_v5 = v176 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v180 : string = null |> unbox<string>
    let _run_target_args'_v5 = v180 
    #endif
#else
    let v183 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v184 : System.Security.Cryptography.SHA256 = v183 ()
    use v184 = v184 
    let v185 : System.Security.Cryptography.SHA256 = v184 
    let v186 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v187 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v188 : (string -> (uint8 [])) = v187 v186
    let v189 : (uint8 []) = v188 v0
    let v190 : ((uint8 []) -> (uint8 [])) = v185.ComputeHash
    let v191 : (uint8 []) = v190 v189
    let v192 : int32 = v191.Length
    let v193 : (string []) = Array.zeroCreate<string> (v192)
    let v194 : Mut5 = {l0 = 0} : Mut5
    while method31(v192, v194) do
        let v196 : int32 = v194.l0
        let v197 : uint8 = v191.[int v196]
        let v198 : (string -> string) = v197.ToString
        let v199 : string = "x2"
        let v200 : string = v198 v199
        v193.[int v196] <- v200
        let v201 : int32 = v196 + 1
        v194.l0 <- v201
        ()
    let v205 : unit = ()
    let _let'_v205 =
        seq {
            for i = 0 to v193.Length - 1 do yield v193.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v208 : string seq = _let'_v205 
    let v214 : string = method32()
    let v216 : bool = v214 = "\n"
    let v218 : string =
        if v216 then
            method30(v214)
        else
            v214
    let v219 : (string -> (string seq -> string)) = String.concat
    let v220 : (string seq -> string) = v219 v218
    let v221 : string = v220 v208
    let _run_target_args'_v5 = v221 
    #endif
    let v224 : string = _run_target_args'_v5 
    v224
and method33 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v59 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "format!(\"{}\", $0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v60 
    let _run_target_args'_v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "format!(\"{}\", $0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v62 
    let _run_target_args'_v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "format!(\"{}\", $0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v64 
    let _run_target_args'_v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v75 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v75 
    #endif
#else
    let v79 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v79 
    #endif
    let v82 : std_string_String = _run_target_args'_v59 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _run_target_args'_v4 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = null |> unbox<string>
    let _run_target_args'_v4 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = null |> unbox<string>
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = "fs"
    let v99 : IFs = Fable.Core.JsInterop.importAll v98 
    let v100 : string = "fs.realpathSync('.')"
    let v101 : string = Fable.Core.JsInterop.emitJsExpr () v100 
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : string = null |> unbox<string>
    let _run_target_args'_v4 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = null |> unbox<string>
    let _run_target_args'_v4 = v107 
    #endif
#else
    let v110 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v111 : string = v110 ()
    let _run_target_args'_v4 = v111 
    #endif
    let v112 : string = _run_target_args'_v4 
    v112
and method35 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v44 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v45 
    let _run_target_args'_v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v47 
    let _run_target_args'_v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v49 
    let _run_target_args'_v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v60 
    #endif
#else
    let v64 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v64 
    #endif
    let v67 : std_string_String = _run_target_args'_v44 
    (* run_target_args'
    let v77 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v78 
    let _run_target_args'_v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "std::path::PathBuf::from($0)"
    let v81 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v80 
    let _run_target_args'_v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "std::path::PathBuf::from($0)"
    let v83 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v82 
    let _run_target_args'_v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v93 
    #endif
#else
    let v97 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v97 
    #endif
    let v100 : std_path_PathBuf = _run_target_args'_v77 
    (* run_target_args'
    let v110 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v111 
    let _run_target_args'_v110 = v112 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v113 
    let _run_target_args'_v110 = v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : string = "&*$0"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v115 
    let _run_target_args'_v110 = v116 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v122 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v122 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v126 
    #endif
#else
    let v130 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v130 
    #endif
    let v133 : Ref<Str> = _run_target_args'_v110 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "String::from($0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v144 
    let _run_target_args'_v143 = v145 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = "String::from($0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v146 
    let _run_target_args'_v143 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "String::from($0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v148 
    let _run_target_args'_v143 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v159 
    #endif
#else
    let v163 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v163 
    #endif
    let v166 : std_string_String = _run_target_args'_v143 
    let v172 : string = "$0.join($1)"
    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v100, v166) v172 
    (* run_target_args'
    let v178 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v179 : string = "$0.display()"
    let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
    let _run_target_args'_v178 = v180 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v181 : string = "$0.display()"
    let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
    let _run_target_args'_v178 = v182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v183 : string = "$0.display()"
    let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
    let _run_target_args'_v178 = v184 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v186 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v186 
    #endif
#if FABLE_COMPILER_PYTHON
    let v190 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v190 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v194 
    #endif
#else
    let v198 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v198 
    #endif
    let v201 : std_path_Display = _run_target_args'_v178 
    (* run_target_args'
    let v211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v212 : string = "format!(\"{}\", $0)"
    let v213 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v212 
    let _run_target_args'_v211 = v213 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v214 : string = "format!(\"{}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v214 
    let _run_target_args'_v211 = v215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v216 : string = "format!(\"{}\", $0)"
    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v216 
    let _run_target_args'_v211 = v217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v219 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v219 
    #endif
#if FABLE_COMPILER_PYTHON
    let v223 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v223 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v227 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v227 
    #endif
#else
    let v231 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v231 
    #endif
    let v234 : std_string_String = _run_target_args'_v211 
    let v240 : string = "fable_library_rust::String_::fromString($0)"
    let v241 : string = Fable.Core.RustInterop.emitRustExpr v234 v240 
    let _run_target_args'_v6 = v241 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v242 : US3 = US3_1
    let v243 : US4 = US4_3(v242)
    let v244 : string = $"file_system.(</>) / target: {v243} / a: {v0} / b: {v1}"
    let v245 : string = failwith<string> v244
    let _run_target_args'_v6 = v245 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v247 : string = null |> unbox<string>
    let _run_target_args'_v6 = v247 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v250 : string = "path"
    let v251 : IPathJoin = Fable.Core.JsInterop.importAll v250 
    let v252 : string = "v251.join($0, $1)"
    let v253 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v252 
    let _run_target_args'_v6 = v253 
    #endif
#if FABLE_COMPILER_PYTHON
    let v254 : US3 = US3_0
    let v255 : US4 = US4_5(v254)
    let v256 : string = $"file_system.(</>) / target: {v255} / a: {v0} / b: {v1}"
    let v257 : string = failwith<string> v256
    let _run_target_args'_v6 = v257 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v258 : US3 = US3_1
    let v259 : US4 = US4_1(v258)
    let v260 : string = $"file_system.(</>) / target: {v259} / a: {v0} / b: {v1}"
    let v261 : string = failwith<string> v260
    let _run_target_args'_v6 = v261 
    #endif
#else
    let v262 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v262 
    #endif
    let v263 : string = _run_target_args'_v6 
    v263
and method37 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_file()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.File.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure15 () (v0 : string) : bool =
    method37(v0)
and method38 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_dir()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.Directory.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure16 () (v0 : string) : bool =
    method38(v0)
and method40 (v0 : string) : string option =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v23 
    #endif
#else
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v27 
    #endif
    let v30 : Ref<Str> = _run_target_args'_v7 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
#else
    let v60 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v60 
    #endif
    let v63 : std_string_String = _run_target_args'_v40 
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "std::path::PathBuf::from($0)"
    let v75 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v74 
    let _run_target_args'_v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : string = "std::path::PathBuf::from($0)"
    let v77 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v78 
    let _run_target_args'_v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v89 
    #endif
#else
    let v93 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v93 
    #endif
    let v96 : std_path_PathBuf = _run_target_args'_v73 
    let v102 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v103 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let v104 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "x"
    let v107 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v106 
    (* run_target_args'
    let v112 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v113 : string = "$0.display()"
    let v114 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v113 
    let _run_target_args'_v112 = v114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : string = "$0.display()"
    let v116 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v115 
    let _run_target_args'_v112 = v116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : string = "$0.display()"
    let v118 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v117 
    let _run_target_args'_v112 = v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v120 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v120 
    #endif
#if FABLE_COMPILER_PYTHON
    let v124 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v124 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v128 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v128 
    #endif
#else
    let v132 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v132 
    #endif
    let v135 : std_path_Display = _run_target_args'_v112 
    (* run_target_args'
    let v145 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v146 : string = "format!(\"{}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v146 
    let _run_target_args'_v145 = v147 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v148 : string = "format!(\"{}\", $0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v148 
    let _run_target_args'_v145 = v149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v150 : string = "format!(\"{}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v150 
    let _run_target_args'_v145 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v153 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v153 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v157 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v161 
    #endif
#else
    let v165 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v165 
    #endif
    let v168 : std_string_String = _run_target_args'_v145 
    let v174 : string = "fable_library_rust::String_::fromString($0)"
    let v175 : string = Fable.Core.RustInterop.emitRustExpr v168 v174 
    let v176 : string = "true; $0 })"
    let v177 : bool = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : string = "_optionm_map_"
    let v179 : string option = Fable.Core.RustInterop.emitRustExpr () v178 
    let _run_target_args'_v2 = v179 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v180 : string option = None
    let _run_target_args'_v2 = v180 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v181 : string option = None
    let _run_target_args'_v2 = v181 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v182 : string = "path"
    let v183 : IPathDirname = Fable.Core.JsInterop.importAll v182 
    let v184 : string = "v183.dirname($0)"
    let v185 : string = Fable.Core.JsInterop.emitJsExpr v0 v184 
    let v186 : bool = v185 = v0
    let v189 : US5 =
        if v186 then
            US5_1
        else
            US5_0(v185)
    let v197 : string option =
        match v189 with
        | US5_1 -> (* None *)
            let v195 : string option = None
            v195
        | US5_0(v190) -> (* Some *)
            let v192 : string option = Some v190 
            v192
    let _run_target_args'_v2 = v197 
    #endif
#if FABLE_COMPILER_PYTHON
    let v198 : string option = None
    let _run_target_args'_v2 = v198 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v199 : string option = None
    let _run_target_args'_v2 = v199 
    #endif
#else
    let v200 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v201 : System_IO_DirectoryInfo = v200 v0
    let v203 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v207 : bool = v201 = v203 
    let v249 : US5 =
        if v207 then
            US5_1
        else
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = null |> unbox<string>
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = null |> unbox<string>
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v225 : string = null |> unbox<string>
            let _run_target_args'_v215 = v225 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v229 : string = null |> unbox<string>
            let _run_target_args'_v215 = v229 
            #endif
#if FABLE_COMPILER_PYTHON
            let v233 : string = null |> unbox<string>
            let _run_target_args'_v215 = v233 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v237 : string = null |> unbox<string>
            let _run_target_args'_v215 = v237 
            #endif
#else
            let v240 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v241 : string = v240 v201
            let _run_target_args'_v215 = v241 
            #endif
            let v242 : string = _run_target_args'_v215 
            US5_0(v242)
    let v257 : string option =
        match v249 with
        | US5_1 -> (* None *)
            let v255 : string option = None
            v255
        | US5_0(v250) -> (* Some *)
            let v252 : string option = Some v250 
            v252
    let _run_target_args'_v2 = v257 
    #endif
    let v258 : string option = _run_target_args'_v2 
    v258
and method41 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US10 =
    let v5 : string = method35(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US10_0(v4)
    else
        let v8 : string option = method40(v4)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v8 |> Option.map v10 
        let v24 : US5 = US5_1
        let v25 : US5 = v11 |> Option.defaultValue v24 
        match v25 with
        | US5_1 -> (* None *)
            let v31 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v32 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v33 : string = v31 + v32 
            US10_1(v33)
        | US5_0(v29) -> (* Some *)
            method41(v0, v1, v2, v3, v29)
and method39 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US10 =
    let v4 : string = method35(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US10_0(v1)
    else
        let v7 : string option = method40(v1)
        let v9 : (string -> US5) = method6()
        let v10 : US5 option = v7 |> Option.map v9 
        let v23 : US5 = US5_1
        let v24 : US5 = v10 |> Option.defaultValue v23 
        match v24 with
        | US5_1 -> (* None *)
            let v30 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v31 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v32 : string = v30 + v31 
            US10_1(v32)
        | US5_0(v28) -> (* Some *)
            method41(v0, v1, v2, v3, v28)
and method36 (v0 : US9, v1 : string, v2 : string) : US10 =
    let v3 : bool =
        match v0 with
        | US9_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method39(v1, v2, v3, v6)
and method42 () : string =
    
    
    
    
    
    let v1 : string = "Warning"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_yellow"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_yellow"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_yellow"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[93m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[93m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[93m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[93m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method44 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "dir"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "error"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method43 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method44(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.get_workspace_root"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method42()
        let v47 : string = method43(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method49 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v43 : string = $"{v36}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v2, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = v2.l0
    v51
and closure18 () (v0 : std_io_Error) : string =
    method49(v0)
and method48 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US11 =
    US11_0(v0)
and method50 () : (std_path_PathBuf -> US11) =
    closure19()
and closure20 () (v0 : string) : US11 =
    US11_1(v0)
and method51 () : (string -> US11) =
    closure20()
and method54 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v157 : (string -> US5) = method6()
    let v158 : US5 option = v155 |> Option.map v157 
    let v171 : US5 = US5_1
    let v172 : US5 = v158 |> Option.defaultValue v171 
    let v179 : string =
        match v172 with
        | US5_1 -> (* None *)
            let v177 : string = ""
            v177
        | US5_0(v176) -> (* Some *)
            v176
    let _run_target_args'_v5 = v179 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v180 : US3 = US3_1
    let v181 : US4 = US4_3(v180)
    let v182 : string = $"file_system.get_file_name / target: {v181} / path: {v0}"
    let v183 : string = failwith<string> v182
    let _run_target_args'_v5 = v183 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v185 : string = null |> unbox<string>
    let _run_target_args'_v5 = v185 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v188 : string = "path"
    let v189 : IPathBasename = Fable.Core.JsInterop.importAll v188 
    let v190 : string = "v189.basename($0)"
    let v191 : string = Fable.Core.JsInterop.emitJsExpr v0 v190 
    let _run_target_args'_v5 = v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v192 : US3 = US3_0
    let v193 : US4 = US4_5(v192)
    let v194 : string = $"file_system.get_file_name / target: {v193} / path: {v0}"
    let v195 : string = failwith<string> v194
    let _run_target_args'_v5 = v195 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v196 : US3 = US3_1
    let v197 : US4 = US4_1(v196)
    let v198 : string = $"file_system.get_file_name / target: {v197} / path: {v0}"
    let v199 : string = failwith<string> v198
    let _run_target_args'_v5 = v199 
    #endif
#else
    let v200 : (string -> string) = System.IO.Path.GetFileName
    let v201 : string = v200 v0
    let _run_target_args'_v5 = v201 
    #endif
    let v202 : string = _run_target_args'_v5 
    v202
and method55 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method53 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method54(v4)
    let v6 : string option = method40(v4)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v6 |> Option.map v8 
    let v22 : US5 = US5_1
    let v23 : US5 = v9 |> Option.defaultValue v22 
    let v27 : string = method55(v3)
    let v28 : bool = v2 >= 11uy
    if v28 then
        let v29 : string = $"file_system.read_link / "
        let v30 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v31 : string = v29 + v30 
        (* run_target_args'
        let v36 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v37 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v38 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v31 v37 
        let _run_target_args'_v36 = v38 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v39 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v40 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v31 v39 
        let _run_target_args'_v36 = v40 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v41 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v42 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v31 v41 
        let _run_target_args'_v36 = v42 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v44 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v44 
        #endif
#if FABLE_COMPILER_PYTHON
        let v48 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v48 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v52 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v52 
        #endif
#else
        let v56 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v56 
        #endif
        let v59 : std_io_Error = _run_target_args'_v36 
        (* run_target_args'
        let v66 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v67 : string = "Err($0)"
        let v68 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v59 v67 
        let _run_target_args'_v66 = v68 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v69 : string = "Err($0)"
        let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v59 v69 
        let _run_target_args'_v66 = v70 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v71 : string = "Err($0)"
        let v72 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v59 v71 
        let _run_target_args'_v66 = v72 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v73 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v73 
        #endif
#if FABLE_COMPILER_PYTHON
        let v74 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v74 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v75 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v75 
        #endif
#else
        let v76 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v76 
        #endif
        let v77 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v66 
        v77
    else
        match v23 with
        | US5_0(v80) -> (* Some *)
            let v83 : string = ""
            let v84 : bool = v4 <> v83 
            if v84 then
                let v87 : uint8 = v2 + 1uy
                let v88 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v87
                let v89 : Result<std_path_PathBuf, std_io_Error> = v88 v80
                let v90 : (std_io_Error -> string) = method48()
                (* run_target_args'
                let v92 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v93 : string = "$0.map_err(|x| $1(x))"
                let v94 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v89, v90) v93 
                let _run_target_args'_v92 = v94 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v95 : string = "$0.map_err(|x| $1(x))"
                let v96 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v89, v90) v95 
                let _run_target_args'_v92 = v96 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v97 : string = "$0.map_err(|x| $1(x))"
                let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v89, v90) v97 
                let _run_target_args'_v92 = v98 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v99 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v99 
                #endif
#if FABLE_COMPILER_PYTHON
                let v100 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v100 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v101 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v101 
                #endif
#else
                let v102 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v102 
                #endif
                let v103 : Result<std_path_PathBuf, string> = _run_target_args'_v92 
                let v106 : (std_path_PathBuf -> US11) = method50()
                let v107 : (string -> US11) = method51()
                let v108 : US11 = match v103 with Ok x -> v106 x | Error x -> v107 x
                match v108 with
                | US11_1(v262) -> (* Error *)
                    let v263 : string = $"file_system.read_link / "
                    let v264 : string = $"error': {v262} / error: {v27} / name: {v5}"
                    let v265 : string = v263 + v264 
                    (* run_target_args'
                    let v270 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v271 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v272 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v265 v271 
                    let _run_target_args'_v270 = v272 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v273 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v274 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v265 v273 
                    let _run_target_args'_v270 = v274 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v275 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v276 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v265 v275 
                    let _run_target_args'_v270 = v276 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v278 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v278 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v286 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v286 
                    #endif
#else
                    let v290 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v290 
                    #endif
                    let v293 : std_io_Error = _run_target_args'_v270 
                    (* run_target_args'
                    let v300 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v301 : string = "Err($0)"
                    let v302 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v293 v301 
                    let _run_target_args'_v300 = v302 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v303 : string = "Err($0)"
                    let v304 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v293 v303 
                    let _run_target_args'_v300 = v304 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v305 : string = "Err($0)"
                    let v306 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v293 v305 
                    let _run_target_args'_v300 = v306 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v307 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v307 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v309 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v309 
                    #endif
#else
                    let v310 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v310 
                    #endif
                    let v311 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v300 
                    v311
                | US11_0(v109) -> (* Ok *)
                    (* run_target_args'
                    let v114 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v115 : string = "$0.display()"
                    let v116 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v109 v115 
                    let _run_target_args'_v114 = v116 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v117 : string = "$0.display()"
                    let v118 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v109 v117 
                    let _run_target_args'_v114 = v118 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v119 : string = "$0.display()"
                    let v120 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v109 v119 
                    let _run_target_args'_v114 = v120 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v122 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v122 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v126 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v126 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v130 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v130 
                    #endif
#else
                    let v134 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v134 
                    #endif
                    let v137 : std_path_Display = _run_target_args'_v114 
                    let v144 : string = v137 |> string 
                    let v147 : string = method35(v144, v5)
                    (* run_target_args'
                    let v152 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v153 : string = "&*$0"
                    let v154 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v147 v153 
                    let _run_target_args'_v152 = v154 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v155 : string = "&*$0"
                    let v156 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v147 v155 
                    let _run_target_args'_v152 = v156 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v147 v157 
                    let _run_target_args'_v152 = v158 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v160 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v160 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v164 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v164 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v168 
                    #endif
#else
                    let v172 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v172 
                    #endif
                    let v175 : Ref<Str> = _run_target_args'_v152 
                    (* run_target_args'
                    let v185 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v186 : string = "String::from($0)"
                    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v186 
                    let _run_target_args'_v185 = v187 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v188 : string = "String::from($0)"
                    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v188 
                    let _run_target_args'_v185 = v189 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v190 : string = "String::from($0)"
                    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v190 
                    let _run_target_args'_v185 = v191 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v193 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v193 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v197 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v197 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v201 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v201 
                    #endif
#else
                    let v205 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v205 
                    #endif
                    let v208 : std_string_String = _run_target_args'_v185 
                    (* run_target_args'
                    let v218 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v219 : string = "std::path::PathBuf::from($0)"
                    let v220 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v208 v219 
                    let _run_target_args'_v218 = v220 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v221 : string = "std::path::PathBuf::from($0)"
                    let v222 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v208 v221 
                    let _run_target_args'_v218 = v222 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v223 : string = "std::path::PathBuf::from($0)"
                    let v224 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v208 v223 
                    let _run_target_args'_v218 = v224 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v226 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v226 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v230 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v230 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v234 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v234 
                    #endif
#else
                    let v238 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v238 
                    #endif
                    let v241 : std_path_PathBuf = _run_target_args'_v218 
                    (* run_target_args'
                    let v248 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v249 : string = "Ok($0)"
                    let v250 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v241 v249 
                    let _run_target_args'_v248 = v250 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v251 : string = "Ok($0)"
                    let v252 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v241 v251 
                    let _run_target_args'_v248 = v252 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v253 : string = "Ok($0)"
                    let v254 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v241 v253 
                    let _run_target_args'_v248 = v254 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v255 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v255 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v256 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v256 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v257 
                    #endif
#else
                    let v258 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v258 
                    #endif
                    let v259 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v248 
                    v259
            else
                let v316 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v317 : string = $"path: {v0} / error: {v27} / path': {v4} / name: {v5}"
                let v318 : string = v316 + v317 
                (* run_target_args'
                let v323 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v324 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v325 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v318 v324 
                let _run_target_args'_v323 = v325 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v326 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v327 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v318 v326 
                let _run_target_args'_v323 = v327 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v328 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v329 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v318 v328 
                let _run_target_args'_v323 = v329 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v331 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v331 
                #endif
#if FABLE_COMPILER_PYTHON
                let v335 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v335 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v339 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v339 
                #endif
#else
                let v343 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v343 
                #endif
                let v346 : std_io_Error = _run_target_args'_v323 
                (* run_target_args'
                let v353 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v354 : string = "Err($0)"
                let v355 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v353 = v355 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v356 : string = "Err($0)"
                let v357 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v353 = v357 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v358 : string = "Err($0)"
                let v359 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v346 v358 
                let _run_target_args'_v353 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v361 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v361 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v362 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v362 
                #endif
#else
                let v363 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v363 
                #endif
                let v364 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v353 
                v364
        | _ ->
            let v368 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v369 : string = $"path: {v0} / error: {v27} / path': {v4} / name: {v5}"
            let v370 : string = v368 + v369 
            (* run_target_args'
            let v375 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v376 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v377 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v370 v376 
            let _run_target_args'_v375 = v377 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v378 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v379 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v370 v378 
            let _run_target_args'_v375 = v379 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v380 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v381 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v370 v380 
            let _run_target_args'_v375 = v381 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v383 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v383 
            #endif
#if FABLE_COMPILER_PYTHON
            let v387 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v387 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v391 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v391 
            #endif
#else
            let v395 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v395 
            #endif
            let v398 : std_io_Error = _run_target_args'_v375 
            (* run_target_args'
            let v405 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v406 : string = "Err($0)"
            let v407 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v398 v406 
            let _run_target_args'_v405 = v407 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v408 : string = "Err($0)"
            let v409 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v398 v408 
            let _run_target_args'_v405 = v409 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v410 : string = "Err($0)"
            let v411 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v398 v410 
            let _run_target_args'_v405 = v411 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v412 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v412 
            #endif
#if FABLE_COMPILER_PYTHON
            let v413 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v413 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v414 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v414 
            #endif
#else
            let v415 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v415 
            #endif
            let v416 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v405 
            v416
and method52 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method48()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US11) = method50()
    let v27 : (string -> US11) = method51()
    let v28 : US11 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v49 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US11_1(v45) -> (* Error *)
            let v46 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method53(v0, v46, v1, v45, v2)
        | US11_0(v29) -> (* Ok *)
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "Ok($0)"
            let v33 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v29 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v29 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v29 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v38 : Result<std_path_PathBuf, std_io_Error> = v29 |> Ok
            let _run_target_args'_v31 = v38 
            #endif
#if FABLE_COMPILER_PYTHON
            let v39 : Result<std_path_PathBuf, std_io_Error> = v29 |> Ok
            let _run_target_args'_v31 = v39 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v40 : Result<std_path_PathBuf, std_io_Error> = v29 |> Ok
            let _run_target_args'_v31 = v40 
            #endif
#else
            let v41 : Result<std_path_PathBuf, std_io_Error> = v29 |> Ok
            let _run_target_args'_v31 = v41 
            #endif
            let v42 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v31 
            v42
    let _run_target_args'_v7 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "std::fs::read_link(&*$0)"
    let v51 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v50 
    let v52 : (std_io_Error -> string) = method48()
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "$0.map_err(|x| $1(x))"
    let v56 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v51, v52) v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v51, v52) v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v51, v52) v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v61 : Result<std_path_PathBuf, string> = match v51 with Ok x -> Ok x | Error x -> Error (v52 x)
    let _run_target_args'_v54 = v61 
    #endif
#if FABLE_COMPILER_PYTHON
    let v62 : Result<std_path_PathBuf, string> = match v51 with Ok x -> Ok x | Error x -> Error (v52 x)
    let _run_target_args'_v54 = v62 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : Result<std_path_PathBuf, string> = match v51 with Ok x -> Ok x | Error x -> Error (v52 x)
    let _run_target_args'_v54 = v63 
    #endif
#else
    let v64 : Result<std_path_PathBuf, string> = match v51 with Ok x -> Ok x | Error x -> Error (v52 x)
    let _run_target_args'_v54 = v64 
    #endif
    let v65 : Result<std_path_PathBuf, string> = _run_target_args'_v54 
    let v68 : (std_path_PathBuf -> US11) = method50()
    let v69 : (string -> US11) = method51()
    let v70 : US11 = match v65 with Ok x -> v68 x | Error x -> v69 x
    let v91 : Result<std_path_PathBuf, std_io_Error> =
        match v70 with
        | US11_1(v87) -> (* Error *)
            let v88 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method53(v0, v88, v1, v87, v2)
        | US11_0(v71) -> (* Ok *)
            (* run_target_args'
            let v73 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v74 : string = "Ok($0)"
            let v75 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v71 v74 
            let _run_target_args'_v73 = v75 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v76 : string = "Ok($0)"
            let v77 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v71 v76 
            let _run_target_args'_v73 = v77 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v78 : string = "Ok($0)"
            let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v71 v78 
            let _run_target_args'_v73 = v79 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v80 : Result<std_path_PathBuf, std_io_Error> = v71 |> Ok
            let _run_target_args'_v73 = v80 
            #endif
#if FABLE_COMPILER_PYTHON
            let v81 : Result<std_path_PathBuf, std_io_Error> = v71 |> Ok
            let _run_target_args'_v73 = v81 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v82 : Result<std_path_PathBuf, std_io_Error> = v71 |> Ok
            let _run_target_args'_v73 = v82 
            #endif
#else
            let v83 : Result<std_path_PathBuf, std_io_Error> = v71 |> Ok
            let _run_target_args'_v73 = v83 
            #endif
            let v84 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v73 
            v84
    let _run_target_args'_v7 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v92 : string = "std::fs::read_link(&*$0)"
    let v93 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v92 
    let v94 : (std_io_Error -> string) = method48()
    (* run_target_args'
    let v96 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v97 : string = "$0.map_err(|x| $1(x))"
    let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v93, v94) v97 
    let _run_target_args'_v96 = v98 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v99 : string = "$0.map_err(|x| $1(x))"
    let v100 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v93, v94) v99 
    let _run_target_args'_v96 = v100 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = "$0.map_err(|x| $1(x))"
    let v102 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v93, v94) v101 
    let _run_target_args'_v96 = v102 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : Result<std_path_PathBuf, string> = match v93 with Ok x -> Ok x | Error x -> Error (v94 x)
    let _run_target_args'_v96 = v103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v104 : Result<std_path_PathBuf, string> = match v93 with Ok x -> Ok x | Error x -> Error (v94 x)
    let _run_target_args'_v96 = v104 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v105 : Result<std_path_PathBuf, string> = match v93 with Ok x -> Ok x | Error x -> Error (v94 x)
    let _run_target_args'_v96 = v105 
    #endif
#else
    let v106 : Result<std_path_PathBuf, string> = match v93 with Ok x -> Ok x | Error x -> Error (v94 x)
    let _run_target_args'_v96 = v106 
    #endif
    let v107 : Result<std_path_PathBuf, string> = _run_target_args'_v96 
    let v110 : (std_path_PathBuf -> US11) = method50()
    let v111 : (string -> US11) = method51()
    let v112 : US11 = match v107 with Ok x -> v110 x | Error x -> v111 x
    let v133 : Result<std_path_PathBuf, std_io_Error> =
        match v112 with
        | US11_1(v129) -> (* Error *)
            let v130 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method53(v0, v130, v1, v129, v2)
        | US11_0(v113) -> (* Ok *)
            (* run_target_args'
            let v115 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v116 : string = "Ok($0)"
            let v117 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v113 v116 
            let _run_target_args'_v115 = v117 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v118 : string = "Ok($0)"
            let v119 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v113 v118 
            let _run_target_args'_v115 = v119 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v120 : string = "Ok($0)"
            let v121 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v113 v120 
            let _run_target_args'_v115 = v121 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v122 : Result<std_path_PathBuf, std_io_Error> = v113 |> Ok
            let _run_target_args'_v115 = v122 
            #endif
#if FABLE_COMPILER_PYTHON
            let v123 : Result<std_path_PathBuf, std_io_Error> = v113 |> Ok
            let _run_target_args'_v115 = v123 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v124 : Result<std_path_PathBuf, std_io_Error> = v113 |> Ok
            let _run_target_args'_v115 = v124 
            #endif
#else
            let v125 : Result<std_path_PathBuf, std_io_Error> = v113 |> Ok
            let _run_target_args'_v115 = v125 
            #endif
            let v126 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v115 
            v126
    let _run_target_args'_v7 = v133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v135 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v135 
    #endif
#if FABLE_COMPILER_PYTHON
    let v139 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v139 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v143 
    #endif
#else
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v147 
    #endif
    let v150 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v150
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method52(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method56 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method54(v0)
    let v5 : string option = method40(v0)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v5 |> Option.map v7 
    let v21 : US5 = US5_1
    let v22 : US5 = v8 |> Option.defaultValue v21 
    let v26 : string = method55(v3)
    let v27 : bool = v2 >= 11uy
    if v27 then
        let v28 : string = $"file_system.read_link / "
        let v29 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v30 : string = v28 + v29 
        (* run_target_args'
        let v35 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v36 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v37 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v30 v36 
        let _run_target_args'_v35 = v37 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v38 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v39 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v30 v38 
        let _run_target_args'_v35 = v39 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v40 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v41 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v30 v40 
        let _run_target_args'_v35 = v41 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v43 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v43 
        #endif
#if FABLE_COMPILER_PYTHON
        let v47 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v47 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v51 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v51 
        #endif
#else
        let v55 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v55 
        #endif
        let v58 : std_io_Error = _run_target_args'_v35 
        (* run_target_args'
        let v65 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v66 : string = "Err($0)"
        let v67 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v58 v66 
        let _run_target_args'_v65 = v67 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v68 : string = "Err($0)"
        let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v58 v68 
        let _run_target_args'_v65 = v69 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v70 : string = "Err($0)"
        let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v58 v70 
        let _run_target_args'_v65 = v71 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v72 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v72 
        #endif
#if FABLE_COMPILER_PYTHON
        let v73 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v73 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v74 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v74 
        #endif
#else
        let v75 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v75 
        #endif
        let v76 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v65 
        v76
    else
        match v22 with
        | US5_0(v79) -> (* Some *)
            let v82 : string = ""
            let v83 : bool = v0 <> v82 
            if v83 then
                let v86 : uint8 = v2 + 1uy
                let v87 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v86
                let v88 : Result<std_path_PathBuf, std_io_Error> = v87 v79
                let v89 : (std_io_Error -> string) = method48()
                (* run_target_args'
                let v91 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v92 : string = "$0.map_err(|x| $1(x))"
                let v93 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v88, v89) v92 
                let _run_target_args'_v91 = v93 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94 : string = "$0.map_err(|x| $1(x))"
                let v95 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v88, v89) v94 
                let _run_target_args'_v91 = v95 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v96 : string = "$0.map_err(|x| $1(x))"
                let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v88, v89) v96 
                let _run_target_args'_v91 = v97 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v98 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v98 
                #endif
#if FABLE_COMPILER_PYTHON
                let v99 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v99 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v100 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v100 
                #endif
#else
                let v101 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v101 
                #endif
                let v102 : Result<std_path_PathBuf, string> = _run_target_args'_v91 
                let v105 : (std_path_PathBuf -> US11) = method50()
                let v106 : (string -> US11) = method51()
                let v107 : US11 = match v102 with Ok x -> v105 x | Error x -> v106 x
                match v107 with
                | US11_1(v261) -> (* Error *)
                    let v262 : string = $"file_system.read_link / "
                    let v263 : string = $"error': {v261} / error: {v26} / name: {v4}"
                    let v264 : string = v262 + v263 
                    (* run_target_args'
                    let v269 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v270 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v271 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v264 v270 
                    let _run_target_args'_v269 = v271 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v272 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v273 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v264 v272 
                    let _run_target_args'_v269 = v273 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v274 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v275 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v264 v274 
                    let _run_target_args'_v269 = v275 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v277 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v277 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v285 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v285 
                    #endif
#else
                    let v289 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v289 
                    #endif
                    let v292 : std_io_Error = _run_target_args'_v269 
                    (* run_target_args'
                    let v299 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v300 : string = "Err($0)"
                    let v301 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v292 v300 
                    let _run_target_args'_v299 = v301 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v302 : string = "Err($0)"
                    let v303 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v292 v302 
                    let _run_target_args'_v299 = v303 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v304 : string = "Err($0)"
                    let v305 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v292 v304 
                    let _run_target_args'_v299 = v305 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v306 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v306 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v308 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v308 
                    #endif
#else
                    let v309 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v309 
                    #endif
                    let v310 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v299 
                    v310
                | US11_0(v108) -> (* Ok *)
                    (* run_target_args'
                    let v113 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v114 : string = "$0.display()"
                    let v115 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v108 v114 
                    let _run_target_args'_v113 = v115 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v116 : string = "$0.display()"
                    let v117 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v108 v116 
                    let _run_target_args'_v113 = v117 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v118 : string = "$0.display()"
                    let v119 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v108 v118 
                    let _run_target_args'_v113 = v119 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v121 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v121 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v125 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v125 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v129 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v129 
                    #endif
#else
                    let v133 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v133 
                    #endif
                    let v136 : std_path_Display = _run_target_args'_v113 
                    let v143 : string = v136 |> string 
                    let v146 : string = method35(v143, v4)
                    (* run_target_args'
                    let v151 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v152 : string = "&*$0"
                    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v146 v152 
                    let _run_target_args'_v151 = v153 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v154 : string = "&*$0"
                    let v155 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v146 v154 
                    let _run_target_args'_v151 = v155 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v156 : string = "&*$0"
                    let v157 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v146 v156 
                    let _run_target_args'_v151 = v157 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v159 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v159 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v163 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v163 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v167 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v167 
                    #endif
#else
                    let v171 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v171 
                    #endif
                    let v174 : Ref<Str> = _run_target_args'_v151 
                    (* run_target_args'
                    let v184 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v185 : string = "String::from($0)"
                    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v185 
                    let _run_target_args'_v184 = v186 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v187 : string = "String::from($0)"
                    let v188 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v187 
                    let _run_target_args'_v184 = v188 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v189 : string = "String::from($0)"
                    let v190 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v189 
                    let _run_target_args'_v184 = v190 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v192 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v192 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v196 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v196 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v200 
                    #endif
#else
                    let v204 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v204 
                    #endif
                    let v207 : std_string_String = _run_target_args'_v184 
                    (* run_target_args'
                    let v217 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v218 : string = "std::path::PathBuf::from($0)"
                    let v219 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v207 v218 
                    let _run_target_args'_v217 = v219 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v220 : string = "std::path::PathBuf::from($0)"
                    let v221 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v207 v220 
                    let _run_target_args'_v217 = v221 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v222 : string = "std::path::PathBuf::from($0)"
                    let v223 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v207 v222 
                    let _run_target_args'_v217 = v223 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v225 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v225 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v229 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v229 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v233 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v233 
                    #endif
#else
                    let v237 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v237 
                    #endif
                    let v240 : std_path_PathBuf = _run_target_args'_v217 
                    (* run_target_args'
                    let v247 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v248 : string = "Ok($0)"
                    let v249 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v240 v248 
                    let _run_target_args'_v247 = v249 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v250 : string = "Ok($0)"
                    let v251 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v240 v250 
                    let _run_target_args'_v247 = v251 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v252 : string = "Ok($0)"
                    let v253 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v240 v252 
                    let _run_target_args'_v247 = v253 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v254 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v254 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v255 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v255 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v256 
                    #endif
#else
                    let v257 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v257 
                    #endif
                    let v258 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v247 
                    v258
            else
                let v315 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v316 : string = $"path: {v0} / error: {v26} / path': {v0} / name: {v4}"
                let v317 : string = v315 + v316 
                (* run_target_args'
                let v322 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v323 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v324 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v317 v323 
                let _run_target_args'_v322 = v324 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v325 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v326 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v317 v325 
                let _run_target_args'_v322 = v326 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v327 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v328 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v317 v327 
                let _run_target_args'_v322 = v328 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v330 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v330 
                #endif
#if FABLE_COMPILER_PYTHON
                let v334 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v334 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v338 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v338 
                #endif
#else
                let v342 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v342 
                #endif
                let v345 : std_io_Error = _run_target_args'_v322 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "Err($0)"
                let v354 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v345 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "Err($0)"
                let v356 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v345 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "Err($0)"
                let v358 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v345 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v360 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v360 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v361 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v361 
                #endif
#else
                let v362 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v362 
                #endif
                let v363 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v352 
                v363
        | _ ->
            let v367 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v368 : string = $"path: {v0} / error: {v26} / path': {v0} / name: {v4}"
            let v369 : string = v367 + v368 
            (* run_target_args'
            let v374 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v375 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v376 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v369 v375 
            let _run_target_args'_v374 = v376 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v377 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v378 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v369 v377 
            let _run_target_args'_v374 = v378 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v379 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v380 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v369 v379 
            let _run_target_args'_v374 = v380 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v382 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v382 
            #endif
#if FABLE_COMPILER_PYTHON
            let v386 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v386 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v390 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v390 
            #endif
#else
            let v394 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v394 
            #endif
            let v397 : std_io_Error = _run_target_args'_v374 
            (* run_target_args'
            let v404 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v405 : string = "Err($0)"
            let v406 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v397 v405 
            let _run_target_args'_v404 = v406 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v407 : string = "Err($0)"
            let v408 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v397 v407 
            let _run_target_args'_v404 = v408 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v409 : string = "Err($0)"
            let v410 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v397 v409 
            let _run_target_args'_v404 = v410 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v411 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v411 
            #endif
#if FABLE_COMPILER_PYTHON
            let v412 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v412 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v413 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v413 
            #endif
#else
            let v414 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v414 
            #endif
            let v415 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v404 
            v415
and method47 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method48()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US11) = method50()
    let v26 : (string -> US11) = method51()
    let v27 : US11 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v48 : Result<std_path_PathBuf, std_io_Error> =
        match v27 with
        | US11_1(v44) -> (* Error *)
            let v45 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method56(v0, v45, v1, v44)
        | US11_0(v28) -> (* Ok *)
            (* run_target_args'
            let v30 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v31 : string = "Ok($0)"
            let v32 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v28 v31 
            let _run_target_args'_v30 = v32 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v33 : string = "Ok($0)"
            let v34 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v28 v33 
            let _run_target_args'_v30 = v34 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v28 v35 
            let _run_target_args'_v30 = v36 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v37 : Result<std_path_PathBuf, std_io_Error> = v28 |> Ok
            let _run_target_args'_v30 = v37 
            #endif
#if FABLE_COMPILER_PYTHON
            let v38 : Result<std_path_PathBuf, std_io_Error> = v28 |> Ok
            let _run_target_args'_v30 = v38 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v39 : Result<std_path_PathBuf, std_io_Error> = v28 |> Ok
            let _run_target_args'_v30 = v39 
            #endif
#else
            let v40 : Result<std_path_PathBuf, std_io_Error> = v28 |> Ok
            let _run_target_args'_v30 = v40 
            #endif
            let v41 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v30 
            v41
    let _run_target_args'_v6 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "std::fs::read_link(&*$0)"
    let v50 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : (std_io_Error -> string) = method48()
    (* run_target_args'
    let v53 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : string = "$0.map_err(|x| $1(x))"
    let v55 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v50, v51) v54 
    let _run_target_args'_v53 = v55 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v56 : string = "$0.map_err(|x| $1(x))"
    let v57 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v50, v51) v56 
    let _run_target_args'_v53 = v57 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v50, v51) v58 
    let _run_target_args'_v53 = v59 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v60 : Result<std_path_PathBuf, string> = match v50 with Ok x -> Ok x | Error x -> Error (v51 x)
    let _run_target_args'_v53 = v60 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : Result<std_path_PathBuf, string> = match v50 with Ok x -> Ok x | Error x -> Error (v51 x)
    let _run_target_args'_v53 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : Result<std_path_PathBuf, string> = match v50 with Ok x -> Ok x | Error x -> Error (v51 x)
    let _run_target_args'_v53 = v62 
    #endif
#else
    let v63 : Result<std_path_PathBuf, string> = match v50 with Ok x -> Ok x | Error x -> Error (v51 x)
    let _run_target_args'_v53 = v63 
    #endif
    let v64 : Result<std_path_PathBuf, string> = _run_target_args'_v53 
    let v67 : (std_path_PathBuf -> US11) = method50()
    let v68 : (string -> US11) = method51()
    let v69 : US11 = match v64 with Ok x -> v67 x | Error x -> v68 x
    let v90 : Result<std_path_PathBuf, std_io_Error> =
        match v69 with
        | US11_1(v86) -> (* Error *)
            let v87 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method56(v0, v87, v1, v86)
        | US11_0(v70) -> (* Ok *)
            (* run_target_args'
            let v72 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v73 : string = "Ok($0)"
            let v74 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v70 v73 
            let _run_target_args'_v72 = v74 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v75 : string = "Ok($0)"
            let v76 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v70 v75 
            let _run_target_args'_v72 = v76 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v77 : string = "Ok($0)"
            let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v70 v77 
            let _run_target_args'_v72 = v78 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v79 : Result<std_path_PathBuf, std_io_Error> = v70 |> Ok
            let _run_target_args'_v72 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : Result<std_path_PathBuf, std_io_Error> = v70 |> Ok
            let _run_target_args'_v72 = v80 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v81 : Result<std_path_PathBuf, std_io_Error> = v70 |> Ok
            let _run_target_args'_v72 = v81 
            #endif
#else
            let v82 : Result<std_path_PathBuf, std_io_Error> = v70 |> Ok
            let _run_target_args'_v72 = v82 
            #endif
            let v83 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v72 
            v83
    let _run_target_args'_v6 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "std::fs::read_link(&*$0)"
    let v92 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v91 
    let v93 : (std_io_Error -> string) = method48()
    (* run_target_args'
    let v95 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "$0.map_err(|x| $1(x))"
    let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v92, v93) v96 
    let _run_target_args'_v95 = v97 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v98 : string = "$0.map_err(|x| $1(x))"
    let v99 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v92, v93) v98 
    let _run_target_args'_v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = "$0.map_err(|x| $1(x))"
    let v101 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v92, v93) v100 
    let _run_target_args'_v95 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : Result<std_path_PathBuf, string> = match v92 with Ok x -> Ok x | Error x -> Error (v93 x)
    let _run_target_args'_v95 = v102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : Result<std_path_PathBuf, string> = match v92 with Ok x -> Ok x | Error x -> Error (v93 x)
    let _run_target_args'_v95 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : Result<std_path_PathBuf, string> = match v92 with Ok x -> Ok x | Error x -> Error (v93 x)
    let _run_target_args'_v95 = v104 
    #endif
#else
    let v105 : Result<std_path_PathBuf, string> = match v92 with Ok x -> Ok x | Error x -> Error (v93 x)
    let _run_target_args'_v95 = v105 
    #endif
    let v106 : Result<std_path_PathBuf, string> = _run_target_args'_v95 
    let v109 : (std_path_PathBuf -> US11) = method50()
    let v110 : (string -> US11) = method51()
    let v111 : US11 = match v106 with Ok x -> v109 x | Error x -> v110 x
    let v132 : Result<std_path_PathBuf, std_io_Error> =
        match v111 with
        | US11_1(v128) -> (* Error *)
            let v129 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method56(v0, v129, v1, v128)
        | US11_0(v112) -> (* Ok *)
            (* run_target_args'
            let v114 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v115 : string = "Ok($0)"
            let v116 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v112 v115 
            let _run_target_args'_v114 = v116 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v117 : string = "Ok($0)"
            let v118 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v112 v117 
            let _run_target_args'_v114 = v118 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v119 : string = "Ok($0)"
            let v120 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v112 v119 
            let _run_target_args'_v114 = v120 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v121 : Result<std_path_PathBuf, std_io_Error> = v112 |> Ok
            let _run_target_args'_v114 = v121 
            #endif
#if FABLE_COMPILER_PYTHON
            let v122 : Result<std_path_PathBuf, std_io_Error> = v112 |> Ok
            let _run_target_args'_v114 = v122 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v123 : Result<std_path_PathBuf, std_io_Error> = v112 |> Ok
            let _run_target_args'_v114 = v123 
            #endif
#else
            let v124 : Result<std_path_PathBuf, std_io_Error> = v112 |> Ok
            let _run_target_args'_v114 = v124 
            #endif
            let v125 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v114 
            v125
    let _run_target_args'_v6 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v134 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v138 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v138 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v142 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v142 
    #endif
#else
    let v146 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v146 
    #endif
    let v149 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v149
and method58 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method59 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method60 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method62 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method54(v4)
    let v6 : string option = method40(v4)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v6 |> Option.map v8 
    let v22 : US5 = US5_1
    let v23 : US5 = v9 |> Option.defaultValue v22 
    let v27 : string = method49(v3)
    let v28 : bool = v2 >= 11uy
    if v28 then
        let v29 : string = $"file_system.read_link / "
        let v30 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v31 : string = v29 + v30 
        (* run_target_args'
        let v36 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v37 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v38 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v31 v37 
        let _run_target_args'_v36 = v38 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v39 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v40 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v31 v39 
        let _run_target_args'_v36 = v40 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v41 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v42 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v31 v41 
        let _run_target_args'_v36 = v42 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v44 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v44 
        #endif
#if FABLE_COMPILER_PYTHON
        let v48 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v48 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v52 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v52 
        #endif
#else
        let v56 : std_io_Error = v31 |> unbox<std_io_Error>
        let _run_target_args'_v36 = v56 
        #endif
        let v59 : std_io_Error = _run_target_args'_v36 
        (* run_target_args'
        let v66 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v67 : string = "Err($0)"
        let v68 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v59 v67 
        let _run_target_args'_v66 = v68 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v69 : string = "Err($0)"
        let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v59 v69 
        let _run_target_args'_v66 = v70 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v71 : string = "Err($0)"
        let v72 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v59 v71 
        let _run_target_args'_v66 = v72 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v73 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v73 
        #endif
#if FABLE_COMPILER_PYTHON
        let v74 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v74 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v75 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v75 
        #endif
#else
        let v76 : Result<std_path_PathBuf, std_io_Error> = v59 |> Error
        let _run_target_args'_v66 = v76 
        #endif
        let v77 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v66 
        v77
    else
        match v23 with
        | US5_0(v80) -> (* Some *)
            let v83 : string = ""
            let v84 : bool = v4 <> v83 
            if v84 then
                let v87 : uint8 = v2 + 1uy
                let v88 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v87
                let v89 : Result<std_path_PathBuf, std_io_Error> = v88 v80
                let v90 : (std_io_Error -> string) = method48()
                (* run_target_args'
                let v92 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v93 : string = "$0.map_err(|x| $1(x))"
                let v94 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v89, v90) v93 
                let _run_target_args'_v92 = v94 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v95 : string = "$0.map_err(|x| $1(x))"
                let v96 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v89, v90) v95 
                let _run_target_args'_v92 = v96 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v97 : string = "$0.map_err(|x| $1(x))"
                let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v89, v90) v97 
                let _run_target_args'_v92 = v98 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v99 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v99 
                #endif
#if FABLE_COMPILER_PYTHON
                let v100 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v100 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v101 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v101 
                #endif
#else
                let v102 : Result<std_path_PathBuf, string> = match v89 with Ok x -> Ok x | Error x -> Error (v90 x)
                let _run_target_args'_v92 = v102 
                #endif
                let v103 : Result<std_path_PathBuf, string> = _run_target_args'_v92 
                let v106 : (std_path_PathBuf -> US11) = method50()
                let v107 : (string -> US11) = method51()
                let v108 : US11 = match v103 with Ok x -> v106 x | Error x -> v107 x
                match v108 with
                | US11_1(v262) -> (* Error *)
                    let v263 : string = $"file_system.read_link / "
                    let v264 : string = $"error': {v262} / error: {v27} / name: {v5}"
                    let v265 : string = v263 + v264 
                    (* run_target_args'
                    let v270 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v271 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v272 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v265 v271 
                    let _run_target_args'_v270 = v272 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v273 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v274 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v265 v273 
                    let _run_target_args'_v270 = v274 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v275 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v276 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v265 v275 
                    let _run_target_args'_v270 = v276 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v278 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v278 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v286 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v286 
                    #endif
#else
                    let v290 : std_io_Error = v265 |> unbox<std_io_Error>
                    let _run_target_args'_v270 = v290 
                    #endif
                    let v293 : std_io_Error = _run_target_args'_v270 
                    (* run_target_args'
                    let v300 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v301 : string = "Err($0)"
                    let v302 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v293 v301 
                    let _run_target_args'_v300 = v302 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v303 : string = "Err($0)"
                    let v304 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v293 v303 
                    let _run_target_args'_v300 = v304 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v305 : string = "Err($0)"
                    let v306 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v293 v305 
                    let _run_target_args'_v300 = v306 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v307 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v307 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v309 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v309 
                    #endif
#else
                    let v310 : Result<std_path_PathBuf, std_io_Error> = v293 |> Error
                    let _run_target_args'_v300 = v310 
                    #endif
                    let v311 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v300 
                    v311
                | US11_0(v109) -> (* Ok *)
                    (* run_target_args'
                    let v114 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v115 : string = "$0.display()"
                    let v116 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v109 v115 
                    let _run_target_args'_v114 = v116 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v117 : string = "$0.display()"
                    let v118 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v109 v117 
                    let _run_target_args'_v114 = v118 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v119 : string = "$0.display()"
                    let v120 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v109 v119 
                    let _run_target_args'_v114 = v120 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v122 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v122 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v126 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v126 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v130 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v130 
                    #endif
#else
                    let v134 : std_path_Display = v109 |> unbox<std_path_Display>
                    let _run_target_args'_v114 = v134 
                    #endif
                    let v137 : std_path_Display = _run_target_args'_v114 
                    let v144 : string = v137 |> string 
                    let v147 : string = method35(v144, v5)
                    (* run_target_args'
                    let v152 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v153 : string = "&*$0"
                    let v154 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v147 v153 
                    let _run_target_args'_v152 = v154 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v155 : string = "&*$0"
                    let v156 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v147 v155 
                    let _run_target_args'_v152 = v156 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v147 v157 
                    let _run_target_args'_v152 = v158 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v160 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v160 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v164 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v164 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v168 
                    #endif
#else
                    let v172 : Ref<Str> = v147 |> unbox<Ref<Str>>
                    let _run_target_args'_v152 = v172 
                    #endif
                    let v175 : Ref<Str> = _run_target_args'_v152 
                    (* run_target_args'
                    let v185 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v186 : string = "String::from($0)"
                    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v186 
                    let _run_target_args'_v185 = v187 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v188 : string = "String::from($0)"
                    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v188 
                    let _run_target_args'_v185 = v189 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v190 : string = "String::from($0)"
                    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v190 
                    let _run_target_args'_v185 = v191 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v193 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v193 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v197 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v197 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v201 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v201 
                    #endif
#else
                    let v205 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v185 = v205 
                    #endif
                    let v208 : std_string_String = _run_target_args'_v185 
                    (* run_target_args'
                    let v218 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v219 : string = "std::path::PathBuf::from($0)"
                    let v220 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v208 v219 
                    let _run_target_args'_v218 = v220 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v221 : string = "std::path::PathBuf::from($0)"
                    let v222 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v208 v221 
                    let _run_target_args'_v218 = v222 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v223 : string = "std::path::PathBuf::from($0)"
                    let v224 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v208 v223 
                    let _run_target_args'_v218 = v224 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v226 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v226 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v230 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v230 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v234 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v234 
                    #endif
#else
                    let v238 : std_path_PathBuf = v208 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v218 = v238 
                    #endif
                    let v241 : std_path_PathBuf = _run_target_args'_v218 
                    (* run_target_args'
                    let v248 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v249 : string = "Ok($0)"
                    let v250 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v241 v249 
                    let _run_target_args'_v248 = v250 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v251 : string = "Ok($0)"
                    let v252 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v241 v251 
                    let _run_target_args'_v248 = v252 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v253 : string = "Ok($0)"
                    let v254 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v241 v253 
                    let _run_target_args'_v248 = v254 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v255 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v255 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v256 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v256 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v257 
                    #endif
#else
                    let v258 : Result<std_path_PathBuf, std_io_Error> = v241 |> Ok
                    let _run_target_args'_v248 = v258 
                    #endif
                    let v259 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v248 
                    v259
            else
                let v316 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v317 : string = $"path: {v0} / error: {v27} / path': {v4} / name: {v5}"
                let v318 : string = v316 + v317 
                (* run_target_args'
                let v323 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v324 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v325 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v318 v324 
                let _run_target_args'_v323 = v325 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v326 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v327 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v318 v326 
                let _run_target_args'_v323 = v327 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v328 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v329 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v318 v328 
                let _run_target_args'_v323 = v329 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v331 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v331 
                #endif
#if FABLE_COMPILER_PYTHON
                let v335 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v335 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v339 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v339 
                #endif
#else
                let v343 : std_io_Error = v318 |> unbox<std_io_Error>
                let _run_target_args'_v323 = v343 
                #endif
                let v346 : std_io_Error = _run_target_args'_v323 
                (* run_target_args'
                let v353 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v354 : string = "Err($0)"
                let v355 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v353 = v355 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v356 : string = "Err($0)"
                let v357 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v353 = v357 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v358 : string = "Err($0)"
                let v359 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v346 v358 
                let _run_target_args'_v353 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v361 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v361 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v362 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v362 
                #endif
#else
                let v363 : Result<std_path_PathBuf, std_io_Error> = v346 |> Error
                let _run_target_args'_v353 = v363 
                #endif
                let v364 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v353 
                v364
        | _ ->
            let v368 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v369 : string = $"path: {v0} / error: {v27} / path': {v4} / name: {v5}"
            let v370 : string = v368 + v369 
            (* run_target_args'
            let v375 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v376 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v377 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v370 v376 
            let _run_target_args'_v375 = v377 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v378 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v379 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v370 v378 
            let _run_target_args'_v375 = v379 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v380 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v381 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v370 v380 
            let _run_target_args'_v375 = v381 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v383 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v383 
            #endif
#if FABLE_COMPILER_PYTHON
            let v387 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v387 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v391 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v391 
            #endif
#else
            let v395 : std_io_Error = v370 |> unbox<std_io_Error>
            let _run_target_args'_v375 = v395 
            #endif
            let v398 : std_io_Error = _run_target_args'_v375 
            (* run_target_args'
            let v405 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v406 : string = "Err($0)"
            let v407 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v398 v406 
            let _run_target_args'_v405 = v407 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v408 : string = "Err($0)"
            let v409 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v398 v408 
            let _run_target_args'_v405 = v409 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v410 : string = "Err($0)"
            let v411 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v398 v410 
            let _run_target_args'_v405 = v411 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v412 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v412 
            #endif
#if FABLE_COMPILER_PYTHON
            let v413 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v413 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v414 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v414 
            #endif
#else
            let v415 : Result<std_path_PathBuf, std_io_Error> = v398 |> Error
            let _run_target_args'_v405 = v415 
            #endif
            let v416 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v405 
            v416
and method61 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v42 : System.IO.FileAttributes = method58(v36)
    let v43 : System.IO.FileAttributes = method59()
    let v44 : bool = method60(v43, v42)
    if v44 then
        (* run_target_args'
        let v49 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v51 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v59 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v63 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v63 
        #endif
#if FABLE_COMPILER_PYTHON
        let v67 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v67 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v71 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v71 
        #endif
#else
        let v75 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v49 = v75 
        #endif
        let v78 : System_IO_FileInfo = _run_target_args'_v49 
        (* run_target_args'
        let v88 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v90 : string = null |> unbox<string>
        let _run_target_args'_v88 = v90 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v94 : string = null |> unbox<string>
        let _run_target_args'_v88 = v94 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v98 : string = null |> unbox<string>
        let _run_target_args'_v88 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v102 : string = null |> unbox<string>
        let _run_target_args'_v88 = v102 
        #endif
#if FABLE_COMPILER_PYTHON
        let v106 : string = null |> unbox<string>
        let _run_target_args'_v88 = v106 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v110 : string = null |> unbox<string>
        let _run_target_args'_v88 = v110 
        #endif
#else
        let v113 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v114 : string = v113 v78
        let _run_target_args'_v88 = v114 
        #endif
        let v115 : string = _run_target_args'_v88 
        let v122 : std_path_PathBuf = v115 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v126 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v127 : string = "Ok($0)"
        let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
        let _run_target_args'_v126 = v128 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v129 : string = "Ok($0)"
        let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
        let _run_target_args'_v126 = v130 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v131 : string = "Ok($0)"
        let v132 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v131 
        let _run_target_args'_v126 = v132 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v133 
        #endif
#if FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v134 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v135 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v135 
        #endif
#else
        let v136 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v136 
        #endif
        let v137 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v126 
        v137
    else
        let v140 : string = $"file_system.read_link / Fsharp / "
        let v141 : string = $"The file or directory is not a reparse point. / "
        let v142 : string = v140 + v141 
        let v143 : string = $"path: {v0} / result: {v44} / path': {v2} / n: {v1}"
        let v144 : string = v142 + v143 
        (* run_target_args'
        let v149 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v150 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v151 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v150 
        let _run_target_args'_v149 = v151 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v152 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v153 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v152 
        let _run_target_args'_v149 = v153 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v154 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v155 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v154 
        let _run_target_args'_v149 = v155 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v157 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v157 
        #endif
#if FABLE_COMPILER_PYTHON
        let v161 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v161 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v165 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v165 
        #endif
#else
        let v169 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v169 
        #endif
        let v172 : std_io_Error = _run_target_args'_v149 
        let v178 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method62(v0, v178, v1, v172, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method61(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method63 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method54(v0)
    let v5 : string option = method40(v0)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v5 |> Option.map v7 
    let v21 : US5 = US5_1
    let v22 : US5 = v8 |> Option.defaultValue v21 
    let v26 : string = method49(v3)
    let v27 : bool = v2 >= 11uy
    if v27 then
        let v28 : string = $"file_system.read_link / "
        let v29 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v30 : string = v28 + v29 
        (* run_target_args'
        let v35 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v36 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v37 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v30 v36 
        let _run_target_args'_v35 = v37 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v38 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v39 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v30 v38 
        let _run_target_args'_v35 = v39 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v40 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v41 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v30 v40 
        let _run_target_args'_v35 = v41 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v43 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v43 
        #endif
#if FABLE_COMPILER_PYTHON
        let v47 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v47 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v51 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v51 
        #endif
#else
        let v55 : std_io_Error = v30 |> unbox<std_io_Error>
        let _run_target_args'_v35 = v55 
        #endif
        let v58 : std_io_Error = _run_target_args'_v35 
        (* run_target_args'
        let v65 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v66 : string = "Err($0)"
        let v67 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v58 v66 
        let _run_target_args'_v65 = v67 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v68 : string = "Err($0)"
        let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v58 v68 
        let _run_target_args'_v65 = v69 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v70 : string = "Err($0)"
        let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v58 v70 
        let _run_target_args'_v65 = v71 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v72 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v72 
        #endif
#if FABLE_COMPILER_PYTHON
        let v73 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v73 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v74 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v74 
        #endif
#else
        let v75 : Result<std_path_PathBuf, std_io_Error> = v58 |> Error
        let _run_target_args'_v65 = v75 
        #endif
        let v76 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v65 
        v76
    else
        match v22 with
        | US5_0(v79) -> (* Some *)
            let v82 : string = ""
            let v83 : bool = v0 <> v82 
            if v83 then
                let v86 : uint8 = v2 + 1uy
                let v87 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v86
                let v88 : Result<std_path_PathBuf, std_io_Error> = v87 v79
                let v89 : (std_io_Error -> string) = method48()
                (* run_target_args'
                let v91 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v92 : string = "$0.map_err(|x| $1(x))"
                let v93 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v88, v89) v92 
                let _run_target_args'_v91 = v93 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94 : string = "$0.map_err(|x| $1(x))"
                let v95 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v88, v89) v94 
                let _run_target_args'_v91 = v95 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v96 : string = "$0.map_err(|x| $1(x))"
                let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v88, v89) v96 
                let _run_target_args'_v91 = v97 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v98 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v98 
                #endif
#if FABLE_COMPILER_PYTHON
                let v99 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v99 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v100 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v100 
                #endif
#else
                let v101 : Result<std_path_PathBuf, string> = match v88 with Ok x -> Ok x | Error x -> Error (v89 x)
                let _run_target_args'_v91 = v101 
                #endif
                let v102 : Result<std_path_PathBuf, string> = _run_target_args'_v91 
                let v105 : (std_path_PathBuf -> US11) = method50()
                let v106 : (string -> US11) = method51()
                let v107 : US11 = match v102 with Ok x -> v105 x | Error x -> v106 x
                match v107 with
                | US11_1(v261) -> (* Error *)
                    let v262 : string = $"file_system.read_link / "
                    let v263 : string = $"error': {v261} / error: {v26} / name: {v4}"
                    let v264 : string = v262 + v263 
                    (* run_target_args'
                    let v269 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v270 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v271 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v264 v270 
                    let _run_target_args'_v269 = v271 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v272 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v273 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v264 v272 
                    let _run_target_args'_v269 = v273 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v274 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v275 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v264 v274 
                    let _run_target_args'_v269 = v275 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v277 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v277 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v285 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v285 
                    #endif
#else
                    let v289 : std_io_Error = v264 |> unbox<std_io_Error>
                    let _run_target_args'_v269 = v289 
                    #endif
                    let v292 : std_io_Error = _run_target_args'_v269 
                    (* run_target_args'
                    let v299 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v300 : string = "Err($0)"
                    let v301 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v292 v300 
                    let _run_target_args'_v299 = v301 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v302 : string = "Err($0)"
                    let v303 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v292 v302 
                    let _run_target_args'_v299 = v303 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v304 : string = "Err($0)"
                    let v305 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v292 v304 
                    let _run_target_args'_v299 = v305 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v306 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v306 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v308 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v308 
                    #endif
#else
                    let v309 : Result<std_path_PathBuf, std_io_Error> = v292 |> Error
                    let _run_target_args'_v299 = v309 
                    #endif
                    let v310 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v299 
                    v310
                | US11_0(v108) -> (* Ok *)
                    (* run_target_args'
                    let v113 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v114 : string = "$0.display()"
                    let v115 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v108 v114 
                    let _run_target_args'_v113 = v115 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v116 : string = "$0.display()"
                    let v117 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v108 v116 
                    let _run_target_args'_v113 = v117 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v118 : string = "$0.display()"
                    let v119 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v108 v118 
                    let _run_target_args'_v113 = v119 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v121 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v121 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v125 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v125 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v129 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v129 
                    #endif
#else
                    let v133 : std_path_Display = v108 |> unbox<std_path_Display>
                    let _run_target_args'_v113 = v133 
                    #endif
                    let v136 : std_path_Display = _run_target_args'_v113 
                    let v143 : string = v136 |> string 
                    let v146 : string = method35(v143, v4)
                    (* run_target_args'
                    let v151 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v152 : string = "&*$0"
                    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v146 v152 
                    let _run_target_args'_v151 = v153 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v154 : string = "&*$0"
                    let v155 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v146 v154 
                    let _run_target_args'_v151 = v155 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v156 : string = "&*$0"
                    let v157 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v146 v156 
                    let _run_target_args'_v151 = v157 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v159 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v159 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v163 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v163 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v167 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v167 
                    #endif
#else
                    let v171 : Ref<Str> = v146 |> unbox<Ref<Str>>
                    let _run_target_args'_v151 = v171 
                    #endif
                    let v174 : Ref<Str> = _run_target_args'_v151 
                    (* run_target_args'
                    let v184 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v185 : string = "String::from($0)"
                    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v185 
                    let _run_target_args'_v184 = v186 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v187 : string = "String::from($0)"
                    let v188 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v187 
                    let _run_target_args'_v184 = v188 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v189 : string = "String::from($0)"
                    let v190 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v189 
                    let _run_target_args'_v184 = v190 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v192 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v192 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v196 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v196 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v200 
                    #endif
#else
                    let v204 : std_string_String = v174 |> unbox<std_string_String>
                    let _run_target_args'_v184 = v204 
                    #endif
                    let v207 : std_string_String = _run_target_args'_v184 
                    (* run_target_args'
                    let v217 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v218 : string = "std::path::PathBuf::from($0)"
                    let v219 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v207 v218 
                    let _run_target_args'_v217 = v219 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v220 : string = "std::path::PathBuf::from($0)"
                    let v221 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v207 v220 
                    let _run_target_args'_v217 = v221 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v222 : string = "std::path::PathBuf::from($0)"
                    let v223 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v207 v222 
                    let _run_target_args'_v217 = v223 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v225 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v225 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v229 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v229 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v233 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v233 
                    #endif
#else
                    let v237 : std_path_PathBuf = v207 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v217 = v237 
                    #endif
                    let v240 : std_path_PathBuf = _run_target_args'_v217 
                    (* run_target_args'
                    let v247 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v248 : string = "Ok($0)"
                    let v249 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v240 v248 
                    let _run_target_args'_v247 = v249 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v250 : string = "Ok($0)"
                    let v251 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v240 v250 
                    let _run_target_args'_v247 = v251 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v252 : string = "Ok($0)"
                    let v253 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v240 v252 
                    let _run_target_args'_v247 = v253 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v254 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v254 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v255 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v255 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v256 
                    #endif
#else
                    let v257 : Result<std_path_PathBuf, std_io_Error> = v240 |> Ok
                    let _run_target_args'_v247 = v257 
                    #endif
                    let v258 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v247 
                    v258
            else
                let v315 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v316 : string = $"path: {v0} / error: {v26} / path': {v0} / name: {v4}"
                let v317 : string = v315 + v316 
                (* run_target_args'
                let v322 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v323 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v324 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v317 v323 
                let _run_target_args'_v322 = v324 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v325 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v326 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v317 v325 
                let _run_target_args'_v322 = v326 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v327 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v328 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v317 v327 
                let _run_target_args'_v322 = v328 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v330 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v330 
                #endif
#if FABLE_COMPILER_PYTHON
                let v334 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v334 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v338 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v338 
                #endif
#else
                let v342 : std_io_Error = v317 |> unbox<std_io_Error>
                let _run_target_args'_v322 = v342 
                #endif
                let v345 : std_io_Error = _run_target_args'_v322 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "Err($0)"
                let v354 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v345 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "Err($0)"
                let v356 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v345 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "Err($0)"
                let v358 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v345 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v360 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v360 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v361 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v361 
                #endif
#else
                let v362 : Result<std_path_PathBuf, std_io_Error> = v345 |> Error
                let _run_target_args'_v352 = v362 
                #endif
                let v363 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v352 
                v363
        | _ ->
            let v367 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v368 : string = $"path: {v0} / error: {v26} / path': {v0} / name: {v4}"
            let v369 : string = v367 + v368 
            (* run_target_args'
            let v374 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v375 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v376 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v369 v375 
            let _run_target_args'_v374 = v376 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v377 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v378 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v369 v377 
            let _run_target_args'_v374 = v378 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v379 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v380 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v369 v379 
            let _run_target_args'_v374 = v380 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v382 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v382 
            #endif
#if FABLE_COMPILER_PYTHON
            let v386 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v386 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v390 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v390 
            #endif
#else
            let v394 : std_io_Error = v369 |> unbox<std_io_Error>
            let _run_target_args'_v374 = v394 
            #endif
            let v397 : std_io_Error = _run_target_args'_v374 
            (* run_target_args'
            let v404 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v405 : string = "Err($0)"
            let v406 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v397 v405 
            let _run_target_args'_v404 = v406 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v407 : string = "Err($0)"
            let v408 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v397 v407 
            let _run_target_args'_v404 = v408 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v409 : string = "Err($0)"
            let v410 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v397 v409 
            let _run_target_args'_v404 = v410 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v411 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v411 
            #endif
#if FABLE_COMPILER_PYTHON
            let v412 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v412 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v413 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v413 
            #endif
#else
            let v414 : Result<std_path_PathBuf, std_io_Error> = v397 |> Error
            let _run_target_args'_v404 = v414 
            #endif
            let v415 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v404 
            v415
and method57 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v41 : System.IO.FileAttributes = method58(v35)
    let v42 : System.IO.FileAttributes = method59()
    let v43 : bool = method60(v42, v41)
    if v43 then
        (* run_target_args'
        let v48 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v50 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v62 
        #endif
#if FABLE_COMPILER_PYTHON
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v66 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v70 
        #endif
#else
        let v74 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v48 = v74 
        #endif
        let v77 : System_IO_FileInfo = _run_target_args'_v48 
        (* run_target_args'
        let v87 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v89 : string = null |> unbox<string>
        let _run_target_args'_v87 = v89 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v93 : string = null |> unbox<string>
        let _run_target_args'_v87 = v93 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = null |> unbox<string>
        let _run_target_args'_v87 = v97 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v101 : string = null |> unbox<string>
        let _run_target_args'_v87 = v101 
        #endif
#if FABLE_COMPILER_PYTHON
        let v105 : string = null |> unbox<string>
        let _run_target_args'_v87 = v105 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v109 : string = null |> unbox<string>
        let _run_target_args'_v87 = v109 
        #endif
#else
        let v112 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v113 : string = v112 v77
        let _run_target_args'_v87 = v113 
        #endif
        let v114 : string = _run_target_args'_v87 
        let v121 : std_path_PathBuf = v114 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v125 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v126 : string = "Ok($0)"
        let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
        let _run_target_args'_v125 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "Ok($0)"
        let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
        let _run_target_args'_v125 = v129 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v130 : string = "Ok($0)"
        let v131 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v130 
        let _run_target_args'_v125 = v131 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v132 
        #endif
#if FABLE_COMPILER_PYTHON
        let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v133 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v134 
        #endif
#else
        let v135 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v135 
        #endif
        let v136 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v125 
        v136
    else
        let v139 : string = $"file_system.read_link / Fsharp / "
        let v140 : string = $"The file or directory is not a reparse point. / "
        let v141 : string = v139 + v140 
        let v142 : string = $"path: {v0} / result: {v43} / path': {v0} / n: {v1}"
        let v143 : string = v141 + v142 
        (* run_target_args'
        let v148 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v149 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v150 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v149 
        let _run_target_args'_v148 = v150 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v151 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v152 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v151 
        let _run_target_args'_v148 = v152 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v153 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v154 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v153 
        let _run_target_args'_v148 = v154 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v156 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v156 
        #endif
#if FABLE_COMPILER_PYTHON
        let v160 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v160 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v164 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v164 
        #endif
#else
        let v168 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v168 
        #endif
        let v171 : std_io_Error = _run_target_args'_v148 
        let v177 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method63(v0, v177, v1, v171)
and method46 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method38(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method47(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method38(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method47(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method38(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method47(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method57(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method57(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method57(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US12 =
    US12_0(v0)
and method64 () : (std_path_PathBuf -> US12) =
    closure25()
and method66 (v0 : string) : string =
    v0
and method67 () : string =
    let v0 : string = ""
    v0
and method65 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method66(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method67()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method67()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method67()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method67()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method67()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method45 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method46(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v20 : (std_path_PathBuf -> US12) = method64()
        let v21 : US12 option = v16 |> Option.map v20 
        let v34 : US12 = US12_1
        let v35 : US12 = v21 |> Option.defaultValue v34 
        let v78 : string =
            match v35 with
            | US12_1 -> (* None *)
                v0
            | US12_0(v39) -> (* Some *)
                (* run_target_args'
                let v44 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v45 : string = "$0.display()"
                let v46 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v39 v45 
                let _run_target_args'_v44 = v46 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v47 : string = "$0.display()"
                let v48 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v39 v47 
                let _run_target_args'_v44 = v48 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v49 : string = "$0.display()"
                let v50 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v39 v49 
                let _run_target_args'_v44 = v50 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v52 : std_path_Display = v39 |> unbox<std_path_Display>
                let _run_target_args'_v44 = v52 
                #endif
#if FABLE_COMPILER_PYTHON
                let v56 : std_path_Display = v39 |> unbox<std_path_Display>
                let _run_target_args'_v44 = v56 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v60 : std_path_Display = v39 |> unbox<std_path_Display>
                let _run_target_args'_v44 = v60 
                #endif
#else
                let v64 : std_path_Display = v39 |> unbox<std_path_Display>
                let _run_target_args'_v44 = v64 
                #endif
                let v67 : std_path_Display = _run_target_args'_v44 
                let v74 : string = v67 |> string 
                v74
        let v79 : bool = v78 = ""
        let v80 : string =
            if v79 then
                v0
            else
                v78
        let v81 : string = "^\\\\\\\\\\?\\\\"
        let v82 : string = ""
        let v83 : string = method65(v81, v82, v80)
        let v84 : int32 = v83.Length
        let v85 : bool = v84 < 2
        if v85 then
            v0
        else
            let v86 : string = $"{v83.[0] |> string |> _.ToLower()}{v83.[1..]}"
            let v87 : string = "\\"
            let v88 : string = "/"
            let v89 : string = v86.Replace (v87, v88)
            v89
and method34 (v0 : string) : US5 =
    let v1 : US9 = US9_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method35(v2, v3)
    let v5 : US10 = method36(v1, v4, v0)
    match v5 with
    | US10_1(v9) -> (* Error *)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure17(v0, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        US5_1
    | US10_0(v6) -> (* Ok *)
        let v7 : string = method45(v6)
        US5_0(v7)
and method68 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method69 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method70 () : string =
    let v0 : string = "\n"
    v0
and method72 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method37(v0)
    let v8 : bool = v7 = false
    let v113 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v65 : Vec<uint8> = method26(v59)
            let v66 : string = "std::string::String::from_utf8($0)"
            let v67 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v65 v66 
            (* run_target_args'
            let v69 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v70 : string = "$0.unwrap()"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v70 
            let _run_target_args'_v69 = v71 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v72 
            let _run_target_args'_v69 = v73 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v74 : string = "$0.unwrap()"
            let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v74 
            let _run_target_args'_v69 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v76 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v76 
            #endif
#if FABLE_COMPILER_PYTHON
            let v77 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v77 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v78 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v78 
            #endif
#else
            let v79 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v79 
            #endif
            let v80 : std_string_String = _run_target_args'_v69 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v80 v83 
            let _run_target_args'_v13 = v84 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v86 : string = null |> unbox<string>
            let _run_target_args'_v13 = v86 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v90 : string = null |> unbox<string>
            let _run_target_args'_v13 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v94 : string = null |> unbox<string>
            let _run_target_args'_v13 = v94 
            #endif
#if FABLE_COMPILER_PYTHON
            let v98 : string = null |> unbox<string>
            let _run_target_args'_v13 = v98 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v102 : string = null |> unbox<string>
            let _run_target_args'_v13 = v102 
            #endif
#else
            let v105 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v105 
            #endif
            let v106 : string = _run_target_args'_v13 
            let v112 : bool = v1 = v106
            v112
    let _run_target_args'_v6 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v119 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v131 
    #endif
#else
    let v135 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v135 
    #endif
    let v138 : bool = _run_target_args'_v6 
    v138
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method74 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US13 =
    US13_0
and method75 () : (unit -> US13) =
    closure27()
and closure28 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and method76 () : (std_string_String -> US13) =
    closure28()
and method77 () : string =
    
    
    
    
    
    let v1 : string = "Critical"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_bright_red"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_bright_red"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_bright_red"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[91m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[91m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[91m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[91m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method79 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "dir"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "error"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v81 : string = "format!(\"{:#?}\", $0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "format!(\"{:#?}\", $0)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v76 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : string = $"%A{v1}"
    let _run_target_args'_v76 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : string = $"%A{v1}"
    let _run_target_args'_v76 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : string = $"%A{v1}"
    let _run_target_args'_v76 = v98 
    #endif
#else
    let v102 : string = $"%A{v1}"
    let _run_target_args'_v76 = v102 
    #endif
    let v105 : string = _run_target_args'_v76 
    let v112 : string = $"{v105}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v3, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = v3.l0
    v130
and method78 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method79(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method77()
        let v47 : string = method78(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method80 () : string =
    
    
    
    
    
    let v1 : string = "Verbose"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_bright_black"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_bright_black"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_bright_black"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[90m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[90m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[90m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[90m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method82 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "dir"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v2, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v43 : string = " }"
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v2, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = v2.l0
    v52
and method81 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method82(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method80()
        let v46 : string = method81(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method84 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method38(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method84(v1, v0)
and method83 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method85 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method86 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method88 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "dir"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "result"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method87 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method88(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method87(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method94 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "path"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method93 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method94(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.delete_directory_async"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : string = $"%A{v1}"
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : string = $"%A{v1}"
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : string = $"%A{v1}"
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : string = $"%A{v1}"
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : string = $"%A{v1}"
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : string = $"%A{v1}"
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v76 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v51 = v76 
        #endif
        let v77 : string = _run_target_args'_v51 
        let v83 : string = method54(v0)
        let v84 : string = method93(v27, v28, v29, v30, v31, v32, v45, v46, v77, v83)
        method19(v84)
and method92 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v23 : bool = true
                method84(v23, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v25 : exn = ex
                let v26 : int64 = v1 % 100L
                let v27 : bool = v26 = 0L
                if v27 then
                    let v28 : unit = ()
                    let v29 : (unit -> unit) = closure34(v0, v25)
                    let v30 : unit = (fun () -> v29 (); v28) ()
                    ()
                (* run_target_args'
                let v118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v119 : (int32 -> Async<unit>) = Async.Sleep
                let v120 : Async<unit> = v119 10
                let _run_target_args'_v118 = v120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v121 : (int32 -> Async<unit>) = Async.Sleep
                let v122 : Async<unit> = v121 10
                let _run_target_args'_v118 = v122 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v123 : (int32 -> Async<unit>) = Async.Sleep
                let v124 : Async<unit> = v123 10
                let _run_target_args'_v118 = v124 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v125 : (int32 -> Async<unit>) = Async.Sleep
                let v126 : Async<unit> = v125 10
                let _run_target_args'_v118 = v126 
                #endif
#if FABLE_COMPILER_PYTHON
                let v127 : (int32 -> Async<unit>) = Async.Sleep
                let v128 : Async<unit> = v127 10
                let _run_target_args'_v118 = v128 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v129 : (int32 -> Async<unit>) = Async.Sleep
                let v130 : Async<unit> = v129 10
                let _run_target_args'_v118 = v130 
                #endif
#else
                let v131 : (int32 -> Async<unit>) = Async.Sleep
                let v132 : Async<unit> = v131 10
                let _run_target_args'_v118 = v132 
                #endif
                let v133 : Async<unit> = _run_target_args'_v118 
                do! v133 
                let v136 : int64 = v1 + 1L
                let v137 : Async<int64> = method91(v0, v136)
                return! v137 
                (* indent
                ()
            indent *)
            (* try_unit
            let v252 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1879 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v1879 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1881 : unit = ()
    let _let'_v1881 =
        async {
            try
                let v1884 : bool = true
                method84(v1884, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v1886 : exn = ex
                let v1887 : int64 = v1 % 100L
                let v1888 : bool = v1887 = 0L
                if v1888 then
                    let v1889 : unit = ()
                    let v1890 : (unit -> unit) = closure34(v0, v1886)
                    let v1891 : unit = (fun () -> v1890 (); v1889) ()
                    ()
                (* run_target_args'
                let v1979 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1980 : (int32 -> Async<unit>) = Async.Sleep
                let v1981 : Async<unit> = v1980 10
                let _run_target_args'_v1979 = v1981 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1982 : (int32 -> Async<unit>) = Async.Sleep
                let v1983 : Async<unit> = v1982 10
                let _run_target_args'_v1979 = v1983 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1984 : (int32 -> Async<unit>) = Async.Sleep
                let v1985 : Async<unit> = v1984 10
                let _run_target_args'_v1979 = v1985 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1986 : (int32 -> Async<unit>) = Async.Sleep
                let v1987 : Async<unit> = v1986 10
                let _run_target_args'_v1979 = v1987 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1988 : (int32 -> Async<unit>) = Async.Sleep
                let v1989 : Async<unit> = v1988 10
                let _run_target_args'_v1979 = v1989 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1990 : (int32 -> Async<unit>) = Async.Sleep
                let v1991 : Async<unit> = v1990 10
                let _run_target_args'_v1979 = v1991 
                #endif
#else
                let v1992 : (int32 -> Async<unit>) = Async.Sleep
                let v1993 : Async<unit> = v1992 10
                let _run_target_args'_v1979 = v1993 
                #endif
                let v1994 : Async<unit> = _run_target_args'_v1979 
                do! v1994 
                let v1997 : int64 = v1 + 1L
                let v1998 : Async<int64> = method91(v0, v1997)
                return! v1998 
                (* indent
                ()
            indent *)
            (* try_unit
            let v2113 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3740 : Async<int64> = _let'_v1881 
    let _run_target_args'_v6 = v3740 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3742 : unit = ()
    let _let'_v3742 =
        async {
            try
                let v3745 : bool = true
                method84(v3745, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v3747 : exn = ex
                let v3748 : int64 = v1 % 100L
                let v3749 : bool = v3748 = 0L
                if v3749 then
                    let v3750 : unit = ()
                    let v3751 : (unit -> unit) = closure34(v0, v3747)
                    let v3752 : unit = (fun () -> v3751 (); v3750) ()
                    ()
                (* run_target_args'
                let v3840 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3841 : (int32 -> Async<unit>) = Async.Sleep
                let v3842 : Async<unit> = v3841 10
                let _run_target_args'_v3840 = v3842 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3843 : (int32 -> Async<unit>) = Async.Sleep
                let v3844 : Async<unit> = v3843 10
                let _run_target_args'_v3840 = v3844 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3845 : (int32 -> Async<unit>) = Async.Sleep
                let v3846 : Async<unit> = v3845 10
                let _run_target_args'_v3840 = v3846 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3847 : (int32 -> Async<unit>) = Async.Sleep
                let v3848 : Async<unit> = v3847 10
                let _run_target_args'_v3840 = v3848 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3849 : (int32 -> Async<unit>) = Async.Sleep
                let v3850 : Async<unit> = v3849 10
                let _run_target_args'_v3840 = v3850 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3851 : (int32 -> Async<unit>) = Async.Sleep
                let v3852 : Async<unit> = v3851 10
                let _run_target_args'_v3840 = v3852 
                #endif
#else
                let v3853 : (int32 -> Async<unit>) = Async.Sleep
                let v3854 : Async<unit> = v3853 10
                let _run_target_args'_v3840 = v3854 
                #endif
                let v3855 : Async<unit> = _run_target_args'_v3840 
                do! v3855 
                let v3858 : int64 = v1 + 1L
                let v3859 : Async<int64> = method91(v0, v3858)
                return! v3859 
                (* indent
                ()
            indent *)
            (* try_unit
            let v3974 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5601 : Async<int64> = _let'_v3742 
    let _run_target_args'_v6 = v5601 
    #endif
#else
    let v5603 : unit = ()
    let _let'_v5603 =
        async {
            try
                let v5606 : bool = true
                method84(v5606, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v5608 : exn = ex
                let v5609 : int64 = v1 % 100L
                let v5610 : bool = v5609 = 0L
                if v5610 then
                    let v5611 : unit = ()
                    let v5612 : (unit -> unit) = closure34(v0, v5608)
                    let v5613 : unit = (fun () -> v5612 (); v5611) ()
                    ()
                (* run_target_args'
                let v5701 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5702 : (int32 -> Async<unit>) = Async.Sleep
                let v5703 : Async<unit> = v5702 10
                let _run_target_args'_v5701 = v5703 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5704 : (int32 -> Async<unit>) = Async.Sleep
                let v5705 : Async<unit> = v5704 10
                let _run_target_args'_v5701 = v5705 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5706 : (int32 -> Async<unit>) = Async.Sleep
                let v5707 : Async<unit> = v5706 10
                let _run_target_args'_v5701 = v5707 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5708 : (int32 -> Async<unit>) = Async.Sleep
                let v5709 : Async<unit> = v5708 10
                let _run_target_args'_v5701 = v5709 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5710 : (int32 -> Async<unit>) = Async.Sleep
                let v5711 : Async<unit> = v5710 10
                let _run_target_args'_v5701 = v5711 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v5712 : (int32 -> Async<unit>) = Async.Sleep
                let v5713 : Async<unit> = v5712 10
                let _run_target_args'_v5701 = v5713 
                #endif
#else
                let v5714 : (int32 -> Async<unit>) = Async.Sleep
                let v5715 : Async<unit> = v5714 10
                let _run_target_args'_v5701 = v5715 
                #endif
                let v5716 : Async<unit> = _run_target_args'_v5701 
                do! v5716 
                let v5719 : int64 = v1 + 1L
                let v5720 : Async<int64> = method91(v0, v5719)
                return! v5720 
                (* indent
                ()
            indent *)
            (* try_unit
            let v5835 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7462 : Async<int64> = _let'_v5603 
    let _run_target_args'_v6 = v7462 
    #endif
    let v7463 : Async<int64> = _run_target_args'_v6 
    v7463
and method91 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method92(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method90 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method91(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method90(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : (Async<unit> -> unit) = Async.RunSynchronously
    v34 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : (Async<unit> -> unit) = Async.RunSynchronously
    v35 v27
    #endif
#else
    let v36 : (Async<unit> -> unit) = Async.RunSynchronously
    v36 v27
    #endif
    // run_target_args' is_unit
    ()
and method89 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method95 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method73 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v154 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : string = "std::fs::create_dir_all(&*$0)"
    let v156 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v155 
    let v157 : (std_io_Error -> std_string_String) = method74()
    (* run_target_args'
    let v159 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v160 : string = "$0.map_err(|x| $1(x))"
    let v161 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v160 
    let _run_target_args'_v159 = v161 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v162 : string = "$0.map_err(|x| $1(x))"
    let v163 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v162 
    let _run_target_args'_v159 = v163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v164 : string = "$0.map_err(|x| $1(x))"
    let v165 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v164 
    let _run_target_args'_v159 = v165 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v166 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v166 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v168 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v168 
    #endif
#else
    let v169 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v169 
    #endif
    let v170 : Result<unit, std_string_String> = _run_target_args'_v159 
    let v173 : (unit -> US13) = method75()
    let v174 : (std_string_String -> US13) = method76()
    let v175 : US13 = match v170 with Ok () -> v173 () | Error x -> v174 x
    match v175 with
    | US13_1(v225) -> (* Error *)
        let v226 : unit = ()
        let v227 : (unit -> unit) = closure29(v0, v225)
        let v228 : unit = (fun () -> v227 (); v226) ()
        ()
    | US13_0 -> (* Ok *)
        let v176 : unit = ()
        let v177 : (unit -> unit) = closure30(v0)
        let v178 : unit = (fun () -> v177 (); v176) ()
        ()
    (* run_target_args'
    let v279 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v280 : (unit -> unit) = method83(v0)
    let v281 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v280 "$0()" )
    let _run_target_args'_v279 = v281 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v282 : (unit -> unit) = method83(v0)
    let v283 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v282 "$0()" )
    let _run_target_args'_v279 = v283 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v284 : (unit -> unit) = method83(v0)
    let v285 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v284 "$0()" )
    let _run_target_args'_v279 = v285 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v286 : (unit -> unit) = method85(v0)
    let v287 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v286 () }
    let _run_target_args'_v279 = v287 
    #endif
#if FABLE_COMPILER_PYTHON
    let v288 : (unit -> unit) = method85(v0)
    let v289 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v288 () }
    let _run_target_args'_v279 = v289 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v290 : (unit -> unit) = method85(v0)
    let v291 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v290 () }
    let _run_target_args'_v279 = v291 
    #endif
#else
    let v292 : (unit -> unit) = method85(v0)
    let v293 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v292 () }
    let _run_target_args'_v279 = v293 
    #endif
    let v294 : System.IDisposable = _run_target_args'_v279 
    let _run_target_args'_v154 = v294 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v299 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v299 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v303 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v303 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v306 : System_IO_DirectoryInfo = method86(v0)
    (* run_target_args'
    let v311 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v313 : bool = null |> unbox<bool>
    let _run_target_args'_v311 = v313 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : bool = null |> unbox<bool>
    let _run_target_args'_v311 = v317 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : bool = null |> unbox<bool>
    let _run_target_args'_v311 = v321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v325 : bool = null |> unbox<bool>
    let _run_target_args'_v311 = v325 
    #endif
#if FABLE_COMPILER_PYTHON
    let v329 : bool = null |> unbox<bool>
    let _run_target_args'_v311 = v329 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v333 : bool = null |> unbox<bool>
    let _run_target_args'_v311 = v333 
    #endif
#else
    let v336 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v337 : bool = v336 v306
    let _run_target_args'_v311 = v337 
    #endif
    let v338 : bool = _run_target_args'_v311 
    let v344 : bool = v338 = false
    if v344 then
        (* run_target_args'
        let v349 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v351 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v349 = v351 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v355 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v349 = v355 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v359 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v349 = v359 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v363 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v349 = v363 
        #endif
#if FABLE_COMPILER_PYTHON
        let v367 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v349 = v367 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v371 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v349 = v371 
        #endif
#else
        let v374 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v375 : System.DateTime = v374 v306
        let _run_target_args'_v349 = v375 
        #endif
        let v376 : System.DateTime = _run_target_args'_v349 
        let v382 : _ = {| Exists = v338; CreationTime = v376 |}
        let v384 : string = $"%A{v382}"
        let v387 : unit = ()
        let v388 : (unit -> unit) = closure32(v0, v384)
        let v389 : unit = (fun () -> v388 (); v387) ()
        ()
    (* run_target_args'
    let v440 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v441 : (unit -> unit) = method89(v0)
    let v442 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v441 "$0()" )
    let _run_target_args'_v440 = v442 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v443 : (unit -> unit) = method89(v0)
    let v444 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v443 "$0()" )
    let _run_target_args'_v440 = v444 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v445 : (unit -> unit) = method89(v0)
    let v446 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v445 "$0()" )
    let _run_target_args'_v440 = v446 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v447 : (unit -> unit) = method95(v0)
    let v448 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v447 () }
    let _run_target_args'_v440 = v448 
    #endif
#if FABLE_COMPILER_PYTHON
    let v449 : (unit -> unit) = method95(v0)
    let v450 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v449 () }
    let _run_target_args'_v440 = v450 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v451 : (unit -> unit) = method95(v0)
    let v452 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v451 () }
    let _run_target_args'_v440 = v452 
    #endif
#else
    let v453 : (unit -> unit) = method95(v0)
    let v454 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v453 () }
    let _run_target_args'_v440 = v454 
    #endif
    let v455 : System.IDisposable = _run_target_args'_v440 
    let _run_target_args'_v154 = v455 
    #endif
#if FABLE_COMPILER_PYTHON
    let v459 : System_IO_DirectoryInfo = method86(v0)
    (* run_target_args'
    let v464 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v466 : bool = null |> unbox<bool>
    let _run_target_args'_v464 = v466 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v470 : bool = null |> unbox<bool>
    let _run_target_args'_v464 = v470 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v474 : bool = null |> unbox<bool>
    let _run_target_args'_v464 = v474 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v478 : bool = null |> unbox<bool>
    let _run_target_args'_v464 = v478 
    #endif
#if FABLE_COMPILER_PYTHON
    let v482 : bool = null |> unbox<bool>
    let _run_target_args'_v464 = v482 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v486 : bool = null |> unbox<bool>
    let _run_target_args'_v464 = v486 
    #endif
#else
    let v489 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v490 : bool = v489 v459
    let _run_target_args'_v464 = v490 
    #endif
    let v491 : bool = _run_target_args'_v464 
    let v497 : bool = v491 = false
    if v497 then
        (* run_target_args'
        let v502 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v504 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v502 = v504 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v508 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v502 = v508 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v512 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v502 = v512 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v516 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v502 = v516 
        #endif
#if FABLE_COMPILER_PYTHON
        let v520 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v502 = v520 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v524 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v502 = v524 
        #endif
#else
        let v527 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v528 : System.DateTime = v527 v459
        let _run_target_args'_v502 = v528 
        #endif
        let v529 : System.DateTime = _run_target_args'_v502 
        let v535 : _ = {| Exists = v491; CreationTime = v529 |}
        let v537 : string = $"%A{v535}"
        let v540 : unit = ()
        let v541 : (unit -> unit) = closure32(v0, v537)
        let v542 : unit = (fun () -> v541 (); v540) ()
        ()
    (* run_target_args'
    let v593 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v594 : (unit -> unit) = method89(v0)
    let v595 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v594 "$0()" )
    let _run_target_args'_v593 = v595 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v596 : (unit -> unit) = method89(v0)
    let v597 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v596 "$0()" )
    let _run_target_args'_v593 = v597 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v598 : (unit -> unit) = method89(v0)
    let v599 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v598 "$0()" )
    let _run_target_args'_v593 = v599 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v600 : (unit -> unit) = method95(v0)
    let v601 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v600 () }
    let _run_target_args'_v593 = v601 
    #endif
#if FABLE_COMPILER_PYTHON
    let v602 : (unit -> unit) = method95(v0)
    let v603 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v602 () }
    let _run_target_args'_v593 = v603 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v604 : (unit -> unit) = method95(v0)
    let v605 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v604 () }
    let _run_target_args'_v593 = v605 
    #endif
#else
    let v606 : (unit -> unit) = method95(v0)
    let v607 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v606 () }
    let _run_target_args'_v593 = v607 
    #endif
    let v608 : System.IDisposable = _run_target_args'_v593 
    let _run_target_args'_v154 = v608 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v612 : System_IO_DirectoryInfo = method86(v0)
    (* run_target_args'
    let v617 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v619 : bool = null |> unbox<bool>
    let _run_target_args'_v617 = v619 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v623 : bool = null |> unbox<bool>
    let _run_target_args'_v617 = v623 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v627 : bool = null |> unbox<bool>
    let _run_target_args'_v617 = v627 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v631 : bool = null |> unbox<bool>
    let _run_target_args'_v617 = v631 
    #endif
#if FABLE_COMPILER_PYTHON
    let v635 : bool = null |> unbox<bool>
    let _run_target_args'_v617 = v635 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v639 : bool = null |> unbox<bool>
    let _run_target_args'_v617 = v639 
    #endif
#else
    let v642 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v643 : bool = v642 v612
    let _run_target_args'_v617 = v643 
    #endif
    let v644 : bool = _run_target_args'_v617 
    let v650 : bool = v644 = false
    if v650 then
        (* run_target_args'
        let v655 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v657 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v655 = v657 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v661 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v655 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v665 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v655 = v665 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v669 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v655 = v669 
        #endif
#if FABLE_COMPILER_PYTHON
        let v673 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v655 = v673 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v677 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v655 = v677 
        #endif
#else
        let v680 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v681 : System.DateTime = v680 v612
        let _run_target_args'_v655 = v681 
        #endif
        let v682 : System.DateTime = _run_target_args'_v655 
        let v688 : _ = {| Exists = v644; CreationTime = v682 |}
        let v690 : string = $"%A{v688}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure32(v0, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        ()
    (* run_target_args'
    let v746 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v747 : (unit -> unit) = method89(v0)
    let v748 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v747 "$0()" )
    let _run_target_args'_v746 = v748 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v749 : (unit -> unit) = method89(v0)
    let v750 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v749 "$0()" )
    let _run_target_args'_v746 = v750 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v751 : (unit -> unit) = method89(v0)
    let v752 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v751 "$0()" )
    let _run_target_args'_v746 = v752 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v753 : (unit -> unit) = method95(v0)
    let v754 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v753 () }
    let _run_target_args'_v746 = v754 
    #endif
#if FABLE_COMPILER_PYTHON
    let v755 : (unit -> unit) = method95(v0)
    let v756 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v755 () }
    let _run_target_args'_v746 = v756 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v757 : (unit -> unit) = method95(v0)
    let v758 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v757 () }
    let _run_target_args'_v746 = v758 
    #endif
#else
    let v759 : (unit -> unit) = method95(v0)
    let v760 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v759 () }
    let _run_target_args'_v746 = v760 
    #endif
    let v761 : System.IDisposable = _run_target_args'_v746 
    let _run_target_args'_v154 = v761 
    #endif
#else
    let v765 : System_IO_DirectoryInfo = method86(v0)
    (* run_target_args'
    let v770 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v772 : bool = null |> unbox<bool>
    let _run_target_args'_v770 = v772 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v776 : bool = null |> unbox<bool>
    let _run_target_args'_v770 = v776 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v780 : bool = null |> unbox<bool>
    let _run_target_args'_v770 = v780 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v784 : bool = null |> unbox<bool>
    let _run_target_args'_v770 = v784 
    #endif
#if FABLE_COMPILER_PYTHON
    let v788 : bool = null |> unbox<bool>
    let _run_target_args'_v770 = v788 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v792 : bool = null |> unbox<bool>
    let _run_target_args'_v770 = v792 
    #endif
#else
    let v795 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v796 : bool = v795 v765
    let _run_target_args'_v770 = v796 
    #endif
    let v797 : bool = _run_target_args'_v770 
    let v803 : bool = v797 = false
    if v803 then
        (* run_target_args'
        let v808 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v810 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v808 = v810 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v808 = v814 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v818 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v808 = v818 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v822 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v808 = v822 
        #endif
#if FABLE_COMPILER_PYTHON
        let v826 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v808 = v826 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v830 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v808 = v830 
        #endif
#else
        let v833 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v834 : System.DateTime = v833 v765
        let _run_target_args'_v808 = v834 
        #endif
        let v835 : System.DateTime = _run_target_args'_v808 
        let v841 : _ = {| Exists = v797; CreationTime = v835 |}
        let v843 : string = $"%A{v841}"
        let v846 : unit = ()
        let v847 : (unit -> unit) = closure32(v0, v843)
        let v848 : unit = (fun () -> v847 (); v846) ()
        ()
    (* run_target_args'
    let v899 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v900 : (unit -> unit) = method89(v0)
    let v901 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v900 "$0()" )
    let _run_target_args'_v899 = v901 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v902 : (unit -> unit) = method89(v0)
    let v903 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v902 "$0()" )
    let _run_target_args'_v899 = v903 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v904 : (unit -> unit) = method89(v0)
    let v905 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v904 "$0()" )
    let _run_target_args'_v899 = v905 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v906 : (unit -> unit) = method95(v0)
    let v907 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v906 () }
    let _run_target_args'_v899 = v907 
    #endif
#if FABLE_COMPILER_PYTHON
    let v908 : (unit -> unit) = method95(v0)
    let v909 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v908 () }
    let _run_target_args'_v899 = v909 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v910 : (unit -> unit) = method95(v0)
    let v911 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v910 () }
    let _run_target_args'_v899 = v911 
    #endif
#else
    let v912 : (unit -> unit) = method95(v0)
    let v913 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v912 () }
    let _run_target_args'_v899 = v913 
    #endif
    let v914 : System.IDisposable = _run_target_args'_v899 
    let _run_target_args'_v154 = v914 
    #endif
    let v918 : System.IDisposable = _run_target_args'_v154 
    v918
and method71 (v0 : string, v1 : string) : unit =
    let v2 : bool = method72(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method40(v0)
        let v6 : string = ""
        let v7 : string = v4 |> Option.defaultValue v6 
        let v10 : bool = method38(v7)
        let v11 : bool = v10 = false
        if v11 then
            let v12 : System.IDisposable = method73(v7)
            ()
        (* run_target_args'
        let v13 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v14 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v14 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method97 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method99 () : string =
    let v0 : string = ""
    v0
and closure37 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure36 () (v0 : char) : (UH0 -> UH0) =
    closure37(v0)
and method100 () : (char -> (UH0 -> UH0)) =
    closure36()
and method101 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method101(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure38 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method102(v0, v4)
        let v6 : string = " "
        let v7 : string = v2 + v6 
        v5 v7
and method102 (v0 : int32, v1 : int32) : (string -> string) =
    closure38(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US15_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int32 = v51.Length
            let v55 : (char []) = Array.zeroCreate<char> (v54)
            let v56 : Mut5 = {l0 = 0} : Mut5
            while method31(v54, v56) do
                let v58 : int32 = v56.l0
                let v59 : char = v51.[int v58]
                v55.[int v58] <- v59
                let v60 : int32 = v58 + 1
                v56.l0 <- v60
                ()
            let v62 : char list = v55 |> Array.toList
            let v66 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v67 : (char -> (UH0 -> UH0)) = method100()
            let v68 : (char list -> (UH0 -> UH0)) = v66 v67
            let v69 : (UH0 -> UH0) = v68 v62
            let v70 : UH0 = UH0_0
            let v71 : UH0 = v69 v70
            let struct (v96 : System.Text.StringBuilder, v97 : int32, v98 : int32) = method101(v71, v1, v2, v3)
            US15_0(v10, v45, v96, v97, v98)
        else
            let v101 : string = "\n"
            let v102 : int32 = v0.IndexOf v101 
            let v105 : int32 = v102 - 1
            let v106 : bool = -2 = v105
            let v114 : int32 =
                if v106 then
                    let v108 : (string -> int32) = String.length
                    let v109 : int32 = v108 v0
                    let v112 : int32 = v109 + 1
                    v112
                else
                    let v113 : int32 = v105 + 1
                    v113
            let v120 : int32 = 0 |> int32 
            let v133 : int32 = v114 |> int32 
            let v141 : int32 = v133 - 1
            let v143 : string = v0.[int v120..int v141]
            let v148 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v143}"
            let v151 : int32 = v3 - 1
            let v152 : int32 = 0
            let v153 : (string -> string) = method102(v151, v152)
            let v154 : string = ""
            let v155 : string = v153 v154
            let v156 : string = "^"
            let v157 : string = v155 + v156 
            let v159 : string = $"{v148}
{v157}
"
            US15_1(v159)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US15_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int32 = v51.Length
            let v55 : (char []) = Array.zeroCreate<char> (v54)
            let v56 : Mut5 = {l0 = 0} : Mut5
            while method31(v54, v56) do
                let v58 : int32 = v56.l0
                let v59 : char = v51.[int v58]
                v55.[int v58] <- v59
                let v60 : int32 = v58 + 1
                v56.l0 <- v60
                ()
            let v62 : char list = v55 |> Array.toList
            let v66 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v67 : (char -> (UH0 -> UH0)) = method100()
            let v68 : (char list -> (UH0 -> UH0)) = v66 v67
            let v69 : (UH0 -> UH0) = v68 v62
            let v70 : UH0 = UH0_0
            let v71 : UH0 = v69 v70
            let struct (v96 : System.Text.StringBuilder, v97 : int32, v98 : int32) = method101(v71, v1, v2, v3)
            US15_0(v10, v45, v96, v97, v98)
        else
            let v101 : string = "\n"
            let v102 : int32 = v0.IndexOf v101 
            let v105 : int32 = v102 - 1
            let v106 : bool = -2 = v105
            let v114 : int32 =
                if v106 then
                    let v108 : (string -> int32) = String.length
                    let v109 : int32 = v108 v0
                    let v112 : int32 = v109 + 1
                    v112
                else
                    let v113 : int32 = v105 + 1
                    v113
            let v120 : int32 = 0 |> int32 
            let v133 : int32 = v114 |> int32 
            let v141 : int32 = v133 - 1
            let v143 : string = v0.[int v120..int v141]
            let v148 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v143}"
            let v151 : int32 = v3 - 1
            let v152 : int32 = 0
            let v153 : (string -> string) = method102(v151, v152)
            let v154 : string = ""
            let v155 : string = v153 v154
            let v156 : string = "^"
            let v157 : string = v155 + v156 
            let v159 : string = $"{v148}
{v157}
"
            US15_1(v159)
and method103 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method103(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US15_1(v3)
and method104 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method104(v0, v17)
and method105 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v137 : US15 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method104(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int32 = v68.Length
                let v72 : (char []) = Array.zeroCreate<char> (v71)
                let v73 : Mut5 = {l0 = 0} : Mut5
                while method31(v71, v73) do
                    let v75 : int32 = v73.l0
                    let v76 : char = v68.[int v75]
                    v72.[int v75] <- v76
                    let v77 : int32 = v75 + 1
                    v73.l0 <- v77
                    ()
                let v79 : char list = v72 |> Array.toList
                let v83 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v84 : (char -> (UH0 -> UH0)) = method100()
                let v85 : (char list -> (UH0 -> UH0)) = v83 v84
                let v86 : (UH0 -> UH0) = v85 v79
                let v87 : UH0 = UH0_0
                let v88 : UH0 = v86 v87
                let struct (v113 : System.Text.StringBuilder, v114 : int32, v115 : int32) = method101(v88, v2, v3, v4)
                US15_0(v25, v62, v113, v114, v115)
            else
                let v117 : char list = []
                let v119 : char list = ''' :: v117 
                let v123 : char list = '"' :: v119 
                let v127 : (char list -> (char [])) = List.toArray
                let v128 : (char []) = v127 v123
                let v132 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v128} / s: %A{struct (v2, v3, v4)}"
                US15_1(v132)
    let v149 : US15 =
        match v137 with
        | US15_1(v146) -> (* Error *)
            US15_1(v146)
        | US15_0(v138, v139, v140, v141, v142) -> (* Ok *)
            let v143 : bool = '\\' = v138
            let v144 : char =
                if v143 then
                    '/'
                else
                    v138
            US15_0(v144, v139, v140, v141, v142)
    match v149 with
    | US15_1(v166) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v150, v151, v152, v153, v154) -> (* Ok *)
        let v156 : (char -> string) = _.ToString()
        let v157 : string = v156 v150
        let v160 : string = v0 + v157 
        method105(v160, v151, v152, v153, v154)
and method106 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method106(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US15_1(v5)
and method107 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method107(v0, v21)
and method108 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v145 : US15 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US15_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method107(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int32 = v72.Length
                let v76 : (char []) = Array.zeroCreate<char> (v75)
                let v77 : Mut5 = {l0 = 0} : Mut5
                while method31(v75, v77) do
                    let v79 : int32 = v77.l0
                    let v80 : char = v72.[int v79]
                    v76.[int v79] <- v80
                    let v81 : int32 = v79 + 1
                    v77.l0 <- v81
                    ()
                let v83 : char list = v76 |> Array.toList
                let v87 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v88 : (char -> (UH0 -> UH0)) = method100()
                let v89 : (char list -> (UH0 -> UH0)) = v87 v88
                let v90 : (UH0 -> UH0) = v89 v83
                let v91 : UH0 = UH0_0
                let v92 : UH0 = v90 v91
                let struct (v117 : System.Text.StringBuilder, v118 : int32, v119 : int32) = method101(v92, v2, v3, v4)
                US15_0(v29, v66, v117, v118, v119)
            else
                let v121 : char list = []
                let v123 : char list = ' ' :: v121 
                let v127 : char list = ''' :: v123 
                let v131 : char list = '"' :: v127 
                let v135 : (char list -> (char [])) = List.toArray
                let v136 : (char []) = v135 v131
                let v140 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v136} / s: %A{struct (v2, v3, v4)}"
                US15_1(v140)
    let v157 : US15 =
        match v145 with
        | US15_1(v154) -> (* Error *)
            US15_1(v154)
        | US15_0(v146, v147, v148, v149, v150) -> (* Ok *)
            let v151 : bool = '\\' = v146
            let v152 : char =
                if v151 then
                    '/'
                else
                    v146
            US15_0(v152, v147, v148, v149, v150)
    match v157 with
    | US15_1(v174) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v158, v159, v160, v161, v162) -> (* Ok *)
        let v164 : (char -> string) = _.ToString()
        let v165 : string = v164 v158
        let v168 : string = v0 + v165 
        method108(v168, v159, v160, v161, v162)
and method109 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method109(v0, v6)
        else
            v1
and method110 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v100 : US15 =
        if v5 then
            let v7 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v7)
        else
            let v11 : char = v1.[int 0]
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v1
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v1.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v11
            let v54 : int32 = v51.Length
            let v55 : (char []) = Array.zeroCreate<char> (v54)
            let v56 : Mut5 = {l0 = 0} : Mut5
            while method31(v54, v56) do
                let v58 : int32 = v56.l0
                let v59 : char = v51.[int v58]
                v55.[int v58] <- v59
                let v60 : int32 = v58 + 1
                v56.l0 <- v60
                ()
            let v62 : char list = v55 |> Array.toList
            let v66 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v67 : (char -> (UH0 -> UH0)) = method100()
            let v68 : (char list -> (UH0 -> UH0)) = v66 v67
            let v69 : (UH0 -> UH0) = v68 v62
            let v70 : UH0 = UH0_0
            let v71 : UH0 = v69 v70
            let struct (v96 : System.Text.StringBuilder, v97 : int32, v98 : int32) = method101(v71, v2, v3, v4)
            US15_0(v11, v45, v96, v97, v98)
    match v100 with
    | US15_1(v117) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v101, v102, v103, v104, v105) -> (* Ok *)
        let v107 : (char -> string) = _.ToString()
        let v108 : string = v107 v101
        let v111 : string = v0 + v108 
        method110(v111, v102, v103, v104, v105)
and method98 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v8 : string = ""
    let v9 : string = v4 |> Option.defaultValue v8 
    let v12 : string = method99()
    let v14 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v15 : System.Text.StringBuilder = v14 v12
    let v18 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure35()
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure39()
    let v20 : UH1 = UH1_0
    let v21 : UH1 = UH1_1(v19, v20)
    let v22 : UH1 = UH1_1(v18, v21)
    let v23 : US15 = method103(v9, v15, v22)
    let v235 : US16 =
        match v23 with
        | US15_1(v232) -> (* Error *)
            US16_1(v232)
        | US15_0(v24, v25, v26, v27, v28) -> (* Ok *)
            let v29 : bool = "" = v25
            let v161 : US15 =
                if v29 then
                    let v30 : char list = []
                    let v32 : char list = ''' :: v30 
                    let v36 : char list = '"' :: v32 
                    let v40 : (char list -> (char [])) = List.toArray
                    let v41 : (char []) = v40 v36
                    let v45 : string = $"parsing.none_of / unexpected end of input / chars: %A{v41} / s: %A{struct (v26, v27, v28)}"
                    US15_1(v45)
                else
                    let v49 : char = v25.[int 0]
                    let v50 : int64 = 0L
                    let v51 : bool = method104(v49, v50)
                    let v52 : bool = v51 = false
                    if v52 then
                        let v54 : (string -> int32) = String.length
                        let v55 : int32 = v54 v25
                        let v63 : int32 = 1 |> int32 
                        let v76 : int32 = v55 |> int32 
                        let v84 : int32 = v76 - 1
                        let v86 : string = v25.[int v63..int v84]
                        let v91 : (char -> string) = _.ToString()
                        let v92 : string = v91 v49
                        let v95 : int32 = v92.Length
                        let v96 : (char []) = Array.zeroCreate<char> (v95)
                        let v97 : Mut5 = {l0 = 0} : Mut5
                        while method31(v95, v97) do
                            let v99 : int32 = v97.l0
                            let v100 : char = v92.[int v99]
                            v96.[int v99] <- v100
                            let v101 : int32 = v99 + 1
                            v97.l0 <- v101
                            ()
                        let v103 : char list = v96 |> Array.toList
                        let v107 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v108 : (char -> (UH0 -> UH0)) = method100()
                        let v109 : (char list -> (UH0 -> UH0)) = v107 v108
                        let v110 : (UH0 -> UH0) = v109 v103
                        let v111 : UH0 = UH0_0
                        let v112 : UH0 = v110 v111
                        let struct (v137 : System.Text.StringBuilder, v138 : int32, v139 : int32) = method101(v112, v26, v27, v28)
                        US15_0(v49, v86, v137, v138, v139)
                    else
                        let v141 : char list = []
                        let v143 : char list = ''' :: v141 
                        let v147 : char list = '"' :: v143 
                        let v151 : (char list -> (char [])) = List.toArray
                        let v152 : (char []) = v151 v147
                        let v156 : string = $"parsing.none_of / unexpected char: '{v49}' / chars: %A{v152} / s: %A{struct (v26, v27, v28)}"
                        US15_1(v156)
            let v173 : US15 =
                match v161 with
                | US15_1(v170) -> (* Error *)
                    US15_1(v170)
                | US15_0(v162, v163, v164, v165, v166) -> (* Ok *)
                    let v167 : bool = '\\' = v162
                    let v168 : char =
                        if v167 then
                            '/'
                        else
                            v162
                    US15_0(v168, v163, v164, v165, v166)
            let v193 : US16 =
                match v173 with
                | US15_1(v190) -> (* Error *)
                    US16_1(v190)
                | US15_0(v174, v175, v176, v177, v178) -> (* Ok *)
                    let v180 : (char -> string) = _.ToString()
                    let v181 : string = v180 v174
                    let struct (v184 : string, v185 : string, v186 : System.Text.StringBuilder, v187 : int32, v188 : int32) = method105(v181, v175, v176, v177, v178)
                    US16_0(v184, v185, v186, v187, v188)
            let v203 : US16 =
                match v193 with
                | US16_1(v200) -> (* Error *)
                    US16_0(v8, v25, v26, v27, v28)
                | US16_0(v194, v195, v196, v197, v198) -> (* Ok *)
                    US16_0(v194, v195, v196, v197, v198)
            match v203 with
            | US16_1(v227) -> (* Error *)
                let v228 : string = "parsing.between / expected content"
                US16_1(v228)
            | US16_0(v204, v205, v206, v207, v208) -> (* Ok *)
                let v209 : UH1 = UH1_0
                let v210 : UH1 = UH1_1(v19, v209)
                let v211 : UH1 = UH1_1(v18, v210)
                let v212 : US15 = method106(v205, v206, v207, v208, v211)
                match v212 with
                | US15_1(v219) -> (* Error *)
                    let v221 : string = $"parsing.between / expected closing delimiter / e: %A{v219} / input: %A{struct (v9, v15, 1, 1)} / rest1: %A{struct (v25, v26, v27, v28)} / rest2: %A{struct (v205, v206, v207, v208)}"
                    US16_1(v221)
                | US15_0(v213, v214, v215, v216, v217) -> (* Ok *)
                    US16_0(v204, v214, v215, v216, v217)
    let v493 : US16 =
        match v235 with
        | US16_1(v241) -> (* Error *)
            let v242 : bool = "" = v9
            let v384 : US15 =
                if v242 then
                    let v243 : char list = []
                    let v245 : char list = ' ' :: v243 
                    let v249 : char list = ''' :: v245 
                    let v253 : char list = '"' :: v249 
                    let v257 : (char list -> (char [])) = List.toArray
                    let v258 : (char []) = v257 v253
                    let v262 : string = $"parsing.none_of / unexpected end of input / chars: %A{v258} / s: %A{struct (v15, 1, 1)}"
                    US15_1(v262)
                else
                    let v266 : char = v9.[int 0]
                    let v267 : int64 = 0L
                    let v268 : bool = method107(v266, v267)
                    let v269 : bool = v268 = false
                    if v269 then
                        let v271 : (string -> int32) = String.length
                        let v272 : int32 = v271 v9
                        let v280 : int32 = 1 |> int32 
                        let v293 : int32 = v272 |> int32 
                        let v301 : int32 = v293 - 1
                        let v303 : string = v9.[int v280..int v301]
                        let v308 : (char -> string) = _.ToString()
                        let v309 : string = v308 v266
                        let v312 : int32 = v309.Length
                        let v313 : (char []) = Array.zeroCreate<char> (v312)
                        let v314 : Mut5 = {l0 = 0} : Mut5
                        while method31(v312, v314) do
                            let v316 : int32 = v314.l0
                            let v317 : char = v309.[int v316]
                            v313.[int v316] <- v317
                            let v318 : int32 = v316 + 1
                            v314.l0 <- v318
                            ()
                        let v320 : char list = v313 |> Array.toList
                        let v324 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v325 : (char -> (UH0 -> UH0)) = method100()
                        let v326 : (char list -> (UH0 -> UH0)) = v324 v325
                        let v327 : (UH0 -> UH0) = v326 v320
                        let v328 : UH0 = UH0_0
                        let v329 : UH0 = v327 v328
                        let v354 : int32 = 1
                        let v355 : int32 = 1
                        let struct (v356 : System.Text.StringBuilder, v357 : int32, v358 : int32) = method101(v329, v15, v354, v355)
                        US15_0(v266, v303, v356, v357, v358)
                    else
                        let v360 : char list = []
                        let v362 : char list = ' ' :: v360 
                        let v366 : char list = ''' :: v362 
                        let v370 : char list = '"' :: v366 
                        let v374 : (char list -> (char [])) = List.toArray
                        let v375 : (char []) = v374 v370
                        let v379 : string = $"parsing.none_of / unexpected char: '{v266}' / chars: %A{v375} / s: %A{struct (v15, 1, 1)}"
                        US15_1(v379)
            let v396 : US15 =
                match v384 with
                | US15_1(v393) -> (* Error *)
                    US15_1(v393)
                | US15_0(v385, v386, v387, v388, v389) -> (* Ok *)
                    let v390 : bool = '\\' = v385
                    let v391 : char =
                        if v390 then
                            '/'
                        else
                            v385
                    US15_0(v391, v386, v387, v388, v389)
            let v416 : US16 =
                match v396 with
                | US15_1(v413) -> (* Error *)
                    US16_1(v413)
                | US15_0(v397, v398, v399, v400, v401) -> (* Ok *)
                    let v403 : (char -> string) = _.ToString()
                    let v404 : string = v403 v397
                    let struct (v407 : string, v408 : string, v409 : System.Text.StringBuilder, v410 : int32, v411 : int32) = method108(v404, v398, v399, v400, v401)
                    US16_0(v407, v408, v409, v410, v411)
            match v416 with
            | US16_1(v422) -> (* Error *)
                let v423 : int32 = v9.Length
                let v424 : bool = v423 = 0
                let v431 : US18 =
                    if v424 then
                        US18_0(v9, v15, 1, 1)
                    else
                        let v427 : string = $"parsing.eof / expected end of input / input: %A{v9}"
                        US18_1(v427)
                let v440 : US16 =
                    match v431 with
                    | US18_1(v437) -> (* Error *)
                        US16_1(v437)
                    | US18_0(v432, v433, v434, v435) -> (* Ok *)
                        US16_0(v8, v432, v433, v434, v435)
                match v440 with
                | US16_1(v486) -> (* Error *)
                    US16_1(v486)
                | US16_0(v441, v442, v443, v444, v445) -> (* Ok *)
                    let v446 : int32 = 0
                    let v447 : int32 = method109(v442, v446)
                    let v449 : (string -> int32) = String.length
                    let v450 : int32 = v449 v442
                    let v458 : int32 = v447 |> int32 
                    let v471 : int32 = v450 |> int32 
                    let v479 : int32 = v471 - 1
                    let v481 : string = v442.[int v458..int v479]
                    US16_0(v441, v481, v443, v444, v445)
            | US16_0(v417, v418, v419, v420, v421) -> (* Ok *)
                v416
        | US16_0(v236, v237, v238, v239, v240) -> (* Ok *)
            v235
    let v821 : US19 =
        match v493 with
        | US16_1(v818) -> (* Error *)
            US19_1(v818)
        | US16_0(v494, v495, v496, v497, v498) -> (* Ok *)
            let v499 : bool = "" = v495
            let v658 : US15 =
                if v499 then
                    let v501 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v496, v497, v498)}"
                    US15_1(v501)
                else
                    let v505 : char = v495.[int 0]
                    let v506 : bool = v505 = ' '
                    if v506 then
                        let v508 : (string -> int32) = String.length
                        let v509 : int32 = v508 v495
                        let v517 : int32 = 1 |> int32 
                        let v530 : int32 = v509 |> int32 
                        let v538 : int32 = v530 - 1
                        let v540 : string = v495.[int v517..int v538]
                        let v545 : (char -> string) = _.ToString()
                        let v546 : string = v545 v505
                        let v549 : int32 = v546.Length
                        let v550 : (char []) = Array.zeroCreate<char> (v549)
                        let v551 : Mut5 = {l0 = 0} : Mut5
                        while method31(v549, v551) do
                            let v553 : int32 = v551.l0
                            let v554 : char = v546.[int v553]
                            v550.[int v553] <- v554
                            let v555 : int32 = v553 + 1
                            v551.l0 <- v555
                            ()
                        let v557 : char list = v550 |> Array.toList
                        let v561 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v562 : (char -> (UH0 -> UH0)) = method100()
                        let v563 : (char list -> (UH0 -> UH0)) = v561 v562
                        let v564 : (UH0 -> UH0) = v563 v557
                        let v565 : UH0 = UH0_0
                        let v566 : UH0 = v564 v565
                        let struct (v591 : System.Text.StringBuilder, v592 : int32, v593 : int32) = method101(v566, v496, v497, v498)
                        US15_0(v505, v540, v591, v592, v593)
                    else
                        let v596 : string = "\n"
                        let v597 : int32 = v495.IndexOf v596 
                        let v600 : int32 = v597 - 1
                        let v601 : bool = -2 = v600
                        let v609 : int32 =
                            if v601 then
                                let v603 : (string -> int32) = String.length
                                let v604 : int32 = v603 v495
                                let v607 : int32 = v604 + 1
                                v607
                            else
                                let v608 : int32 = v600 + 1
                                v608
                        let v615 : int32 = 0 |> int32 
                        let v628 : int32 = v609 |> int32 
                        let v636 : int32 = v628 - 1
                        let v638 : string = v495.[int v615..int v636]
                        let v643 : string = $"parsing.p_char / expected: '{' '}' / line: {v497} / col: {v498}
{v496}{v638}"
                        let v646 : int32 = v498 - 1
                        let v647 : int32 = 0
                        let v648 : (string -> string) = method102(v646, v647)
                        let v649 : string = v648 v8
                        let v650 : string = "^"
                        let v651 : string = v649 + v650 
                        let v653 : string = $"{v643}
{v651}
"
                        US15_1(v653)
            let v670 : US20 =
                match v658 with
                | US15_1(v666) -> (* Error *)
                    let v667 : US17 = US17_1
                    US20_0(v667, v495, v496, v497, v498)
                | US15_0(v659, v660, v661, v662, v663) -> (* Ok *)
                    let v664 : US17 = US17_0(v659)
                    US20_0(v664, v660, v661, v662, v663)
            let v795 : US16 =
                match v670 with
                | US20_1(v792) -> (* Error *)
                    US16_1(v792)
                | US20_0(v671, v672, v673, v674, v675) -> (* Ok *)
                    let v676 : bool = "" = v672
                    let v771 : US15 =
                        if v676 then
                            let v678 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v673, v674, v675)}"
                            US15_1(v678)
                        else
                            let v682 : char = v672.[int 0]
                            let v684 : (string -> int32) = String.length
                            let v685 : int32 = v684 v672
                            let v693 : int32 = 1 |> int32 
                            let v706 : int32 = v685 |> int32 
                            let v714 : int32 = v706 - 1
                            let v716 : string = v672.[int v693..int v714]
                            let v721 : (char -> string) = _.ToString()
                            let v722 : string = v721 v682
                            let v725 : int32 = v722.Length
                            let v726 : (char []) = Array.zeroCreate<char> (v725)
                            let v727 : Mut5 = {l0 = 0} : Mut5
                            while method31(v725, v727) do
                                let v729 : int32 = v727.l0
                                let v730 : char = v722.[int v729]
                                v726.[int v729] <- v730
                                let v731 : int32 = v729 + 1
                                v727.l0 <- v731
                                ()
                            let v733 : char list = v726 |> Array.toList
                            let v737 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v738 : (char -> (UH0 -> UH0)) = method100()
                            let v739 : (char list -> (UH0 -> UH0)) = v737 v738
                            let v740 : (UH0 -> UH0) = v739 v733
                            let v741 : UH0 = UH0_0
                            let v742 : UH0 = v740 v741
                            let struct (v767 : System.Text.StringBuilder, v768 : int32, v769 : int32) = method101(v742, v673, v674, v675)
                            US15_0(v682, v716, v767, v768, v769)
                    match v771 with
                    | US15_1(v788) -> (* Error *)
                        US16_1(v788)
                    | US15_0(v772, v773, v774, v775, v776) -> (* Ok *)
                        let v778 : (char -> string) = _.ToString()
                        let v779 : string = v778 v772
                        let struct (v782 : string, v783 : string, v784 : System.Text.StringBuilder, v785 : int32, v786 : int32) = method110(v779, v773, v774, v775, v776)
                        US16_0(v782, v783, v784, v785, v786)
            let v807 : US21 =
                match v795 with
                | US16_1(v803) -> (* Error *)
                    let v804 : US5 = US5_1
                    US21_0(v804, v495, v496, v497, v498)
                | US16_0(v796, v797, v798, v799, v800) -> (* Ok *)
                    let v801 : US5 = US5_0(v796)
                    US21_0(v801, v797, v798, v799, v800)
            match v807 with
            | US21_1(v814) -> (* Error *)
                US19_1(v814)
            | US21_0(v808, v809, v810, v811, v812) -> (* Ok *)
                US19_0(v494, v808, v809, v810, v811, v812)
    match v821 with
    | US19_1(v829) -> (* Error *)
        US14_1(v829)
    | US19_0(v822, v823, v824, v825, v826, v827) -> (* Ok *)
        US14_0(v822, v823)
and method113 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method113(v0, v25)
and method114 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v153 : US15 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US15_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method113(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int32 = v76.Length
                let v80 : (char []) = Array.zeroCreate<char> (v79)
                let v81 : Mut5 = {l0 = 0} : Mut5
                while method31(v79, v81) do
                    let v83 : int32 = v81.l0
                    let v84 : char = v76.[int v83]
                    v80.[int v83] <- v84
                    let v85 : int32 = v83 + 1
                    v81.l0 <- v85
                    ()
                let v87 : char list = v80 |> Array.toList
                let v91 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v92 : (char -> (UH0 -> UH0)) = method100()
                let v93 : (char list -> (UH0 -> UH0)) = v91 v92
                let v94 : (UH0 -> UH0) = v93 v87
                let v95 : UH0 = UH0_0
                let v96 : UH0 = v94 v95
                let struct (v121 : System.Text.StringBuilder, v122 : int32, v123 : int32) = method101(v96, v2, v3, v4)
                US15_0(v33, v70, v121, v122, v123)
            else
                let v125 : char list = []
                let v127 : char list = ' ' :: v125 
                let v131 : char list = '"' :: v127 
                let v135 : char list = '`' :: v131 
                let v139 : char list = '\\' :: v135 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v139
                let v148 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US15_1(v148)
    match v153 with
    | US15_1(v170) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v154, v155, v156, v157, v158) -> (* Ok *)
        let v160 : (char -> string) = _.ToString()
        let v161 : string = v160 v154
        let v164 : string = v0 + v161 
        method114(v164, v155, v156, v157, v158)
and method116 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method116(v0, v21)
and closure40 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v164 : US15 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US15_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int32 = v51.Length
                let v55 : (char []) = Array.zeroCreate<char> (v54)
                let v56 : Mut5 = {l0 = 0} : Mut5
                while method31(v54, v56) do
                    let v58 : int32 = v56.l0
                    let v59 : char = v51.[int v58]
                    v55.[int v58] <- v59
                    let v60 : int32 = v58 + 1
                    v56.l0 <- v60
                    ()
                let v62 : char list = v55 |> Array.toList
                let v66 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v67 : (char -> (UH0 -> UH0)) = method100()
                let v68 : (char list -> (UH0 -> UH0)) = v66 v67
                let v69 : (UH0 -> UH0) = v68 v62
                let v70 : UH0 = UH0_0
                let v71 : UH0 = v69 v70
                let struct (v96 : System.Text.StringBuilder, v97 : int32, v98 : int32) = method101(v71, v1, v2, v3)
                US15_0(v10, v45, v96, v97, v98)
            else
                let v101 : string = "\n"
                let v102 : int32 = v0.IndexOf v101 
                let v105 : int32 = v102 - 1
                let v106 : bool = -2 = v105
                let v114 : int32 =
                    if v106 then
                        let v108 : (string -> int32) = String.length
                        let v109 : int32 = v108 v0
                        let v112 : int32 = v109 + 1
                        v112
                    else
                        let v113 : int32 = v105 + 1
                        v113
                let v120 : int32 = 0 |> int32 
                let v133 : int32 = v114 |> int32 
                let v141 : int32 = v133 - 1
                let v143 : string = v0.[int v120..int v141]
                let v148 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v143}"
                let v151 : int32 = v3 - 1
                let v152 : int32 = 0
                let v153 : (string -> string) = method102(v151, v152)
                let v154 : string = ""
                let v155 : string = v153 v154
                let v156 : string = "^"
                let v157 : string = v155 + v156 
                let v159 : string = $"{v148}
{v157}
"
                US15_1(v159)
    let v269 : US15 =
        match v164 with
        | US15_1(v266) -> (* Error *)
            US15_1(v266)
        | US15_0(v165, v166, v167, v168, v169) -> (* Ok *)
            let v170 : bool = "" = v166
            if v170 then
                let v172 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v167, v168, v169)}"
                US15_1(v172)
            else
                let v176 : char = v166.[int 0]
                let v178 : (string -> int32) = String.length
                let v179 : int32 = v178 v166
                let v187 : int32 = 1 |> int32 
                let v200 : int32 = v179 |> int32 
                let v208 : int32 = v200 - 1
                let v210 : string = v166.[int v187..int v208]
                let v215 : (char -> string) = _.ToString()
                let v216 : string = v215 v176
                let v219 : int32 = v216.Length
                let v220 : (char []) = Array.zeroCreate<char> (v219)
                let v221 : Mut5 = {l0 = 0} : Mut5
                while method31(v219, v221) do
                    let v223 : int32 = v221.l0
                    let v224 : char = v216.[int v223]
                    v220.[int v223] <- v224
                    let v225 : int32 = v223 + 1
                    v221.l0 <- v225
                    ()
                let v227 : char list = v220 |> Array.toList
                let v231 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v232 : (char -> (UH0 -> UH0)) = method100()
                let v233 : (char list -> (UH0 -> UH0)) = v231 v232
                let v234 : (UH0 -> UH0) = v233 v227
                let v235 : UH0 = UH0_0
                let v236 : UH0 = v234 v235
                let struct (v261 : System.Text.StringBuilder, v262 : int32, v263 : int32) = method101(v236, v167, v168, v169)
                US15_0(v176, v210, v261, v262, v263)
    match v269 with
    | US15_1(v287) -> (* Error *)
        US16_1(v287)
    | US15_0(v270, v271, v272, v273, v274) -> (* Ok *)
        let v276 : (char -> string) = _.ToString()
        let v277 : string = v276 '\\'
        let v281 : (char -> string) = _.ToString()
        let v282 : string = v281 v270
        let v285 : string = v277 + v282 
        US16_0(v285, v271, v272, v273, v274)
and closure41 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v164 : US15 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US15_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int32 = v51.Length
                let v55 : (char []) = Array.zeroCreate<char> (v54)
                let v56 : Mut5 = {l0 = 0} : Mut5
                while method31(v54, v56) do
                    let v58 : int32 = v56.l0
                    let v59 : char = v51.[int v58]
                    v55.[int v58] <- v59
                    let v60 : int32 = v58 + 1
                    v56.l0 <- v60
                    ()
                let v62 : char list = v55 |> Array.toList
                let v66 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v67 : (char -> (UH0 -> UH0)) = method100()
                let v68 : (char list -> (UH0 -> UH0)) = v66 v67
                let v69 : (UH0 -> UH0) = v68 v62
                let v70 : UH0 = UH0_0
                let v71 : UH0 = v69 v70
                let struct (v96 : System.Text.StringBuilder, v97 : int32, v98 : int32) = method101(v71, v1, v2, v3)
                US15_0(v10, v45, v96, v97, v98)
            else
                let v101 : string = "\n"
                let v102 : int32 = v0.IndexOf v101 
                let v105 : int32 = v102 - 1
                let v106 : bool = -2 = v105
                let v114 : int32 =
                    if v106 then
                        let v108 : (string -> int32) = String.length
                        let v109 : int32 = v108 v0
                        let v112 : int32 = v109 + 1
                        v112
                    else
                        let v113 : int32 = v105 + 1
                        v113
                let v120 : int32 = 0 |> int32 
                let v133 : int32 = v114 |> int32 
                let v141 : int32 = v133 - 1
                let v143 : string = v0.[int v120..int v141]
                let v148 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v143}"
                let v151 : int32 = v3 - 1
                let v152 : int32 = 0
                let v153 : (string -> string) = method102(v151, v152)
                let v154 : string = ""
                let v155 : string = v153 v154
                let v156 : string = "^"
                let v157 : string = v155 + v156 
                let v159 : string = $"{v148}
{v157}
"
                US15_1(v159)
    let v269 : US15 =
        match v164 with
        | US15_1(v266) -> (* Error *)
            US15_1(v266)
        | US15_0(v165, v166, v167, v168, v169) -> (* Ok *)
            let v170 : bool = "" = v166
            if v170 then
                let v172 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v167, v168, v169)}"
                US15_1(v172)
            else
                let v176 : char = v166.[int 0]
                let v178 : (string -> int32) = String.length
                let v179 : int32 = v178 v166
                let v187 : int32 = 1 |> int32 
                let v200 : int32 = v179 |> int32 
                let v208 : int32 = v200 - 1
                let v210 : string = v166.[int v187..int v208]
                let v215 : (char -> string) = _.ToString()
                let v216 : string = v215 v176
                let v219 : int32 = v216.Length
                let v220 : (char []) = Array.zeroCreate<char> (v219)
                let v221 : Mut5 = {l0 = 0} : Mut5
                while method31(v219, v221) do
                    let v223 : int32 = v221.l0
                    let v224 : char = v216.[int v223]
                    v220.[int v223] <- v224
                    let v225 : int32 = v223 + 1
                    v221.l0 <- v225
                    ()
                let v227 : char list = v220 |> Array.toList
                let v231 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v232 : (char -> (UH0 -> UH0)) = method100()
                let v233 : (char list -> (UH0 -> UH0)) = v231 v232
                let v234 : (UH0 -> UH0) = v233 v227
                let v235 : UH0 = UH0_0
                let v236 : UH0 = v234 v235
                let struct (v261 : System.Text.StringBuilder, v262 : int32, v263 : int32) = method101(v236, v167, v168, v169)
                US15_0(v176, v210, v261, v262, v263)
    match v269 with
    | US15_1(v287) -> (* Error *)
        US16_1(v287)
    | US15_0(v270, v271, v272, v273, v274) -> (* Ok *)
        let v276 : (char -> string) = _.ToString()
        let v277 : string = v276 '`'
        let v281 : (char -> string) = _.ToString()
        let v282 : string = v281 v270
        let v285 : string = v277 + v282 
        US16_0(v285, v271, v272, v273, v274)
and method117 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method117(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US16_1(v5)
and method118 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method118(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method115 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v145 : US15 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US15_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method116(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int32 = v72.Length
                let v76 : (char []) = Array.zeroCreate<char> (v75)
                let v77 : Mut5 = {l0 = 0} : Mut5
                while method31(v75, v77) do
                    let v79 : int32 = v77.l0
                    let v80 : char = v72.[int v79]
                    v76.[int v79] <- v80
                    let v81 : int32 = v79 + 1
                    v77.l0 <- v81
                    ()
                let v83 : char list = v76 |> Array.toList
                let v87 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v88 : (char -> (UH0 -> UH0)) = method100()
                let v89 : (char list -> (UH0 -> UH0)) = v87 v88
                let v90 : (UH0 -> UH0) = v89 v83
                let v91 : UH0 = UH0_0
                let v92 : UH0 = v90 v91
                let struct (v117 : System.Text.StringBuilder, v118 : int32, v119 : int32) = method101(v92, v2, v3, v4)
                US15_0(v29, v66, v117, v118, v119)
            else
                let v121 : char list = []
                let v123 : char list = '"' :: v121 
                let v127 : char list = '`' :: v123 
                let v131 : char list = '\\' :: v127 
                let v135 : (char list -> (char [])) = List.toArray
                let v136 : (char []) = v135 v131
                let v140 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v136} / s: %A{struct (v2, v3, v4)}"
                US15_1(v140)
    let v160 : US16 =
        match v145 with
        | US15_1(v157) -> (* Error *)
            US16_1(v157)
        | US15_0(v146, v147, v148, v149, v150) -> (* Ok *)
            let v152 : (char -> string) = _.ToString()
            let v153 : string = v152 v146
            US16_0(v153, v147, v148, v149, v150)
    let v174 : US16 =
        match v160 with
        | US16_1(v166) -> (* Error *)
            let v167 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure40()
            let v168 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure41()
            let v169 : UH3 = UH3_0
            let v170 : UH3 = UH3_1(v168, v169)
            let v171 : UH3 = UH3_1(v167, v170)
            method117(v1, v2, v3, v4, v171)
        | US16_0(v161, v162, v163, v164, v165) -> (* Ok *)
            v160
    match v174 with
    | US16_1(v182) -> (* Error *)
        let v183 : UH2 = UH2_0
        let v184 : UH2 = method118(v0, v183)
        US23_0(v184, v1, v2, v3, v4)
    | US16_0(v175, v176, v177, v178, v179) -> (* Ok *)
        let v180 : UH2 = UH2_1(v175, v0)
        method115(v180, v176, v177, v178, v179)
and method119 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method119(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method120 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v145 : US15 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US15_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method116(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int32 = v72.Length
                let v76 : (char []) = Array.zeroCreate<char> (v75)
                let v77 : Mut5 = {l0 = 0} : Mut5
                while method31(v75, v77) do
                    let v79 : int32 = v77.l0
                    let v80 : char = v72.[int v79]
                    v76.[int v79] <- v80
                    let v81 : int32 = v79 + 1
                    v77.l0 <- v81
                    ()
                let v83 : char list = v76 |> Array.toList
                let v87 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v88 : (char -> (UH0 -> UH0)) = method100()
                let v89 : (char list -> (UH0 -> UH0)) = v87 v88
                let v90 : (UH0 -> UH0) = v89 v83
                let v91 : UH0 = UH0_0
                let v92 : UH0 = v90 v91
                let struct (v117 : System.Text.StringBuilder, v118 : int32, v119 : int32) = method101(v92, v2, v3, v4)
                US15_0(v29, v66, v117, v118, v119)
            else
                let v121 : char list = []
                let v123 : char list = '"' :: v121 
                let v127 : char list = '`' :: v123 
                let v131 : char list = '\\' :: v127 
                let v135 : (char list -> (char [])) = List.toArray
                let v136 : (char []) = v135 v131
                let v140 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v136} / s: %A{struct (v2, v3, v4)}"
                US15_1(v140)
    let v160 : US16 =
        match v145 with
        | US15_1(v157) -> (* Error *)
            US16_1(v157)
        | US15_0(v146, v147, v148, v149, v150) -> (* Ok *)
            let v152 : (char -> string) = _.ToString()
            let v153 : string = v152 v146
            US16_0(v153, v147, v148, v149, v150)
    match v160 with
    | US16_1(v168) -> (* Error *)
        let v169 : UH2 = UH2_0
        let v170 : UH2 = method118(v0, v169)
        US23_0(v170, v1, v2, v3, v4)
    | US16_0(v161, v162, v163, v164, v165) -> (* Ok *)
        let v166 : UH2 = UH2_1(v161, v0)
        method120(v166, v162, v163, v164, v165)
and method112 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v153 : US15 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US15_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method113(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int32 = v76.Length
                let v80 : (char []) = Array.zeroCreate<char> (v79)
                let v81 : Mut5 = {l0 = 0} : Mut5
                while method31(v79, v81) do
                    let v83 : int32 = v81.l0
                    let v84 : char = v76.[int v83]
                    v80.[int v83] <- v84
                    let v85 : int32 = v83 + 1
                    v81.l0 <- v85
                    ()
                let v87 : char list = v80 |> Array.toList
                let v91 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v92 : (char -> (UH0 -> UH0)) = method100()
                let v93 : (char list -> (UH0 -> UH0)) = v91 v92
                let v94 : (UH0 -> UH0) = v93 v87
                let v95 : UH0 = UH0_0
                let v96 : UH0 = v94 v95
                let struct (v121 : System.Text.StringBuilder, v122 : int32, v123 : int32) = method101(v96, v2, v3, v4)
                US15_0(v33, v70, v121, v122, v123)
            else
                let v125 : char list = []
                let v127 : char list = ' ' :: v125 
                let v131 : char list = '"' :: v127 
                let v135 : char list = '`' :: v131 
                let v139 : char list = '\\' :: v135 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v139
                let v148 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US15_1(v148)
    let v173 : US16 =
        match v153 with
        | US15_1(v170) -> (* Error *)
            US16_1(v170)
        | US15_0(v154, v155, v156, v157, v158) -> (* Ok *)
            let v160 : (char -> string) = _.ToString()
            let v161 : string = v160 v154
            let struct (v164 : string, v165 : string, v166 : System.Text.StringBuilder, v167 : int32, v168 : int32) = method114(v161, v155, v156, v157, v158)
            US16_0(v164, v165, v166, v167, v168)
    let v635 : US16 =
        match v173 with
        | US16_1(v179) -> (* Error *)
            let v339 : US15 =
                if v5 then
                    let v181 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US15_1(v181)
                else
                    let v185 : char = v1.[int 0]
                    let v186 : bool = v185 = '"'
                    if v186 then
                        let v188 : (string -> int32) = String.length
                        let v189 : int32 = v188 v1
                        let v197 : int32 = 1 |> int32 
                        let v210 : int32 = v189 |> int32 
                        let v218 : int32 = v210 - 1
                        let v220 : string = v1.[int v197..int v218]
                        let v225 : (char -> string) = _.ToString()
                        let v226 : string = v225 v185
                        let v229 : int32 = v226.Length
                        let v230 : (char []) = Array.zeroCreate<char> (v229)
                        let v231 : Mut5 = {l0 = 0} : Mut5
                        while method31(v229, v231) do
                            let v233 : int32 = v231.l0
                            let v234 : char = v226.[int v233]
                            v230.[int v233] <- v234
                            let v235 : int32 = v233 + 1
                            v231.l0 <- v235
                            ()
                        let v237 : char list = v230 |> Array.toList
                        let v241 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v242 : (char -> (UH0 -> UH0)) = method100()
                        let v243 : (char list -> (UH0 -> UH0)) = v241 v242
                        let v244 : (UH0 -> UH0) = v243 v237
                        let v245 : UH0 = UH0_0
                        let v246 : UH0 = v244 v245
                        let struct (v271 : System.Text.StringBuilder, v272 : int32, v273 : int32) = method101(v246, v2, v3, v4)
                        US15_0(v185, v220, v271, v272, v273)
                    else
                        let v276 : string = "\n"
                        let v277 : int32 = v1.IndexOf v276 
                        let v280 : int32 = v277 - 1
                        let v281 : bool = -2 = v280
                        let v289 : int32 =
                            if v281 then
                                let v283 : (string -> int32) = String.length
                                let v284 : int32 = v283 v1
                                let v287 : int32 = v284 + 1
                                v287
                            else
                                let v288 : int32 = v280 + 1
                                v288
                        let v295 : int32 = 0 |> int32 
                        let v308 : int32 = v289 |> int32 
                        let v316 : int32 = v308 - 1
                        let v318 : string = v1.[int v295..int v316]
                        let v323 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v318}"
                        let v326 : int32 = v4 - 1
                        let v327 : int32 = 0
                        let v328 : (string -> string) = method102(v326, v327)
                        let v329 : string = ""
                        let v330 : string = v328 v329
                        let v331 : string = "^"
                        let v332 : string = v330 + v331 
                        let v334 : string = $"{v323}
{v332}
"
                        US15_1(v334)
            let v566 : US16 =
                match v339 with
                | US15_1(v563) -> (* Error *)
                    US16_1(v563)
                | US15_0(v340, v341, v342, v343, v344) -> (* Ok *)
                    let v345 : UH2 = UH2_0
                    let v346 : US23 = method115(v345, v341, v342, v343, v344)
                    let v377 : US16 =
                        match v346 with
                        | US23_1(v374) -> (* Error *)
                            US16_1(v374)
                        | US23_0(v347, v348, v349, v350, v351) -> (* Ok *)
                            let v352 : string list = []
                            let v353 : string list = method119(v347, v352)
                            let v357 : unit = ()
                            let _let'_v357 =
                                seq {
                                    yield! v353 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v360 : string seq = _let'_v357 
                            let v367 : (string -> (string seq -> string)) = String.concat
                            let v368 : string = ""
                            let v369 : (string seq -> string) = v367 v368
                            let v370 : string = v369 v360
                            US16_0(v370, v348, v349, v350, v351)
                    match v377 with
                    | US16_1(v558) -> (* Error *)
                        let v559 : string = "parsing.between / expected content"
                        US16_1(v559)
                    | US16_0(v378, v379, v380, v381, v382) -> (* Ok *)
                        let v383 : bool = "" = v379
                        let v543 : US15 =
                            if v383 then
                                let v385 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v380, v381, v382)}"
                                US15_1(v385)
                            else
                                let v389 : char = v379.[int 0]
                                let v390 : bool = v389 = '"'
                                if v390 then
                                    let v392 : (string -> int32) = String.length
                                    let v393 : int32 = v392 v379
                                    let v401 : int32 = 1 |> int32 
                                    let v414 : int32 = v393 |> int32 
                                    let v422 : int32 = v414 - 1
                                    let v424 : string = v379.[int v401..int v422]
                                    let v429 : (char -> string) = _.ToString()
                                    let v430 : string = v429 v389
                                    let v433 : int32 = v430.Length
                                    let v434 : (char []) = Array.zeroCreate<char> (v433)
                                    let v435 : Mut5 = {l0 = 0} : Mut5
                                    while method31(v433, v435) do
                                        let v437 : int32 = v435.l0
                                        let v438 : char = v430.[int v437]
                                        v434.[int v437] <- v438
                                        let v439 : int32 = v437 + 1
                                        v435.l0 <- v439
                                        ()
                                    let v441 : char list = v434 |> Array.toList
                                    let v445 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v446 : (char -> (UH0 -> UH0)) = method100()
                                    let v447 : (char list -> (UH0 -> UH0)) = v445 v446
                                    let v448 : (UH0 -> UH0) = v447 v441
                                    let v449 : UH0 = UH0_0
                                    let v450 : UH0 = v448 v449
                                    let struct (v475 : System.Text.StringBuilder, v476 : int32, v477 : int32) = method101(v450, v380, v381, v382)
                                    US15_0(v389, v424, v475, v476, v477)
                                else
                                    let v480 : string = "\n"
                                    let v481 : int32 = v379.IndexOf v480 
                                    let v484 : int32 = v481 - 1
                                    let v485 : bool = -2 = v484
                                    let v493 : int32 =
                                        if v485 then
                                            let v487 : (string -> int32) = String.length
                                            let v488 : int32 = v487 v379
                                            let v491 : int32 = v488 + 1
                                            v491
                                        else
                                            let v492 : int32 = v484 + 1
                                            v492
                                    let v499 : int32 = 0 |> int32 
                                    let v512 : int32 = v493 |> int32 
                                    let v520 : int32 = v512 - 1
                                    let v522 : string = v379.[int v499..int v520]
                                    let v527 : string = $"parsing.p_char / expected: '{'"'}' / line: {v381} / col: {v382}
{v380}{v522}"
                                    let v530 : int32 = v382 - 1
                                    let v531 : int32 = 0
                                    let v532 : (string -> string) = method102(v530, v531)
                                    let v533 : string = ""
                                    let v534 : string = v532 v533
                                    let v535 : string = "^"
                                    let v536 : string = v534 + v535 
                                    let v538 : string = $"{v527}
{v536}
"
                                    US15_1(v538)
                        match v543 with
                        | US15_1(v550) -> (* Error *)
                            let v552 : string = $"parsing.between / expected closing delimiter / e: %A{v550} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v341, v342, v343, v344)} / rest2: %A{struct (v379, v380, v381, v382)}"
                            US16_1(v552)
                        | US15_0(v544, v545, v546, v547, v548) -> (* Ok *)
                            US16_0(v378, v545, v546, v547, v548)
            match v566 with
            | US16_1(v572) -> (* Error *)
                let v573 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure40()
                let v574 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure41()
                let v575 : UH3 = UH3_0
                let v576 : UH3 = UH3_1(v574, v575)
                let v577 : UH3 = UH3_1(v573, v576)
                let v578 : US16 = method117(v1, v2, v3, v4, v577)
                let v589 : US16 =
                    match v578 with
                    | US16_1(v586) -> (* Error *)
                        US16_1(v586)
                    | US16_0(v579, v580, v581, v582, v583) -> (* Ok *)
                        let v584 : string = ""
                        US16_0(v584, v580, v581, v582, v583)
                let v600 : US23 =
                    match v589 with
                    | US16_1(v597) -> (* Error *)
                        US23_1(v597)
                    | US16_0(v590, v591, v592, v593, v594) -> (* Ok *)
                        let v595 : UH2 = UH2_0
                        method120(v595, v591, v592, v593, v594)
                match v600 with
                | US23_1(v628) -> (* Error *)
                    US16_1(v628)
                | US23_0(v601, v602, v603, v604, v605) -> (* Ok *)
                    let v606 : string list = []
                    let v607 : string list = method119(v601, v606)
                    let v611 : unit = ()
                    let _let'_v611 =
                        seq {
                            yield! v607 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v614 : string seq = _let'_v611 
                    let v621 : (string -> (string seq -> string)) = String.concat
                    let v622 : string = ""
                    let v623 : (string seq -> string) = v621 v622
                    let v624 : string = v623 v614
                    US16_0(v624, v602, v603, v604, v605)
            | US16_0(v567, v568, v569, v570, v571) -> (* Ok *)
                v566
        | US16_0(v174, v175, v176, v177, v178) -> (* Ok *)
            v173
    match v635 with
    | US16_1(v698) -> (* Error *)
        let v699 : UH2 = UH2_0
        let v700 : UH2 = method118(v0, v699)
        US23_0(v700, v1, v2, v3, v4)
    | US16_0(v636, v637, v638, v639, v640) -> (* Ok *)
        let v641 : int32 = 0
        let v642 : int32 = method109(v637, v641)
        let v643 : bool = 0 = v642
        let v684 : US18 =
            if v643 then
                let v644 : string = "parsing.spaces1 / expected at least one space"
                US18_1(v644)
            else
                let v647 : (string -> int32) = String.length
                let v648 : int32 = v647 v637
                let v656 : int32 = v642 |> int32 
                let v669 : int32 = v648 |> int32 
                let v677 : int32 = v669 - 1
                let v679 : string = v637.[int v656..int v677]
                US18_0(v679, v638, v639, v640)
        match v684 with
        | US18_1(v691) -> (* Error *)
            let v692 : UH2 = UH2_0
            let v693 : UH2 = UH2_1(v636, v692)
            let v694 : UH2 = method118(v0, v693)
            US23_0(v694, v637, v638, v639, v640)
        | US18_0(v685, v686, v687, v688) -> (* Ok *)
            let v689 : UH2 = UH2_1(v636, v0)
            method112(v689, v685, v686, v687, v688)
and method111 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v8 : string = ""
    let v9 : string = v4 |> Option.defaultValue v8 
    let v12 : string = method99()
    let v14 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v15 : System.Text.StringBuilder = v14 v12
    let v18 : UH2 = UH2_0
    let v19 : int32 = 1
    let v20 : int32 = 1
    let v21 : US23 = method112(v18, v9, v15, v19, v20)
    match v21 with
    | US23_1(v35) -> (* Error *)
        US22_1(v35)
    | US23_0(v22, v23, v24, v25, v26) -> (* Ok *)
        let v27 : string list = []
        let v28 : string list = method119(v22, v27)
        let v30 : (string list -> (string [])) = List.toArray
        let v31 : (string []) = v30 v28
        US22_0(v31)
and method122 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v12 : string = "{ "
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v10, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v22 : string = "file_name"
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v10, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v10, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v10, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v10, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v61 : string = "arguments"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v10, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v32}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v10, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"{v1}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v89 : string = $"{v51}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v98 : string = "options"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v10, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v32}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v12}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v126 : string = "command"
    let v127 : string = $"{v126}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v10, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v136 : string = $"{v32}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v10, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v145 : string = $"{v2}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v10, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v154 : string = $"{v51}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v10, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v163 : string = "cancellation_token"
    let v164 : string = $"{v163}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v10, v164)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v173 : string = $"{v32}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v10, v173)
    let v178 : unit = (fun () -> v177 (); v176) ()
    (* run_target_args'
    let v185 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v185 = v189 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v185 = v193 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v185 = v197 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v199 : string = $"%A{v3}"
    let _run_target_args'_v185 = v199 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v3}"
    let _run_target_args'_v185 = v203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v185 = v207 
    #endif
#else
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v185 = v211 
    #endif
    let v214 : string = _run_target_args'_v185 
    let v221 : string = $"{v214}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v230 : string = $"{v51}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v10, v230)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v239 : string = "environment_variables"
    let v240 : string = $"{v239}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v249 : string = $"{v32}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"%A{v4}"
    let v262 : string = $"{v258}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v10, v262)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v271 : string = $"{v51}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = "on_line"
    let v281 : string = $"{v280}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v10, v281)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v290 : string = $"{v32}"
    let v293 : unit = ()
    let v294 : (unit -> unit) = closure7(v10, v290)
    let v295 : unit = (fun () -> v294 (); v293) ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = "format!(\"{:#?}\", $0)"
    let v304 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v303 
    let v305 : string = "fable_library_rust::String_::fromString($0)"
    let v306 : string = Fable.Core.RustInterop.emitRustExpr v304 v305 
    let _run_target_args'_v302 = v306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v307 : string = "format!(\"{:#?}\", $0)"
    let v308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v307 
    let v309 : string = "fable_library_rust::String_::fromString($0)"
    let v310 : string = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let _run_target_args'_v302 = v310 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v311 : string = "format!(\"{:#?}\", $0)"
    let v312 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v311 
    let v313 : string = "fable_library_rust::String_::fromString($0)"
    let v314 : string = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let _run_target_args'_v302 = v314 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v316 : string = $"%A{v5}"
    let _run_target_args'_v302 = v316 
    #endif
#if FABLE_COMPILER_PYTHON
    let v320 : string = $"%A{v5}"
    let _run_target_args'_v302 = v320 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v324 : string = $"%A{v5}"
    let _run_target_args'_v302 = v324 
    #endif
#else
    let v328 : string = $"%A{v5}"
    let _run_target_args'_v302 = v328 
    #endif
    let v331 : string = _run_target_args'_v302 
    let v338 : string = $"{v331}"
    let v341 : unit = ()
    let v342 : (unit -> unit) = closure7(v10, v338)
    let v343 : unit = (fun () -> v342 (); v341) ()
    let v347 : string = $"{v51}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v10, v347)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v356 : string = "stdin"
    let v357 : string = $"{v356}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v366 : string = $"{v32}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    (* run_target_args'
    let v378 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v379 : string = "format!(\"{:#?}\", $0)"
    let v380 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v379 
    let v381 : string = "fable_library_rust::String_::fromString($0)"
    let v382 : string = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let _run_target_args'_v378 = v382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v383 : string = "format!(\"{:#?}\", $0)"
    let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v383 
    let v385 : string = "fable_library_rust::String_::fromString($0)"
    let v386 : string = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let _run_target_args'_v378 = v386 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v387 : string = "format!(\"{:#?}\", $0)"
    let v388 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v387 
    let v389 : string = "fable_library_rust::String_::fromString($0)"
    let v390 : string = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let _run_target_args'_v378 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v392 : string = $"%A{v6}"
    let _run_target_args'_v378 = v392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : string = $"%A{v6}"
    let _run_target_args'_v378 = v396 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v400 : string = $"%A{v6}"
    let _run_target_args'_v378 = v400 
    #endif
#else
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v378 = v404 
    #endif
    let v407 : string = _run_target_args'_v378 
    let v414 : string = $"{v407}"
    let v417 : unit = ()
    let v418 : (unit -> unit) = closure7(v10, v414)
    let v419 : unit = (fun () -> v418 (); v417) ()
    let v423 : string = $"{v51}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v10, v423)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v432 : string = "trace"
    let v433 : string = $"{v432}"
    let v436 : unit = ()
    let v437 : (unit -> unit) = closure7(v10, v433)
    let v438 : unit = (fun () -> v437 (); v436) ()
    let v442 : string = $"{v32}"
    let v445 : unit = ()
    let v446 : (unit -> unit) = closure7(v10, v442)
    let v447 : unit = (fun () -> v446 (); v445) ()
    let v452 : string =
        if v7 then
            let v450 : string = "true"
            v450
        else
            let v451 : string = "false"
            v451
    let v454 : string = $"{v452}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v463 : string = $"{v51}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v472 : string = "working_directory"
    let v473 : string = $"{v472}"
    let v476 : unit = ()
    let v477 : (unit -> unit) = closure7(v10, v473)
    let v478 : unit = (fun () -> v477 (); v476) ()
    let v482 : string = $"{v32}"
    let v485 : unit = ()
    let v486 : (unit -> unit) = closure7(v10, v482)
    let v487 : unit = (fun () -> v486 (); v485) ()
    (* run_target_args'
    let v494 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v495 : string = "format!(\"{:#?}\", $0)"
    let v496 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v495 
    let v497 : string = "fable_library_rust::String_::fromString($0)"
    let v498 : string = Fable.Core.RustInterop.emitRustExpr v496 v497 
    let _run_target_args'_v494 = v498 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v499 : string = "format!(\"{:#?}\", $0)"
    let v500 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v499 
    let v501 : string = "fable_library_rust::String_::fromString($0)"
    let v502 : string = Fable.Core.RustInterop.emitRustExpr v500 v501 
    let _run_target_args'_v494 = v502 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v503 : string = "format!(\"{:#?}\", $0)"
    let v504 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v503 
    let v505 : string = "fable_library_rust::String_::fromString($0)"
    let v506 : string = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let _run_target_args'_v494 = v506 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v508 : string = $"%A{v8}"
    let _run_target_args'_v494 = v508 
    #endif
#if FABLE_COMPILER_PYTHON
    let v512 : string = $"%A{v8}"
    let _run_target_args'_v494 = v512 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v516 : string = $"%A{v8}"
    let _run_target_args'_v494 = v516 
    #endif
#else
    let v520 : string = $"%A{v8}"
    let _run_target_args'_v494 = v520 
    #endif
    let v523 : string = _run_target_args'_v494 
    let v530 : string = $"{v523}"
    let v533 : unit = ()
    let v534 : (unit -> unit) = closure7(v10, v530)
    let v535 : unit = (fun () -> v534 (); v533) ()
    let v539 : string = " }"
    let v540 : string = $"{v539}"
    let v543 : unit = ()
    let v544 : (unit -> unit) = closure7(v10, v540)
    let v545 : unit = (fun () -> v544 (); v543) ()
    let v549 : string = $"{v539}"
    let v552 : unit = ()
    let v553 : (unit -> unit) = closure7(v10, v549)
    let v554 : unit = (fun () -> v553 (); v552) ()
    let v557 : string = v10.l0
    v557
and method121 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method122(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure42 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v55 : string = $"%A{v8}"
        let v58 : string = method121(v34, v35, v36, v37, v38, v39, v52, v53, v7, v55, v0, v1, v2, v3, v4, v5, v6)
        method19(v58)
and closure43 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method123 () : (std_process_Child option -> std_process_Child option) =
    closure43()
and closure44 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method124 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure44()
and closure45 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method125 () : (std_string_String -> US24) =
    closure45()
and method127 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "error"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v37 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v37 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v37 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : string = $"%A{v0}"
    let _run_target_args'_v37 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v37 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v0}"
    let _run_target_args'_v37 = v59 
    #endif
#else
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v37 = v63 
    #endif
    let v66 : string = _run_target_args'_v37 
    let v73 : string = $"{v66}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v2, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v2, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v2.l0
    v91
and method126 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method127(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / child error"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure46 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method77()
        let v46 : string = method126(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method128 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure47 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method129 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure47()
and closure48 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method130 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure48()
and method131 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure48()
and closure49 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method132 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure49()
and closure50 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method133 () : (std_string_String -> US26) =
    closure50()
and closure51 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method134 () : (std_string_String -> US26) =
    closure51()
and method136 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "trace'"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v36 : string =
        if v0 then
            let v34 : string = "true"
            v34
        else
            let v35 : string = "false"
            v35
    let v38 : string = $"{v36}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = "; "
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v3, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v57 : string = "e"
    let v58 : string = $"{v57}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v3, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v67 : string = $"{v25}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    (* run_target_args'
    let v79 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v79 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "format!(\"{:#?}\", $0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v88 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let _run_target_args'_v79 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : string = $"%A{v1}"
    let _run_target_args'_v79 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v1}"
    let _run_target_args'_v79 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : string = $"%A{v1}"
    let _run_target_args'_v79 = v101 
    #endif
#else
    let v105 : string = $"%A{v1}"
    let _run_target_args'_v79 = v105 
    #endif
    let v108 : string = _run_target_args'_v79 
    let v115 : string = $"{v108}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v3, v115)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v124 : string = " }"
    let v125 : string = $"{v124}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = v3.l0
    v133
and method135 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method136(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.stdio_line"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure52 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method77()
        let v47 : string = method135(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method138 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method137 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method138()
    let v10 : int64 = v0.l0
    let v12 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v12)
and closure53 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method80()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method137(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and closure54 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method139 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure54()
and method140 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure55 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US27 =
    US27_0(v0)
and method141 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US27) =
    closure55()
and method142 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure56 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US28 =
    US28_0(v0)
and method143 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US28) =
    closure56()
and method144 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure57 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and method145 () : (std_process_Output -> US29) =
    closure57()
and closure58 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method146 () : (std_string_String -> US29) =
    closure58()
and method147 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method127(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / output error"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure59 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method77()
        let v46 : string = method147(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure60 () (v0 : int32) : US30 =
    US30_0(v0)
and method148 () : (int32 -> US30) =
    closure60()
and method150 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "std_trace_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method149 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method150(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.execute_with_options / result"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure61 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method80()
        let v47 : int32 = v1.Length
        let v48 : string = method149(v27, v28, v29, v30, v31, v32, v45, v46, v0, v47)
        method19(v48)
and method154 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v12 : string = "{ "
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v10, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v22 : string = "file_name"
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v10, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v10, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v10, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v10, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v61 : string = "arguments"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v10, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v32}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v10, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"%A{v1}"
    let v84 : string = $"{v80}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v10, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = $"{v51}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = "options"
    let v103 : string = $"{v102}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v10, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v112 : string = $"{v32}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v10, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = $"{v12}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v10, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v130 : string = "command"
    let v131 : string = $"{v130}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v10, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v140 : string = $"{v32}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v10, v140)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v149 : string = $"{v2}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v10, v149)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v158 : string = $"{v51}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v10, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v167 : string = "cancellation_token"
    let v168 : string = $"{v167}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v10, v168)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v177 : string = $"{v32}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v10, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    (* run_target_args'
    let v189 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v189 = v193 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v189 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v189 = v201 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v203 : string = $"%A{v3}"
    let _run_target_args'_v189 = v203 
    #endif
#if FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v189 = v207 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v189 = v211 
    #endif
#else
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v189 = v215 
    #endif
    let v218 : string = _run_target_args'_v189 
    let v225 : string = $"{v218}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v10, v225)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v234 : string = $"{v51}"
    let v237 : unit = ()
    let v238 : (unit -> unit) = closure7(v10, v234)
    let v239 : unit = (fun () -> v238 (); v237) ()
    let v243 : string = "environment_variables"
    let v244 : string = $"{v243}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v10, v244)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v253 : string = $"{v32}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v10, v253)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v262 : string = $"%A{v4}"
    let v266 : string = $"{v262}"
    let v269 : unit = ()
    let v270 : (unit -> unit) = closure7(v10, v266)
    let v271 : unit = (fun () -> v270 (); v269) ()
    let v275 : string = $"{v51}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v10, v275)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v284 : string = "on_line"
    let v285 : string = $"{v284}"
    let v288 : unit = ()
    let v289 : (unit -> unit) = closure7(v10, v285)
    let v290 : unit = (fun () -> v289 (); v288) ()
    let v294 : string = $"{v32}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v10, v294)
    let v299 : unit = (fun () -> v298 (); v297) ()
    (* run_target_args'
    let v306 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v307 : string = "format!(\"{:#?}\", $0)"
    let v308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v307 
    let v309 : string = "fable_library_rust::String_::fromString($0)"
    let v310 : string = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let _run_target_args'_v306 = v310 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v311 : string = "format!(\"{:#?}\", $0)"
    let v312 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v311 
    let v313 : string = "fable_library_rust::String_::fromString($0)"
    let v314 : string = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let _run_target_args'_v306 = v314 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v315 : string = "format!(\"{:#?}\", $0)"
    let v316 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v315 
    let v317 : string = "fable_library_rust::String_::fromString($0)"
    let v318 : string = Fable.Core.RustInterop.emitRustExpr v316 v317 
    let _run_target_args'_v306 = v318 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v320 : string = $"%A{v5}"
    let _run_target_args'_v306 = v320 
    #endif
#if FABLE_COMPILER_PYTHON
    let v324 : string = $"%A{v5}"
    let _run_target_args'_v306 = v324 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v328 : string = $"%A{v5}"
    let _run_target_args'_v306 = v328 
    #endif
#else
    let v332 : string = $"%A{v5}"
    let _run_target_args'_v306 = v332 
    #endif
    let v335 : string = _run_target_args'_v306 
    let v342 : string = $"{v335}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v10, v342)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v351 : string = $"{v51}"
    let v354 : unit = ()
    let v355 : (unit -> unit) = closure7(v10, v351)
    let v356 : unit = (fun () -> v355 (); v354) ()
    let v360 : string = "stdin"
    let v361 : string = $"{v360}"
    let v364 : unit = ()
    let v365 : (unit -> unit) = closure7(v10, v361)
    let v366 : unit = (fun () -> v365 (); v364) ()
    let v370 : string = $"{v32}"
    let v373 : unit = ()
    let v374 : (unit -> unit) = closure7(v10, v370)
    let v375 : unit = (fun () -> v374 (); v373) ()
    (* run_target_args'
    let v382 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v383 : string = "format!(\"{:#?}\", $0)"
    let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v383 
    let v385 : string = "fable_library_rust::String_::fromString($0)"
    let v386 : string = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let _run_target_args'_v382 = v386 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v387 : string = "format!(\"{:#?}\", $0)"
    let v388 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v387 
    let v389 : string = "fable_library_rust::String_::fromString($0)"
    let v390 : string = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let _run_target_args'_v382 = v390 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v391 : string = "format!(\"{:#?}\", $0)"
    let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v391 
    let v393 : string = "fable_library_rust::String_::fromString($0)"
    let v394 : string = Fable.Core.RustInterop.emitRustExpr v392 v393 
    let _run_target_args'_v382 = v394 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v396 : string = $"%A{v6}"
    let _run_target_args'_v382 = v396 
    #endif
#if FABLE_COMPILER_PYTHON
    let v400 : string = $"%A{v6}"
    let _run_target_args'_v382 = v400 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v382 = v404 
    #endif
#else
    let v408 : string = $"%A{v6}"
    let _run_target_args'_v382 = v408 
    #endif
    let v411 : string = _run_target_args'_v382 
    let v418 : string = $"{v411}"
    let v421 : unit = ()
    let v422 : (unit -> unit) = closure7(v10, v418)
    let v423 : unit = (fun () -> v422 (); v421) ()
    let v427 : string = $"{v51}"
    let v430 : unit = ()
    let v431 : (unit -> unit) = closure7(v10, v427)
    let v432 : unit = (fun () -> v431 (); v430) ()
    let v436 : string = "trace"
    let v437 : string = $"{v436}"
    let v440 : unit = ()
    let v441 : (unit -> unit) = closure7(v10, v437)
    let v442 : unit = (fun () -> v441 (); v440) ()
    let v446 : string = $"{v32}"
    let v449 : unit = ()
    let v450 : (unit -> unit) = closure7(v10, v446)
    let v451 : unit = (fun () -> v450 (); v449) ()
    let v456 : string =
        if v7 then
            let v454 : string = "true"
            v454
        else
            let v455 : string = "false"
            v455
    let v458 : string = $"{v456}"
    let v461 : unit = ()
    let v462 : (unit -> unit) = closure7(v10, v458)
    let v463 : unit = (fun () -> v462 (); v461) ()
    let v467 : string = $"{v51}"
    let v470 : unit = ()
    let v471 : (unit -> unit) = closure7(v10, v467)
    let v472 : unit = (fun () -> v471 (); v470) ()
    let v476 : string = "working_directory"
    let v477 : string = $"{v476}"
    let v480 : unit = ()
    let v481 : (unit -> unit) = closure7(v10, v477)
    let v482 : unit = (fun () -> v481 (); v480) ()
    let v486 : string = $"{v32}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v10, v486)
    let v491 : unit = (fun () -> v490 (); v489) ()
    (* run_target_args'
    let v498 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v499 : string = "format!(\"{:#?}\", $0)"
    let v500 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v499 
    let v501 : string = "fable_library_rust::String_::fromString($0)"
    let v502 : string = Fable.Core.RustInterop.emitRustExpr v500 v501 
    let _run_target_args'_v498 = v502 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v503 : string = "format!(\"{:#?}\", $0)"
    let v504 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v503 
    let v505 : string = "fable_library_rust::String_::fromString($0)"
    let v506 : string = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let _run_target_args'_v498 = v506 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v507 : string = "format!(\"{:#?}\", $0)"
    let v508 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v507 
    let v509 : string = "fable_library_rust::String_::fromString($0)"
    let v510 : string = Fable.Core.RustInterop.emitRustExpr v508 v509 
    let _run_target_args'_v498 = v510 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v512 : string = $"%A{v8}"
    let _run_target_args'_v498 = v512 
    #endif
#if FABLE_COMPILER_PYTHON
    let v516 : string = $"%A{v8}"
    let _run_target_args'_v498 = v516 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v520 : string = $"%A{v8}"
    let _run_target_args'_v498 = v520 
    #endif
#else
    let v524 : string = $"%A{v8}"
    let _run_target_args'_v498 = v524 
    #endif
    let v527 : string = _run_target_args'_v498 
    let v534 : string = $"{v527}"
    let v537 : unit = ()
    let v538 : (unit -> unit) = closure7(v10, v534)
    let v539 : unit = (fun () -> v538 (); v537) ()
    let v543 : string = " }"
    let v544 : string = $"{v543}"
    let v547 : unit = ()
    let v548 : (unit -> unit) = closure7(v10, v544)
    let v549 : unit = (fun () -> v548 (); v547) ()
    let v553 : string = $"{v543}"
    let v556 : unit = ()
    let v557 : (unit -> unit) = closure7(v10, v553)
    let v558 : unit = (fun () -> v557 (); v556) ()
    let v561 : string = v10.l0
    v561
and method153 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method154(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure62 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : string = method153(v34, v35, v36, v37, v38, v39, v52, v53, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v54)
and method155 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method158 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure64 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US31 =
    US31_0(v0)
and method159 () : ((struct (int32 * string * bool) -> Async<unit>) -> US31) =
    closure64()
and method160 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure65 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method80()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method137(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and method157 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v32 : string = method158(v10)
            let v34 : string = null |> unbox<string>
            let v37 : bool = v32 = v34
            let v38 : bool = v37 <> true
            if v38 then
                let v40 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method159()
                let v41 : US31 option = v3 |> Option.map v40 
                let v54 : US31 = US31_1
                let v55 : US31 = v41 |> Option.defaultValue v54 
                match v55 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v59) -> (* Some *)
                    let v60 : int32 = method160(v7)
                    let v61 : Async<unit> = v59 struct (v60, v32, v9)
                    do! v61 
                    ()
                let v64 : string =
                    if v9 then
                        let v62 : string = $"! {v32}"
                        v62
                    else
                        let v63 : string = $"> {v32}"
                        v63
                if v5 then
                    let v65 : unit = ()
                    let v66 : (unit -> unit) = closure65(v64)
                    let v67 : unit = (fun () -> v66 (); v65) ()
                    ()
                else
                    let v117 : unit = ()
                    let v118 : (unit -> unit) = closure10(v64)
                    let v119 : unit = (fun () -> v118 (); v117) ()
                    ()
                let v123 : string =
                    if v9 then
                        let v121 : string = "\u001b[7;4m"
                        v121
                    else
                        let v122 : string = ""
                        v122
                let v126 : string =
                    if v9 then
                        let v124 : string = "\u001b[0m"
                        v124
                    else
                        let v125 : string = ""
                        v125
                let v127 : string = $"{v123}{v32}{v126}"
                (* run_target_args'
                let v128 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v129 : (string -> unit) = v8.Push
                v129 v127
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v816 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v816 
    #endif
#if FABLE_COMPILER_PYTHON
    let v818 : unit = ()
    let _let'_v818 =
        async {
            let v821 : string = method158(v10)
            let v823 : string = null |> unbox<string>
            let v826 : bool = v821 = v823
            let v827 : bool = v826 <> true
            if v827 then
                let v829 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method159()
                let v830 : US31 option = v3 |> Option.map v829 
                let v843 : US31 = US31_1
                let v844 : US31 = v830 |> Option.defaultValue v843 
                match v844 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v848) -> (* Some *)
                    let v849 : int32 = method160(v7)
                    let v850 : Async<unit> = v848 struct (v849, v821, v9)
                    do! v850 
                    ()
                let v853 : string =
                    if v9 then
                        let v851 : string = $"! {v821}"
                        v851
                    else
                        let v852 : string = $"> {v821}"
                        v852
                if v5 then
                    let v854 : unit = ()
                    let v855 : (unit -> unit) = closure65(v853)
                    let v856 : unit = (fun () -> v855 (); v854) ()
                    ()
                else
                    let v906 : unit = ()
                    let v907 : (unit -> unit) = closure10(v853)
                    let v908 : unit = (fun () -> v907 (); v906) ()
                    ()
                let v912 : string =
                    if v9 then
                        let v910 : string = "\u001b[7;4m"
                        v910
                    else
                        let v911 : string = ""
                        v911
                let v915 : string =
                    if v9 then
                        let v913 : string = "\u001b[0m"
                        v913
                    else
                        let v914 : string = ""
                        v914
                let v916 : string = $"{v912}{v821}{v915}"
                (* run_target_args'
                let v917 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v918 : (string -> unit) = v8.Push
                v918 v916
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1605 : Async<unit> = _let'_v818 
    let _run_target_args'_v15 = v1605 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1607 : unit = ()
    let _let'_v1607 =
        async {
            let v1610 : string = method158(v10)
            let v1612 : string = null |> unbox<string>
            let v1615 : bool = v1610 = v1612
            let v1616 : bool = v1615 <> true
            if v1616 then
                let v1618 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method159()
                let v1619 : US31 option = v3 |> Option.map v1618 
                let v1632 : US31 = US31_1
                let v1633 : US31 = v1619 |> Option.defaultValue v1632 
                match v1633 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1637) -> (* Some *)
                    let v1638 : int32 = method160(v7)
                    let v1639 : Async<unit> = v1637 struct (v1638, v1610, v9)
                    do! v1639 
                    ()
                let v1642 : string =
                    if v9 then
                        let v1640 : string = $"! {v1610}"
                        v1640
                    else
                        let v1641 : string = $"> {v1610}"
                        v1641
                if v5 then
                    let v1643 : unit = ()
                    let v1644 : (unit -> unit) = closure65(v1642)
                    let v1645 : unit = (fun () -> v1644 (); v1643) ()
                    ()
                else
                    let v1695 : unit = ()
                    let v1696 : (unit -> unit) = closure10(v1642)
                    let v1697 : unit = (fun () -> v1696 (); v1695) ()
                    ()
                let v1701 : string =
                    if v9 then
                        let v1699 : string = "\u001b[7;4m"
                        v1699
                    else
                        let v1700 : string = ""
                        v1700
                let v1704 : string =
                    if v9 then
                        let v1702 : string = "\u001b[0m"
                        v1702
                    else
                        let v1703 : string = ""
                        v1703
                let v1705 : string = $"{v1701}{v1610}{v1704}"
                (* run_target_args'
                let v1706 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v1707 : (string -> unit) = v8.Push
                v1707 v1705
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2394 : Async<unit> = _let'_v1607 
    let _run_target_args'_v15 = v2394 
    #endif
#else
    let v2396 : unit = ()
    let _let'_v2396 =
        async {
            let v2399 : string = method158(v10)
            let v2401 : string = null |> unbox<string>
            let v2404 : bool = v2399 = v2401
            let v2405 : bool = v2404 <> true
            if v2405 then
                let v2407 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method159()
                let v2408 : US31 option = v3 |> Option.map v2407 
                let v2421 : US31 = US31_1
                let v2422 : US31 = v2408 |> Option.defaultValue v2421 
                match v2422 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v2426) -> (* Some *)
                    let v2427 : int32 = method160(v7)
                    let v2428 : Async<unit> = v2426 struct (v2427, v2399, v9)
                    do! v2428 
                    ()
                let v2431 : string =
                    if v9 then
                        let v2429 : string = $"! {v2399}"
                        v2429
                    else
                        let v2430 : string = $"> {v2399}"
                        v2430
                if v5 then
                    let v2432 : unit = ()
                    let v2433 : (unit -> unit) = closure65(v2431)
                    let v2434 : unit = (fun () -> v2433 (); v2432) ()
                    ()
                else
                    let v2484 : unit = ()
                    let v2485 : (unit -> unit) = closure10(v2431)
                    let v2486 : unit = (fun () -> v2485 (); v2484) ()
                    ()
                let v2490 : string =
                    if v9 then
                        let v2488 : string = "\u001b[7;4m"
                        v2488
                    else
                        let v2489 : string = ""
                        v2489
                let v2493 : string =
                    if v9 then
                        let v2491 : string = "\u001b[0m"
                        v2491
                    else
                        let v2492 : string = ""
                        v2492
                let v2494 : string = $"{v2490}{v2399}{v2493}"
                (* run_target_args'
                let v2495 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2496 : (string -> unit) = v8.Push
                v2496 v2494
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3183 : Async<unit> = _let'_v2396 
    let _run_target_args'_v15 = v3183 
    #endif
    let v3184 : Async<unit> = _run_target_args'_v15 
    v3184
and method156 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method157(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure63 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method156(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure66 () (v0 : System.Threading.CancellationToken) : US32 =
    US32_0(v0)
and method161 () : (System.Threading.CancellationToken -> US32) =
    closure66()
and method162 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v26 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v28 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v28 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v32 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v32 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v36 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v44 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v44 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v48 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v48 
            #endif
#else
            let v51 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v51 = v51 
            let v52 : System.Threading.CancellationToken = v51 
            let v53 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v54 : (System.Threading.CancellationToken []) = [|v52; v53; v0|]
            let v55 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v56 : System.Threading.CancellationTokenSource = v55 v54
            let v57 : System.Threading.CancellationToken = v56.Token
            return v57 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v342 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v342 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : unit = ()
    let _let'_v344 =
        async {
            (* run_target_args'
            let v351 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v353 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v353 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v357 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v357 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v361 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v361 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v365 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v365 
            #endif
#if FABLE_COMPILER_PYTHON
            let v369 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v369 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v373 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v373 
            #endif
#else
            let v376 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v376 = v376 
            let v377 : System.Threading.CancellationToken = v376 
            let v378 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v379 : (System.Threading.CancellationToken []) = [|v377; v378; v0|]
            let v380 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v381 : System.Threading.CancellationTokenSource = v380 v379
            let v382 : System.Threading.CancellationToken = v381.Token
            return v382 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v667 : Async<System.Threading.CancellationToken> = _let'_v344 
    let _run_target_args'_v5 = v667 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v669 : unit = ()
    let _let'_v669 =
        async {
            (* run_target_args'
            let v676 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v678 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v678 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v682 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v682 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v686 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v686 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v690 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v690 
            #endif
#if FABLE_COMPILER_PYTHON
            let v694 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v694 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v698 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v698 
            #endif
#else
            let v701 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v701 = v701 
            let v702 : System.Threading.CancellationToken = v701 
            let v703 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v704 : (System.Threading.CancellationToken []) = [|v702; v703; v0|]
            let v705 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v706 : System.Threading.CancellationTokenSource = v705 v704
            let v707 : System.Threading.CancellationToken = v706.Token
            return v707 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v992 : Async<System.Threading.CancellationToken> = _let'_v669 
    let _run_target_args'_v5 = v992 
    #endif
#else
    let v994 : unit = ()
    let _let'_v994 =
        async {
            (* run_target_args'
            let v1001 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1003 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1003 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1007 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1007 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1011 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1011 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1015 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1015 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1019 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1019 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1023 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1023 
            #endif
#else
            let v1026 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1026 = v1026 
            let v1027 : System.Threading.CancellationToken = v1026 
            let v1028 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1029 : (System.Threading.CancellationToken []) = [|v1027; v1028; v0|]
            let v1030 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1031 : System.Threading.CancellationTokenSource = v1030 v1029
            let v1032 : System.Threading.CancellationToken = v1031.Token
            return v1032 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1317 : Async<System.Threading.CancellationToken> = _let'_v994 
    let _run_target_args'_v5 = v1317 
    #endif
    let v1318 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v1318
and method163 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method164 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure67 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method163(v0)
    let v2 : bool = v1 = false
    if v2 then
        method164(v0)
and method167 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "ex"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v37 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v37 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v37 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : string = $"%A{v0}"
    let _run_target_args'_v37 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v37 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v0}"
    let _run_target_args'_v37 = v59 
    #endif
#else
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v37 = v63 
    #endif
    let v66 : string = _run_target_args'_v37 
    let v73 : string = $"{v66}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v2, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v2, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v2.l0
    v91
and method166 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method167(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure68 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method42()
        let v46 : string = method166(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method165 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v28 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v30 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v34 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v38 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v38 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v42 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v42 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v50 
                #endif
#else
                let v53 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v28 = v53 
                #endif
                let v54 : System.Threading.Tasks.Task = _run_target_args'_v28 
                (* run_target_args'
                let v64 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v66 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v66 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v70 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v70 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v74 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v74 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v77 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v78 : Async<unit> = v77 v54
                let _run_target_args'_v64 = v78 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v80 : Async<unit> = v79 v54
                let _run_target_args'_v64 = v80 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v81 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v82 : Async<unit> = v81 v54
                let _run_target_args'_v64 = v82 
                #endif
#else
                let v83 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v84 : Async<unit> = v83 v54
                let _run_target_args'_v64 = v84 
                #endif
                let v85 : Async<unit> = _run_target_args'_v64 
                do! v85 
                (* run_target_args'
                let v95 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v97 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v97 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v101 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v101 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v105 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v105 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v113 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v113 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v117 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v117 
                #endif
#else
                let v120 : int32 = v0.ExitCode
                let _run_target_args'_v95 = v120 
                #endif
                let v121 : int32 = _run_target_args'_v95 
                return v121 
                (* indent
                ()
            indent *)
            with ex ->
                let v230 : exn = ex
                (* run_target_args'
                let v235 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v237 : string = $"%A{v230}"
                let _run_target_args'_v235 = v237 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v241 : string = $"%A{v230}"
                let _run_target_args'_v235 = v241 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v245 : string = $"%A{v230}"
                let _run_target_args'_v235 = v245 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v249 : string = $"%A{v230}"
                let _run_target_args'_v235 = v249 
                #endif
#if FABLE_COMPILER_PYTHON
                let v253 : string = $"%A{v230}"
                let _run_target_args'_v235 = v253 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v257 : string = $"%A{v230}"
                let _run_target_args'_v235 = v257 
                #endif
#else
                let v260 : string = $"{v230.GetType ()}: {v230.Message}"
                let _run_target_args'_v235 = v260 
                #endif
                let v261 : string = _run_target_args'_v235 
                (* run_target_args'
                let v267 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v268 : (string -> unit) = v1.Push
                v268 v261
                #endif
                // run_target_args' is_unit
                let v270 : System.Threading.Tasks.TaskCanceledException = v230 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v273 : unit = ()
                let v274 : (unit -> unit) = closure68(v270)
                let v275 : unit = (fun () -> v274 (); v273) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3144 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v3144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3146 : unit = ()
    let _let'_v3146 =
        async {
            try
                (* run_target_args'
                let v3153 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3155 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3155 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3159 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3159 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3163 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3167 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3167 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3171 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3171 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3175 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3175 
                #endif
#else
                let v3178 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v3153 = v3178 
                #endif
                let v3179 : System.Threading.Tasks.Task = _run_target_args'_v3153 
                (* run_target_args'
                let v3189 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3191 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3191 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3195 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3195 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3199 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3199 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3202 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3203 : Async<unit> = v3202 v3179
                let _run_target_args'_v3189 = v3203 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3204 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3205 : Async<unit> = v3204 v3179
                let _run_target_args'_v3189 = v3205 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3206 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3207 : Async<unit> = v3206 v3179
                let _run_target_args'_v3189 = v3207 
                #endif
#else
                let v3208 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3209 : Async<unit> = v3208 v3179
                let _run_target_args'_v3189 = v3209 
                #endif
                let v3210 : Async<unit> = _run_target_args'_v3189 
                do! v3210 
                (* run_target_args'
                let v3220 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3222 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3222 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3226 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3226 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3230 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3230 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3234 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3234 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3238 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3238 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3242 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3242 
                #endif
#else
                let v3245 : int32 = v0.ExitCode
                let _run_target_args'_v3220 = v3245 
                #endif
                let v3246 : int32 = _run_target_args'_v3220 
                return v3246 
                (* indent
                ()
            indent *)
            with ex ->
                let v3355 : exn = ex
                (* run_target_args'
                let v3360 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3362 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3362 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3366 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3366 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3370 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3370 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3374 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3374 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3378 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3378 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3382 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3382 
                #endif
#else
                let v3385 : string = $"{v3355.GetType ()}: {v3355.Message}"
                let _run_target_args'_v3360 = v3385 
                #endif
                let v3386 : string = _run_target_args'_v3360 
                (* run_target_args'
                let v3392 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v3393 : (string -> unit) = v1.Push
                v3393 v3386
                #endif
                // run_target_args' is_unit
                let v3395 : System.Threading.Tasks.TaskCanceledException = v3355 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v3398 : unit = ()
                let v3399 : (unit -> unit) = closure68(v3395)
                let v3400 : unit = (fun () -> v3399 (); v3398) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6269 : Async<int32> = _let'_v3146 
    let _run_target_args'_v7 = v6269 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6271 : unit = ()
    let _let'_v6271 =
        async {
            try
                (* run_target_args'
                let v6278 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6280 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6280 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6284 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6284 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6288 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6288 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6292 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6292 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6296 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6296 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6300 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6300 
                #endif
#else
                let v6303 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v6278 = v6303 
                #endif
                let v6304 : System.Threading.Tasks.Task = _run_target_args'_v6278 
                (* run_target_args'
                let v6314 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6316 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6316 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6320 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6320 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6324 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6324 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6327 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6328 : Async<unit> = v6327 v6304
                let _run_target_args'_v6314 = v6328 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6329 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6330 : Async<unit> = v6329 v6304
                let _run_target_args'_v6314 = v6330 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6331 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6332 : Async<unit> = v6331 v6304
                let _run_target_args'_v6314 = v6332 
                #endif
#else
                let v6333 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6334 : Async<unit> = v6333 v6304
                let _run_target_args'_v6314 = v6334 
                #endif
                let v6335 : Async<unit> = _run_target_args'_v6314 
                do! v6335 
                (* run_target_args'
                let v6345 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6347 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6347 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6351 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6351 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6355 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6355 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6359 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6363 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6367 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6367 
                #endif
#else
                let v6370 : int32 = v0.ExitCode
                let _run_target_args'_v6345 = v6370 
                #endif
                let v6371 : int32 = _run_target_args'_v6345 
                return v6371 
                (* indent
                ()
            indent *)
            with ex ->
                let v6480 : exn = ex
                (* run_target_args'
                let v6485 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6487 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6487 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6491 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6491 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6495 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6495 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6499 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6499 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6503 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6503 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6507 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6507 
                #endif
#else
                let v6510 : string = $"{v6480.GetType ()}: {v6480.Message}"
                let _run_target_args'_v6485 = v6510 
                #endif
                let v6511 : string = _run_target_args'_v6485 
                (* run_target_args'
                let v6517 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v6518 : (string -> unit) = v1.Push
                v6518 v6511
                #endif
                // run_target_args' is_unit
                let v6520 : System.Threading.Tasks.TaskCanceledException = v6480 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v6523 : unit = ()
                let v6524 : (unit -> unit) = closure68(v6520)
                let v6525 : unit = (fun () -> v6524 (); v6523) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9394 : Async<int32> = _let'_v6271 
    let _run_target_args'_v7 = v9394 
    #endif
#else
    let v9396 : unit = ()
    let _let'_v9396 =
        async {
            try
                (* run_target_args'
                let v9403 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9405 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9409 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9409 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9413 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9413 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9417 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9417 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9421 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9421 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9425 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9425 
                #endif
#else
                let v9428 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v9403 = v9428 
                #endif
                let v9429 : System.Threading.Tasks.Task = _run_target_args'_v9403 
                (* run_target_args'
                let v9439 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9441 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9441 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9445 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9445 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9449 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9449 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9452 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9453 : Async<unit> = v9452 v9429
                let _run_target_args'_v9439 = v9453 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9454 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9455 : Async<unit> = v9454 v9429
                let _run_target_args'_v9439 = v9455 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9456 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9457 : Async<unit> = v9456 v9429
                let _run_target_args'_v9439 = v9457 
                #endif
#else
                let v9458 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9459 : Async<unit> = v9458 v9429
                let _run_target_args'_v9439 = v9459 
                #endif
                let v9460 : Async<unit> = _run_target_args'_v9439 
                do! v9460 
                (* run_target_args'
                let v9470 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9472 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9472 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9476 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9476 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9480 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9480 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9484 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9484 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9488 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9488 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9492 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9492 
                #endif
#else
                let v9495 : int32 = v0.ExitCode
                let _run_target_args'_v9470 = v9495 
                #endif
                let v9496 : int32 = _run_target_args'_v9470 
                return v9496 
                (* indent
                ()
            indent *)
            with ex ->
                let v9605 : exn = ex
                (* run_target_args'
                let v9610 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9612 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9612 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9616 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9616 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9620 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9620 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9624 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9624 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9628 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9628 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9632 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9632 
                #endif
#else
                let v9635 : string = $"{v9605.GetType ()}: {v9605.Message}"
                let _run_target_args'_v9610 = v9635 
                #endif
                let v9636 : string = _run_target_args'_v9610 
                (* run_target_args'
                let v9642 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v9643 : (string -> unit) = v1.Push
                v9643 v9636
                #endif
                // run_target_args' is_unit
                let v9645 : System.Threading.Tasks.TaskCanceledException = v9605 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v9648 : unit = ()
                let v9649 : (unit -> unit) = closure68(v9645)
                let v9650 : unit = (fun () -> v9649 (); v9648) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v12519 : Async<int32> = _let'_v9396 
    let _run_target_args'_v7 = v12519 
    #endif
    let v12520 : Async<int32> = _run_target_args'_v7 
    v12520
and method169 (v0 : int32, v1 : int32, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v12 : string = "{ "
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v10, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v22 : string = "exit_code"
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v10, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v10, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v10, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v10, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v61 : string = "output_length"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v10, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v32}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v10, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"{v1}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v89 : string = $"{v51}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v98 : string = "options"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v10, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v32}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v12}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v126 : string = "command"
    let v127 : string = $"{v126}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v10, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v136 : string = $"{v32}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v10, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v145 : string = $"{v2}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v10, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v154 : string = $"{v51}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v10, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v163 : string = "cancellation_token"
    let v164 : string = $"{v163}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v10, v164)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v173 : string = $"{v32}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v10, v173)
    let v178 : unit = (fun () -> v177 (); v176) ()
    (* run_target_args'
    let v185 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v185 = v189 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v185 = v193 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v185 = v197 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v199 : string = $"%A{v3}"
    let _run_target_args'_v185 = v199 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v3}"
    let _run_target_args'_v185 = v203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v185 = v207 
    #endif
#else
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v185 = v211 
    #endif
    let v214 : string = _run_target_args'_v185 
    let v221 : string = $"{v214}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v230 : string = $"{v51}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v10, v230)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v239 : string = "environment_variables"
    let v240 : string = $"{v239}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v249 : string = $"{v32}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"%A{v4}"
    let v262 : string = $"{v258}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v10, v262)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v271 : string = $"{v51}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = "on_line"
    let v281 : string = $"{v280}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v10, v281)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v290 : string = $"{v32}"
    let v293 : unit = ()
    let v294 : (unit -> unit) = closure7(v10, v290)
    let v295 : unit = (fun () -> v294 (); v293) ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = "format!(\"{:#?}\", $0)"
    let v304 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v303 
    let v305 : string = "fable_library_rust::String_::fromString($0)"
    let v306 : string = Fable.Core.RustInterop.emitRustExpr v304 v305 
    let _run_target_args'_v302 = v306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v307 : string = "format!(\"{:#?}\", $0)"
    let v308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v307 
    let v309 : string = "fable_library_rust::String_::fromString($0)"
    let v310 : string = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let _run_target_args'_v302 = v310 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v311 : string = "format!(\"{:#?}\", $0)"
    let v312 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v311 
    let v313 : string = "fable_library_rust::String_::fromString($0)"
    let v314 : string = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let _run_target_args'_v302 = v314 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v316 : string = $"%A{v5}"
    let _run_target_args'_v302 = v316 
    #endif
#if FABLE_COMPILER_PYTHON
    let v320 : string = $"%A{v5}"
    let _run_target_args'_v302 = v320 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v324 : string = $"%A{v5}"
    let _run_target_args'_v302 = v324 
    #endif
#else
    let v328 : string = $"%A{v5}"
    let _run_target_args'_v302 = v328 
    #endif
    let v331 : string = _run_target_args'_v302 
    let v338 : string = $"{v331}"
    let v341 : unit = ()
    let v342 : (unit -> unit) = closure7(v10, v338)
    let v343 : unit = (fun () -> v342 (); v341) ()
    let v347 : string = $"{v51}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v10, v347)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v356 : string = "stdin"
    let v357 : string = $"{v356}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v366 : string = $"{v32}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    (* run_target_args'
    let v378 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v379 : string = "format!(\"{:#?}\", $0)"
    let v380 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v379 
    let v381 : string = "fable_library_rust::String_::fromString($0)"
    let v382 : string = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let _run_target_args'_v378 = v382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v383 : string = "format!(\"{:#?}\", $0)"
    let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v383 
    let v385 : string = "fable_library_rust::String_::fromString($0)"
    let v386 : string = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let _run_target_args'_v378 = v386 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v387 : string = "format!(\"{:#?}\", $0)"
    let v388 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v387 
    let v389 : string = "fable_library_rust::String_::fromString($0)"
    let v390 : string = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let _run_target_args'_v378 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v392 : string = $"%A{v6}"
    let _run_target_args'_v378 = v392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : string = $"%A{v6}"
    let _run_target_args'_v378 = v396 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v400 : string = $"%A{v6}"
    let _run_target_args'_v378 = v400 
    #endif
#else
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v378 = v404 
    #endif
    let v407 : string = _run_target_args'_v378 
    let v414 : string = $"{v407}"
    let v417 : unit = ()
    let v418 : (unit -> unit) = closure7(v10, v414)
    let v419 : unit = (fun () -> v418 (); v417) ()
    let v423 : string = $"{v51}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v10, v423)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v432 : string = "trace"
    let v433 : string = $"{v432}"
    let v436 : unit = ()
    let v437 : (unit -> unit) = closure7(v10, v433)
    let v438 : unit = (fun () -> v437 (); v436) ()
    let v442 : string = $"{v32}"
    let v445 : unit = ()
    let v446 : (unit -> unit) = closure7(v10, v442)
    let v447 : unit = (fun () -> v446 (); v445) ()
    let v452 : string =
        if v7 then
            let v450 : string = "true"
            v450
        else
            let v451 : string = "false"
            v451
    let v454 : string = $"{v452}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v463 : string = $"{v51}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v472 : string = "working_directory"
    let v473 : string = $"{v472}"
    let v476 : unit = ()
    let v477 : (unit -> unit) = closure7(v10, v473)
    let v478 : unit = (fun () -> v477 (); v476) ()
    let v482 : string = $"{v32}"
    let v485 : unit = ()
    let v486 : (unit -> unit) = closure7(v10, v482)
    let v487 : unit = (fun () -> v486 (); v485) ()
    (* run_target_args'
    let v494 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v495 : string = "format!(\"{:#?}\", $0)"
    let v496 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v495 
    let v497 : string = "fable_library_rust::String_::fromString($0)"
    let v498 : string = Fable.Core.RustInterop.emitRustExpr v496 v497 
    let _run_target_args'_v494 = v498 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v499 : string = "format!(\"{:#?}\", $0)"
    let v500 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v499 
    let v501 : string = "fable_library_rust::String_::fromString($0)"
    let v502 : string = Fable.Core.RustInterop.emitRustExpr v500 v501 
    let _run_target_args'_v494 = v502 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v503 : string = "format!(\"{:#?}\", $0)"
    let v504 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v503 
    let v505 : string = "fable_library_rust::String_::fromString($0)"
    let v506 : string = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let _run_target_args'_v494 = v506 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v508 : string = $"%A{v8}"
    let _run_target_args'_v494 = v508 
    #endif
#if FABLE_COMPILER_PYTHON
    let v512 : string = $"%A{v8}"
    let _run_target_args'_v494 = v512 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v516 : string = $"%A{v8}"
    let _run_target_args'_v494 = v516 
    #endif
#else
    let v520 : string = $"%A{v8}"
    let _run_target_args'_v494 = v520 
    #endif
    let v523 : string = _run_target_args'_v494 
    let v530 : string = $"{v523}"
    let v533 : unit = ()
    let v534 : (unit -> unit) = closure7(v10, v530)
    let v535 : unit = (fun () -> v534 (); v533) ()
    let v539 : string = " }"
    let v540 : string = $"{v539}"
    let v543 : unit = ()
    let v544 : (unit -> unit) = closure7(v10, v540)
    let v545 : unit = (fun () -> v544 (); v543) ()
    let v549 : string = $"{v539}"
    let v552 : unit = ()
    let v553 : (unit -> unit) = closure7(v10, v549)
    let v554 : unit = (fun () -> v553 (); v552) ()
    let v557 : string = v10.l0
    v557
and method168 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method169(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure69 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : int32 = v8.Length
        let v55 : string = method168(v34, v35, v36, v37, v38, v39, v52, v53, v7, v54, v0, v1, v2, v3, v4, v5, v6)
        method19(v55)
and method152 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v36 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v39 : int32, v40 : string) = null |> unbox<struct (int32 * string)>
            return struct (v39, v40) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v47 : int32, v48 : string) = null |> unbox<struct (int32 * string)>
            return struct (v47, v48) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v55 : int32, v56 : string) = null |> unbox<struct (int32 * string)>
            return struct (v55, v56) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v63 : int32, v64 : string) = null |> unbox<struct (int32 * string)>
            return struct (v63, v64) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v71 : int32, v72 : string) = null |> unbox<struct (int32 * string)>
            return struct (v71, v72) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v79 : int32, v80 : string) = null |> unbox<struct (int32 * string)>
            return struct (v79, v80) 
            #endif
#else
            let v85 : US14 = method98(v0)
            let struct (v97 : string, v98 : US5) =
                match v85 with
                | US14_1(v88) -> (* Error *)
                    let v90 : string = $"resultm.get / Result value was Error: {v88}"
                    failwith<struct (string * US5)> v90
                | US14_0(v86, v87) -> (* Ok *)
                    struct (v86, v87)
            let v100 : (string -> US5) = method6()
            let v101 : US5 option = v6 |> Option.map v100 
            let v114 : US5 = US5_1
            let v115 : US5 = v101 |> Option.defaultValue v114 
            let v122 : string =
                match v115 with
                | US5_1 -> (* None *)
                    let v120 : string = ""
                    v120
                | US5_0(v119) -> (* Some *)
                    v119
            let v123 : unit = ()
            let v124 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v98, v97)
            let v125 : unit = (fun () -> v124 (); v123) ()
            let v172 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v176 : string =
                match v98 with
                | US5_1 -> (* None *)
                    let v174 : string = ""
                    v174
                | US5_0(v173) -> (* Some *)
                    v173
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v176,
              StandardOutputEncoding = v172,
              WorkingDirectory = v122,
              FileName = v97,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v177 : System.Diagnostics.ProcessStartInfo = start_info
            let v178 : (struct (string * string) []) = method155(v0, v1, v2, v3, v4, v5, v6)
            let v179 : int32 = v178.Length
            let v180 : Mut5 = {l0 = 0} : Mut5
            while method31(v179, v180) do
                let v182 : int32 = v180.l0
                let struct (v183 : string, v184 : string) = v178.[int v182]
                v177.EnvironmentVariables.[v183] <- v184 
                let v185 : int32 = v182 + 1
                v180.l0 <- v185
                ()
            let v186 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v177)
            use v186 = v186 
            let v187 : System.Diagnostics.Process = v186 
            let v188 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v189 : System.Collections.Concurrent.ConcurrentStack<string> = v188 ()
            let v190 : bool = false
            let v191 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v187, v189, v190)
            v187.OutputDataReceived.Add v191 
            let v192 : bool = true
            let v193 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v187, v189, v192)
            v187.ErrorDataReceived.Add v193 
            let v194 : (unit -> bool) = v187.Start
            let v195 : bool = v194 ()
            let v196 : bool = v195 = false
            if v196 then
                let v197 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v197
            let v198 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v198 v187
            let v199 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v199 v187
            let v201 : (System.Threading.CancellationToken -> US32) = method161()
            let v202 : US32 option = v1 |> Option.map v201 
            let v215 : US32 = US32_1
            let v216 : US32 = v202 |> Option.defaultValue v215 
            let v223 : System.Threading.CancellationToken =
                match v216 with
                | US32_1 -> (* None *)
                    let v221 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v221
                | US32_0(v220) -> (* Some *)
                    v220
            let v224 : Async<System.Threading.CancellationToken> = method162(v223)
            let! v224 = v224 
            let v225 : System.Threading.CancellationToken = v224 
            let v226 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v225.Register
            let v227 : (unit -> unit) = closure67(v187)
            let v228 : System.Threading.CancellationTokenRegistration = v226 v227
            use v228 = v228 
            let v229 : System.Threading.CancellationTokenRegistration = v228 
            let v230 : Async<int32> = method165(v187, v189, v225)
            let! v230 = v230 
            let v231 : int32 = v230 
            let v233 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v234 : string seq = v233 v189
            let v238 : (string seq -> string seq) = Seq.rev
            let v239 : string seq = v238 v234
            let v243 : string = method70()
            let v244 : (string -> (string seq -> string)) = String.concat
            let v245 : (string seq -> string) = v244 v243
            let v246 : string = v245 v239
            let v250 : unit = ()
            let v251 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v231, v246)
            let v252 : unit = (fun () -> v251 (); v250) ()
            return struct (v231, v246) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2268 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v2268 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2270 : unit = ()
    let _let'_v2270 =
        async {
            (* run_target_args'
            let v2281 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v2284 : int32, v2285 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2284, v2285) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v2292 : int32, v2293 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2292, v2293) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v2300 : int32, v2301 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2300, v2301) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v2308 : int32, v2309 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2308, v2309) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v2316 : int32, v2317 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2316, v2317) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v2324 : int32, v2325 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2324, v2325) 
            #endif
#else
            let v2330 : US14 = method98(v0)
            let struct (v2342 : string, v2343 : US5) =
                match v2330 with
                | US14_1(v2333) -> (* Error *)
                    let v2335 : string = $"resultm.get / Result value was Error: {v2333}"
                    failwith<struct (string * US5)> v2335
                | US14_0(v2331, v2332) -> (* Ok *)
                    struct (v2331, v2332)
            let v2345 : (string -> US5) = method6()
            let v2346 : US5 option = v6 |> Option.map v2345 
            let v2359 : US5 = US5_1
            let v2360 : US5 = v2346 |> Option.defaultValue v2359 
            let v2367 : string =
                match v2360 with
                | US5_1 -> (* None *)
                    let v2365 : string = ""
                    v2365
                | US5_0(v2364) -> (* Some *)
                    v2364
            let v2368 : unit = ()
            let v2369 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v2343, v2342)
            let v2370 : unit = (fun () -> v2369 (); v2368) ()
            let v2417 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v2421 : string =
                match v2343 with
                | US5_1 -> (* None *)
                    let v2419 : string = ""
                    v2419
                | US5_0(v2418) -> (* Some *)
                    v2418
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v2421,
              StandardOutputEncoding = v2417,
              WorkingDirectory = v2367,
              FileName = v2342,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v2422 : System.Diagnostics.ProcessStartInfo = start_info
            let v2423 : (struct (string * string) []) = method155(v0, v1, v2, v3, v4, v5, v6)
            let v2424 : int32 = v2423.Length
            let v2425 : Mut5 = {l0 = 0} : Mut5
            while method31(v2424, v2425) do
                let v2427 : int32 = v2425.l0
                let struct (v2428 : string, v2429 : string) = v2423.[int v2427]
                v2422.EnvironmentVariables.[v2428] <- v2429 
                let v2430 : int32 = v2427 + 1
                v2425.l0 <- v2430
                ()
            let v2431 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v2422)
            use v2431 = v2431 
            let v2432 : System.Diagnostics.Process = v2431 
            let v2433 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v2434 : System.Collections.Concurrent.ConcurrentStack<string> = v2433 ()
            let v2435 : bool = false
            let v2436 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v2432, v2434, v2435)
            v2432.OutputDataReceived.Add v2436 
            let v2437 : bool = true
            let v2438 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v2432, v2434, v2437)
            v2432.ErrorDataReceived.Add v2438 
            let v2439 : (unit -> bool) = v2432.Start
            let v2440 : bool = v2439 ()
            let v2441 : bool = v2440 = false
            if v2441 then
                let v2442 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v2442
            let v2443 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v2443 v2432
            let v2444 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v2444 v2432
            let v2446 : (System.Threading.CancellationToken -> US32) = method161()
            let v2447 : US32 option = v1 |> Option.map v2446 
            let v2460 : US32 = US32_1
            let v2461 : US32 = v2447 |> Option.defaultValue v2460 
            let v2468 : System.Threading.CancellationToken =
                match v2461 with
                | US32_1 -> (* None *)
                    let v2466 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v2466
                | US32_0(v2465) -> (* Some *)
                    v2465
            let v2469 : Async<System.Threading.CancellationToken> = method162(v2468)
            let! v2469 = v2469 
            let v2470 : System.Threading.CancellationToken = v2469 
            let v2471 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v2470.Register
            let v2472 : (unit -> unit) = closure67(v2432)
            let v2473 : System.Threading.CancellationTokenRegistration = v2471 v2472
            use v2473 = v2473 
            let v2474 : System.Threading.CancellationTokenRegistration = v2473 
            let v2475 : Async<int32> = method165(v2432, v2434, v2470)
            let! v2475 = v2475 
            let v2476 : int32 = v2475 
            let v2478 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v2479 : string seq = v2478 v2434
            let v2483 : (string seq -> string seq) = Seq.rev
            let v2484 : string seq = v2483 v2479
            let v2488 : string = method70()
            let v2489 : (string -> (string seq -> string)) = String.concat
            let v2490 : (string seq -> string) = v2489 v2488
            let v2491 : string = v2490 v2484
            let v2495 : unit = ()
            let v2496 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v2476, v2491)
            let v2497 : unit = (fun () -> v2496 (); v2495) ()
            return struct (v2476, v2491) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4513 : Async<struct (int32 * string)> = _let'_v2270 
    let _run_target_args'_v11 = v4513 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4515 : unit = ()
    let _let'_v4515 =
        async {
            (* run_target_args'
            let v4526 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v4529 : int32, v4530 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4529, v4530) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v4537 : int32, v4538 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4537, v4538) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v4545 : int32, v4546 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4545, v4546) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v4553 : int32, v4554 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4553, v4554) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v4561 : int32, v4562 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4561, v4562) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v4569 : int32, v4570 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4569, v4570) 
            #endif
#else
            let v4575 : US14 = method98(v0)
            let struct (v4587 : string, v4588 : US5) =
                match v4575 with
                | US14_1(v4578) -> (* Error *)
                    let v4580 : string = $"resultm.get / Result value was Error: {v4578}"
                    failwith<struct (string * US5)> v4580
                | US14_0(v4576, v4577) -> (* Ok *)
                    struct (v4576, v4577)
            let v4590 : (string -> US5) = method6()
            let v4591 : US5 option = v6 |> Option.map v4590 
            let v4604 : US5 = US5_1
            let v4605 : US5 = v4591 |> Option.defaultValue v4604 
            let v4612 : string =
                match v4605 with
                | US5_1 -> (* None *)
                    let v4610 : string = ""
                    v4610
                | US5_0(v4609) -> (* Some *)
                    v4609
            let v4613 : unit = ()
            let v4614 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v4588, v4587)
            let v4615 : unit = (fun () -> v4614 (); v4613) ()
            let v4662 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v4666 : string =
                match v4588 with
                | US5_1 -> (* None *)
                    let v4664 : string = ""
                    v4664
                | US5_0(v4663) -> (* Some *)
                    v4663
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v4666,
              StandardOutputEncoding = v4662,
              WorkingDirectory = v4612,
              FileName = v4587,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v4667 : System.Diagnostics.ProcessStartInfo = start_info
            let v4668 : (struct (string * string) []) = method155(v0, v1, v2, v3, v4, v5, v6)
            let v4669 : int32 = v4668.Length
            let v4670 : Mut5 = {l0 = 0} : Mut5
            while method31(v4669, v4670) do
                let v4672 : int32 = v4670.l0
                let struct (v4673 : string, v4674 : string) = v4668.[int v4672]
                v4667.EnvironmentVariables.[v4673] <- v4674 
                let v4675 : int32 = v4672 + 1
                v4670.l0 <- v4675
                ()
            let v4676 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v4667)
            use v4676 = v4676 
            let v4677 : System.Diagnostics.Process = v4676 
            let v4678 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v4679 : System.Collections.Concurrent.ConcurrentStack<string> = v4678 ()
            let v4680 : bool = false
            let v4681 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v4677, v4679, v4680)
            v4677.OutputDataReceived.Add v4681 
            let v4682 : bool = true
            let v4683 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v4677, v4679, v4682)
            v4677.ErrorDataReceived.Add v4683 
            let v4684 : (unit -> bool) = v4677.Start
            let v4685 : bool = v4684 ()
            let v4686 : bool = v4685 = false
            if v4686 then
                let v4687 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v4687
            let v4688 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v4688 v4677
            let v4689 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v4689 v4677
            let v4691 : (System.Threading.CancellationToken -> US32) = method161()
            let v4692 : US32 option = v1 |> Option.map v4691 
            let v4705 : US32 = US32_1
            let v4706 : US32 = v4692 |> Option.defaultValue v4705 
            let v4713 : System.Threading.CancellationToken =
                match v4706 with
                | US32_1 -> (* None *)
                    let v4711 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v4711
                | US32_0(v4710) -> (* Some *)
                    v4710
            let v4714 : Async<System.Threading.CancellationToken> = method162(v4713)
            let! v4714 = v4714 
            let v4715 : System.Threading.CancellationToken = v4714 
            let v4716 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v4715.Register
            let v4717 : (unit -> unit) = closure67(v4677)
            let v4718 : System.Threading.CancellationTokenRegistration = v4716 v4717
            use v4718 = v4718 
            let v4719 : System.Threading.CancellationTokenRegistration = v4718 
            let v4720 : Async<int32> = method165(v4677, v4679, v4715)
            let! v4720 = v4720 
            let v4721 : int32 = v4720 
            let v4723 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v4724 : string seq = v4723 v4679
            let v4728 : (string seq -> string seq) = Seq.rev
            let v4729 : string seq = v4728 v4724
            let v4733 : string = method70()
            let v4734 : (string -> (string seq -> string)) = String.concat
            let v4735 : (string seq -> string) = v4734 v4733
            let v4736 : string = v4735 v4729
            let v4740 : unit = ()
            let v4741 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v4721, v4736)
            let v4742 : unit = (fun () -> v4741 (); v4740) ()
            return struct (v4721, v4736) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6758 : Async<struct (int32 * string)> = _let'_v4515 
    let _run_target_args'_v11 = v6758 
    #endif
#else
    let v6760 : unit = ()
    let _let'_v6760 =
        async {
            (* run_target_args'
            let v6771 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v6774 : int32, v6775 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6774, v6775) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v6782 : int32, v6783 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6782, v6783) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v6790 : int32, v6791 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6790, v6791) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v6798 : int32, v6799 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6798, v6799) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v6806 : int32, v6807 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6806, v6807) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v6814 : int32, v6815 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6814, v6815) 
            #endif
#else
            let v6820 : US14 = method98(v0)
            let struct (v6832 : string, v6833 : US5) =
                match v6820 with
                | US14_1(v6823) -> (* Error *)
                    let v6825 : string = $"resultm.get / Result value was Error: {v6823}"
                    failwith<struct (string * US5)> v6825
                | US14_0(v6821, v6822) -> (* Ok *)
                    struct (v6821, v6822)
            let v6835 : (string -> US5) = method6()
            let v6836 : US5 option = v6 |> Option.map v6835 
            let v6849 : US5 = US5_1
            let v6850 : US5 = v6836 |> Option.defaultValue v6849 
            let v6857 : string =
                match v6850 with
                | US5_1 -> (* None *)
                    let v6855 : string = ""
                    v6855
                | US5_0(v6854) -> (* Some *)
                    v6854
            let v6858 : unit = ()
            let v6859 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v6833, v6832)
            let v6860 : unit = (fun () -> v6859 (); v6858) ()
            let v6907 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v6911 : string =
                match v6833 with
                | US5_1 -> (* None *)
                    let v6909 : string = ""
                    v6909
                | US5_0(v6908) -> (* Some *)
                    v6908
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v6911,
              StandardOutputEncoding = v6907,
              WorkingDirectory = v6857,
              FileName = v6832,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v6912 : System.Diagnostics.ProcessStartInfo = start_info
            let v6913 : (struct (string * string) []) = method155(v0, v1, v2, v3, v4, v5, v6)
            let v6914 : int32 = v6913.Length
            let v6915 : Mut5 = {l0 = 0} : Mut5
            while method31(v6914, v6915) do
                let v6917 : int32 = v6915.l0
                let struct (v6918 : string, v6919 : string) = v6913.[int v6917]
                v6912.EnvironmentVariables.[v6918] <- v6919 
                let v6920 : int32 = v6917 + 1
                v6915.l0 <- v6920
                ()
            let v6921 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v6912)
            use v6921 = v6921 
            let v6922 : System.Diagnostics.Process = v6921 
            let v6923 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v6924 : System.Collections.Concurrent.ConcurrentStack<string> = v6923 ()
            let v6925 : bool = false
            let v6926 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v6922, v6924, v6925)
            v6922.OutputDataReceived.Add v6926 
            let v6927 : bool = true
            let v6928 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v6922, v6924, v6927)
            v6922.ErrorDataReceived.Add v6928 
            let v6929 : (unit -> bool) = v6922.Start
            let v6930 : bool = v6929 ()
            let v6931 : bool = v6930 = false
            if v6931 then
                let v6932 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v6932
            let v6933 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v6933 v6922
            let v6934 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v6934 v6922
            let v6936 : (System.Threading.CancellationToken -> US32) = method161()
            let v6937 : US32 option = v1 |> Option.map v6936 
            let v6950 : US32 = US32_1
            let v6951 : US32 = v6937 |> Option.defaultValue v6950 
            let v6958 : System.Threading.CancellationToken =
                match v6951 with
                | US32_1 -> (* None *)
                    let v6956 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v6956
                | US32_0(v6955) -> (* Some *)
                    v6955
            let v6959 : Async<System.Threading.CancellationToken> = method162(v6958)
            let! v6959 = v6959 
            let v6960 : System.Threading.CancellationToken = v6959 
            let v6961 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v6960.Register
            let v6962 : (unit -> unit) = closure67(v6922)
            let v6963 : System.Threading.CancellationTokenRegistration = v6961 v6962
            use v6963 = v6963 
            let v6964 : System.Threading.CancellationTokenRegistration = v6963 
            let v6965 : Async<int32> = method165(v6922, v6924, v6960)
            let! v6965 = v6965 
            let v6966 : int32 = v6965 
            let v6968 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v6969 : string seq = v6968 v6924
            let v6973 : (string seq -> string seq) = Seq.rev
            let v6974 : string seq = v6973 v6969
            let v6978 : string = method70()
            let v6979 : (string -> (string seq -> string)) = String.concat
            let v6980 : (string seq -> string) = v6979 v6978
            let v6981 : string = v6980 v6974
            let v6985 : unit = ()
            let v6986 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v6966, v6981)
            let v6987 : unit = (fun () -> v6986 (); v6985) ()
            return struct (v6966, v6981) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9003 : Async<struct (int32 * string)> = _let'_v6760 
    let _run_target_args'_v11 = v9003 
    #endif
    let v9004 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v9004
and method151 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method152(v0, v1, v2, v3, v4, v5, v6)
and method96 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method97(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US14 = method98(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US14_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US14_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US22 = method111(v34)
    let v44 : (string []) =
        match v35 with
        | US22_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US22_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let v119 : string = "_vec_map"
    let v120 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure42(v0, v1, v2, v3, v4, v5, v6, v29, v120)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v175 : bool = true
    let mutable _capture_v175 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v176 : string = "std::process::Command::new(&*$0)"
    let v177 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v176 
    let v178 : string = "true; let mut v177 = v177"
    let v179 : bool = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : string = "true; std::process::Command::args(&mut v177, &*$0)"
    let v181 : bool = Fable.Core.RustInterop.emitRustExpr v120 v180 
    let v182 : string = "$0"
    let v183 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v177 v182 
    let v184 : string = "std::process::Stdio::piped()"
    let v185 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : string = "true; let mut v183 = v183"
    let v187 : bool = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "true; std::process::Command::stdout(&mut v183, std::process::Stdio::piped())"
    let v189 : bool = Fable.Core.RustInterop.emitRustExpr () v188 
    let v190 : string = "$0"
    let v191 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v183 v190 
    let v192 : string = "std::process::Stdio::piped()"
    let v193 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v192 
    let v194 : string = "true; let mut v191 = v191"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "true; std::process::Command::stderr(&mut v191, std::process::Stdio::piped())"
    let v197 : bool = Fable.Core.RustInterop.emitRustExpr () v196 
    let v198 : string = "$0"
    let v199 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v191 v198 
    let v200 : string = "std::process::Stdio::piped()"
    let v201 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v200 
    let v202 : string = "true; let mut v199 = v199"
    let v203 : bool = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : string = "true; std::process::Command::stdin(&mut v199, std::process::Stdio::piped())"
    let v205 : bool = Fable.Core.RustInterop.emitRustExpr () v204 
    let v206 : string = "$0"
    let v207 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v199 v206 
    let v209 : (string -> US5) = method6()
    let v210 : US5 option = v6 |> Option.map v209 
    let v223 : US5 = US5_1
    let v224 : US5 = v210 |> Option.defaultValue v223 
    let v238 : std_process_Command =
        match v224 with
        | US5_1 -> (* None *)
            let v235 : string = $"v207"
            let v236 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v235 
            v236
        | US5_0(v228) -> (* Some *)
            let v229 : string = "true; let mut v207 = v207"
            let v230 : bool = Fable.Core.RustInterop.emitRustExpr () v229 
            let v231 : string = "true; std::process::Command::current_dir(&mut v207, &*$0)"
            let v232 : bool = Fable.Core.RustInterop.emitRustExpr v228 v231 
            let v233 : string = $"v207"
            let v234 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v233 
            v234
    let v239 : uint64 = System.Convert.ToUInt64 v2.Length
    let v240 : bool = v239 = 0UL
    let v260 : std_process_Command =
        if v240 then
            v238
        else
            let v241 : string = "$0.to_vec()"
            let v242 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v241 
            let v243 : string = "true; let _vec_fold_ = $0.into_iter().fold(v238, |acc, x| { //"
            let v244 : bool = Fable.Core.RustInterop.emitRustExpr v242 v243 
            let v245 : string = "acc"
            let v246 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v245 
            let v247 : string = "x"
            let struct (v248 : string, v249 : string) = Fable.Core.RustInterop.emitRustExpr () v247 
            let v250 : string = "true; let mut v246 = v246"
            let v251 : bool = Fable.Core.RustInterop.emitRustExpr () v250 
            let v252 : string = "true; std::process::Command::env(&mut v246, &*$0, &*$1)"
            let v253 : bool = Fable.Core.RustInterop.emitRustExpr struct (v248, v249) v252 
            let v254 : string = "$0"
            let v255 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v246 v254 
            let v256 : string = "true; $0 })"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "_vec_fold_"
            let v259 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v258 
            v259
    let v261 : string = "true; let mut v260 = v260"
    let v262 : bool = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "std::process::Command::spawn(&mut v260)"
    let v264 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : (std_io_Error -> std_string_String) = method74()
    (* run_target_args'
    let v267 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v268 : string = "$0.map_err(|x| $1(x))"
    let v269 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v264, v265) v268 
    let _run_target_args'_v267 = v269 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v270 : string = "$0.map_err(|x| $1(x))"
    let v271 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v264, v265) v270 
    let _run_target_args'_v267 = v271 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v272 : string = "$0.map_err(|x| $1(x))"
    let v273 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v264, v265) v272 
    let _run_target_args'_v267 = v273 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v274 : Result<std_process_Child, std_string_String> = match v264 with Ok x -> Ok x | Error x -> Error (v265 x)
    let _run_target_args'_v267 = v274 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : Result<std_process_Child, std_string_String> = match v264 with Ok x -> Ok x | Error x -> Error (v265 x)
    let _run_target_args'_v267 = v275 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v276 : Result<std_process_Child, std_string_String> = match v264 with Ok x -> Ok x | Error x -> Error (v265 x)
    let _run_target_args'_v267 = v276 
    #endif
#else
    let v277 : Result<std_process_Child, std_string_String> = match v264 with Ok x -> Ok x | Error x -> Error (v265 x)
    let _run_target_args'_v267 = v277 
    #endif
    let v278 : Result<std_process_Child, std_string_String> = _run_target_args'_v267 
    let v281 : (std_process_Child option -> std_process_Child option) = method123()
    let v282 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v283 : bool = Fable.Core.RustInterop.emitRustExpr v278 v282 
    let v284 : string = "x"
    let v285 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v284 
    let v287 : std_process_Child option = Some v285 
    let v290 : std_process_Child option = v281 v287
    let v291 : string = "std::sync::Mutex::new(v290)"
    let v292 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v291 
    let v293 : string = "std::sync::Arc::new(v292)"
    let v294 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v293 
    let v295 : string = "true; $0 })"
    let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
    let v297 : string = "_result_map_"
    let v298 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v297 
    let v299 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method124()
    let v300 : (std_string_String -> US24) = method125()
    let v301 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v302 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v299, v300, v298) v301 
    let struct (v1596 : int32, v1597 : US7, v1598 : US25) =
        match v302 with
        | US24_1(v1541) -> (* Error *)
            let v1542 : unit = ()
            let v1543 : (unit -> unit) = closure46(v1541)
            let v1544 : unit = (fun () -> v1543 (); v1542) ()
            let v1591 : US7 = US7_0(v1541)
            let v1592 : US25 = US25_1
            struct (-1, v1591, v1592)
        | US24_0(v303) -> (* Ok *)
            let v304 : string = "true; let _capture = (|| { //"
            let v305 : bool = Fable.Core.RustInterop.emitRustExpr () v304 
            let v306 : string = "$0"
            let v307 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v303 v306 
            let v308 : string = "v307.lock()"
            let v309 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v308 
            (* run_target_args'
            let v311 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v312 : string = "$0.unwrap()"
            let v313 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v309 v312 
            let _run_target_args'_v311 = v313 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v314 : string = "$0.unwrap()"
            let v315 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v309 v314 
            let _run_target_args'_v311 = v315 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v316 : string = "$0.unwrap()"
            let v317 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v309 v316 
            let _run_target_args'_v311 = v317 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v318 : std_sync_MutexGuard<std_process_Child option> = match v309 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v311 = v318 
            #endif
#if FABLE_COMPILER_PYTHON
            let v319 : std_sync_MutexGuard<std_process_Child option> = match v309 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v311 = v319 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v320 : std_sync_MutexGuard<std_process_Child option> = match v309 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v311 = v320 
            #endif
#else
            let v321 : std_sync_MutexGuard<std_process_Child option> = match v309 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v311 = v321 
            #endif
            let v322 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v311 
            let v325 : std_sync_MutexGuard<std_process_Child option> = method128(v322)
            let v326 : string = "true; let mut v325 = v325"
            let v327 : bool = Fable.Core.RustInterop.emitRustExpr () v326 
            let v328 : string = "&mut $0"
            let v329 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v325 v328 
            let v330 : string = "$0.as_mut()"
            let v331 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v329 v330 
            let v332 : string = "$0.unwrap()"
            let v333 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v331 v332 
            let v334 : string = "&mut $0.stdout"
            let v335 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "Option::take($0)"
            let v337 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "$0.unwrap()"
            let v339 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v337 v338 
            let v340 : string = "true; $0 })()"
            let v341 : bool = Fable.Core.RustInterop.emitRustExpr v339 v340 
            let v342 : string = "_capture"
            let v343 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v342 
            let v344 : string = "true; let _capture = (|| { //"
            let v345 : bool = Fable.Core.RustInterop.emitRustExpr () v344 
            let v346 : string = "$0"
            let v347 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v303 v346 
            let v348 : string = "v347.lock()"
            let v349 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v348 
            (* run_target_args'
            let v351 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v352 : string = "$0.unwrap()"
            let v353 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v349 v352 
            let _run_target_args'_v351 = v353 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v354 : string = "$0.unwrap()"
            let v355 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v349 v354 
            let _run_target_args'_v351 = v355 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v356 : string = "$0.unwrap()"
            let v357 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v349 v356 
            let _run_target_args'_v351 = v357 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v358 : std_sync_MutexGuard<std_process_Child option> = match v349 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v351 = v358 
            #endif
#if FABLE_COMPILER_PYTHON
            let v359 : std_sync_MutexGuard<std_process_Child option> = match v349 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v351 = v359 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v360 : std_sync_MutexGuard<std_process_Child option> = match v349 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v351 = v360 
            #endif
#else
            let v361 : std_sync_MutexGuard<std_process_Child option> = match v349 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v351 = v361 
            #endif
            let v362 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v351 
            let v365 : std_sync_MutexGuard<std_process_Child option> = method128(v362)
            let v366 : string = "true; let mut v365 = v365"
            let v367 : bool = Fable.Core.RustInterop.emitRustExpr () v366 
            let v368 : string = "&mut $0"
            let v369 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v365 v368 
            let v370 : string = "$0.as_mut()"
            let v371 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v369 v370 
            let v372 : string = "$0.unwrap()"
            let v373 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v371 v372 
            let v374 : string = "&mut $0.stderr"
            let v375 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v373 v374 
            let v376 : string = "Option::take($0)"
            let v377 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v375 v376 
            let v378 : string = "$0.unwrap()"
            let v379 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v377 v378 
            let v380 : string = "true; $0 })()"
            let v381 : bool = Fable.Core.RustInterop.emitRustExpr v379 v380 
            let v382 : string = "_capture"
            let v383 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v382 
            let v384 : string = "true; let _capture = (|| { //"
            let v385 : bool = Fable.Core.RustInterop.emitRustExpr () v384 
            let v386 : string = "$0"
            let v387 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v303 v386 
            let v388 : string = "v387.lock()"
            let v389 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v388 
            (* run_target_args'
            let v391 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v392 : string = "$0.unwrap()"
            let v393 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v389 v392 
            let _run_target_args'_v391 = v393 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v394 : string = "$0.unwrap()"
            let v395 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v389 v394 
            let _run_target_args'_v391 = v395 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v396 : string = "$0.unwrap()"
            let v397 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v389 v396 
            let _run_target_args'_v391 = v397 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v398 : std_sync_MutexGuard<std_process_Child option> = match v389 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v391 = v398 
            #endif
#if FABLE_COMPILER_PYTHON
            let v399 : std_sync_MutexGuard<std_process_Child option> = match v389 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v391 = v399 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v400 : std_sync_MutexGuard<std_process_Child option> = match v389 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v391 = v400 
            #endif
#else
            let v401 : std_sync_MutexGuard<std_process_Child option> = match v389 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v391 = v401 
            #endif
            let v402 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v391 
            let v405 : std_sync_MutexGuard<std_process_Child option> = method128(v402)
            let v406 : string = "true; let mut v405 = v405"
            let v407 : bool = Fable.Core.RustInterop.emitRustExpr () v406 
            let v408 : string = "&mut $0"
            let v409 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v405 v408 
            let v410 : string = "$0.as_mut()"
            let v411 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v409 v410 
            let v412 : string = "$0.unwrap()"
            let v413 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v411 v412 
            let v414 : string = "&mut $0.stdin"
            let v415 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v413 v414 
            let v416 : string = "Option::take($0)"
            let v417 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v415 v416 
            let v418 : string = "$0.unwrap()"
            let v419 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v417 v418 
            let v421 : std_process_ChildStdin option = Some v419 
            let v424 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method129()
            let v425 : std_process_ChildStdin option = v424 v421
            let v426 : string = "std::sync::Mutex::new(v425)"
            let v427 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v426 
            let v428 : string = "std::sync::Arc::new(v427)"
            let v429 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v428 
            let v430 : string = "true; $0 })()"
            let v431 : bool = Fable.Core.RustInterop.emitRustExpr v429 v430 
            let v432 : string = "_capture"
            let v433 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v432 
            let v434 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v435 : std_sync_mpsc_Sender<std_string_String>, v436 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v434 
            let v437 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method130()
            let v438 : std_sync_mpsc_Sender<std_string_String> = v437 v435
            let v439 : string = "std::sync::Mutex::new(v438)"
            let v440 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v439 
            let v441 : string = "std::sync::Arc::new(v440)"
            let v442 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v441 
            let v443 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method131()
            let v444 : std_sync_mpsc_Sender<std_string_String> = v443 v435
            let v445 : string = "std::sync::Mutex::new(v444)"
            let v446 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v445 
            let v447 : string = "std::sync::Arc::new(v446)"
            let v448 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v447 
            let v449 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method132()
            let v450 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v449 v436
            let v451 : string = "std::sync::Mutex::new(v450)"
            let v452 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v451 
            let v453 : string = "std::sync::Arc::new(v452)"
            let v454 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v453 
            let v455 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v456 : bool = Fable.Core.RustInterop.emitRustExpr () v455 
            let v457 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v458 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v343 v457 
            let v459 : string = "std::io::BufReader::new($0)"
            let v460 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v458 v459 
            let v461 : string = "std::io::BufRead::lines(v460)"
            let v462 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v461 
            let v463 : string = "true; let mut v462 = v462; let _iter_try_for_each = v462.try_for_each(|x| { //"
            let v464 : bool = Fable.Core.RustInterop.emitRustExpr () v463 
            let v465 : string = "x"
            let v466 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v465 
            let v467 : string = "$0.clone()"
            let v468 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v442 v467 
            let v469 : (std_io_Error -> std_string_String) = method74()
            (* run_target_args'
            let v471 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v472 : string = "$0.map_err(|x| $1(x))"
            let v473 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v466, v469) v472 
            let _run_target_args'_v471 = v473 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v474 : string = "$0.map_err(|x| $1(x))"
            let v475 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v466, v469) v474 
            let _run_target_args'_v471 = v475 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v476 : string = "$0.map_err(|x| $1(x))"
            let v477 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v466, v469) v476 
            let _run_target_args'_v471 = v477 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v478 : Result<std_string_String, std_string_String> = match v466 with Ok x -> Ok x | Error x -> Error (v469 x)
            let _run_target_args'_v471 = v478 
            #endif
#if FABLE_COMPILER_PYTHON
            let v479 : Result<std_string_String, std_string_String> = match v466 with Ok x -> Ok x | Error x -> Error (v469 x)
            let _run_target_args'_v471 = v479 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v480 : Result<std_string_String, std_string_String> = match v466 with Ok x -> Ok x | Error x -> Error (v469 x)
            let _run_target_args'_v471 = v480 
            #endif
#else
            let v481 : Result<std_string_String, std_string_String> = match v466 with Ok x -> Ok x | Error x -> Error (v469 x)
            let _run_target_args'_v471 = v481 
            #endif
            let v482 : Result<std_string_String, std_string_String> = _run_target_args'_v471 
            let v485 : (std_string_String -> US26) = method133()
            let v486 : (std_string_String -> US26) = method134()
            let v487 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v488 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v485, v486, v482) v487 
            let v725 : std_string_String =
                match v488 with
                | US26_1(v607) -> (* Error *)
                    let v608 : unit = ()
                    let v609 : (unit -> unit) = closure52(v5, v607)
                    let v610 : unit = (fun () -> v609 (); v608) ()
                    let v657 : string = $"\u001b[4;7m{v607}\u001b[0m"
                    (* run_target_args'
                    let v662 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v663 : string = "&*$0"
                    let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v657 v663 
                    let _run_target_args'_v662 = v664 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v665 : string = "&*$0"
                    let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v657 v665 
                    let _run_target_args'_v662 = v666 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v667 : string = "&*$0"
                    let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v657 v667 
                    let _run_target_args'_v662 = v668 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v670 : Ref<Str> = v657 |> unbox<Ref<Str>>
                    let _run_target_args'_v662 = v670 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v674 : Ref<Str> = v657 |> unbox<Ref<Str>>
                    let _run_target_args'_v662 = v674 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v678 : Ref<Str> = v657 |> unbox<Ref<Str>>
                    let _run_target_args'_v662 = v678 
                    #endif
#else
                    let v682 : Ref<Str> = v657 |> unbox<Ref<Str>>
                    let _run_target_args'_v662 = v682 
                    #endif
                    let v685 : Ref<Str> = _run_target_args'_v662 
                    (* run_target_args'
                    let v695 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v696 : string = "String::from($0)"
                    let v697 : std_string_String = Fable.Core.RustInterop.emitRustExpr v685 v696 
                    let _run_target_args'_v695 = v697 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v698 : string = "String::from($0)"
                    let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v685 v698 
                    let _run_target_args'_v695 = v699 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v700 : string = "String::from($0)"
                    let v701 : std_string_String = Fable.Core.RustInterop.emitRustExpr v685 v700 
                    let _run_target_args'_v695 = v701 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v703 : std_string_String = v685 |> unbox<std_string_String>
                    let _run_target_args'_v695 = v703 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v707 : std_string_String = v685 |> unbox<std_string_String>
                    let _run_target_args'_v695 = v707 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v711 : std_string_String = v685 |> unbox<std_string_String>
                    let _run_target_args'_v695 = v711 
                    #endif
#else
                    let v715 : std_string_String = v685 |> unbox<std_string_String>
                    let _run_target_args'_v695 = v715 
                    #endif
                    let v718 : std_string_String = _run_target_args'_v695 
                    v718
                | US26_0(v489) -> (* Ok *)
                    let v490 : string = "fable_library_rust::String_::fromString($0)"
                    let v491 : string = Fable.Core.RustInterop.emitRustExpr v489 v490 
                    let v492 : string = "encoding_rs::UTF_8"
                    let v493 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v492 
                    let v494 : string = "$0.encode(&*$1).0"
                    let v495 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v493, v491) v494 
                    let v496 : string = "$0.as_ref()"
                    let v497 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v495 v496 
                    let v498 : string = "std::str::from_utf8($0)"
                    let v499 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v497 v498 
                    (* run_target_args'
                    let v501 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v502 : string = "$0.unwrap()"
                    let v503 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v499 v502 
                    let _run_target_args'_v501 = v503 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v504 : string = "$0.unwrap()"
                    let v505 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v499 v504 
                    let _run_target_args'_v501 = v505 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v506 : string = "$0.unwrap()"
                    let v507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v499 v506 
                    let _run_target_args'_v501 = v507 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v508 : Ref<Str> = match v499 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v501 = v508 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v509 : Ref<Str> = match v499 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v501 = v509 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v510 : Ref<Str> = match v499 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v501 = v510 
                    #endif
#else
                    let v511 : Ref<Str> = match v499 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v501 = v511 
                    #endif
                    let v512 : Ref<Str> = _run_target_args'_v501 
                    (* run_target_args'
                    let v519 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v520 : string = "String::from($0)"
                    let v521 : std_string_String = Fable.Core.RustInterop.emitRustExpr v512 v520 
                    let _run_target_args'_v519 = v521 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v522 : string = "String::from($0)"
                    let v523 : std_string_String = Fable.Core.RustInterop.emitRustExpr v512 v522 
                    let _run_target_args'_v519 = v523 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v524 : string = "String::from($0)"
                    let v525 : std_string_String = Fable.Core.RustInterop.emitRustExpr v512 v524 
                    let _run_target_args'_v519 = v525 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v527 : std_string_String = v512 |> unbox<std_string_String>
                    let _run_target_args'_v519 = v527 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v531 : std_string_String = v512 |> unbox<std_string_String>
                    let _run_target_args'_v519 = v531 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v535 : std_string_String = v512 |> unbox<std_string_String>
                    let _run_target_args'_v519 = v535 
                    #endif
#else
                    let v539 : std_string_String = v512 |> unbox<std_string_String>
                    let _run_target_args'_v519 = v539 
                    #endif
                    let v542 : std_string_String = _run_target_args'_v519 
                    let v548 : string = "fable_library_rust::String_::fromString($0)"
                    let v549 : string = Fable.Core.RustInterop.emitRustExpr v542 v548 
                    let v550 : string = $"> {v549}"
                    if v5 then
                        let v551 : unit = ()
                        let v552 : (unit -> unit) = closure53(v550)
                        let v553 : unit = (fun () -> v552 (); v551) ()
                        ()
                    else
                        let v603 : unit = ()
                        let v604 : (unit -> unit) = closure10(v550)
                        let v605 : unit = (fun () -> v604 (); v603) ()
                        ()
                    v542
            let v726 : string = "$0"
            let v727 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v468 v726 
            let v728 : string = "v727.lock()"
            let v729 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v728 
            (* run_target_args'
            let v731 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v732 : string = "$0.unwrap()"
            let v733 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v729 v732 
            let _run_target_args'_v731 = v733 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v734 : string = "$0.unwrap()"
            let v735 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v729 v734 
            let _run_target_args'_v731 = v735 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v736 : string = "$0.unwrap()"
            let v737 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v729 v736 
            let _run_target_args'_v731 = v737 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v738 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v731 = v738 
            #endif
#if FABLE_COMPILER_PYTHON
            let v739 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v731 = v739 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v740 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v731 = v740 
            #endif
#else
            let v741 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v731 = v741 
            #endif
            let v742 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v731 
            let v745 : string = "&$0"
            let v746 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v742 v745 
            let v747 : string = "$0.send($1)"
            let v748 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v746, v725) v747 
            let v749 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method139()
            (* run_target_args'
            let v751 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v752 : string = "$0.map_err(|x| $1(x))"
            let v753 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v748, v749) v752 
            let _run_target_args'_v751 = v753 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v754 : string = "$0.map_err(|x| $1(x))"
            let v755 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v748, v749) v754 
            let _run_target_args'_v751 = v755 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v756 : string = "$0.map_err(|x| $1(x))"
            let v757 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v748, v749) v756 
            let _run_target_args'_v751 = v757 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v758 : Result<unit, std_string_String> = match v748 with Ok x -> Ok x | Error x -> Error (v749 x)
            let _run_target_args'_v751 = v758 
            #endif
#if FABLE_COMPILER_PYTHON
            let v759 : Result<unit, std_string_String> = match v748 with Ok x -> Ok x | Error x -> Error (v749 x)
            let _run_target_args'_v751 = v759 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v760 : Result<unit, std_string_String> = match v748 with Ok x -> Ok x | Error x -> Error (v749 x)
            let _run_target_args'_v751 = v760 
            #endif
#else
            let v761 : Result<unit, std_string_String> = match v748 with Ok x -> Ok x | Error x -> Error (v749 x)
            let _run_target_args'_v751 = v761 
            #endif
            let v762 : Result<unit, std_string_String> = _run_target_args'_v751 
            let v765 : string = "$0"
            let v766 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v762 v765 
            let v767 : string = "true; $0 }); //"
            let v768 : bool = Fable.Core.RustInterop.emitRustExpr v766 v767 
            let v769 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v770 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v769 
            let v771 : Result<unit, string> = method140(v770)
            let v772 : string = ""
            let v773 : string = "}"
            let v774 : string = v772 + v773 
            let x = v771 //
            let v775 : _ = x
            let v776 : unit = ()
            (* run_target_args'
            let v777 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v778 : string = $"true; let _fix_closure_v776 = $0"
            let v779 : bool = Fable.Core.RustInterop.emitRustExpr v775 v778 
            let _run_target_args'_v777 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v780 : string = $"true; let _fix_closure_v776 = $0"
            let v781 : bool = Fable.Core.RustInterop.emitRustExpr v775 v780 
            let _run_target_args'_v777 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v782 : string = $"true; let _fix_closure_v776 = $0"
            let v783 : bool = Fable.Core.RustInterop.emitRustExpr v775 v782 
            let _run_target_args'_v777 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v777 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v777 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v777 = false 
            #endif
#else
            let _run_target_args'_v777 = false 
            #endif
            let v784 : bool = _run_target_args'_v777 
            let v786 : string = $"true; _fix_closure_v776 " + v774 + "); " + v772 + " // rust.fix_closure'"
            let v787 : bool = Fable.Core.RustInterop.emitRustExpr () v786 
            let v788 : string = "__spawn"
            let v789 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v788 
            let v790 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v791 : bool = Fable.Core.RustInterop.emitRustExpr () v790 
            let v792 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v793 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v383 v792 
            let v794 : string = "std::io::BufReader::new($0)"
            let v795 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v793 v794 
            let v796 : string = "std::io::BufRead::lines(v795)"
            let v797 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v796 
            let v798 : string = "true; let mut v797 = v797; let _iter_try_for_each = v797.try_for_each(|x| { //"
            let v799 : bool = Fable.Core.RustInterop.emitRustExpr () v798 
            let v800 : string = "x"
            let v801 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v800 
            let v802 : string = "$0.clone()"
            let v803 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v448 v802 
            let v804 : (std_io_Error -> std_string_String) = method74()
            (* run_target_args'
            let v806 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v807 : string = "$0.map_err(|x| $1(x))"
            let v808 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v801, v804) v807 
            let _run_target_args'_v806 = v808 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v809 : string = "$0.map_err(|x| $1(x))"
            let v810 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v801, v804) v809 
            let _run_target_args'_v806 = v810 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v811 : string = "$0.map_err(|x| $1(x))"
            let v812 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v801, v804) v811 
            let _run_target_args'_v806 = v812 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v813 : Result<std_string_String, std_string_String> = match v801 with Ok x -> Ok x | Error x -> Error (v804 x)
            let _run_target_args'_v806 = v813 
            #endif
#if FABLE_COMPILER_PYTHON
            let v814 : Result<std_string_String, std_string_String> = match v801 with Ok x -> Ok x | Error x -> Error (v804 x)
            let _run_target_args'_v806 = v814 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v815 : Result<std_string_String, std_string_String> = match v801 with Ok x -> Ok x | Error x -> Error (v804 x)
            let _run_target_args'_v806 = v815 
            #endif
#else
            let v816 : Result<std_string_String, std_string_String> = match v801 with Ok x -> Ok x | Error x -> Error (v804 x)
            let _run_target_args'_v806 = v816 
            #endif
            let v817 : Result<std_string_String, std_string_String> = _run_target_args'_v806 
            let v820 : (std_string_String -> US26) = method133()
            let v821 : (std_string_String -> US26) = method134()
            let v822 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v823 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v820, v821, v817) v822 
            let v1126 : std_string_String =
                match v823 with
                | US26_1(v1008) -> (* Error *)
                    let v1009 : unit = ()
                    let v1010 : (unit -> unit) = closure52(v5, v1008)
                    let v1011 : unit = (fun () -> v1010 (); v1009) ()
                    let v1058 : string = $"\u001b[4;7m{v1008}\u001b[0m"
                    (* run_target_args'
                    let v1063 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1064 : string = "&*$0"
                    let v1065 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1058 v1064 
                    let _run_target_args'_v1063 = v1065 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1066 : string = "&*$0"
                    let v1067 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1058 v1066 
                    let _run_target_args'_v1063 = v1067 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1068 : string = "&*$0"
                    let v1069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1058 v1068 
                    let _run_target_args'_v1063 = v1069 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1071 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                    let _run_target_args'_v1063 = v1071 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1075 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                    let _run_target_args'_v1063 = v1075 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1079 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                    let _run_target_args'_v1063 = v1079 
                    #endif
#else
                    let v1083 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                    let _run_target_args'_v1063 = v1083 
                    #endif
                    let v1086 : Ref<Str> = _run_target_args'_v1063 
                    (* run_target_args'
                    let v1096 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1097 : string = "String::from($0)"
                    let v1098 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1086 v1097 
                    let _run_target_args'_v1096 = v1098 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1099 : string = "String::from($0)"
                    let v1100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1086 v1099 
                    let _run_target_args'_v1096 = v1100 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1101 : string = "String::from($0)"
                    let v1102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1086 v1101 
                    let _run_target_args'_v1096 = v1102 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1104 : std_string_String = v1086 |> unbox<std_string_String>
                    let _run_target_args'_v1096 = v1104 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1108 : std_string_String = v1086 |> unbox<std_string_String>
                    let _run_target_args'_v1096 = v1108 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1112 : std_string_String = v1086 |> unbox<std_string_String>
                    let _run_target_args'_v1096 = v1112 
                    #endif
#else
                    let v1116 : std_string_String = v1086 |> unbox<std_string_String>
                    let _run_target_args'_v1096 = v1116 
                    #endif
                    let v1119 : std_string_String = _run_target_args'_v1096 
                    v1119
                | US26_0(v824) -> (* Ok *)
                    let v825 : string = "fable_library_rust::String_::fromString($0)"
                    let v826 : string = Fable.Core.RustInterop.emitRustExpr v824 v825 
                    let v827 : string = "encoding_rs::UTF_8"
                    let v828 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v827 
                    let v829 : string = "$0.encode(&*$1).0"
                    let v830 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v828, v826) v829 
                    let v831 : string = "$0.as_ref()"
                    let v832 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v830 v831 
                    let v833 : string = "std::str::from_utf8($0)"
                    let v834 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v832 v833 
                    (* run_target_args'
                    let v836 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v837 : string = "$0.unwrap()"
                    let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v834 v837 
                    let _run_target_args'_v836 = v838 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v839 : string = "$0.unwrap()"
                    let v840 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v834 v839 
                    let _run_target_args'_v836 = v840 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v841 : string = "$0.unwrap()"
                    let v842 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v834 v841 
                    let _run_target_args'_v836 = v842 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v843 : Ref<Str> = match v834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v836 = v843 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v844 : Ref<Str> = match v834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v836 = v844 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v845 : Ref<Str> = match v834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v836 = v845 
                    #endif
#else
                    let v846 : Ref<Str> = match v834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v836 = v846 
                    #endif
                    let v847 : Ref<Str> = _run_target_args'_v836 
                    (* run_target_args'
                    let v854 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v855 : string = "String::from($0)"
                    let v856 : std_string_String = Fable.Core.RustInterop.emitRustExpr v847 v855 
                    let _run_target_args'_v854 = v856 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v857 : string = "String::from($0)"
                    let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr v847 v857 
                    let _run_target_args'_v854 = v858 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v859 : string = "String::from($0)"
                    let v860 : std_string_String = Fable.Core.RustInterop.emitRustExpr v847 v859 
                    let _run_target_args'_v854 = v860 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v862 : std_string_String = v847 |> unbox<std_string_String>
                    let _run_target_args'_v854 = v862 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v866 : std_string_String = v847 |> unbox<std_string_String>
                    let _run_target_args'_v854 = v866 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v870 : std_string_String = v847 |> unbox<std_string_String>
                    let _run_target_args'_v854 = v870 
                    #endif
#else
                    let v874 : std_string_String = v847 |> unbox<std_string_String>
                    let _run_target_args'_v854 = v874 
                    #endif
                    let v877 : std_string_String = _run_target_args'_v854 
                    let v883 : string = "fable_library_rust::String_::fromString($0)"
                    let v884 : string = Fable.Core.RustInterop.emitRustExpr v877 v883 
                    let v885 : string = $"! {v884}"
                    if v5 then
                        let v886 : unit = ()
                        let v887 : (unit -> unit) = closure53(v885)
                        let v888 : unit = (fun () -> v887 (); v886) ()
                        ()
                    else
                        let v937 : unit = ()
                        let v938 : (unit -> unit) = closure10(v885)
                        let v939 : unit = (fun () -> v938 (); v937) ()
                        ()
                    let v941 : string = $"\u001b[4;7m{v877}\u001b[0m"
                    (* run_target_args'
                    let v946 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v947 : string = "&*$0"
                    let v948 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v941 v947 
                    let _run_target_args'_v946 = v948 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v949 : string = "&*$0"
                    let v950 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v941 v949 
                    let _run_target_args'_v946 = v950 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v951 : string = "&*$0"
                    let v952 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v941 v951 
                    let _run_target_args'_v946 = v952 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v954 : Ref<Str> = v941 |> unbox<Ref<Str>>
                    let _run_target_args'_v946 = v954 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v958 : Ref<Str> = v941 |> unbox<Ref<Str>>
                    let _run_target_args'_v946 = v958 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v962 : Ref<Str> = v941 |> unbox<Ref<Str>>
                    let _run_target_args'_v946 = v962 
                    #endif
#else
                    let v966 : Ref<Str> = v941 |> unbox<Ref<Str>>
                    let _run_target_args'_v946 = v966 
                    #endif
                    let v969 : Ref<Str> = _run_target_args'_v946 
                    (* run_target_args'
                    let v979 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v980 : string = "String::from($0)"
                    let v981 : std_string_String = Fable.Core.RustInterop.emitRustExpr v969 v980 
                    let _run_target_args'_v979 = v981 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v982 : string = "String::from($0)"
                    let v983 : std_string_String = Fable.Core.RustInterop.emitRustExpr v969 v982 
                    let _run_target_args'_v979 = v983 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v984 : string = "String::from($0)"
                    let v985 : std_string_String = Fable.Core.RustInterop.emitRustExpr v969 v984 
                    let _run_target_args'_v979 = v985 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v987 : std_string_String = v969 |> unbox<std_string_String>
                    let _run_target_args'_v979 = v987 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v991 : std_string_String = v969 |> unbox<std_string_String>
                    let _run_target_args'_v979 = v991 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v995 : std_string_String = v969 |> unbox<std_string_String>
                    let _run_target_args'_v979 = v995 
                    #endif
#else
                    let v999 : std_string_String = v969 |> unbox<std_string_String>
                    let _run_target_args'_v979 = v999 
                    #endif
                    let v1002 : std_string_String = _run_target_args'_v979 
                    v1002
            let v1127 : string = "$0"
            let v1128 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v803 v1127 
            let v1129 : string = "v1128.lock()"
            let v1130 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1129 
            (* run_target_args'
            let v1132 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1133 : string = "$0.unwrap()"
            let v1134 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1130 v1133 
            let _run_target_args'_v1132 = v1134 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1135 : string = "$0.unwrap()"
            let v1136 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1130 v1135 
            let _run_target_args'_v1132 = v1136 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1137 : string = "$0.unwrap()"
            let v1138 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1130 v1137 
            let _run_target_args'_v1132 = v1138 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1139 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1130 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1132 = v1139 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1140 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1130 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1132 = v1140 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1141 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1130 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1132 = v1141 
            #endif
#else
            let v1142 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1130 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1132 = v1142 
            #endif
            let v1143 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v1132 
            let v1146 : string = "&$0"
            let v1147 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1143 v1146 
            let v1148 : string = "$0.send($1)"
            let v1149 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v1147, v1126) v1148 
            let v1150 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method139()
            (* run_target_args'
            let v1152 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1153 : string = "$0.map_err(|x| $1(x))"
            let v1154 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1149, v1150) v1153 
            let _run_target_args'_v1152 = v1154 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1155 : string = "$0.map_err(|x| $1(x))"
            let v1156 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1149, v1150) v1155 
            let _run_target_args'_v1152 = v1156 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1157 : string = "$0.map_err(|x| $1(x))"
            let v1158 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1149, v1150) v1157 
            let _run_target_args'_v1152 = v1158 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1159 : Result<unit, std_string_String> = match v1149 with Ok x -> Ok x | Error x -> Error (v1150 x)
            let _run_target_args'_v1152 = v1159 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1160 : Result<unit, std_string_String> = match v1149 with Ok x -> Ok x | Error x -> Error (v1150 x)
            let _run_target_args'_v1152 = v1160 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1161 : Result<unit, std_string_String> = match v1149 with Ok x -> Ok x | Error x -> Error (v1150 x)
            let _run_target_args'_v1152 = v1161 
            #endif
#else
            let v1162 : Result<unit, std_string_String> = match v1149 with Ok x -> Ok x | Error x -> Error (v1150 x)
            let _run_target_args'_v1152 = v1162 
            #endif
            let v1163 : Result<unit, std_string_String> = _run_target_args'_v1152 
            let v1166 : string = "$0"
            let v1167 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1163 v1166 
            let v1168 : string = "true; $0 }); //"
            let v1169 : bool = Fable.Core.RustInterop.emitRustExpr v1167 v1168 
            let v1170 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1171 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1170 
            let v1172 : Result<unit, string> = method140(v1171)
            let v1173 : string = v772 + v773 
            let x = v1172 //
            let v1174 : _ = x
            let v1175 : unit = ()
            (* run_target_args'
            let v1176 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1177 : string = $"true; let _fix_closure_v1175 = $0"
            let v1178 : bool = Fable.Core.RustInterop.emitRustExpr v1174 v1177 
            let _run_target_args'_v1176 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1179 : string = $"true; let _fix_closure_v1175 = $0"
            let v1180 : bool = Fable.Core.RustInterop.emitRustExpr v1174 v1179 
            let _run_target_args'_v1176 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1181 : string = $"true; let _fix_closure_v1175 = $0"
            let v1182 : bool = Fable.Core.RustInterop.emitRustExpr v1174 v1181 
            let _run_target_args'_v1176 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1176 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1176 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1176 = false 
            #endif
#else
            let _run_target_args'_v1176 = false 
            #endif
            let v1183 : bool = _run_target_args'_v1176 
            let v1185 : string = $"true; _fix_closure_v1175 " + v1173 + "); " + v772 + " // rust.fix_closure'"
            let v1186 : bool = Fable.Core.RustInterop.emitRustExpr () v1185 
            let v1187 : string = "__spawn"
            let v1188 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1187 
            let v1190 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US27) = method141()
            let v1191 : US27 option = v4 |> Option.map v1190 
            let v1204 : US27 = US27_1
            let v1205 : US27 = v1191 |> Option.defaultValue v1204 
            match v1205 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v1209) -> (* Some *)
                let v1210 : string = "$0"
                let v1211 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v433 v1210 
                let v1212 : string = "v1211.lock()"
                let v1213 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1212 
                (* run_target_args'
                let v1215 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1216 : string = "$0.unwrap()"
                let v1217 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1213 v1216 
                let _run_target_args'_v1215 = v1217 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1218 : string = "$0.unwrap()"
                let v1219 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1213 v1218 
                let _run_target_args'_v1215 = v1219 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1220 : string = "$0.unwrap()"
                let v1221 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1213 v1220 
                let _run_target_args'_v1215 = v1221 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1222 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1215 = v1222 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1223 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1215 = v1223 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1224 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1215 = v1224 
                #endif
#else
                let v1225 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1215 = v1225 
                #endif
                let v1226 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1215 
                let v1229 : std_sync_MutexGuard<std_process_ChildStdin option> = method142(v1226)
                let v1230 : string = "true; let mut v1229 = v1229"
                let v1231 : bool = Fable.Core.RustInterop.emitRustExpr () v1230 
                let v1232 : string = "&mut $0"
                let v1233 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1229 v1232 
                let v1234 : string = "Option::take($0)"
                let v1235 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1233 v1234 
                let v1236 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1237 : bool = Fable.Core.RustInterop.emitRustExpr v1235 v1236 
                let v1238 : string = "x"
                let v1239 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1238 
                let v1240 : string = "std::sync::Mutex::new(v1239)"
                let v1241 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1240 
                let v1242 : string = "std::sync::Arc::new(v1241)"
                let v1243 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1242 
                let v1244 : string = "true; $0 })"
                let v1245 : bool = Fable.Core.RustInterop.emitRustExpr v1243 v1244 
                let v1246 : string = "_optionm_map_"
                let v1247 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1246 
                let v1249 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US28) = method143()
                let v1250 : US28 option = v1247 |> Option.map v1249 
                let v1263 : US28 = US28_1
                let v1264 : US28 = v1250 |> Option.defaultValue v1263 
                match v1264 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v1268) -> (* Some *)
                    v1209 v1268
                    let v1269 : string = "$0"
                    let v1270 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1268 v1269 
                    let v1271 : string = "v1270.lock()"
                    let v1272 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1271 
                    (* run_target_args'
                    let v1274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1275 : string = "$0.unwrap()"
                    let v1276 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1272 v1275 
                    let _run_target_args'_v1274 = v1276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1277 : string = "$0.unwrap()"
                    let v1278 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1272 v1277 
                    let _run_target_args'_v1274 = v1278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1279 : string = "$0.unwrap()"
                    let v1280 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1272 v1279 
                    let _run_target_args'_v1274 = v1280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1281 : std_sync_MutexGuard<std_process_ChildStdin> = match v1272 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1274 = v1281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1282 : std_sync_MutexGuard<std_process_ChildStdin> = match v1272 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1274 = v1282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1283 : std_sync_MutexGuard<std_process_ChildStdin> = match v1272 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1274 = v1283 
                    #endif
#else
                    let v1284 : std_sync_MutexGuard<std_process_ChildStdin> = match v1272 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1274 = v1284 
                    #endif
                    let v1285 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1274 
                    let v1288 : std_sync_MutexGuard<std_process_ChildStdin> = method144(v1285)
                    let v1289 : string = "true; let mut v1288 = v1288"
                    let v1290 : bool = Fable.Core.RustInterop.emitRustExpr () v1289 
                    let v1291 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1292 : bool = Fable.Core.RustInterop.emitRustExpr v1288 v1291 
                    ()
            let v1293 : string = "$0"
            let v1294 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v303 v1293 
            let v1295 : string = "v1294.lock()"
            let v1296 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1295 
            (* run_target_args'
            let v1298 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1299 : string = "$0.unwrap()"
            let v1300 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1296 v1299 
            let _run_target_args'_v1298 = v1300 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1301 : string = "$0.unwrap()"
            let v1302 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1296 v1301 
            let _run_target_args'_v1298 = v1302 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1303 : string = "$0.unwrap()"
            let v1304 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1296 v1303 
            let _run_target_args'_v1298 = v1304 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1305 : std_sync_MutexGuard<std_process_Child option> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1298 = v1305 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1306 : std_sync_MutexGuard<std_process_Child option> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1298 = v1306 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1307 : std_sync_MutexGuard<std_process_Child option> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1298 = v1307 
            #endif
#else
            let v1308 : std_sync_MutexGuard<std_process_Child option> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1298 = v1308 
            #endif
            let v1309 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1298 
            let v1312 : std_sync_MutexGuard<std_process_Child option> = method128(v1309)
            let v1313 : string = "true; let mut v1312 = v1312"
            let v1314 : bool = Fable.Core.RustInterop.emitRustExpr () v1313 
            let v1315 : string = "&mut $0"
            let v1316 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1312 v1315 
            let v1317 : string = "Option::take($0)"
            let v1318 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1316 v1317 
            let v1319 : string = "$0.unwrap()"
            let v1320 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1318 v1319 
            let v1321 : string = "$0.wait_with_output()"
            let v1322 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1320 v1321 
            let v1323 : (std_io_Error -> std_string_String) = method74()
            (* run_target_args'
            let v1325 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1326 : string = "$0.map_err(|x| $1(x))"
            let v1327 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1322, v1323) v1326 
            let _run_target_args'_v1325 = v1327 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1328 : string = "$0.map_err(|x| $1(x))"
            let v1329 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1322, v1323) v1328 
            let _run_target_args'_v1325 = v1329 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1330 : string = "$0.map_err(|x| $1(x))"
            let v1331 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1322, v1323) v1330 
            let _run_target_args'_v1325 = v1331 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1332 : Result<std_process_Output, std_string_String> = match v1322 with Ok x -> Ok x | Error x -> Error (v1323 x)
            let _run_target_args'_v1325 = v1332 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1333 : Result<std_process_Output, std_string_String> = match v1322 with Ok x -> Ok x | Error x -> Error (v1323 x)
            let _run_target_args'_v1325 = v1333 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1334 : Result<std_process_Output, std_string_String> = match v1322 with Ok x -> Ok x | Error x -> Error (v1323 x)
            let _run_target_args'_v1325 = v1334 
            #endif
#else
            let v1335 : Result<std_process_Output, std_string_String> = match v1322 with Ok x -> Ok x | Error x -> Error (v1323 x)
            let _run_target_args'_v1325 = v1335 
            #endif
            let v1336 : Result<std_process_Output, std_string_String> = _run_target_args'_v1325 
            let v1339 : string = "v1188"
            let v1340 : string = v1339 + v772 
            let v1341 : string = v1340 + v772 
            let v1342 : string = "v789"
            let v1343 : string = ", "
            let v1344 : string = v1342 + v1343 
            let v1345 : string = v1344 + v1341 
            let v1346 : string = "vec![" + v1345 + "]"
            let v1347 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1346 
            let v1348 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1349 : bool = Fable.Core.RustInterop.emitRustExpr v1347 v1348 
            let v1350 : string = "x"
            let v1351 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1350 
            let v1352 : string = "std::thread::JoinHandle::join($0)"
            let v1353 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1351 v1352 
            (* run_target_args'
            let v1355 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1356 : string = "$0.unwrap()"
            let v1357 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1353 v1356 
            let _run_target_args'_v1355 = v1357 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1358 : string = "$0.unwrap()"
            let v1359 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1353 v1358 
            let _run_target_args'_v1355 = v1359 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1360 : string = "$0.unwrap()"
            let v1361 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1353 v1360 
            let _run_target_args'_v1355 = v1361 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1362 : Result<unit, string> = match v1353 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1355 = v1362 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1363 : Result<unit, string> = match v1353 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1355 = v1363 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1364 : Result<unit, string> = match v1353 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1355 = v1364 
            #endif
#else
            let v1365 : Result<unit, string> = match v1353 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1355 = v1365 
            #endif
            let v1366 : Result<unit, string> = _run_target_args'_v1355 
            (* run_target_args'
            let v1369 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1370 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1366 v1370 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1371 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1366 v1371 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1372 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1366 v1372 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1373 : string = $"true"
            let v1374 : bool = Fable.Core.RustInterop.emitRustExpr () v1373 
            let v1375 : string = "true; }}); { //"
            let v1376 : bool = Fable.Core.RustInterop.emitRustExpr () v1375 
            let v1377 : (std_process_Output -> US29) = method145()
            let v1378 : (std_string_String -> US29) = method146()
            let v1379 : US29 = match v1336 with Ok x -> v1377 x | Error x -> v1378 x
            match v1379 with
            | US29_1(v1483) -> (* Error *)
                let v1484 : unit = ()
                let v1485 : (unit -> unit) = closure59(v1483)
                let v1486 : unit = (fun () -> v1485 (); v1484) ()
                let v1533 : US7 = US7_0(v1483)
                let v1534 : US25 = US25_1
                struct (-2, v1533, v1534)
            | US29_0(v1380) -> (* Ok *)
                let v1381 : string = "$0.status"
                let v1382 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1380 v1381 
                let v1383 : string = "$0.code()"
                let v1384 : int32 option = Fable.Core.RustInterop.emitRustExpr v1382 v1383 
                let v1386 : (int32 -> US30) = method148()
                let v1387 : US30 option = v1384 |> Option.map v1386 
                let v1400 : US30 = US30_1
                let v1401 : US30 = v1387 |> Option.defaultValue v1400 
                match v1401 with
                | US30_1 -> (* None *)
                    let v1408 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1413 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1414 : string = "&*$0"
                    let v1415 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1408 v1414 
                    let _run_target_args'_v1413 = v1415 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1416 : string = "&*$0"
                    let v1417 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1408 v1416 
                    let _run_target_args'_v1413 = v1417 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1418 : string = "&*$0"
                    let v1419 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1408 v1418 
                    let _run_target_args'_v1413 = v1419 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1421 : Ref<Str> = v1408 |> unbox<Ref<Str>>
                    let _run_target_args'_v1413 = v1421 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1425 : Ref<Str> = v1408 |> unbox<Ref<Str>>
                    let _run_target_args'_v1413 = v1425 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1429 : Ref<Str> = v1408 |> unbox<Ref<Str>>
                    let _run_target_args'_v1413 = v1429 
                    #endif
#else
                    let v1433 : Ref<Str> = v1408 |> unbox<Ref<Str>>
                    let _run_target_args'_v1413 = v1433 
                    #endif
                    let v1436 : Ref<Str> = _run_target_args'_v1413 
                    (* run_target_args'
                    let v1446 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1447 : string = "String::from($0)"
                    let v1448 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1436 v1447 
                    let _run_target_args'_v1446 = v1448 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1449 : string = "String::from($0)"
                    let v1450 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1436 v1449 
                    let _run_target_args'_v1446 = v1450 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1451 : string = "String::from($0)"
                    let v1452 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1436 v1451 
                    let _run_target_args'_v1446 = v1452 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1454 : std_string_String = v1436 |> unbox<std_string_String>
                    let _run_target_args'_v1446 = v1454 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1458 : std_string_String = v1436 |> unbox<std_string_String>
                    let _run_target_args'_v1446 = v1458 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1462 : std_string_String = v1436 |> unbox<std_string_String>
                    let _run_target_args'_v1446 = v1462 
                    #endif
#else
                    let v1466 : std_string_String = v1436 |> unbox<std_string_String>
                    let _run_target_args'_v1446 = v1466 
                    #endif
                    let v1469 : std_string_String = _run_target_args'_v1446 
                    let v1475 : US7 = US7_0(v1469)
                    let v1476 : US25 = US25_0(v454)
                    struct (-1, v1475, v1476)
                | US30_0(v1405) -> (* Some *)
                    let v1406 : US7 = US7_1
                    let v1407 : US25 = US25_0(v454)
                    struct (v1405, v1406, v1407)
    let v1606 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1598 with
        | US25_1 -> (* None *)
            let v1604 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1604
        | US25_0(v1599) -> (* Some *)
            let v1601 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1599 
            v1601
    let v1607 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1608 : bool = Fable.Core.RustInterop.emitRustExpr v1606 v1607 
    let v1609 : string = "x"
    let v1610 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1609 
    let v1611 : string = "$0"
    let v1612 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1610 v1611 
    let v1613 : string = "v1612.lock()"
    let v1614 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1613 
    (* run_target_args'
    let v1616 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1617 : string = "$0.unwrap()"
    let v1618 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1614 v1617 
    let _run_target_args'_v1616 = v1618 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1619 : string = "$0.unwrap()"
    let v1620 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1614 v1619 
    let _run_target_args'_v1616 = v1620 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1621 : string = "$0.unwrap()"
    let v1622 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1614 v1621 
    let _run_target_args'_v1616 = v1622 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1623 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1614 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1616 = v1623 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1624 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1614 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1616 = v1624 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1625 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1614 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1616 = v1625 
    #endif
#else
    let v1626 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1614 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1616 = v1626 
    #endif
    let v1627 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v1616 
    let v1630 : string = "$0.iter()"
    let v1631 : _ = Fable.Core.RustInterop.emitRustExpr v1627 v1630 
    let v1632 : string = "$0.collect::<Vec<_>>()"
    let v1633 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1631 v1632 
    let v1634 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1635 : bool = Fable.Core.RustInterop.emitRustExpr v1633 v1634 
    let v1636 : string = "x"
    let v1637 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1636 
    let v1638 : string = "fable_library_rust::String_::fromString($0)"
    let v1639 : string = Fable.Core.RustInterop.emitRustExpr v1637 v1638 
    let v1640 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1641 : bool = Fable.Core.RustInterop.emitRustExpr v1639 v1640 
    let v1642 : string = "_vec_map"
    let v1643 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1642 
    let v1644 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v1645 : (string []) = Fable.Core.RustInterop.emitRustExpr v1643 v1644 
    let v1647 : string seq = v1645 |> Seq.ofArray
    let v1651 : string = method70()
    let v1652 : (string -> (string seq -> string)) = String.concat
    let v1653 : (string seq -> string) = v1652 v1651
    let v1654 : string = v1653 v1647
    let v1658 : string = "true; $0 })"
    let v1659 : bool = Fable.Core.RustInterop.emitRustExpr v1654 v1658 
    let v1660 : string = "_optionm_map_"
    let v1661 : string option = Fable.Core.RustInterop.emitRustExpr () v1660 
    let v1668 : US5 =
        match v1597 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1662) -> (* Some *)
            let v1663 : string = "fable_library_rust::String_::fromString($0)"
            let v1664 : string = Fable.Core.RustInterop.emitRustExpr v1662 v1663 
            US5_0(v1664)
    let v1672 : string =
        match v1668 with
        | US5_1 -> (* None *)
            let v1670 : string = ""
            v1670
        | US5_0(v1669) -> (* Some *)
            v1669
    let v1674 : string = v1661 |> Option.defaultValue v1672 
    let v1677 : unit = ()
    let v1678 : (unit -> unit) = closure61(v1596, v1674)
    let v1679 : unit = (fun () -> v1678 (); v1677) ()
    let v1728 : (int32 * string) = v1596, v1674 
    v1728 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v175 <- Some x
    let v1731 : (int32 * string) = match _capture_v175 with Some x -> x | None -> failwith "base.capture / _capture_v175=None"
    let (a, b) = v1731 
    let v3288 : int32 = a
    let v3289 : string = b
    let _run_target_args'_v15 = struct (v3288, v3289) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3296 : int32, v3297 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3296, v3297) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3304 : int32, v3305 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3304, v3305) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3312 : int32, v3313 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3312, v3313) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v3320 : int32, v3321 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3320, v3321) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v3328 : int32, v3329 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3328, v3329) 
    #endif
#else
    let v3334 : Async<struct (int32 * string)> = method151(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v3343 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v3346 : int32, v3347 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3343 = struct (v3346, v3347) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3354 : int32, v3355 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3343 = struct (v3354, v3355) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3362 : int32, v3363 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3343 = struct (v3362, v3363) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3370 : int32, v3371 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3343 = struct (v3370, v3371) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3376 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3377 : int32, v3378 : string) = v3376 v3334
    let _run_target_args'_v3343 = struct (v3377, v3378) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3379 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3380 : int32, v3381 : string) = v3379 v3334
    let _run_target_args'_v3343 = struct (v3380, v3381) 
    #endif
#else
    let v3382 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3383 : int32, v3384 : string) = v3382 v3334
    let _run_target_args'_v3343 = struct (v3383, v3384) 
    #endif
    let struct (v3385 : int32, v3386 : string) = _run_target_args'_v3343 
    let _run_target_args'_v15 = struct (v3385, v3386) 
    #endif
    let struct (v3391 : int32, v3392 : string) = _run_target_args'_v15 
    struct (v3391, v3392)
and method171 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v4, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v4, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v4, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v36 : string = $"{v0}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v4, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = "; "
    let v46 : string = $"{v45}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v4, v46)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v55 : string = "run_result"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v4, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v65 : string = $"{v26}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v4, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v1}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v45}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = "new_code_path"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v4, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = $"{v26}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"{v2}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v120 : string = " }"
    let v121 : string = $"{v120}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v4, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v129 : string = v4.l0
    v129
and method170 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method171(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.process_gleam / format error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure2()
        let v7 : unit = (fun () -> v6 (); v5) ()
        let struct (v28 : Mut0, v29 : Mut1, v30 : Mut2, v31 : Mut3, v32 : Mut4, v33 : int64 option) = TraceState.trace_state.Value
        let v46 : string = method8(v28, v29, v30, v31, v32, v33)
        let v47 : string = method77()
        let v48 : string = method170(v28, v29, v30, v31, v32, v33, v46, v47, v2, v1, v0)
        method19(v48)
and closure71 () (v0 : string) : US5 =
    US5_0(v0)
and closure72 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method70()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method173 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "run_result"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v1}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v85}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v5, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "new_code_path"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v27}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v2}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v85}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "external_command"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v5, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v27}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v5, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v188 : string = $"{v3}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v5, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v5, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v206 : string = v5.l0
    v206
and method172 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method173(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure74 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method172(v29, v30, v31, v32, v33, v34, v47, v48, v3, v1, v0, v2)
        method19(v49)
and closure73 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure74(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method175 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v5, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v5, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v56 : string = "run_result"
    let v57 : string = $"{v56}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v5, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v66 : string = $"{v27}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v5, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v75 : string = $"{v1}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v84 : string = $"{v46}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = "new_code_path"
    let v94 : string = $"{v93}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v5, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v103 : string = $"{v27}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v112 : string = $"{v2}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = $"{v46}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v5, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v130 : string = "external_command"
    let v131 : string = $"{v130}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v5, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v140 : string = $"{v27}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v5, v140)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v149 : string = $"{v3}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v149)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v162 : unit = ()
    let v163 : (unit -> unit) = closure7(v5, v159)
    let v164 : unit = (fun () -> v163 (); v162) ()
    let v167 : string = v5.l0
    v167
and method174 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method175(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure75 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method174(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method176 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method176(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method177 () : string =
    let v0 : string = "py-path"
    v0
and method178 () : string =
    let v0 : string = "env"
    v0
and method180 (v0 : US35, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "env"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"%A{v0}"
    let v41 : string = $"{v37}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v5, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v50 : string = "; "
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v60 : string = "exit_code"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v5, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v27}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v50}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v5, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v97 : string = "run_result"
    let v98 : string = $"{v97}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v5, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v107 : string = $"{v27}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v5, v107)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v116 : string = $"{v2}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v5, v116)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v125 : string = $"{v50}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v134 : string = "new_code_path"
    let v135 : string = $"{v134}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v5, v135)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v144 : string = $"{v27}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v144)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v153 : string = $"{v3}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v5, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = " }"
    let v163 : string = $"{v162}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = v5.l0
    v171
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US35, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / env install error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure77 (v0 : US35, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method179(v29, v30, v31, v32, v33, v34, v47, v48, v0, v3, v2, v1)
        method19(v49)
and closure78 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method70()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method181 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method173(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method181(v29, v30, v31, v32, v33, v34, v47, v48, v3, v1, v0, v2)
        method19(v49)
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method182 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method175(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method182(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method183 () : string =
    let v0 : string = "fs-path"
    v0
and method184 () : string =
    let v0 : string = "command"
    v0
and method185 () : string =
    let v0 : string = "path"
    v0
and method190 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method191 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method189 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : bool = v106 = false
    let v289 : string =
        if v107 then
            let v108 : string = method33()
            let v109 : string = method35(v108, v0)
            let v110 : string = method45(v109)
            let v112 : string = "/"
            let v113 : (string []) = v110.Split v112 
            let v116 : (string []) = [||]
            let v117 : int32 = v113.Length
            let v118 : Mut6 = {l0 = 0; l1 = 0; l2 = v116} : Mut6
            while method190(v117, v118) do
                let v120 : int32 = v118.l0
                let v121 : int32 =  -v120
                let v122 : int32 = v121 + v117
                let v123 : int32 = v122 - 1
                let struct (v124 : int32, v125 : (string [])) = v118.l1, v118.l2
                let v126 : string = v113.[int v123]
                let v127 : bool = ".." = v126
                let struct (v172 : int32, v173 : (string [])) =
                    if v127 then
                        let v128 : int32 = v124 + 1
                        struct (v128, v125)
                    else
                        let v129 : bool = "." = v126
                        if v129 then
                            struct (v124, v125)
                        else
                            let v130 : bool = 0 = v124
                            if v130 then
                                let v132 : string = ":"
                                let v133 : bool = v126.EndsWith (v132, false, null)
                                if v133 then
                                    let v136 : string = $"{v108.[0]}:"
                                    let v137 : (string []) = [|v136|]
                                    let v138 : int32 = v137.Length
                                    let v139 : int32 = v125.Length
                                    let v140 : int32 = v138 + v139
                                    let v141 : (string []) = Array.zeroCreate<string> (v140)
                                    let v142 : Mut5 = {l0 = 0} : Mut5
                                    while method31(v140, v142) do
                                        let v144 : int32 = v142.l0
                                        let v145 : bool = v144 < v138
                                        let v149 : string =
                                            if v145 then
                                                let v146 : string = v137.[int v144]
                                                v146
                                            else
                                                let v147 : int32 = v144 - v138
                                                let v148 : string = v125.[int v147]
                                                v148
                                        v141.[int v144] <- v149
                                        let v150 : int32 = v144 + 1
                                        v142.l0 <- v150
                                        ()
                                    struct (0, v141)
                                else
                                    let v151 : (string []) = [|v126|]
                                    let v152 : int32 = v151.Length
                                    let v153 : int32 = v125.Length
                                    let v154 : int32 = v152 + v153
                                    let v155 : (string []) = Array.zeroCreate<string> (v154)
                                    let v156 : Mut5 = {l0 = 0} : Mut5
                                    while method31(v154, v156) do
                                        let v158 : int32 = v156.l0
                                        let v159 : bool = v158 < v152
                                        let v163 : string =
                                            if v159 then
                                                let v160 : string = v151.[int v158]
                                                v160
                                            else
                                                let v161 : int32 = v158 - v152
                                                let v162 : string = v125.[int v161]
                                                v162
                                        v155.[int v158] <- v163
                                        let v164 : int32 = v158 + 1
                                        v156.l0 <- v164
                                        ()
                                    struct (0, v155)
                            else
                                let v167 : int32 = v124 - 1
                                struct (v167, v125)
                let v174 : int32 = v120 + 1
                v118.l0 <- v174
                v118.l1 <- v172
                v118.l2 <- v173
                ()
            let struct (v175 : int32, v176 : (string [])) = v118.l1, v118.l2
            let v180 : unit = ()
            let _let'_v180 =
                seq {
                    for i = 0 to v176.Length - 1 do yield v176.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v183 : string seq = _let'_v180 
            let v189 : char = method191()
            let v191 : (char -> string) = _.ToString()
            let v192 : string = v191 v189
            let v196 : bool = v192 = "\n"
            let v198 : string =
                if v196 then
                    method30(v192)
                else
                    v192
            let v199 : (string -> (string seq -> string)) = String.concat
            let v200 : (string seq -> string) = v199 v198
            v200 v183
        else
            let v204 : string = "std::fs::canonicalize(&*$0)"
            let v205 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v204 
            (* run_target_args'
            let v207 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v208 : string = "$0.unwrap()"
            let v209 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v205 v208 
            let _run_target_args'_v207 = v209 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v210 : string = "$0.unwrap()"
            let v211 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v205 v210 
            let _run_target_args'_v207 = v211 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v212 : string = "$0.unwrap()"
            let v213 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v205 v212 
            let _run_target_args'_v207 = v213 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v214 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v214 
            #endif
#if FABLE_COMPILER_PYTHON
            let v215 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v215 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v216 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v216 
            #endif
#else
            let v217 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v217 
            #endif
            let v218 : std_path_PathBuf = _run_target_args'_v207 
            (* run_target_args'
            let v225 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v226 : string = "$0.display()"
            let v227 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v218 v226 
            let _run_target_args'_v225 = v227 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v228 : string = "$0.display()"
            let v229 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v218 v228 
            let _run_target_args'_v225 = v229 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v230 : string = "$0.display()"
            let v231 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v218 v230 
            let _run_target_args'_v225 = v231 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v233 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v233 
            #endif
#if FABLE_COMPILER_PYTHON
            let v237 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v237 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v241 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v241 
            #endif
#else
            let v245 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v245 
            #endif
            let v248 : std_path_Display = _run_target_args'_v225 
            (* run_target_args'
            let v258 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v259 : string = "format!(\"{}\", $0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v248 v259 
            let _run_target_args'_v258 = v260 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v261 : string = "format!(\"{}\", $0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v248 v261 
            let _run_target_args'_v258 = v262 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v263 : string = "format!(\"{}\", $0)"
            let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v248 v263 
            let _run_target_args'_v258 = v264 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v266 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v266 
            #endif
#if FABLE_COMPILER_PYTHON
            let v270 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v270 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v274 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v274 
            #endif
#else
            let v278 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v278 
            #endif
            let v281 : std_string_String = _run_target_args'_v258 
            let v287 : string = "fable_library_rust::String_::fromString($0)"
            let v288 : string = Fable.Core.RustInterop.emitRustExpr v281 v287 
            v288
    let _run_target_args'_v5 = v289 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v291 : string = null |> unbox<string>
    let _run_target_args'_v5 = v291 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v295 : string = null |> unbox<string>
    let _run_target_args'_v5 = v295 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v299 : string = null |> unbox<string>
    let _run_target_args'_v5 = v299 
    #endif
#if FABLE_COMPILER_PYTHON
    let v303 : string = null |> unbox<string>
    let _run_target_args'_v5 = v303 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v307 : string = null |> unbox<string>
    let _run_target_args'_v5 = v307 
    #endif
#else
    let v310 : (string -> string) = System.IO.Path.GetFullPath
    let v311 : string = v310 v0
    let _run_target_args'_v5 = v311 
    #endif
    let v312 : string = _run_target_args'_v5 
    v312
and method188 (v0 : string) : string =
    let v1 : string = method189(v0)
    method45(v1)
and method187 (v0 : string) : string =
    let v1 : string = method33()
    let v2 : string = method35(v1, v0)
    method188(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method187(v2)
and method186 () : (std_string_String -> string) =
    closure82()
and method192 () : string =
    let v0 : string = "retries"
    v0
and method193 () : string =
    let v0 : string = "working-directory"
    v0
and method196 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v4, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v4, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v4, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v36 : string = $"{v0}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v4, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = "; "
    let v46 : string = $"{v45}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v4, v46)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v55 : string = "repl_result"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v4, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v65 : string = $"{v26}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v4, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v1}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v45}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = "retry"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v4, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = $"{v26}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"{v2}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v120 : string = " }"
    let v121 : string = $"{v120}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v4, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v129 : string = v4.l0
    v129
and method195 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method196(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.run / repl error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v1}/{v0}"
        let v50 : string = method195(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v49)
        method19(v50)
and method194 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v22 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v20 : string option = None
            v20
        | US5_0(v15) -> (* Some *)
            let v17 : string option = Some v15 
            v17
    let v23 : bool = false
    let struct (v24 : int32, v25 : string) = method96(v9, v4, v14, v6, v7, v23, v22)
    let v26 : bool = v24 = 0
    let v28 : bool =
        if v26 then
            true
        else
            let v27 : bool = v3 >= v1
            v27
    if v28 then
        struct (v24, v25)
    else
        let v29 : unit = ()
        let v30 : (unit -> unit) = closure83(v1, v3, v25, v24)
        let v31 : unit = (fun () -> v30 (); v29) ()
        let v79 : uint8 = v3 + 1uy
        method194(v0, v1, v2, v79)
and method198 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "jupyter_result_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method197 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method198(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / jupyter nbconvert"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method197(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method200 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "pwsh_replace_html_result_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method200(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / html cell ids"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method199(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method202 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "result_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method201 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method202(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method201(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method203 () : string =
    let v0 : string = "cleanup"
    v0
and method204 () : string =
    let v0 : string = "wasm"
    v0
and method205 () : string =
    let v0 : string = "contract"
    v0
and method206 (v0 : string, v1 : string, v2 : US36) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v4, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : string = "extension"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v4, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v4, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v36 : string = $"{v0}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v4, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = "; "
    let v46 : string = $"{v45}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v4, v46)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v55 : string = "code"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v4, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v65 : string = $"{v26}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v4, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v1}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v45}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = "runtime"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v4, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = $"{v26}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"%A{v2}"
    let v115 : string = $"{v111}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v4, v115)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v124 : string = " }"
    let v125 : string = $"{v124}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v4, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = v4.l0
    v133
and method207 (v0 : US5, v1 : string, v2 : US39, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method35(v3, v4)
    let v6 : string = method35(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US39_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method35(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US38_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US38_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US38_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method35(v10, v42)
            method35(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method209 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method209(v0, v4, v2)
        let v6 : string = method35(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method210 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method210(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method208 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method73(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method35(v4, v7)
    let v9 : string = method45(v8)
    method71(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method209(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method119(v11, v12)
    let v17 : unit = ()
    let _let'_v17 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v20 : string seq = _let'_v17 
    let v27 : (string -> (string seq -> string)) = String.concat
    let v28 : string = "\\n        "
    let v29 : (string seq -> string) = v27 v28
    let v30 : string = v29 v20
    let v33 : UH2 = UH2_0
    let v34 : UH2 = method210(v3, v33)
    let v35 : string list = []
    let v36 : string list = method119(v34, v35)
    let v40 : unit = ()
    let _let'_v40 =
        seq {
            yield! v36 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v43 : string seq = _let'_v40 
    let v50 : (string -> (string seq -> string)) = String.concat
    let v51 : (string seq -> string) = v50 v28
    let v52 : string = v51 v43
    let v55 : string = $"{v1}.fsproj"
    let v56 : string = method35(v4, v55)
    let v57 : string = method45(v56)
    let v58 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v59 : string = $"<PropertyGroup>"
    let v60 : string = "\n"
    let v61 : string = v58 + v60 
    let v62 : string = v61 + v59 
    let v63 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v64 : string = v62 + v60 
    let v65 : string = v64 + v63 
    let v66 : string = $"    <LangVersion>preview</LangVersion>"
    let v67 : string = v65 + v60 
    let v68 : string = v67 + v66 
    let v69 : string = $"    <RollForward>Major</RollForward>"
    let v70 : string = v68 + v60 
    let v71 : string = v70 + v69 
    let v72 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v73 : string = v71 + v60 
    let v74 : string = v73 + v72 
    let v75 : string = $"    <PublishAot>false</PublishAot>"
    let v76 : string = v74 + v60 
    let v77 : string = v76 + v75 
    let v78 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v79 : string = v77 + v60 
    let v80 : string = v79 + v78 
    let v81 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v82 : string = v80 + v60 
    let v83 : string = v82 + v81 
    let v84 : string = $"    <SelfContained>true</SelfContained>"
    let v85 : string = v83 + v60 
    let v86 : string = v85 + v84 
    let v87 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v88 : string = v86 + v60 
    let v89 : string = v88 + v87 
    let v90 : string = $"    <OutputType>Exe</OutputType>"
    let v91 : string = v89 + v60 
    let v92 : string = v91 + v90 
    let v93 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v94 : string = v92 + v60 
    let v95 : string = v94 + v93 
    let v96 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v97 : string = v95 + v60 
    let v98 : string = v97 + v96 
    let v99 : string = $"</PropertyGroup>"
    let v100 : string = v98 + v60 
    let v101 : string = v100 + v99 
    let v102 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v103 : string = v101 + v60 
    let v104 : string = v103 + v102 
    let v105 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v106 : string = v104 + v60 
    let v107 : string = v106 + v105 
    let v108 : string = $"</PropertyGroup>"
    let v109 : string = v107 + v60 
    let v110 : string = v109 + v108 
    let v111 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v112 : string = v110 + v60 
    let v113 : string = v112 + v111 
    let v114 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v115 : string = v113 + v60 
    let v116 : string = v115 + v114 
    let v117 : string = $"</PropertyGroup>"
    let v118 : string = v116 + v60 
    let v119 : string = v118 + v117 
    let v120 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v121 : string = v119 + v60 
    let v122 : string = v121 + v120 
    let v123 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v124 : string = v122 + v60 
    let v125 : string = v124 + v123 
    let v126 : string = $"</PropertyGroup>"
    let v127 : string = v125 + v60 
    let v128 : string = v127 + v126 
    let v129 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v130 : string = v128 + v60 
    let v131 : string = v130 + v129 
    let v132 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v133 : string = v131 + v60 
    let v134 : string = v133 + v132 
    let v135 : string = $"</PropertyGroup>"
    let v136 : string = v134 + v60 
    let v137 : string = v136 + v135 
    let v138 : string = $"<ItemGroup>"
    let v139 : string = v137 + v60 
    let v140 : string = v139 + v138 
    let v141 : string = $"    {v30}"
    let v142 : string = v140 + v60 
    let v143 : string = v142 + v141 
    let v144 : string = $"    <Compile Include=\"{v9}\" />"
    let v145 : string = v143 + v60 
    let v146 : string = v145 + v144 
    let v147 : string = $"</ItemGroup>"
    let v148 : string = v146 + v60 
    let v149 : string = v148 + v147 
    let v150 : string = $"<ItemGroup>"
    let v151 : string = v149 + v60 
    let v152 : string = v151 + v150 
    let v153 : string = $"    {v52}"
    let v154 : string = v152 + v60 
    let v155 : string = v154 + v153 
    let v156 : string = $"</ItemGroup>"
    let v157 : string = v155 + v60 
    let v158 : string = v157 + v156 
    let v159 : string = $"</Project>"
    let v160 : string = v158 + v60 
    let v161 : string = v160 + v159 
    method71(v57, v161)
    v57
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US40 =
    US40_0(v0)
and method212 () : (chrono_DateTime<chrono_Utc> -> US40) =
    closure87()
and method213 () : string =
    let v0 : string = "hh:mm"
    v0
and method214 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method215 () : string =
    let v0 : string = "hhmm"
    v0
and method211 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v569 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v571 : System.DateTime = System.DateTime.UnixEpoch
    let v575 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v576 : System.DateTime = v575 v571
    let v580 : System.DateTimeKind = System.DateTimeKind.Local
    let v581 : System.DateTime = System.DateTime.SpecifyKind (v1, v580)
    let v585 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v586 : System.DateTime = v585 v581
    (* run_target_args'
    let v592 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v593 : (System.DateTime -> int64) = _.Ticks
    let v594 : int64 = v593 v586
    let _run_target_args'_v592 = v594 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v595 : (System.DateTime -> int64) = _.Ticks
    let v596 : int64 = v595 v586
    let _run_target_args'_v592 = v596 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v598 : int64 = null |> unbox<int64>
    let _run_target_args'_v592 = v598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v601 : (System.DateTime -> int64) = _.Ticks
    let v602 : int64 = v601 v586
    let _run_target_args'_v592 = v602 
    #endif
#if FABLE_COMPILER_PYTHON
    let v603 : (System.DateTime -> int64) = _.Ticks
    let v604 : int64 = v603 v586
    let _run_target_args'_v592 = v604 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v605 : (System.DateTime -> int64) = _.Ticks
    let v606 : int64 = v605 v586
    let _run_target_args'_v592 = v606 
    #endif
#else
    let v607 : (System.DateTime -> int64) = _.Ticks
    let v608 : int64 = v607 v586
    let _run_target_args'_v592 = v608 
    #endif
    let v609 : int64 = _run_target_args'_v592 
    (* run_target_args'
    let v632 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v633 : (System.DateTime -> int64) = _.Ticks
    let v634 : int64 = v633 v576
    let _run_target_args'_v632 = v634 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v635 : (System.DateTime -> int64) = _.Ticks
    let v636 : int64 = v635 v576
    let _run_target_args'_v632 = v636 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v638 : int64 = null |> unbox<int64>
    let _run_target_args'_v632 = v638 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v641 : (System.DateTime -> int64) = _.Ticks
    let v642 : int64 = v641 v576
    let _run_target_args'_v632 = v642 
    #endif
#if FABLE_COMPILER_PYTHON
    let v643 : (System.DateTime -> int64) = _.Ticks
    let v644 : int64 = v643 v576
    let _run_target_args'_v632 = v644 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v645 : (System.DateTime -> int64) = _.Ticks
    let v646 : int64 = v645 v576
    let _run_target_args'_v632 = v646 
    #endif
#else
    let v647 : (System.DateTime -> int64) = _.Ticks
    let v648 : int64 = v647 v576
    let _run_target_args'_v632 = v648 
    #endif
    let v649 : int64 = _run_target_args'_v632 
    let v670 : int64 = v609 |> int64 
    let v674 : int64 = v649 |> int64 
    let v677 : int64 = v670 - v674
    let v678 : int64 = v677 / 10L
    let v679 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v680 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v678 v679 
    let v682 : (chrono_DateTime<chrono_Utc> -> US40) = method212()
    let v683 : US40 option = v680 |> Option.map v682 
    let v696 : US40 = US40_1
    let v697 : US40 = v683 |> Option.defaultValue v696 
    let v717 : US5 =
        match v697 with
        | US40_1 -> (* None *)
            US5_1
        | US40_0(v701) -> (* Some *)
            let v702 : string = "$0.naive_utc()"
            let v703 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v701 v702 
            let v704 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v705 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v703 v704 
            let v706 : string = "%Y%m%d-%H%M-%S%f"
            let v707 : string = "r#\"" + v706 + "\"#"
            let v708 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v707 
            let v709 : string = "$0.format($1).to_string()"
            let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v705, v708) v709 
            let v711 : string = "fable_library_rust::String_::fromString($0)"
            let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
            let v713 : string = $"{v712.[0..17]}-{v712.[18..21]}-{v712.[22]}"
            US5_0(v713)
    let v721 : string =
        match v717 with
        | US5_1 -> (* None *)
            let v719 : string = ""
            v719
        | US5_0(v718) -> (* Some *)
            v718
    (* run_target_args'
    let v726 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v727 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v728 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v727 
    let _run_target_args'_v726 = v728 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v730 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v726 = v730 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v734 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v726 = v734 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v738 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v726 = v738 
    #endif
#if FABLE_COMPILER_PYTHON
    let v742 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v726 = v742 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v745 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v726 = v745 
    #endif
#else
    let v746 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v726 = v746 
    #endif
    let v747 : System.TimeZoneInfo = _run_target_args'_v726 
    (* run_target_args'
    let v760 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v764 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v765 : (System.DateTime -> int64) = _.Ticks
    let v766 : int64 = v765 v586
    let _run_target_args'_v764 = v766 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v767 : (System.DateTime -> int64) = _.Ticks
    let v768 : int64 = v767 v586
    let _run_target_args'_v764 = v768 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v770 : int64 = null |> unbox<int64>
    let _run_target_args'_v764 = v770 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v773 : (System.DateTime -> int64) = _.Ticks
    let v774 : int64 = v773 v586
    let _run_target_args'_v764 = v774 
    #endif
#if FABLE_COMPILER_PYTHON
    let v775 : (System.DateTime -> int64) = _.Ticks
    let v776 : int64 = v775 v586
    let _run_target_args'_v764 = v776 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v777 : (System.DateTime -> int64) = _.Ticks
    let v778 : int64 = v777 v586
    let _run_target_args'_v764 = v778 
    #endif
#else
    let v779 : (System.DateTime -> int64) = _.Ticks
    let v780 : int64 = v779 v586
    let _run_target_args'_v764 = v780 
    #endif
    let v781 : int64 = _run_target_args'_v764 
    let v801 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v802 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v781) v801 
    let v804 : System.TimeSpan = v802 |> System.TimeSpan 
    let _run_target_args'_v760 = v804 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v810 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v811 : (System.DateTime -> int64) = _.Ticks
    let v812 : int64 = v811 v586
    let _run_target_args'_v810 = v812 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v813 : (System.DateTime -> int64) = _.Ticks
    let v814 : int64 = v813 v586
    let _run_target_args'_v810 = v814 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v816 : int64 = null |> unbox<int64>
    let _run_target_args'_v810 = v816 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v819 : (System.DateTime -> int64) = _.Ticks
    let v820 : int64 = v819 v586
    let _run_target_args'_v810 = v820 
    #endif
#if FABLE_COMPILER_PYTHON
    let v821 : (System.DateTime -> int64) = _.Ticks
    let v822 : int64 = v821 v586
    let _run_target_args'_v810 = v822 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v823 : (System.DateTime -> int64) = _.Ticks
    let v824 : int64 = v823 v586
    let _run_target_args'_v810 = v824 
    #endif
#else
    let v825 : (System.DateTime -> int64) = _.Ticks
    let v826 : int64 = v825 v586
    let _run_target_args'_v810 = v826 
    #endif
    let v827 : int64 = _run_target_args'_v810 
    let v847 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v848 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v827) v847 
    let v850 : System.TimeSpan = v848 |> System.TimeSpan 
    let _run_target_args'_v760 = v850 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v854 : US3 = US3_2
    let v855 : US4 = US4_3(v854)
    let v856 : string = $"date_time.get_utc_offset / target: {v855}"
    let v857 : System.TimeSpan = failwith<System.TimeSpan> v856
    let _run_target_args'_v760 = v857 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v861 : US3 = US3_0
    let v862 : US4 = US4_4(v861)
    let v863 : string = $"date_time.get_utc_offset / target: {v862}"
    let v864 : System.TimeSpan = failwith<System.TimeSpan> v863
    let _run_target_args'_v760 = v864 
    #endif
#if FABLE_COMPILER_PYTHON
    let v868 : US3 = US3_0
    let v869 : US4 = US4_5(v868)
    let v870 : string = $"date_time.get_utc_offset / target: {v869}"
    let v871 : System.TimeSpan = failwith<System.TimeSpan> v870
    let _run_target_args'_v760 = v871 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v874 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v879 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v880 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v881 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v880 
    let _run_target_args'_v879 = v881 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v883 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v879 = v883 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v887 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v879 = v887 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v891 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v879 = v891 
    #endif
#if FABLE_COMPILER_PYTHON
    let v895 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v879 = v895 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v898 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v879 = v898 
    #endif
#else
    let v899 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v879 = v899 
    #endif
    let v900 : System.TimeZoneInfo = _run_target_args'_v879 
    let v906 : (System.DateTime -> System.TimeSpan) = v874 v900
    let v907 : System.TimeSpan = v906 v586
    let _run_target_args'_v760 = v907 
    #endif
#else
    let v908 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v913 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v914 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v915 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v914 
    let _run_target_args'_v913 = v915 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v917 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v913 = v917 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v921 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v913 = v921 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v925 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v913 = v925 
    #endif
#if FABLE_COMPILER_PYTHON
    let v929 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v913 = v929 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v932 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v913 = v932 
    #endif
#else
    let v933 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v913 = v933 
    #endif
    let v934 : System.TimeZoneInfo = _run_target_args'_v913 
    let v940 : (System.DateTime -> System.TimeSpan) = v908 v934
    let v941 : System.TimeSpan = v940 v586
    let _run_target_args'_v760 = v941 
    #endif
    let v942 : System.TimeSpan = _run_target_args'_v760 
    let v952 : (System.TimeSpan -> int32) = _.Hours
    let v953 : int32 = v952 v942
    let v956 : bool = v953 > 0
    let v957 : uint8 =
        if v956 then
            1uy
        else
            0uy
    let v958 : string = method213()
    (* run_target_args'
    let v1012 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1013 : string = "$0.toString($1)"
    let v1014 : string = Fable.Core.RustInterop.emitRustExpr struct (v942, v958) v1013 
    let _run_target_args'_v1012 = v1014 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1015 : string = "$0.toString($1)"
    let v1016 : string = Fable.Core.RustInterop.emitRustExpr struct (v942, v958) v1015 
    let _run_target_args'_v1012 = v1016 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1017 : string = "$0.toString($1)"
    let v1018 : string = Fable.Core.RustInterop.emitRustExpr struct (v942, v958) v1017 
    let _run_target_args'_v1012 = v1018 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1019 : string = v942.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1012 = v1019 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1020 : string = v942.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1012 = v1020 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1022 : string = v942.ToString v958 
    let _run_target_args'_v1012 = v1022 
    #endif
#else
    let v1075 : string = v942.ToString v958 
    let _run_target_args'_v1012 = v1075 
    #endif
    let v1127 : string = _run_target_args'_v1012 
    let v1182 : string = $"{v957}{v1127.[0..1]}{v1127.[3..4]}"
    let v1184 : (System.Guid -> string) = _.ToString()
    let v1185 : string = v1184 v0
    let v1188 : int32 = v721.Length
    let v1189 : int32 = v1182.Length
    let v1190 : int32 = v1188 + v1189
    let v1192 : (string -> int32) = String.length
    let v1193 : int32 = v1192 v1185
    let v1201 : int32 = v1190 |> int32 
    let v1214 : int32 = v1193 |> int32 
    let v1222 : int32 = v1214 - 1
    let v1224 : string = v1185.[int v1201..int v1222]
    let v1228 : string = $"{v721}{v1182}{v1224}"
    (* run_target_args'
    let v1233 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1235 : System.Guid = v1228 |> System.Guid 
    let _run_target_args'_v1233 = v1235 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1239 : System.Guid = v1228 |> System.Guid 
    let _run_target_args'_v1233 = v1239 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1243 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1233 = v1243 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1247 : System.Guid = v1228 |> System.Guid 
    let _run_target_args'_v1233 = v1247 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1251 : System.Guid = v1228 |> System.Guid 
    let _run_target_args'_v1233 = v1251 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1255 : System.Guid = v1228 |> System.Guid 
    let _run_target_args'_v1233 = v1255 
    #endif
#else
    let v1259 : System.Guid = v1228 |> System.Guid 
    let _run_target_args'_v1233 = v1259 
    #endif
    let v1262 : System.Guid = _run_target_args'_v1233 
    let _run_target_args'_v569 = v1262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1269 : System.DateTime = System.DateTime.UnixEpoch
    let v1273 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1274 : System.DateTime = v1273 v1269
    let v1278 : System.DateTimeKind = System.DateTimeKind.Local
    let v1279 : System.DateTime = System.DateTime.SpecifyKind (v1, v1278)
    let v1283 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1284 : System.DateTime = v1283 v1279
    (* run_target_args'
    let v1290 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1291 : (System.DateTime -> int64) = _.Ticks
    let v1292 : int64 = v1291 v1284
    let _run_target_args'_v1290 = v1292 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1293 : (System.DateTime -> int64) = _.Ticks
    let v1294 : int64 = v1293 v1284
    let _run_target_args'_v1290 = v1294 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1296 : int64 = null |> unbox<int64>
    let _run_target_args'_v1290 = v1296 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1299 : (System.DateTime -> int64) = _.Ticks
    let v1300 : int64 = v1299 v1284
    let _run_target_args'_v1290 = v1300 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1301 : (System.DateTime -> int64) = _.Ticks
    let v1302 : int64 = v1301 v1284
    let _run_target_args'_v1290 = v1302 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1303 : (System.DateTime -> int64) = _.Ticks
    let v1304 : int64 = v1303 v1284
    let _run_target_args'_v1290 = v1304 
    #endif
#else
    let v1305 : (System.DateTime -> int64) = _.Ticks
    let v1306 : int64 = v1305 v1284
    let _run_target_args'_v1290 = v1306 
    #endif
    let v1307 : int64 = _run_target_args'_v1290 
    (* run_target_args'
    let v1330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1331 : (System.DateTime -> int64) = _.Ticks
    let v1332 : int64 = v1331 v1274
    let _run_target_args'_v1330 = v1332 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1333 : (System.DateTime -> int64) = _.Ticks
    let v1334 : int64 = v1333 v1274
    let _run_target_args'_v1330 = v1334 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1336 : int64 = null |> unbox<int64>
    let _run_target_args'_v1330 = v1336 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1339 : (System.DateTime -> int64) = _.Ticks
    let v1340 : int64 = v1339 v1274
    let _run_target_args'_v1330 = v1340 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1341 : (System.DateTime -> int64) = _.Ticks
    let v1342 : int64 = v1341 v1274
    let _run_target_args'_v1330 = v1342 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1343 : (System.DateTime -> int64) = _.Ticks
    let v1344 : int64 = v1343 v1274
    let _run_target_args'_v1330 = v1344 
    #endif
#else
    let v1345 : (System.DateTime -> int64) = _.Ticks
    let v1346 : int64 = v1345 v1274
    let _run_target_args'_v1330 = v1346 
    #endif
    let v1347 : int64 = _run_target_args'_v1330 
    let v1368 : int64 = v1307 |> int64 
    let v1372 : int64 = v1347 |> int64 
    let v1375 : int64 = v1368 - v1372
    let v1376 : int64 = v1375 / 10L
    let v1377 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1378 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1376 v1377 
    let v1380 : (chrono_DateTime<chrono_Utc> -> US40) = method212()
    let v1381 : US40 option = v1378 |> Option.map v1380 
    let v1394 : US40 = US40_1
    let v1395 : US40 = v1381 |> Option.defaultValue v1394 
    let v1415 : US5 =
        match v1395 with
        | US40_1 -> (* None *)
            US5_1
        | US40_0(v1399) -> (* Some *)
            let v1400 : string = "$0.naive_utc()"
            let v1401 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1399 v1400 
            let v1402 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1403 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1401 v1402 
            let v1404 : string = "%Y%m%d-%H%M-%S%f"
            let v1405 : string = "r#\"" + v1404 + "\"#"
            let v1406 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1405 
            let v1407 : string = "$0.format($1).to_string()"
            let v1408 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1403, v1406) v1407 
            let v1409 : string = "fable_library_rust::String_::fromString($0)"
            let v1410 : string = Fable.Core.RustInterop.emitRustExpr v1408 v1409 
            let v1411 : string = $"{v1410.[0..17]}-{v1410.[18..21]}-{v1410.[22]}"
            US5_0(v1411)
    let v1419 : string =
        match v1415 with
        | US5_1 -> (* None *)
            let v1417 : string = ""
            v1417
        | US5_0(v1416) -> (* Some *)
            v1416
    (* run_target_args'
    let v1424 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1425 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1426 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1425 
    let _run_target_args'_v1424 = v1426 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1428 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1424 = v1428 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1432 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1424 = v1432 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1436 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1424 = v1436 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1440 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1424 = v1440 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1443 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1424 = v1443 
    #endif
#else
    let v1444 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1424 = v1444 
    #endif
    let v1445 : System.TimeZoneInfo = _run_target_args'_v1424 
    (* run_target_args'
    let v1458 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1462 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1463 : (System.DateTime -> int64) = _.Ticks
    let v1464 : int64 = v1463 v1284
    let _run_target_args'_v1462 = v1464 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1465 : (System.DateTime -> int64) = _.Ticks
    let v1466 : int64 = v1465 v1284
    let _run_target_args'_v1462 = v1466 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1468 : int64 = null |> unbox<int64>
    let _run_target_args'_v1462 = v1468 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1471 : (System.DateTime -> int64) = _.Ticks
    let v1472 : int64 = v1471 v1284
    let _run_target_args'_v1462 = v1472 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1473 : (System.DateTime -> int64) = _.Ticks
    let v1474 : int64 = v1473 v1284
    let _run_target_args'_v1462 = v1474 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1475 : (System.DateTime -> int64) = _.Ticks
    let v1476 : int64 = v1475 v1284
    let _run_target_args'_v1462 = v1476 
    #endif
#else
    let v1477 : (System.DateTime -> int64) = _.Ticks
    let v1478 : int64 = v1477 v1284
    let _run_target_args'_v1462 = v1478 
    #endif
    let v1479 : int64 = _run_target_args'_v1462 
    let v1499 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1500 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1284, v1479) v1499 
    let v1502 : System.TimeSpan = v1500 |> System.TimeSpan 
    let _run_target_args'_v1458 = v1502 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1508 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1509 : (System.DateTime -> int64) = _.Ticks
    let v1510 : int64 = v1509 v1284
    let _run_target_args'_v1508 = v1510 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1511 : (System.DateTime -> int64) = _.Ticks
    let v1512 : int64 = v1511 v1284
    let _run_target_args'_v1508 = v1512 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1514 : int64 = null |> unbox<int64>
    let _run_target_args'_v1508 = v1514 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1517 : (System.DateTime -> int64) = _.Ticks
    let v1518 : int64 = v1517 v1284
    let _run_target_args'_v1508 = v1518 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1519 : (System.DateTime -> int64) = _.Ticks
    let v1520 : int64 = v1519 v1284
    let _run_target_args'_v1508 = v1520 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1521 : (System.DateTime -> int64) = _.Ticks
    let v1522 : int64 = v1521 v1284
    let _run_target_args'_v1508 = v1522 
    #endif
#else
    let v1523 : (System.DateTime -> int64) = _.Ticks
    let v1524 : int64 = v1523 v1284
    let _run_target_args'_v1508 = v1524 
    #endif
    let v1525 : int64 = _run_target_args'_v1508 
    let v1545 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1546 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1284, v1525) v1545 
    let v1548 : System.TimeSpan = v1546 |> System.TimeSpan 
    let _run_target_args'_v1458 = v1548 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1552 : US3 = US3_2
    let v1553 : US4 = US4_3(v1552)
    let v1554 : string = $"date_time.get_utc_offset / target: {v1553}"
    let v1555 : System.TimeSpan = failwith<System.TimeSpan> v1554
    let _run_target_args'_v1458 = v1555 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1559 : US3 = US3_0
    let v1560 : US4 = US4_4(v1559)
    let v1561 : string = $"date_time.get_utc_offset / target: {v1560}"
    let v1562 : System.TimeSpan = failwith<System.TimeSpan> v1561
    let _run_target_args'_v1458 = v1562 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1566 : US3 = US3_0
    let v1567 : US4 = US4_5(v1566)
    let v1568 : string = $"date_time.get_utc_offset / target: {v1567}"
    let v1569 : System.TimeSpan = failwith<System.TimeSpan> v1568
    let _run_target_args'_v1458 = v1569 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1572 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1577 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1578 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1579 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1578 
    let _run_target_args'_v1577 = v1579 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1581 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1577 = v1581 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1585 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1577 = v1585 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1589 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1577 = v1589 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1577 = v1593 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1596 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1577 = v1596 
    #endif
#else
    let v1597 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1577 = v1597 
    #endif
    let v1598 : System.TimeZoneInfo = _run_target_args'_v1577 
    let v1604 : (System.DateTime -> System.TimeSpan) = v1572 v1598
    let v1605 : System.TimeSpan = v1604 v1284
    let _run_target_args'_v1458 = v1605 
    #endif
#else
    let v1606 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1611 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1612 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1613 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1612 
    let _run_target_args'_v1611 = v1613 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1615 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1611 = v1615 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1619 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1611 = v1619 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1623 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1611 = v1623 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1627 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1611 = v1627 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1630 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1611 = v1630 
    #endif
#else
    let v1631 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1611 = v1631 
    #endif
    let v1632 : System.TimeZoneInfo = _run_target_args'_v1611 
    let v1638 : (System.DateTime -> System.TimeSpan) = v1606 v1632
    let v1639 : System.TimeSpan = v1638 v1284
    let _run_target_args'_v1458 = v1639 
    #endif
    let v1640 : System.TimeSpan = _run_target_args'_v1458 
    let v1650 : (System.TimeSpan -> int32) = _.Hours
    let v1651 : int32 = v1650 v1640
    let v1654 : bool = v1651 > 0
    let v1655 : uint8 =
        if v1654 then
            1uy
        else
            0uy
    let v1656 : string = method213()
    (* run_target_args'
    let v1710 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1711 : string = "$0.toString($1)"
    let v1712 : string = Fable.Core.RustInterop.emitRustExpr struct (v1640, v1656) v1711 
    let _run_target_args'_v1710 = v1712 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1713 : string = "$0.toString($1)"
    let v1714 : string = Fable.Core.RustInterop.emitRustExpr struct (v1640, v1656) v1713 
    let _run_target_args'_v1710 = v1714 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1715 : string = "$0.toString($1)"
    let v1716 : string = Fable.Core.RustInterop.emitRustExpr struct (v1640, v1656) v1715 
    let _run_target_args'_v1710 = v1716 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1717 : string = v1640.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1710 = v1717 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1718 : string = v1640.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1710 = v1718 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1720 : string = v1640.ToString v1656 
    let _run_target_args'_v1710 = v1720 
    #endif
#else
    let v1773 : string = v1640.ToString v1656 
    let _run_target_args'_v1710 = v1773 
    #endif
    let v1825 : string = _run_target_args'_v1710 
    let v1880 : string = $"{v1655}{v1825.[0..1]}{v1825.[3..4]}"
    let v1882 : (System.Guid -> string) = _.ToString()
    let v1883 : string = v1882 v0
    let v1886 : int32 = v1419.Length
    let v1887 : int32 = v1880.Length
    let v1888 : int32 = v1886 + v1887
    let v1890 : (string -> int32) = String.length
    let v1891 : int32 = v1890 v1883
    let v1899 : int32 = v1888 |> int32 
    let v1912 : int32 = v1891 |> int32 
    let v1920 : int32 = v1912 - 1
    let v1922 : string = v1883.[int v1899..int v1920]
    let v1926 : string = $"{v1419}{v1880}{v1922}"
    (* run_target_args'
    let v1931 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1933 : System.Guid = v1926 |> System.Guid 
    let _run_target_args'_v1931 = v1933 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1937 : System.Guid = v1926 |> System.Guid 
    let _run_target_args'_v1931 = v1937 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1941 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1931 = v1941 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1945 : System.Guid = v1926 |> System.Guid 
    let _run_target_args'_v1931 = v1945 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1949 : System.Guid = v1926 |> System.Guid 
    let _run_target_args'_v1931 = v1949 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1953 : System.Guid = v1926 |> System.Guid 
    let _run_target_args'_v1931 = v1953 
    #endif
#else
    let v1957 : System.Guid = v1926 |> System.Guid 
    let _run_target_args'_v1931 = v1957 
    #endif
    let v1960 : System.Guid = _run_target_args'_v1931 
    let _run_target_args'_v569 = v1960 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1967 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v569 = v1967 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1970 : string = method214()
    let v1972 : bool = v1970 = ""
    let v1974 : string =
        if v1972 then
            let v1973 : string = "M-d-y hh:mm:ss tt"
            v1973
        else
            v1970
    let v1975 : (string -> string) = v1.ToString
    let v1976 : string = v1975 v1974
    (* run_target_args'
    let v1995 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1996 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1997 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1996 
    let _run_target_args'_v1995 = v1997 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1999 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v1999 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2003 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v2003 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2007 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v2007 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2011 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v2011 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2014 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1995 = v2014 
    #endif
#else
    let v2015 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1995 = v2015 
    #endif
    let v2016 : System.TimeZoneInfo = _run_target_args'_v1995 
    (* run_target_args'
    let v2029 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2033 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2034 : (System.DateTime -> int64) = _.Ticks
    let v2035 : int64 = v2034 v1
    let _run_target_args'_v2033 = v2035 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2036 : (System.DateTime -> int64) = _.Ticks
    let v2037 : int64 = v2036 v1
    let _run_target_args'_v2033 = v2037 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2039 : int64 = null |> unbox<int64>
    let _run_target_args'_v2033 = v2039 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2042 : (System.DateTime -> int64) = _.Ticks
    let v2043 : int64 = v2042 v1
    let _run_target_args'_v2033 = v2043 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2044 : (System.DateTime -> int64) = _.Ticks
    let v2045 : int64 = v2044 v1
    let _run_target_args'_v2033 = v2045 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2046 : (System.DateTime -> int64) = _.Ticks
    let v2047 : int64 = v2046 v1
    let _run_target_args'_v2033 = v2047 
    #endif
#else
    let v2048 : (System.DateTime -> int64) = _.Ticks
    let v2049 : int64 = v2048 v1
    let _run_target_args'_v2033 = v2049 
    #endif
    let v2050 : int64 = _run_target_args'_v2033 
    let v2070 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2071 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2050) v2070 
    let v2073 : System.TimeSpan = v2071 |> System.TimeSpan 
    let _run_target_args'_v2029 = v2073 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2079 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2080 : (System.DateTime -> int64) = _.Ticks
    let v2081 : int64 = v2080 v1
    let _run_target_args'_v2079 = v2081 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2082 : (System.DateTime -> int64) = _.Ticks
    let v2083 : int64 = v2082 v1
    let _run_target_args'_v2079 = v2083 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2085 : int64 = null |> unbox<int64>
    let _run_target_args'_v2079 = v2085 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2088 : (System.DateTime -> int64) = _.Ticks
    let v2089 : int64 = v2088 v1
    let _run_target_args'_v2079 = v2089 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2090 : (System.DateTime -> int64) = _.Ticks
    let v2091 : int64 = v2090 v1
    let _run_target_args'_v2079 = v2091 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2092 : (System.DateTime -> int64) = _.Ticks
    let v2093 : int64 = v2092 v1
    let _run_target_args'_v2079 = v2093 
    #endif
#else
    let v2094 : (System.DateTime -> int64) = _.Ticks
    let v2095 : int64 = v2094 v1
    let _run_target_args'_v2079 = v2095 
    #endif
    let v2096 : int64 = _run_target_args'_v2079 
    let v2116 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2117 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2096) v2116 
    let v2119 : System.TimeSpan = v2117 |> System.TimeSpan 
    let _run_target_args'_v2029 = v2119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2123 : US3 = US3_2
    let v2124 : US4 = US4_3(v2123)
    let v2125 : string = $"date_time.get_utc_offset / target: {v2124}"
    let v2126 : System.TimeSpan = failwith<System.TimeSpan> v2125
    let _run_target_args'_v2029 = v2126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2130 : US3 = US3_0
    let v2131 : US4 = US4_4(v2130)
    let v2132 : string = $"date_time.get_utc_offset / target: {v2131}"
    let v2133 : System.TimeSpan = failwith<System.TimeSpan> v2132
    let _run_target_args'_v2029 = v2133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2137 : US3 = US3_0
    let v2138 : US4 = US4_5(v2137)
    let v2139 : string = $"date_time.get_utc_offset / target: {v2138}"
    let v2140 : System.TimeSpan = failwith<System.TimeSpan> v2139
    let _run_target_args'_v2029 = v2140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2143 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2148 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2149 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2150 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2149 
    let _run_target_args'_v2148 = v2150 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2152 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2148 = v2152 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2156 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2148 = v2156 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2160 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2148 = v2160 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2164 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2148 = v2164 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2167 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2148 = v2167 
    #endif
#else
    let v2168 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2148 = v2168 
    #endif
    let v2169 : System.TimeZoneInfo = _run_target_args'_v2148 
    let v2175 : (System.DateTime -> System.TimeSpan) = v2143 v2169
    let v2176 : System.TimeSpan = v2175 v1
    let _run_target_args'_v2029 = v2176 
    #endif
#else
    let v2177 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2182 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2183 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2184 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2183 
    let _run_target_args'_v2182 = v2184 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2186 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2182 = v2186 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2190 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2182 = v2190 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2194 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2182 = v2194 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2198 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2182 = v2198 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2201 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2182 = v2201 
    #endif
#else
    let v2202 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2182 = v2202 
    #endif
    let v2203 : System.TimeZoneInfo = _run_target_args'_v2182 
    let v2209 : (System.DateTime -> System.TimeSpan) = v2177 v2203
    let v2210 : System.TimeSpan = v2209 v1
    let _run_target_args'_v2029 = v2210 
    #endif
    let v2211 : System.TimeSpan = _run_target_args'_v2029 
    let v2221 : (System.TimeSpan -> int32) = _.Hours
    let v2222 : int32 = v2221 v2211
    let v2225 : bool = v2222 > 0
    let v2226 : uint8 =
        if v2225 then
            1uy
        else
            0uy
    let v2227 : string = method215()
    (* run_target_args'
    let v2281 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2282 : string = "$0.toString($1)"
    let v2283 : string = Fable.Core.RustInterop.emitRustExpr struct (v2211, v2227) v2282 
    let _run_target_args'_v2281 = v2283 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2284 : string = "$0.toString($1)"
    let v2285 : string = Fable.Core.RustInterop.emitRustExpr struct (v2211, v2227) v2284 
    let _run_target_args'_v2281 = v2285 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2286 : string = "$0.toString($1)"
    let v2287 : string = Fable.Core.RustInterop.emitRustExpr struct (v2211, v2227) v2286 
    let _run_target_args'_v2281 = v2287 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2288 : string = v2211.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2281 = v2288 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2289 : string = v2211.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2281 = v2289 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2291 : string = v2211.ToString v2227 
    let _run_target_args'_v2281 = v2291 
    #endif
#else
    let v2344 : string = v2211.ToString v2227 
    let _run_target_args'_v2281 = v2344 
    #endif
    let v2396 : string = _run_target_args'_v2281 
    let v2451 : string = $"{v2226}{v2396}"
    let v2453 : (System.Guid -> string) = _.ToString()
    let v2454 : string = v2453 v0
    let v2457 : int32 = v1976.Length
    let v2458 : int32 = v2451.Length
    let v2459 : int32 = v2457 + v2458
    let v2461 : (string -> int32) = String.length
    let v2462 : int32 = v2461 v2454
    let v2470 : int32 = v2459 |> int32 
    let v2483 : int32 = v2462 |> int32 
    let v2491 : int32 = v2483 - 1
    let v2493 : string = v2454.[int v2470..int v2491]
    let v2497 : string = $"{v1976}{v2451}{v2493}"
    (* run_target_args'
    let v2502 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2504 : System.Guid = v2497 |> System.Guid 
    let _run_target_args'_v2502 = v2504 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2508 : System.Guid = v2497 |> System.Guid 
    let _run_target_args'_v2502 = v2508 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2512 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2502 = v2512 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2516 : System.Guid = v2497 |> System.Guid 
    let _run_target_args'_v2502 = v2516 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2520 : System.Guid = v2497 |> System.Guid 
    let _run_target_args'_v2502 = v2520 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2524 : System.Guid = v2497 |> System.Guid 
    let _run_target_args'_v2502 = v2524 
    #endif
#else
    let v2528 : System.Guid = v2497 |> System.Guid 
    let _run_target_args'_v2502 = v2528 
    #endif
    let v2531 : System.Guid = _run_target_args'_v2502 
    let _run_target_args'_v569 = v2531 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2537 : string = method214()
    let v2539 : bool = v2537 = ""
    let v2541 : string =
        if v2539 then
            let v2540 : string = "M-d-y hh:mm:ss tt"
            v2540
        else
            v2537
    let v2542 : (string -> string) = v1.ToString
    let v2543 : string = v2542 v2541
    (* run_target_args'
    let v2562 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2563 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2564 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2563 
    let _run_target_args'_v2562 = v2564 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2566 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2562 = v2566 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2570 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2562 = v2570 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2574 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2562 = v2574 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2578 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2562 = v2578 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2581 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2562 = v2581 
    #endif
#else
    let v2582 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2562 = v2582 
    #endif
    let v2583 : System.TimeZoneInfo = _run_target_args'_v2562 
    (* run_target_args'
    let v2596 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2600 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2601 : (System.DateTime -> int64) = _.Ticks
    let v2602 : int64 = v2601 v1
    let _run_target_args'_v2600 = v2602 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2603 : (System.DateTime -> int64) = _.Ticks
    let v2604 : int64 = v2603 v1
    let _run_target_args'_v2600 = v2604 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2606 : int64 = null |> unbox<int64>
    let _run_target_args'_v2600 = v2606 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2609 : (System.DateTime -> int64) = _.Ticks
    let v2610 : int64 = v2609 v1
    let _run_target_args'_v2600 = v2610 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2611 : (System.DateTime -> int64) = _.Ticks
    let v2612 : int64 = v2611 v1
    let _run_target_args'_v2600 = v2612 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2613 : (System.DateTime -> int64) = _.Ticks
    let v2614 : int64 = v2613 v1
    let _run_target_args'_v2600 = v2614 
    #endif
#else
    let v2615 : (System.DateTime -> int64) = _.Ticks
    let v2616 : int64 = v2615 v1
    let _run_target_args'_v2600 = v2616 
    #endif
    let v2617 : int64 = _run_target_args'_v2600 
    let v2637 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2638 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2617) v2637 
    let v2640 : System.TimeSpan = v2638 |> System.TimeSpan 
    let _run_target_args'_v2596 = v2640 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2646 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2647 : (System.DateTime -> int64) = _.Ticks
    let v2648 : int64 = v2647 v1
    let _run_target_args'_v2646 = v2648 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2649 : (System.DateTime -> int64) = _.Ticks
    let v2650 : int64 = v2649 v1
    let _run_target_args'_v2646 = v2650 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2652 : int64 = null |> unbox<int64>
    let _run_target_args'_v2646 = v2652 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2655 : (System.DateTime -> int64) = _.Ticks
    let v2656 : int64 = v2655 v1
    let _run_target_args'_v2646 = v2656 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2657 : (System.DateTime -> int64) = _.Ticks
    let v2658 : int64 = v2657 v1
    let _run_target_args'_v2646 = v2658 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2659 : (System.DateTime -> int64) = _.Ticks
    let v2660 : int64 = v2659 v1
    let _run_target_args'_v2646 = v2660 
    #endif
#else
    let v2661 : (System.DateTime -> int64) = _.Ticks
    let v2662 : int64 = v2661 v1
    let _run_target_args'_v2646 = v2662 
    #endif
    let v2663 : int64 = _run_target_args'_v2646 
    let v2683 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2684 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2663) v2683 
    let v2686 : System.TimeSpan = v2684 |> System.TimeSpan 
    let _run_target_args'_v2596 = v2686 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2690 : US3 = US3_2
    let v2691 : US4 = US4_3(v2690)
    let v2692 : string = $"date_time.get_utc_offset / target: {v2691}"
    let v2693 : System.TimeSpan = failwith<System.TimeSpan> v2692
    let _run_target_args'_v2596 = v2693 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2697 : US3 = US3_0
    let v2698 : US4 = US4_4(v2697)
    let v2699 : string = $"date_time.get_utc_offset / target: {v2698}"
    let v2700 : System.TimeSpan = failwith<System.TimeSpan> v2699
    let _run_target_args'_v2596 = v2700 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2704 : US3 = US3_0
    let v2705 : US4 = US4_5(v2704)
    let v2706 : string = $"date_time.get_utc_offset / target: {v2705}"
    let v2707 : System.TimeSpan = failwith<System.TimeSpan> v2706
    let _run_target_args'_v2596 = v2707 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2710 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2715 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2716 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2717 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2716 
    let _run_target_args'_v2715 = v2717 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2719 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2715 = v2719 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2723 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2715 = v2723 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2727 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2715 = v2727 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2731 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2715 = v2731 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2734 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2715 = v2734 
    #endif
#else
    let v2735 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2715 = v2735 
    #endif
    let v2736 : System.TimeZoneInfo = _run_target_args'_v2715 
    let v2742 : (System.DateTime -> System.TimeSpan) = v2710 v2736
    let v2743 : System.TimeSpan = v2742 v1
    let _run_target_args'_v2596 = v2743 
    #endif
#else
    let v2744 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2749 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2750 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2751 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2750 
    let _run_target_args'_v2749 = v2751 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2753 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2749 = v2753 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2757 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2749 = v2757 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2761 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2749 = v2761 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2765 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2749 = v2765 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2768 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2749 = v2768 
    #endif
#else
    let v2769 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2749 = v2769 
    #endif
    let v2770 : System.TimeZoneInfo = _run_target_args'_v2749 
    let v2776 : (System.DateTime -> System.TimeSpan) = v2744 v2770
    let v2777 : System.TimeSpan = v2776 v1
    let _run_target_args'_v2596 = v2777 
    #endif
    let v2778 : System.TimeSpan = _run_target_args'_v2596 
    let v2788 : (System.TimeSpan -> int32) = _.Hours
    let v2789 : int32 = v2788 v2778
    let v2792 : bool = v2789 > 0
    let v2793 : uint8 =
        if v2792 then
            1uy
        else
            0uy
    let v2794 : string = method215()
    (* run_target_args'
    let v2848 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2849 : string = "$0.toString($1)"
    let v2850 : string = Fable.Core.RustInterop.emitRustExpr struct (v2778, v2794) v2849 
    let _run_target_args'_v2848 = v2850 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2851 : string = "$0.toString($1)"
    let v2852 : string = Fable.Core.RustInterop.emitRustExpr struct (v2778, v2794) v2851 
    let _run_target_args'_v2848 = v2852 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2853 : string = "$0.toString($1)"
    let v2854 : string = Fable.Core.RustInterop.emitRustExpr struct (v2778, v2794) v2853 
    let _run_target_args'_v2848 = v2854 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2855 : string = v2778.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2848 = v2855 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2856 : string = v2778.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2848 = v2856 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2858 : string = v2778.ToString v2794 
    let _run_target_args'_v2848 = v2858 
    #endif
#else
    let v2911 : string = v2778.ToString v2794 
    let _run_target_args'_v2848 = v2911 
    #endif
    let v2963 : string = _run_target_args'_v2848 
    let v3018 : string = $"{v2793}{v2963}"
    let v3020 : (System.Guid -> string) = _.ToString()
    let v3021 : string = v3020 v0
    let v3024 : int32 = v2543.Length
    let v3025 : int32 = v3018.Length
    let v3026 : int32 = v3024 + v3025
    let v3028 : (string -> int32) = String.length
    let v3029 : int32 = v3028 v3021
    let v3037 : int32 = v3026 |> int32 
    let v3050 : int32 = v3029 |> int32 
    let v3058 : int32 = v3050 - 1
    let v3060 : string = v3021.[int v3037..int v3058]
    let v3064 : string = $"{v2543}{v3018}{v3060}"
    (* run_target_args'
    let v3069 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3071 : System.Guid = v3064 |> System.Guid 
    let _run_target_args'_v3069 = v3071 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3075 : System.Guid = v3064 |> System.Guid 
    let _run_target_args'_v3069 = v3075 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3079 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3069 = v3079 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3083 : System.Guid = v3064 |> System.Guid 
    let _run_target_args'_v3069 = v3083 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3087 : System.Guid = v3064 |> System.Guid 
    let _run_target_args'_v3069 = v3087 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3091 : System.Guid = v3064 |> System.Guid 
    let _run_target_args'_v3069 = v3091 
    #endif
#else
    let v3095 : System.Guid = v3064 |> System.Guid 
    let _run_target_args'_v3069 = v3095 
    #endif
    let v3098 : System.Guid = _run_target_args'_v3069 
    let _run_target_args'_v569 = v3098 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3104 : string = method214()
    let v3106 : bool = v3104 = ""
    let v3108 : string =
        if v3106 then
            let v3107 : string = "M-d-y hh:mm:ss tt"
            v3107
        else
            v3104
    let v3109 : (string -> string) = v1.ToString
    let v3110 : string = v3109 v3108
    (* run_target_args'
    let v3129 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3130 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3131 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3130 
    let _run_target_args'_v3129 = v3131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3133 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3129 = v3133 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3137 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3129 = v3137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3141 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3129 = v3141 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3145 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3129 = v3145 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3148 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3129 = v3148 
    #endif
#else
    let v3149 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3129 = v3149 
    #endif
    let v3150 : System.TimeZoneInfo = _run_target_args'_v3129 
    (* run_target_args'
    let v3163 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3167 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3168 : (System.DateTime -> int64) = _.Ticks
    let v3169 : int64 = v3168 v1
    let _run_target_args'_v3167 = v3169 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3170 : (System.DateTime -> int64) = _.Ticks
    let v3171 : int64 = v3170 v1
    let _run_target_args'_v3167 = v3171 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3173 : int64 = null |> unbox<int64>
    let _run_target_args'_v3167 = v3173 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3176 : (System.DateTime -> int64) = _.Ticks
    let v3177 : int64 = v3176 v1
    let _run_target_args'_v3167 = v3177 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3178 : (System.DateTime -> int64) = _.Ticks
    let v3179 : int64 = v3178 v1
    let _run_target_args'_v3167 = v3179 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3180 : (System.DateTime -> int64) = _.Ticks
    let v3181 : int64 = v3180 v1
    let _run_target_args'_v3167 = v3181 
    #endif
#else
    let v3182 : (System.DateTime -> int64) = _.Ticks
    let v3183 : int64 = v3182 v1
    let _run_target_args'_v3167 = v3183 
    #endif
    let v3184 : int64 = _run_target_args'_v3167 
    let v3204 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3205 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3184) v3204 
    let v3207 : System.TimeSpan = v3205 |> System.TimeSpan 
    let _run_target_args'_v3163 = v3207 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3213 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3214 : (System.DateTime -> int64) = _.Ticks
    let v3215 : int64 = v3214 v1
    let _run_target_args'_v3213 = v3215 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3216 : (System.DateTime -> int64) = _.Ticks
    let v3217 : int64 = v3216 v1
    let _run_target_args'_v3213 = v3217 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3219 : int64 = null |> unbox<int64>
    let _run_target_args'_v3213 = v3219 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3222 : (System.DateTime -> int64) = _.Ticks
    let v3223 : int64 = v3222 v1
    let _run_target_args'_v3213 = v3223 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3224 : (System.DateTime -> int64) = _.Ticks
    let v3225 : int64 = v3224 v1
    let _run_target_args'_v3213 = v3225 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3226 : (System.DateTime -> int64) = _.Ticks
    let v3227 : int64 = v3226 v1
    let _run_target_args'_v3213 = v3227 
    #endif
#else
    let v3228 : (System.DateTime -> int64) = _.Ticks
    let v3229 : int64 = v3228 v1
    let _run_target_args'_v3213 = v3229 
    #endif
    let v3230 : int64 = _run_target_args'_v3213 
    let v3250 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3251 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3230) v3250 
    let v3253 : System.TimeSpan = v3251 |> System.TimeSpan 
    let _run_target_args'_v3163 = v3253 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3257 : US3 = US3_2
    let v3258 : US4 = US4_3(v3257)
    let v3259 : string = $"date_time.get_utc_offset / target: {v3258}"
    let v3260 : System.TimeSpan = failwith<System.TimeSpan> v3259
    let _run_target_args'_v3163 = v3260 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3264 : US3 = US3_0
    let v3265 : US4 = US4_4(v3264)
    let v3266 : string = $"date_time.get_utc_offset / target: {v3265}"
    let v3267 : System.TimeSpan = failwith<System.TimeSpan> v3266
    let _run_target_args'_v3163 = v3267 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3271 : US3 = US3_0
    let v3272 : US4 = US4_5(v3271)
    let v3273 : string = $"date_time.get_utc_offset / target: {v3272}"
    let v3274 : System.TimeSpan = failwith<System.TimeSpan> v3273
    let _run_target_args'_v3163 = v3274 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3277 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3282 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3283 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3284 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3283 
    let _run_target_args'_v3282 = v3284 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3286 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3282 = v3286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3282 = v3290 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3294 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3282 = v3294 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3298 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3282 = v3298 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3301 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3282 = v3301 
    #endif
#else
    let v3302 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3282 = v3302 
    #endif
    let v3303 : System.TimeZoneInfo = _run_target_args'_v3282 
    let v3309 : (System.DateTime -> System.TimeSpan) = v3277 v3303
    let v3310 : System.TimeSpan = v3309 v1
    let _run_target_args'_v3163 = v3310 
    #endif
#else
    let v3311 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3316 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3317 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3318 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3317 
    let _run_target_args'_v3316 = v3318 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3320 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3316 = v3320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3324 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3316 = v3324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3328 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3316 = v3328 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3332 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3316 = v3332 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3335 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3316 = v3335 
    #endif
#else
    let v3336 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3316 = v3336 
    #endif
    let v3337 : System.TimeZoneInfo = _run_target_args'_v3316 
    let v3343 : (System.DateTime -> System.TimeSpan) = v3311 v3337
    let v3344 : System.TimeSpan = v3343 v1
    let _run_target_args'_v3163 = v3344 
    #endif
    let v3345 : System.TimeSpan = _run_target_args'_v3163 
    let v3355 : (System.TimeSpan -> int32) = _.Hours
    let v3356 : int32 = v3355 v3345
    let v3359 : bool = v3356 > 0
    let v3360 : uint8 =
        if v3359 then
            1uy
        else
            0uy
    let v3361 : string = method215()
    (* run_target_args'
    let v3415 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3416 : string = "$0.toString($1)"
    let v3417 : string = Fable.Core.RustInterop.emitRustExpr struct (v3345, v3361) v3416 
    let _run_target_args'_v3415 = v3417 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3418 : string = "$0.toString($1)"
    let v3419 : string = Fable.Core.RustInterop.emitRustExpr struct (v3345, v3361) v3418 
    let _run_target_args'_v3415 = v3419 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3420 : string = "$0.toString($1)"
    let v3421 : string = Fable.Core.RustInterop.emitRustExpr struct (v3345, v3361) v3420 
    let _run_target_args'_v3415 = v3421 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3422 : string = v3345.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3415 = v3422 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3423 : string = v3345.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3415 = v3423 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3425 : string = v3345.ToString v3361 
    let _run_target_args'_v3415 = v3425 
    #endif
#else
    let v3478 : string = v3345.ToString v3361 
    let _run_target_args'_v3415 = v3478 
    #endif
    let v3530 : string = _run_target_args'_v3415 
    let v3585 : string = $"{v3360}{v3530}"
    let v3587 : (System.Guid -> string) = _.ToString()
    let v3588 : string = v3587 v0
    let v3591 : int32 = v3110.Length
    let v3592 : int32 = v3585.Length
    let v3593 : int32 = v3591 + v3592
    let v3595 : (string -> int32) = String.length
    let v3596 : int32 = v3595 v3588
    let v3604 : int32 = v3593 |> int32 
    let v3617 : int32 = v3596 |> int32 
    let v3625 : int32 = v3617 - 1
    let v3627 : string = v3588.[int v3604..int v3625]
    let v3631 : string = $"{v3110}{v3585}{v3627}"
    (* run_target_args'
    let v3636 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3638 : System.Guid = v3631 |> System.Guid 
    let _run_target_args'_v3636 = v3638 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3642 : System.Guid = v3631 |> System.Guid 
    let _run_target_args'_v3636 = v3642 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3646 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3636 = v3646 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3650 : System.Guid = v3631 |> System.Guid 
    let _run_target_args'_v3636 = v3650 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3654 : System.Guid = v3631 |> System.Guid 
    let _run_target_args'_v3636 = v3654 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3658 : System.Guid = v3631 |> System.Guid 
    let _run_target_args'_v3636 = v3658 
    #endif
#else
    let v3662 : System.Guid = v3631 |> System.Guid 
    let _run_target_args'_v3636 = v3662 
    #endif
    let v3665 : System.Guid = _run_target_args'_v3636 
    let _run_target_args'_v569 = v3665 
    #endif
#else
    let v3671 : string = method214()
    let v3673 : bool = v3671 = ""
    let v3675 : string =
        if v3673 then
            let v3674 : string = "M-d-y hh:mm:ss tt"
            v3674
        else
            v3671
    let v3676 : (string -> string) = v1.ToString
    let v3677 : string = v3676 v3675
    (* run_target_args'
    let v3696 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3697 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3698 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3697 
    let _run_target_args'_v3696 = v3698 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3700 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3696 = v3700 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3704 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3696 = v3704 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3708 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3696 = v3708 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3712 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3696 = v3712 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3715 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3696 = v3715 
    #endif
#else
    let v3716 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3696 = v3716 
    #endif
    let v3717 : System.TimeZoneInfo = _run_target_args'_v3696 
    (* run_target_args'
    let v3730 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3734 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3735 : (System.DateTime -> int64) = _.Ticks
    let v3736 : int64 = v3735 v1
    let _run_target_args'_v3734 = v3736 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3737 : (System.DateTime -> int64) = _.Ticks
    let v3738 : int64 = v3737 v1
    let _run_target_args'_v3734 = v3738 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3740 : int64 = null |> unbox<int64>
    let _run_target_args'_v3734 = v3740 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3743 : (System.DateTime -> int64) = _.Ticks
    let v3744 : int64 = v3743 v1
    let _run_target_args'_v3734 = v3744 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3745 : (System.DateTime -> int64) = _.Ticks
    let v3746 : int64 = v3745 v1
    let _run_target_args'_v3734 = v3746 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3747 : (System.DateTime -> int64) = _.Ticks
    let v3748 : int64 = v3747 v1
    let _run_target_args'_v3734 = v3748 
    #endif
#else
    let v3749 : (System.DateTime -> int64) = _.Ticks
    let v3750 : int64 = v3749 v1
    let _run_target_args'_v3734 = v3750 
    #endif
    let v3751 : int64 = _run_target_args'_v3734 
    let v3771 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3772 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3751) v3771 
    let v3774 : System.TimeSpan = v3772 |> System.TimeSpan 
    let _run_target_args'_v3730 = v3774 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3780 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3781 : (System.DateTime -> int64) = _.Ticks
    let v3782 : int64 = v3781 v1
    let _run_target_args'_v3780 = v3782 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3783 : (System.DateTime -> int64) = _.Ticks
    let v3784 : int64 = v3783 v1
    let _run_target_args'_v3780 = v3784 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3786 : int64 = null |> unbox<int64>
    let _run_target_args'_v3780 = v3786 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3789 : (System.DateTime -> int64) = _.Ticks
    let v3790 : int64 = v3789 v1
    let _run_target_args'_v3780 = v3790 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3791 : (System.DateTime -> int64) = _.Ticks
    let v3792 : int64 = v3791 v1
    let _run_target_args'_v3780 = v3792 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3793 : (System.DateTime -> int64) = _.Ticks
    let v3794 : int64 = v3793 v1
    let _run_target_args'_v3780 = v3794 
    #endif
#else
    let v3795 : (System.DateTime -> int64) = _.Ticks
    let v3796 : int64 = v3795 v1
    let _run_target_args'_v3780 = v3796 
    #endif
    let v3797 : int64 = _run_target_args'_v3780 
    let v3817 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3818 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3797) v3817 
    let v3820 : System.TimeSpan = v3818 |> System.TimeSpan 
    let _run_target_args'_v3730 = v3820 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3824 : US3 = US3_2
    let v3825 : US4 = US4_3(v3824)
    let v3826 : string = $"date_time.get_utc_offset / target: {v3825}"
    let v3827 : System.TimeSpan = failwith<System.TimeSpan> v3826
    let _run_target_args'_v3730 = v3827 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3831 : US3 = US3_0
    let v3832 : US4 = US4_4(v3831)
    let v3833 : string = $"date_time.get_utc_offset / target: {v3832}"
    let v3834 : System.TimeSpan = failwith<System.TimeSpan> v3833
    let _run_target_args'_v3730 = v3834 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3838 : US3 = US3_0
    let v3839 : US4 = US4_5(v3838)
    let v3840 : string = $"date_time.get_utc_offset / target: {v3839}"
    let v3841 : System.TimeSpan = failwith<System.TimeSpan> v3840
    let _run_target_args'_v3730 = v3841 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3844 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3849 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3850 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3851 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3850 
    let _run_target_args'_v3849 = v3851 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3853 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3849 = v3853 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3857 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3849 = v3857 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3861 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3849 = v3861 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3865 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3849 = v3865 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3868 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3849 = v3868 
    #endif
#else
    let v3869 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3849 = v3869 
    #endif
    let v3870 : System.TimeZoneInfo = _run_target_args'_v3849 
    let v3876 : (System.DateTime -> System.TimeSpan) = v3844 v3870
    let v3877 : System.TimeSpan = v3876 v1
    let _run_target_args'_v3730 = v3877 
    #endif
#else
    let v3878 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3883 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3884 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3885 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3884 
    let _run_target_args'_v3883 = v3885 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3887 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3883 = v3887 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3891 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3883 = v3891 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3895 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3883 = v3895 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3899 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3883 = v3899 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3902 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3883 = v3902 
    #endif
#else
    let v3903 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3883 = v3903 
    #endif
    let v3904 : System.TimeZoneInfo = _run_target_args'_v3883 
    let v3910 : (System.DateTime -> System.TimeSpan) = v3878 v3904
    let v3911 : System.TimeSpan = v3910 v1
    let _run_target_args'_v3730 = v3911 
    #endif
    let v3912 : System.TimeSpan = _run_target_args'_v3730 
    let v3922 : (System.TimeSpan -> int32) = _.Hours
    let v3923 : int32 = v3922 v3912
    let v3926 : bool = v3923 > 0
    let v3927 : uint8 =
        if v3926 then
            1uy
        else
            0uy
    let v3928 : string = method215()
    (* run_target_args'
    let v3982 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3983 : string = "$0.toString($1)"
    let v3984 : string = Fable.Core.RustInterop.emitRustExpr struct (v3912, v3928) v3983 
    let _run_target_args'_v3982 = v3984 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3985 : string = "$0.toString($1)"
    let v3986 : string = Fable.Core.RustInterop.emitRustExpr struct (v3912, v3928) v3985 
    let _run_target_args'_v3982 = v3986 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3987 : string = "$0.toString($1)"
    let v3988 : string = Fable.Core.RustInterop.emitRustExpr struct (v3912, v3928) v3987 
    let _run_target_args'_v3982 = v3988 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3989 : string = v3912.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3982 = v3989 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3990 : string = v3912.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3982 = v3990 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3992 : string = v3912.ToString v3928 
    let _run_target_args'_v3982 = v3992 
    #endif
#else
    let v4045 : string = v3912.ToString v3928 
    let _run_target_args'_v3982 = v4045 
    #endif
    let v4097 : string = _run_target_args'_v3982 
    let v4152 : string = $"{v3927}{v4097}"
    let v4154 : (System.Guid -> string) = _.ToString()
    let v4155 : string = v4154 v0
    let v4158 : int32 = v3677.Length
    let v4159 : int32 = v4152.Length
    let v4160 : int32 = v4158 + v4159
    let v4162 : (string -> int32) = String.length
    let v4163 : int32 = v4162 v4155
    let v4171 : int32 = v4160 |> int32 
    let v4184 : int32 = v4163 |> int32 
    let v4192 : int32 = v4184 - 1
    let v4194 : string = v4155.[int v4171..int v4192]
    let v4198 : string = $"{v3677}{v4152}{v4194}"
    (* run_target_args'
    let v4203 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4205 : System.Guid = v4198 |> System.Guid 
    let _run_target_args'_v4203 = v4205 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4209 : System.Guid = v4198 |> System.Guid 
    let _run_target_args'_v4203 = v4209 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4213 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4203 = v4213 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4217 : System.Guid = v4198 |> System.Guid 
    let _run_target_args'_v4203 = v4217 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4221 : System.Guid = v4198 |> System.Guid 
    let _run_target_args'_v4203 = v4221 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4225 : System.Guid = v4198 |> System.Guid 
    let _run_target_args'_v4203 = v4225 
    #endif
#else
    let v4229 : System.Guid = v4198 |> System.Guid 
    let _run_target_args'_v4203 = v4229 
    #endif
    let v4232 : System.Guid = _run_target_args'_v4203 
    let _run_target_args'_v569 = v4232 
    #endif
    let v4238 : System.Guid = _run_target_args'_v569 
    v4238
and method216 (v0 : string, v1 : string) : unit =
    let v2 : bool = method38(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method73(v0)
        ()
    let v5 : string option = method40(v1)
    let v7 : string = ""
    let v8 : string = v5 |> Option.defaultValue v7 
    let v11 : bool = method38(v8)
    let v12 : bool = v11 = false
    if v12 then
        let v13 : System.IDisposable = method73(v8)
        ()
    let v14 : bool = method38(v1)
    let v25 : bool =
        if v14 then
            let v15 : Result<std_path_PathBuf, std_io_Error> = method46(v1)
            (* run_target_args'
            let v16 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v17 : string = "$0.is_err()"
            let v18 : bool = Fable.Core.RustInterop.emitRustExpr v15 v17 
            let _run_target_args'_v16 = v18 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v19 : string = "$0.is_err()"
            let v20 : bool = Fable.Core.RustInterop.emitRustExpr v15 v19 
            let _run_target_args'_v16 = v20 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v21 : string = "$0.is_err()"
            let v22 : bool = Fable.Core.RustInterop.emitRustExpr v15 v21 
            let _run_target_args'_v16 = v22 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v16 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v16 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v16 = true 
            #endif
#else
            let _run_target_args'_v16 = true 
            #endif
            let v23 : bool = _run_target_args'_v16 
            v23
        else
            false
    if v25 then
        let v26 : bool = true
        method84(v26, v1)
    let v27 : bool = method38(v1)
    let v28 : bool = v27 = false
    if v28 then
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v31 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v30 
        let v32 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v33 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v32 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v34 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method218 () : string =
    let v0 : string = "("
    v0
and method219 () : string =
    let v0 : string = " "
    v0
and method220 (v0 : US37) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v2, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = v2.l0
    v16
and method224 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "is_error"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v38 : string =
        if v0 then
            let v36 : string = "true"
            v36
        else
            let v37 : string = "false"
            v37
    let v40 : string = $"{v38}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v5, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v5, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v59 : string = "retry"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v5, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v27}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v5, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v87 : string = $"{v49}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v96 : string = "result"
    let v97 : string = $"{v96}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v106 : string = $"{v27}"
    let v109 : unit = ()
    let v110 : (unit -> unit) = closure7(v5, v106)
    let v111 : unit = (fun () -> v110 (); v109) ()
    let v115 : string = $"{v2}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v5, v115)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v124 : string = ", "
    let v125 : string = $"{v124}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v134 : string = $"{v3}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v5, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v143 : string = " }"
    let v144 : string = $"{v143}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v144)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v152 : string = v5.l0
    v152
and method223 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method224(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "common.retry_fn' / loop"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method12()
        let v50 : string = $"{v1}/{v0}"
        let v51 : string = method223(v30, v31, v32, v33, v34, v35, v48, v49, v4, v50, v2, v3)
        method19(v51)
and method222 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method96(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US41 =
        if v11 then
            US41_0(v9, v10)
        else
            US41_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US41_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US41_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure88(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v78 : uint8 = v8 + 1uy
        method222(v0, v1, v2, v3, v4, v5, v6, v7, v78)
and method221 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method222(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method217 (v0 : US36, v1 : string, v2 : string, v3 : string, v4 : US10) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "cfg!(windows)"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "cfg!(windows)"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : US3 = US3_0
    let v22 : US4 = US4_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _run_target_args'_v14 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : US3 = US3_0
    let v26 : US4 = US4_5(v25)
    let v27 : string = $"platform.is_windows / target: {v26}"
    let v28 : bool = failwith<bool> v27
    let _run_target_args'_v14 = v28 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v30 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v31 : bool = v30 v29
    let _run_target_args'_v14 = v31 
    #endif
#else
    let v32 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v33 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v34 : bool = v33 v32
    let _run_target_args'_v14 = v34 
    #endif
    let v35 : bool = _run_target_args'_v14 
    let v43 : string =
        if v35 then
            let v41 : string = "_WINDOWS"
            v41
        else
            let v42 : string = "_LINUX"
            v42
    let v44 : string = $" --define {v43}"
    let v152 : string =
        match v0 with
        | US36_1 -> (* None *)
            let v150 : string = ""
            v150
        | US36_0(v45) -> (* Some *)
            let v47 : string = Unchecked.defaultof<_>
            let v51 : string = Unchecked.defaultof<_>
            let v56 : bool =
                match v45 with
                | US37_0(v54) -> (* Wasm *)
                    let v55 : bool = v47 = v54
                    v55
                | _ ->
                    false
            let v93 : US5 =
                if v56 then
                    let v57 : string = "Wasm"
                    US5_0(v57)
                else
                    (* run_target_args'
                    let v61 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v62 : string = method218()
                    let _run_target_args'_v61 = v62 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v63 : string = method218()
                    let _run_target_args'_v61 = v63 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v64 : string = method218()
                    let _run_target_args'_v61 = v64 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v65 : string = method219()
                    let _run_target_args'_v61 = v65 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v66 : string = method219()
                    let _run_target_args'_v61 = v66 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v67 : string = method219()
                    let _run_target_args'_v61 = v67 
                    #endif
#else
                    let v68 : string = method219()
                    let _run_target_args'_v61 = v68 
                    #endif
                    let v69 : string = _run_target_args'_v61 
                    let v74 : US37 = US37_0(v47)
                    let v75 : string = method220(v74)
                    let v77 : (string []) = v75.Split v69 
                    let v81 : string = v77.[int 0]
                    let v84 : string = method220(v45)
                    let v86 : bool = v84.StartsWith (v81, false, null)
                    if v86 then
                        let v89 : string = "Wasm"
                        US5_0(v89)
                    else
                        US5_1
            let v142 : US5 =
                match v93 with
                | US5_1 -> (* None *)
                    let v98 : bool =
                        match v45 with
                        | US37_1(v96) -> (* Contract *)
                            let v97 : bool = v51 = v96
                            v97
                        | _ ->
                            false
                    let v135 : US5 =
                        if v98 then
                            let v99 : string = "Contract"
                            US5_0(v99)
                        else
                            (* run_target_args'
                            let v103 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v104 : string = method218()
                            let _run_target_args'_v103 = v104 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v105 : string = method218()
                            let _run_target_args'_v103 = v105 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v106 : string = method218()
                            let _run_target_args'_v103 = v106 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v107 : string = method219()
                            let _run_target_args'_v103 = v107 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v108 : string = method219()
                            let _run_target_args'_v103 = v108 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v109 : string = method219()
                            let _run_target_args'_v103 = v109 
                            #endif
#else
                            let v110 : string = method219()
                            let _run_target_args'_v103 = v110 
                            #endif
                            let v111 : string = _run_target_args'_v103 
                            let v116 : US37 = US37_1(v51)
                            let v117 : string = method220(v116)
                            let v119 : (string []) = v117.Split v111 
                            let v123 : string = v119.[int 0]
                            let v126 : string = method220(v45)
                            let v128 : bool = v126.StartsWith (v123, false, null)
                            if v128 then
                                let v131 : string = "Contract"
                                US5_0(v131)
                            else
                                US5_1
                    match v135 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v136) -> (* Some *)
                        US5_0(v136)
                | US5_0(v94) -> (* Some *)
                    US5_0(v94)
            let v146 : string =
                match v142 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v143) -> (* Some *)
                    v143
            let v147 : (unit -> string) = v146.ToUpper
            let v148 : string = v147 ()
            let v149 : string = $" --define {v148}"
            v149
    let v153 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v44}{v152}"
    let v159 : Result<string, string> =
        match v4 with
        | US10_1(v156) -> (* Error *)
            let v157 : Result<string, string> = Error v156 
            v157
        | US10_0(v154) -> (* Ok *)
            let v155 : Result<string, string> = Ok v154 
            v155
    (* run_target_args'
    let v161 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v162 : string = "$0.ok()"
    let v163 : string option = Fable.Core.RustInterop.emitRustExpr v159 v162 
    let _run_target_args'_v161 = v163 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v164 : string = "$0.ok()"
    let v165 : string option = Fable.Core.RustInterop.emitRustExpr v159 v164 
    let _run_target_args'_v161 = v165 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v166 : string = "$0.ok()"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr v159 v166 
    let _run_target_args'_v161 = v167 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v168 : string option = match v159 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v161 = v168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v169 : string option = match v159 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v161 = v169 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v170 : string option = match v159 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v161 = v170 
    #endif
#else
    let v171 : string option = match v159 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v161 = v171 
    #endif
    let v172 : string option = _run_target_args'_v161 
    let v175 : uint8 = 3uy
    let v176 : bool = true
    method221(v175, v153, v5, v6, v7, v8, v176, v172)
and method226 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "dotnet_fable_result"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method225 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method226(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / dotnet fable error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method77()
        let v47 : string = method225(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v4 : string = "near-sdk"
    let v5 : bool = v2.Contains v4 
    v5
and method227 () : (std_string_String -> bool) =
    closure90()
and method228 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method229 () : string =
    let v0 : string = "("
    v0
and method230 () : string =
    let v0 : string = "("
    v0
and method232 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v39 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v40 
    let _run_target_args'_v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v42 
    let _run_target_args'_v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v44 
    let _run_target_args'_v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v55 
    #endif
#else
    let v59 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v59 
    #endif
    let v62 : std_string_String = _run_target_args'_v39 
    let v68 : string = "true; let _capture_move = (move || { //"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "Box::new($0)"
    let v71 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v62 v70 
    let v72 : string = "Box::leak($0)"
    let v73 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "$0"
    let v75 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = $"$0.captures_iter(v73)"
    let v77 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "true; let _regex_captures : Vec<_> = v77.map(|x| { //"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = $"x"
    let v81 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "Box::new($0)"
    let v83 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "Box::leak($0)"
    let v85 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = $"$0.capture_names()"
    let v87 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v87.map(|x| { //"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "x.unwrap_or(\"\").to_string().into()"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "$0.clone()"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = $"v85.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v91 v94 
    let v97 : (string * string) = v93, v95 
    let v100 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v102 : string = "_regex_captures"
    let v103 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "true; $0 }).collect::<Vec<_>>()"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "_regex_captures"
    let v107 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : string = "true; $0 })()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_capture_move"
    let v111 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v110 
    v111
and closure91 () (v0 : std_collections_HashMap<string, string>) : US42 =
    US42_0(v0)
and method233 () : (std_collections_HashMap<string, string> -> US42) =
    closure91()
and method234 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v0}/{3uy}"
        let v50 : string = method223(v29, v30, v31, v32, v33, v34, v47, v48, v3, v49, v1, v2)
        method19(v50)
and method231 (v0 : US10, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US10_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US10_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "$0.ok()"
    let v18 : string option = Fable.Core.RustInterop.emitRustExpr v14 v17 
    let _run_target_args'_v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "$0.ok()"
    let v20 : string option = Fable.Core.RustInterop.emitRustExpr v14 v19 
    let _run_target_args'_v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "$0.ok()"
    let v22 : string option = Fable.Core.RustInterop.emitRustExpr v14 v21 
    let _run_target_args'_v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v16 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v16 = v25 
    #endif
#else
    let v26 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v16 = v26 
    #endif
    let v27 : string option = _run_target_args'_v16 
    let v30 : bool = true
    let struct (v31 : int32, v32 : string) = method96(v8, v3, v4, v5, v6, v30, v27)
    let v34 : string = "failed to load manifest for workspace member"
    let v35 : bool = v32.Contains v34 
    let v38 : bool = v35 = false
    let v191 : US41 =
        if v38 then
            let v39 : bool = v31 = 0
            if v39 then
                US41_0(v31, v32)
            else
                US41_1(v31, v32)
        else
            let v43 : string = $"regex::Regex::new(&$0)"
            let v44 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v45 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v44 v43 
            (* run_target_args'
            let v47 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v48 : string = "$0.unwrap()"
            let v49 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v45 v48 
            let _run_target_args'_v47 = v49 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v50 : string = "$0.unwrap()"
            let v51 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v45 v50 
            let _run_target_args'_v47 = v51 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v52 : string = "$0.unwrap()"
            let v53 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v45 v52 
            let _run_target_args'_v47 = v53 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v54 : regex_Regex = match v45 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v47 = v54 
            #endif
#if FABLE_COMPILER_PYTHON
            let v55 : regex_Regex = match v45 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v47 = v55 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v56 : regex_Regex = match v45 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v47 = v56 
            #endif
#else
            let v57 : regex_Regex = match v45 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v47 = v57 
            #endif
            let v58 : regex_Regex = _run_target_args'_v47 
            let v61 : Vec<std_collections_HashMap<string, string>> = method232(v32, v58)
            let v62 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v63 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v61 v62 
            let v64 : std_collections_HashMap<string, string> option = v63 |> Array.tryItem 0 
            let v66 : (std_collections_HashMap<string, string> -> US42) = method233()
            let v67 : US42 option = v64 |> Option.map v66 
            let v80 : US42 = US42_1
            let v81 : US42 = v67 |> Option.defaultValue v80 
            let v112 : US43 =
                match v81 with
                | US42_1 -> (* None *)
                    US43_1
                | US42_0(v85) -> (* Some *)
                    let v86 : string = method234()
                    let v87 : string = "std::collections::HashMap::get(&$0, &v86).map(|x| x).cloned()"
                    let v88 : string option = Fable.Core.RustInterop.emitRustExpr v85 v87 
                    let v90 : (string -> US5) = method6()
                    let v91 : US5 option = v88 |> Option.map v90 
                    let v104 : US5 = US5_1
                    let v105 : US5 = v91 |> Option.defaultValue v104 
                    US43_0(v105)
            let v119 : US5 =
                match v112 with
                | US43_0(v113) -> (* Some *)
                    match v113 with
                    | US5_0(v114) -> (* Some *)
                        US5_0(v114)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v119 with
            | US5_1 -> (* None *)
                US41_1(v31, v32)
            | US5_0(v121) -> (* Some *)
                let v122 : bool = method37(v121)
                let v123 : bool = v122 = false
                if v123 then
                    let v124 : string option = method40(v121)
                    let v126 : string = ""
                    let v127 : string = v124 |> Option.defaultValue v126 
                    let v130 : System.IDisposable = method73(v127)
                    (* run_target_args'
                    let v133 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v134 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v133 = v134 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v135 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v133 = v135 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v137 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v133 = v137 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v140 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v133 = v140 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v141 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v133 = v141 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v142 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v133 = v142 
                    #endif
#else
                    let v143 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v133 = v143 
                    #endif
                    let v144 : System.DateTime = _run_target_args'_v133 
                    let v150 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v151 : System.Guid = v150 ()
                    let v154 : System.Guid = method211(v151, v144)
                    let v156 : (System.Guid -> string) = _.ToString()
                    let v157 : string = v156 v154
                    let v160 : string = $"[package]"
                    let v161 : string = $"name = \"spiral_{v157}\""
                    let v162 : string = "\n"
                    let v163 : string = v160 + v162 
                    let v164 : string = v163 + v161 
                    let v165 : string = $"version = \"0.0.1\""
                    let v166 : string = v164 + v162 
                    let v167 : string = v166 + v165 
                    let v168 : string = $"edition = \"2021\""
                    let v169 : string = v167 + v162 
                    let v170 : string = v169 + v168 
                    let v171 : string = $""
                    let v172 : string = v170 + v162 
                    let v173 : string = v172 + v171 
                    let v174 : string = $"[[bin]]"
                    let v175 : string = v173 + v162 
                    let v176 : string = v175 + v174 
                    let v177 : string = $"name = \"spiral_{v157}\""
                    let v178 : string = v176 + v162 
                    let v179 : string = v178 + v177 
                    let v180 : string = $"path = \"spiral.rs\""
                    let v181 : string = v179 + v162 
                    let v182 : string = v181 + v180 
                    (* run_target_args'
                    let v183 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v121, v182) v184 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v121, v182)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v185 : bool = v31 = 0
                if v185 then
                    US41_0(v31, v32)
                else
                    US41_1(v31, v32)
    let struct (v199 : bool, v200 : int32, v201 : string) =
        match v191 with
        | US41_1(v194, v195) -> (* Error *)
            struct (true, v194, v195)
        | US41_0(v192, v193) -> (* Ok *)
            struct (false, v192, v193)
    let v202 : bool = v199 = false
    let v204 : bool =
        if v202 then
            true
        else
            let v203 : bool = v2 >= 3uy
            v203
    if v204 then
        struct (v200, v201)
    else
        let v205 : unit = ()
        let v206 : (unit -> unit) = closure92(v2, v200, v201, v199)
        let v207 : unit = (fun () -> v206 (); v205) ()
        let v255 : uint8 = v2 + 1uy
        method231(v0, v1, v255)
and method236 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "cargo_fmt_result"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method235 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method236(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / cargo fmt error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method77()
        let v47 : string = method235(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method237 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method239 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v6, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v6, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v6, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v6, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = "; "
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v6, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v57 : string = "new_code_path"
    let v58 : string = $"{v57}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v6, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v67 : string = $"{v28}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v6, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v1}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v47}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = "external_command"
    let v95 : string = $"{v94}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v6, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v104 : string = $"{v28}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v6, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v113 : string = $"{v2}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v6, v113)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v122 : string = $"{v47}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v6, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v131 : string = "cleanup"
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v6, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v141 : string = $"{v28}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v6, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v151 : string =
        if v3 then
            let v149 : string = "true"
            v149
        else
            let v150 : string = "false"
            v150
    let v153 : string = $"{v151}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v6, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = $"{v47}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v171 : string = "cargo_result"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v6, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v28}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v190 : string = $"{v4}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v6, v190)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v6, v200)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v208 : string = v6.l0
    v208
and method238 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method239(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method77()
        let v50 : string = method238(v30, v31, v32, v33, v34, v35, v48, v49, v3, v1, v4, v0, v2)
        method19(v50)
and closure99 () (v0 : string) : bool =
    let v2 : string = "profile [optimized] target"
    let v3 : bool = v0.Contains v2 
    let v6 : bool = v3 = false
    if v6 then
        let v8 : string = "profile [unoptimized] target"
        let v9 : bool = v0.Contains v8 
        let v12 : bool = v9 = false
        if v12 then
            let v14 : string = "profile [unoptimized + debuginfo] target"
            let v15 : bool = v0.Contains v14 
            let v18 : bool = v15 = false
            v18
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v6 : (string -> bool) = closure99()
    let v7 : (string []) = v3 |> Array.skipWhile v6 
    let v8 : (string []) = v7 |> Array.skip 2 
    let v10 : string seq = v8 |> Seq.ofArray
    let v14 : string = method70()
    let v15 : (string -> (string seq -> string)) = String.concat
    let v16 : (string seq -> string) = v15 v14
    v16 v10
and method241 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "new_code_path"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v1}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v85}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v5, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "external_command"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v27}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v2}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v85}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "cargo_result"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v5, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v27}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v5, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v188 : string = $"{v3}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v5, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v5, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v206 : string = v5.l0
    v206
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method241(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_rust / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method240(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method243 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v6, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v6, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v6, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v6, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = "; "
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v6, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v57 : string = "new_code_path"
    let v58 : string = $"{v57}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v6, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v67 : string = $"{v28}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v6, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v1}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v47}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = "cargo_result"
    let v95 : string = $"{v94}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v6, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v104 : string = $"{v28}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v6, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v113 : string = $"{v2}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v6, v113)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v122 : string = $"{v47}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v6, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v131 : string = "cleanup"
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v6, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v141 : string = $"{v28}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v6, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v151 : string =
        if v3 then
            let v149 : string = "true"
            v149
        else
            let v150 : string = "false"
            v150
    let v153 : string = $"{v151}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v6, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = $"{v47}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v171 : string = "spiral_wasm_result"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v6, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v28}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v190 : string = $"{v4}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v6, v190)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v6, v200)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v208 : string = v6.l0
    v208
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method243(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / wasm error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method77()
        let v50 : string = $"\n{v3}"
        let v51 : string = method242(v30, v31, v32, v33, v34, v35, v48, v49, v4, v1, v2, v0, v50)
        method19(v51)
and method245 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v13 : unit = ()
    let v14 : (unit -> unit) = closure7(v7, v10)
    let v15 : unit = (fun () -> v14 (); v13) ()
    let v19 : string = "exit_code"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v7, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v7, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v7, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v7, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v58 : string = "new_code_path"
    let v59 : string = $"{v58}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v7, v59)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v68 : string = $"{v29}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v7, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v77 : string = $"{v1}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v7, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v86 : string = $"{v48}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v7, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "wasm_path"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v7, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v29}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v7, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v2}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v7, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v48}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v7, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "command"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v7, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v29}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v7, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v3}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v7, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v48}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v7, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "cleanup"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v7, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v29}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v7, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v189 : string =
        if v4 then
            let v187 : string = "true"
            v187
        else
            let v188 : string = "false"
            v188
    let v191 : string = $"{v189}"
    let v194 : unit = ()
    let v195 : (unit -> unit) = closure7(v7, v191)
    let v196 : unit = (fun () -> v195 (); v194) ()
    let v200 : string = $"{v48}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v7, v200)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v209 : string = "cargo_result"
    let v210 : string = $"{v209}"
    let v213 : unit = ()
    let v214 : (unit -> unit) = closure7(v7, v210)
    let v215 : unit = (fun () -> v214 (); v213) ()
    let v219 : string = $"{v29}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v7, v219)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v228 : string = $"{v5}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v7, v228)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v237 : string = " }"
    let v238 : string = $"{v237}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v7, v238)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v246 : string = v7.l0
    v246
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method245(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v17 : string = "spiral.process_rust / cargo error"
    let v18 : string = $"{v6} {v7} #{v15} %s{v17} / {v14}"
    method18(v18)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v31 : Mut0, v32 : Mut1, v33 : Mut2, v34 : Mut3, v35 : Mut4, v36 : int64 option) = TraceState.trace_state.Value
        let v49 : string = method8(v31, v32, v33, v34, v35, v36)
        let v50 : string = method77()
        let v51 : string = $"\n{v2}"
        let v52 : string = method244(v31, v32, v33, v34, v35, v36, v49, v50, v3, v1, v4, v5, v0, v51)
        method19(v52)
and method247 (v0 : string, v1 : UH5) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "new_code_path"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "cleanup"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"%A{v1}"
    let v77 : string = $"{v73}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v86 : string = " }"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v3, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = v3.l0
    v95
and method246 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method247(v8, v24)
    let v26 : int64 = v0.l0
    let v28 : string = "spiral.process_rust / cleanup"
    let v29 : string = $"{v6} {v7} #{v26} %s{v28} / {v25}"
    method18(v29)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v36 : Mut0, v37 : Mut1, v38 : Mut2, v39 : Mut3, v40 : Mut4, v41 : int64 option) = TraceState.trace_state.Value
        let v54 : string = method8(v36, v37, v38, v39, v40, v41)
        let v55 : string = method80()
        let v56 : string = method246(v36, v37, v38, v39, v40, v41, v54, v55, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v56)
and closure105 () () : US44 =
    US44_0
and method249 () : (unit -> US44) =
    closure105()
and closure106 () (v0 : string) : US44 =
    US44_1(v0)
and method250 () : (string -> US44) =
    closure106()
and method252 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "error'"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v2, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v43 : string = " }"
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v2, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = v2.l0
    v52
and method251 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method252(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.file_delete"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure107 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method77()
        let v46 : string = method251(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method248 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method48()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US44) = method249()
        let v24 : (string -> US44) = method250()
        let v25 : US44 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v25 with
        | US44_1(v26) -> (* Error *)
            let v27 : unit = ()
            let v28 : (unit -> unit) = closure107(v26)
            let v29 : unit = (fun () -> v28 (); v27) ()
            ()
        | US44_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v76 : (string -> unit) = System.IO.File.Delete
        v76 v1
        #endif
        // run_target_args' is_unit
        method248(v3)
    | UH5_0 -> (* Nil *)
        ()
and method253 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US45 =
    US45_0(v0)
and method254 () : (std_fs_FileType -> US45) =
    closure109()
and closure110 () (v0 : std_string_String) : US45 =
    US45_1(v0)
and method255 () : (std_string_String -> US45) =
    closure110()
and method256 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v157 : (string -> US5) = method6()
    let v158 : US5 option = v155 |> Option.map v157 
    let v171 : US5 = US5_1
    let v172 : US5 = v158 |> Option.defaultValue v171 
    let v179 : string =
        match v172 with
        | US5_1 -> (* None *)
            let v177 : string = ""
            v177
        | US5_0(v176) -> (* Some *)
            v176
    let _run_target_args'_v5 = v179 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v181 : string = null |> unbox<string>
    let _run_target_args'_v5 = v181 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v185 : string = null |> unbox<string>
    let _run_target_args'_v5 = v185 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v189 : string = null |> unbox<string>
    let _run_target_args'_v5 = v189 
    #endif
#if FABLE_COMPILER_PYTHON
    let v193 : string = null |> unbox<string>
    let _run_target_args'_v5 = v193 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v196 : (string -> string) = System.IO.Path.GetDirectoryName
    let v197 : string = v196 v0
    let _run_target_args'_v5 = v197 
    #endif
#else
    let v198 : (string -> string) = System.IO.Path.GetDirectoryName
    let v199 : string = v198 v0
    let _run_target_args'_v5 = v199 
    #endif
    let v200 : string = _run_target_args'_v5 
    v200
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method74()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US45) = method254()
    let v37 : (std_string_String -> US45) = method255()
    let v38 : US45 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v265 : US46 =
        match v38 with
        | US45_0(v39) -> (* Ok *)
            let v40 : string = "std::fs::FileType::is_dir(&$0)"
            let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
            let v42 : bool = v41 = false
            if v42 then
                US46_0
            else
                let v44 : string = "async_walkdir::DirEntry::path(&$0)"
                let v45 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v44 
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "$0.display()"
                let v52 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : std_path_Display = v45 |> unbox<std_path_Display>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : std_path_Display = v45 |> unbox<std_path_Display>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : std_path_Display = v45 |> unbox<std_path_Display>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : std_path_Display = v45 |> unbox<std_path_Display>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : std_path_Display = _run_target_args'_v50 
                (* run_target_args'
                let v83 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v84 : string = "format!(\"{}\", $0)"
                let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v73 v84 
                let _run_target_args'_v83 = v85 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v86 : string = "format!(\"{}\", $0)"
                let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v73 v86 
                let _run_target_args'_v83 = v87 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v88 : string = "format!(\"{}\", $0)"
                let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v73 v88 
                let _run_target_args'_v83 = v89 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v91 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v83 = v91 
                #endif
#if FABLE_COMPILER_PYTHON
                let v95 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v83 = v95 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v99 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v83 = v99 
                #endif
#else
                let v103 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v83 = v103 
                #endif
                let v106 : std_string_String = _run_target_args'_v83 
                let v112 : string = "fable_library_rust::String_::fromString($0)"
                let v113 : string = Fable.Core.RustInterop.emitRustExpr v106 v112 
                let v114 : string = method256(v113)
                let v116 : bool = v114.StartsWith (v0, false, null)
                let v119 : bool = v116 = false
                if v119 then
                    US46_1
                else
                    let v121 : string option = method40(v113)
                    let v123 : (string -> US5) = method6()
                    let v124 : US5 option = v121 |> Option.map v123 
                    let v137 : US5 = US5_1
                    let v138 : US5 = v124 |> Option.defaultValue v137 
                    match v138 with
                    | US5_0(v142) -> (* Some *)
                        let v144 : bool = v142.Contains v0 
                        let v147 : bool = v144 = false
                        if v147 then
                            US46_2
                        else
                            US46_1
                    | _ ->
                        US46_1
        | _ ->
            let v155 : string = "async_walkdir::DirEntry::path(&$0)"
            let v156 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v155 
            (* run_target_args'
            let v161 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v162 : string = "$0.display()"
            let v163 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v156 v162 
            let _run_target_args'_v161 = v163 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v164 : string = "$0.display()"
            let v165 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v156 v164 
            let _run_target_args'_v161 = v165 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v166 : string = "$0.display()"
            let v167 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v156 v166 
            let _run_target_args'_v161 = v167 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v169 : std_path_Display = v156 |> unbox<std_path_Display>
            let _run_target_args'_v161 = v169 
            #endif
#if FABLE_COMPILER_PYTHON
            let v173 : std_path_Display = v156 |> unbox<std_path_Display>
            let _run_target_args'_v161 = v173 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v177 : std_path_Display = v156 |> unbox<std_path_Display>
            let _run_target_args'_v161 = v177 
            #endif
#else
            let v181 : std_path_Display = v156 |> unbox<std_path_Display>
            let _run_target_args'_v161 = v181 
            #endif
            let v184 : std_path_Display = _run_target_args'_v161 
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = "format!(\"{}\", $0)"
            let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v184 v195 
            let _run_target_args'_v194 = v196 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v197 : string = "format!(\"{}\", $0)"
            let v198 : std_string_String = Fable.Core.RustInterop.emitRustExpr v184 v197 
            let _run_target_args'_v194 = v198 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v199 : string = "format!(\"{}\", $0)"
            let v200 : std_string_String = Fable.Core.RustInterop.emitRustExpr v184 v199 
            let _run_target_args'_v194 = v200 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v202 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v194 = v202 
            #endif
#if FABLE_COMPILER_PYTHON
            let v206 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v194 = v206 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v210 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v194 = v210 
            #endif
#else
            let v214 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v194 = v214 
            #endif
            let v217 : std_string_String = _run_target_args'_v194 
            let v223 : string = "fable_library_rust::String_::fromString($0)"
            let v224 : string = Fable.Core.RustInterop.emitRustExpr v217 v223 
            let v225 : string = method256(v224)
            let v227 : bool = v225.StartsWith (v0, false, null)
            let v230 : bool = v227 = false
            if v230 then
                US46_1
            else
                let v232 : string option = method40(v224)
                let v234 : (string -> US5) = method6()
                let v235 : US5 option = v232 |> Option.map v234 
                let v248 : US5 = US5_1
                let v249 : US5 = v235 |> Option.defaultValue v248 
                match v249 with
                | US5_0(v253) -> (* Some *)
                    let v255 : bool = v253.Contains v0 
                    let v258 : bool = v255 = false
                    if v258 then
                        US46_2
                    else
                        US46_1
                | _ ->
                    US46_1
    let v266 : string = ""
    let v267 : string = "}"
    let v268 : string = v266 + v267 
    let x = v265 //
    let v269 : _ = x
    let v270 : unit = ()
    (* run_target_args'
    let v271 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v272 : string = $"true; let _fix_closure_v270 = $0"
    let v273 : bool = Fable.Core.RustInterop.emitRustExpr v269 v272 
    let _run_target_args'_v271 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v274 : string = $"true; let _fix_closure_v270 = $0"
    let v275 : bool = Fable.Core.RustInterop.emitRustExpr v269 v274 
    let _run_target_args'_v271 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v276 : string = $"true; let _fix_closure_v270 = $0"
    let v277 : bool = Fable.Core.RustInterop.emitRustExpr v269 v276 
    let _run_target_args'_v271 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v271 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v271 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v271 = false 
    #endif
#else
    let _run_target_args'_v271 = false 
    #endif
    let v278 : bool = _run_target_args'_v271 
    let v280 : string = $"true; _fix_closure_v270 " + v268 + "); " + v266 + " // rust.fix_closure'"
    let v281 : bool = Fable.Core.RustInterop.emitRustExpr () v280 
    let v282 : string = "__future_init"
    let v283 : _ = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "v283"
    let v285 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US46>>, Send<Dyn<std_future_Future<US46>>>>>> = Fable.Core.RustInterop.emitRustExpr () v284 
    let v286 : string = "v285.await"
    let v287 : US46 = Fable.Core.RustInterop.emitRustExpr () v286 
    let v296 : async_walkdir_Filtering =
        match v287 with
        | US46_2 -> (* Continue *)
            let v292 : string = "async_walkdir::Filtering::Continue"
            let v293 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v292 
            v293
        | US46_0 -> (* Ignore *)
            let v288 : string = "async_walkdir::Filtering::Ignore"
            let v289 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v288 
            v289
        | US46_1 -> (* IgnoreDir *)
            let v290 : string = "async_walkdir::Filtering::IgnoreDir"
            let v291 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v290 
            v291
    let v297 : string = v266 + v267 
    let x = v296 //
    let v298 : _ = x
    let v299 : unit = ()
    (* run_target_args'
    let v300 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v301 : string = $"true; let _fix_closure_v299 = $0"
    let v302 : bool = Fable.Core.RustInterop.emitRustExpr v298 v301 
    let _run_target_args'_v300 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v303 : string = $"true; let _fix_closure_v299 = $0"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v298 v303 
    let _run_target_args'_v300 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v305 : string = $"true; let _fix_closure_v299 = $0"
    let v306 : bool = Fable.Core.RustInterop.emitRustExpr v298 v305 
    let _run_target_args'_v300 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v300 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v300 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v300 = false 
    #endif
#else
    let _run_target_args'_v300 = false 
    #endif
    let v307 : bool = _run_target_args'_v300 
    let v309 : string = $"true; _fix_closure_v299 " + v297 + "); " + v266 + " // rust.fix_closure'"
    let v310 : bool = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "__future_init"
    let v312 : _ = Fable.Core.RustInterop.emitRustExpr () v311 
    let v313 : string = "v312"
    let v314 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v313 
    v314
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method258 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US47 =
    US47_0(v0)
and method259 () : (async_walkdir_DirEntry -> US47) =
    closure113()
and closure114 () (v0 : std_string_String) : US47 =
    US47_1(v0)
and method260 () : (std_string_String -> US47) =
    closure114()
and method261 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method127(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript / stream_filter_map"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure115 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method77()
        let v46 : string = method261(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method258()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US47) = method259()
    let v19 : (std_string_String -> US47) = method260()
    let v20 : US47 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v226 : US48 =
        match v20 with
        | US47_1(v174) -> (* Error *)
            let v175 : unit = ()
            let v176 : (unit -> unit) = closure115(v174)
            let v177 : unit = (fun () -> v176 (); v175) ()
            US48_1
        | US47_0(v21) -> (* Ok *)
            let v22 : string = "async_walkdir::DirEntry::path(&$0)"
            let v23 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v21 v22 
            (* run_target_args'
            let v28 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v29 : string = "$0.display()"
            let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v23 v29 
            let _run_target_args'_v28 = v30 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v31 : string = "$0.display()"
            let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v23 v31 
            let _run_target_args'_v28 = v32 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v33 : string = "$0.display()"
            let v34 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v23 v33 
            let _run_target_args'_v28 = v34 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v36 : std_path_Display = v23 |> unbox<std_path_Display>
            let _run_target_args'_v28 = v36 
            #endif
#if FABLE_COMPILER_PYTHON
            let v40 : std_path_Display = v23 |> unbox<std_path_Display>
            let _run_target_args'_v28 = v40 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v44 : std_path_Display = v23 |> unbox<std_path_Display>
            let _run_target_args'_v28 = v44 
            #endif
#else
            let v48 : std_path_Display = v23 |> unbox<std_path_Display>
            let _run_target_args'_v28 = v48 
            #endif
            let v51 : std_path_Display = _run_target_args'_v28 
            (* run_target_args'
            let v61 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v62 : string = "format!(\"{}\", $0)"
            let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v51 v62 
            let _run_target_args'_v61 = v63 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v64 : string = "format!(\"{}\", $0)"
            let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v51 v64 
            let _run_target_args'_v61 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v66 : string = "format!(\"{}\", $0)"
            let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v51 v66 
            let _run_target_args'_v61 = v67 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v69 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v61 = v69 
            #endif
#if FABLE_COMPILER_PYTHON
            let v73 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v61 = v73 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v77 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v61 = v77 
            #endif
#else
            let v81 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v61 = v81 
            #endif
            let v84 : std_string_String = _run_target_args'_v61 
            let v90 : string = "fable_library_rust::String_::fromString($0)"
            let v91 : string = Fable.Core.RustInterop.emitRustExpr v84 v90 
            let v92 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v93 : string = $"regex::Regex::new(&$0)"
            let v94 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v92 v93 
            (* run_target_args'
            let v96 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v97 : string = "$0.unwrap()"
            let v98 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v94 v97 
            let _run_target_args'_v96 = v98 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v99 : string = "$0.unwrap()"
            let v100 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v94 v99 
            let _run_target_args'_v96 = v100 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v101 : string = "$0.unwrap()"
            let v102 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v94 v101 
            let _run_target_args'_v96 = v102 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v103 : regex_Regex = match v94 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v96 = v103 
            #endif
#if FABLE_COMPILER_PYTHON
            let v104 : regex_Regex = match v94 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v96 = v104 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105 : regex_Regex = match v94 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v96 = v105 
            #endif
#else
            let v106 : regex_Regex = match v94 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v96 = v106 
            #endif
            let v107 : regex_Regex = _run_target_args'_v96 
            let v110 : Vec<std_collections_HashMap<string, string>> = method232(v91, v107)
            let v111 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v112 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v110 v111 
            let v113 : std_collections_HashMap<string, string> option = v112 |> Array.tryItem 0 
            let v115 : (std_collections_HashMap<string, string> -> US42) = method233()
            let v116 : US42 option = v113 |> Option.map v115 
            let v129 : US42 = US42_1
            let v130 : US42 = v116 |> Option.defaultValue v129 
            let v161 : US43 =
                match v130 with
                | US42_1 -> (* None *)
                    US43_1
                | US42_0(v134) -> (* Some *)
                    let v135 : string = method234()
                    let v136 : string = "std::collections::HashMap::get(&$0, &v135).map(|x| x).cloned()"
                    let v137 : string option = Fable.Core.RustInterop.emitRustExpr v134 v136 
                    let v139 : (string -> US5) = method6()
                    let v140 : US5 option = v137 |> Option.map v139 
                    let v153 : US5 = US5_1
                    let v154 : US5 = v140 |> Option.defaultValue v153 
                    US43_0(v154)
            let v168 : US5 =
                match v161 with
                | US43_0(v162) -> (* Some *)
                    match v162 with
                    | US5_0(v163) -> (* Some *)
                        US5_0(v163)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v168 with
            | US5_1 -> (* None *)
                US48_1
            | US5_0(v169) -> (* Some *)
                US48_0(v91, v169)
    match v226 with
    | US48_1 -> (* None *)
        let v233 : struct (string * string) option = None
        v233
    | US48_0(v227, v228) -> (* Some *)
        let v230 : struct (string * string) option = Some struct (v227, v228) 
        v230
and method257 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US48 =
    US48_0(v0, v1)
and method262 () : (struct (string * string) -> US48) =
    closure117()
and method264 (v0 : US48) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "version"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"%A{v0}"
    let v38 : string = $"{v34}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v2, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method263 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US48) : string =
    let v9 : string = method264(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure118 (v0 : US48) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method263(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method265 (v0 : string, v1 : string, v2 : US48) : unit =
    match v2 with
    | US48_1 -> (* None *)
        let v10 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US48_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method35(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method35(v0, v8)
        method216(v7, v9)
and method266 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method226(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_typescript"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method77()
        let v47 : string = method266(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method268 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "new_code_path"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v2, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v43 : string = " }"
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v2, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = v2.l0
    v52
and method267 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method268(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure120 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method267(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method269 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method269(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method270 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method270(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method70()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method272 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "new_code_path"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v1}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v85}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v5, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "external_command"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v27}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v2}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v85}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "run_result"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v5, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v27}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v5, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v188 : string = $"{v3}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v5, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v5, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v206 : string = v5.l0
    v206
and method271 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method272(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method271(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method273 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method175(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method273(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method274 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method226(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_python"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method77()
        let v47 : string = method274(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method275 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method268(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_python"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure126 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method275(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure127 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method70()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method276 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method272(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method276(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method277 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method175(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method77()
        let v49 : string = method277(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method279 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "subcommand"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "format!(\"{:#?}\", $0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v43 
    let v45 : string = "fable_library_rust::String_::fromString($0)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let _run_target_args'_v38 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "format!(\"{:#?}\", $0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v47 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v48 v49 
    let _run_target_args'_v38 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v38 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : string = $"%A{v0}"
    let _run_target_args'_v38 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : string = $"%A{v0}"
    let _run_target_args'_v38 = v60 
    #endif
#else
    let v64 : string = $"%A{v0}"
    let _run_target_args'_v38 = v64 
    #endif
    let v67 : string = _run_target_args'_v38 
    let v74 : string = $"{v67}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v3, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = "arg_matches"
    let v94 : string = $"{v93}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v3, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v103 : string = $"{v25}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v3, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    (* run_target_args'
    let v115 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : string = "format!(\"{:#?}\", $0)"
    let v117 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v116 
    let v118 : string = "fable_library_rust::String_::fromString($0)"
    let v119 : string = Fable.Core.RustInterop.emitRustExpr v117 v118 
    let _run_target_args'_v115 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : string = "format!(\"{:#?}\", $0)"
    let v121 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v120 
    let v122 : string = "fable_library_rust::String_::fromString($0)"
    let v123 : string = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let _run_target_args'_v115 = v123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : string = "format!(\"{:#?}\", $0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v124 
    let v126 : string = "fable_library_rust::String_::fromString($0)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let _run_target_args'_v115 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : string = $"%A{v1}"
    let _run_target_args'_v115 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : string = $"%A{v1}"
    let _run_target_args'_v115 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : string = $"%A{v1}"
    let _run_target_args'_v115 = v137 
    #endif
#else
    let v141 : string = $"%A{v1}"
    let _run_target_args'_v115 = v141 
    #endif
    let v144 : string = _run_target_args'_v115 
    let v151 : string = $"{v144}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v3, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v161)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v169 : string = v3.l0
    v169
and method278 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method279(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / invalid subcommand"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method278(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v28 v34 
    v35
and method280 () : (serde_json_Error -> string) =
    closure132()
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v12 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v13 : US6 option = v10 |> Option.map v12 
    let v27 : US6 = US6_1
    let v28 : US6 = v13 |> Option.defaultValue v27 
    let v6207 : (struct (string * string) []) =
        match v28 with
        | US6_0(v32, v33) -> (* Some *)
            let v34 : string = "fable_library_rust::String_::fromString($0)"
            let v35 : string = Fable.Core.RustInterop.emitRustExpr v32 v34 
            let v36 : bool = v35 = "gleam"
            if v36 then
                let v37 : string = method22()
                (* run_target_args'
                let v42 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v43 : string = "&*$0"
                let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v37 v43 
                let _run_target_args'_v42 = v44 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v45 : string = "&*$0"
                let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v37 v45 
                let _run_target_args'_v42 = v46 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v47 : string = "&*$0"
                let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v37 v47 
                let _run_target_args'_v42 = v48 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v50 : Ref<Str> = v37 |> unbox<Ref<Str>>
                let _run_target_args'_v42 = v50 
                #endif
#if FABLE_COMPILER_PYTHON
                let v54 : Ref<Str> = v37 |> unbox<Ref<Str>>
                let _run_target_args'_v42 = v54 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v58 : Ref<Str> = v37 |> unbox<Ref<Str>>
                let _run_target_args'_v42 = v58 
                #endif
#else
                let v62 : Ref<Str> = v37 |> unbox<Ref<Str>>
                let _run_target_args'_v42 = v62 
                #endif
                let v65 : Ref<Str> = _run_target_args'_v42 
                let v71 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v72 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v65) v71 
                let v74 : (std_string_String -> US7) = method23()
                let v75 : US7 option = v72 |> Option.map v74 
                let v88 : US7 = US7_1
                let v89 : US7 = v75 |> Option.defaultValue v88 
                let v96 : std_string_String =
                    match v89 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v93) -> (* Some *)
                        v93
                let v97 : string = "fable_library_rust::String_::fromString($0)"
                let v98 : string = Fable.Core.RustInterop.emitRustExpr v96 v97 
                let v99 : string = method24()
                (* run_target_args'
                let v104 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v105 : string = "&*$0"
                let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v99 v105 
                let _run_target_args'_v104 = v106 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v107 : string = "&*$0"
                let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v99 v107 
                let _run_target_args'_v104 = v108 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v109 : string = "&*$0"
                let v110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v99 v109 
                let _run_target_args'_v104 = v110 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v112 : Ref<Str> = v99 |> unbox<Ref<Str>>
                let _run_target_args'_v104 = v112 
                #endif
#if FABLE_COMPILER_PYTHON
                let v116 : Ref<Str> = v99 |> unbox<Ref<Str>>
                let _run_target_args'_v104 = v116 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v120 : Ref<Str> = v99 |> unbox<Ref<Str>>
                let _run_target_args'_v104 = v120 
                #endif
#else
                let v124 : Ref<Str> = v99 |> unbox<Ref<Str>>
                let _run_target_args'_v104 = v124 
                #endif
                let v127 : Ref<Str> = _run_target_args'_v104 
                let v133 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v134 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v33, v127) v133 
                let v136 : (Vec<std_string_String> -> US8) = method25()
                let v137 : US8 option = v134 |> Option.map v136 
                let v150 : US8 = US8_1
                let v151 : US8 = v137 |> Option.defaultValue v150 
                let v155 : (std_string_String []) = [||]
                let v156 : string = "$0.to_vec()"
                let v157 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v155 v156 
                let v160 : Vec<std_string_String> =
                    match v151 with
                    | US8_1 -> (* None *)
                        v157
                    | US8_0(v158) -> (* Some *)
                        v158
                (* run_target_args'
                let v165 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v170 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v171 : string = "std::fs::read(&*$0)"
                let v172 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v98 v171 
                (* run_target_args'
                let v174 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v175 : string = "$0.unwrap()"
                let v176 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v172 v175 
                let _run_target_args'_v174 = v176 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v177 : string = "$0.unwrap()"
                let v178 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v172 v177 
                let _run_target_args'_v174 = v178 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v179 : string = "$0.unwrap()"
                let v180 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v172 v179 
                let _run_target_args'_v174 = v180 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v181 : Vec<uint8> = match v172 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v174 = v181 
                #endif
#if FABLE_COMPILER_PYTHON
                let v182 : Vec<uint8> = match v172 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v174 = v182 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v183 : Vec<uint8> = match v172 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v174 = v183 
                #endif
#else
                let v184 : Vec<uint8> = match v172 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v174 = v184 
                #endif
                let v185 : Vec<uint8> = _run_target_args'_v174 
                let _run_target_args'_v170 = v185 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v189 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v170 = v189 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v193 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v170 = v193 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v197 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v170 = v197 
                #endif
#if FABLE_COMPILER_PYTHON
                let v201 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v170 = v201 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v205 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v170 = v205 
                #endif
#else
                let v208 : (uint8 []) = v98 |> System.IO.File.ReadAllBytes
                let v209 : string = "$0.to_vec()"
                let v210 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v208 v209 
                let _run_target_args'_v170 = v210 
                #endif
                let v211 : Vec<uint8> = _run_target_args'_v170 
                let v217 : Vec<uint8> = method26(v211)
                let v218 : string = "std::string::String::from_utf8($0)"
                let v219 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v217 v218 
                (* run_target_args'
                let v221 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v222 : string = "$0.unwrap()"
                let v223 : std_string_String = Fable.Core.RustInterop.emitRustExpr v219 v222 
                let _run_target_args'_v221 = v223 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v224 : string = "$0.unwrap()"
                let v225 : std_string_String = Fable.Core.RustInterop.emitRustExpr v219 v224 
                let _run_target_args'_v221 = v225 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v226 : string = "$0.unwrap()"
                let v227 : std_string_String = Fable.Core.RustInterop.emitRustExpr v219 v226 
                let _run_target_args'_v221 = v227 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v228 : std_string_String = match v219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v221 = v228 
                #endif
#if FABLE_COMPILER_PYTHON
                let v229 : std_string_String = match v219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v221 = v229 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v230 : std_string_String = match v219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v221 = v230 
                #endif
#else
                let v231 : std_string_String = match v219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v221 = v231 
                #endif
                let v232 : std_string_String = _run_target_args'_v221 
                let v235 : string = "fable_library_rust::String_::fromString($0)"
                let v236 : string = Fable.Core.RustInterop.emitRustExpr v232 v235 
                let _run_target_args'_v165 = v236 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v238 : string = null |> unbox<string>
                let _run_target_args'_v165 = v238 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v242 : string = null |> unbox<string>
                let _run_target_args'_v165 = v242 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v246 : string = null |> unbox<string>
                let _run_target_args'_v165 = v246 
                #endif
#if FABLE_COMPILER_PYTHON
                let v250 : string = null |> unbox<string>
                let _run_target_args'_v165 = v250 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v254 : string = null |> unbox<string>
                let _run_target_args'_v165 = v254 
                #endif
#else
                let v257 : string = v98 |> System.IO.File.ReadAllText
                let _run_target_args'_v165 = v257 
                #endif
                let v258 : string = _run_target_args'_v165 
                let v264 : string = "gleam"
                let v265 : string = method27(v264, v258)
                let v266 : string = method28(v265)
                let v267 : string = method33()
                let v268 : US5 = method34(v267)
                let v274 : US5 =
                    match v268 with
                    | US5_1 -> (* None *)
                        let v271 : string = __SOURCE_DIRECTORY__
                        method34(v271)
                    | US5_0(v269) -> (* Some *)
                        US5_0(v269)
                let v280 : US5 =
                    match v274 with
                    | US5_1 -> (* None *)
                        let v277 : string = "/workspaces"
                        method34(v277)
                    | US5_0(v275) -> (* Some *)
                        US5_0(v275)
                let v284 : string =
                    match v280 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v281) -> (* Some *)
                        v281
                let v285 : string = method54(v284)
                let v286 : bool = "deps" = v285
                let v297 : string =
                    if v286 then
                        let v287 : string option = method40(v284)
                        let v289 : string = v287 |> Option.get
                        let v292 : US5 = method34(v289)
                        match v292 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v293) -> (* Some *)
                            v293
                    else
                        v284
                let v298 : string = "polyglot"
                let v299 : string = method35(v297, v298)
                let v300 : string = method33()
                let v302 : (unit -> string) = v300.ToLower
                let v303 : string = v302 ()
                let v307 : (unit -> string) = v299.ToLower
                let v308 : string = v307 ()
                let v312 : bool = v303.StartsWith (v308, false, null)
                let v317 : US10 =
                    if v312 then
                        US10_1(v308)
                    else
                        US10_0(v308)
                let v323 : Result<string, string> =
                    match v317 with
                    | US10_1(v320) -> (* Error *)
                        let v321 : Result<string, string> = Error v320 
                        v321
                    | US10_0(v318) -> (* Ok *)
                        let v319 : Result<string, string> = Ok v318 
                        v319
                let v324 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v325 : bool = Fable.Core.RustInterop.emitRustExpr v323 v324 
                let v326 : string = "x"
                let v327 : string = Fable.Core.RustInterop.emitRustExpr () v326 
                let v328 : string = "true; $0 })"
                let v329 : bool = Fable.Core.RustInterop.emitRustExpr v327 v328 
                let v330 : string = "_result_unwrap_or_else"
                let v331 : string = Fable.Core.RustInterop.emitRustExpr () v330 
                let v332 : string option = method40(v98)
                let v334 : string = ""
                let v335 : string = v332 |> Option.defaultValue v334 
                let v338 : string = ".."
                let v339 : string = method35(v335, v338)
                let v340 : string = "gleam.toml"
                let v341 : string = method35(v339, v340)
                let v342 : string = "gleam_stdlib=\">=0.55.0 and <1.0.0\""
                let v343 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v344 : (string []) = [|v342; v343|]
                let v345 : string = "$0.to_vec()"
                let v346 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v344 v345 
                let v347 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v348 : bool = Fable.Core.RustInterop.emitRustExpr v346 v347 
                let v349 : string = "x"
                let v350 : string = Fable.Core.RustInterop.emitRustExpr () v349 
                (* run_target_args'
                let v355 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v356 : string = "&*$0"
                let v357 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v350 v356 
                let _run_target_args'_v355 = v357 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v358 : string = "&*$0"
                let v359 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v350 v358 
                let _run_target_args'_v355 = v359 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v360 : string = "&*$0"
                let v361 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v350 v360 
                let _run_target_args'_v355 = v361 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v363 : Ref<Str> = v350 |> unbox<Ref<Str>>
                let _run_target_args'_v355 = v363 
                #endif
#if FABLE_COMPILER_PYTHON
                let v367 : Ref<Str> = v350 |> unbox<Ref<Str>>
                let _run_target_args'_v355 = v367 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v371 : Ref<Str> = v350 |> unbox<Ref<Str>>
                let _run_target_args'_v355 = v371 
                #endif
#else
                let v375 : Ref<Str> = v350 |> unbox<Ref<Str>>
                let _run_target_args'_v355 = v375 
                #endif
                let v378 : Ref<Str> = _run_target_args'_v355 
                (* run_target_args'
                let v388 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v389 : string = "String::from($0)"
                let v390 : std_string_String = Fable.Core.RustInterop.emitRustExpr v378 v389 
                let _run_target_args'_v388 = v390 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v391 : string = "String::from($0)"
                let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v378 v391 
                let _run_target_args'_v388 = v392 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v393 : string = "String::from($0)"
                let v394 : std_string_String = Fable.Core.RustInterop.emitRustExpr v378 v393 
                let _run_target_args'_v388 = v394 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v396 : std_string_String = v378 |> unbox<std_string_String>
                let _run_target_args'_v388 = v396 
                #endif
#if FABLE_COMPILER_PYTHON
                let v400 : std_string_String = v378 |> unbox<std_string_String>
                let _run_target_args'_v388 = v400 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v404 : std_string_String = v378 |> unbox<std_string_String>
                let _run_target_args'_v388 = v404 
                #endif
#else
                let v408 : std_string_String = v378 |> unbox<std_string_String>
                let _run_target_args'_v388 = v408 
                #endif
                let v411 : std_string_String = _run_target_args'_v388 
                let v417 : string = "true; $0 }).collect::<Vec<_>>()"
                let v418 : bool = Fable.Core.RustInterop.emitRustExpr v411 v417 
                let v419 : string = "_vec_map"
                let v420 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v419 
                let v421 : Vec<std_string_String> = method68(v160)
                let v422 : Vec<std_string_String> = method69(v420)
                let v423 : string = "true; let mut v422 = v422"
                let v424 : bool = Fable.Core.RustInterop.emitRustExpr () v423 
                let v425 : string = "true; v422.extend(v421)"
                let v426 : bool = Fable.Core.RustInterop.emitRustExpr () v425 
                let v427 : string = "v422"
                let v428 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v427 
                let v429 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v430 : bool = Fable.Core.RustInterop.emitRustExpr v428 v429 
                let v431 : string = "x"
                let v432 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v431 
                let v433 : string = "fable_library_rust::String_::fromString($0)"
                let v434 : string = Fable.Core.RustInterop.emitRustExpr v432 v433 
                let v436 : string = "="
                let v437 : bool = v434.Contains v436 
                let v451 : string =
                    if v437 then
                        v434
                    else
                        let v441 : string = "]"
                        let v442 : bool = v434.EndsWith (v441, false, null)
                        if v442 then
                            let v445 : string = $"={{version='*',features=["
                            let v446 : string = "["
                            let v447 : string = v434.Replace (v446, v445)
                            let v448 : string = $"{v447}}}"
                            v448
                        else
                            let v449 : string = $"{v434}='*'"
                            v449
                let v452 : string = "true; $0 }).collect::<Vec<_>>()"
                let v453 : bool = Fable.Core.RustInterop.emitRustExpr v451 v452 
                let v454 : string = "_vec_map"
                let v455 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v454 
                let v456 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v457 : (string []) = Fable.Core.RustInterop.emitRustExpr v455 v456 
                let v461 : unit = ()
                let _let'_v461 =
                    seq {
                        for i = 0 to v457.Length - 1 do yield v457.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v464 : string seq = _let'_v461 
                let v471 : string = method70()
                let v472 : (string -> (string seq -> string)) = String.concat
                let v473 : (string seq -> string) = v472 v471
                let v474 : string = v473 v464
                let v478 : string = $"name = \"main\""
                let v479 : string = $"target = \"erlang\""
                let v480 : string = "\n"
                let v481 : string = v478 + v480 
                let v482 : string = v481 + v479 
                let v483 : string = $""
                let v484 : string = v482 + v480 
                let v485 : string = v484 + v483 
                let v486 : string = $"[dependencies]"
                let v487 : string = v485 + v480 
                let v488 : string = v487 + v486 
                let v489 : string = $"{v474}"
                let v490 : string = v488 + v480 
                let v491 : string = v490 + v489 
                method71(v341, v491)
                let v492 : System.Threading.CancellationToken option = None
                let v493 : (struct (string * string) []) = [||]
                let v494 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v495 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v496 : string option = None
                let v497 : string = $"gleam check"
                let v499 : string option = Some v339 
                let v502 : bool = true
                let struct (v503 : int32, v504 : string) = method96(v497, v492, v493, v494, v495, v502, v499)
                let v506 : bool = v503 <> 0 
                let struct (v681 : US5, v682 : US5, v683 : US5, v684 : US5) =
                    if v506 then
                        let v509 : unit = ()
                        let v510 : (unit -> unit) = closure70(v98, v504, v503)
                        let v511 : unit = (fun () -> v510 (); v509) ()
                        let v558 : US5 = US5_0(v264)
                        let v559 : US5 = US5_1
                        let v560 : US5 = US5_1
                        let v561 : US5 = US5_1
                        struct (v558, v559, v560, v561)
                    else
                        let v562 : string = $"gleam run --no-print-progress \"{v98}\""
                        let v563 : string = "TRACE_LEVEL"
                        let v564 : string = "GLEAM_LOG"
                        let v565 : string = "GLEAM_LOG_NOCOLOUR"
                        let v566 : (struct (string * string) []) = [|struct (v563, v334); struct (v564, v334); struct (v565, v334)|]
                        let v567 : System.Threading.CancellationToken option = None
                        let v568 : (struct (string * string) []) = [||]
                        let v569 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v570 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v571 : string option = None
                        let v573 : string option = Some v339 
                        let v576 : bool = true
                        let struct (v577 : int32, v578 : string) = method96(v562, v567, v566, v569, v570, v576, v573)
                        let v579 : int32 = v566.Length
                        let v580 : (string []) = Array.zeroCreate<string> (v579)
                        let v581 : Mut5 = {l0 = 0} : Mut5
                        while method31(v579, v581) do
                            let v583 : int32 = v581.l0
                            let struct (v584 : string, v585 : string) = v566.[int v583]
                            let v586 : string = $"$env:{v584}=''{v585}''"
                            v580.[int v583] <- v586
                            let v587 : int32 = v583 + 1
                            v581.l0 <- v587
                            ()
                        let v589 : string seq = v580 |> Seq.ofArray
                        let v593 : (string -> (string seq -> string)) = String.concat
                        let v594 : string = ";"
                        let v595 : (string seq -> string) = v593 v594
                        let v596 : string = v595 v589
                        let v599 : string = $"pwsh -c '{v596}; {v562}'"
                        let v600 : bool = v577 = 0
                        let struct (v677 : US5, v678 : US5, v679 : US5, v680 : US5) =
                            if v600 then
                                let v601 : (string -> US5) = closure71()
                                let v602 : (unit -> string) = closure72(v578)
                                let v603 : (exn -> US5) = closure73(v98, v578, v599)
                                let v605 : US5 = US5_1
                                let result = ref v605
                                try
                                    result.Value <- v602 () |> v601 
                                with ex ->
                                    result.Value <- v603 ex 
                                let v606 : US5 = result.Value
                                let v617 : string option =
                                    match v606 with
                                    | US5_1 -> (* None *)
                                        let v615 : string option = None
                                        v615
                                    | US5_0(v610) -> (* Some *)
                                        let v612 : string option = Some v610 
                                        v612
                                let v618 : string = "$0.unwrap()"
                                let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
                                let v620 : US5 = US5_0(v264)
                                let v621 : US5 = US5_0(v258)
                                let v622 : US5 = US5_0(v98)
                                let v623 : US5 = US5_0(v619)
                                struct (v620, v621, v622, v623)
                            else
                                let v624 : unit = ()
                                let v625 : (unit -> unit) = closure75(v98, v578, v577, v599)
                                let v626 : unit = (fun () -> v625 (); v624) ()
                                let v673 : US5 = US5_0(v264)
                                let v674 : US5 = US5_1
                                let v675 : US5 = US5_1
                                let v676 : US5 = US5_1
                                struct (v673, v674, v675, v676)
                        struct (v677, v678, v679, v680)
                let v687 : string =
                    match v681 with
                    | US5_1 -> (* None *)
                        v334
                    | US5_0(v685) -> (* Some *)
                        v685
                let v688 : string = "extension"
                let v691 : string =
                    match v682 with
                    | US5_1 -> (* None *)
                        v334
                    | US5_0(v689) -> (* Some *)
                        v689
                let v692 : string = "code"
                let v695 : string =
                    match v684 with
                    | US5_1 -> (* None *)
                        v334
                    | US5_0(v693) -> (* Some *)
                        v693
                let v696 : string = "output"
                let v697 : (struct (string * string) []) = [|struct (v688, v687); struct (v692, v691); struct (v696, v695)|]
                let v698 : string = "$0.to_vec()"
                let v699 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v697 v698 
                let v700 : unit = ()
                let v701 : string = $"true; let _func1_from_v700 = Func1::from(move |value| {{ //"
                let v702 : bool = Fable.Core.RustInterop.emitRustExpr () v701 
                let v703 : string = $"value"
                let struct (v704 : string, v705 : string) = Fable.Core.RustInterop.emitRustExpr () v703 
                (* run_target_args'
                let v710 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v711 : string = "&*$0"
                let v712 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v704 v711 
                let _run_target_args'_v710 = v712 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v713 : string = "&*$0"
                let v714 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v704 v713 
                let _run_target_args'_v710 = v714 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v715 : string = "&*$0"
                let v716 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v704 v715 
                let _run_target_args'_v710 = v716 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v718 : Ref<Str> = v704 |> unbox<Ref<Str>>
                let _run_target_args'_v710 = v718 
                #endif
#if FABLE_COMPILER_PYTHON
                let v722 : Ref<Str> = v704 |> unbox<Ref<Str>>
                let _run_target_args'_v710 = v722 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v726 : Ref<Str> = v704 |> unbox<Ref<Str>>
                let _run_target_args'_v710 = v726 
                #endif
#else
                let v730 : Ref<Str> = v704 |> unbox<Ref<Str>>
                let _run_target_args'_v710 = v730 
                #endif
                let v733 : Ref<Str> = _run_target_args'_v710 
                (* run_target_args'
                let v743 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v744 : string = "String::from($0)"
                let v745 : std_string_String = Fable.Core.RustInterop.emitRustExpr v733 v744 
                let _run_target_args'_v743 = v745 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v746 : string = "String::from($0)"
                let v747 : std_string_String = Fable.Core.RustInterop.emitRustExpr v733 v746 
                let _run_target_args'_v743 = v747 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v748 : string = "String::from($0)"
                let v749 : std_string_String = Fable.Core.RustInterop.emitRustExpr v733 v748 
                let _run_target_args'_v743 = v749 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v751 : std_string_String = v733 |> unbox<std_string_String>
                let _run_target_args'_v743 = v751 
                #endif
#if FABLE_COMPILER_PYTHON
                let v755 : std_string_String = v733 |> unbox<std_string_String>
                let _run_target_args'_v743 = v755 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v759 : std_string_String = v733 |> unbox<std_string_String>
                let _run_target_args'_v743 = v759 
                #endif
#else
                let v763 : std_string_String = v733 |> unbox<std_string_String>
                let _run_target_args'_v743 = v763 
                #endif
                let v766 : std_string_String = _run_target_args'_v743 
                (* run_target_args'
                let v776 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v777 : string = "&*$0"
                let v778 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v705 v777 
                let _run_target_args'_v776 = v778 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v779 : string = "&*$0"
                let v780 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v705 v779 
                let _run_target_args'_v776 = v780 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v781 : string = "&*$0"
                let v782 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v705 v781 
                let _run_target_args'_v776 = v782 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v784 : Ref<Str> = v705 |> unbox<Ref<Str>>
                let _run_target_args'_v776 = v784 
                #endif
#if FABLE_COMPILER_PYTHON
                let v788 : Ref<Str> = v705 |> unbox<Ref<Str>>
                let _run_target_args'_v776 = v788 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v792 : Ref<Str> = v705 |> unbox<Ref<Str>>
                let _run_target_args'_v776 = v792 
                #endif
#else
                let v796 : Ref<Str> = v705 |> unbox<Ref<Str>>
                let _run_target_args'_v776 = v796 
                #endif
                let v799 : Ref<Str> = _run_target_args'_v776 
                (* run_target_args'
                let v809 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v810 : string = "String::from($0)"
                let v811 : std_string_String = Fable.Core.RustInterop.emitRustExpr v799 v810 
                let _run_target_args'_v809 = v811 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v812 : string = "String::from($0)"
                let v813 : std_string_String = Fable.Core.RustInterop.emitRustExpr v799 v812 
                let _run_target_args'_v809 = v813 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v814 : string = "String::from($0)"
                let v815 : std_string_String = Fable.Core.RustInterop.emitRustExpr v799 v814 
                let _run_target_args'_v809 = v815 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v817 : std_string_String = v799 |> unbox<std_string_String>
                let _run_target_args'_v809 = v817 
                #endif
#if FABLE_COMPILER_PYTHON
                let v821 : std_string_String = v799 |> unbox<std_string_String>
                let _run_target_args'_v809 = v821 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v825 : std_string_String = v799 |> unbox<std_string_String>
                let _run_target_args'_v809 = v825 
                #endif
#else
                let v829 : std_string_String = v799 |> unbox<std_string_String>
                let _run_target_args'_v809 = v829 
                #endif
                let v832 : std_string_String = _run_target_args'_v809 
                let v839 : (std_string_String * std_string_String) = v766, v832 
                let func1_from_result = v839 //
                let v842 : _ = func1_from_result
                let v843 : string = $"true; $0 /*"
                let v844 : bool = Fable.Core.RustInterop.emitRustExpr v842 v843 
                let v845 : string = $"*/ }}); //"
                let v846 : bool = Fable.Core.RustInterop.emitRustExpr () v845 
                let v847 : string = $"_func1_from_v700"
                let v848 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v847 
                let v849 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v850 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v848)
                let v851 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v699, v850) v849 
                let v852 : string = "std::collections::BTreeMap::from_iter(v851.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v853 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v852 
                let v854 : string = "serde_json::to_string(&v853)"
                let v855 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v854 
                (* run_target_args'
                let v857 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v858 : string = "$0.unwrap()"
                let v859 : std_string_String = Fable.Core.RustInterop.emitRustExpr v855 v858 
                let _run_target_args'_v857 = v859 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v860 : string = "$0.unwrap()"
                let v861 : std_string_String = Fable.Core.RustInterop.emitRustExpr v855 v860 
                let _run_target_args'_v857 = v861 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v862 : string = "$0.unwrap()"
                let v863 : std_string_String = Fable.Core.RustInterop.emitRustExpr v855 v862 
                let _run_target_args'_v857 = v863 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v864 : std_string_String = match v855 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v857 = v864 
                #endif
#if FABLE_COMPILER_PYTHON
                let v865 : std_string_String = match v855 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v857 = v865 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v866 : std_string_String = match v855 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v857 = v866 
                #endif
#else
                let v867 : std_string_String = match v855 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v857 = v867 
                #endif
                let v868 : std_string_String = _run_target_args'_v857 
                let v871 : string = "fable_library_rust::String_::fromString($0)"
                let v872 : string = Fable.Core.RustInterop.emitRustExpr v868 v871 
                let v873 : string = "command_result"
                [|struct (v873, v872)|]
            else
                let v875 : string = "fable_library_rust::String_::fromString($0)"
                let v876 : string = Fable.Core.RustInterop.emitRustExpr v32 v875 
                let v877 : bool = v876 = "cuda"
                if v877 then
                    let v878 : string = method177()
                    (* run_target_args'
                    let v883 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v884 : string = "&*$0"
                    let v885 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v878 v884 
                    let _run_target_args'_v883 = v885 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v886 : string = "&*$0"
                    let v887 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v878 v886 
                    let _run_target_args'_v883 = v887 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v888 : string = "&*$0"
                    let v889 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v878 v888 
                    let _run_target_args'_v883 = v889 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v891 : Ref<Str> = v878 |> unbox<Ref<Str>>
                    let _run_target_args'_v883 = v891 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v895 : Ref<Str> = v878 |> unbox<Ref<Str>>
                    let _run_target_args'_v883 = v895 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v899 : Ref<Str> = v878 |> unbox<Ref<Str>>
                    let _run_target_args'_v883 = v899 
                    #endif
#else
                    let v903 : Ref<Str> = v878 |> unbox<Ref<Str>>
                    let _run_target_args'_v883 = v903 
                    #endif
                    let v906 : Ref<Str> = _run_target_args'_v883 
                    let v912 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v913 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v906) v912 
                    let v915 : (std_string_String -> US7) = method23()
                    let v916 : US7 option = v913 |> Option.map v915 
                    let v929 : US7 = US7_1
                    let v930 : US7 = v916 |> Option.defaultValue v929 
                    let v937 : std_string_String =
                        match v930 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v934) -> (* Some *)
                            v934
                    let v938 : string = "fable_library_rust::String_::fromString($0)"
                    let v939 : string = Fable.Core.RustInterop.emitRustExpr v937 v938 
                    let v940 : string = method178()
                    (* run_target_args'
                    let v945 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v946 : string = "&*$0"
                    let v947 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v940 v946 
                    let _run_target_args'_v945 = v947 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v948 : string = "&*$0"
                    let v949 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v940 v948 
                    let _run_target_args'_v945 = v949 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v950 : string = "&*$0"
                    let v951 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v940 v950 
                    let _run_target_args'_v945 = v951 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v953 : Ref<Str> = v940 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v953 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v957 : Ref<Str> = v940 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v957 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v961 : Ref<Str> = v940 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v961 
                    #endif
#else
                    let v965 : Ref<Str> = v940 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v965 
                    #endif
                    let v968 : Ref<Str> = _run_target_args'_v945 
                    let v974 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v975 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v968) v974 
                    let v977 : (std_string_String -> US7) = method23()
                    let v978 : US7 option = v975 |> Option.map v977 
                    let v991 : US7 = US7_1
                    let v992 : US7 = v978 |> Option.defaultValue v991 
                    let v1021 : US33 =
                        match v992 with
                        | US7_1 -> (* None *)
                            US33_1
                        | US7_0(v996) -> (* Some *)
                            let v997 : string = "fable_library_rust::String_::fromString($0)"
                            let v998 : string = Fable.Core.RustInterop.emitRustExpr v996 v997 
                            
                            
                            let v999 : bool = "Pip" = v998
                            let v1003 : US34 =
                                if v999 then
                                    let v1000 : US35 = US35_0
                                    US34_0(v1000)
                                else
                                    US34_1
                            let v1017 : US34 =
                                match v1003 with
                                | US34_1 -> (* None *)
                                    let v1006 : bool = "Poetry" = v998
                                    let v1010 : US34 =
                                        if v1006 then
                                            let v1007 : US35 = US35_1
                                            US34_0(v1007)
                                        else
                                            US34_1
                                    match v1010 with
                                    | US34_1 -> (* None *)
                                        US34_1
                                    | US34_0(v1011) -> (* Some *)
                                        US34_0(v1011)
                                | US34_0(v1004) -> (* Some *)
                                    US34_0(v1004)
                            US33_0(v1017)
                    let v1028 : US34 =
                        match v1021 with
                        | US33_0(v1022) -> (* Some *)
                            match v1022 with
                            | US34_0(v1023) -> (* Some *)
                                US34_0(v1023)
                            | _ ->
                                US34_1
                        | _ ->
                            US34_1
                    let v1032 : US35 =
                        match v1028 with
                        | US34_1 -> (* None *)
                            US35_0
                        | US34_0(v1029) -> (* Some *)
                            v1029
                    let v1033 : string = method24()
                    (* run_target_args'
                    let v1038 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1039 : string = "&*$0"
                    let v1040 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1033 v1039 
                    let _run_target_args'_v1038 = v1040 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1041 : string = "&*$0"
                    let v1042 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1033 v1041 
                    let _run_target_args'_v1038 = v1042 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1043 : string = "&*$0"
                    let v1044 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1033 v1043 
                    let _run_target_args'_v1038 = v1044 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1046 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                    let _run_target_args'_v1038 = v1046 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1050 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                    let _run_target_args'_v1038 = v1050 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1054 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                    let _run_target_args'_v1038 = v1054 
                    #endif
#else
                    let v1058 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                    let _run_target_args'_v1038 = v1058 
                    #endif
                    let v1061 : Ref<Str> = _run_target_args'_v1038 
                    let v1067 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v1068 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v33, v1061) v1067 
                    let v1070 : (Vec<std_string_String> -> US8) = method25()
                    let v1071 : US8 option = v1068 |> Option.map v1070 
                    let v1084 : US8 = US8_1
                    let v1085 : US8 = v1071 |> Option.defaultValue v1084 
                    let v1089 : (std_string_String []) = [||]
                    let v1090 : string = "$0.to_vec()"
                    let v1091 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1089 v1090 
                    let v1094 : Vec<std_string_String> =
                        match v1085 with
                        | US8_1 -> (* None *)
                            v1091
                        | US8_0(v1092) -> (* Some *)
                            v1092
                    (* run_target_args'
                    let v1099 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v1104 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1105 : string = "std::fs::read(&*$0)"
                    let v1106 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v939 v1105 
                    (* run_target_args'
                    let v1108 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1109 : string = "$0.unwrap()"
                    let v1110 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1106 v1109 
                    let _run_target_args'_v1108 = v1110 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1111 : string = "$0.unwrap()"
                    let v1112 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1106 v1111 
                    let _run_target_args'_v1108 = v1112 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1113 : string = "$0.unwrap()"
                    let v1114 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1106 v1113 
                    let _run_target_args'_v1108 = v1114 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1115 : Vec<uint8> = match v1106 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1108 = v1115 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1116 : Vec<uint8> = match v1106 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1108 = v1116 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1117 : Vec<uint8> = match v1106 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1108 = v1117 
                    #endif
#else
                    let v1118 : Vec<uint8> = match v1106 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1108 = v1118 
                    #endif
                    let v1119 : Vec<uint8> = _run_target_args'_v1108 
                    let _run_target_args'_v1104 = v1119 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1123 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1104 = v1123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1127 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1104 = v1127 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1131 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1104 = v1131 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1135 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1104 = v1135 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1139 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1104 = v1139 
                    #endif
#else
                    let v1142 : (uint8 []) = v939 |> System.IO.File.ReadAllBytes
                    let v1143 : string = "$0.to_vec()"
                    let v1144 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1142 v1143 
                    let _run_target_args'_v1104 = v1144 
                    #endif
                    let v1145 : Vec<uint8> = _run_target_args'_v1104 
                    let v1151 : Vec<uint8> = method26(v1145)
                    let v1152 : string = "std::string::String::from_utf8($0)"
                    let v1153 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1151 v1152 
                    (* run_target_args'
                    let v1155 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1156 : string = "$0.unwrap()"
                    let v1157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1153 v1156 
                    let _run_target_args'_v1155 = v1157 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1158 : string = "$0.unwrap()"
                    let v1159 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1153 v1158 
                    let _run_target_args'_v1155 = v1159 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1160 : string = "$0.unwrap()"
                    let v1161 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1153 v1160 
                    let _run_target_args'_v1155 = v1161 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1162 : std_string_String = match v1153 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1155 = v1162 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1163 : std_string_String = match v1153 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1155 = v1163 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1164 : std_string_String = match v1153 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1155 = v1164 
                    #endif
#else
                    let v1165 : std_string_String = match v1153 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1155 = v1165 
                    #endif
                    let v1166 : std_string_String = _run_target_args'_v1155 
                    let v1169 : string = "fable_library_rust::String_::fromString($0)"
                    let v1170 : string = Fable.Core.RustInterop.emitRustExpr v1166 v1169 
                    let _run_target_args'_v1099 = v1170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1172 : string = null |> unbox<string>
                    let _run_target_args'_v1099 = v1172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1176 : string = null |> unbox<string>
                    let _run_target_args'_v1099 = v1176 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1180 : string = null |> unbox<string>
                    let _run_target_args'_v1099 = v1180 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1184 : string = null |> unbox<string>
                    let _run_target_args'_v1099 = v1184 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1188 : string = null |> unbox<string>
                    let _run_target_args'_v1099 = v1188 
                    #endif
#else
                    let v1191 : string = v939 |> System.IO.File.ReadAllText
                    let _run_target_args'_v1099 = v1191 
                    #endif
                    let v1192 : string = _run_target_args'_v1099 
                    let v1198 : string = method33()
                    let v1199 : US5 = method34(v1198)
                    let v1205 : US5 =
                        match v1199 with
                        | US5_1 -> (* None *)
                            let v1202 : string = __SOURCE_DIRECTORY__
                            method34(v1202)
                        | US5_0(v1200) -> (* Some *)
                            US5_0(v1200)
                    let v1211 : US5 =
                        match v1205 with
                        | US5_1 -> (* None *)
                            let v1208 : string = "/workspaces"
                            method34(v1208)
                        | US5_0(v1206) -> (* Some *)
                            US5_0(v1206)
                    let v1215 : string =
                        match v1211 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v1212) -> (* Some *)
                            v1212
                    let v1216 : string = method54(v1215)
                    let v1217 : bool = "deps" = v1216
                    let v1228 : string =
                        if v1217 then
                            let v1218 : string option = method40(v1215)
                            let v1220 : string = v1218 |> Option.get
                            let v1223 : US5 = method34(v1220)
                            match v1223 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v1224) -> (* Some *)
                                v1224
                        else
                            v1215
                    let v1229 : string = "polyglot"
                    let v1230 : string = method35(v1228, v1229)
                    let v1231 : string = method33()
                    let v1233 : (unit -> string) = v1231.ToLower
                    let v1234 : string = v1233 ()
                    let v1238 : (unit -> string) = v1230.ToLower
                    let v1239 : string = v1238 ()
                    let v1243 : bool = v1234.StartsWith (v1239, false, null)
                    let v1248 : US10 =
                        if v1243 then
                            US10_1(v1239)
                        else
                            US10_0(v1239)
                    let v1254 : Result<string, string> =
                        match v1248 with
                        | US10_1(v1251) -> (* Error *)
                            let v1252 : Result<string, string> = Error v1251 
                            v1252
                        | US10_0(v1249) -> (* Ok *)
                            let v1250 : Result<string, string> = Ok v1249 
                            v1250
                    let v1255 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v1256 : bool = Fable.Core.RustInterop.emitRustExpr v1254 v1255 
                    let v1257 : string = "x"
                    let v1258 : string = Fable.Core.RustInterop.emitRustExpr () v1257 
                    let v1259 : string = "true; $0 })"
                    let v1260 : bool = Fable.Core.RustInterop.emitRustExpr v1258 v1259 
                    let v1261 : string = "_result_unwrap_or_else"
                    let v1262 : string = Fable.Core.RustInterop.emitRustExpr () v1261 
                    let v1263 : string option = method40(v939)
                    let v1265 : string = ""
                    let v1266 : string = v1263 |> Option.defaultValue v1265 
                    let v1274 : string =
                        match v1032 with
                        | US35_0 -> (* Pip *)
                            let v1269 : string = "requirements.txt"
                            method35(v1266, v1269)
                        | US35_1 -> (* Poetry *)
                            let v1271 : string = "pyproject.toml"
                            method35(v1266, v1271)
                    let v1275 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v1276 : bool = Fable.Core.RustInterop.emitRustExpr v1094 v1275 
                    let v1277 : string = "x"
                    let v1278 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1277 
                    let v1279 : string = "fable_library_rust::String_::fromString($0)"
                    let v1280 : string = Fable.Core.RustInterop.emitRustExpr v1278 v1279 
                    let v1282 : string = "="
                    let v1283 : bool = v1280.Contains v1282 
                    let v1297 : string =
                        if v1283 then
                            v1280
                        else
                            let v1287 : string = "]"
                            let v1288 : bool = v1280.EndsWith (v1287, false, null)
                            if v1288 then
                                let v1291 : string = $"={{version='*',features=["
                                let v1292 : string = "["
                                let v1293 : string = v1280.Replace (v1292, v1291)
                                let v1294 : string = $"{v1293}}}"
                                v1294
                            else
                                let v1295 : string = $"{v1280}='*'"
                                v1295
                    let v1298 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v1299 : bool = Fable.Core.RustInterop.emitRustExpr v1297 v1298 
                    let v1300 : string = "_vec_map"
                    let v1301 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1300 
                    let v1302 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v1303 : (string []) = Fable.Core.RustInterop.emitRustExpr v1301 v1302 
                    let v1307 : unit = ()
                    let _let'_v1307 =
                        seq {
                            for i = 0 to v1303.Length - 1 do yield v1303.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v1310 : string seq = _let'_v1307 
                    let v1317 : string = method70()
                    let v1318 : (string -> (string seq -> string)) = String.concat
                    let v1319 : (string seq -> string) = v1318 v1317
                    let v1320 : string = v1319 v1310
                    let v1324 : bool = v1320 = ""
                    let struct (v1381 : int32, v1382 : string) =
                        if v1324 then
                            struct (0, v1265)
                        else
                            let v1364 : string =
                                match v1032 with
                                | US35_0 -> (* Pip *)
                                    v1320
                                | US35_1 -> (* Poetry *)
                                    let v1325 : string = $"[tool.poetry]"
                                    let v1326 : string = $"name = \"test\""
                                    let v1327 : string = "\n"
                                    let v1328 : string = v1325 + v1327 
                                    let v1329 : string = v1328 + v1326 
                                    let v1330 : string = $"version = \"0.0.1\""
                                    let v1331 : string = v1329 + v1327 
                                    let v1332 : string = v1331 + v1330 
                                    let v1333 : string = $"description = \"\""
                                    let v1334 : string = v1332 + v1327 
                                    let v1335 : string = v1334 + v1333 
                                    let v1336 : string = $"authors = []"
                                    let v1337 : string = v1335 + v1327 
                                    let v1338 : string = v1337 + v1336 
                                    let v1339 : string = $""
                                    let v1340 : string = v1338 + v1327 
                                    let v1341 : string = v1340 + v1339 
                                    let v1342 : string = $"[tool.poetry.dependencies]"
                                    let v1343 : string = v1341 + v1327 
                                    let v1344 : string = v1343 + v1342 
                                    let v1345 : string = $"python=\"~3.12\""
                                    let v1346 : string = v1344 + v1327 
                                    let v1347 : string = v1346 + v1345 
                                    let v1348 : string = $"{v1320}"
                                    let v1349 : string = v1347 + v1327 
                                    let v1350 : string = v1349 + v1348 
                                    let v1351 : string = $""
                                    let v1352 : string = v1350 + v1327 
                                    let v1353 : string = v1352 + v1351 
                                    let v1354 : string = $"[build-system]"
                                    let v1355 : string = v1353 + v1327 
                                    let v1356 : string = v1355 + v1354 
                                    let v1357 : string = $"requires = [\"poetry-core\"]"
                                    let v1358 : string = v1356 + v1327 
                                    let v1359 : string = v1358 + v1357 
                                    let v1360 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v1361 : string = v1359 + v1327 
                                    let v1362 : string = v1361 + v1360 
                                    v1362
                            method71(v1274, v1364)
                            let v1365 : System.Threading.CancellationToken option = None
                            let v1366 : (struct (string * string) []) = [||]
                            let v1367 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v1368 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v1369 : string option = None
                            let v1373 : string =
                                match v1032 with
                                | US35_0 -> (* Pip *)
                                    let v1370 : string = $"pip install -r requirements.txt"
                                    v1370
                                | US35_1 -> (* Poetry *)
                                    let v1371 : string = $"poetry install"
                                    v1371
                            let v1375 : string option = Some v1266 
                            let v1378 : bool = true
                            method96(v1373, v1365, v1366, v1367, v1368, v1378, v1375)
                    let v1384 : bool = v1381 <> 0 
                    let struct (v1570 : US5, v1571 : US5, v1572 : US5, v1573 : US5) =
                        if v1384 then
                            let v1387 : unit = ()
                            let v1388 : (unit -> unit) = closure77(v1032, v939, v1382, v1381)
                            let v1389 : unit = (fun () -> v1388 (); v1387) ()
                            let v1436 : string = "py"
                            let v1437 : US5 = US5_0(v1436)
                            let v1438 : US5 = US5_1
                            let v1439 : US5 = US5_1
                            let v1440 : US5 = US5_1
                            struct (v1437, v1438, v1439, v1440)
                        else
                            let v1444 : string =
                                match v1032 with
                                | US35_0 -> (* Pip *)
                                    let v1441 : string = $"python \"{v939}\""
                                    v1441
                                | US35_1 -> (* Poetry *)
                                    let v1442 : string = $"poetry run python \"{v939}\""
                                    v1442
                            let v1445 : string = "TRACE_LEVEL"
                            let v1446 : string = "Verbose"
                            let v1447 : (struct (string * string) []) = [|struct (v1445, v1446)|]
                            let v1448 : System.Threading.CancellationToken option = None
                            let v1449 : (struct (string * string) []) = [||]
                            let v1450 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v1451 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v1452 : string option = None
                            let v1454 : string option = Some v1266 
                            let v1457 : bool = true
                            let struct (v1458 : int32, v1459 : string) = method96(v1444, v1448, v1447, v1450, v1451, v1457, v1454)
                            let v1460 : int32 = v1447.Length
                            let v1461 : (string []) = Array.zeroCreate<string> (v1460)
                            let v1462 : Mut5 = {l0 = 0} : Mut5
                            while method31(v1460, v1462) do
                                let v1464 : int32 = v1462.l0
                                let struct (v1465 : string, v1466 : string) = v1447.[int v1464]
                                let v1467 : string = $"$env:{v1465}=''{v1466}''"
                                v1461.[int v1464] <- v1467
                                let v1468 : int32 = v1464 + 1
                                v1462.l0 <- v1468
                                ()
                            let v1470 : string seq = v1461 |> Seq.ofArray
                            let v1474 : (string -> (string seq -> string)) = String.concat
                            let v1475 : string = ";"
                            let v1476 : (string seq -> string) = v1474 v1475
                            let v1477 : string = v1476 v1470
                            let v1480 : string = $"pwsh -c '{v1477}; {v1444}'"
                            let v1481 : bool = v1458 = 0
                            let v1487 : bool =
                                if v1481 then
                                    true
                                else
                                    let v1483 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v1484 : bool = v1459.Contains v1483 
                                    v1484
                            let struct (v1566 : US5, v1567 : US5, v1568 : US5, v1569 : US5) =
                                if v1487 then
                                    let v1488 : (string -> US5) = closure71()
                                    let v1489 : (unit -> string) = closure78(v1459)
                                    let v1490 : (exn -> US5) = closure79(v939, v1459, v1480)
                                    let v1492 : US5 = US5_1
                                    let result = ref v1492
                                    try
                                        result.Value <- v1489 () |> v1488 
                                    with ex ->
                                        result.Value <- v1490 ex 
                                    let v1493 : US5 = result.Value
                                    let v1504 : string option =
                                        match v1493 with
                                        | US5_1 -> (* None *)
                                            let v1502 : string option = None
                                            v1502
                                        | US5_0(v1497) -> (* Some *)
                                            let v1499 : string option = Some v1497 
                                            v1499
                                    let v1505 : string = "$0.unwrap()"
                                    let v1506 : string = Fable.Core.RustInterop.emitRustExpr v1504 v1505 
                                    let v1507 : string = "py"
                                    let v1508 : US5 = US5_0(v1507)
                                    let v1509 : US5 = US5_0(v1192)
                                    let v1510 : US5 = US5_0(v939)
                                    let v1511 : US5 = US5_0(v1506)
                                    struct (v1508, v1509, v1510, v1511)
                                else
                                    let v1512 : unit = ()
                                    let v1513 : (unit -> unit) = closure81(v939, v1459, v1458, v1480)
                                    let v1514 : unit = (fun () -> v1513 (); v1512) ()
                                    let v1561 : string = "py"
                                    let v1562 : US5 = US5_0(v1561)
                                    let v1563 : US5 = US5_1
                                    let v1564 : US5 = US5_1
                                    let v1565 : US5 = US5_1
                                    struct (v1562, v1563, v1564, v1565)
                            struct (v1566, v1567, v1568, v1569)
                    let v1576 : string =
                        match v1570 with
                        | US5_1 -> (* None *)
                            v1265
                        | US5_0(v1574) -> (* Some *)
                            v1574
                    let v1577 : string = "extension"
                    let v1580 : string =
                        match v1571 with
                        | US5_1 -> (* None *)
                            v1265
                        | US5_0(v1578) -> (* Some *)
                            v1578
                    let v1581 : string = "code"
                    let v1584 : string =
                        match v1573 with
                        | US5_1 -> (* None *)
                            v1265
                        | US5_0(v1582) -> (* Some *)
                            v1582
                    let v1585 : string = "output"
                    let v1586 : (struct (string * string) []) = [|struct (v1577, v1576); struct (v1581, v1580); struct (v1585, v1584)|]
                    let v1587 : string = "$0.to_vec()"
                    let v1588 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v1586 v1587 
                    let v1589 : unit = ()
                    let v1590 : string = $"true; let _func1_from_v1589 = Func1::from(move |value| {{ //"
                    let v1591 : bool = Fable.Core.RustInterop.emitRustExpr () v1590 
                    let v1592 : string = $"value"
                    let struct (v1593 : string, v1594 : string) = Fable.Core.RustInterop.emitRustExpr () v1592 
                    (* run_target_args'
                    let v1599 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1600 : string = "&*$0"
                    let v1601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1593 v1600 
                    let _run_target_args'_v1599 = v1601 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1602 : string = "&*$0"
                    let v1603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1593 v1602 
                    let _run_target_args'_v1599 = v1603 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1604 : string = "&*$0"
                    let v1605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1593 v1604 
                    let _run_target_args'_v1599 = v1605 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1607 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                    let _run_target_args'_v1599 = v1607 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1611 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                    let _run_target_args'_v1599 = v1611 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1615 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                    let _run_target_args'_v1599 = v1615 
                    #endif
#else
                    let v1619 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                    let _run_target_args'_v1599 = v1619 
                    #endif
                    let v1622 : Ref<Str> = _run_target_args'_v1599 
                    (* run_target_args'
                    let v1632 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1633 : string = "String::from($0)"
                    let v1634 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1622 v1633 
                    let _run_target_args'_v1632 = v1634 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1635 : string = "String::from($0)"
                    let v1636 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1622 v1635 
                    let _run_target_args'_v1632 = v1636 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1637 : string = "String::from($0)"
                    let v1638 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1622 v1637 
                    let _run_target_args'_v1632 = v1638 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1640 : std_string_String = v1622 |> unbox<std_string_String>
                    let _run_target_args'_v1632 = v1640 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1644 : std_string_String = v1622 |> unbox<std_string_String>
                    let _run_target_args'_v1632 = v1644 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1648 : std_string_String = v1622 |> unbox<std_string_String>
                    let _run_target_args'_v1632 = v1648 
                    #endif
#else
                    let v1652 : std_string_String = v1622 |> unbox<std_string_String>
                    let _run_target_args'_v1632 = v1652 
                    #endif
                    let v1655 : std_string_String = _run_target_args'_v1632 
                    (* run_target_args'
                    let v1665 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1666 : string = "&*$0"
                    let v1667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1594 v1666 
                    let _run_target_args'_v1665 = v1667 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1668 : string = "&*$0"
                    let v1669 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1594 v1668 
                    let _run_target_args'_v1665 = v1669 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1670 : string = "&*$0"
                    let v1671 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1594 v1670 
                    let _run_target_args'_v1665 = v1671 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1673 : Ref<Str> = v1594 |> unbox<Ref<Str>>
                    let _run_target_args'_v1665 = v1673 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1677 : Ref<Str> = v1594 |> unbox<Ref<Str>>
                    let _run_target_args'_v1665 = v1677 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1681 : Ref<Str> = v1594 |> unbox<Ref<Str>>
                    let _run_target_args'_v1665 = v1681 
                    #endif
#else
                    let v1685 : Ref<Str> = v1594 |> unbox<Ref<Str>>
                    let _run_target_args'_v1665 = v1685 
                    #endif
                    let v1688 : Ref<Str> = _run_target_args'_v1665 
                    (* run_target_args'
                    let v1698 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1699 : string = "String::from($0)"
                    let v1700 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1688 v1699 
                    let _run_target_args'_v1698 = v1700 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1701 : string = "String::from($0)"
                    let v1702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1688 v1701 
                    let _run_target_args'_v1698 = v1702 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1703 : string = "String::from($0)"
                    let v1704 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1688 v1703 
                    let _run_target_args'_v1698 = v1704 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1706 : std_string_String = v1688 |> unbox<std_string_String>
                    let _run_target_args'_v1698 = v1706 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1710 : std_string_String = v1688 |> unbox<std_string_String>
                    let _run_target_args'_v1698 = v1710 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1714 : std_string_String = v1688 |> unbox<std_string_String>
                    let _run_target_args'_v1698 = v1714 
                    #endif
#else
                    let v1718 : std_string_String = v1688 |> unbox<std_string_String>
                    let _run_target_args'_v1698 = v1718 
                    #endif
                    let v1721 : std_string_String = _run_target_args'_v1698 
                    let v1728 : (std_string_String * std_string_String) = v1655, v1721 
                    let func1_from_result = v1728 //
                    let v1731 : _ = func1_from_result
                    let v1732 : string = $"true; $0 /*"
                    let v1733 : bool = Fable.Core.RustInterop.emitRustExpr v1731 v1732 
                    let v1734 : string = $"*/ }}); //"
                    let v1735 : bool = Fable.Core.RustInterop.emitRustExpr () v1734 
                    let v1736 : string = $"_func1_from_v1589"
                    let v1737 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v1736 
                    let v1738 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v1739 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v1737)
                    let v1740 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v1588, v1739) v1738 
                    let v1741 : string = "std::collections::BTreeMap::from_iter(v1740.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v1742 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1741 
                    let v1743 : string = "serde_json::to_string(&v1742)"
                    let v1744 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v1743 
                    (* run_target_args'
                    let v1746 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1747 : string = "$0.unwrap()"
                    let v1748 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1744 v1747 
                    let _run_target_args'_v1746 = v1748 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1749 : string = "$0.unwrap()"
                    let v1750 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1744 v1749 
                    let _run_target_args'_v1746 = v1750 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1751 : string = "$0.unwrap()"
                    let v1752 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1744 v1751 
                    let _run_target_args'_v1746 = v1752 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1753 : std_string_String = match v1744 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1746 = v1753 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1754 : std_string_String = match v1744 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1746 = v1754 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1755 : std_string_String = match v1744 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1746 = v1755 
                    #endif
#else
                    let v1756 : std_string_String = match v1744 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1746 = v1756 
                    #endif
                    let v1757 : std_string_String = _run_target_args'_v1746 
                    let v1760 : string = "fable_library_rust::String_::fromString($0)"
                    let v1761 : string = Fable.Core.RustInterop.emitRustExpr v1757 v1760 
                    let v1762 : string = "command_result"
                    [|struct (v1762, v1761)|]
                else
                    let v1764 : string = "fable_library_rust::String_::fromString($0)"
                    let v1765 : string = Fable.Core.RustInterop.emitRustExpr v32 v1764 
                    let v1766 : bool = v1765 = "fable"
                    if v1766 then
                        let v1767 : string = method183()
                        (* run_target_args'
                        let v1772 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1773 : string = "&*$0"
                        let v1774 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1767 v1773 
                        let _run_target_args'_v1772 = v1774 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1775 : string = "&*$0"
                        let v1776 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1767 v1775 
                        let _run_target_args'_v1772 = v1776 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1777 : string = "&*$0"
                        let v1778 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1767 v1777 
                        let _run_target_args'_v1772 = v1778 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1780 : Ref<Str> = v1767 |> unbox<Ref<Str>>
                        let _run_target_args'_v1772 = v1780 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1784 : Ref<Str> = v1767 |> unbox<Ref<Str>>
                        let _run_target_args'_v1772 = v1784 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1788 : Ref<Str> = v1767 |> unbox<Ref<Str>>
                        let _run_target_args'_v1772 = v1788 
                        #endif
#else
                        let v1792 : Ref<Str> = v1767 |> unbox<Ref<Str>>
                        let _run_target_args'_v1772 = v1792 
                        #endif
                        let v1795 : Ref<Str> = _run_target_args'_v1772 
                        let v1801 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1802 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v1795) v1801 
                        let v1804 : (std_string_String -> US7) = method23()
                        let v1805 : US7 option = v1802 |> Option.map v1804 
                        let v1818 : US7 = US7_1
                        let v1819 : US7 = v1805 |> Option.defaultValue v1818 
                        let v1826 : std_string_String =
                            match v1819 with
                            | US7_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US7_0(v1823) -> (* Some *)
                                v1823
                        let v1827 : string = "fable_library_rust::String_::fromString($0)"
                        let v1828 : string = Fable.Core.RustInterop.emitRustExpr v1826 v1827 
                        let v1829 : string = method184()
                        (* run_target_args'
                        let v1834 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1835 : string = "&*$0"
                        let v1836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1829 v1835 
                        let _run_target_args'_v1834 = v1836 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1837 : string = "&*$0"
                        let v1838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1829 v1837 
                        let _run_target_args'_v1834 = v1838 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1839 : string = "&*$0"
                        let v1840 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1829 v1839 
                        let _run_target_args'_v1834 = v1840 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1842 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1834 = v1842 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1846 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1834 = v1846 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1850 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1834 = v1850 
                        #endif
#else
                        let v1854 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1834 = v1854 
                        #endif
                        let v1857 : Ref<Str> = _run_target_args'_v1834 
                        let v1863 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1864 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v1857) v1863 
                        let v1866 : (std_string_String -> US7) = method23()
                        let v1867 : US7 option = v1864 |> Option.map v1866 
                        let v1880 : US7 = US7_1
                        let v1881 : US7 = v1867 |> Option.defaultValue v1880 
                        let v1891 : US5 =
                            match v1881 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v1885) -> (* Some *)
                                let v1886 : string = "fable_library_rust::String_::fromString($0)"
                                let v1887 : string = Fable.Core.RustInterop.emitRustExpr v1885 v1886 
                                US5_0(v1887)
                        let v2003 : string =
                            match v1891 with
                            | US5_1 -> (* None *)
                                let v2001 : string = "{}"
                                v2001
                            | US5_0(v1892) -> (* Some *)
                                let v1893 : clap_Command = method0()
                                let v1894 : string = $"_ {v1892} --fs-path \"{v1828}\""
                                let v1895 : US22 = method111(v1894)
                                let v1904 : (string []) =
                                    match v1895 with
                                    | US22_1(v1897) -> (* Error *)
                                        let v1899 : string = $"resultm.get / Result value was Error: {v1897}"
                                        failwith<(string [])> v1899
                                    | US22_0(v1896) -> (* Ok *)
                                        v1896
                                let v1905 : string = "$0.to_vec()"
                                let v1906 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v1904 v1905 
                                let v1907 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v1908 : bool = Fable.Core.RustInterop.emitRustExpr v1906 v1907 
                                let v1909 : string = "x"
                                let v1910 : string = Fable.Core.RustInterop.emitRustExpr () v1909 
                                (* run_target_args'
                                let v1915 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1916 : string = "&*$0"
                                let v1917 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1910 v1916 
                                let _run_target_args'_v1915 = v1917 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1918 : string = "&*$0"
                                let v1919 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1910 v1918 
                                let _run_target_args'_v1915 = v1919 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1920 : string = "&*$0"
                                let v1921 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1910 v1920 
                                let _run_target_args'_v1915 = v1921 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1923 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                                let _run_target_args'_v1915 = v1923 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1927 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                                let _run_target_args'_v1915 = v1927 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1931 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                                let _run_target_args'_v1915 = v1931 
                                #endif
#else
                                let v1935 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                                let _run_target_args'_v1915 = v1935 
                                #endif
                                let v1938 : Ref<Str> = _run_target_args'_v1915 
                                (* run_target_args'
                                let v1948 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1949 : string = "String::from($0)"
                                let v1950 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1938 v1949 
                                let _run_target_args'_v1948 = v1950 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1951 : string = "String::from($0)"
                                let v1952 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1938 v1951 
                                let _run_target_args'_v1948 = v1952 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1953 : string = "String::from($0)"
                                let v1954 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1938 v1953 
                                let _run_target_args'_v1948 = v1954 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1956 : std_string_String = v1938 |> unbox<std_string_String>
                                let _run_target_args'_v1948 = v1956 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1960 : std_string_String = v1938 |> unbox<std_string_String>
                                let _run_target_args'_v1948 = v1960 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1964 : std_string_String = v1938 |> unbox<std_string_String>
                                let _run_target_args'_v1948 = v1964 
                                #endif
#else
                                let v1968 : std_string_String = v1938 |> unbox<std_string_String>
                                let _run_target_args'_v1948 = v1968 
                                #endif
                                let v1971 : std_string_String = _run_target_args'_v1948 
                                let v1977 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v1978 : bool = Fable.Core.RustInterop.emitRustExpr v1971 v1977 
                                let v1979 : string = "_vec_map"
                                let v1980 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1979 
                                let v1981 : string = "clap::Command::get_matches_from($0, v1980)"
                                let v1982 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v1893 v1981 
                                let v1983 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v1982)
                                let v1984 : string = "v1983.await"
                                let v1985 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v1984 
                                (* run_target_args'
                                let v1987 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1988 : string = "$0.unwrap()"
                                let v1989 : string = Fable.Core.RustInterop.emitRustExpr v1985 v1988 
                                let _run_target_args'_v1987 = v1989 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1990 : string = "$0.unwrap()"
                                let v1991 : string = Fable.Core.RustInterop.emitRustExpr v1985 v1990 
                                let _run_target_args'_v1987 = v1991 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1992 : string = "$0.unwrap()"
                                let v1993 : string = Fable.Core.RustInterop.emitRustExpr v1985 v1992 
                                let _run_target_args'_v1987 = v1993 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1994 : string = match v1985 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1987 = v1994 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1995 : string = match v1985 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1987 = v1995 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1996 : string = match v1985 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1987 = v1996 
                                #endif
#else
                                let v1997 : string = match v1985 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1987 = v1997 
                                #endif
                                let v1998 : string = _run_target_args'_v1987 
                                v1998
                        let v2004 : string = "command_result"
                        [|struct (v2004, v2003)|]
                    else
                        let v2006 : string = "fable_library_rust::String_::fromString($0)"
                        let v2007 : string = Fable.Core.RustInterop.emitRustExpr v32 v2006 
                        let v2008 : bool = v2007 = "dib"
                        if v2008 then
                            let v2009 : string = method185()
                            (* run_target_args'
                            let v2014 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2015 : string = "&*$0"
                            let v2016 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2009 v2015 
                            let _run_target_args'_v2014 = v2016 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2017 : string = "&*$0"
                            let v2018 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2009 v2017 
                            let _run_target_args'_v2014 = v2018 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2019 : string = "&*$0"
                            let v2020 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2009 v2019 
                            let _run_target_args'_v2014 = v2020 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2022 : Ref<Str> = v2009 |> unbox<Ref<Str>>
                            let _run_target_args'_v2014 = v2022 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2026 : Ref<Str> = v2009 |> unbox<Ref<Str>>
                            let _run_target_args'_v2014 = v2026 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2030 : Ref<Str> = v2009 |> unbox<Ref<Str>>
                            let _run_target_args'_v2014 = v2030 
                            #endif
#else
                            let v2034 : Ref<Str> = v2009 |> unbox<Ref<Str>>
                            let _run_target_args'_v2014 = v2034 
                            #endif
                            let v2037 : Ref<Str> = _run_target_args'_v2014 
                            let v2043 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2044 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2037) v2043 
                            let v2046 : (std_string_String -> string) = method186()
                            let v2047 : string option = v2044 |> Option.map v2046 
                            let v2061 : string = "$0.unwrap()"
                            let v2062 : string = Fable.Core.RustInterop.emitRustExpr v2047 v2061 
                            let v2063 : string = method192()
                            (* run_target_args'
                            let v2068 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2069 : string = "&*$0"
                            let v2070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2063 v2069 
                            let _run_target_args'_v2068 = v2070 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2071 : string = "&*$0"
                            let v2072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2063 v2071 
                            let _run_target_args'_v2068 = v2072 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2073 : string = "&*$0"
                            let v2074 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2063 v2073 
                            let _run_target_args'_v2068 = v2074 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2076 : Ref<Str> = v2063 |> unbox<Ref<Str>>
                            let _run_target_args'_v2068 = v2076 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2080 : Ref<Str> = v2063 |> unbox<Ref<Str>>
                            let _run_target_args'_v2068 = v2080 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2084 : Ref<Str> = v2063 |> unbox<Ref<Str>>
                            let _run_target_args'_v2068 = v2084 
                            #endif
#else
                            let v2088 : Ref<Str> = v2063 |> unbox<Ref<Str>>
                            let _run_target_args'_v2068 = v2088 
                            #endif
                            let v2091 : Ref<Str> = _run_target_args'_v2068 
                            let v2097 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2098 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2091) v2097 
                            let v2100 : uint8 = v2098 |> Option.defaultValue 1uy 
                            let v2103 : string = method193()
                            (* run_target_args'
                            let v2108 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2109 : string = "&*$0"
                            let v2110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2103 v2109 
                            let _run_target_args'_v2108 = v2110 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2111 : string = "&*$0"
                            let v2112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2103 v2111 
                            let _run_target_args'_v2108 = v2112 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2113 : string = "&*$0"
                            let v2114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2103 v2113 
                            let _run_target_args'_v2108 = v2114 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2116 : Ref<Str> = v2103 |> unbox<Ref<Str>>
                            let _run_target_args'_v2108 = v2116 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2120 : Ref<Str> = v2103 |> unbox<Ref<Str>>
                            let _run_target_args'_v2108 = v2120 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2124 : Ref<Str> = v2103 |> unbox<Ref<Str>>
                            let _run_target_args'_v2108 = v2124 
                            #endif
#else
                            let v2128 : Ref<Str> = v2103 |> unbox<Ref<Str>>
                            let _run_target_args'_v2108 = v2128 
                            #endif
                            let v2131 : Ref<Str> = _run_target_args'_v2108 
                            let v2137 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2138 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2131) v2137 
                            let v2140 : (std_string_String -> US7) = method23()
                            let v2141 : US7 option = v2138 |> Option.map v2140 
                            let v2154 : US7 = US7_1
                            let v2155 : US7 = v2141 |> Option.defaultValue v2154 
                            let v2165 : US5 =
                                match v2155 with
                                | US7_1 -> (* None *)
                                    US5_1
                                | US7_0(v2159) -> (* Some *)
                                    let v2160 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2161 : string = Fable.Core.RustInterop.emitRustExpr v2159 v2160 
                                    US5_0(v2161)
                            let v2166 : uint8 = 1uy
                            let struct (v2167 : int32, v2168 : string) = method194(v2165, v2100, v2062, v2166)
                            let v2170 : bool = v2167 <> 0 
                            let struct (v2523 : int32, v2524 : string) =
                                if v2170 then
                                    struct (v2167, v2168)
                                else
                                    let v2173 : System.Threading.CancellationToken option = None
                                    let v2174 : (struct (string * string) []) = [||]
                                    let v2175 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v2176 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v2177 : string option = None
                                    let v2178 : string = $"jupyter nbconvert \"{v2062}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v2179 : bool = true
                                    let struct (v2180 : int32, v2181 : string) = method96(v2178, v2173, v2174, v2175, v2176, v2179, v2177)
                                    let v2182 : unit = ()
                                    let v2183 : (unit -> unit) = closure84(v2181, v2180)
                                    let v2184 : unit = (fun () -> v2183 (); v2182) ()
                                    let v2233 : bool = v2180 <> 0 
                                    if v2233 then
                                        let v2236 : string = $"repl_result: {v2168}

jupyter_result: {v2181}"
                                        struct (v2180, v2236)
                                    else
                                        let v2237 : string = "'"
                                        let v2238 : string = "''"
                                        let v2239 : string = v2062.Replace (v2237, v2238)
                                        let v2240 : System.Threading.CancellationToken option = None
                                        let v2241 : (struct (string * string) []) = [||]
                                        let v2242 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2243 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2244 : string option = None
                                        let v2245 : string = $"pwsh -c \"$counter = 1; $path = '{v2239}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v2246 : bool = true
                                        let struct (v2247 : int32, v2248 : string) = method96(v2245, v2240, v2241, v2242, v2243, v2246, v2244)
                                        let v2249 : unit = ()
                                        let v2250 : (unit -> unit) = closure85(v2248, v2247)
                                        let v2251 : unit = (fun () -> v2250 (); v2249) ()
                                        let v2299 : string = $"{v2062}.html"
                                        (* run_target_args'
                                        let v2304 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2309 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2310 : string = "std::fs::read(&*$0)"
                                        let v2311 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2299 v2310 
                                        (* run_target_args'
                                        let v2313 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2314 : string = "$0.unwrap()"
                                        let v2315 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2311 v2314 
                                        let _run_target_args'_v2313 = v2315 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2316 : string = "$0.unwrap()"
                                        let v2317 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2311 v2316 
                                        let _run_target_args'_v2313 = v2317 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2318 : string = "$0.unwrap()"
                                        let v2319 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2311 v2318 
                                        let _run_target_args'_v2313 = v2319 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2320 : Vec<uint8> = match v2311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2313 = v2320 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2321 : Vec<uint8> = match v2311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2313 = v2321 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2322 : Vec<uint8> = match v2311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2313 = v2322 
                                        #endif
#else
                                        let v2323 : Vec<uint8> = match v2311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2313 = v2323 
                                        #endif
                                        let v2324 : Vec<uint8> = _run_target_args'_v2313 
                                        let _run_target_args'_v2309 = v2324 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2328 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2309 = v2328 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2332 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2309 = v2332 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2336 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2309 = v2336 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2340 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2309 = v2340 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2344 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2309 = v2344 
                                        #endif
#else
                                        let v2347 : (uint8 []) = v2299 |> System.IO.File.ReadAllBytes
                                        let v2348 : string = "$0.to_vec()"
                                        let v2349 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2347 v2348 
                                        let _run_target_args'_v2309 = v2349 
                                        #endif
                                        let v2350 : Vec<uint8> = _run_target_args'_v2309 
                                        let v2356 : Vec<uint8> = method26(v2350)
                                        let v2357 : string = "std::string::String::from_utf8($0)"
                                        let v2358 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2356 v2357 
                                        (* run_target_args'
                                        let v2360 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2361 : string = "$0.unwrap()"
                                        let v2362 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2358 v2361 
                                        let _run_target_args'_v2360 = v2362 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2363 : string = "$0.unwrap()"
                                        let v2364 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2358 v2363 
                                        let _run_target_args'_v2360 = v2364 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2365 : string = "$0.unwrap()"
                                        let v2366 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2358 v2365 
                                        let _run_target_args'_v2360 = v2366 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2367 : std_string_String = match v2358 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2360 = v2367 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2368 : std_string_String = match v2358 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2360 = v2368 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2369 : std_string_String = match v2358 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2360 = v2369 
                                        #endif
#else
                                        let v2370 : std_string_String = match v2358 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2360 = v2370 
                                        #endif
                                        let v2371 : std_string_String = _run_target_args'_v2360 
                                        let v2374 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2375 : string = Fable.Core.RustInterop.emitRustExpr v2371 v2374 
                                        let _run_target_args'_v2304 = v2375 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2377 : string = null |> unbox<string>
                                        let _run_target_args'_v2304 = v2377 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2381 : string = null |> unbox<string>
                                        let _run_target_args'_v2304 = v2381 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2385 : string = null |> unbox<string>
                                        let _run_target_args'_v2304 = v2385 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2389 : string = null |> unbox<string>
                                        let _run_target_args'_v2304 = v2389 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2393 : string = null |> unbox<string>
                                        let _run_target_args'_v2304 = v2393 
                                        #endif
#else
                                        let v2396 : string = v2299 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2304 = v2396 
                                        #endif
                                        let v2397 : string = _run_target_args'_v2304 
                                        let v2403 : string = "\r\n"
                                        let v2404 : string = "\n"
                                        let v2405 : string = v2397.Replace (v2403, v2404)
                                        let v2406 : string = $"{v2062}.html"
                                        (* run_target_args'
                                        let v2407 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2408 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v2406, v2405) v2408 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v2406, v2405)
                                        #endif
                                        // run_target_args' is_unit
                                        let v2409 : string = $"{v2062}.ipynb"
                                        (* run_target_args'
                                        let v2414 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2419 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2420 : string = "std::fs::read(&*$0)"
                                        let v2421 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2409 v2420 
                                        (* run_target_args'
                                        let v2423 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2424 : string = "$0.unwrap()"
                                        let v2425 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2421 v2424 
                                        let _run_target_args'_v2423 = v2425 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2426 : string = "$0.unwrap()"
                                        let v2427 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2421 v2426 
                                        let _run_target_args'_v2423 = v2427 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2428 : string = "$0.unwrap()"
                                        let v2429 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2421 v2428 
                                        let _run_target_args'_v2423 = v2429 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2430 : Vec<uint8> = match v2421 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2423 = v2430 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2431 : Vec<uint8> = match v2421 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2423 = v2431 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2432 : Vec<uint8> = match v2421 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2423 = v2432 
                                        #endif
#else
                                        let v2433 : Vec<uint8> = match v2421 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2423 = v2433 
                                        #endif
                                        let v2434 : Vec<uint8> = _run_target_args'_v2423 
                                        let _run_target_args'_v2419 = v2434 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2438 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2419 = v2438 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2442 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2419 = v2442 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2446 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2419 = v2446 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2450 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2419 = v2450 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2454 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2419 = v2454 
                                        #endif
#else
                                        let v2457 : (uint8 []) = v2409 |> System.IO.File.ReadAllBytes
                                        let v2458 : string = "$0.to_vec()"
                                        let v2459 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2457 v2458 
                                        let _run_target_args'_v2419 = v2459 
                                        #endif
                                        let v2460 : Vec<uint8> = _run_target_args'_v2419 
                                        let v2466 : Vec<uint8> = method26(v2460)
                                        let v2467 : string = "std::string::String::from_utf8($0)"
                                        let v2468 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2466 v2467 
                                        (* run_target_args'
                                        let v2470 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2471 : string = "$0.unwrap()"
                                        let v2472 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2468 v2471 
                                        let _run_target_args'_v2470 = v2472 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2473 : string = "$0.unwrap()"
                                        let v2474 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2468 v2473 
                                        let _run_target_args'_v2470 = v2474 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2475 : string = "$0.unwrap()"
                                        let v2476 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2468 v2475 
                                        let _run_target_args'_v2470 = v2476 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2477 : std_string_String = match v2468 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2470 = v2477 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2478 : std_string_String = match v2468 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2470 = v2478 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2479 : std_string_String = match v2468 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2470 = v2479 
                                        #endif
#else
                                        let v2480 : std_string_String = match v2468 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2470 = v2480 
                                        #endif
                                        let v2481 : std_string_String = _run_target_args'_v2470 
                                        let v2484 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2485 : string = Fable.Core.RustInterop.emitRustExpr v2481 v2484 
                                        let _run_target_args'_v2414 = v2485 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2487 : string = null |> unbox<string>
                                        let _run_target_args'_v2414 = v2487 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2491 : string = null |> unbox<string>
                                        let _run_target_args'_v2414 = v2491 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2495 : string = null |> unbox<string>
                                        let _run_target_args'_v2414 = v2495 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2499 : string = null |> unbox<string>
                                        let _run_target_args'_v2414 = v2499 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2503 : string = null |> unbox<string>
                                        let _run_target_args'_v2414 = v2503 
                                        #endif
#else
                                        let v2506 : string = v2409 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2414 = v2506 
                                        #endif
                                        let v2507 : string = _run_target_args'_v2414 
                                        let v2513 : string = v2507.Replace (v2403, v2404)
                                        let v2514 : string = "\\r\\n"
                                        let v2515 : string = "\\n"
                                        let v2516 : string = v2513.Replace (v2514, v2515)
                                        let v2517 : string = $"{v2062}.ipynb"
                                        (* run_target_args'
                                        let v2518 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2519 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v2517, v2516) v2519 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v2517, v2516)
                                        #endif
                                        // run_target_args' is_unit
                                        let v2520 : string = $"repl_result: {v2168}

jupyter_result: {v2181}

pwsh_replace_html_result: {v2248}"
                                        struct (v2247, v2520)
                            let v2525 : unit = ()
                            let v2526 : (unit -> unit) = closure86(v2524, v2523)
                            let v2527 : unit = (fun () -> v2526 (); v2525) ()
                            let v2576 : bool = v2523 <> 0 
                            if v2576 then
                                let v2579 : string = $"spiral.run / dib / exit_code: {v2523} / result: {v2524}"
                                failwith<unit> v2579
                            let v2580 : string = "stdio"
                            [|struct (v2580, v2524)|]
                        else
                            let v2582 : string = "fable_library_rust::String_::fromString($0)"
                            let v2583 : string = Fable.Core.RustInterop.emitRustExpr v32 v2582 
                            let v2584 : bool = v2583 = "rust"
                            let struct (v6172 : US5, v6173 : US5, v6174 : US5, v6175 : US5) =
                                if v2584 then
                                    let v2585 : string = method183()
                                    (* run_target_args'
                                    let v2590 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2591 : string = "&*$0"
                                    let v2592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2585 v2591 
                                    let _run_target_args'_v2590 = v2592 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2593 : string = "&*$0"
                                    let v2594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2585 v2593 
                                    let _run_target_args'_v2590 = v2594 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2595 : string = "&*$0"
                                    let v2596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2585 v2595 
                                    let _run_target_args'_v2590 = v2596 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2598 : Ref<Str> = v2585 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2590 = v2598 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2602 : Ref<Str> = v2585 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2590 = v2602 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2606 : Ref<Str> = v2585 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2590 = v2606 
                                    #endif
#else
                                    let v2610 : Ref<Str> = v2585 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2590 = v2610 
                                    #endif
                                    let v2613 : Ref<Str> = _run_target_args'_v2590 
                                    let v2619 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v2620 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2613) v2619 
                                    let v2622 : (std_string_String -> US7) = method23()
                                    let v2623 : US7 option = v2620 |> Option.map v2622 
                                    let v2636 : US7 = US7_1
                                    let v2637 : US7 = v2623 |> Option.defaultValue v2636 
                                    let v2644 : std_string_String =
                                        match v2637 with
                                        | US7_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US7_0(v2641) -> (* Some *)
                                            v2641
                                    let v2645 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2646 : string = Fable.Core.RustInterop.emitRustExpr v2644 v2645 
                                    let v2647 : string = method24()
                                    (* run_target_args'
                                    let v2652 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2653 : string = "&*$0"
                                    let v2654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2647 v2653 
                                    let _run_target_args'_v2652 = v2654 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2655 : string = "&*$0"
                                    let v2656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2647 v2655 
                                    let _run_target_args'_v2652 = v2656 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2657 : string = "&*$0"
                                    let v2658 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2647 v2657 
                                    let _run_target_args'_v2652 = v2658 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2660 : Ref<Str> = v2647 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2652 = v2660 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2664 : Ref<Str> = v2647 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2652 = v2664 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2668 : Ref<Str> = v2647 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2652 = v2668 
                                    #endif
#else
                                    let v2672 : Ref<Str> = v2647 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2652 = v2672 
                                    #endif
                                    let v2675 : Ref<Str> = _run_target_args'_v2652 
                                    let v2681 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v2682 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2675) v2681 
                                    let v2684 : (Vec<std_string_String> -> US8) = method25()
                                    let v2685 : US8 option = v2682 |> Option.map v2684 
                                    let v2698 : US8 = US8_1
                                    let v2699 : US8 = v2685 |> Option.defaultValue v2698 
                                    let v2703 : (std_string_String []) = [||]
                                    let v2704 : string = "$0.to_vec()"
                                    let v2705 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2703 v2704 
                                    let v2708 : Vec<std_string_String> =
                                        match v2699 with
                                        | US8_1 -> (* None *)
                                            v2705
                                        | US8_0(v2706) -> (* Some *)
                                            v2706
                                    let v2709 : string = method203()
                                    (* run_target_args'
                                    let v2714 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2715 : string = "&*$0"
                                    let v2716 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2709 v2715 
                                    let _run_target_args'_v2714 = v2716 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2717 : string = "&*$0"
                                    let v2718 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2709 v2717 
                                    let _run_target_args'_v2714 = v2718 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2719 : string = "&*$0"
                                    let v2720 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2709 v2719 
                                    let _run_target_args'_v2714 = v2720 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2722 : Ref<Str> = v2709 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2714 = v2722 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2726 : Ref<Str> = v2709 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2714 = v2726 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2730 : Ref<Str> = v2709 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2714 = v2730 
                                    #endif
#else
                                    let v2734 : Ref<Str> = v2709 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2714 = v2734 
                                    #endif
                                    let v2737 : Ref<Str> = _run_target_args'_v2714 
                                    let v2743 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v2744 : bool = Fable.Core.RustInterop.emitRustExpr struct (v33, v2737) v2743 
                                    let v2745 : string = method204()
                                    (* run_target_args'
                                    let v2750 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2751 : string = "&*$0"
                                    let v2752 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2745 v2751 
                                    let _run_target_args'_v2750 = v2752 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2753 : string = "&*$0"
                                    let v2754 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2745 v2753 
                                    let _run_target_args'_v2750 = v2754 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2755 : string = "&*$0"
                                    let v2756 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2745 v2755 
                                    let _run_target_args'_v2750 = v2756 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2758 : Ref<Str> = v2745 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2750 = v2758 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2762 : Ref<Str> = v2745 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2750 = v2762 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2766 : Ref<Str> = v2745 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2750 = v2766 
                                    #endif
#else
                                    let v2770 : Ref<Str> = v2745 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2750 = v2770 
                                    #endif
                                    let v2773 : Ref<Str> = _run_target_args'_v2750 
                                    let v2779 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v2780 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2773) v2779 
                                    let v2782 : (std_string_String -> US7) = method23()
                                    let v2783 : US7 option = v2780 |> Option.map v2782 
                                    let v2796 : US7 = US7_1
                                    let v2797 : US7 = v2783 |> Option.defaultValue v2796 
                                    let v2807 : US5 =
                                        match v2797 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v2801) -> (* Some *)
                                            let v2802 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2803 : string = Fable.Core.RustInterop.emitRustExpr v2801 v2802 
                                            US5_0(v2803)
                                    let v2808 : string = method205()
                                    (* run_target_args'
                                    let v2813 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2814 : string = "&*$0"
                                    let v2815 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2808 v2814 
                                    let _run_target_args'_v2813 = v2815 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2816 : string = "&*$0"
                                    let v2817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2808 v2816 
                                    let _run_target_args'_v2813 = v2817 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2818 : string = "&*$0"
                                    let v2819 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2808 v2818 
                                    let _run_target_args'_v2813 = v2819 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2821 : Ref<Str> = v2808 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2813 = v2821 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2825 : Ref<Str> = v2808 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2813 = v2825 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2829 : Ref<Str> = v2808 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2813 = v2829 
                                    #endif
#else
                                    let v2833 : Ref<Str> = v2808 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2813 = v2833 
                                    #endif
                                    let v2836 : Ref<Str> = _run_target_args'_v2813 
                                    let v2842 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v2843 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v2836) v2842 
                                    let v2845 : (std_string_String -> US7) = method23()
                                    let v2846 : US7 option = v2843 |> Option.map v2845 
                                    let v2859 : US7 = US7_1
                                    let v2860 : US7 = v2846 |> Option.defaultValue v2859 
                                    let v2870 : US5 =
                                        match v2860 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v2864) -> (* Some *)
                                            let v2865 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2866 : string = Fable.Core.RustInterop.emitRustExpr v2864 v2865 
                                            US5_0(v2866)
                                    let v2879 : US36 =
                                        match v2807 with
                                        | US5_0(v2871) -> (* Some *)
                                            let v2872 : US37 = US37_0(v2871)
                                            US36_0(v2872)
                                        | _ ->
                                            match v2870 with
                                            | US5_0(v2874) -> (* Some *)
                                                let v2875 : US37 = US37_1(v2874)
                                                US36_0(v2875)
                                            | _ ->
                                                US36_1
                                    (* run_target_args'
                                    let v2884 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v2889 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2890 : string = "std::fs::read(&*$0)"
                                    let v2891 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2646 v2890 
                                    (* run_target_args'
                                    let v2893 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2894 : string = "$0.unwrap()"
                                    let v2895 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2891 v2894 
                                    let _run_target_args'_v2893 = v2895 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2896 : string = "$0.unwrap()"
                                    let v2897 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2891 v2896 
                                    let _run_target_args'_v2893 = v2897 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2898 : string = "$0.unwrap()"
                                    let v2899 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2891 v2898 
                                    let _run_target_args'_v2893 = v2899 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2900 : Vec<uint8> = match v2891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2893 = v2900 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2901 : Vec<uint8> = match v2891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2893 = v2901 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2902 : Vec<uint8> = match v2891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2893 = v2902 
                                    #endif
#else
                                    let v2903 : Vec<uint8> = match v2891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2893 = v2903 
                                    #endif
                                    let v2904 : Vec<uint8> = _run_target_args'_v2893 
                                    let _run_target_args'_v2889 = v2904 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2908 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v2889 = v2908 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2912 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v2889 = v2912 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2916 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v2889 = v2916 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2920 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v2889 = v2920 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2924 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v2889 = v2924 
                                    #endif
#else
                                    let v2927 : (uint8 []) = v2646 |> System.IO.File.ReadAllBytes
                                    let v2928 : string = "$0.to_vec()"
                                    let v2929 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2927 v2928 
                                    let _run_target_args'_v2889 = v2929 
                                    #endif
                                    let v2930 : Vec<uint8> = _run_target_args'_v2889 
                                    let v2936 : Vec<uint8> = method26(v2930)
                                    let v2937 : string = "std::string::String::from_utf8($0)"
                                    let v2938 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2936 v2937 
                                    (* run_target_args'
                                    let v2940 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2941 : string = "$0.unwrap()"
                                    let v2942 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2938 v2941 
                                    let _run_target_args'_v2940 = v2942 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2943 : string = "$0.unwrap()"
                                    let v2944 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2938 v2943 
                                    let _run_target_args'_v2940 = v2944 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2945 : string = "$0.unwrap()"
                                    let v2946 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2938 v2945 
                                    let _run_target_args'_v2940 = v2946 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2947 : std_string_String = match v2938 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2940 = v2947 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2948 : std_string_String = match v2938 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2940 = v2948 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2949 : std_string_String = match v2938 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2940 = v2949 
                                    #endif
#else
                                    let v2950 : std_string_String = match v2938 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v2940 = v2950 
                                    #endif
                                    let v2951 : std_string_String = _run_target_args'_v2940 
                                    let v2954 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2955 : string = Fable.Core.RustInterop.emitRustExpr v2951 v2954 
                                    let _run_target_args'_v2884 = v2955 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2957 : string = null |> unbox<string>
                                    let _run_target_args'_v2884 = v2957 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2961 : string = null |> unbox<string>
                                    let _run_target_args'_v2884 = v2961 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2965 : string = null |> unbox<string>
                                    let _run_target_args'_v2884 = v2965 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2969 : string = null |> unbox<string>
                                    let _run_target_args'_v2884 = v2969 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2973 : string = null |> unbox<string>
                                    let _run_target_args'_v2884 = v2973 
                                    #endif
#else
                                    let v2976 : string = v2646 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v2884 = v2976 
                                    #endif
                                    let v2977 : string = _run_target_args'_v2884 
                                    let v2983 : string = "rs"
                                    let v2984 : string = method206(v2983, v2977, v2879)
                                    let v2985 : string = method28(v2984)
                                    let v2986 : string = method33()
                                    let v2987 : US5 = method34(v2986)
                                    let v2993 : US5 =
                                        match v2987 with
                                        | US5_1 -> (* None *)
                                            let v2990 : string = __SOURCE_DIRECTORY__
                                            method34(v2990)
                                        | US5_0(v2988) -> (* Some *)
                                            US5_0(v2988)
                                    let v2999 : US5 =
                                        match v2993 with
                                        | US5_1 -> (* None *)
                                            let v2996 : string = "/workspaces"
                                            method34(v2996)
                                        | US5_0(v2994) -> (* Some *)
                                            US5_0(v2994)
                                    let v3003 : string =
                                        match v2999 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v3000) -> (* Some *)
                                            v3000
                                    let v3004 : string = method54(v3003)
                                    let v3005 : bool = "deps" = v3004
                                    let v3016 : string =
                                        if v3005 then
                                            let v3006 : string option = method40(v3003)
                                            let v3008 : string = v3006 |> Option.get
                                            let v3011 : US5 = method34(v3008)
                                            match v3011 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v3012) -> (* Some *)
                                                v3012
                                        else
                                            v3003
                                    let v3017 : string = "polyglot"
                                    let v3018 : string = method35(v3016, v3017)
                                    let v3019 : string = method33()
                                    let v3021 : (unit -> string) = v3019.ToLower
                                    let v3022 : string = v3021 ()
                                    let v3026 : (unit -> string) = v3018.ToLower
                                    let v3027 : string = v3026 ()
                                    let v3031 : bool = v3022.StartsWith (v3027, false, null)
                                    let v3036 : US10 =
                                        if v3031 then
                                            US10_1(v3027)
                                        else
                                            US10_0(v3027)
                                    let v3042 : Result<string, string> =
                                        match v3036 with
                                        | US10_1(v3039) -> (* Error *)
                                            let v3040 : Result<string, string> = Error v3039 
                                            v3040
                                        | US10_0(v3037) -> (* Ok *)
                                            let v3038 : Result<string, string> = Ok v3037 
                                            v3038
                                    let v3043 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v3044 : bool = Fable.Core.RustInterop.emitRustExpr v3042 v3043 
                                    let v3045 : string = "x"
                                    let v3046 : string = Fable.Core.RustInterop.emitRustExpr () v3045 
                                    let v3047 : string = "true; $0 })"
                                    let v3048 : bool = Fable.Core.RustInterop.emitRustExpr v3046 v3047 
                                    let v3049 : string = "_result_unwrap_or_else"
                                    let v3050 : string = Fable.Core.RustInterop.emitRustExpr () v3049 
                                    let v3051 : string = "spiral"
                                    let v3052 : US38 = US38_0
                                    let v3053 : US39 = US39_0(v3052)
                                    let v3054 : US5 = US5_0(v2985)
                                    let v3055 : string = method207(v3054, v3051, v3053, v3050)
                                    let v3056 : string = "Fable.Core"
                                    let v3057 : string = "4.3.0"
                                    let v3058 : UH4 = UH4_0
                                    let v3059 : UH4 = UH4_1(v3056, v3057, v3058)
                                    let v3060 : UH2 = UH2_0
                                    let v3061 : string = method208(v2977, v3051, v3060, v3059, v3055, v3050)
                                    let v3062 : string = "../../.."
                                    let v3063 : string = method35(v3055, v3062)
                                    let v3064 : string = "Cargo.toml"
                                    let v3065 : string = method35(v3063, v3064)
                                    let v3066 : bool = method37(v3065)
                                    let v3067 : bool = v3066 = false
                                    if v3067 then
                                        (* run_target_args'
                                        let v3070 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3071 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3070 = v3071 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3072 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3070 = v3072 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3074 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v3070 = v3074 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3077 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3070 = v3077 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3078 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3070 = v3078 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3079 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3070 = v3079 
                                        #endif
#else
                                        let v3080 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3070 = v3080 
                                        #endif
                                        let v3081 : System.DateTime = _run_target_args'_v3070 
                                        let v3087 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v3088 : System.Guid = v3087 ()
                                        let v3091 : System.Guid = method211(v3088, v3081)
                                        let v3093 : (System.Guid -> string) = _.ToString()
                                        let v3094 : string = v3093 v3091
                                        let v3097 : string = $"[package]"
                                        let v3098 : string = $"name = \"spiral_{v3094}\""
                                        let v3099 : string = "\n"
                                        let v3100 : string = v3097 + v3099 
                                        let v3101 : string = v3100 + v3098 
                                        let v3102 : string = $"version = \"0.0.1\""
                                        let v3103 : string = v3101 + v3099 
                                        let v3104 : string = v3103 + v3102 
                                        let v3105 : string = $"edition = \"2021\""
                                        let v3106 : string = v3104 + v3099 
                                        let v3107 : string = v3106 + v3105 
                                        let v3108 : string = $""
                                        let v3109 : string = v3107 + v3099 
                                        let v3110 : string = v3109 + v3108 
                                        let v3111 : string = $"[[bin]]"
                                        let v3112 : string = v3110 + v3099 
                                        let v3113 : string = v3112 + v3111 
                                        let v3114 : string = $"name = \"spiral_{v3094}\""
                                        let v3115 : string = v3113 + v3099 
                                        let v3116 : string = v3115 + v3114 
                                        let v3117 : string = $"path = \"spiral.rs\""
                                        let v3118 : string = v3116 + v3099 
                                        let v3119 : string = v3118 + v3117 
                                        (* run_target_args'
                                        let v3120 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3121 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3065, v3119) v3121 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3065, v3119)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v3122 : string = method35(v3055, v3064)
                                    let v3123 : bool = method37(v3122)
                                    let v3124 : bool = v3123 = false
                                    if v3124 then
                                        (* run_target_args'
                                        let v3127 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3128 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3127 = v3128 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3129 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3127 = v3129 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3131 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v3127 = v3131 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3134 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3127 = v3134 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3135 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3127 = v3135 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3136 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3127 = v3136 
                                        #endif
#else
                                        let v3137 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3127 = v3137 
                                        #endif
                                        let v3138 : System.DateTime = _run_target_args'_v3127 
                                        let v3144 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v3145 : System.Guid = v3144 ()
                                        let v3148 : System.Guid = method211(v3145, v3138)
                                        let v3150 : (System.Guid -> string) = _.ToString()
                                        let v3151 : string = v3150 v3148
                                        let v3154 : string = $"[package]"
                                        let v3155 : string = $"name = \"spiral_{v3151}\""
                                        let v3156 : string = "\n"
                                        let v3157 : string = v3154 + v3156 
                                        let v3158 : string = v3157 + v3155 
                                        let v3159 : string = $"version = \"0.0.1\""
                                        let v3160 : string = v3158 + v3156 
                                        let v3161 : string = v3160 + v3159 
                                        let v3162 : string = $"edition = \"2021\""
                                        let v3163 : string = v3161 + v3156 
                                        let v3164 : string = v3163 + v3162 
                                        let v3165 : string = $""
                                        let v3166 : string = v3164 + v3156 
                                        let v3167 : string = v3166 + v3165 
                                        let v3168 : string = $"[[bin]]"
                                        let v3169 : string = v3167 + v3156 
                                        let v3170 : string = v3169 + v3168 
                                        let v3171 : string = $"name = \"spiral_{v3151}\""
                                        let v3172 : string = v3170 + v3156 
                                        let v3173 : string = v3172 + v3171 
                                        let v3174 : string = $"path = \"spiral.rs\""
                                        let v3175 : string = v3173 + v3156 
                                        let v3176 : string = v3175 + v3174 
                                        (* run_target_args'
                                        let v3177 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3178 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3122, v3176) v3178 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3122, v3176)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v3179 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v3180 : string = method35(v3050, v3179)
                                    let v3181 : string = "fable_modules/fable-library-rust"
                                    let v3182 : string = method35(v3055, v3181)
                                    method216(v3180, v3182)
                                    let struct (v3183 : int32, v3184 : string) = method217(v2879, v3055, v2983, v3061, v3036)
                                    let v3186 : bool = v3183 <> 0 
                                    let struct (v4470 : US5, v4471 : US5, v4472 : US5, v4473 : US5) =
                                        if v3186 then
                                            let v3189 : unit = ()
                                            let v3190 : (unit -> unit) = closure89(v3184, v3183)
                                            let v3191 : unit = (fun () -> v3190 (); v3189) ()
                                            let v3238 : US5 = US5_0(v2983)
                                            let v3239 : US5 = US5_1
                                            let v3240 : US5 = US5_1
                                            let v3241 : US5 = US5_0(v3184)
                                            struct (v3238, v3239, v3240, v3241)
                                        else
                                            let v3242 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3342 : Vec<std_string_String> =
                                                if v3242 then
                                                    v2708
                                                else
                                                    let v3243 : (std_string_String -> bool) = method227()
                                                    let v3244 : Vec<std_string_String> = method228(v2708)
                                                    let v3245 : string = "v3244.into_iter().filter(|x| v3243(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v3246 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3245 
                                                    let v3247 : string = "$0.len()"
                                                    let v3248 : unativeint = Fable.Core.RustInterop.emitRustExpr v3246 v3247 
                                                    let v3254 : int32 = v3248 |> int32 
                                                    let v3262 : bool = v3254 > 0
                                                    if v3262 then
                                                        v2708
                                                    else
                                                        let v3263 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v3268 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3269 : string = "&*$0"
                                                        let v3270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3263 v3269 
                                                        let _run_target_args'_v3268 = v3270 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3271 : string = "&*$0"
                                                        let v3272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3263 v3271 
                                                        let _run_target_args'_v3268 = v3272 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3273 : string = "&*$0"
                                                        let v3274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3263 v3273 
                                                        let _run_target_args'_v3268 = v3274 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3276 : Ref<Str> = v3263 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3268 = v3276 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3280 : Ref<Str> = v3263 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3268 = v3280 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3284 : Ref<Str> = v3263 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3268 = v3284 
                                                        #endif
#else
                                                        let v3288 : Ref<Str> = v3263 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3268 = v3288 
                                                        #endif
                                                        let v3291 : Ref<Str> = _run_target_args'_v3268 
                                                        (* run_target_args'
                                                        let v3301 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3302 : string = "String::from($0)"
                                                        let v3303 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3291 v3302 
                                                        let _run_target_args'_v3301 = v3303 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3304 : string = "String::from($0)"
                                                        let v3305 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3291 v3304 
                                                        let _run_target_args'_v3301 = v3305 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3306 : string = "String::from($0)"
                                                        let v3307 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3291 v3306 
                                                        let _run_target_args'_v3301 = v3307 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3309 : std_string_String = v3291 |> unbox<std_string_String>
                                                        let _run_target_args'_v3301 = v3309 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3313 : std_string_String = v3291 |> unbox<std_string_String>
                                                        let _run_target_args'_v3301 = v3313 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3317 : std_string_String = v3291 |> unbox<std_string_String>
                                                        let _run_target_args'_v3301 = v3317 
                                                        #endif
#else
                                                        let v3321 : std_string_String = v3291 |> unbox<std_string_String>
                                                        let _run_target_args'_v3301 = v3321 
                                                        #endif
                                                        let v3324 : std_string_String = _run_target_args'_v3301 
                                                        let v3330 : (std_string_String []) = [|v3324|]
                                                        let v3331 : string = "$0.to_vec()"
                                                        let v3332 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3330 v3331 
                                                        let v3333 : Vec<std_string_String> = method68(v3332)
                                                        let v3334 : Vec<std_string_String> = method69(v2708)
                                                        let v3335 : string = "true; let mut v3334 = v3334"
                                                        let v3336 : bool = Fable.Core.RustInterop.emitRustExpr () v3335 
                                                        let v3337 : string = "true; v3334.extend(v3333)"
                                                        let v3338 : bool = Fable.Core.RustInterop.emitRustExpr () v3337 
                                                        let v3339 : string = "v3334"
                                                        let v3340 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3339 
                                                        v3340
                                            let v3343 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v3344 : bool = Fable.Core.RustInterop.emitRustExpr v3342 v3343 
                                            let v3345 : string = "x"
                                            let v3346 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3345 
                                            let v3347 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3348 : string = Fable.Core.RustInterop.emitRustExpr v3346 v3347 
                                            let v3350 : string = "="
                                            let v3351 : bool = v3348.Contains v3350 
                                            let v3365 : string =
                                                if v3351 then
                                                    v3348
                                                else
                                                    let v3355 : string = "]"
                                                    let v3356 : bool = v3348.EndsWith (v3355, false, null)
                                                    if v3356 then
                                                        let v3359 : string = $"={{version='*',features=["
                                                        let v3360 : string = "["
                                                        let v3361 : string = v3348.Replace (v3360, v3359)
                                                        let v3362 : string = $"{v3361}}}"
                                                        v3362
                                                    else
                                                        let v3363 : string = $"{v3348}='*'"
                                                        v3363
                                            let v3366 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v3367 : bool = Fable.Core.RustInterop.emitRustExpr v3365 v3366 
                                            let v3368 : string = "_vec_map"
                                            let v3369 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3368 
                                            let v3370 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v3371 : (string []) = Fable.Core.RustInterop.emitRustExpr v3369 v3370 
                                            let v3375 : unit = ()
                                            let _let'_v3375 =
                                                seq {
                                                    for i = 0 to v3371.Length - 1 do yield v3371.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v3378 : string seq = _let'_v3375 
                                            let v3385 : string = method70()
                                            let v3386 : (string -> (string seq -> string)) = String.concat
                                            let v3387 : (string seq -> string) = v3386 v3385
                                            let v3388 : string = v3387 v3378
                                            let v3392 : string = $"{v3051}.{v2983}"
                                            let v3393 : string = method35(v3055, v3392)
                                            (* run_target_args'
                                            let v3398 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v3403 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3404 : string = "std::fs::read(&*$0)"
                                            let v3405 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3393 v3404 
                                            (* run_target_args'
                                            let v3407 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3408 : string = "$0.unwrap()"
                                            let v3409 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3405 v3408 
                                            let _run_target_args'_v3407 = v3409 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3410 : string = "$0.unwrap()"
                                            let v3411 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3405 v3410 
                                            let _run_target_args'_v3407 = v3411 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3412 : string = "$0.unwrap()"
                                            let v3413 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3405 v3412 
                                            let _run_target_args'_v3407 = v3413 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3414 : Vec<uint8> = match v3405 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3407 = v3414 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3415 : Vec<uint8> = match v3405 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3407 = v3415 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3416 : Vec<uint8> = match v3405 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3407 = v3416 
                                            #endif
#else
                                            let v3417 : Vec<uint8> = match v3405 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3407 = v3417 
                                            #endif
                                            let v3418 : Vec<uint8> = _run_target_args'_v3407 
                                            let _run_target_args'_v3403 = v3418 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3422 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3403 = v3422 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3426 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3403 = v3426 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3430 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3403 = v3430 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3434 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3403 = v3434 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3438 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3403 = v3438 
                                            #endif
#else
                                            let v3441 : (uint8 []) = v3393 |> System.IO.File.ReadAllBytes
                                            let v3442 : string = "$0.to_vec()"
                                            let v3443 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3441 v3442 
                                            let _run_target_args'_v3403 = v3443 
                                            #endif
                                            let v3444 : Vec<uint8> = _run_target_args'_v3403 
                                            let v3450 : Vec<uint8> = method26(v3444)
                                            let v3451 : string = "std::string::String::from_utf8($0)"
                                            let v3452 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3450 v3451 
                                            (* run_target_args'
                                            let v3454 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3455 : string = "$0.unwrap()"
                                            let v3456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3452 v3455 
                                            let _run_target_args'_v3454 = v3456 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3457 : string = "$0.unwrap()"
                                            let v3458 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3452 v3457 
                                            let _run_target_args'_v3454 = v3458 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3459 : string = "$0.unwrap()"
                                            let v3460 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3452 v3459 
                                            let _run_target_args'_v3454 = v3460 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3461 : std_string_String = match v3452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3454 = v3461 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3462 : std_string_String = match v3452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3454 = v3462 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3463 : std_string_String = match v3452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3454 = v3463 
                                            #endif
#else
                                            let v3464 : std_string_String = match v3452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3454 = v3464 
                                            #endif
                                            let v3465 : std_string_String = _run_target_args'_v3454 
                                            let v3468 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3469 : string = Fable.Core.RustInterop.emitRustExpr v3465 v3468 
                                            let _run_target_args'_v3398 = v3469 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3471 : string = null |> unbox<string>
                                            let _run_target_args'_v3398 = v3471 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3475 : string = null |> unbox<string>
                                            let _run_target_args'_v3398 = v3475 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3479 : string = null |> unbox<string>
                                            let _run_target_args'_v3398 = v3479 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3483 : string = null |> unbox<string>
                                            let _run_target_args'_v3398 = v3483 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3487 : string = null |> unbox<string>
                                            let _run_target_args'_v3398 = v3487 
                                            #endif
#else
                                            let v3490 : string = v3393 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v3398 = v3490 
                                            #endif
                                            let v3491 : string = _run_target_args'_v3398 
                                            let v3497 : string = method229()
                                            let v3498 : string = "on_startup!"
                                            let v3499 : string = v3498 + v3497 
                                            let v3500 : string = method230()
                                            let v3501 : string = " method0"
                                            let v3502 : string = v3501 + v3500 
                                            let v3504 : bool = v3491.Contains v3499 
                                            let v3512 : bool =
                                                if v3504 then
                                                    let v3508 : bool = v3491.Contains v3502 
                                                    let v3511 : bool = v3508 = false
                                                    v3511
                                                else
                                                    false
                                            let v3513 : string = $"[package]"
                                            let v3514 : string = $"name = \"spiral_{v2985}\""
                                            let v3515 : string = "\n"
                                            let v3516 : string = v3513 + v3515 
                                            let v3517 : string = v3516 + v3514 
                                            let v3518 : string = $"version = \"0.0.1\""
                                            let v3519 : string = v3517 + v3515 
                                            let v3520 : string = v3519 + v3518 
                                            let v3521 : string = $"edition = \"2021\""
                                            let v3522 : string = v3520 + v3515 
                                            let v3523 : string = v3522 + v3521 
                                            let v3524 : string = $""
                                            let v3525 : string = v3523 + v3515 
                                            let v3526 : string = v3525 + v3524 
                                            let v3527 : string = $"[dependencies]"
                                            let v3528 : string = v3526 + v3515 
                                            let v3529 : string = v3528 + v3527 
                                            let v3532 : US36 = US36_1
                                            let v3533 : bool = v2879 <> v3532 
                                            let v3551 : string =
                                                if v3533 then
                                                    let v3537 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v3537
                                                else
                                                    let v3538 : string = $"fable_library_rust = {{"
                                                    let v3539 : string = $" workspace = true,"
                                                    let v3540 : string = v3538 + v3539 
                                                    let v3541 : string = $" features = ["
                                                    let v3542 : string = v3540 + v3541 
                                                    let v3545 : string =
                                                        if v3512 then
                                                            let v3543 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v3543
                                                        else
                                                            let v3544 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v3544
                                                    let v3546 : string = v3542 + v3545 
                                                    let v3547 : string = $"]"
                                                    let v3548 : string = v3546 + v3547 
                                                    let v3549 : string = $"}}"
                                                    let v3550 : string = v3548 + v3549 
                                                    v3550
                                            let v3552 : string = v3529 + v3515 
                                            let v3553 : string = v3552 + v3551 
                                            let v3554 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v3555 : string = v3553 + v3515 
                                            let v3556 : string = v3555 + v3554 
                                            let v3557 : string = $"{v3388}"
                                            let v3558 : string = v3556 + v3515 
                                            let v3559 : string = v3558 + v3557 
                                            let v3560 : string = $""
                                            let v3561 : string = v3559 + v3515 
                                            let v3562 : string = v3561 + v3560 
                                            let v3563 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3572 : string =
                                                if v3563 then
                                                    let v3564 : string = $"[[bin]]"
                                                    let v3565 : string = $"name = \"spiral_{v2985}\""
                                                    let v3566 : string = v3564 + v3515 
                                                    let v3567 : string = v3566 + v3565 
                                                    v3567
                                                else
                                                    let v3568 : string = $"[lib]"
                                                    let v3569 : string = $"crate-type = [\"cdylib\"]"
                                                    let v3570 : string = v3568 + v3515 
                                                    let v3571 : string = v3570 + v3569 
                                                    v3571
                                            let v3573 : string = v3562 + v3515 
                                            let v3574 : string = v3573 + v3572 
                                            let v3575 : string = $"path = \"spiral.rs\""
                                            let v3576 : string = v3574 + v3515 
                                            let v3577 : string = v3576 + v3575 
                                            let v3578 : string = method45(v3050)
                                            let v3579 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v3580 : string = $""
                                            let v3581 : string = v3579 + v3515 
                                            let v3582 : string = v3581 + v3580 
                                            let v3583 : string = $"[workspace]"
                                            let v3584 : string = v3582 + v3515 
                                            let v3585 : string = v3584 + v3583 
                                            let v3586 : string = $"resolver = \"2\""
                                            let v3587 : string = v3585 + v3515 
                                            let v3588 : string = v3587 + v3586 
                                            let v3589 : string = $"members = [\"packages/Rust/*\"]"
                                            let v3590 : string = v3588 + v3515 
                                            let v3591 : string = v3590 + v3589 
                                            let v3592 : string = $""
                                            let v3593 : string = v3591 + v3515 
                                            let v3594 : string = v3593 + v3592 
                                            let v3595 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v3596 : string = v3594 + v3515 
                                            let v3597 : string = v3596 + v3595 
                                            let v3598 : string = $"path = \"{v3578}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v3599 : string = v3597 + v3515 
                                            let v3600 : string = v3599 + v3598 
                                            let v3601 : string = $"default-features = false"
                                            let v3602 : string = v3600 + v3515 
                                            let v3603 : string = v3602 + v3601 
                                            let v3604 : string = $"features = []"
                                            let v3605 : string = v3603 + v3515 
                                            let v3606 : string = v3605 + v3604 
                                            let v3607 : string = $""
                                            let v3608 : string = v3606 + v3515 
                                            let v3609 : string = v3608 + v3607 
                                            let v3610 : string = $"[workspace.dependencies]"
                                            let v3611 : string = v3609 + v3515 
                                            let v3612 : string = v3611 + v3610 
                                            let v3613 : string = $"inline_colorization = \"~0.1\""
                                            let v3614 : string = v3612 + v3515 
                                            let v3615 : string = v3614 + v3613 
                                            let v3616 : string = $""
                                            let v3617 : string = v3615 + v3515 
                                            let v3618 : string = v3617 + v3616 
                                            let v3619 : string = $"[profile.release]"
                                            let v3620 : string = v3618 + v3515 
                                            let v3621 : string = v3620 + v3619 
                                            let v3622 : string = $"codegen-units = 1"
                                            let v3623 : string = v3621 + v3515 
                                            let v3624 : string = v3623 + v3622 
                                            let v3625 : string = $"opt-level = \"z\""
                                            let v3626 : string = v3624 + v3515 
                                            let v3627 : string = v3626 + v3625 
                                            let v3628 : string = $"lto = true"
                                            let v3629 : string = v3627 + v3515 
                                            let v3630 : string = v3629 + v3628 
                                            let v3631 : string = $"debug = false"
                                            let v3632 : string = v3630 + v3515 
                                            let v3633 : string = v3632 + v3631 
                                            let v3634 : string = $"panic = \"abort\""
                                            let v3635 : string = v3633 + v3515 
                                            let v3636 : string = v3635 + v3634 
                                            let v3637 : string = $"overflow-checks = true"
                                            let v3638 : string = v3636 + v3515 
                                            let v3639 : string = v3638 + v3637 
                                            let v3640 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v3641 : string = v3639 + v3515 
                                            let v3642 : string = v3641 + v3640 
                                            method71(v3122, v3577)
                                            method71(v3065, v3642)
                                            let v3643 : string = "src/Range.rs"
                                            let v3644 : string = method35(v3182, v3643)
                                            let v3645 : bool = method37(v3644)
                                            if v3645 then
                                                (* run_target_args'
                                                let v3650 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3655 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3656 : string = "std::fs::read(&*$0)"
                                                let v3657 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3644 v3656 
                                                (* run_target_args'
                                                let v3659 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3660 : string = "$0.unwrap()"
                                                let v3661 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3657 v3660 
                                                let _run_target_args'_v3659 = v3661 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3662 : string = "$0.unwrap()"
                                                let v3663 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3657 v3662 
                                                let _run_target_args'_v3659 = v3663 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3664 : string = "$0.unwrap()"
                                                let v3665 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3657 v3664 
                                                let _run_target_args'_v3659 = v3665 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3666 : Vec<uint8> = match v3657 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3659 = v3666 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3667 : Vec<uint8> = match v3657 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3659 = v3667 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3668 : Vec<uint8> = match v3657 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3659 = v3668 
                                                #endif
#else
                                                let v3669 : Vec<uint8> = match v3657 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3659 = v3669 
                                                #endif
                                                let v3670 : Vec<uint8> = _run_target_args'_v3659 
                                                let _run_target_args'_v3655 = v3670 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3674 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3655 = v3674 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3678 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3655 = v3678 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3682 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3655 = v3682 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3686 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3655 = v3686 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3690 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3655 = v3690 
                                                #endif
#else
                                                let v3693 : (uint8 []) = v3644 |> System.IO.File.ReadAllBytes
                                                let v3694 : string = "$0.to_vec()"
                                                let v3695 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3693 v3694 
                                                let _run_target_args'_v3655 = v3695 
                                                #endif
                                                let v3696 : Vec<uint8> = _run_target_args'_v3655 
                                                let v3702 : Vec<uint8> = method26(v3696)
                                                let v3703 : string = "std::string::String::from_utf8($0)"
                                                let v3704 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3702 v3703 
                                                (* run_target_args'
                                                let v3706 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3707 : string = "$0.unwrap()"
                                                let v3708 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3704 v3707 
                                                let _run_target_args'_v3706 = v3708 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3709 : string = "$0.unwrap()"
                                                let v3710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3704 v3709 
                                                let _run_target_args'_v3706 = v3710 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3711 : string = "$0.unwrap()"
                                                let v3712 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3704 v3711 
                                                let _run_target_args'_v3706 = v3712 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3713 : std_string_String = match v3704 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3706 = v3713 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3714 : std_string_String = match v3704 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3706 = v3714 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3715 : std_string_String = match v3704 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3706 = v3715 
                                                #endif
#else
                                                let v3716 : std_string_String = match v3704 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3706 = v3716 
                                                #endif
                                                let v3717 : std_string_String = _run_target_args'_v3706 
                                                let v3720 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3721 : string = Fable.Core.RustInterop.emitRustExpr v3717 v3720 
                                                let _run_target_args'_v3650 = v3721 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3723 : string = null |> unbox<string>
                                                let _run_target_args'_v3650 = v3723 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3727 : string = null |> unbox<string>
                                                let _run_target_args'_v3650 = v3727 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3731 : string = null |> unbox<string>
                                                let _run_target_args'_v3650 = v3731 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3735 : string = null |> unbox<string>
                                                let _run_target_args'_v3650 = v3735 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3739 : string = null |> unbox<string>
                                                let _run_target_args'_v3650 = v3739 
                                                #endif
#else
                                                let v3742 : string = v3644 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3650 = v3742 
                                                #endif
                                                let v3743 : string = _run_target_args'_v3650 
                                                let v3749 : string = "use crate::String_::fromCharCode;"
                                                let v3750 : string = "use crate::String_::fromChar;"
                                                let v3751 : string = v3743.Replace (v3749, v3750)
                                                let v3752 : string = "fromCharCode(c)"
                                                let v3753 : string = "std::char::from_u32(c).unwrap()"
                                                let v3754 : string = v3751.Replace (v3752, v3753)
                                                method71(v3644, v3754)
                                            let v3755 : uint8 = 1uy
                                            let struct (v3756 : int32, v3757 : string) = method231(v3036, v3122, v3755)
                                            let v3759 : bool = v3756 <> 0 
                                            if v3759 then
                                                let v3762 : unit = ()
                                                let v3763 : (unit -> unit) = closure93(v3757, v3756)
                                                let v3764 : unit = (fun () -> v3763 (); v3762) ()
                                                ()
                                            (* run_target_args'
                                            let v3815 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v3820 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3821 : string = "std::fs::read(&*$0)"
                                            let v3822 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3393 v3821 
                                            (* run_target_args'
                                            let v3824 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3825 : string = "$0.unwrap()"
                                            let v3826 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3822 v3825 
                                            let _run_target_args'_v3824 = v3826 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3827 : string = "$0.unwrap()"
                                            let v3828 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3822 v3827 
                                            let _run_target_args'_v3824 = v3828 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3829 : string = "$0.unwrap()"
                                            let v3830 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3822 v3829 
                                            let _run_target_args'_v3824 = v3830 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3831 : Vec<uint8> = match v3822 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3824 = v3831 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3832 : Vec<uint8> = match v3822 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3824 = v3832 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3833 : Vec<uint8> = match v3822 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3824 = v3833 
                                            #endif
#else
                                            let v3834 : Vec<uint8> = match v3822 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3824 = v3834 
                                            #endif
                                            let v3835 : Vec<uint8> = _run_target_args'_v3824 
                                            let _run_target_args'_v3820 = v3835 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3839 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3820 = v3839 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3843 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3820 = v3843 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3847 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3820 = v3847 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3851 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3820 = v3851 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3855 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3820 = v3855 
                                            #endif
#else
                                            let v3858 : (uint8 []) = v3393 |> System.IO.File.ReadAllBytes
                                            let v3859 : string = "$0.to_vec()"
                                            let v3860 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3858 v3859 
                                            let _run_target_args'_v3820 = v3860 
                                            #endif
                                            let v3861 : Vec<uint8> = _run_target_args'_v3820 
                                            let v3867 : Vec<uint8> = method26(v3861)
                                            let v3868 : string = "std::string::String::from_utf8($0)"
                                            let v3869 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3867 v3868 
                                            (* run_target_args'
                                            let v3871 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3872 : string = "$0.unwrap()"
                                            let v3873 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3869 v3872 
                                            let _run_target_args'_v3871 = v3873 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3874 : string = "$0.unwrap()"
                                            let v3875 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3869 v3874 
                                            let _run_target_args'_v3871 = v3875 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3876 : string = "$0.unwrap()"
                                            let v3877 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3869 v3876 
                                            let _run_target_args'_v3871 = v3877 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3878 : std_string_String = match v3869 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3871 = v3878 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3879 : std_string_String = match v3869 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3871 = v3879 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3880 : std_string_String = match v3869 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3871 = v3880 
                                            #endif
#else
                                            let v3881 : std_string_String = match v3869 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3871 = v3881 
                                            #endif
                                            let v3882 : std_string_String = _run_target_args'_v3871 
                                            let v3885 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3886 : string = Fable.Core.RustInterop.emitRustExpr v3882 v3885 
                                            let _run_target_args'_v3815 = v3886 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3888 : string = null |> unbox<string>
                                            let _run_target_args'_v3815 = v3888 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3892 : string = null |> unbox<string>
                                            let _run_target_args'_v3815 = v3892 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3896 : string = null |> unbox<string>
                                            let _run_target_args'_v3815 = v3896 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3900 : string = null |> unbox<string>
                                            let _run_target_args'_v3815 = v3900 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3904 : string = null |> unbox<string>
                                            let _run_target_args'_v3815 = v3904 
                                            #endif
#else
                                            let v3907 : string = v3393 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v3815 = v3907 
                                            #endif
                                            let v3908 : string = _run_target_args'_v3815 
                                            let v3914 : string = method237()
                                            let v3915 : string = "pub fn main() -> Result<(), String> "
                                            let v3916 : string = v3915 + v3914 
                                            let v3917 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3950 : string =
                                                if v3917 then
                                                    let v3918 : string = ""
                                                    v3918
                                                else
                                                    let v3919 : string = $"#[near_sdk::near_bindgen]"
                                                    let v3920 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v3921 : string = v3919 + v3515 
                                                    let v3922 : string = v3921 + v3920 
                                                    let v3923 : string = $"pub struct MainState {{"
                                                    let v3924 : string = v3922 + v3515 
                                                    let v3925 : string = v3924 + v3923 
                                                    let v3926 : string = $"}}"
                                                    let v3927 : string = v3925 + v3515 
                                                    let v3928 : string = v3927 + v3926 
                                                    let v3929 : string = $""
                                                    let v3930 : string = v3928 + v3515 
                                                    let v3931 : string = v3930 + v3929 
                                                    let v3932 : string = $"#[near_sdk::near_bindgen]"
                                                    let v3933 : string = v3931 + v3515 
                                                    let v3934 : string = v3933 + v3932 
                                                    let v3935 : string = $"impl MainState {{"
                                                    let v3936 : string = v3934 + v3515 
                                                    let v3937 : string = v3936 + v3935 
                                                    let v3938 : string = $"    pub fn state_main() {{"
                                                    let v3939 : string = v3937 + v3515 
                                                    let v3940 : string = v3939 + v3938 
                                                    let v3941 : string = $"        Spiral::method0();"
                                                    let v3942 : string = v3940 + v3515 
                                                    let v3943 : string = v3942 + v3941 
                                                    let v3944 : string = $"    }}"
                                                    let v3945 : string = v3943 + v3515 
                                                    let v3946 : string = v3945 + v3944 
                                                    let v3947 : string = $"}}"
                                                    let v3948 : string = v3946 + v3515 
                                                    let v3949 : string = v3948 + v3947 
                                                    v3949
                                            let v3951 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3958 : bool =
                                                if v3951 then
                                                    let v3952 : string = "Spiral::method0()"
                                                    let v3953 : string = v3499 + v3952 
                                                    let v3955 : bool = v3908.Contains v3953 
                                                    v3955
                                                else
                                                    false
                                            let v3961 : string =
                                                if v3958 then
                                                    let v3959 : string = $"{v3916} Ok(Spiral::method0()) }}"
                                                    v3959
                                                else
                                                    let v3960 : string = $"{v3916} Ok(()) }}"
                                                    v3960
                                            let v3962 : string = v3950 + v3515 
                                            let v3963 : string = v3962 + v3961 
                                            let v3965 : bool = v3908.Contains v3916 
                                            let v3968 : string = $"{v3908}\n\n{v3963}\n"
                                            let v4067 : string =
                                                if v3965 then
                                                    v3908
                                                else
                                                    let v3972 : bool =
                                                        match v2879 with
                                                        | US36_0(v3969) -> (* Some *)
                                                            match v3969 with
                                                            | US37_1(v3970) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v3973 : string = "\";\".into()"
                                                    let v3974 : string = Fable.Core.RustInterop.emitRustExpr () v3973 
                                                    let v3975 : string = "),)"
                                                    let v3976 : string = v3975 + v3974 
                                                    let v3977 : string = "));"
                                                    let v3978 : string = v3968.Replace (v3976, v3977)
                                                    let v3979 : string = "\";\".into()"
                                                    let v3980 : string = Fable.Core.RustInterop.emitRustExpr () v3979 
                                                    let v3981 : string = "},)"
                                                    let v3982 : string = v3981 + v3980 
                                                    let v3983 : string = "});"
                                                    let v3984 : string = v3978.Replace (v3982, v3983)
                                                    let v3985 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v3986 : string = " defaultOf::<()>();"
                                                    let v3987 : string = method65(v3985, v3986, v3984)
                                                    let v3988 : string = "\\s\\sgetZero\\(\\);"
                                                    let v3989 : string = " getZero::<()>();"
                                                    let v3990 : string = method65(v3988, v3989, v3987)
                                                    let v3991 : string = "\"t\".into()"
                                                    let v3992 : string = Fable.Core.RustInterop.emitRustExpr () v3991 
                                                    let v3993 : string = "(&e.get_Curren"
                                                    let v3994 : string = v3993 + v3992 
                                                    let v3995 : string = "(e.get_Current"
                                                    let v3996 : string = v3990.Replace (v3994, v3995)
                                                    let v3997 : string = "\"::<()>()\".into()"
                                                    let v3998 : string = Fable.Core.RustInterop.emitRustExpr () v3997 
                                                    let v3999 : string = "getNull"
                                                    let v4000 : string = v3999 + v3998 
                                                    let v4001 : string = "fable_library_rust::Native_::getZero()"
                                                    let v4002 : string = v3996.Replace (v4000, v4001)
                                                    let v4003 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v4004 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v4005 : string = method65(v4003, v4004, v4002)
                                                    let v4006 : string = "::Slice'_"
                                                    let v4007 : string = "::Slice__"
                                                    let v4008 : string = v4005.Replace (v4006, v4007)
                                                    let v4009 : string = " Slice'_"
                                                    let v4010 : string = " Slice__"
                                                    let v4011 : string = v4008.Replace (v4009, v4010)
                                                    let v4012 : string = "\",\".into()"
                                                    let v4013 : string = Fable.Core.RustInterop.emitRustExpr () v4012 
                                                    let v4014 : string = "defaultOf()"
                                                    let v4015 : string = v4014 + v4013 
                                                    let v4016 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v4017 : string = v4011.Replace (v4015, v4016)
                                                    let v4018 : string = "\"__.\".into()"
                                                    let v4019 : string = Fable.Core.RustInterop.emitRustExpr () v4018 
                                                    let v4020 : string = "__self"
                                                    let v4021 : string = v4020 + v4019 
                                                    let v4022 : string = "self."
                                                    let v4023 : string = v4017.Replace (v4021, v4022)
                                                    let v4024 : string = "\"_.\".into()"
                                                    let v4025 : string = Fable.Core.RustInterop.emitRustExpr () v4024 
                                                    let v4026 : string = "_self"
                                                    let v4027 : string = v4026 + v4025 
                                                    let v4028 : string = v4023.Replace (v4027, v4022)
                                                    let v4029 : string = "\"h\".into()"
                                                    let v4030 : string = Fable.Core.RustInterop.emitRustExpr () v4029 
                                                    let v4031 : string = "get_or_insert_wit"
                                                    let v4032 : string = v4031 + v4030 
                                                    let v4033 : string = "get_or_init"
                                                    let v4034 : string = v4028.Replace (v4032, v4033)
                                                    let v4035 : string = "\";\".into()"
                                                    let v4036 : string = Fable.Core.RustInterop.emitRustExpr () v4035 
                                                    let v4037 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v4038 : string = v4037 + v4036 
                                                    let v4039 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v4040 : string = v4034.Replace (v4038, v4039)
                                                    let v4041 : string = "\";\".into()"
                                                    let v4042 : string = Fable.Core.RustInterop.emitRustExpr () v4041 
                                                    let v4043 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v4044 : string = v4043 + v4042 
                                                    let v4045 : string = "type TimeZoneInfo = i64;"
                                                    let v4046 : string = v4040.Replace (v4044, v4045)
                                                    let v4047 : string = "\";\".into()"
                                                    let v4048 : string = Fable.Core.RustInterop.emitRustExpr () v4047 
                                                    let v4049 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v4050 : string = v4049 + v4048 
                                                    let v4051 : string = "type TaskCanceledException = ();"
                                                    let v4052 : string = v4046.Replace (v4050, v4051)
                                                    let v4057 : (string -> string) =
                                                        if v3512 then
                                                            closure94()
                                                        else
                                                            let v4054 : string = "// "
                                                            let v4055 : string = v4054 + v3499 
                                                            closure95(v3499, v4055)
                                                    let v4058 : string = v4057 v4052
                                                    let v4059 : bool = v3972 = false
                                                    let v4065 : (string -> string) =
                                                        if v4059 then
                                                            closure94()
                                                        else
                                                            let v4061 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v4062 : string = ";"
                                                            let v4063 : string = v4061 + v4062 
                                                            closure96(v4063)
                                                    v4065 v4058
                                            let v4068 : bool = v3965 = false
                                            if v4068 then
                                                method71(v3393, v4067)
                                            let v4069 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4070 : bool = v4069 <> true
                                            let v4073 : string =
                                                if v4070 then
                                                    let v4071 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v3122}\""
                                                    v4071
                                                else
                                                    let v4072 : string = $"cargo run --manifest-path \"{v3122}\""
                                                    v4072
                                            let v4074 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4075 : bool = v4074 <> true
                                            let v4086 : (struct (string * string) []) =
                                                if v4075 then
                                                    [||]
                                                else
                                                    let v4077 : string = "TRACE_LEVEL"
                                                    let v4078 : string = "Verbose"
                                                    let v4079 : string = "RUSTC_WRAPPER"
                                                    let v4080 : string = "sccache"
                                                    let v4081 : string = "RUST_BACKTRACE"
                                                    let v4082 : string = "full"
                                                    let v4083 : string = "RUSTFLAGS"
                                                    let v4084 : string = "-C prefer-dynamic"
                                                    [|struct (v4077, v4078); struct (v4079, v4080); struct (v4081, v4082); struct (v4083, v4084)|]
                                            let v4087 : System.Threading.CancellationToken option = None
                                            let v4088 : (struct (string * string) []) = [||]
                                            let v4089 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v4090 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v4091 : string option = None
                                            let v4097 : Result<string, string> =
                                                match v3036 with
                                                | US10_1(v4094) -> (* Error *)
                                                    let v4095 : Result<string, string> = Error v4094 
                                                    v4095
                                                | US10_0(v4092) -> (* Ok *)
                                                    let v4093 : Result<string, string> = Ok v4092 
                                                    v4093
                                            (* run_target_args'
                                            let v4099 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4100 : string = "$0.ok()"
                                            let v4101 : string option = Fable.Core.RustInterop.emitRustExpr v4097 v4100 
                                            let _run_target_args'_v4099 = v4101 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4102 : string = "$0.ok()"
                                            let v4103 : string option = Fable.Core.RustInterop.emitRustExpr v4097 v4102 
                                            let _run_target_args'_v4099 = v4103 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4104 : string = "$0.ok()"
                                            let v4105 : string option = Fable.Core.RustInterop.emitRustExpr v4097 v4104 
                                            let _run_target_args'_v4099 = v4105 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4106 : string option = match v4097 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4099 = v4106 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4107 : string option = match v4097 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4099 = v4107 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4108 : string option = match v4097 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4099 = v4108 
                                            #endif
#else
                                            let v4109 : string option = match v4097 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4099 = v4109 
                                            #endif
                                            let v4110 : string option = _run_target_args'_v4099 
                                            let v4113 : bool = true
                                            let struct (v4114 : int32, v4115 : string) = method96(v4073, v4087, v4086, v4089, v4090, v4113, v4110)
                                            let v4116 : bool =
                                                match v2879 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v4380 : US5, v4381 : US5, v4382 : US5, v4383 : US5) =
                                                if v4116 then
                                                    let v4117 : int32 = v4086.Length
                                                    let v4118 : (string []) = Array.zeroCreate<string> (v4117)
                                                    let v4119 : Mut5 = {l0 = 0} : Mut5
                                                    while method31(v4117, v4119) do
                                                        let v4121 : int32 = v4119.l0
                                                        let struct (v4122 : string, v4123 : string) = v4086.[int v4121]
                                                        let v4124 : string = $"$env:{v4122}=''{v4123}''"
                                                        v4118.[int v4121] <- v4124
                                                        let v4125 : int32 = v4121 + 1
                                                        v4119.l0 <- v4125
                                                        ()
                                                    let v4127 : string seq = v4118 |> Seq.ofArray
                                                    let v4131 : (string -> (string seq -> string)) = String.concat
                                                    let v4132 : string = ";"
                                                    let v4133 : (string seq -> string) = v4131 v4132
                                                    let v4134 : string = v4133 v4127
                                                    let v4137 : (string []) = [|v4134; v4073|]
                                                    let v4139 : string seq = v4137 |> Seq.ofArray
                                                    let v4143 : (string -> (string seq -> string)) = String.concat
                                                    let v4144 : (string seq -> string) = v4143 v4132
                                                    let v4145 : string = v4144 v4139
                                                    let v4148 : string = $"pwsh -c '{v4145}'"
                                                    let v4150 : bool = v4114 <> 0 
                                                    let struct (v4229 : US5, v4230 : US5, v4231 : US5, v4232 : US5) =
                                                        if v4150 then
                                                            let v4153 : unit = ()
                                                            let v4154 : (unit -> unit) = closure97(v2744, v3393, v4115, v4114, v4148)
                                                            let v4155 : unit = (fun () -> v4154 (); v4153) ()
                                                            let v4202 : US5 = US5_0(v2983)
                                                            let v4203 : US5 = US5_1
                                                            let v4204 : US5 = US5_1
                                                            let v4205 : US5 = US5_1
                                                            struct (v4202, v4203, v4204, v4205)
                                                        else
                                                            let v4206 : (string -> US5) = closure71()
                                                            let v4207 : (unit -> string) = closure98(v4115)
                                                            let v4208 : (exn -> US5) = closure100(v3393, v4115, v4148)
                                                            let v4210 : US5 = US5_1
                                                            let result = ref v4210
                                                            try
                                                                result.Value <- v4207 () |> v4206 
                                                            with ex ->
                                                                result.Value <- v4208 ex 
                                                            let v4211 : US5 = result.Value
                                                            let v4222 : string option =
                                                                match v4211 with
                                                                | US5_1 -> (* None *)
                                                                    let v4220 : string option = None
                                                                    v4220
                                                                | US5_0(v4215) -> (* Some *)
                                                                    let v4217 : string option = Some v4215 
                                                                    v4217
                                                            let v4223 : string = "$0.unwrap()"
                                                            let v4224 : string = Fable.Core.RustInterop.emitRustExpr v4222 v4223 
                                                            let v4225 : US5 = US5_0(v2983)
                                                            let v4226 : US5 = US5_0(v4067)
                                                            let v4227 : US5 = US5_0(v3393)
                                                            let v4228 : US5 = US5_0(v4224)
                                                            struct (v4225, v4226, v4227, v4228)
                                                    struct (v4229, v4230, v4231, v4232)
                                                else
                                                    let v4233 : string = $"target/spiral/{v3051}/target/wasm32-unknown-unknown/release/spiral_{v2985}.wasm"
                                                    let v4240 : string =
                                                        match v2879 with
                                                        | US36_0(v4234) -> (* Some *)
                                                            match v4234 with
                                                            | US37_1(v4236) -> (* Contract *)
                                                                v4236
                                                            | US37_0(v4235) -> (* Wasm *)
                                                                v4235
                                                        | _ ->
                                                            let v4239 : string = ""
                                                            v4239
                                                    let v4241 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v4233} -t Debug {v4240}'"
                                                    let v4242 : string = "AUTOMATION"
                                                    let v4243 : string = method3(v4242)
                                                    let v4244 : string = "scripts/invoke-block.ps1"
                                                    let v4245 : string = $"pwsh -c \"pwsh {v4244} {v4241} -Linux -EnvironmentVariables AUTOMATION={v4243}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v4246 : bool = v4114 = 0
                                                    let struct (v4376 : US5, v4377 : US5, v4378 : US5, v4379 : US5) =
                                                        if v4246 then
                                                            let v4247 : System.Threading.CancellationToken option = None
                                                            let v4248 : (struct (string * string) []) = [||]
                                                            let v4249 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v4250 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v4251 : string option = None
                                                            let v4253 : string option = Some v3050 
                                                            let v4256 : bool = true
                                                            let struct (v4257 : int32, v4258 : string) = method96(v4245, v4247, v4248, v4249, v4250, v4256, v4253)
                                                            let v4259 : bool = v4257 = 0
                                                            let struct (v4318 : US5, v4319 : US5, v4320 : US5, v4321 : US5) =
                                                                if v4259 then
                                                                    let v4260 : US5 = US5_0(v2983)
                                                                    let v4261 : US5 = US5_0(v4067)
                                                                    let v4262 : US5 = US5_0(v3393)
                                                                    let v4263 : US5 = US5_0(v4258)
                                                                    struct (v4260, v4261, v4262, v4263)
                                                                else
                                                                    let v4264 : unit = ()
                                                                    let v4265 : (unit -> unit) = closure102(v2744, v3393, v4115, v4258, v4257)
                                                                    let v4266 : unit = (fun () -> v4265 (); v4264) ()
                                                                    let v4314 : US5 = US5_0(v2983)
                                                                    let v4315 : US5 = US5_1
                                                                    let v4316 : US5 = US5_1
                                                                    let v4317 : US5 = US5_1
                                                                    struct (v4314, v4315, v4316, v4317)
                                                            struct (v4318, v4319, v4320, v4321)
                                                        else
                                                            let v4322 : unit = ()
                                                            let v4323 : (unit -> unit) = closure103(v2744, v3393, v4115, v4114, v4233, v4245)
                                                            let v4324 : unit = (fun () -> v4323 (); v4322) ()
                                                            let v4372 : US5 = US5_0(v2983)
                                                            let v4373 : US5 = US5_1
                                                            let v4374 : US5 = US5_1
                                                            let v4375 : US5 = US5_1
                                                            struct (v4372, v4373, v4374, v4375)
                                                    struct (v4376, v4377, v4378, v4379)
                                            if v2744 then
                                                let v4384 : bool =
                                                    match v2879 with
                                                    | US36_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v4385 : bool = v4384 <> true
                                                let v4388 : string =
                                                    if v4385 then
                                                        let v4386 : string = "wasm32-unknown-unknown/release"
                                                        v4386
                                                    else
                                                        let v4387 : string = "debug"
                                                        v4387
                                                let v4389 : string = ""
                                                let v4390 : string = $"target/{v4388}/spiral_{v2985}{v4389}"
                                                let v4391 : string = method35(v3063, v4390)
                                                let v4392 : string = ".wasm"
                                                let v4393 : string = $"target/{v4388}/spiral_{v2985}{v4392}"
                                                let v4394 : string = method35(v3063, v4393)
                                                let v4395 : string = ".pdb"
                                                let v4396 : string = $"target/{v4388}/spiral_{v2985}{v4395}"
                                                let v4397 : string = method35(v3063, v4396)
                                                let v4398 : string = ".exe"
                                                let v4399 : string = $"target/{v4388}/spiral_{v2985}{v4398}"
                                                let v4400 : string = method35(v3063, v4399)
                                                let v4401 : string = ".d"
                                                let v4402 : string = $"target/{v4388}/spiral_{v2985}{v4401}"
                                                let v4403 : string = method35(v3063, v4402)
                                                let v4404 : bool = method37(v4391)
                                                let v4405 : bool = method37(v4394)
                                                let v4406 : bool = method37(v4397)
                                                let v4407 : bool = method37(v4400)
                                                let v4408 : bool = method37(v4403)
                                                let v4409 : unit = ()
                                                let v4410 : (unit -> unit) = closure104(v3393, v4403, v4408, v4400, v4407, v4397, v4406, v4394, v4405, v4391, v4404)
                                                let v4411 : unit = (fun () -> v4410 (); v4409) ()
                                                let v4461 : UH5 =
                                                    if v4404 then
                                                        let v4458 : UH5 = UH5_0
                                                        UH5_1(v4391, v4404, v4458)
                                                    else
                                                        UH5_0
                                                let v4463 : UH5 =
                                                    if v4405 then
                                                        UH5_1(v4394, v4405, v4461)
                                                    else
                                                        v4461
                                                let v4465 : UH5 =
                                                    if v4406 then
                                                        UH5_1(v4397, v4406, v4463)
                                                    else
                                                        v4463
                                                let v4467 : UH5 =
                                                    if v4407 then
                                                        UH5_1(v4400, v4407, v4465)
                                                    else
                                                        v4465
                                                let v4469 : UH5 =
                                                    if v4408 then
                                                        UH5_1(v4403, v4408, v4467)
                                                    else
                                                        v4467
                                                method248(v4469)
                                            struct (v4380, v4381, v4382, v4383)
                                    struct (v4470, v4471, v4472, v4473)
                                else
                                    let v4474 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4475 : string = Fable.Core.RustInterop.emitRustExpr v32 v4474 
                                    let v4476 : bool = v4475 = "typescript"
                                    let struct (v6168 : US5, v6169 : US5, v6170 : US5, v6171 : US5) =
                                        if v4476 then
                                            let v4477 : string = method183()
                                            (* run_target_args'
                                            let v4482 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4483 : string = "&*$0"
                                            let v4484 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4477 v4483 
                                            let _run_target_args'_v4482 = v4484 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4485 : string = "&*$0"
                                            let v4486 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4477 v4485 
                                            let _run_target_args'_v4482 = v4486 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4487 : string = "&*$0"
                                            let v4488 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4477 v4487 
                                            let _run_target_args'_v4482 = v4488 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4490 : Ref<Str> = v4477 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4482 = v4490 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4494 : Ref<Str> = v4477 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4482 = v4494 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4498 : Ref<Str> = v4477 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4482 = v4498 
                                            #endif
#else
                                            let v4502 : Ref<Str> = v4477 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4482 = v4502 
                                            #endif
                                            let v4505 : Ref<Str> = _run_target_args'_v4482 
                                            let v4511 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v4512 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v4505) v4511 
                                            let v4514 : (std_string_String -> US7) = method23()
                                            let v4515 : US7 option = v4512 |> Option.map v4514 
                                            let v4528 : US7 = US7_1
                                            let v4529 : US7 = v4515 |> Option.defaultValue v4528 
                                            let v4536 : std_string_String =
                                                match v4529 with
                                                | US7_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US7_0(v4533) -> (* Some *)
                                                    v4533
                                            let v4537 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4538 : string = Fable.Core.RustInterop.emitRustExpr v4536 v4537 
                                            let v4539 : string = method24()
                                            (* run_target_args'
                                            let v4544 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4545 : string = "&*$0"
                                            let v4546 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4539 v4545 
                                            let _run_target_args'_v4544 = v4546 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4547 : string = "&*$0"
                                            let v4548 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4539 v4547 
                                            let _run_target_args'_v4544 = v4548 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4549 : string = "&*$0"
                                            let v4550 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4539 v4549 
                                            let _run_target_args'_v4544 = v4550 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4552 : Ref<Str> = v4539 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4544 = v4552 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4556 : Ref<Str> = v4539 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4544 = v4556 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4560 : Ref<Str> = v4539 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4544 = v4560 
                                            #endif
#else
                                            let v4564 : Ref<Str> = v4539 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4544 = v4564 
                                            #endif
                                            let v4567 : Ref<Str> = _run_target_args'_v4544 
                                            let v4573 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v4574 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v33, v4567) v4573 
                                            let v4576 : (Vec<std_string_String> -> US8) = method25()
                                            let v4577 : US8 option = v4574 |> Option.map v4576 
                                            let v4590 : US8 = US8_1
                                            let v4591 : US8 = v4577 |> Option.defaultValue v4590 
                                            let v4595 : (std_string_String []) = [||]
                                            let v4596 : string = "$0.to_vec()"
                                            let v4597 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4595 v4596 
                                            let v4600 : Vec<std_string_String> =
                                                match v4591 with
                                                | US8_1 -> (* None *)
                                                    v4597
                                                | US8_0(v4598) -> (* Some *)
                                                    v4598
                                            (* run_target_args'
                                            let v4605 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4610 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4611 : string = "std::fs::read(&*$0)"
                                            let v4612 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4538 v4611 
                                            (* run_target_args'
                                            let v4614 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4615 : string = "$0.unwrap()"
                                            let v4616 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4612 v4615 
                                            let _run_target_args'_v4614 = v4616 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4617 : string = "$0.unwrap()"
                                            let v4618 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4612 v4617 
                                            let _run_target_args'_v4614 = v4618 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4619 : string = "$0.unwrap()"
                                            let v4620 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4612 v4619 
                                            let _run_target_args'_v4614 = v4620 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4621 : Vec<uint8> = match v4612 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4614 = v4621 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4622 : Vec<uint8> = match v4612 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4614 = v4622 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4623 : Vec<uint8> = match v4612 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4614 = v4623 
                                            #endif
#else
                                            let v4624 : Vec<uint8> = match v4612 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4614 = v4624 
                                            #endif
                                            let v4625 : Vec<uint8> = _run_target_args'_v4614 
                                            let _run_target_args'_v4610 = v4625 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4629 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4610 = v4629 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4633 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4610 = v4633 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4637 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4610 = v4637 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4641 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4610 = v4641 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4645 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4610 = v4645 
                                            #endif
#else
                                            let v4648 : (uint8 []) = v4538 |> System.IO.File.ReadAllBytes
                                            let v4649 : string = "$0.to_vec()"
                                            let v4650 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4648 v4649 
                                            let _run_target_args'_v4610 = v4650 
                                            #endif
                                            let v4651 : Vec<uint8> = _run_target_args'_v4610 
                                            let v4657 : Vec<uint8> = method26(v4651)
                                            let v4658 : string = "std::string::String::from_utf8($0)"
                                            let v4659 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4657 v4658 
                                            (* run_target_args'
                                            let v4661 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4662 : string = "$0.unwrap()"
                                            let v4663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4659 v4662 
                                            let _run_target_args'_v4661 = v4663 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4664 : string = "$0.unwrap()"
                                            let v4665 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4659 v4664 
                                            let _run_target_args'_v4661 = v4665 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4666 : string = "$0.unwrap()"
                                            let v4667 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4659 v4666 
                                            let _run_target_args'_v4661 = v4667 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4668 : std_string_String = match v4659 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4661 = v4668 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4669 : std_string_String = match v4659 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4661 = v4669 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4670 : std_string_String = match v4659 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4661 = v4670 
                                            #endif
#else
                                            let v4671 : std_string_String = match v4659 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4661 = v4671 
                                            #endif
                                            let v4672 : std_string_String = _run_target_args'_v4661 
                                            let v4675 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4676 : string = Fable.Core.RustInterop.emitRustExpr v4672 v4675 
                                            let _run_target_args'_v4605 = v4676 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4678 : string = null |> unbox<string>
                                            let _run_target_args'_v4605 = v4678 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4682 : string = null |> unbox<string>
                                            let _run_target_args'_v4605 = v4682 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4686 : string = null |> unbox<string>
                                            let _run_target_args'_v4605 = v4686 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4690 : string = null |> unbox<string>
                                            let _run_target_args'_v4605 = v4690 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4694 : string = null |> unbox<string>
                                            let _run_target_args'_v4605 = v4694 
                                            #endif
#else
                                            let v4697 : string = v4538 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4605 = v4697 
                                            #endif
                                            let v4698 : string = _run_target_args'_v4605 
                                            let v4705 : string = "ts"
                                            let v4706 : string = $"%A{struct (v4705, v4698)}"
                                            let v4709 : string = method28(v4706)
                                            let v4710 : string = method33()
                                            let v4711 : US5 = method34(v4710)
                                            let v4717 : US5 =
                                                match v4711 with
                                                | US5_1 -> (* None *)
                                                    let v4714 : string = __SOURCE_DIRECTORY__
                                                    method34(v4714)
                                                | US5_0(v4712) -> (* Some *)
                                                    US5_0(v4712)
                                            let v4723 : US5 =
                                                match v4717 with
                                                | US5_1 -> (* None *)
                                                    let v4720 : string = "/workspaces"
                                                    method34(v4720)
                                                | US5_0(v4718) -> (* Some *)
                                                    US5_0(v4718)
                                            let v4727 : string =
                                                match v4723 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v4724) -> (* Some *)
                                                    v4724
                                            let v4728 : string = method54(v4727)
                                            let v4729 : bool = "deps" = v4728
                                            let v4740 : string =
                                                if v4729 then
                                                    let v4730 : string option = method40(v4727)
                                                    let v4732 : string = v4730 |> Option.get
                                                    let v4735 : US5 = method34(v4732)
                                                    match v4735 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v4736) -> (* Some *)
                                                        v4736
                                                else
                                                    v4727
                                            let v4741 : string = "polyglot"
                                            let v4742 : string = method35(v4740, v4741)
                                            let v4743 : string = method33()
                                            let v4745 : (unit -> string) = v4743.ToLower
                                            let v4746 : string = v4745 ()
                                            let v4750 : (unit -> string) = v4742.ToLower
                                            let v4751 : string = v4750 ()
                                            let v4755 : bool = v4746.StartsWith (v4751, false, null)
                                            let v4760 : US10 =
                                                if v4755 then
                                                    US10_1(v4751)
                                                else
                                                    US10_0(v4751)
                                            let v4766 : Result<string, string> =
                                                match v4760 with
                                                | US10_1(v4763) -> (* Error *)
                                                    let v4764 : Result<string, string> = Error v4763 
                                                    v4764
                                                | US10_0(v4761) -> (* Ok *)
                                                    let v4762 : Result<string, string> = Ok v4761 
                                                    v4762
                                            let v4767 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v4768 : bool = Fable.Core.RustInterop.emitRustExpr v4766 v4767 
                                            let v4769 : string = "x"
                                            let v4770 : string = Fable.Core.RustInterop.emitRustExpr () v4769 
                                            let v4771 : string = "true; $0 })"
                                            let v4772 : bool = Fable.Core.RustInterop.emitRustExpr v4770 v4771 
                                            let v4773 : string = "_result_unwrap_or_else"
                                            let v4774 : string = Fable.Core.RustInterop.emitRustExpr () v4773 
                                            let v4775 : string = "spiral"
                                            let v4776 : US38 = US38_1
                                            let v4777 : US39 = US39_0(v4776)
                                            let v4778 : US5 = US5_0(v4709)
                                            let v4779 : string = method207(v4778, v4775, v4777, v4774)
                                            let v4780 : string = "Fable.Core"
                                            let v4781 : string = "4.3.0"
                                            let v4782 : UH4 = UH4_0
                                            let v4783 : UH4 = UH4_1(v4780, v4781, v4782)
                                            let v4784 : UH2 = UH2_0
                                            let v4785 : string = method208(v4698, v4775, v4784, v4783, v4779, v4774)
                                            let v4786 : string = "lib/typescript/fable/fable_modules"
                                            let v4787 : string = method35(v4774, v4786)
                                            let v4788 : string = $"fable-library-{v4705}"
                                            let v4789 : string = method253(v4788)
                                            let v4790 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v4791 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v4787 v4790 
                                            let v4792 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v4793 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v4788)
                                            let v4794 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v4791, v4793) v4792 
                                            let v4795 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method257(v4789)
                                            let v4796 : string = "futures::stream::StreamExt::filter_map(v4794, |x| async { v4795(x) })"
                                            let v4797 : _ = Fable.Core.RustInterop.emitRustExpr () v4796 
                                            let v4798 : string = "Box::pin(futures::stream::StreamExt::collect(v4797))"
                                            let v4799 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v4798 
                                            let v4800 : string = "v4799.await"
                                            let v4801 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v4800 
                                            let v4802 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v4803 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4801 v4802 
                                            let v4804 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v4805 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v4806 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v4803, v4805) v4804 
                                            let v4807 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v4808 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4806 v4807 
                                            let v4809 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v4810 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v4808 v4809 
                                            let v4811 : struct (string * string) option = v4810 |> Array.tryItem 0 
                                            let v4813 : (struct (string * string) -> US48) = method262()
                                            let v4814 : US48 option = v4811 |> Option.map v4813 
                                            let v4828 : US48 = US48_1
                                            let v4829 : US48 = v4814 |> Option.defaultValue v4828 
                                            let v4833 : unit = ()
                                            let v4834 : (unit -> unit) = closure118(v4829)
                                            let v4835 : unit = (fun () -> v4834 (); v4833) ()
                                            method265(v4779, v4787, v4829)
                                            let v4882 : US36 = US36_1
                                            let struct (v4883 : int32, v4884 : string) = method217(v4882, v4779, v4705, v4785, v4760)
                                            method265(v4779, v4787, v4829)
                                            let v4886 : bool = v4883 <> 0 
                                            let struct (v5360 : US5, v5361 : US5, v5362 : US5, v5363 : US5) =
                                                if v4886 then
                                                    let v4889 : unit = ()
                                                    let v4890 : (unit -> unit) = closure119(v4884, v4883)
                                                    let v4891 : unit = (fun () -> v4890 (); v4889) ()
                                                    let v4938 : US5 = US5_0(v4705)
                                                    let v4939 : US5 = US5_1
                                                    let v4940 : US5 = US5_1
                                                    let v4941 : US5 = US5_0(v4884)
                                                    struct (v4938, v4939, v4940, v4941)
                                                else
                                                    let v4942 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v4943 : bool = Fable.Core.RustInterop.emitRustExpr v4600 v4942 
                                                    let v4944 : string = "x"
                                                    let v4945 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4944 
                                                    let v4946 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v4947 : string = Fable.Core.RustInterop.emitRustExpr v4945 v4946 
                                                    let v4949 : string = "="
                                                    let v4950 : bool = v4947.Contains v4949 
                                                    let v4954 : string =
                                                        if v4950 then
                                                            v4947
                                                        else
                                                            let v4953 : string = $"\"{v4947}\":\"*\""
                                                            v4953
                                                    let v4955 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v4956 : bool = Fable.Core.RustInterop.emitRustExpr v4954 v4955 
                                                    let v4957 : string = "_vec_map"
                                                    let v4958 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4957 
                                                    let v4959 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v4960 : (string []) = Fable.Core.RustInterop.emitRustExpr v4958 v4959 
                                                    let v4964 : unit = ()
                                                    let _let'_v4964 =
                                                        seq {
                                                            for i = 0 to v4960.Length - 1 do yield v4960.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v4967 : string seq = _let'_v4964 
                                                    let v4974 : (string -> (string seq -> string)) = String.concat
                                                    let v4975 : string = ",\n"
                                                    let v4976 : (string seq -> string) = v4974 v4975
                                                    let v4977 : string = v4976 v4967
                                                    let v4980 : string = $"{{"
                                                    let v4981 : string = $"  \"name\": \"spiral_{v4709}\","
                                                    let v4982 : string = v4980 + v4981 
                                                    let v4983 : string = $"  \"dependencies\": {{"
                                                    let v4984 : string = v4982 + v4983 
                                                    let v4985 : string = v4984 + v4977 
                                                    let v4986 : string = $"  }},"
                                                    let v4987 : string = v4985 + v4986 
                                                    let v4988 : string = $"    \"devDependencies\": {{"
                                                    let v4989 : string = v4987 + v4988 
                                                    let v4990 : string = $"  }},"
                                                    let v4991 : string = v4989 + v4990 
                                                    let v4992 : string = $"}}"
                                                    let v4993 : string = v4991 + v4992 
                                                    let v4994 : string = "package.json"
                                                    let v4995 : string = method35(v4779, v4994)
                                                    let v4996 : string = "../.."
                                                    let v4997 : string = method35(v4779, v4996)
                                                    let v4998 : string = method35(v4997, v4994)
                                                    method71(v4995, v4993)
                                                    let v4999 : string = ""
                                                    method71(v4998, v4999)
                                                    let v5000 : string = $"{v4775}.{v4705}"
                                                    let v5001 : string = method35(v4779, v5000)
                                                    let v5002 : unit = ()
                                                    let v5003 : (unit -> unit) = closure120(v5001)
                                                    let v5004 : unit = (fun () -> v5003 (); v5002) ()
                                                    (* run_target_args'
                                                    let v5055 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v5060 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5061 : string = "std::fs::read(&*$0)"
                                                    let v5062 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5001 v5061 
                                                    (* run_target_args'
                                                    let v5064 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5065 : string = "$0.unwrap()"
                                                    let v5066 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5062 v5065 
                                                    let _run_target_args'_v5064 = v5066 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5067 : string = "$0.unwrap()"
                                                    let v5068 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5062 v5067 
                                                    let _run_target_args'_v5064 = v5068 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5069 : string = "$0.unwrap()"
                                                    let v5070 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5062 v5069 
                                                    let _run_target_args'_v5064 = v5070 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5071 : Vec<uint8> = match v5062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5064 = v5071 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5072 : Vec<uint8> = match v5062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5064 = v5072 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5073 : Vec<uint8> = match v5062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5064 = v5073 
                                                    #endif
#else
                                                    let v5074 : Vec<uint8> = match v5062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5064 = v5074 
                                                    #endif
                                                    let v5075 : Vec<uint8> = _run_target_args'_v5064 
                                                    let _run_target_args'_v5060 = v5075 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5079 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5060 = v5079 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5083 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5060 = v5083 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5087 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5060 = v5087 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5091 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5060 = v5091 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5095 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5060 = v5095 
                                                    #endif
#else
                                                    let v5098 : (uint8 []) = v5001 |> System.IO.File.ReadAllBytes
                                                    let v5099 : string = "$0.to_vec()"
                                                    let v5100 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5098 v5099 
                                                    let _run_target_args'_v5060 = v5100 
                                                    #endif
                                                    let v5101 : Vec<uint8> = _run_target_args'_v5060 
                                                    let v5107 : Vec<uint8> = method26(v5101)
                                                    let v5108 : string = "std::string::String::from_utf8($0)"
                                                    let v5109 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5107 v5108 
                                                    (* run_target_args'
                                                    let v5111 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5112 : string = "$0.unwrap()"
                                                    let v5113 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5109 v5112 
                                                    let _run_target_args'_v5111 = v5113 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5114 : string = "$0.unwrap()"
                                                    let v5115 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5109 v5114 
                                                    let _run_target_args'_v5111 = v5115 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5116 : string = "$0.unwrap()"
                                                    let v5117 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5109 v5116 
                                                    let _run_target_args'_v5111 = v5117 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5118 : std_string_String = match v5109 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5111 = v5118 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5119 : std_string_String = match v5109 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5111 = v5119 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5120 : std_string_String = match v5109 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5111 = v5120 
                                                    #endif
#else
                                                    let v5121 : std_string_String = match v5109 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5111 = v5121 
                                                    #endif
                                                    let v5122 : std_string_String = _run_target_args'_v5111 
                                                    let v5125 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5126 : string = Fable.Core.RustInterop.emitRustExpr v5122 v5125 
                                                    let _run_target_args'_v5055 = v5126 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5128 : string = null |> unbox<string>
                                                    let _run_target_args'_v5055 = v5128 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5132 : string = null |> unbox<string>
                                                    let _run_target_args'_v5055 = v5132 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5136 : string = null |> unbox<string>
                                                    let _run_target_args'_v5055 = v5136 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5140 : string = null |> unbox<string>
                                                    let _run_target_args'_v5055 = v5140 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5144 : string = null |> unbox<string>
                                                    let _run_target_args'_v5055 = v5144 
                                                    #endif
#else
                                                    let v5147 : string = v5001 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v5055 = v5147 
                                                    #endif
                                                    let v5148 : string = _run_target_args'_v5055 
                                                    let v5155 : string = "// spiral.process_typescript"
                                                    let v5156 : bool = v5148.Contains v5155 
                                                    let v5165 : string =
                                                        if v5156 then
                                                            v5148
                                                        else
                                                            let v5159 : string = $"\"./fable_modules/fable-library-ts.{v4829}/"
                                                            let v5160 : string = $"\"{v4774}/lib/typescript/fable/fable_modules/fable-library-ts.{v4829}/"
                                                            let v5161 : string = v5148.Replace (v5159, v5160)
                                                            let v5162 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v5163 : string = " defaultOf::<()>();"
                                                            method65(v5162, v5163, v5161)
                                                    let v5166 : bool = v5156 = false
                                                    if v5166 then
                                                        let v5167 : string = $"{v5165}\n\n{v5155}\n"
                                                        method71(v5001, v5167)
                                                    let v5168 : string = $"bun run \"{v5001}\""
                                                    let v5169 : string = "PATH"
                                                    let v5170 : string = method3(v5169)
                                                    let v5171 : bool = v5170 = ""
                                                    let v5210 : US5 =
                                                        if v5171 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v5177 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5178 : string = "cfg!(windows)"
                                                            let v5179 : bool = Fable.Core.RustInterop.emitRustExpr () v5178 
                                                            let _run_target_args'_v5177 = v5179 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5180 : string = "cfg!(windows)"
                                                            let v5181 : bool = Fable.Core.RustInterop.emitRustExpr () v5180 
                                                            let _run_target_args'_v5177 = v5181 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5182 : string = "cfg!(windows)"
                                                            let v5183 : bool = Fable.Core.RustInterop.emitRustExpr () v5182 
                                                            let _run_target_args'_v5177 = v5183 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5184 : US3 = US3_0
                                                            let v5185 : US4 = US4_4(v5184)
                                                            let v5186 : string = $"platform.is_windows / target: {v5185}"
                                                            let v5187 : bool = failwith<bool> v5186
                                                            let _run_target_args'_v5177 = v5187 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5188 : US3 = US3_0
                                                            let v5189 : US4 = US4_5(v5188)
                                                            let v5190 : string = $"platform.is_windows / target: {v5189}"
                                                            let v5191 : bool = failwith<bool> v5190
                                                            let _run_target_args'_v5177 = v5191 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5192 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v5193 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v5194 : bool = v5193 v5192
                                                            let _run_target_args'_v5177 = v5194 
                                                            #endif
#else
                                                            let v5195 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v5196 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v5197 : bool = v5196 v5195
                                                            let _run_target_args'_v5177 = v5197 
                                                            #endif
                                                            let v5198 : bool = _run_target_args'_v5177 
                                                            let v5206 : string =
                                                                if v5198 then
                                                                    let v5204 : string = ";"
                                                                    v5204
                                                                else
                                                                    let v5205 : string = ":"
                                                                    v5205
                                                            let v5207 : string = "~/.bun/bin"
                                                            let v5208 : string = $"{v5207}{v5206}{v5170}"
                                                            US5_0(v5208)
                                                    let v5216 : UH4 =
                                                        match v5210 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v5211) -> (* Some *)
                                                            let v5212 : UH4 = UH4_0
                                                            UH4_1(v5169, v5211, v5212)
                                                    let v5217 : string = "TRACE_LEVEL"
                                                    let v5218 : string = "Verbose"
                                                    let v5219 : UH4 = UH4_0
                                                    let v5220 : UH4 = UH4_1(v5217, v5218, v5219)
                                                    let v5221 : UH4 = method269(v5216, v5220)
                                                    let v5222 : struct (string * string) list = []
                                                    let v5223 : struct (string * string) list = method270(v5221, v5222)
                                                    let v5225 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v5226 : (struct (string * string) []) = v5225 v5223
                                                    let v5229 : System.Threading.CancellationToken option = None
                                                    let v5230 : (struct (string * string) []) = [||]
                                                    let v5231 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v5232 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v5233 : string option = None
                                                    let v5239 : Result<string, string> =
                                                        match v4760 with
                                                        | US10_1(v5236) -> (* Error *)
                                                            let v5237 : Result<string, string> = Error v5236 
                                                            v5237
                                                        | US10_0(v5234) -> (* Ok *)
                                                            let v5235 : Result<string, string> = Ok v5234 
                                                            v5235
                                                    (* run_target_args'
                                                    let v5241 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5242 : string = "$0.ok()"
                                                    let v5243 : string option = Fable.Core.RustInterop.emitRustExpr v5239 v5242 
                                                    let _run_target_args'_v5241 = v5243 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5244 : string = "$0.ok()"
                                                    let v5245 : string option = Fable.Core.RustInterop.emitRustExpr v5239 v5244 
                                                    let _run_target_args'_v5241 = v5245 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5246 : string = "$0.ok()"
                                                    let v5247 : string option = Fable.Core.RustInterop.emitRustExpr v5239 v5246 
                                                    let _run_target_args'_v5241 = v5247 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5248 : string option = match v5239 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5241 = v5248 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5249 : string option = match v5239 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5241 = v5249 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5250 : string option = match v5239 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5241 = v5250 
                                                    #endif
#else
                                                    let v5251 : string option = match v5239 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5241 = v5251 
                                                    #endif
                                                    let v5252 : string option = _run_target_args'_v5241 
                                                    let v5255 : bool = true
                                                    let struct (v5256 : int32, v5257 : string) = method96(v5168, v5229, v5226, v5231, v5232, v5255, v5252)
                                                    let v5258 : int32 = v5226.Length
                                                    let v5259 : (string []) = Array.zeroCreate<string> (v5258)
                                                    let v5260 : Mut5 = {l0 = 0} : Mut5
                                                    while method31(v5258, v5260) do
                                                        let v5262 : int32 = v5260.l0
                                                        let struct (v5263 : string, v5264 : string) = v5226.[int v5262]
                                                        let v5265 : string = $"$env:{v5263}=''{v5264}''"
                                                        v5259.[int v5262] <- v5265
                                                        let v5266 : int32 = v5262 + 1
                                                        v5260.l0 <- v5266
                                                        ()
                                                    let v5268 : string seq = v5259 |> Seq.ofArray
                                                    let v5272 : (string -> (string seq -> string)) = String.concat
                                                    let v5273 : string = ";"
                                                    let v5274 : (string seq -> string) = v5272 v5273
                                                    let v5275 : string = v5274 v5268
                                                    let v5278 : string = $"pwsh -c '{v5275}; {v5168}'"
                                                    let v5279 : bool = v5256 = 0
                                                    let struct (v5356 : US5, v5357 : US5, v5358 : US5, v5359 : US5) =
                                                        if v5279 then
                                                            let v5280 : (string -> US5) = closure71()
                                                            let v5281 : (unit -> string) = closure121(v5257)
                                                            let v5282 : (exn -> US5) = closure122(v5001, v5257, v5278)
                                                            let v5284 : US5 = US5_1
                                                            let result = ref v5284
                                                            try
                                                                result.Value <- v5281 () |> v5280 
                                                            with ex ->
                                                                result.Value <- v5282 ex 
                                                            let v5285 : US5 = result.Value
                                                            let v5296 : string option =
                                                                match v5285 with
                                                                | US5_1 -> (* None *)
                                                                    let v5294 : string option = None
                                                                    v5294
                                                                | US5_0(v5289) -> (* Some *)
                                                                    let v5291 : string option = Some v5289 
                                                                    v5291
                                                            let v5297 : string = "$0.unwrap()"
                                                            let v5298 : string = Fable.Core.RustInterop.emitRustExpr v5296 v5297 
                                                            let v5299 : US5 = US5_0(v4705)
                                                            let v5300 : US5 = US5_0(v5165)
                                                            let v5301 : US5 = US5_0(v5001)
                                                            let v5302 : US5 = US5_0(v5298)
                                                            struct (v5299, v5300, v5301, v5302)
                                                        else
                                                            let v5303 : unit = ()
                                                            let v5304 : (unit -> unit) = closure124(v5001, v5257, v5256, v5278)
                                                            let v5305 : unit = (fun () -> v5304 (); v5303) ()
                                                            let v5352 : US5 = US5_0(v4705)
                                                            let v5353 : US5 = US5_1
                                                            let v5354 : US5 = US5_1
                                                            let v5355 : US5 = US5_1
                                                            struct (v5352, v5353, v5354, v5355)
                                                    struct (v5356, v5357, v5358, v5359)
                                            struct (v5360, v5361, v5362, v5363)
                                        else
                                            let v5364 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5365 : string = Fable.Core.RustInterop.emitRustExpr v32 v5364 
                                            let v5366 : bool = v5365 = "python"
                                            let struct (v6164 : US5, v6165 : US5, v6166 : US5, v6167 : US5) =
                                                if v5366 then
                                                    let v5367 : string = method183()
                                                    (* run_target_args'
                                                    let v5372 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5373 : string = "&*$0"
                                                    let v5374 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5367 v5373 
                                                    let _run_target_args'_v5372 = v5374 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5375 : string = "&*$0"
                                                    let v5376 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5367 v5375 
                                                    let _run_target_args'_v5372 = v5376 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5377 : string = "&*$0"
                                                    let v5378 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5367 v5377 
                                                    let _run_target_args'_v5372 = v5378 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5380 : Ref<Str> = v5367 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5372 = v5380 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5384 : Ref<Str> = v5367 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5372 = v5384 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5388 : Ref<Str> = v5367 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5372 = v5388 
                                                    #endif
#else
                                                    let v5392 : Ref<Str> = v5367 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5372 = v5392 
                                                    #endif
                                                    let v5395 : Ref<Str> = _run_target_args'_v5372 
                                                    let v5401 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v5402 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v33, v5395) v5401 
                                                    let v5404 : (std_string_String -> US7) = method23()
                                                    let v5405 : US7 option = v5402 |> Option.map v5404 
                                                    let v5418 : US7 = US7_1
                                                    let v5419 : US7 = v5405 |> Option.defaultValue v5418 
                                                    let v5426 : std_string_String =
                                                        match v5419 with
                                                        | US7_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US7_0(v5423) -> (* Some *)
                                                            v5423
                                                    let v5427 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5428 : string = Fable.Core.RustInterop.emitRustExpr v5426 v5427 
                                                    let v5429 : string = method24()
                                                    (* run_target_args'
                                                    let v5434 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5435 : string = "&*$0"
                                                    let v5436 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5429 v5435 
                                                    let _run_target_args'_v5434 = v5436 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5437 : string = "&*$0"
                                                    let v5438 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5429 v5437 
                                                    let _run_target_args'_v5434 = v5438 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5439 : string = "&*$0"
                                                    let v5440 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5429 v5439 
                                                    let _run_target_args'_v5434 = v5440 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5442 : Ref<Str> = v5429 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5434 = v5442 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5446 : Ref<Str> = v5429 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5434 = v5446 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5450 : Ref<Str> = v5429 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5434 = v5450 
                                                    #endif
#else
                                                    let v5454 : Ref<Str> = v5429 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5434 = v5454 
                                                    #endif
                                                    let v5457 : Ref<Str> = _run_target_args'_v5434 
                                                    let v5463 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v5464 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v33, v5457) v5463 
                                                    let v5466 : (Vec<std_string_String> -> US8) = method25()
                                                    let v5467 : US8 option = v5464 |> Option.map v5466 
                                                    let v5480 : US8 = US8_1
                                                    let v5481 : US8 = v5467 |> Option.defaultValue v5480 
                                                    let v5485 : (std_string_String []) = [||]
                                                    let v5486 : string = "$0.to_vec()"
                                                    let v5487 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5485 v5486 
                                                    let v5490 : Vec<std_string_String> =
                                                        match v5481 with
                                                        | US8_1 -> (* None *)
                                                            v5487
                                                        | US8_0(v5488) -> (* Some *)
                                                            v5488
                                                    let v5491 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v5496 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v5501 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5502 : string = "std::fs::read(&*$0)"
                                                    let v5503 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5428 v5502 
                                                    (* run_target_args'
                                                    let v5505 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5506 : string = "$0.unwrap()"
                                                    let v5507 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5503 v5506 
                                                    let _run_target_args'_v5505 = v5507 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5508 : string = "$0.unwrap()"
                                                    let v5509 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5503 v5508 
                                                    let _run_target_args'_v5505 = v5509 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5510 : string = "$0.unwrap()"
                                                    let v5511 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5503 v5510 
                                                    let _run_target_args'_v5505 = v5511 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5512 : Vec<uint8> = match v5503 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5505 = v5512 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5513 : Vec<uint8> = match v5503 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5505 = v5513 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5514 : Vec<uint8> = match v5503 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5505 = v5514 
                                                    #endif
#else
                                                    let v5515 : Vec<uint8> = match v5503 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5505 = v5515 
                                                    #endif
                                                    let v5516 : Vec<uint8> = _run_target_args'_v5505 
                                                    let _run_target_args'_v5501 = v5516 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5520 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5501 = v5520 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5524 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5501 = v5524 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5528 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5501 = v5528 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5532 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5501 = v5532 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5536 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5501 = v5536 
                                                    #endif
#else
                                                    let v5539 : (uint8 []) = v5428 |> System.IO.File.ReadAllBytes
                                                    let v5540 : string = "$0.to_vec()"
                                                    let v5541 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5539 v5540 
                                                    let _run_target_args'_v5501 = v5541 
                                                    #endif
                                                    let v5542 : Vec<uint8> = _run_target_args'_v5501 
                                                    let v5548 : Vec<uint8> = method26(v5542)
                                                    let v5549 : string = "std::string::String::from_utf8($0)"
                                                    let v5550 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5548 v5549 
                                                    (* run_target_args'
                                                    let v5552 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5553 : string = "$0.unwrap()"
                                                    let v5554 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5550 v5553 
                                                    let _run_target_args'_v5552 = v5554 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5555 : string = "$0.unwrap()"
                                                    let v5556 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5550 v5555 
                                                    let _run_target_args'_v5552 = v5556 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5557 : string = "$0.unwrap()"
                                                    let v5558 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5550 v5557 
                                                    let _run_target_args'_v5552 = v5558 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5559 : std_string_String = match v5550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5552 = v5559 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5560 : std_string_String = match v5550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5552 = v5560 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5561 : std_string_String = match v5550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5552 = v5561 
                                                    #endif
#else
                                                    let v5562 : std_string_String = match v5550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5552 = v5562 
                                                    #endif
                                                    let v5563 : std_string_String = _run_target_args'_v5552 
                                                    let v5566 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5567 : string = Fable.Core.RustInterop.emitRustExpr v5563 v5566 
                                                    let _run_target_args'_v5496 = v5567 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5569 : string = null |> unbox<string>
                                                    let _run_target_args'_v5496 = v5569 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5573 : string = null |> unbox<string>
                                                    let _run_target_args'_v5496 = v5573 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5577 : string = null |> unbox<string>
                                                    let _run_target_args'_v5496 = v5577 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5581 : string = null |> unbox<string>
                                                    let _run_target_args'_v5496 = v5581 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5585 : string = null |> unbox<string>
                                                    let _run_target_args'_v5496 = v5585 
                                                    #endif
#else
                                                    let v5588 : string = v5428 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v5496 = v5588 
                                                    #endif
                                                    let v5589 : string = _run_target_args'_v5496 
                                                    let v5596 : string = "py"
                                                    let v5597 : string = $"%A{struct (v5596, v5589)}"
                                                    let v5600 : string = method28(v5597)
                                                    let v5601 : string = method33()
                                                    let v5602 : US5 = method34(v5601)
                                                    let v5608 : US5 =
                                                        match v5602 with
                                                        | US5_1 -> (* None *)
                                                            let v5605 : string = __SOURCE_DIRECTORY__
                                                            method34(v5605)
                                                        | US5_0(v5603) -> (* Some *)
                                                            US5_0(v5603)
                                                    let v5614 : US5 =
                                                        match v5608 with
                                                        | US5_1 -> (* None *)
                                                            let v5611 : string = "/workspaces"
                                                            method34(v5611)
                                                        | US5_0(v5609) -> (* Some *)
                                                            US5_0(v5609)
                                                    let v5618 : string =
                                                        match v5614 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v5615) -> (* Some *)
                                                            v5615
                                                    let v5619 : string = method54(v5618)
                                                    let v5620 : bool = "deps" = v5619
                                                    let v5631 : string =
                                                        if v5620 then
                                                            let v5621 : string option = method40(v5618)
                                                            let v5623 : string = v5621 |> Option.get
                                                            let v5626 : US5 = method34(v5623)
                                                            match v5626 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v5627) -> (* Some *)
                                                                v5627
                                                        else
                                                            v5618
                                                    let v5632 : string = "polyglot"
                                                    let v5633 : string = method35(v5631, v5632)
                                                    let v5634 : string = method33()
                                                    let v5636 : (unit -> string) = v5634.ToLower
                                                    let v5637 : string = v5636 ()
                                                    let v5641 : (unit -> string) = v5633.ToLower
                                                    let v5642 : string = v5641 ()
                                                    let v5646 : bool = v5637.StartsWith (v5642, false, null)
                                                    let v5651 : US10 =
                                                        if v5646 then
                                                            US10_1(v5642)
                                                        else
                                                            US10_0(v5642)
                                                    let v5657 : Result<string, string> =
                                                        match v5651 with
                                                        | US10_1(v5654) -> (* Error *)
                                                            let v5655 : Result<string, string> = Error v5654 
                                                            v5655
                                                        | US10_0(v5652) -> (* Ok *)
                                                            let v5653 : Result<string, string> = Ok v5652 
                                                            v5653
                                                    let v5658 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v5659 : bool = Fable.Core.RustInterop.emitRustExpr v5657 v5658 
                                                    let v5660 : string = "x"
                                                    let v5661 : string = Fable.Core.RustInterop.emitRustExpr () v5660 
                                                    let v5662 : string = "true; $0 })"
                                                    let v5663 : bool = Fable.Core.RustInterop.emitRustExpr v5661 v5662 
                                                    let v5664 : string = "_result_unwrap_or_else"
                                                    let v5665 : string = Fable.Core.RustInterop.emitRustExpr () v5664 
                                                    let v5666 : string = "spiral"
                                                    let v5667 : US38 = US38_2
                                                    let v5668 : US39 = US39_0(v5667)
                                                    let v5669 : US5 = US5_0(v5600)
                                                    let v5670 : string = method207(v5669, v5666, v5668, v5665)
                                                    let v5671 : string = "Fable.Core"
                                                    let v5672 : string = "4.3.0"
                                                    let v5673 : UH4 = UH4_0
                                                    let v5674 : UH4 = UH4_1(v5671, v5672, v5673)
                                                    let v5675 : UH2 = UH2_0
                                                    let v5676 : string = method208(v5589, v5666, v5675, v5674, v5670, v5665)
                                                    let v5677 : string = "lib/python/fable/fable_modules"
                                                    let v5678 : string = method35(v5665, v5677)
                                                    let v5679 : string = $"fable_library"
                                                    let v5680 : string = method35(v5678, v5679)
                                                    let v5681 : string = $"fable_modules/fable_library"
                                                    let v5682 : string = method35(v5670, v5681)
                                                    method216(v5680, v5682)
                                                    let v5683 : US36 = US36_1
                                                    let struct (v5684 : int32, v5685 : string) = method217(v5683, v5670, v5596, v5676, v5651)
                                                    let v5687 : bool = v5684 <> 0 
                                                    let struct (v6107 : US5, v6108 : US5, v6109 : US5, v6110 : US5) =
                                                        if v5687 then
                                                            let v5690 : unit = ()
                                                            let v5691 : (unit -> unit) = closure125(v5685, v5684)
                                                            let v5692 : unit = (fun () -> v5691 (); v5690) ()
                                                            let v5739 : US5 = US5_0(v5596)
                                                            let v5740 : US5 = US5_1
                                                            let v5741 : US5 = US5_1
                                                            let v5742 : US5 = US5_0(v5685)
                                                            struct (v5739, v5740, v5741, v5742)
                                                        else
                                                            let v5743 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v5744 : bool = Fable.Core.RustInterop.emitRustExpr v5490 v5743 
                                                            let v5745 : string = "x"
                                                            let v5746 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5745 
                                                            let v5747 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v5748 : string = Fable.Core.RustInterop.emitRustExpr v5746 v5747 
                                                            let v5750 : string = "="
                                                            let v5751 : bool = v5748.Contains v5750 
                                                            let v5755 : string =
                                                                if v5751 then
                                                                    v5748
                                                                else
                                                                    let v5754 : string = $"\"{v5748}\":\"*\""
                                                                    v5754
                                                            let v5756 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v5757 : bool = Fable.Core.RustInterop.emitRustExpr v5755 v5756 
                                                            let v5758 : string = "_vec_map"
                                                            let v5759 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5758 
                                                            let v5760 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v5761 : (string []) = Fable.Core.RustInterop.emitRustExpr v5759 v5760 
                                                            let v5765 : unit = ()
                                                            let _let'_v5765 =
                                                                seq {
                                                                    for i = 0 to v5761.Length - 1 do yield v5761.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v5768 : string seq = _let'_v5765 
                                                            let v5775 : (string -> (string seq -> string)) = String.concat
                                                            let v5776 : string = ",\n"
                                                            let v5777 : (string seq -> string) = v5775 v5776
                                                            let v5778 : string = v5777 v5768
                                                            let v5781 : string = $"{{"
                                                            let v5782 : string = $"  \"name\": \"spiral_{v5600}\","
                                                            let v5783 : string = v5781 + v5782 
                                                            let v5784 : string = $"  \"dependencies\": {{"
                                                            let v5785 : string = v5783 + v5784 
                                                            let v5786 : string = v5785 + v5778 
                                                            let v5787 : string = $"  }},"
                                                            let v5788 : string = v5786 + v5787 
                                                            let v5789 : string = $"    \"devDependencies\": {{"
                                                            let v5790 : string = v5788 + v5789 
                                                            let v5791 : string = $"  }},"
                                                            let v5792 : string = v5790 + v5791 
                                                            let v5793 : string = $"}}"
                                                            let v5794 : string = v5792 + v5793 
                                                            let v5795 : string = "package.json"
                                                            let v5796 : string = method35(v5670, v5795)
                                                            let v5797 : string = "../.."
                                                            let v5798 : string = method35(v5670, v5797)
                                                            let v5799 : string = method35(v5798, v5795)
                                                            method71(v5796, v5794)
                                                            let v5800 : string = ""
                                                            method71(v5799, v5800)
                                                            let v5801 : string = $"{v5666}.{v5596}"
                                                            let v5802 : string = method35(v5670, v5801)
                                                            let v5803 : unit = ()
                                                            let v5804 : (unit -> unit) = closure126(v5802)
                                                            let v5805 : unit = (fun () -> v5804 (); v5803) ()
                                                            (* run_target_args'
                                                            let v5856 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v5861 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5862 : string = "std::fs::read(&*$0)"
                                                            let v5863 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5802 v5862 
                                                            (* run_target_args'
                                                            let v5865 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5866 : string = "$0.unwrap()"
                                                            let v5867 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5863 v5866 
                                                            let _run_target_args'_v5865 = v5867 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5868 : string = "$0.unwrap()"
                                                            let v5869 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5863 v5868 
                                                            let _run_target_args'_v5865 = v5869 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5870 : string = "$0.unwrap()"
                                                            let v5871 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5863 v5870 
                                                            let _run_target_args'_v5865 = v5871 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5872 : Vec<uint8> = match v5863 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5865 = v5872 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5873 : Vec<uint8> = match v5863 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5865 = v5873 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5874 : Vec<uint8> = match v5863 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5865 = v5874 
                                                            #endif
#else
                                                            let v5875 : Vec<uint8> = match v5863 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5865 = v5875 
                                                            #endif
                                                            let v5876 : Vec<uint8> = _run_target_args'_v5865 
                                                            let _run_target_args'_v5861 = v5876 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5880 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v5861 = v5880 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5884 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v5861 = v5884 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5888 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v5861 = v5888 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5892 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v5861 = v5892 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5896 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v5861 = v5896 
                                                            #endif
#else
                                                            let v5899 : (uint8 []) = v5802 |> System.IO.File.ReadAllBytes
                                                            let v5900 : string = "$0.to_vec()"
                                                            let v5901 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5899 v5900 
                                                            let _run_target_args'_v5861 = v5901 
                                                            #endif
                                                            let v5902 : Vec<uint8> = _run_target_args'_v5861 
                                                            let v5908 : Vec<uint8> = method26(v5902)
                                                            let v5909 : string = "std::string::String::from_utf8($0)"
                                                            let v5910 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5908 v5909 
                                                            (* run_target_args'
                                                            let v5912 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5913 : string = "$0.unwrap()"
                                                            let v5914 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5910 v5913 
                                                            let _run_target_args'_v5912 = v5914 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5915 : string = "$0.unwrap()"
                                                            let v5916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5910 v5915 
                                                            let _run_target_args'_v5912 = v5916 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5917 : string = "$0.unwrap()"
                                                            let v5918 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5910 v5917 
                                                            let _run_target_args'_v5912 = v5918 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5919 : std_string_String = match v5910 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5912 = v5919 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5920 : std_string_String = match v5910 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5912 = v5920 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5921 : std_string_String = match v5910 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5912 = v5921 
                                                            #endif
#else
                                                            let v5922 : std_string_String = match v5910 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v5912 = v5922 
                                                            #endif
                                                            let v5923 : std_string_String = _run_target_args'_v5912 
                                                            let v5926 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v5927 : string = Fable.Core.RustInterop.emitRustExpr v5923 v5926 
                                                            let _run_target_args'_v5856 = v5927 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5929 : string = null |> unbox<string>
                                                            let _run_target_args'_v5856 = v5929 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5933 : string = null |> unbox<string>
                                                            let _run_target_args'_v5856 = v5933 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5937 : string = null |> unbox<string>
                                                            let _run_target_args'_v5856 = v5937 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5941 : string = null |> unbox<string>
                                                            let _run_target_args'_v5856 = v5941 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5945 : string = null |> unbox<string>
                                                            let _run_target_args'_v5856 = v5945 
                                                            #endif
#else
                                                            let v5948 : string = v5802 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v5856 = v5948 
                                                            #endif
                                                            let v5949 : string = _run_target_args'_v5856 
                                                            let v5956 : string = "# spiral.process_python"
                                                            let v5957 : bool = v5949.Contains v5956 
                                                            let v5969 : string =
                                                                if v5957 then
                                                                    v5949
                                                                else
                                                                    let v5960 : string = "\";\".into()"
                                                                    let v5961 : string = Fable.Core.RustInterop.emitRustExpr () v5960 
                                                                    let v5962 : string = "),)"
                                                                    let v5963 : string = v5962 + v5961 
                                                                    let v5964 : string = "));"
                                                                    let v5965 : string = v5949.Replace (v5963, v5964)
                                                                    let v5966 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v5967 : string = " defaultOf::<()>();"
                                                                    method65(v5966, v5967, v5965)
                                                            let v5970 : bool = v5957 = false
                                                            if v5970 then
                                                                let v5971 : string = $"{v5969}\n\n{v5956}\n"
                                                                method71(v5802, v5971)
                                                            let v5972 : string = $"python \"{v5802}\""
                                                            let v5973 : string = "TRACE_LEVEL"
                                                            let v5974 : string = "Verbose"
                                                            let v5975 : (struct (string * string) []) = [|struct (v5973, v5974)|]
                                                            let v5976 : System.Threading.CancellationToken option = None
                                                            let v5977 : (struct (string * string) []) = [||]
                                                            let v5978 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v5979 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v5980 : string option = None
                                                            let v5986 : Result<string, string> =
                                                                match v5651 with
                                                                | US10_1(v5983) -> (* Error *)
                                                                    let v5984 : Result<string, string> = Error v5983 
                                                                    v5984
                                                                | US10_0(v5981) -> (* Ok *)
                                                                    let v5982 : Result<string, string> = Ok v5981 
                                                                    v5982
                                                            (* run_target_args'
                                                            let v5988 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5989 : string = "$0.ok()"
                                                            let v5990 : string option = Fable.Core.RustInterop.emitRustExpr v5986 v5989 
                                                            let _run_target_args'_v5988 = v5990 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5991 : string = "$0.ok()"
                                                            let v5992 : string option = Fable.Core.RustInterop.emitRustExpr v5986 v5991 
                                                            let _run_target_args'_v5988 = v5992 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5993 : string = "$0.ok()"
                                                            let v5994 : string option = Fable.Core.RustInterop.emitRustExpr v5986 v5993 
                                                            let _run_target_args'_v5988 = v5994 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5995 : string option = match v5986 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v5988 = v5995 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5996 : string option = match v5986 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v5988 = v5996 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5997 : string option = match v5986 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v5988 = v5997 
                                                            #endif
#else
                                                            let v5998 : string option = match v5986 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v5988 = v5998 
                                                            #endif
                                                            let v5999 : string option = _run_target_args'_v5988 
                                                            let v6002 : bool = true
                                                            let struct (v6003 : int32, v6004 : string) = method96(v5972, v5976, v5975, v5978, v5979, v6002, v5999)
                                                            let v6005 : int32 = v5975.Length
                                                            let v6006 : (string []) = Array.zeroCreate<string> (v6005)
                                                            let v6007 : Mut5 = {l0 = 0} : Mut5
                                                            while method31(v6005, v6007) do
                                                                let v6009 : int32 = v6007.l0
                                                                let struct (v6010 : string, v6011 : string) = v5975.[int v6009]
                                                                let v6012 : string = $"$env:{v6010}=''{v6011}''"
                                                                v6006.[int v6009] <- v6012
                                                                let v6013 : int32 = v6009 + 1
                                                                v6007.l0 <- v6013
                                                                ()
                                                            let v6015 : string seq = v6006 |> Seq.ofArray
                                                            let v6019 : (string -> (string seq -> string)) = String.concat
                                                            let v6020 : string = ";"
                                                            let v6021 : (string seq -> string) = v6019 v6020
                                                            let v6022 : string = v6021 v6015
                                                            let v6025 : string = $"pwsh -c '{v6022}; {v5972}'"
                                                            let v6026 : bool = v6003 = 0
                                                            let struct (v6103 : US5, v6104 : US5, v6105 : US5, v6106 : US5) =
                                                                if v6026 then
                                                                    let v6027 : (string -> US5) = closure71()
                                                                    let v6028 : (unit -> string) = closure127(v6004)
                                                                    let v6029 : (exn -> US5) = closure128(v5802, v6004, v6025)
                                                                    let v6031 : US5 = US5_1
                                                                    let result = ref v6031
                                                                    try
                                                                        result.Value <- v6028 () |> v6027 
                                                                    with ex ->
                                                                        result.Value <- v6029 ex 
                                                                    let v6032 : US5 = result.Value
                                                                    let v6043 : string option =
                                                                        match v6032 with
                                                                        | US5_1 -> (* None *)
                                                                            let v6041 : string option = None
                                                                            v6041
                                                                        | US5_0(v6036) -> (* Some *)
                                                                            let v6038 : string option = Some v6036 
                                                                            v6038
                                                                    let v6044 : string = "$0.unwrap()"
                                                                    let v6045 : string = Fable.Core.RustInterop.emitRustExpr v6043 v6044 
                                                                    let v6046 : US5 = US5_0(v5596)
                                                                    let v6047 : US5 = US5_0(v5969)
                                                                    let v6048 : US5 = US5_0(v5802)
                                                                    let v6049 : US5 = US5_0(v6045)
                                                                    struct (v6046, v6047, v6048, v6049)
                                                                else
                                                                    let v6050 : unit = ()
                                                                    let v6051 : (unit -> unit) = closure130(v5802, v6004, v6003, v6025)
                                                                    let v6052 : unit = (fun () -> v6051 (); v6050) ()
                                                                    let v6099 : US5 = US5_0(v5596)
                                                                    let v6100 : US5 = US5_1
                                                                    let v6101 : US5 = US5_1
                                                                    let v6102 : US5 = US5_1
                                                                    struct (v6099, v6100, v6101, v6102)
                                                            struct (v6103, v6104, v6105, v6106)
                                                    struct (v6107, v6108, v6109, v6110)
                                                else
                                                    let v6111 : unit = ()
                                                    let v6112 : (unit -> unit) = closure131(v33, v32)
                                                    let v6113 : unit = (fun () -> v6112 (); v6111) ()
                                                    let v6160 : US5 = US5_1
                                                    let v6161 : US5 = US5_1
                                                    let v6162 : US5 = US5_1
                                                    let v6163 : US5 = US5_1
                                                    struct (v6160, v6161, v6162, v6163)
                                            struct (v6164, v6165, v6166, v6167)
                                    struct (v6168, v6169, v6170, v6171)
                            let v6179 : string =
                                match v6172 with
                                | US5_1 -> (* None *)
                                    let v6177 : string = ""
                                    v6177
                                | US5_0(v6176) -> (* Some *)
                                    v6176
                            let v6180 : string = "extension"
                            let v6184 : string =
                                match v6173 with
                                | US5_1 -> (* None *)
                                    let v6182 : string = ""
                                    v6182
                                | US5_0(v6181) -> (* Some *)
                                    v6181
                            let v6185 : string = "code"
                            let v6189 : string =
                                match v6174 with
                                | US5_1 -> (* None *)
                                    let v6187 : string = ""
                                    v6187
                                | US5_0(v6186) -> (* Some *)
                                    v6186
                            let v6190 : string = "code_path"
                            let v6194 : string =
                                match v6175 with
                                | US5_1 -> (* None *)
                                    let v6192 : string = ""
                                    v6192
                                | US5_0(v6191) -> (* Some *)
                                    v6191
                            let v6195 : string = "output"
                            [|struct (v6180, v6179); struct (v6185, v6184); struct (v6190, v6189); struct (v6195, v6194)|]
        | _ ->
            let v6201 : string = "extension"
            let v6202 : string = ""
            let v6203 : string = "code"
            let v6204 : string = "code_path"
            let v6205 : string = "output"
            [|struct (v6201, v6202); struct (v6203, v6202); struct (v6204, v6202); struct (v6205, v6202)|]
    let v6208 : string = "$0.to_vec()"
    let v6209 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v6207 v6208 
    let v6210 : unit = ()
    let v6211 : string = $"true; let _func1_from_v6210 = Func1::from(move |value| {{ //"
    let v6212 : bool = Fable.Core.RustInterop.emitRustExpr () v6211 
    let v6213 : string = $"value"
    let struct (v6214 : string, v6215 : string) = Fable.Core.RustInterop.emitRustExpr () v6213 
    (* run_target_args'
    let v6220 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6221 : string = "&*$0"
    let v6222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6214 v6221 
    let _run_target_args'_v6220 = v6222 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6223 : string = "&*$0"
    let v6224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6214 v6223 
    let _run_target_args'_v6220 = v6224 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6225 : string = "&*$0"
    let v6226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6214 v6225 
    let _run_target_args'_v6220 = v6226 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6228 : Ref<Str> = v6214 |> unbox<Ref<Str>>
    let _run_target_args'_v6220 = v6228 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6232 : Ref<Str> = v6214 |> unbox<Ref<Str>>
    let _run_target_args'_v6220 = v6232 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6236 : Ref<Str> = v6214 |> unbox<Ref<Str>>
    let _run_target_args'_v6220 = v6236 
    #endif
#else
    let v6240 : Ref<Str> = v6214 |> unbox<Ref<Str>>
    let _run_target_args'_v6220 = v6240 
    #endif
    let v6243 : Ref<Str> = _run_target_args'_v6220 
    (* run_target_args'
    let v6253 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6254 : string = "String::from($0)"
    let v6255 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6243 v6254 
    let _run_target_args'_v6253 = v6255 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6256 : string = "String::from($0)"
    let v6257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6243 v6256 
    let _run_target_args'_v6253 = v6257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6258 : string = "String::from($0)"
    let v6259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6243 v6258 
    let _run_target_args'_v6253 = v6259 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6261 : std_string_String = v6243 |> unbox<std_string_String>
    let _run_target_args'_v6253 = v6261 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6265 : std_string_String = v6243 |> unbox<std_string_String>
    let _run_target_args'_v6253 = v6265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6269 : std_string_String = v6243 |> unbox<std_string_String>
    let _run_target_args'_v6253 = v6269 
    #endif
#else
    let v6273 : std_string_String = v6243 |> unbox<std_string_String>
    let _run_target_args'_v6253 = v6273 
    #endif
    let v6276 : std_string_String = _run_target_args'_v6253 
    (* run_target_args'
    let v6286 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6287 : string = "&*$0"
    let v6288 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6215 v6287 
    let _run_target_args'_v6286 = v6288 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6289 : string = "&*$0"
    let v6290 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6215 v6289 
    let _run_target_args'_v6286 = v6290 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6291 : string = "&*$0"
    let v6292 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6215 v6291 
    let _run_target_args'_v6286 = v6292 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6294 : Ref<Str> = v6215 |> unbox<Ref<Str>>
    let _run_target_args'_v6286 = v6294 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6298 : Ref<Str> = v6215 |> unbox<Ref<Str>>
    let _run_target_args'_v6286 = v6298 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6302 : Ref<Str> = v6215 |> unbox<Ref<Str>>
    let _run_target_args'_v6286 = v6302 
    #endif
#else
    let v6306 : Ref<Str> = v6215 |> unbox<Ref<Str>>
    let _run_target_args'_v6286 = v6306 
    #endif
    let v6309 : Ref<Str> = _run_target_args'_v6286 
    (* run_target_args'
    let v6319 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6320 : string = "String::from($0)"
    let v6321 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6309 v6320 
    let _run_target_args'_v6319 = v6321 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6322 : string = "String::from($0)"
    let v6323 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6309 v6322 
    let _run_target_args'_v6319 = v6323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6324 : string = "String::from($0)"
    let v6325 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6309 v6324 
    let _run_target_args'_v6319 = v6325 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6327 : std_string_String = v6309 |> unbox<std_string_String>
    let _run_target_args'_v6319 = v6327 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6331 : std_string_String = v6309 |> unbox<std_string_String>
    let _run_target_args'_v6319 = v6331 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6335 : std_string_String = v6309 |> unbox<std_string_String>
    let _run_target_args'_v6319 = v6335 
    #endif
#else
    let v6339 : std_string_String = v6309 |> unbox<std_string_String>
    let _run_target_args'_v6319 = v6339 
    #endif
    let v6342 : std_string_String = _run_target_args'_v6319 
    let v6349 : (std_string_String * std_string_String) = v6276, v6342 
    let func1_from_result = v6349 //
    let v6352 : _ = func1_from_result
    let v6353 : string = $"true; $0 /*"
    let v6354 : bool = Fable.Core.RustInterop.emitRustExpr v6352 v6353 
    let v6355 : string = $"*/ }}); //"
    let v6356 : bool = Fable.Core.RustInterop.emitRustExpr () v6355 
    let v6357 : string = $"_func1_from_v6210"
    let v6358 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v6357 
    let v6359 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v6360 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v6358)
    let v6361 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v6209, v6360) v6359 
    let v6362 : string = "std::collections::BTreeMap::from_iter(v6361.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v6363 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6362 
    let v6364 : string = "serde_json::to_string(&v6363)"
    let v6365 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v6364 
    let v6366 : (serde_json_Error -> string) = method280()
    (* run_target_args'
    let v6368 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6369 : string = "$0.map_err(|x| $1(x))"
    let v6370 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6365, v6366) v6369 
    let _run_target_args'_v6368 = v6370 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6371 : string = "$0.map_err(|x| $1(x))"
    let v6372 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6365, v6366) v6371 
    let _run_target_args'_v6368 = v6372 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6373 : string = "$0.map_err(|x| $1(x))"
    let v6374 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6365, v6366) v6373 
    let _run_target_args'_v6368 = v6374 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6375 : Result<std_string_String, string> = match v6365 with Ok x -> Ok x | Error x -> Error (v6366 x)
    let _run_target_args'_v6368 = v6375 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6376 : Result<std_string_String, string> = match v6365 with Ok x -> Ok x | Error x -> Error (v6366 x)
    let _run_target_args'_v6368 = v6376 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6377 : Result<std_string_String, string> = match v6365 with Ok x -> Ok x | Error x -> Error (v6366 x)
    let _run_target_args'_v6368 = v6377 
    #endif
#else
    let v6378 : Result<std_string_String, string> = match v6365 with Ok x -> Ok x | Error x -> Error (v6366 x)
    let _run_target_args'_v6368 = v6378 
    #endif
    let v6379 : Result<std_string_String, string> = _run_target_args'_v6368 
    let v6382 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v6383 : bool = Fable.Core.RustInterop.emitRustExpr v6379 v6382 
    let v6384 : string = "x"
    let v6385 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6384 
    let v6386 : string = "fable_library_rust::String_::fromString($0)"
    let v6387 : string = Fable.Core.RustInterop.emitRustExpr v6385 v6386 
    let v6388 : string = "true; $0 })"
    let v6389 : bool = Fable.Core.RustInterop.emitRustExpr v6387 v6388 
    let v6390 : string = "_result_map_"
    let v6391 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v6390 
    let v6392 : string = ""
    let v6393 : string = "}"
    let v6394 : string = v6392 + v6393 
    let x = v6391 //
    let v6395 : _ = x
    let v6396 : unit = ()
    (* run_target_args'
    let v6397 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6398 : string = $"true; let _fix_closure_v6396 = $0"
    let v6399 : bool = Fable.Core.RustInterop.emitRustExpr v6395 v6398 
    let _run_target_args'_v6397 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6400 : string = $"true; let _fix_closure_v6396 = $0"
    let v6401 : bool = Fable.Core.RustInterop.emitRustExpr v6395 v6400 
    let _run_target_args'_v6397 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6402 : string = $"true; let _fix_closure_v6396 = $0"
    let v6403 : bool = Fable.Core.RustInterop.emitRustExpr v6395 v6402 
    let _run_target_args'_v6397 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v6397 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v6397 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v6397 = false 
    #endif
#else
    let _run_target_args'_v6397 = false 
    #endif
    let v6404 : bool = _run_target_args'_v6397 
    let v6406 : string = $"true; _fix_closure_v6396 " + v6394 + "); " + v6392 + " // rust.fix_closure'"
    let v6407 : bool = Fable.Core.RustInterop.emitRustExpr () v6406 
    let v6408 : string = "__future_init"
    let v6409 : _ = Fable.Core.RustInterop.emitRustExpr () v6408 
    let v6410 : string = "v6409"
    let v6411 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v6410 
    v6411
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure5(v0)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v90 : clap_Command = method0()
    let v91 : string = "clap::Command::get_matches($0)"
    let v92 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : US0 = v28.l0
    let v94 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v93, v92)
    let v95 : string = "futures::executor::block_on($0)"
    let v96 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v94 v95 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "$0.unwrap()"
    let v100 : string = Fable.Core.RustInterop.emitRustExpr v96 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "$0.unwrap()"
    let v102 : string = Fable.Core.RustInterop.emitRustExpr v96 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "$0.unwrap()"
    let v104 : string = Fable.Core.RustInterop.emitRustExpr v96 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v105 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v107 
    #endif
#else
    let v108 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v108 
    #endif
    let v109 : string = _run_target_args'_v98 
    let v112 : US0 = v28.l0
    let v113 : bool =
        match v112 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v113 then
        let v114 : unit = ()
        let v115 : (unit -> unit) = closure10(v109)
        let v116 : unit = (fun () -> v115 (); v114) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
