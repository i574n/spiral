#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
type IOsEnviron = abstract environ: x: unit -> obj
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
    | US4_6 of f6_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : Mut0 * f0_1 : Mut1 * f0_2 : Mut2 * f0_3 : Mut3 * f0_4 : Mut4 * f0_5 : int64 option
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : std_string_String
    | US8_1
and [<Struct>] US11 =
    | US11_0
    | US11_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : US11
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US12 =
    | US12_0 of f0_0 : Vec<std_string_String>
    | US12_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US13 =
    | US13_0
    | US13_1
and [<Struct>] US14 =
    | US14_0 of f0_0 : string
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1 of f1_0 : string
and [<Struct>] US16 =
    | US16_0 of f0_0 : std_path_PathBuf
    | US16_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US17 =
    | US17_0
    | US17_1 of f1_0 : std_string_String
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : US5
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH1
and [<Struct>] US20 =
    | US20_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : char
    | US21_1
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US21 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US25_1 of f1_0 : string
and [<Struct>] US26 =
    | US26_0 of f0_0 : (string [])
    | US26_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US27 =
    | US27_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US27_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) * UH3
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US28_1 of f1_0 : std_string_String
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US29_1
and [<Struct>] US30 =
    | US30_0 of f0_0 : std_string_String
    | US30_1 of f1_0 : std_string_String
and [<Struct>] US31 =
    | US31_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US32_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : std_process_Output
    | US33_1 of f1_0 : std_string_String
and [<Struct>] US34 =
    | US34_0 of f0_0 : int32
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : System.Threading.CancellationToken
    | US36_1
and [<Struct>] US39 =
    | US39_0
    | US39_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US39
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US41 =
    | US41_0 of f0_0 : string
    | US41_1 of f1_0 : string
and [<Struct>] US40 =
    | US40_0 of f0_0 : US41
    | US40_1
and [<Struct>] US42 =
    | US42_0
    | US42_1
    | US42_2
and [<Struct>] US43 =
    | US43_0 of f0_0 : US42
    | US43_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US44 =
    | US44_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US44_1
and [<Struct>] US45 =
    | US45_0 of f0_0 : int32 * f0_1 : string
    | US45_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US46 =
    | US46_0 of f0_0 : std_collections_HashMap<string, string>
    | US46_1
and [<Struct>] US47 =
    | US47_0 of f0_0 : US5
    | US47_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US48 =
    | US48_0
    | US48_1 of f1_0 : string
and [<Struct>] US49 =
    | US49_0 of f0_0 : std_fs_FileType
    | US49_1 of f1_0 : std_string_String
and [<Struct>] US50 =
    | US50_0
    | US50_1
    | US50_2
and [<Struct>] US51 =
    | US51_0 of f0_0 : async_walkdir_DirEntry
    | US51_1 of f1_0 : std_string_String
and [<Struct>] US52 =
    | US52_0 of f0_0 : string * f0_1 : string
    | US52_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v84 : (string list -> (string [])) = List.toArray
    let v85 : (string []) = v84 v80
    let v88 : string = "$0.to_vec()"
    let v89 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v85 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    (* run_target_args'
    let v134 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v135 
    let _run_target_args'_v134 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : string = "String::from($0)"
    let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v137 
    let _run_target_args'_v134 = v138 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v139 : string = "String::from($0)"
    let v140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v139 
    let _run_target_args'_v134 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v142 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v150 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v150 
    #endif
#else
    let v154 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v154 
    #endif
    let v157 : std_string_String = _run_target_args'_v134 
    let v166 : string = "Box::new($0)"
    let v167 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v157 v166 
    let v168 : string = "Box::leak($0)"
    let v169 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v167 v168 
    let v170 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v171 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let v172 : string = "true; $0 }).collect::<Vec<_>>()"
    let v173 : bool = Fable.Core.RustInterop.emitRustExpr v171 v172 
    let v174 : string = "_vec_map"
    let v175 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v177 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : string = "$0.value_parser($1)"
    let v179 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v177) v178 
    let v180 : string = "clap::Command::arg($0, $1)"
    let v181 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v179) v180 
    let v182 : string = "NAME"
    let v183 : string = "r#\"" + v182 + "\"#"
    let v184 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v183 
    let v185 : string = "VERSION"
    let v186 : string = "r#\"" + v185 + "\"#"
    let v187 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v184; v187|]
    let v190 : unativeint = 1 |> unativeint 
    let v194 : unativeint = 0 |> unativeint 
    let v198 : unativeint = 0 |> unativeint 
    let v202 : bool = v194 = v198 
    let v210 : clap_builder_ValueRange =
        if v202 then
            let v205 : string = "clap::builder::ValueRange::new($0..)"
            let v206 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v190 v205 
            v206
        else
            let v207 : string = ""
            let v208 : string = "clap::builder::ValueRange::new($0.." + v207 + "$1)"
            let v209 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v190, v194) v208 
            v209
    let v211 : string = "deps"
    let v212 : string = "r#\"" + v211 + "\"#"
    let v213 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v212 
    let v214 : string = "clap::Arg::new($0)"
    let v215 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v213 v214 
    let v216 : string = "$0.short($1)"
    let v217 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v215, 'd') v216 
    let v218 : string = "r#\"" + v211 + "\"#"
    let v219 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v218 
    let v220 : string = "$0.long($1)"
    let v221 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v217, v219) v220 
    let v222 : string = "$0.to_vec()"
    let v223 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v188 v222 
    let v224 : string = "$0.value_names($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v221, v223) v224 
    let v226 : string = "$0.num_args($1)"
    let v227 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v225, v210) v226 
    let v228 : string = "clap::ArgAction::Append"
    let v229 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "$0.action($1)"
    let v231 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v227, v229) v230 
    let v232 : string = "clap::Command::arg($0, $1)"
    let v233 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v181, v231) v232 
    let v234 : string = "clap::Command::subcommand($0, v233)"
    let v235 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v234 
    let v236 : string = "cuda"
    let v237 : string = "r#\"" + v236 + "\"#"
    let v238 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "clap::Command::new($0)"
    let v240 : clap_Command = Fable.Core.RustInterop.emitRustExpr v238 v239 
    let v241 : string = "py-path"
    let v242 : string = "r#\"" + v241 + "\"#"
    let v243 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v242 
    let v244 : string = "clap::Arg::new($0)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v243 v244 
    let v246 : string = "$0.short($1)"
    let v247 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, 'p') v246 
    let v248 : string = "r#\"" + v241 + "\"#"
    let v249 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v248 
    let v250 : string = "$0.long($1)"
    let v251 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v247, v249) v250 
    let v252 : string = "$0.required($1)"
    let v253 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v251, true) v252 
    let v254 : string = "clap::Command::arg($0, $1)"
    let v255 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v240, v253) v254 
    let v256 : string = "env"
    let v257 : string = "r#\"" + v256 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "clap::Arg::new($0)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "$0.short($1)"
    let v262 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, 'e') v261 
    let v263 : string = "r#\"" + v256 + "\"#"
    let v264 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "$0.long($1)"
    let v266 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v262, v264) v265 
    
    
    let v269 : string = "Poetry"
    let v270 : (unit -> string) = v269.ToLower
    let v271 : string = v270 ()
    let v276 : string = "Pip"
    let v277 : (unit -> string) = v276.ToLower
    let v278 : string = v277 ()
    let v281 : string list = []
    let v283 : string list = v271 :: v281 
    let v287 : string list = v278 :: v283 
    let v291 : (string list -> (string [])) = List.toArray
    let v292 : (string []) = v291 v287
    let v295 : string = "$0.to_vec()"
    let v296 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v292 v295 
    let v297 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
    let v299 : string = "x"
    let v300 : string = Fable.Core.RustInterop.emitRustExpr () v299 
    (* run_target_args'
    let v305 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v306 : string = "&*$0"
    let v307 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v300 v306 
    let _run_target_args'_v305 = v307 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v308 : string = "&*$0"
    let v309 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v300 v308 
    let _run_target_args'_v305 = v309 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v310 : string = "&*$0"
    let v311 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v300 v310 
    let _run_target_args'_v305 = v311 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v313 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v313 
    #endif
#if FABLE_COMPILER_PYTHON
    let v317 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v317 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v321 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v321 
    #endif
#else
    let v325 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v325 
    #endif
    let v328 : Ref<Str> = _run_target_args'_v305 
    (* run_target_args'
    let v341 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v342 : string = "String::from($0)"
    let v343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v328 v342 
    let _run_target_args'_v341 = v343 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v344 : string = "String::from($0)"
    let v345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v328 v344 
    let _run_target_args'_v341 = v345 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v346 : string = "String::from($0)"
    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v328 v346 
    let _run_target_args'_v341 = v347 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v349 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v349 
    #endif
#if FABLE_COMPILER_PYTHON
    let v353 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v353 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v357 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v357 
    #endif
#else
    let v361 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v361 
    #endif
    let v364 : std_string_String = _run_target_args'_v341 
    let v373 : string = "Box::new($0)"
    let v374 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v364 v373 
    let v375 : string = "Box::leak($0)"
    let v376 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v374 v375 
    let v377 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v378 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v376 v377 
    let v379 : string = "true; $0 }).collect::<Vec<_>>()"
    let v380 : bool = Fable.Core.RustInterop.emitRustExpr v378 v379 
    let v381 : string = "_vec_map"
    let v382 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v381 
    let v383 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v384 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v382 v383 
    let v385 : string = "$0.value_parser($1)"
    let v386 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v266, v384) v385 
    let v387 : string = "clap::Command::arg($0, $1)"
    let v388 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v255, v386) v387 
    let v389 : string = "r#\"" + v182 + "\"#"
    let v390 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v389 
    let v391 : string = "r#\"" + v185 + "\"#"
    let v392 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v391 
    let v393 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v390; v392|]
    let v395 : unativeint = 1 |> unativeint 
    let v399 : unativeint = 0 |> unativeint 
    let v403 : unativeint = 0 |> unativeint 
    let v407 : bool = v399 = v403 
    let v415 : clap_builder_ValueRange =
        if v407 then
            let v410 : string = "clap::builder::ValueRange::new($0..)"
            let v411 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v395 v410 
            v411
        else
            let v412 : string = ""
            let v413 : string = "clap::builder::ValueRange::new($0.." + v412 + "$1)"
            let v414 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v395, v399) v413 
            v414
    let v416 : string = "r#\"" + v211 + "\"#"
    let v417 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v416 
    let v418 : string = "clap::Arg::new($0)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v417 v418 
    let v420 : string = "$0.short($1)"
    let v421 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, 'd') v420 
    let v422 : string = "r#\"" + v211 + "\"#"
    let v423 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "$0.long($1)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v421, v423) v424 
    let v426 : string = "$0.to_vec()"
    let v427 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v393 v426 
    let v428 : string = "$0.value_names($1)"
    let v429 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, v427) v428 
    let v430 : string = "$0.num_args($1)"
    let v431 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v429, v415) v430 
    let v432 : string = "clap::ArgAction::Append"
    let v433 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v432 
    let v434 : string = "$0.action($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v431, v433) v434 
    let v436 : string = "clap::Command::arg($0, $1)"
    let v437 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v388, v435) v436 
    let v438 : string = "clap::Command::subcommand($0, v437)"
    let v439 : clap_Command = Fable.Core.RustInterop.emitRustExpr v235 v438 
    let v440 : string = "fable"
    let v441 : string = "r#\"" + v440 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "clap::Command::new($0)"
    let v444 : clap_Command = Fable.Core.RustInterop.emitRustExpr v442 v443 
    let v445 : string = "fs-path"
    let v446 : string = "r#\"" + v445 + "\"#"
    let v447 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v446 
    let v448 : string = "clap::Arg::new($0)"
    let v449 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v447 v448 
    let v450 : string = "$0.short($1)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v449, 'f') v450 
    let v452 : string = "r#\"" + v445 + "\"#"
    let v453 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v452 
    let v454 : string = "$0.long($1)"
    let v455 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, v453) v454 
    let v456 : string = "$0.required($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v455, true) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v444, v457) v458 
    let v460 : string = "r#\"" + v0 + "\"#"
    let v461 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v460 
    let v462 : string = "clap::Arg::new($0)"
    let v463 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let v464 : string = "$0.short($1)"
    let v465 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v463, 'c') v464 
    let v466 : string = "r#\"" + v0 + "\"#"
    let v467 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v466 
    let v468 : string = "$0.long($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v465, v467) v468 
    let v470 : string = "clap::Command::arg($0, $1)"
    let v471 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v459, v469) v470 
    let v472 : string = "clap::Command::subcommand($0, v471)"
    let v473 : clap_Command = Fable.Core.RustInterop.emitRustExpr v439 v472 
    let v474 : string = "rust"
    let v475 : string = "r#\"" + v474 + "\"#"
    let v476 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v475 
    let v477 : string = "clap::Command::new($0)"
    let v478 : clap_Command = Fable.Core.RustInterop.emitRustExpr v476 v477 
    let v479 : string = "r#\"" + v445 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : string = "clap::Arg::new($0)"
    let v482 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v480 v481 
    let v483 : string = "$0.short($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v482, 'f') v483 
    let v485 : string = "r#\"" + v445 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "$0.long($1)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v484, v486) v487 
    let v489 : string = "$0.required($1)"
    let v490 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v488, true) v489 
    let v491 : string = "clap::Command::arg($0, $1)"
    let v492 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v478, v490) v491 
    let v493 : string = "r#\"" + v182 + "\"#"
    let v494 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v493 
    let v495 : string = "r#\"" + v185 + "\"#"
    let v496 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v495 
    let v497 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v494; v496|]
    let v499 : unativeint = 1 |> unativeint 
    let v503 : unativeint = 0 |> unativeint 
    let v507 : unativeint = 0 |> unativeint 
    let v511 : bool = v503 = v507 
    let v519 : clap_builder_ValueRange =
        if v511 then
            let v514 : string = "clap::builder::ValueRange::new($0..)"
            let v515 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v499 v514 
            v515
        else
            let v516 : string = ""
            let v517 : string = "clap::builder::ValueRange::new($0.." + v516 + "$1)"
            let v518 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v499, v503) v517 
            v518
    let v520 : string = "r#\"" + v211 + "\"#"
    let v521 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v520 
    let v522 : string = "clap::Arg::new($0)"
    let v523 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v521 v522 
    let v524 : string = "$0.short($1)"
    let v525 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v523, 'd') v524 
    let v526 : string = "r#\"" + v211 + "\"#"
    let v527 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v526 
    let v528 : string = "$0.long($1)"
    let v529 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v525, v527) v528 
    let v530 : string = "$0.to_vec()"
    let v531 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v497 v530 
    let v532 : string = "$0.value_names($1)"
    let v533 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v529, v531) v532 
    let v534 : string = "$0.num_args($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v533, v519) v534 
    let v536 : string = "clap::ArgAction::Append"
    let v537 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v536 
    let v538 : string = "$0.action($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "clap::Command::arg($0, $1)"
    let v541 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v492, v539) v540 
    let v543 : unativeint = 0 |> unativeint 
    let v547 : unativeint = 1 |> unativeint 
    let v551 : unativeint = 0 |> unativeint 
    let v555 : bool = v547 = v551 
    let v563 : clap_builder_ValueRange =
        if v555 then
            let v558 : string = "clap::builder::ValueRange::new($0..)"
            let v559 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v543 v558 
            v559
        else
            let v560 : string = "="
            let v561 : string = "clap::builder::ValueRange::new($0.." + v560 + "$1)"
            let v562 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v543, v547) v561 
            v562
    let v564 : string = "wasm"
    let v565 : string = "r#\"" + v564 + "\"#"
    let v566 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v565 
    let v567 : string = "clap::Arg::new($0)"
    let v568 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v566 v567 
    let v569 : string = "$0.short($1)"
    let v570 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v568, 'w') v569 
    let v571 : string = "r#\"" + v564 + "\"#"
    let v572 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v571 
    let v573 : string = "$0.long($1)"
    let v574 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v570, v572) v573 
    let v575 : string = "$0.num_args($1)"
    let v576 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v574, v563) v575 
    let v577 : string = "$0.require_equals($1)"
    let v578 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v576, true) v577 
    let v579 : string = ""
    let v580 : string = "r#\"" + v579 + "\"#"
    let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
    let v582 : string = "$0.default_missing_value($1)"
    let v583 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v578, v581) v582 
    let v584 : string = "clap::Command::arg($0, $1)"
    let v585 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v541, v583) v584 
    let v587 : unativeint = 0 |> unativeint 
    let v591 : unativeint = 1 |> unativeint 
    let v595 : unativeint = 0 |> unativeint 
    let v599 : bool = v591 = v595 
    let v607 : clap_builder_ValueRange =
        if v599 then
            let v602 : string = "clap::builder::ValueRange::new($0..)"
            let v603 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v587 v602 
            v603
        else
            let v604 : string = "="
            let v605 : string = "clap::builder::ValueRange::new($0.." + v604 + "$1)"
            let v606 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v587, v591) v605 
            v606
    let v608 : string = "contract"
    let v609 : string = "r#\"" + v608 + "\"#"
    let v610 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v609 
    let v611 : string = "clap::Arg::new($0)"
    let v612 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v610 v611 
    let v613 : string = "$0.short($1)"
    let v614 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v612, 'c') v613 
    let v615 : string = "r#\"" + v608 + "\"#"
    let v616 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v615 
    let v617 : string = "$0.long($1)"
    let v618 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v614, v616) v617 
    let v619 : string = "$0.num_args($1)"
    let v620 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v618, v607) v619 
    let v621 : string = "$0.require_equals($1)"
    let v622 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v620, true) v621 
    let v623 : string = "r#\"" + v579 + "\"#"
    let v624 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v623 
    let v625 : string = "$0.default_missing_value($1)"
    let v626 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v622, v624) v625 
    let v627 : string = "clap::Command::arg($0, $1)"
    let v628 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v585, v626) v627 
    let v629 : string = "cleanup"
    let v630 : string = "r#\"" + v629 + "\"#"
    let v631 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v630 
    let v632 : string = "clap::Arg::new($0)"
    let v633 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v631 v632 
    let v634 : string = "$0.short($1)"
    let v635 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v633, 'l') v634 
    let v636 : string = "r#\"" + v629 + "\"#"
    let v637 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v636 
    let v638 : string = "$0.long($1)"
    let v639 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v635, v637) v638 
    let v640 : string = "true"
    let v641 : string = "r#\"" + v640 + "\"#"
    let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v641 
    let v643 : string = "$0.default_value($1)"
    let v644 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v639, v642) v643 
    let v645 : string = "clap::ArgAction::SetFalse"
    let v646 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v645 
    let v647 : string = "$0.action($1)"
    let v648 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v644, v646) v647 
    let v649 : string = "clap::Command::arg($0, $1)"
    let v650 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v628, v648) v649 
    let v651 : string = "clap::Command::subcommand($0, v650)"
    let v652 : clap_Command = Fable.Core.RustInterop.emitRustExpr v473 v651 
    let v653 : string = "typescript"
    let v654 : string = "r#\"" + v653 + "\"#"
    let v655 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v654 
    let v656 : string = "clap::Command::new($0)"
    let v657 : clap_Command = Fable.Core.RustInterop.emitRustExpr v655 v656 
    let v658 : string = "r#\"" + v445 + "\"#"
    let v659 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v658 
    let v660 : string = "clap::Arg::new($0)"
    let v661 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v659 v660 
    let v662 : string = "$0.short($1)"
    let v663 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v661, 'f') v662 
    let v664 : string = "r#\"" + v445 + "\"#"
    let v665 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v664 
    let v666 : string = "$0.long($1)"
    let v667 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v663, v665) v666 
    let v668 : string = "$0.required($1)"
    let v669 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v667, true) v668 
    let v670 : string = "clap::Command::arg($0, $1)"
    let v671 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v657, v669) v670 
    let v672 : string = "r#\"" + v182 + "\"#"
    let v673 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v672 
    let v674 : string = "r#\"" + v185 + "\"#"
    let v675 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v674 
    let v676 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v673; v675|]
    let v678 : unativeint = 1 |> unativeint 
    let v682 : unativeint = 0 |> unativeint 
    let v686 : unativeint = 0 |> unativeint 
    let v690 : bool = v682 = v686 
    let v697 : clap_builder_ValueRange =
        if v690 then
            let v693 : string = "clap::builder::ValueRange::new($0..)"
            let v694 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v678 v693 
            v694
        else
            let v695 : string = "clap::builder::ValueRange::new($0.." + v579 + "$1)"
            let v696 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v678, v682) v695 
            v696
    let v698 : string = "r#\"" + v211 + "\"#"
    let v699 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v698 
    let v700 : string = "clap::Arg::new($0)"
    let v701 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v699 v700 
    let v702 : string = "$0.short($1)"
    let v703 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v701, 'd') v702 
    let v704 : string = "r#\"" + v211 + "\"#"
    let v705 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v704 
    let v706 : string = "$0.long($1)"
    let v707 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v703, v705) v706 
    let v708 : string = "$0.to_vec()"
    let v709 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v676 v708 
    let v710 : string = "$0.value_names($1)"
    let v711 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v707, v709) v710 
    let v712 : string = "$0.num_args($1)"
    let v713 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v711, v697) v712 
    let v714 : string = "clap::ArgAction::Append"
    let v715 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v714 
    let v716 : string = "$0.action($1)"
    let v717 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v713, v715) v716 
    let v718 : string = "clap::Command::arg($0, $1)"
    let v719 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v671, v717) v718 
    let v720 : string = "clap::Command::subcommand($0, v719)"
    let v721 : clap_Command = Fable.Core.RustInterop.emitRustExpr v652 v720 
    let v722 : string = "python"
    let v723 : string = "r#\"" + v722 + "\"#"
    let v724 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v723 
    let v725 : string = "clap::Command::new($0)"
    let v726 : clap_Command = Fable.Core.RustInterop.emitRustExpr v724 v725 
    let v727 : string = "r#\"" + v445 + "\"#"
    let v728 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v727 
    let v729 : string = "clap::Arg::new($0)"
    let v730 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v728 v729 
    let v731 : string = "$0.short($1)"
    let v732 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v730, 'f') v731 
    let v733 : string = "r#\"" + v445 + "\"#"
    let v734 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v733 
    let v735 : string = "$0.long($1)"
    let v736 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v732, v734) v735 
    let v737 : string = "$0.required($1)"
    let v738 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v736, true) v737 
    let v739 : string = "clap::Command::arg($0, $1)"
    let v740 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v726, v738) v739 
    let v741 : string = "r#\"" + v182 + "\"#"
    let v742 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v741 
    let v743 : string = "r#\"" + v185 + "\"#"
    let v744 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v743 
    let v745 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v742; v744|]
    let v747 : unativeint = 1 |> unativeint 
    let v751 : unativeint = 0 |> unativeint 
    let v755 : unativeint = 0 |> unativeint 
    let v759 : bool = v751 = v755 
    let v766 : clap_builder_ValueRange =
        if v759 then
            let v762 : string = "clap::builder::ValueRange::new($0..)"
            let v763 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v747 v762 
            v763
        else
            let v764 : string = "clap::builder::ValueRange::new($0.." + v579 + "$1)"
            let v765 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v747, v751) v764 
            v765
    let v767 : string = "r#\"" + v211 + "\"#"
    let v768 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v767 
    let v769 : string = "clap::Arg::new($0)"
    let v770 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v768 v769 
    let v771 : string = "$0.short($1)"
    let v772 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v770, 'd') v771 
    let v773 : string = "r#\"" + v211 + "\"#"
    let v774 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "$0.long($1)"
    let v776 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v772, v774) v775 
    let v777 : string = "$0.to_vec()"
    let v778 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v745 v777 
    let v779 : string = "$0.value_names($1)"
    let v780 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v776, v778) v779 
    let v781 : string = "$0.num_args($1)"
    let v782 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v780, v766) v781 
    let v783 : string = "clap::ArgAction::Append"
    let v784 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v783 
    let v785 : string = "$0.action($1)"
    let v786 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v782, v784) v785 
    let v787 : string = "clap::Command::arg($0, $1)"
    let v788 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v740, v786) v787 
    let v789 : string = "clap::Command::subcommand($0, v788)"
    let v790 : clap_Command = Fable.Core.RustInterop.emitRustExpr v721 v789 
    let v791 : string = "dib"
    let v792 : string = "r#\"" + v791 + "\"#"
    let v793 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v792 
    let v794 : string = "clap::Command::new($0)"
    let v795 : clap_Command = Fable.Core.RustInterop.emitRustExpr v793 v794 
    let v796 : string = "path"
    let v797 : string = "r#\"" + v796 + "\"#"
    let v798 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v797 
    let v799 : string = "clap::Arg::new($0)"
    let v800 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v798 v799 
    let v801 : string = "$0.short($1)"
    let v802 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v800, 'p') v801 
    let v803 : string = "r#\"" + v796 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "$0.long($1)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v802, v804) v805 
    let v807 : string = "$0.required($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, true) v807 
    let v809 : string = "clap::Command::arg($0, $1)"
    let v810 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v795, v808) v809 
    let v811 : string = "u8"
    let v812 : string = "clap::value_parser!(" + v811 + ").into()"
    let v813 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v812 
    let v814 : string = "retries"
    let v815 : string = "r#\"" + v814 + "\"#"
    let v816 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v815 
    let v817 : string = "clap::Arg::new($0)"
    let v818 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v816 v817 
    let v819 : string = "$0.short($1)"
    let v820 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v818, 'r') v819 
    let v821 : string = "r#\"" + v814 + "\"#"
    let v822 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v821 
    let v823 : string = "$0.long($1)"
    let v824 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v820, v822) v823 
    let v825 : string = "$0.value_parser($1)"
    let v826 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v824, v813) v825 
    let v827 : string = "clap::Command::arg($0, $1)"
    let v828 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v810, v826) v827 
    let v829 : string = "working-directory"
    let v830 : string = "r#\"" + v829 + "\"#"
    let v831 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v830 
    let v832 : string = "clap::Arg::new($0)"
    let v833 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v831 v832 
    let v834 : string = "$0.short($1)"
    let v835 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v833, 'w') v834 
    let v836 : string = "r#\"" + v829 + "\"#"
    let v837 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v836 
    let v838 : string = "$0.long($1)"
    let v839 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v835, v837) v838 
    let v840 : string = "clap::Command::arg($0, $1)"
    let v841 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v828, v839) v840 
    let v842 : string = "clap::Command::subcommand($0, v841)"
    let v843 : clap_Command = Fable.Core.RustInterop.emitRustExpr v790 v842 
    v843
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method4(v0)
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result_map_"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method5()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    let _run_target_args'_v2 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : US3 = US3_1
    let v20 : US4 = US4_4(v19)
    let v21 : string = $"env.get_environment_variable / target: {v20} / var: {v0}"
    let v22 : string = failwith<string> v21
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : US3 = US3_2
    let v24 : US4 = US4_4(v23)
    let v25 : string = $"env.get_environment_variable / target: {v24} / var: {v0}"
    let v26 : string = failwith<string> v25
    let _run_target_args'_v2 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : string = "process.env[$0] ?? \"\""
    let v28 : string = Fable.Core.JsInterop.emitJsExpr v0 v27 
    let _run_target_args'_v2 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string = "os"
    let v31 : IOsEnviron = Fable.Core.PyInterop.importAll v30 
    let v32 : string = "v31.environ"
    let v33 : obj = Fable.Core.PyInterop.emitPyExpr () v32 
    let v37 : string = "v33.get($0)"
    let v38 : string = Fable.Core.PyInterop.emitPyExpr v0 v37 
    let mutable _v38 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v42 : (string -> string option) = Option.ofObj
    let v43 : string option = v42 v38
    v43 
    #else
    Some v38 
    #endif
    |> fun x -> _v38 <- Some x
    let v44 : string option = match _v38 with Some x -> x | None -> failwith "optionm'.of_obj / _v38=None"
    let v49 : (string -> US5) = method6()
    let v50 : US5 option = v44 |> Option.map v49 
    let v70 : US5 = US5_1
    let v71 : US5 = v50 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US5_1 -> (* None *)
            let v76 : string = ""
            v76
        | US5_0(v75) -> (* Some *)
            v75
    let _run_target_args'_v2 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : US3 = US3_1
    let v80 : US4 = US4_1(v79)
    let v81 : string = $"env.get_environment_variable / target: {v80} / var: {v0}"
    let v82 : string = failwith<string> v81
    let _run_target_args'_v2 = v82 
    #endif
#else
    let v83 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v84 : string = v83 v0
    let mutable _v84 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v86 : (string -> string option) = Option.ofObj
    let v87 : string option = v86 v84
    v87 
    #else
    Some v84 
    #endif
    |> fun x -> _v84 <- Some x
    let v88 : string option = match _v84 with Some x -> x | None -> failwith "optionm'.of_obj / _v84=None"
    let v93 : (string -> US5) = method6()
    let v94 : US5 option = v88 |> Option.map v93 
    let v114 : US5 = US5_1
    let v115 : US5 = v94 |> Option.defaultValue v114 
    let v122 : string =
        match v115 with
        | US5_1 -> (* None *)
            let v120 : string = ""
            v120
        | US5_0(v119) -> (* Some *)
            v119
    let _run_target_args'_v2 = v122 
    #endif
    let v123 : string = _run_target_args'_v2 
    v123
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v210 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v143 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v144 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v145 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v147 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v143 = v147 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v150 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v151 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v152 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v152 
            #endif
#else
            let v153 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v153 
            #endif
            let v154 : System.DateTime = _run_target_args'_v143 
            (* run_target_args'
            let v165 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v166 : (System.DateTime -> int64) = _.Ticks
            let v167 : int64 = v166 v154
            let _run_target_args'_v165 = v167 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v168 : (System.DateTime -> int64) = _.Ticks
            let v169 : int64 = v168 v154
            let _run_target_args'_v165 = v169 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : int64 = null |> unbox<int64>
            let _run_target_args'_v165 = v171 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : (System.DateTime -> int64) = _.Ticks
            let v175 : int64 = v174 v154
            let _run_target_args'_v165 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : (System.DateTime -> int64) = _.Ticks
            let v177 : int64 = v176 v154
            let _run_target_args'_v165 = v177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : (System.DateTime -> int64) = _.Ticks
            let v179 : int64 = v178 v154
            let _run_target_args'_v165 = v179 
            #endif
#else
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v154
            let _run_target_args'_v165 = v181 
            #endif
            let v182 : int64 = _run_target_args'_v165 
            let v204 : int64 = v182 |> int64 
            US2_0(v204)
    struct (v127, v210)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v43 v52 
    let _run_target_args'_v13 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "String::from($0)"
    let v62 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "String::from($0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "String::from($0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : std_string_String = _run_target_args'_v60 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v83 v92 
    let _run_target_args'_v13 = v93 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v94 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v95 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v94 
    (* run_target_args'
    let v100 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v101 : string = "String::from($0)"
    let v102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v101 
    let _run_target_args'_v100 = v102 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v103 : string = "String::from($0)"
    let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v103 
    let _run_target_args'_v100 = v104 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v105 : string = "String::from($0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v105 
    let _run_target_args'_v100 = v106 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v116 
    #endif
#else
    let v120 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v120 
    #endif
    let v123 : std_string_String = _run_target_args'_v100 
    let v132 : string = "fable_library_rust::String_::fromString($0)"
    let v133 : string = Fable.Core.RustInterop.emitRustExpr v123 v132 
    let _run_target_args'_v13 = v133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v135 : string = null |> unbox<string>
    let _run_target_args'_v13 = v135 
    #endif
#if FABLE_COMPILER_PYTHON
    let v139 : string = null |> unbox<string>
    let _run_target_args'_v13 = v139 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v143 : string = null |> unbox<string>
    let _run_target_args'_v13 = v143 
    #endif
#else
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v13 = v147 
    #endif
    let v150 : string = _run_target_args'_v13 
    let v161 : string = "True"
    let v162 : bool = v150 <> v161 
    let v174 : US2 =
        if v162 then
            US2_1
        else
            let v166 : string = $"near_sdk::env::block_timestamp()"
            let v167 : uint64 = Fable.Core.RustInterop.emitRustExpr () v166 
            let v169 : (uint64 -> int64) = int64
            let v170 : int64 = v169 v167
            US2_0(v170)
    let v175 : US1 = US1_1
    let _run_target_args'_v3 = struct (v175, v174) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v176 : US1, v177 : US2) = method2()
    let _run_target_args'_v3 = struct (v176, v177) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v178 : US1, v179 : US2) = method2()
    let _run_target_args'_v3 = struct (v178, v179) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v180 : US1, v181 : US2) = method2()
    let _run_target_args'_v3 = struct (v180, v181) 
    #endif
#else
    let struct (v182 : US1, v183 : US2) = method2()
    let _run_target_args'_v3 = struct (v182, v183) 
    #endif
    let struct (v184 : US1, v185 : US2) = _run_target_args'_v3 
    let v190 : Mut0 = {l0 = 1L} : Mut0
    let v191 : (string -> unit) = closure4()
    let v192 : Mut1 = {l0 = v191} : Mut1
    let v193 : Mut2 = {l0 = true} : Mut2
    let v194 : string = ""
    let v195 : Mut3 = {l0 = v194} : Mut3
    let v198 : US0 =
        match v184 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v196) -> (* Some *)
            v196
    let v199 : Mut4 = {l0 = v198} : Mut4
    let v210 : int64 option =
        match v185 with
        | US2_1 -> (* None *)
            let v206 : int64 option = None
            v206
        | US2_0(v200) -> (* Some *)
            let v202 : int64 option = Some v200 
            v202
    struct (v190, v192, v193, v195, v199, v210)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method8 () : (int64 -> US2) =
    closure6()
and method9 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method10 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method7 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v195 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v198 : (int64 -> US2) = method8()
    let v199 : US2 option = v5 |> Option.map v198 
    let v219 : US2 = US2_1
    let v220 : US2 = v199 |> Option.defaultValue v219 
    let v360 : System.DateTime =
        match v220 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v343 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v344 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v344 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v345 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v347 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v343 = v347 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v350 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v350 
            #endif
#if FABLE_COMPILER_PYTHON
            let v351 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v351 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v352 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v352 
            #endif
#else
            let v353 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v353 
            #endif
            let v354 : System.DateTime = _run_target_args'_v343 
            v354
        | US2_0(v224) -> (* Some *)
            (* run_target_args'
            let v231 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v232 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v232 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v233 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v233 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v235 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v231 = v235 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v238 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v238 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v240 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v240 
            #endif
#else
            let v241 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v241 
            #endif
            let v242 : System.DateTime = _run_target_args'_v231 
            (* run_target_args'
            let v253 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v254 : (System.DateTime -> int64) = _.Ticks
            let v255 : int64 = v254 v242
            let _run_target_args'_v253 = v255 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v256 : (System.DateTime -> int64) = _.Ticks
            let v257 : int64 = v256 v242
            let _run_target_args'_v253 = v257 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v259 : int64 = null |> unbox<int64>
            let _run_target_args'_v253 = v259 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : (System.DateTime -> int64) = _.Ticks
            let v263 : int64 = v262 v242
            let _run_target_args'_v253 = v263 
            #endif
#if FABLE_COMPILER_PYTHON
            let v264 : (System.DateTime -> int64) = _.Ticks
            let v265 : int64 = v264 v242
            let _run_target_args'_v253 = v265 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v266 : (System.DateTime -> int64) = _.Ticks
            let v267 : int64 = v266 v242
            let _run_target_args'_v253 = v267 
            #endif
#else
            let v268 : (System.DateTime -> int64) = _.Ticks
            let v269 : int64 = v268 v242
            let _run_target_args'_v253 = v269 
            #endif
            let v270 : int64 = _run_target_args'_v253 
            let v292 : int64 = v270 |> int64 
            let v297 : int64 = v292 - v224
            let v303 : System.TimeSpan = v297 |> System.TimeSpan 
            let v309 : (System.TimeSpan -> int32) = _.Hours
            let v310 : int32 = v309 v303
            let v314 : (System.TimeSpan -> int32) = _.Minutes
            let v315 : int32 = v314 v303
            let v319 : (System.TimeSpan -> int32) = _.Seconds
            let v320 : int32 = v319 v303
            let v324 : (System.TimeSpan -> int32) = _.Milliseconds
            let v325 : int32 = v324 v303
            let v334 : System.DateTime = System.DateTime (1, 1, 1, v310, v315, v320, v325)
            v334
    let v361 : string = method9()
    let v363 : bool = v361 = ""
    let v365 : string =
        if v363 then
            let v364 : string = "M-d-y hh:mm:ss tt"
            v364
        else
            v361
    let v366 : (string -> string) = v360.ToString
    let v367 : string = v366 v365
    let _run_target_args'_v195 = v367 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v384 : (int64 -> US2) = method8()
    let v385 : US2 option = v5 |> Option.map v384 
    let v405 : US2 = US2_1
    let v406 : US2 = v385 |> Option.defaultValue v405 
    let v546 : System.DateTime =
        match v406 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v529 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v530 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v530 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v531 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v531 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v533 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v529 = v533 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v536 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v536 
            #endif
#if FABLE_COMPILER_PYTHON
            let v537 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v537 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v538 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v538 
            #endif
#else
            let v539 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v539 
            #endif
            let v540 : System.DateTime = _run_target_args'_v529 
            v540
        | US2_0(v410) -> (* Some *)
            (* run_target_args'
            let v417 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v418 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v418 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v419 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v419 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v421 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v417 = v421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v424 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v424 
            #endif
#if FABLE_COMPILER_PYTHON
            let v425 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v425 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v426 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v426 
            #endif
#else
            let v427 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v427 
            #endif
            let v428 : System.DateTime = _run_target_args'_v417 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : (System.DateTime -> int64) = _.Ticks
            let v441 : int64 = v440 v428
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : (System.DateTime -> int64) = _.Ticks
            let v443 : int64 = v442 v428
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : int64 = null |> unbox<int64>
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v448 : (System.DateTime -> int64) = _.Ticks
            let v449 : int64 = v448 v428
            let _run_target_args'_v439 = v449 
            #endif
#if FABLE_COMPILER_PYTHON
            let v450 : (System.DateTime -> int64) = _.Ticks
            let v451 : int64 = v450 v428
            let _run_target_args'_v439 = v451 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v452 : (System.DateTime -> int64) = _.Ticks
            let v453 : int64 = v452 v428
            let _run_target_args'_v439 = v453 
            #endif
#else
            let v454 : (System.DateTime -> int64) = _.Ticks
            let v455 : int64 = v454 v428
            let _run_target_args'_v439 = v455 
            #endif
            let v456 : int64 = _run_target_args'_v439 
            let v478 : int64 = v456 |> int64 
            let v483 : int64 = v478 - v410
            let v489 : System.TimeSpan = v483 |> System.TimeSpan 
            let v495 : (System.TimeSpan -> int32) = _.Hours
            let v496 : int32 = v495 v489
            let v500 : (System.TimeSpan -> int32) = _.Minutes
            let v501 : int32 = v500 v489
            let v505 : (System.TimeSpan -> int32) = _.Seconds
            let v506 : int32 = v505 v489
            let v510 : (System.TimeSpan -> int32) = _.Milliseconds
            let v511 : int32 = v510 v489
            let v520 : System.DateTime = System.DateTime (1, 1, 1, v496, v501, v506, v511)
            v520
    let v547 : string = method9()
    let v549 : bool = v547 = ""
    let v551 : string =
        if v549 then
            let v550 : string = "M-d-y hh:mm:ss tt"
            v550
        else
            v547
    let v552 : (string -> string) = v546.ToString
    let v553 : string = v552 v551
    let _run_target_args'_v195 = v553 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v568 : string = $"near_sdk::env::block_timestamp()"
    let v569 : uint64 = Fable.Core.RustInterop.emitRustExpr () v568 
    let v572 : (int64 -> US2) = method8()
    let v573 : US2 option = v5 |> Option.map v572 
    let v593 : US2 = US2_1
    let v594 : US2 = v573 |> Option.defaultValue v593 
    let v606 : uint64 =
        match v594 with
        | US2_1 -> (* None *)
            v569
        | US2_0(v598) -> (* Some *)
            let v600 : (int64 -> uint64) = uint64
            let v601 : uint64 = v600 v598
            let v604 : uint64 = v569 - v601
            v604
    let v607 : uint64 = v606 / 1000000000UL
    let v608 : uint64 = v607 % 60UL
    let v609 : uint64 = v607 / 60UL
    let v610 : uint64 = v609 % 60UL
    let v611 : uint64 = v607 / 3600UL
    let v612 : uint64 = v611 % 24UL
    let v613 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v612, v610, v608) v613 
    let v615 : string = "fable_library_rust::String_::fromString($0)"
    let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
    let _run_target_args'_v195 = v616 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v619 : (int64 -> US2) = method8()
    let v620 : US2 option = v5 |> Option.map v619 
    let v640 : US2 = US2_1
    let v641 : US2 = v620 |> Option.defaultValue v640 
    let v781 : System.DateTime =
        match v641 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v764 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v765 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v765 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v766 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v766 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v768 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v764 = v768 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v771 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v771 
            #endif
#if FABLE_COMPILER_PYTHON
            let v772 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v772 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v773 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v773 
            #endif
#else
            let v774 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v774 
            #endif
            let v775 : System.DateTime = _run_target_args'_v764 
            v775
        | US2_0(v645) -> (* Some *)
            (* run_target_args'
            let v652 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v653 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v653 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v654 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v654 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v656 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v652 = v656 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v659 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v659 
            #endif
#if FABLE_COMPILER_PYTHON
            let v660 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v660 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v661 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v661 
            #endif
#else
            let v662 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v662 
            #endif
            let v663 : System.DateTime = _run_target_args'_v652 
            (* run_target_args'
            let v674 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v675 : (System.DateTime -> int64) = _.Ticks
            let v676 : int64 = v675 v663
            let _run_target_args'_v674 = v676 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v677 : (System.DateTime -> int64) = _.Ticks
            let v678 : int64 = v677 v663
            let _run_target_args'_v674 = v678 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v680 : int64 = null |> unbox<int64>
            let _run_target_args'_v674 = v680 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v683 : (System.DateTime -> int64) = _.Ticks
            let v684 : int64 = v683 v663
            let _run_target_args'_v674 = v684 
            #endif
#if FABLE_COMPILER_PYTHON
            let v685 : (System.DateTime -> int64) = _.Ticks
            let v686 : int64 = v685 v663
            let _run_target_args'_v674 = v686 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v687 : (System.DateTime -> int64) = _.Ticks
            let v688 : int64 = v687 v663
            let _run_target_args'_v674 = v688 
            #endif
#else
            let v689 : (System.DateTime -> int64) = _.Ticks
            let v690 : int64 = v689 v663
            let _run_target_args'_v674 = v690 
            #endif
            let v691 : int64 = _run_target_args'_v674 
            let v713 : int64 = v691 |> int64 
            let v718 : int64 = v713 - v645
            let v724 : System.TimeSpan = v718 |> System.TimeSpan 
            let v730 : (System.TimeSpan -> int32) = _.Hours
            let v731 : int32 = v730 v724
            let v735 : (System.TimeSpan -> int32) = _.Minutes
            let v736 : int32 = v735 v724
            let v740 : (System.TimeSpan -> int32) = _.Seconds
            let v741 : int32 = v740 v724
            let v745 : (System.TimeSpan -> int32) = _.Milliseconds
            let v746 : int32 = v745 v724
            let v755 : System.DateTime = System.DateTime (1, 1, 1, v731, v736, v741, v746)
            v755
    let v782 : string = method10()
    let v784 : bool = v782 = ""
    let v786 : string =
        if v784 then
            let v785 : string = "M-d-y hh:mm:ss tt"
            v785
        else
            v782
    let v787 : (string -> string) = v781.ToString
    let v788 : string = v787 v786
    let _run_target_args'_v195 = v788 
    #endif
#if FABLE_COMPILER_PYTHON
    let v805 : (int64 -> US2) = method8()
    let v806 : US2 option = v5 |> Option.map v805 
    let v826 : US2 = US2_1
    let v827 : US2 = v806 |> Option.defaultValue v826 
    let v967 : System.DateTime =
        match v827 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v950 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v951 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v951 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v952 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v952 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v954 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v950 = v954 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v957 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v957 
            #endif
#if FABLE_COMPILER_PYTHON
            let v958 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v958 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v959 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v959 
            #endif
#else
            let v960 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v960 
            #endif
            let v961 : System.DateTime = _run_target_args'_v950 
            v961
        | US2_0(v831) -> (* Some *)
            (* run_target_args'
            let v838 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v839 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v839 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v840 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v840 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v842 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v838 = v842 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v845 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v845 
            #endif
#if FABLE_COMPILER_PYTHON
            let v846 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v846 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v847 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v847 
            #endif
#else
            let v848 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v848 
            #endif
            let v849 : System.DateTime = _run_target_args'_v838 
            (* run_target_args'
            let v860 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v861 : (System.DateTime -> int64) = _.Ticks
            let v862 : int64 = v861 v849
            let _run_target_args'_v860 = v862 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v863 : (System.DateTime -> int64) = _.Ticks
            let v864 : int64 = v863 v849
            let _run_target_args'_v860 = v864 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v866 : int64 = null |> unbox<int64>
            let _run_target_args'_v860 = v866 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v869 : (System.DateTime -> int64) = _.Ticks
            let v870 : int64 = v869 v849
            let _run_target_args'_v860 = v870 
            #endif
#if FABLE_COMPILER_PYTHON
            let v871 : (System.DateTime -> int64) = _.Ticks
            let v872 : int64 = v871 v849
            let _run_target_args'_v860 = v872 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v873 : (System.DateTime -> int64) = _.Ticks
            let v874 : int64 = v873 v849
            let _run_target_args'_v860 = v874 
            #endif
#else
            let v875 : (System.DateTime -> int64) = _.Ticks
            let v876 : int64 = v875 v849
            let _run_target_args'_v860 = v876 
            #endif
            let v877 : int64 = _run_target_args'_v860 
            let v899 : int64 = v877 |> int64 
            let v904 : int64 = v899 - v831
            let v910 : System.TimeSpan = v904 |> System.TimeSpan 
            let v916 : (System.TimeSpan -> int32) = _.Hours
            let v917 : int32 = v916 v910
            let v921 : (System.TimeSpan -> int32) = _.Minutes
            let v922 : int32 = v921 v910
            let v926 : (System.TimeSpan -> int32) = _.Seconds
            let v927 : int32 = v926 v910
            let v931 : (System.TimeSpan -> int32) = _.Milliseconds
            let v932 : int32 = v931 v910
            let v941 : System.DateTime = System.DateTime (1, 1, 1, v917, v922, v927, v932)
            v941
    let v968 : string = method10()
    let v970 : bool = v968 = ""
    let v972 : string =
        if v970 then
            let v971 : string = "M-d-y hh:mm:ss tt"
            v971
        else
            v968
    let v973 : (string -> string) = v967.ToString
    let v974 : string = v973 v972
    let _run_target_args'_v195 = v974 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v991 : (int64 -> US2) = method8()
    let v992 : US2 option = v5 |> Option.map v991 
    let v1012 : US2 = US2_1
    let v1013 : US2 = v992 |> Option.defaultValue v1012 
    let v1153 : System.DateTime =
        match v1013 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1136 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1137 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1137 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1138 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1138 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1140 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1136 = v1140 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1143 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1144 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1145 
            #endif
#else
            let v1146 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1146 
            #endif
            let v1147 : System.DateTime = _run_target_args'_v1136 
            v1147
        | US2_0(v1017) -> (* Some *)
            (* run_target_args'
            let v1024 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1025 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1025 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1026 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1026 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1028 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1024 = v1028 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1031 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1031 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1032 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1032 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1033 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1033 
            #endif
#else
            let v1034 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1034 
            #endif
            let v1035 : System.DateTime = _run_target_args'_v1024 
            (* run_target_args'
            let v1046 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1047 : (System.DateTime -> int64) = _.Ticks
            let v1048 : int64 = v1047 v1035
            let _run_target_args'_v1046 = v1048 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1049 : (System.DateTime -> int64) = _.Ticks
            let v1050 : int64 = v1049 v1035
            let _run_target_args'_v1046 = v1050 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1052 : int64 = null |> unbox<int64>
            let _run_target_args'_v1046 = v1052 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1055 : (System.DateTime -> int64) = _.Ticks
            let v1056 : int64 = v1055 v1035
            let _run_target_args'_v1046 = v1056 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1057 : (System.DateTime -> int64) = _.Ticks
            let v1058 : int64 = v1057 v1035
            let _run_target_args'_v1046 = v1058 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1059 : (System.DateTime -> int64) = _.Ticks
            let v1060 : int64 = v1059 v1035
            let _run_target_args'_v1046 = v1060 
            #endif
#else
            let v1061 : (System.DateTime -> int64) = _.Ticks
            let v1062 : int64 = v1061 v1035
            let _run_target_args'_v1046 = v1062 
            #endif
            let v1063 : int64 = _run_target_args'_v1046 
            let v1085 : int64 = v1063 |> int64 
            let v1090 : int64 = v1085 - v1017
            let v1096 : System.TimeSpan = v1090 |> System.TimeSpan 
            let v1102 : (System.TimeSpan -> int32) = _.Hours
            let v1103 : int32 = v1102 v1096
            let v1107 : (System.TimeSpan -> int32) = _.Minutes
            let v1108 : int32 = v1107 v1096
            let v1112 : (System.TimeSpan -> int32) = _.Seconds
            let v1113 : int32 = v1112 v1096
            let v1117 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1118 : int32 = v1117 v1096
            let v1127 : System.DateTime = System.DateTime (1, 1, 1, v1103, v1108, v1113, v1118)
            v1127
    let v1154 : string = method10()
    let v1156 : bool = v1154 = ""
    let v1158 : string =
        if v1156 then
            let v1157 : string = "M-d-y hh:mm:ss tt"
            v1157
        else
            v1154
    let v1159 : (string -> string) = v1153.ToString
    let v1160 : string = v1159 v1158
    let _run_target_args'_v195 = v1160 
    #endif
#else
    let v1177 : (int64 -> US2) = method8()
    let v1178 : US2 option = v5 |> Option.map v1177 
    let v1198 : US2 = US2_1
    let v1199 : US2 = v1178 |> Option.defaultValue v1198 
    let v1339 : System.DateTime =
        match v1199 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1322 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1323 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1323 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1324 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1324 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1326 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1322 = v1326 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1329 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1329 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1330 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1330 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1331 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1331 
            #endif
#else
            let v1332 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1332 
            #endif
            let v1333 : System.DateTime = _run_target_args'_v1322 
            v1333
        | US2_0(v1203) -> (* Some *)
            (* run_target_args'
            let v1210 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1211 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1211 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1212 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1212 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1214 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1210 = v1214 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1217 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1217 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1218 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1218 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1219 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1219 
            #endif
#else
            let v1220 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1220 
            #endif
            let v1221 : System.DateTime = _run_target_args'_v1210 
            (* run_target_args'
            let v1232 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1233 : (System.DateTime -> int64) = _.Ticks
            let v1234 : int64 = v1233 v1221
            let _run_target_args'_v1232 = v1234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1235 : (System.DateTime -> int64) = _.Ticks
            let v1236 : int64 = v1235 v1221
            let _run_target_args'_v1232 = v1236 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1238 : int64 = null |> unbox<int64>
            let _run_target_args'_v1232 = v1238 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1241 : (System.DateTime -> int64) = _.Ticks
            let v1242 : int64 = v1241 v1221
            let _run_target_args'_v1232 = v1242 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1243 : (System.DateTime -> int64) = _.Ticks
            let v1244 : int64 = v1243 v1221
            let _run_target_args'_v1232 = v1244 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1245 : (System.DateTime -> int64) = _.Ticks
            let v1246 : int64 = v1245 v1221
            let _run_target_args'_v1232 = v1246 
            #endif
#else
            let v1247 : (System.DateTime -> int64) = _.Ticks
            let v1248 : int64 = v1247 v1221
            let _run_target_args'_v1232 = v1248 
            #endif
            let v1249 : int64 = _run_target_args'_v1232 
            let v1271 : int64 = v1249 |> int64 
            let v1276 : int64 = v1271 - v1203
            let v1282 : System.TimeSpan = v1276 |> System.TimeSpan 
            let v1288 : (System.TimeSpan -> int32) = _.Hours
            let v1289 : int32 = v1288 v1282
            let v1293 : (System.TimeSpan -> int32) = _.Minutes
            let v1294 : int32 = v1293 v1282
            let v1298 : (System.TimeSpan -> int32) = _.Seconds
            let v1299 : int32 = v1298 v1282
            let v1303 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1304 : int32 = v1303 v1282
            let v1313 : System.DateTime = System.DateTime (1, 1, 1, v1289, v1294, v1299, v1304)
            v1313
    let v1340 : string = method10()
    let v1342 : bool = v1340 = ""
    let v1344 : string =
        if v1342 then
            let v1343 : string = "M-d-y hh:mm:ss tt"
            v1343
        else
            v1340
    let v1345 : (string -> string) = v1339.ToString
    let v1346 : string = v1345 v1344
    let _run_target_args'_v195 = v1346 
    #endif
    let v1361 : string = _run_target_args'_v195 
    v1361
and method13 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v4 : string = v2 + v1 
    v0.l0 <- v4
    ()
and method12 (v0 : char) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v7 : string = $"{v0}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v2, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v23 : string = v2.l0
    v23
and method14 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method11 () : string =
    
    
    
    
    
    let v2 : string = "Debug"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_bright_blue"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_bright_blue"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_bright_blue"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[94m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[94m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[94m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[94m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method16 (v0 : (string [])) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "args"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"%A{v0}"
    let v65 : string = $"{v61}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v2, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = " }"
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v2, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v100 : string = v2.l0
    v100
and method17 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v42 : char list = []
    let v44 : char list = '/' :: v42 
    let v48 : char list = ' ' :: v44 
    let v53 : (char list -> (char [])) = List.toArray
    let v54 : (char []) = v53 v48
    let v57 : string = v8.TrimEnd v54 
    v57
and method15 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method16(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.main"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure10(v0)
    let v4 : unit = (fun () -> v3 (); v2) ()
    ()
and closure5 (v0 : (string [])) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method15(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US7 =
    US7_0(v0, v1)
and method19 () : (struct (std_string_String * clap_ArgMatches) -> US7) =
    closure12()
and method20 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US8 =
    US8_0(v0)
and method21 () : (std_string_String -> US8) =
    closure13()
and method22 () : string =
    let v0 : string = "target"
    v0
and method23 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US12 =
    US12_0(v0)
and method24 () : (Vec<std_string_String> -> US12) =
    closure14()
and method25 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method26 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "extension"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "new_code"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method28 () : string =
    let v0 : string = ""
    v0
and method29 (v0 : string) : string =
    v0
and method30 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method31 () : string =
    let v0 : string = ""
    v0
and method27 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method28()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method29(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method30(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method31()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method29(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method32 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v62 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v63 : string = "format!(\"{}\", $0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v63 
    let _run_target_args'_v62 = v64 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v65 : string = "format!(\"{}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v65 
    let _run_target_args'_v62 = v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = "format!(\"{}\", $0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v67 
    let _run_target_args'_v62 = v68 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v70 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v70 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v78 
    #endif
#else
    let v82 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v82 
    #endif
    let v85 : std_string_String = _run_target_args'_v62 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v85 v94 
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _run_target_args'_v4 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = null |> unbox<string>
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "fs"
    let v105 : IFs = Fable.Core.JsInterop.importAll v104 
    let v106 : string = "fs.realpathSync('.')"
    let v107 : string = Fable.Core.JsInterop.emitJsExpr () v106 
    let _run_target_args'_v4 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : string = null |> unbox<string>
    let _run_target_args'_v4 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v113 : string = null |> unbox<string>
    let _run_target_args'_v4 = v113 
    #endif
#else
    let v116 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v117 : string = v116 ()
    let _run_target_args'_v4 = v117 
    #endif
    let v118 : string = _run_target_args'_v4 
    v118
and method34 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v48 
    let _run_target_args'_v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "String::from($0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v50 
    let _run_target_args'_v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "String::from($0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v52 
    let _run_target_args'_v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v63 
    #endif
#else
    let v67 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v67 
    #endif
    let v70 : std_string_String = _run_target_args'_v47 
    (* run_target_args'
    let v83 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "std::path::PathBuf::from($0)"
    let v85 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v84 
    let _run_target_args'_v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "std::path::PathBuf::from($0)"
    let v87 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v86 
    let _run_target_args'_v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "std::path::PathBuf::from($0)"
    let v89 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v88 
    let _run_target_args'_v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v99 
    #endif
#else
    let v103 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v103 
    #endif
    let v106 : std_path_PathBuf = _run_target_args'_v83 
    (* run_target_args'
    let v119 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v120 : string = "&*$0"
    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v120 
    let _run_target_args'_v119 = v121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v122 : string = "&*$0"
    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v122 
    let _run_target_args'_v119 = v123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : string = "&*$0"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v124 
    let _run_target_args'_v119 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v127 
    #endif
#if FABLE_COMPILER_PYTHON
    let v131 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v131 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v135 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v135 
    #endif
#else
    let v139 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v139 
    #endif
    let v142 : Ref<Str> = _run_target_args'_v119 
    (* run_target_args'
    let v155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : string = "String::from($0)"
    let v157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v156 
    let _run_target_args'_v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : string = "String::from($0)"
    let v159 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v158 
    let _run_target_args'_v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : string = "String::from($0)"
    let v161 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v160 
    let _run_target_args'_v155 = v161 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v171 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v171 
    #endif
#else
    let v175 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v175 
    #endif
    let v178 : std_string_String = _run_target_args'_v155 
    let v187 : string = "$0.join($1)"
    let v188 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v106, v178) v187 
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "$0.display()"
    let v195 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "$0.display()"
    let v197 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "$0.display()"
    let v199 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v205 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v209 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v209 
    #endif
#else
    let v213 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v213 
    #endif
    let v216 : std_path_Display = _run_target_args'_v193 
    (* run_target_args'
    let v229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v230 : string = "format!(\"{}\", $0)"
    let v231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v230 
    let _run_target_args'_v229 = v231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v232 : string = "format!(\"{}\", $0)"
    let v233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v232 
    let _run_target_args'_v229 = v233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v234 : string = "format!(\"{}\", $0)"
    let v235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v234 
    let _run_target_args'_v229 = v235 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v241 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v245 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v245 
    #endif
#else
    let v249 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v249 
    #endif
    let v252 : std_string_String = _run_target_args'_v229 
    let v261 : string = "fable_library_rust::String_::fromString($0)"
    let v262 : string = Fable.Core.RustInterop.emitRustExpr v252 v261 
    let _run_target_args'_v6 = v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : US3 = US3_1
    let v264 : US4 = US4_4(v263)
    let v265 : string = $"file_system.(</>) / target: {v264} / a: {v0} / b: {v1}"
    let v266 : string = failwith<string> v265
    let _run_target_args'_v6 = v266 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : string = null |> unbox<string>
    let _run_target_args'_v6 = v268 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v271 : string = "path"
    let v272 : IPathJoin = Fable.Core.JsInterop.importAll v271 
    let v273 : string = "v272.join($0, $1)"
    let v274 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v273 
    let _run_target_args'_v6 = v274 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : US3 = US3_0
    let v276 : US4 = US4_6(v275)
    let v277 : string = $"file_system.(</>) / target: {v276} / a: {v0} / b: {v1}"
    let v278 : string = failwith<string> v277
    let _run_target_args'_v6 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v279 : US3 = US3_1
    let v280 : US4 = US4_1(v279)
    let v281 : string = $"file_system.(</>) / target: {v280} / a: {v0} / b: {v1}"
    let v282 : string = failwith<string> v281
    let _run_target_args'_v6 = v282 
    #endif
#else
    let v283 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v283 
    #endif
    let v284 : string = _run_target_args'_v6 
    v284
and method36 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_file()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.File.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure15 () (v0 : string) : bool =
    method36(v0)
and method37 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_dir()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.Directory.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure16 () (v0 : string) : bool =
    method37(v0)
and method39 (v0 : string) : string option =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v115 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v118 
    (* run_target_args'
    let v124 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "$0.display()"
    let v126 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v125 
    let _run_target_args'_v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "$0.display()"
    let v128 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v127 
    let _run_target_args'_v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "$0.display()"
    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v129 
    let _run_target_args'_v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v140 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v140 
    #endif
#else
    let v144 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v144 
    #endif
    let v147 : std_path_Display = _run_target_args'_v124 
    (* run_target_args'
    let v160 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v161 : string = "format!(\"{}\", $0)"
    let v162 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v161 
    let _run_target_args'_v160 = v162 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : string = "format!(\"{}\", $0)"
    let v164 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v163 
    let _run_target_args'_v160 = v164 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v165 : string = "format!(\"{}\", $0)"
    let v166 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v165 
    let _run_target_args'_v160 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v168 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v176 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v176 
    #endif
#else
    let v180 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v180 
    #endif
    let v183 : std_string_String = _run_target_args'_v160 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v183 v192 
    let v194 : string = "true; $0 })"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr v193 v194 
    let v196 : string = "_optionm_map_"
    let v197 : string option = Fable.Core.RustInterop.emitRustExpr () v196 
    let _run_target_args'_v5 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v199 : string option = None
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v203 : string option = None
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v206 : string = "path"
    let v207 : IPathDirname = Fable.Core.JsInterop.importAll v206 
    let v208 : string = "v207.dirname($0)"
    let v209 : string = Fable.Core.JsInterop.emitJsExpr v0 v208 
    let v210 : bool = v209 = v0
    let v213 : US5 =
        if v210 then
            US5_1
        else
            US5_0(v209)
    let v224 : string option =
        match v213 with
        | US5_1 -> (* None *)
            let v220 : string option = None
            v220
        | US5_0(v214) -> (* Some *)
            let v216 : string option = Some v214 
            v216
    let _run_target_args'_v5 = v224 
    #endif
#if FABLE_COMPILER_PYTHON
    let v226 : string option = None
    let _run_target_args'_v5 = v226 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v230 : string option = None
    let _run_target_args'_v5 = v230 
    #endif
#else
    let v233 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v234 : System_IO_DirectoryInfo = v233 v0
    let v236 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v240 : bool = v234 = v236 
    let v285 : US5 =
        if v240 then
            US5_1
        else
            (* run_target_args'
            let v248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v250 : string = null |> unbox<string>
            let _run_target_args'_v248 = v250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v254 : string = null |> unbox<string>
            let _run_target_args'_v248 = v254 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v258 : string = null |> unbox<string>
            let _run_target_args'_v248 = v258 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : string = null |> unbox<string>
            let _run_target_args'_v248 = v262 
            #endif
#if FABLE_COMPILER_PYTHON
            let v266 : string = null |> unbox<string>
            let _run_target_args'_v248 = v266 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : string = null |> unbox<string>
            let _run_target_args'_v248 = v270 
            #endif
#else
            let v273 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v274 : string = v273 v234
            let _run_target_args'_v248 = v274 
            #endif
            let v275 : string = _run_target_args'_v248 
            US5_0(v275)
    let v296 : string option =
        match v285 with
        | US5_1 -> (* None *)
            let v292 : string option = None
            v292
        | US5_0(v286) -> (* Some *)
            let v288 : string option = Some v286 
            v288
    let _run_target_args'_v5 = v296 
    #endif
    let v297 : string option = _run_target_args'_v5 
    v297
and method40 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US14 =
    let v5 : string = method34(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US14_0(v4)
    else
        let v8 : string option = method39(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v32 : US5 = US5_1
        let v33 : US5 = v12 |> Option.defaultValue v32 
        match v33 with
        | US5_1 -> (* None *)
            let v39 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v40 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v41 : string = v39 + v40 
            US14_1(v41)
        | US5_0(v37) -> (* Some *)
            method40(v0, v1, v2, v3, v37)
and method38 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US14 =
    let v4 : string = method34(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US14_0(v1)
    else
        let v7 : string option = method39(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v31 : US5 = US5_1
        let v32 : US5 = v11 |> Option.defaultValue v31 
        match v32 with
        | US5_1 -> (* None *)
            let v38 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v39 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v40 : string = v38 + v39 
            US14_1(v40)
        | US5_0(v36) -> (* Some *)
            method40(v0, v1, v2, v3, v36)
and method35 (v0 : US13, v1 : string, v2 : string) : US14 =
    let v3 : bool =
        match v0 with
        | US13_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method38(v1, v2, v3, v6)
and method41 () : string =
    
    
    
    
    
    let v2 : string = "Warning"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_yellow"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_yellow"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_yellow"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[93m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[93m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[93m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[93m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method43 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "error"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method42 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method43(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.get_workspace_root"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure17 (v0 : string, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 3 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method41()
            let v125 : string = method42(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method48 (v0 : std_io_Error) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v46 : string = $"{v36}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v2, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v62 : string = v2.l0
    v62
and closure18 () (v0 : std_io_Error) : string =
    method48(v0)
and method47 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method49 () : (std_path_PathBuf -> US15) =
    closure19()
and closure20 () (v0 : string) : US15 =
    US15_1(v0)
and method50 () : (string -> US15) =
    closure20()
and method53 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v200 : US3 = US3_1
    let v201 : US4 = US4_4(v200)
    let v202 : string = $"file_system.get_file_name / target: {v201} / path: {v0}"
    let v203 : string = failwith<string> v202
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : string = "path"
    let v209 : IPathBasename = Fable.Core.JsInterop.importAll v208 
    let v210 : string = "v209.basename($0)"
    let v211 : string = Fable.Core.JsInterop.emitJsExpr v0 v210 
    let _run_target_args'_v5 = v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v212 : US3 = US3_0
    let v213 : US4 = US4_6(v212)
    let v214 : string = $"file_system.get_file_name / target: {v213} / path: {v0}"
    let v215 : string = failwith<string> v214
    let _run_target_args'_v5 = v215 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : US3 = US3_1
    let v217 : US4 = US4_1(v216)
    let v218 : string = $"file_system.get_file_name / target: {v217} / path: {v0}"
    let v219 : string = failwith<string> v218
    let _run_target_args'_v5 = v219 
    #endif
#else
    let v220 : (string -> string) = System.IO.Path.GetFileName
    let v221 : string = v220 v0
    let _run_target_args'_v5 = v221 
    #endif
    let v222 : string = _run_target_args'_v5 
    v222
and method54 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v2, v4)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v20 : string = v2.l0
    v20
and method52 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method53(v4)
    let v6 : string option = method39(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method54(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v77 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v78 
        let _run_target_args'_v77 = v79 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v80 : string = "Err($0)"
        let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v80 
        let _run_target_args'_v77 = v81 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v82 : string = "Err($0)"
        let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v82 
        let _run_target_args'_v77 = v83 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v84 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v86 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v86 
        #endif
#else
        let v87 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v87 
        #endif
        let v88 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v77 
        v88
    else
        match v31 with
        | US5_0(v91) -> (* Some *)
            let v94 : string = ""
            let v95 : bool = v4 <> v94 
            if v95 then
                let v98 : uint8 = v2 + 1uy
                let v99 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v98
                let v100 : Result<std_path_PathBuf, std_io_Error> = v99 v91
                let v101 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v104 
                let _run_target_args'_v103 = v105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v106 : string = "$0.map_err(|x| $1(x))"
                let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v106 
                let _run_target_args'_v103 = v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : string = "$0.map_err(|x| $1(x))"
                let v109 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v108 
                let _run_target_args'_v103 = v109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v110 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v110 
                #endif
#if FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v111 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v112 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v112 
                #endif
#else
                let v113 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v113 
                #endif
                let v114 : Result<std_path_PathBuf, string> = _run_target_args'_v103 
                let v117 : (std_path_PathBuf -> US15) = method49()
                let v118 : (string -> US15) = method50()
                let v120 : US15 = match v114 with Ok x -> v117 x | Error x -> v118 x
                match v120 with
                | US15_1(v288) -> (* Error *)
                    let v289 : string = $"file_system.read_link / "
                    let v290 : string = $"error': {v288} / error: {v35} / name: {v5}"
                    let v291 : string = v289 + v290 
                    (* run_target_args'
                    let v296 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v297 
                    let _run_target_args'_v296 = v298 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v299 
                    let _run_target_args'_v296 = v300 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v301 
                    let _run_target_args'_v296 = v302 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v304 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v304 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v312 
                    #endif
#else
                    let v316 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v316 
                    #endif
                    let v319 : std_io_Error = _run_target_args'_v296 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US15_0(v123) -> (* Ok *)
                    (* run_target_args'
                    let v128 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v129 
                    let _run_target_args'_v128 = v130 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v131 : string = "$0.display()"
                    let v132 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v131 
                    let _run_target_args'_v128 = v132 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v133 : string = "$0.display()"
                    let v134 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v133 
                    let _run_target_args'_v128 = v134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v136 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v136 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v144 
                    #endif
#else
                    let v148 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v148 
                    #endif
                    let v151 : std_path_Display = _run_target_args'_v128 
                    let v161 : string = v151 |> string 
                    let v164 : string = method34(v161, v5)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "&*$0"
                    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v185 
                    #endif
#else
                    let v189 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v189 
                    #endif
                    let v192 : Ref<Str> = _run_target_args'_v169 
                    (* run_target_args'
                    let v205 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v206 : string = "String::from($0)"
                    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v206 
                    let _run_target_args'_v205 = v207 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v208 : string = "String::from($0)"
                    let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v208 
                    let _run_target_args'_v205 = v209 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v210 : string = "String::from($0)"
                    let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v210 
                    let _run_target_args'_v205 = v211 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v213 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v213 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v221 
                    #endif
#else
                    let v225 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v225 
                    #endif
                    let v228 : std_string_String = _run_target_args'_v205 
                    (* run_target_args'
                    let v241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v242 : string = "std::path::PathBuf::from($0)"
                    let v243 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v242 
                    let _run_target_args'_v241 = v243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v244 : string = "std::path::PathBuf::from($0)"
                    let v245 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v244 
                    let _run_target_args'_v241 = v245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v246 : string = "std::path::PathBuf::from($0)"
                    let v247 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v246 
                    let _run_target_args'_v241 = v247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v249 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v253 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v253 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v257 
                    #endif
#else
                    let v261 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v261 
                    #endif
                    let v264 : std_path_PathBuf = _run_target_args'_v241 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "Ok($0)"
                    let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "Ok($0)"
                    let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v283 
                    #endif
#else
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v284 
                    #endif
                    let v285 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v274 
                    v285
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v385 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v386 
                let _run_target_args'_v385 = v387 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v388 
                let _run_target_args'_v385 = v389 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v390 : string = "Err($0)"
                let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v390 
                let _run_target_args'_v385 = v391 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v393 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v394 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v394 
                #endif
#else
                let v395 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v395 
                #endif
                let v396 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v385 
                v396
        | _ ->
            let v400 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v401 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v402 : string = v400 + v401 
            (* run_target_args'
            let v407 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v408 
            let _run_target_args'_v407 = v409 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v407 = v411 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v412 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v413 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v407 = v413 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v415 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v415 
            #endif
#if FABLE_COMPILER_PYTHON
            let v419 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v419 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v423 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v423 
            #endif
#else
            let v427 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v427 
            #endif
            let v430 : std_io_Error = _run_target_args'_v407 
            (* run_target_args'
            let v440 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v441 : string = "Err($0)"
            let v442 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v441 
            let _run_target_args'_v440 = v442 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v443 : string = "Err($0)"
            let v444 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v443 
            let _run_target_args'_v440 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : string = "Err($0)"
            let v446 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v445 
            let _run_target_args'_v440 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v447 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v447 
            #endif
#if FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v448 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v449 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v449 
            #endif
#else
            let v450 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v450 
            #endif
            let v451 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v440 
            v451
and method51 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US15) = method49()
    let v27 : (string -> US15) = method50()
    let v29 : US15 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US15_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method52(v0, v49, v1, v48, v2)
        | US15_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US15) = method49()
    let v72 : (string -> US15) = method50()
    let v74 : US15 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US15_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method52(v0, v94, v1, v93, v2)
        | US15_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US15) = method49()
    let v117 : (string -> US15) = method50()
    let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US15_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method52(v0, v139, v1, v138, v2)
        | US15_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method51(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method55 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method53(v0)
    let v5 : string option = method39(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method54(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v76 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v77 
        let _run_target_args'_v76 = v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v79 
        let _run_target_args'_v76 = v80 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v81 : string = "Err($0)"
        let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v81 
        let _run_target_args'_v76 = v82 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v83 
        #endif
#if FABLE_COMPILER_PYTHON
        let v84 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v84 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v85 
        #endif
#else
        let v86 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v86 
        #endif
        let v87 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v76 
        v87
    else
        match v30 with
        | US5_0(v90) -> (* Some *)
            let v93 : string = ""
            let v94 : bool = v0 <> v93 
            if v94 then
                let v97 : uint8 = v2 + 1uy
                let v98 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v97
                let v99 : Result<std_path_PathBuf, std_io_Error> = v98 v90
                let v100 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v102 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
                let _run_target_args'_v102 = v104 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
                let _run_target_args'_v102 = v106 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v107 : string = "$0.map_err(|x| $1(x))"
                let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
                let _run_target_args'_v102 = v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v111 
                #endif
#else
                let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v112 
                #endif
                let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
                let v116 : (std_path_PathBuf -> US15) = method49()
                let v117 : (string -> US15) = method50()
                let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
                match v119 with
                | US15_1(v287) -> (* Error *)
                    let v288 : string = $"file_system.read_link / "
                    let v289 : string = $"error': {v287} / error: {v34} / name: {v4}"
                    let v290 : string = v288 + v289 
                    (* run_target_args'
                    let v295 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v296 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v297 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v296 
                    let _run_target_args'_v295 = v297 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v298 
                    let _run_target_args'_v295 = v299 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v300 
                    let _run_target_args'_v295 = v301 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v303 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v303 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v311 
                    #endif
#else
                    let v315 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v315 
                    #endif
                    let v318 : std_io_Error = _run_target_args'_v295 
                    (* run_target_args'
                    let v328 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v329 : string = "Err($0)"
                    let v330 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v329 
                    let _run_target_args'_v328 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v331 
                    let _run_target_args'_v328 = v332 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v333 
                    let _run_target_args'_v328 = v334 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v335 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v335 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v336 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v337 
                    #endif
#else
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v338 
                    #endif
                    let v339 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v328 
                    v339
                | US15_0(v122) -> (* Ok *)
                    (* run_target_args'
                    let v127 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _run_target_args'_v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _run_target_args'_v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "$0.display()"
                    let v133 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _run_target_args'_v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v135 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v135 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v139 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v139 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v143 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v143 
                    #endif
#else
                    let v147 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v147 
                    #endif
                    let v150 : std_path_Display = _run_target_args'_v127 
                    let v160 : string = v150 |> string 
                    let v163 : string = method34(v160, v4)
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "&*$0"
                    let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _run_target_args'_v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "&*$0"
                    let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _run_target_args'_v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _run_target_args'_v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v184 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v184 
                    #endif
#else
                    let v188 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v188 
                    #endif
                    let v191 : Ref<Str> = _run_target_args'_v168 
                    (* run_target_args'
                    let v204 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v205 : string = "String::from($0)"
                    let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v205 
                    let _run_target_args'_v204 = v206 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v207 : string = "String::from($0)"
                    let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v207 
                    let _run_target_args'_v204 = v208 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v209 : string = "String::from($0)"
                    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v209 
                    let _run_target_args'_v204 = v210 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v212 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v212 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v216 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v216 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v220 
                    #endif
#else
                    let v224 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v224 
                    #endif
                    let v227 : std_string_String = _run_target_args'_v204 
                    (* run_target_args'
                    let v240 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v241 : string = "std::path::PathBuf::from($0)"
                    let v242 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v241 
                    let _run_target_args'_v240 = v242 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v243 : string = "std::path::PathBuf::from($0)"
                    let v244 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v243 
                    let _run_target_args'_v240 = v244 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v245 : string = "std::path::PathBuf::from($0)"
                    let v246 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v245 
                    let _run_target_args'_v240 = v246 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v248 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v252 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v256 
                    #endif
#else
                    let v260 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v260 
                    #endif
                    let v263 : std_path_PathBuf = _run_target_args'_v240 
                    (* run_target_args'
                    let v273 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v274 : string = "Ok($0)"
                    let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v274 
                    let _run_target_args'_v273 = v275 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v276 : string = "Ok($0)"
                    let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v276 
                    let _run_target_args'_v273 = v277 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v278 
                    let _run_target_args'_v273 = v279 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v280 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v280 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v282 
                    #endif
#else
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v283 
                    #endif
                    let v284 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v273 
                    v284
            else
                let v344 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v345 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v346 : string = v344 + v345 
                (* run_target_args'
                let v351 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v352 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v353 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v352 
                let _run_target_args'_v351 = v353 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v351 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v351 = v357 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v363 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v367 
                #endif
#else
                let v371 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v371 
                #endif
                let v374 : std_io_Error = _run_target_args'_v351 
                (* run_target_args'
                let v384 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v385 
                let _run_target_args'_v384 = v386 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v387 
                let _run_target_args'_v384 = v388 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v389 : string = "Err($0)"
                let v390 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v389 
                let _run_target_args'_v384 = v390 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v391 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v392 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v393 
                #endif
#else
                let v394 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v394 
                #endif
                let v395 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v384 
                v395
        | _ ->
            let v399 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v400 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v401 : string = v399 + v400 
            (* run_target_args'
            let v406 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v407 
            let _run_target_args'_v406 = v408 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v409 
            let _run_target_args'_v406 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v411 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v412 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v411 
            let _run_target_args'_v406 = v412 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v414 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v414 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v422 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v422 
            #endif
#else
            let v426 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v426 
            #endif
            let v429 : std_io_Error = _run_target_args'_v406 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v440 
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : string = "Err($0)"
            let v443 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v442 
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v444 : string = "Err($0)"
            let v445 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v444 
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v446 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v447 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v447 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v448 
            #endif
#else
            let v449 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v449 
            #endif
            let v450 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v439 
            v450
and method46 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US15) = method49()
    let v26 : (string -> US15) = method50()
    let v28 : US15 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US15_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method55(v0, v48, v1, v47)
        | US15_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US15) = method49()
    let v71 : (string -> US15) = method50()
    let v73 : US15 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US15_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method55(v0, v93, v1, v92)
        | US15_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US15) = method49()
    let v116 : (string -> US15) = method50()
    let v118 : US15 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US15_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method55(v0, v138, v1, v137)
        | US15_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method57 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method58 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method59 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method61 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method53(v4)
    let v6 : string option = method39(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method48(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v77 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v78 
        let _run_target_args'_v77 = v79 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v80 : string = "Err($0)"
        let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v80 
        let _run_target_args'_v77 = v81 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v82 : string = "Err($0)"
        let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v82 
        let _run_target_args'_v77 = v83 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v84 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v86 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v86 
        #endif
#else
        let v87 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v87 
        #endif
        let v88 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v77 
        v88
    else
        match v31 with
        | US5_0(v91) -> (* Some *)
            let v94 : string = ""
            let v95 : bool = v4 <> v94 
            if v95 then
                let v98 : uint8 = v2 + 1uy
                let v99 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v98
                let v100 : Result<std_path_PathBuf, std_io_Error> = v99 v91
                let v101 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v104 
                let _run_target_args'_v103 = v105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v106 : string = "$0.map_err(|x| $1(x))"
                let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v106 
                let _run_target_args'_v103 = v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : string = "$0.map_err(|x| $1(x))"
                let v109 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v108 
                let _run_target_args'_v103 = v109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v110 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v110 
                #endif
#if FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v111 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v112 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v112 
                #endif
#else
                let v113 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v113 
                #endif
                let v114 : Result<std_path_PathBuf, string> = _run_target_args'_v103 
                let v117 : (std_path_PathBuf -> US15) = method49()
                let v118 : (string -> US15) = method50()
                let v120 : US15 = match v114 with Ok x -> v117 x | Error x -> v118 x
                match v120 with
                | US15_1(v288) -> (* Error *)
                    let v289 : string = $"file_system.read_link / "
                    let v290 : string = $"error': {v288} / error: {v35} / name: {v5}"
                    let v291 : string = v289 + v290 
                    (* run_target_args'
                    let v296 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v297 
                    let _run_target_args'_v296 = v298 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v299 
                    let _run_target_args'_v296 = v300 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v301 
                    let _run_target_args'_v296 = v302 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v304 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v304 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v312 
                    #endif
#else
                    let v316 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v316 
                    #endif
                    let v319 : std_io_Error = _run_target_args'_v296 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US15_0(v123) -> (* Ok *)
                    (* run_target_args'
                    let v128 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v129 
                    let _run_target_args'_v128 = v130 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v131 : string = "$0.display()"
                    let v132 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v131 
                    let _run_target_args'_v128 = v132 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v133 : string = "$0.display()"
                    let v134 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v133 
                    let _run_target_args'_v128 = v134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v136 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v136 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v144 
                    #endif
#else
                    let v148 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v148 
                    #endif
                    let v151 : std_path_Display = _run_target_args'_v128 
                    let v161 : string = v151 |> string 
                    let v164 : string = method34(v161, v5)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "&*$0"
                    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v185 
                    #endif
#else
                    let v189 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v189 
                    #endif
                    let v192 : Ref<Str> = _run_target_args'_v169 
                    (* run_target_args'
                    let v205 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v206 : string = "String::from($0)"
                    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v206 
                    let _run_target_args'_v205 = v207 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v208 : string = "String::from($0)"
                    let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v208 
                    let _run_target_args'_v205 = v209 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v210 : string = "String::from($0)"
                    let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v210 
                    let _run_target_args'_v205 = v211 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v213 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v213 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v221 
                    #endif
#else
                    let v225 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v225 
                    #endif
                    let v228 : std_string_String = _run_target_args'_v205 
                    (* run_target_args'
                    let v241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v242 : string = "std::path::PathBuf::from($0)"
                    let v243 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v242 
                    let _run_target_args'_v241 = v243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v244 : string = "std::path::PathBuf::from($0)"
                    let v245 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v244 
                    let _run_target_args'_v241 = v245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v246 : string = "std::path::PathBuf::from($0)"
                    let v247 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v246 
                    let _run_target_args'_v241 = v247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v249 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v253 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v253 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v257 
                    #endif
#else
                    let v261 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v261 
                    #endif
                    let v264 : std_path_PathBuf = _run_target_args'_v241 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "Ok($0)"
                    let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "Ok($0)"
                    let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v283 
                    #endif
#else
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v284 
                    #endif
                    let v285 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v274 
                    v285
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v385 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v386 
                let _run_target_args'_v385 = v387 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v388 
                let _run_target_args'_v385 = v389 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v390 : string = "Err($0)"
                let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v390 
                let _run_target_args'_v385 = v391 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v393 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v394 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v394 
                #endif
#else
                let v395 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v395 
                #endif
                let v396 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v385 
                v396
        | _ ->
            let v400 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v401 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v402 : string = v400 + v401 
            (* run_target_args'
            let v407 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v408 
            let _run_target_args'_v407 = v409 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v407 = v411 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v412 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v413 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v407 = v413 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v415 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v415 
            #endif
#if FABLE_COMPILER_PYTHON
            let v419 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v419 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v423 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v423 
            #endif
#else
            let v427 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v427 
            #endif
            let v430 : std_io_Error = _run_target_args'_v407 
            (* run_target_args'
            let v440 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v441 : string = "Err($0)"
            let v442 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v441 
            let _run_target_args'_v440 = v442 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v443 : string = "Err($0)"
            let v444 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v443 
            let _run_target_args'_v440 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : string = "Err($0)"
            let v446 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v445 
            let _run_target_args'_v440 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v447 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v447 
            #endif
#if FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v448 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v449 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v449 
            #endif
#else
            let v450 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v450 
            #endif
            let v451 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v440 
            v451
and method60 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v45 : System.IO.FileAttributes = method57(v36)
    let v46 : System.IO.FileAttributes = method58()
    let v47 : bool = method59(v46, v45)
    if v47 then
        (* run_target_args'
        let v52 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v58 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v62 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v66 
        #endif
#if FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v70 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v74 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v74 
        #endif
#else
        let v78 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v52 = v78 
        #endif
        let v81 : System_IO_FileInfo = _run_target_args'_v52 
        (* run_target_args'
        let v94 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v96 : string = null |> unbox<string>
        let _run_target_args'_v94 = v96 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v100 : string = null |> unbox<string>
        let _run_target_args'_v94 = v100 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v104 : string = null |> unbox<string>
        let _run_target_args'_v94 = v104 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v108 : string = null |> unbox<string>
        let _run_target_args'_v94 = v108 
        #endif
#if FABLE_COMPILER_PYTHON
        let v112 : string = null |> unbox<string>
        let _run_target_args'_v94 = v112 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v116 : string = null |> unbox<string>
        let _run_target_args'_v94 = v116 
        #endif
#else
        let v119 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v120 : string = v119 v81
        let _run_target_args'_v94 = v120 
        #endif
        let v121 : string = _run_target_args'_v94 
        let v131 : std_path_PathBuf = v121 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v135 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v136 : string = "Ok($0)"
        let v137 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v136 
        let _run_target_args'_v135 = v137 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v138 : string = "Ok($0)"
        let v139 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v138 
        let _run_target_args'_v135 = v139 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v140 : string = "Ok($0)"
        let v141 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v140 
        let _run_target_args'_v135 = v141 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v142 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v142 
        #endif
#if FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v143 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v144 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v144 
        #endif
#else
        let v145 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v145 
        #endif
        let v146 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v135 
        v146
    else
        let v149 : string = $"file_system.read_link / Fsharp / "
        let v150 : string = $"The file or directory is not a reparse point. / "
        let v151 : string = v149 + v150 
        let v152 : string = $"path: {v0} / result: {v47} / path': {v2} / n: {v1}"
        let v153 : string = v151 + v152 
        (* run_target_args'
        let v158 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v159 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v160 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v159 
        let _run_target_args'_v158 = v160 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v161 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v162 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v161 
        let _run_target_args'_v158 = v162 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v163 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v164 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v163 
        let _run_target_args'_v158 = v164 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v166 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v166 
        #endif
#if FABLE_COMPILER_PYTHON
        let v170 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v170 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v174 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v174 
        #endif
#else
        let v178 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v178 
        #endif
        let v181 : std_io_Error = _run_target_args'_v158 
        let v190 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method61(v0, v190, v1, v181, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method60(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method62 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method53(v0)
    let v5 : string option = method39(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method48(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v76 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v77 
        let _run_target_args'_v76 = v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v79 
        let _run_target_args'_v76 = v80 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v81 : string = "Err($0)"
        let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v81 
        let _run_target_args'_v76 = v82 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v83 
        #endif
#if FABLE_COMPILER_PYTHON
        let v84 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v84 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v85 
        #endif
#else
        let v86 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v86 
        #endif
        let v87 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v76 
        v87
    else
        match v30 with
        | US5_0(v90) -> (* Some *)
            let v93 : string = ""
            let v94 : bool = v0 <> v93 
            if v94 then
                let v97 : uint8 = v2 + 1uy
                let v98 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v97
                let v99 : Result<std_path_PathBuf, std_io_Error> = v98 v90
                let v100 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v102 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
                let _run_target_args'_v102 = v104 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
                let _run_target_args'_v102 = v106 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v107 : string = "$0.map_err(|x| $1(x))"
                let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
                let _run_target_args'_v102 = v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v111 
                #endif
#else
                let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v112 
                #endif
                let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
                let v116 : (std_path_PathBuf -> US15) = method49()
                let v117 : (string -> US15) = method50()
                let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
                match v119 with
                | US15_1(v287) -> (* Error *)
                    let v288 : string = $"file_system.read_link / "
                    let v289 : string = $"error': {v287} / error: {v34} / name: {v4}"
                    let v290 : string = v288 + v289 
                    (* run_target_args'
                    let v295 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v296 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v297 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v296 
                    let _run_target_args'_v295 = v297 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v298 
                    let _run_target_args'_v295 = v299 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v300 
                    let _run_target_args'_v295 = v301 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v303 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v303 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v311 
                    #endif
#else
                    let v315 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v315 
                    #endif
                    let v318 : std_io_Error = _run_target_args'_v295 
                    (* run_target_args'
                    let v328 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v329 : string = "Err($0)"
                    let v330 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v329 
                    let _run_target_args'_v328 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v331 
                    let _run_target_args'_v328 = v332 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v333 
                    let _run_target_args'_v328 = v334 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v335 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v335 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v336 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v337 
                    #endif
#else
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v338 
                    #endif
                    let v339 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v328 
                    v339
                | US15_0(v122) -> (* Ok *)
                    (* run_target_args'
                    let v127 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _run_target_args'_v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _run_target_args'_v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "$0.display()"
                    let v133 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _run_target_args'_v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v135 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v135 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v139 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v139 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v143 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v143 
                    #endif
#else
                    let v147 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v147 
                    #endif
                    let v150 : std_path_Display = _run_target_args'_v127 
                    let v160 : string = v150 |> string 
                    let v163 : string = method34(v160, v4)
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "&*$0"
                    let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _run_target_args'_v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "&*$0"
                    let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _run_target_args'_v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _run_target_args'_v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v184 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v184 
                    #endif
#else
                    let v188 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v188 
                    #endif
                    let v191 : Ref<Str> = _run_target_args'_v168 
                    (* run_target_args'
                    let v204 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v205 : string = "String::from($0)"
                    let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v205 
                    let _run_target_args'_v204 = v206 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v207 : string = "String::from($0)"
                    let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v207 
                    let _run_target_args'_v204 = v208 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v209 : string = "String::from($0)"
                    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v209 
                    let _run_target_args'_v204 = v210 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v212 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v212 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v216 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v216 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v220 
                    #endif
#else
                    let v224 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v224 
                    #endif
                    let v227 : std_string_String = _run_target_args'_v204 
                    (* run_target_args'
                    let v240 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v241 : string = "std::path::PathBuf::from($0)"
                    let v242 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v241 
                    let _run_target_args'_v240 = v242 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v243 : string = "std::path::PathBuf::from($0)"
                    let v244 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v243 
                    let _run_target_args'_v240 = v244 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v245 : string = "std::path::PathBuf::from($0)"
                    let v246 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v245 
                    let _run_target_args'_v240 = v246 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v248 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v252 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v256 
                    #endif
#else
                    let v260 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v260 
                    #endif
                    let v263 : std_path_PathBuf = _run_target_args'_v240 
                    (* run_target_args'
                    let v273 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v274 : string = "Ok($0)"
                    let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v274 
                    let _run_target_args'_v273 = v275 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v276 : string = "Ok($0)"
                    let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v276 
                    let _run_target_args'_v273 = v277 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v278 
                    let _run_target_args'_v273 = v279 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v280 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v280 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v282 
                    #endif
#else
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v283 
                    #endif
                    let v284 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v273 
                    v284
            else
                let v344 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v345 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v346 : string = v344 + v345 
                (* run_target_args'
                let v351 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v352 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v353 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v352 
                let _run_target_args'_v351 = v353 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v351 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v351 = v357 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v363 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v367 
                #endif
#else
                let v371 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v371 
                #endif
                let v374 : std_io_Error = _run_target_args'_v351 
                (* run_target_args'
                let v384 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v385 
                let _run_target_args'_v384 = v386 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v387 
                let _run_target_args'_v384 = v388 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v389 : string = "Err($0)"
                let v390 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v389 
                let _run_target_args'_v384 = v390 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v391 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v392 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v393 
                #endif
#else
                let v394 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v394 
                #endif
                let v395 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v384 
                v395
        | _ ->
            let v399 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v400 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v401 : string = v399 + v400 
            (* run_target_args'
            let v406 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v407 
            let _run_target_args'_v406 = v408 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v409 
            let _run_target_args'_v406 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v411 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v412 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v411 
            let _run_target_args'_v406 = v412 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v414 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v414 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v422 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v422 
            #endif
#else
            let v426 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v426 
            #endif
            let v429 : std_io_Error = _run_target_args'_v406 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v440 
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : string = "Err($0)"
            let v443 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v442 
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v444 : string = "Err($0)"
            let v445 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v444 
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v446 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v447 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v447 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v448 
            #endif
#else
            let v449 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v449 
            #endif
            let v450 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v439 
            v450
and method56 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v44 : System.IO.FileAttributes = method57(v35)
    let v45 : System.IO.FileAttributes = method58()
    let v46 : bool = method59(v45, v44)
    if v46 then
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v77 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v51 = v77 
        #endif
        let v80 : System_IO_FileInfo = _run_target_args'_v51 
        (* run_target_args'
        let v93 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v95 : string = null |> unbox<string>
        let _run_target_args'_v93 = v95 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v99 : string = null |> unbox<string>
        let _run_target_args'_v93 = v99 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v103 : string = null |> unbox<string>
        let _run_target_args'_v93 = v103 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v107 : string = null |> unbox<string>
        let _run_target_args'_v93 = v107 
        #endif
#if FABLE_COMPILER_PYTHON
        let v111 : string = null |> unbox<string>
        let _run_target_args'_v93 = v111 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v115 : string = null |> unbox<string>
        let _run_target_args'_v93 = v115 
        #endif
#else
        let v118 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v119 : string = v118 v80
        let _run_target_args'_v93 = v119 
        #endif
        let v120 : string = _run_target_args'_v93 
        let v130 : std_path_PathBuf = v120 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v134 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "Ok($0)"
        let v136 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v135 
        let _run_target_args'_v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "Ok($0)"
        let v138 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v137 
        let _run_target_args'_v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "Ok($0)"
        let v140 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v139 
        let _run_target_args'_v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v143 
        #endif
#else
        let v144 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v144 
        #endif
        let v145 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v134 
        v145
    else
        let v148 : string = $"file_system.read_link / Fsharp / "
        let v149 : string = $"The file or directory is not a reparse point. / "
        let v150 : string = v148 + v149 
        let v151 : string = $"path: {v0} / result: {v46} / path': {v0} / n: {v1}"
        let v152 : string = v150 + v151 
        (* run_target_args'
        let v157 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v158 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v159 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v158 
        let _run_target_args'_v157 = v159 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v160 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v161 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v160 
        let _run_target_args'_v157 = v161 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v162 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v163 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v162 
        let _run_target_args'_v157 = v163 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v165 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v165 
        #endif
#if FABLE_COMPILER_PYTHON
        let v169 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v169 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v173 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v173 
        #endif
#else
        let v177 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v177 
        #endif
        let v180 : std_io_Error = _run_target_args'_v157 
        let v189 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method62(v0, v189, v1, v180)
and method45 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method37(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method46(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method37(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method46(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method37(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method46(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method56(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method56(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method56(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US16 =
    US16_0(v0)
and method63 () : (std_path_PathBuf -> US16) =
    closure25()
and method65 (v0 : string) : string =
    v0
and method66 () : string =
    let v0 : string = ""
    v0
and method64 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method65(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method66()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method66()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method66()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method66()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method66()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method44 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method45(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US16) = method63()
        let v22 : US16 option = v16 |> Option.map v21 
        let v42 : US16 = US16_1
        let v43 : US16 = v22 |> Option.defaultValue v42 
        let v89 : string =
            match v43 with
            | US16_1 -> (* None *)
                v0
            | US16_0(v47) -> (* Some *)
                (* run_target_args'
                let v52 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v53 
                let _run_target_args'_v52 = v54 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v55 
                let _run_target_args'_v52 = v56 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57 : string = "$0.display()"
                let v58 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v57 
                let _run_target_args'_v52 = v58 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v60 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v60 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v64 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v68 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v68 
                #endif
#else
                let v72 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v72 
                #endif
                let v75 : std_path_Display = _run_target_args'_v52 
                let v85 : string = v75 |> string 
                v85
        let v90 : bool = v89 = ""
        let v91 : string =
            if v90 then
                v0
            else
                v89
        let v92 : string = "^\\\\\\\\\\?\\\\"
        let v93 : string = ""
        let v94 : string = method64(v92, v93, v91)
        let v95 : int32 = v94.Length
        let v96 : bool = v95 < 2
        if v96 then
            v0
        else
            let v97 : string = $"{v94.[0] |> string |> _.ToLower()}{v94.[1..]}"
            let v98 : string = "\\"
            let v99 : string = "/"
            let v100 : string = v97.Replace (v98, v99)
            v100
and method33 (v0 : string) : US5 =
    let v1 : US13 = US13_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method34(v2, v3)
    let v5 : US14 = method35(v1, v4, v0)
    match v5 with
    | US14_1(v9) -> (* Error *)
        let v321 : unit = ()
        let v322 : (unit -> unit) = closure17(v0, v9)
        let v323 : unit = (fun () -> v322 (); v321) ()
        US5_1
    | US14_0(v6) -> (* Ok *)
        let v7 : string = method44(v6)
        US5_0(v7)
and method69 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method70 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method68 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : bool = v115 = false
    let v312 : string =
        if v116 then
            let v117 : string = method32()
            let v118 : string = method34(v117, v0)
            let v119 : string = method44(v118)
            let v127 : string = "/"
            let v128 : (string []) = v119.Split v127 
            let v131 : (string []) = [||]
            let v132 : int32 = v128.Length
            let v133 : Mut6 = {l0 = 0; l1 = 0; l2 = v131} : Mut6
            while method69(v132, v133) do
                let v135 : int32 = v133.l0
                let v136 : int32 =  -v135
                let v137 : int32 = v136 + v132
                let v138 : int32 = v137 - 1
                let struct (v139 : int32, v140 : (string [])) = v133.l1, v133.l2
                let v141 : string = v128.[int v138]
                let v142 : bool = ".." = v141
                let struct (v188 : int32, v189 : (string [])) =
                    if v142 then
                        let v143 : int32 = v139 + 1
                        struct (v143, v140)
                    else
                        let v144 : bool = "." = v141
                        if v144 then
                            struct (v139, v140)
                        else
                            let v145 : bool = 0 = v139
                            if v145 then
                                let v148 : string = ":"
                                let v149 : bool = v141.EndsWith (v148, false, null)
                                if v149 then
                                    let v152 : string = $"{v117.[0]}:"
                                    let v153 : (string []) = [|v152|]
                                    let v154 : int32 = v153.Length
                                    let v155 : int32 = v140.Length
                                    let v156 : int32 = v154 + v155
                                    let v157 : (string []) = Array.zeroCreate<string> (v156)
                                    let v158 : Mut5 = {l0 = 0} : Mut5
                                    while method30(v156, v158) do
                                        let v160 : int32 = v158.l0
                                        let v161 : bool = v160 < v154
                                        let v165 : string =
                                            if v161 then
                                                let v162 : string = v153.[int v160]
                                                v162
                                            else
                                                let v163 : int32 = v160 - v154
                                                let v164 : string = v140.[int v163]
                                                v164
                                        v157.[int v160] <- v165
                                        let v166 : int32 = v160 + 1
                                        v158.l0 <- v166
                                        ()
                                    struct (0, v157)
                                else
                                    let v167 : (string []) = [|v141|]
                                    let v168 : int32 = v167.Length
                                    let v169 : int32 = v140.Length
                                    let v170 : int32 = v168 + v169
                                    let v171 : (string []) = Array.zeroCreate<string> (v170)
                                    let v172 : Mut5 = {l0 = 0} : Mut5
                                    while method30(v170, v172) do
                                        let v174 : int32 = v172.l0
                                        let v175 : bool = v174 < v168
                                        let v179 : string =
                                            if v175 then
                                                let v176 : string = v167.[int v174]
                                                v176
                                            else
                                                let v177 : int32 = v174 - v168
                                                let v178 : string = v140.[int v177]
                                                v178
                                        v171.[int v174] <- v179
                                        let v180 : int32 = v174 + 1
                                        v172.l0 <- v180
                                        ()
                                    struct (0, v171)
                            else
                                let v183 : int32 = v139 - 1
                                struct (v183, v140)
                let v190 : int32 = v135 + 1
                v133.l0 <- v190
                v133.l1 <- v188
                v133.l2 <- v189
                ()
            let struct (v191 : int32, v192 : (string [])) = v133.l1, v133.l2
            let v197 : unit = ()
            let _let'_v197 =
                seq {
                    for i = 0 to v192.Length - 1 do yield v192.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v200 : string seq = _let'_v197 
            let v206 : char = method70()
            let v208 : (char -> string) = _.ToString()
            let v209 : string = v208 v206
            let v213 : bool = v209 = "\n"
            let v215 : string =
                if v213 then
                    method29(v209)
                else
                    v209
            let v216 : (string -> (string seq -> string)) = String.concat
            let v217 : (string seq -> string) = v216 v215
            v217 v200
        else
            let v221 : string = "std::fs::canonicalize(&*$0)"
            let v222 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v221 
            (* run_target_args'
            let v224 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v225 : string = "$0.unwrap()"
            let v226 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v222 v225 
            let _run_target_args'_v224 = v226 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v227 : string = "$0.unwrap()"
            let v228 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v222 v227 
            let _run_target_args'_v224 = v228 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v229 : string = "$0.unwrap()"
            let v230 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v222 v229 
            let _run_target_args'_v224 = v230 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v232 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v232 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v233 
            #endif
#else
            let v234 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v234 
            #endif
            let v235 : std_path_PathBuf = _run_target_args'_v224 
            (* run_target_args'
            let v242 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v243 : string = "$0.display()"
            let v244 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v235 v243 
            let _run_target_args'_v242 = v244 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v245 : string = "$0.display()"
            let v246 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v235 v245 
            let _run_target_args'_v242 = v246 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v247 : string = "$0.display()"
            let v248 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v235 v247 
            let _run_target_args'_v242 = v248 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v250 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v250 
            #endif
#if FABLE_COMPILER_PYTHON
            let v254 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v254 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v258 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v258 
            #endif
#else
            let v262 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v262 
            #endif
            let v265 : std_path_Display = _run_target_args'_v242 
            (* run_target_args'
            let v278 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v279 : string = "format!(\"{}\", $0)"
            let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v279 
            let _run_target_args'_v278 = v280 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v281 : string = "format!(\"{}\", $0)"
            let v282 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v281 
            let _run_target_args'_v278 = v282 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v283 : string = "format!(\"{}\", $0)"
            let v284 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v283 
            let _run_target_args'_v278 = v284 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v286 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v286 
            #endif
#if FABLE_COMPILER_PYTHON
            let v290 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v290 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v294 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v294 
            #endif
#else
            let v298 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v298 
            #endif
            let v301 : std_string_String = _run_target_args'_v278 
            let v310 : string = "fable_library_rust::String_::fromString($0)"
            let v311 : string = Fable.Core.RustInterop.emitRustExpr v301 v310 
            v311
    let _run_target_args'_v5 = v312 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v314 : string = null |> unbox<string>
    let _run_target_args'_v5 = v314 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v318 : string = null |> unbox<string>
    let _run_target_args'_v5 = v318 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v322 : string = null |> unbox<string>
    let _run_target_args'_v5 = v322 
    #endif
#if FABLE_COMPILER_PYTHON
    let v326 : string = null |> unbox<string>
    let _run_target_args'_v5 = v326 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v330 : string = null |> unbox<string>
    let _run_target_args'_v5 = v330 
    #endif
#else
    let v333 : (string -> string) = System.IO.Path.GetFullPath
    let v334 : string = v333 v0
    let _run_target_args'_v5 = v334 
    #endif
    let v335 : string = _run_target_args'_v5 
    v335
and method67 (v0 : string) : string =
    let v1 : string = method68(v0)
    method44(v1)
and method71 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method72 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method73 () : string =
    let v0 : string = "\n"
    v0
and method75 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method36(v0)
    let v8 : bool = v7 = false
    let v119 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v68 : Vec<uint8> = method25(v59)
            let v69 : string = "std::string::String::from_utf8($0)"
            let v70 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v68 v69 
            (* run_target_args'
            let v72 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v73 : string = "$0.unwrap()"
            let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v73 
            let _run_target_args'_v72 = v74 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v75 : string = "$0.unwrap()"
            let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v75 
            let _run_target_args'_v72 = v76 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v77 
            let _run_target_args'_v72 = v78 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v79 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v80 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v81 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v81 
            #endif
#else
            let v82 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v82 
            #endif
            let v83 : std_string_String = _run_target_args'_v72 
            let v86 : string = "fable_library_rust::String_::fromString($0)"
            let v87 : string = Fable.Core.RustInterop.emitRustExpr v83 v86 
            let _run_target_args'_v13 = v87 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v89 : string = null |> unbox<string>
            let _run_target_args'_v13 = v89 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v93 : string = null |> unbox<string>
            let _run_target_args'_v13 = v93 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v97 : string = null |> unbox<string>
            let _run_target_args'_v13 = v97 
            #endif
#if FABLE_COMPILER_PYTHON
            let v101 : string = null |> unbox<string>
            let _run_target_args'_v13 = v101 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105 : string = null |> unbox<string>
            let _run_target_args'_v13 = v105 
            #endif
#else
            let v108 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v108 
            #endif
            let v109 : string = _run_target_args'_v13 
            let v118 : bool = v1 = v109
            v118
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v121 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v137 
    #endif
#else
    let v141 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v141 
    #endif
    let v144 : bool = _run_target_args'_v6 
    v144
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method77 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US17 =
    US17_0
and method78 () : (unit -> US17) =
    closure27()
and closure28 () (v0 : std_string_String) : US17 =
    US17_1(v0)
and method79 () : (std_string_String -> US17) =
    closure28()
and method80 () : string =
    
    
    
    
    
    let v2 : string = "Critical"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_bright_red"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_bright_red"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_bright_red"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[91m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[91m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[91m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[91m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method82 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "error"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    (* run_target_args'
    let v137 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v138 : string = "format!(\"{:#?}\", $0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v138 
    let v140 : string = "fable_library_rust::String_::fromString($0)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr v139 v140 
    let _run_target_args'_v137 = v141 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v142 : string = "format!(\"{:#?}\", $0)"
    let v143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v142 
    let v144 : string = "fable_library_rust::String_::fromString($0)"
    let v145 : string = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let _run_target_args'_v137 = v145 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v146 : string = "format!(\"{:#?}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v146 
    let v148 : string = "fable_library_rust::String_::fromString($0)"
    let v149 : string = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let _run_target_args'_v137 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string = $"%A{v1}"
    let _run_target_args'_v137 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : string = $"%A{v1}"
    let _run_target_args'_v137 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : string = $"%A{v1}"
    let _run_target_args'_v137 = v159 
    #endif
#else
    let v163 : string = $"%A{v1}"
    let _run_target_args'_v137 = v163 
    #endif
    let v166 : string = _run_target_args'_v137 
    let v176 : string = $"{v166}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v3, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v194 : string = " }"
    let v195 : string = $"{v194}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v3, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v211 : string = v3.l0
    v211
and method81 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method82(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.create_dir"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method81(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method83 () : string =
    
    
    
    
    
    let v2 : string = "Verbose"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_bright_black"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_bright_black"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_bright_black"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[90m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[90m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[90m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[90m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method85 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "dir"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method84 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method85(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "file_system.create_dir"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure30 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method83()
            let v124 : string = method84(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method87 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method37(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method87(v1, v0)
and method86 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method88 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method89 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method91 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "result"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method90 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method91(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.create_dir"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure32 (v0 : string, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : string = method90(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method97 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "ex"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "path"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method96 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method97(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.delete_directory_async"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v339 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            (* run_target_args'
            let v129 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v131 : string = $"%A{v1}"
            let _run_target_args'_v129 = v131 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v135 : string = $"%A{v1}"
            let _run_target_args'_v129 = v135 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v139 : string = $"%A{v1}"
            let _run_target_args'_v129 = v139 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v143 : string = $"%A{v1}"
            let _run_target_args'_v129 = v143 
            #endif
#if FABLE_COMPILER_PYTHON
            let v147 : string = $"%A{v1}"
            let _run_target_args'_v129 = v147 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v151 : string = $"%A{v1}"
            let _run_target_args'_v129 = v151 
            #endif
#else
            let v154 : string = $"{v1.GetType ()}: {v1.Message}"
            let _run_target_args'_v129 = v154 
            #endif
            let v155 : string = _run_target_args'_v129 
            let v164 : string = method53(v0)
            let v165 : string = method96(v105, v106, v107, v108, v109, v110, v123, v124, v155, v164)
            let v180 : unit = ()
            let v181 : unit = (fun () -> v17 (); v180) ()
            let struct (v204 : Mut0, v205 : Mut1, v206 : Mut2, v207 : Mut3, v208 : Mut4, v209 : int64 option) = TraceState.trace_state.Value
            let v224 : unit = ()
            let v225 : (unit -> unit) = closure8(v204)
            let v226 : unit = (fun () -> v225 (); v224) ()
            let v229 : (string -> unit) = closure9()
            (* run_target_args'
            let v230 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v231 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v165 v231 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v232 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v165 v232 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v233 : string = v207.l0
            let v234 : bool = v233 = ""
            let v249 : string =
                if v234 then
                    v165
                else
                    let v235 : bool = v165 = ""
                    if v235 then
                        let v236 : string = v207.l0
                        v236
                    else
                        let v237 : string = v207.l0
                        let v240 : string = "\n"
                        let v241 : string = v237 + v240 
                        let v245 : string = v241 + v165 
                        v245
            (* run_target_args'
            let v254 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v255 : string = "&*$0"
            let v256 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v249 v255 
            let _run_target_args'_v254 = v256 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v257 : string = "&*$0"
            let v258 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v249 v257 
            let _run_target_args'_v254 = v258 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v259 : string = "&*$0"
            let v260 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v249 v259 
            let _run_target_args'_v254 = v260 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v262 
            #endif
#if FABLE_COMPILER_PYTHON
            let v266 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v266 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v270 
            #endif
#else
            let v274 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v274 
            #endif
            let v277 : Ref<Str> = _run_target_args'_v254 
            let v286 : string = $"$0.chars()"
            let v287 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v277 v286 
            let v288 : string = "$0"
            let v289 : _ = Fable.Core.RustInterop.emitRustExpr v287 v288 
            let v290 : string = "$0.collect::<Vec<_>>()"
            let v291 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v289 v290 
            let v292 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v293 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v291 v292 
            let v294 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
            let v296 : string = "x"
            let v297 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v296 
            let v298 : string = "String::from_iter($0)"
            let v299 : std_string_String = Fable.Core.RustInterop.emitRustExpr v297 v298 
            let v300 : string = "true; $0 }).collect::<Vec<_>>()"
            let v301 : bool = Fable.Core.RustInterop.emitRustExpr v299 v300 
            let v302 : string = "_vec_map"
            let v303 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v302 
            let v304 : string = "$0.len()"
            let v305 : unativeint = Fable.Core.RustInterop.emitRustExpr v303 v304 
            let v311 : int32 = v305 |> int32 
            let v321 : string = ""
            let v322 : bool = v165 <> v321 
            let v326 : bool =
                if v322 then
                    let v325 : bool = v311 <= 1
                    v325
                else
                    false
            if v326 then
                v207.l0 <- v249
                ()
            else
                v207.l0 <- v321
                let v327 : string = "true; $0.into_iter().for_each(|x| { //"
                let v328 : bool = Fable.Core.RustInterop.emitRustExpr v303 v327 
                let v329 : string = "x"
                let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v329 
                let v331 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v332 : bool = Fable.Core.RustInterop.emitRustExpr v330 v331 
                let v333 : string = $"true"
                let v334 : bool = Fable.Core.RustInterop.emitRustExpr () v333 
                let v335 : string = "true; }); //"
                let v336 : bool = Fable.Core.RustInterop.emitRustExpr () v335 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v229 v165
            #endif
#if FABLE_COMPILER_PYTHON
            v229 v165
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v229 v165
            #endif
#else
            v229 v165
            #endif
            // run_target_args' is_unit
            let v337 : (string -> unit) = v205.l0
            v337 v165
            US6_0(v204, v205, v206, v207, v208, v209)
    
    ()
and method95 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v28819 : bool = true
                method87(v28819, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v29553 : exn = ex
                let v29554 : int64 = v1 % 100L
                let v29555 : bool = v29554 = 0L
                if v29555 then
                    let v29907 : unit = ()
                    let v29908 : (unit -> unit) = closure34(v0, v29553)
                    let v29909 : unit = (fun () -> v29908 (); v29907) ()
                    ()
                (* run_target_args'
                let v30268 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30269 : (int32 -> Async<unit>) = Async.Sleep
                let v30270 : Async<unit> = v30269 10
                let _run_target_args'_v30268 = v30270 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30271 : (int32 -> Async<unit>) = Async.Sleep
                let v30272 : Async<unit> = v30271 10
                let _run_target_args'_v30268 = v30272 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30273 : (int32 -> Async<unit>) = Async.Sleep
                let v30274 : Async<unit> = v30273 10
                let _run_target_args'_v30268 = v30274 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30275 : (int32 -> Async<unit>) = Async.Sleep
                let v30276 : Async<unit> = v30275 10
                let _run_target_args'_v30268 = v30276 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30277 : (int32 -> Async<unit>) = Async.Sleep
                let v30278 : Async<unit> = v30277 10
                let _run_target_args'_v30268 = v30278 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30279 : (int32 -> Async<unit>) = Async.Sleep
                let v30280 : Async<unit> = v30279 10
                let _run_target_args'_v30268 = v30280 
                #endif
#else
                let v30281 : (int32 -> Async<unit>) = Async.Sleep
                let v30282 : Async<unit> = v30281 10
                let _run_target_args'_v30268 = v30282 
                #endif
                let v30283 : Async<unit> = _run_target_args'_v30268 
                do! v30283 
                let v30289 : int64 = v1 + 1L
                let v30290 : Async<int64> = method94(v0, v30289)
                return! v30290 
                (* indent
                ()
            indent *)
            (* try_unit
            let v31030 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v59828 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v59828 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59830 : unit = ()
    let _let'_v59830 =
        async {
            try
                let v88629 : bool = true
                method87(v88629, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v89363 : exn = ex
                let v89364 : int64 = v1 % 100L
                let v89365 : bool = v89364 = 0L
                if v89365 then
                    let v89717 : unit = ()
                    let v89718 : (unit -> unit) = closure34(v0, v89363)
                    let v89719 : unit = (fun () -> v89718 (); v89717) ()
                    ()
                (* run_target_args'
                let v90078 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v90079 : (int32 -> Async<unit>) = Async.Sleep
                let v90080 : Async<unit> = v90079 10
                let _run_target_args'_v90078 = v90080 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v90081 : (int32 -> Async<unit>) = Async.Sleep
                let v90082 : Async<unit> = v90081 10
                let _run_target_args'_v90078 = v90082 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v90083 : (int32 -> Async<unit>) = Async.Sleep
                let v90084 : Async<unit> = v90083 10
                let _run_target_args'_v90078 = v90084 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v90085 : (int32 -> Async<unit>) = Async.Sleep
                let v90086 : Async<unit> = v90085 10
                let _run_target_args'_v90078 = v90086 
                #endif
#if FABLE_COMPILER_PYTHON
                let v90087 : (int32 -> Async<unit>) = Async.Sleep
                let v90088 : Async<unit> = v90087 10
                let _run_target_args'_v90078 = v90088 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v90089 : (int32 -> Async<unit>) = Async.Sleep
                let v90090 : Async<unit> = v90089 10
                let _run_target_args'_v90078 = v90090 
                #endif
#else
                let v90091 : (int32 -> Async<unit>) = Async.Sleep
                let v90092 : Async<unit> = v90091 10
                let _run_target_args'_v90078 = v90092 
                #endif
                let v90093 : Async<unit> = _run_target_args'_v90078 
                do! v90093 
                let v90099 : int64 = v1 + 1L
                let v90100 : Async<int64> = method94(v0, v90099)
                return! v90100 
                (* indent
                ()
            indent *)
            (* try_unit
            let v90840 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v119638 : Async<int64> = _let'_v59830 
    let _run_target_args'_v6 = v119638 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v119640 : unit = ()
    let _let'_v119640 =
        async {
            try
                let v148439 : bool = true
                method87(v148439, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v149173 : exn = ex
                let v149174 : int64 = v1 % 100L
                let v149175 : bool = v149174 = 0L
                if v149175 then
                    let v149527 : unit = ()
                    let v149528 : (unit -> unit) = closure34(v0, v149173)
                    let v149529 : unit = (fun () -> v149528 (); v149527) ()
                    ()
                (* run_target_args'
                let v149888 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v149889 : (int32 -> Async<unit>) = Async.Sleep
                let v149890 : Async<unit> = v149889 10
                let _run_target_args'_v149888 = v149890 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v149891 : (int32 -> Async<unit>) = Async.Sleep
                let v149892 : Async<unit> = v149891 10
                let _run_target_args'_v149888 = v149892 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v149893 : (int32 -> Async<unit>) = Async.Sleep
                let v149894 : Async<unit> = v149893 10
                let _run_target_args'_v149888 = v149894 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v149895 : (int32 -> Async<unit>) = Async.Sleep
                let v149896 : Async<unit> = v149895 10
                let _run_target_args'_v149888 = v149896 
                #endif
#if FABLE_COMPILER_PYTHON
                let v149897 : (int32 -> Async<unit>) = Async.Sleep
                let v149898 : Async<unit> = v149897 10
                let _run_target_args'_v149888 = v149898 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v149899 : (int32 -> Async<unit>) = Async.Sleep
                let v149900 : Async<unit> = v149899 10
                let _run_target_args'_v149888 = v149900 
                #endif
#else
                let v149901 : (int32 -> Async<unit>) = Async.Sleep
                let v149902 : Async<unit> = v149901 10
                let _run_target_args'_v149888 = v149902 
                #endif
                let v149903 : Async<unit> = _run_target_args'_v149888 
                do! v149903 
                let v149909 : int64 = v1 + 1L
                let v149910 : Async<int64> = method94(v0, v149909)
                return! v149910 
                (* indent
                ()
            indent *)
            (* try_unit
            let v150650 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v179448 : Async<int64> = _let'_v119640 
    let _run_target_args'_v6 = v179448 
    #endif
#else
    let v179450 : unit = ()
    let _let'_v179450 =
        async {
            try
                let v208249 : bool = true
                method87(v208249, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v208983 : exn = ex
                let v208984 : int64 = v1 % 100L
                let v208985 : bool = v208984 = 0L
                if v208985 then
                    let v209337 : unit = ()
                    let v209338 : (unit -> unit) = closure34(v0, v208983)
                    let v209339 : unit = (fun () -> v209338 (); v209337) ()
                    ()
                (* run_target_args'
                let v209698 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v209699 : (int32 -> Async<unit>) = Async.Sleep
                let v209700 : Async<unit> = v209699 10
                let _run_target_args'_v209698 = v209700 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v209701 : (int32 -> Async<unit>) = Async.Sleep
                let v209702 : Async<unit> = v209701 10
                let _run_target_args'_v209698 = v209702 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v209703 : (int32 -> Async<unit>) = Async.Sleep
                let v209704 : Async<unit> = v209703 10
                let _run_target_args'_v209698 = v209704 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v209705 : (int32 -> Async<unit>) = Async.Sleep
                let v209706 : Async<unit> = v209705 10
                let _run_target_args'_v209698 = v209706 
                #endif
#if FABLE_COMPILER_PYTHON
                let v209707 : (int32 -> Async<unit>) = Async.Sleep
                let v209708 : Async<unit> = v209707 10
                let _run_target_args'_v209698 = v209708 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v209709 : (int32 -> Async<unit>) = Async.Sleep
                let v209710 : Async<unit> = v209709 10
                let _run_target_args'_v209698 = v209710 
                #endif
#else
                let v209711 : (int32 -> Async<unit>) = Async.Sleep
                let v209712 : Async<unit> = v209711 10
                let _run_target_args'_v209698 = v209712 
                #endif
                let v209713 : Async<unit> = _run_target_args'_v209698 
                do! v209713 
                let v209719 : int64 = v1 + 1L
                let v209720 : Async<int64> = method94(v0, v209719)
                return! v209720 
                (* indent
                ()
            indent *)
            (* try_unit
            let v210460 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v239258 : Async<int64> = _let'_v179450 
    let _run_target_args'_v6 = v239258 
    #endif
    let v239259 : Async<int64> = _run_target_args'_v6 
    v239259
and method94 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method95(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method93 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method94(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method93(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : (Async<unit> -> unit) = Async.RunSynchronously
    v37 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : (Async<unit> -> unit) = Async.RunSynchronously
    v38 v27
    #endif
#else
    let v39 : (Async<unit> -> unit) = Async.RunSynchronously
    v39 v27
    #endif
    // run_target_args' is_unit
    ()
and method92 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method98 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method76 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v736 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v737 : string = "std::fs::create_dir_all(&*$0)"
    let v738 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v737 
    let v739 : (std_io_Error -> std_string_String) = method77()
    (* run_target_args'
    let v741 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v742 : string = "$0.map_err(|x| $1(x))"
    let v743 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v738, v739) v742 
    let _run_target_args'_v741 = v743 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v744 : string = "$0.map_err(|x| $1(x))"
    let v745 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v738, v739) v744 
    let _run_target_args'_v741 = v745 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v746 : string = "$0.map_err(|x| $1(x))"
    let v747 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v738, v739) v746 
    let _run_target_args'_v741 = v747 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v748 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v748 
    #endif
#if FABLE_COMPILER_PYTHON
    let v749 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v749 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v750 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v750 
    #endif
#else
    let v751 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v751 
    #endif
    let v752 : Result<unit, std_string_String> = _run_target_args'_v741 
    let v755 : (unit -> US17) = method78()
    let v756 : (std_string_String -> US17) = method79()
    let v758 : US17 = match v752 with Ok () -> v755 () | Error x -> v756 x
    match v758 with
    | US17_1(v1389) -> (* Error *)
        let v1701 : unit = ()
        let v1702 : (unit -> unit) = closure29(v0, v1389)
        let v1703 : unit = (fun () -> v1702 (); v1701) ()
        ()
    | US17_0 -> (* Ok *)
        let v1072 : unit = ()
        let v1073 : (unit -> unit) = closure30(v0)
        let v1074 : unit = (fun () -> v1073 (); v1072) ()
        ()
    (* run_target_args'
    let v2022 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2023 : (unit -> unit) = method86(v0)
    let v2024 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2023 "$0()" )
    let _run_target_args'_v2022 = v2024 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2025 : (unit -> unit) = method86(v0)
    let v2026 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2025 "$0()" )
    let _run_target_args'_v2022 = v2026 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2027 : (unit -> unit) = method86(v0)
    let v2028 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2027 "$0()" )
    let _run_target_args'_v2022 = v2028 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2029 : (unit -> unit) = method88(v0)
    let v2030 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2029 () }
    let _run_target_args'_v2022 = v2030 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2031 : (unit -> unit) = method88(v0)
    let v2032 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2031 () }
    let _run_target_args'_v2022 = v2032 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2033 : (unit -> unit) = method88(v0)
    let v2034 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2033 () }
    let _run_target_args'_v2022 = v2034 
    #endif
#else
    let v2035 : (unit -> unit) = method88(v0)
    let v2036 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2035 () }
    let _run_target_args'_v2022 = v2036 
    #endif
    let v2037 : System.IDisposable = _run_target_args'_v2022 
    let _run_target_args'_v736 = v2037 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2045 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v736 = v2045 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2049 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v736 = v2049 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2052 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v2057 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2059 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2059 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2063 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2063 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2067 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2067 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2071 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2071 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2075 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2075 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2079 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2079 
    #endif
#else
    let v2082 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v2083 : bool = v2082 v2052
    let _run_target_args'_v2057 = v2083 
    #endif
    let v2084 : bool = _run_target_args'_v2057 
    let v2093 : bool = v2084 = false
    if v2093 then
        (* run_target_args'
        let v2098 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2100 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2100 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2104 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2104 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2108 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2108 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2112 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2112 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2116 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2116 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v2120 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2120 
        #endif
#else
        let v2123 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v2124 : System.DateTime = v2123 v2052
        let _run_target_args'_v2098 = v2124 
        #endif
        let v2125 : System.DateTime = _run_target_args'_v2098 
        let v2134 : _ = {| Exists = v2084; CreationTime = v2125 |}
        let v2136 : string = $"%A{v2134}"
        let v2450 : unit = ()
        let v2451 : (unit -> unit) = closure32(v0, v2136)
        let v2452 : unit = (fun () -> v2451 (); v2450) ()
        ()
    (* run_target_args'
    let v2771 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2772 : (unit -> unit) = method92(v0)
    let v2773 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2772 "$0()" )
    let _run_target_args'_v2771 = v2773 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2774 : (unit -> unit) = method92(v0)
    let v2775 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2774 "$0()" )
    let _run_target_args'_v2771 = v2775 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2776 : (unit -> unit) = method92(v0)
    let v2777 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2776 "$0()" )
    let _run_target_args'_v2771 = v2777 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2778 : (unit -> unit) = method98(v0)
    let v2779 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2778 () }
    let _run_target_args'_v2771 = v2779 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2780 : (unit -> unit) = method98(v0)
    let v2781 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2780 () }
    let _run_target_args'_v2771 = v2781 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2782 : (unit -> unit) = method98(v0)
    let v2783 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2782 () }
    let _run_target_args'_v2771 = v2783 
    #endif
#else
    let v2784 : (unit -> unit) = method98(v0)
    let v2785 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2784 () }
    let _run_target_args'_v2771 = v2785 
    #endif
    let v2786 : System.IDisposable = _run_target_args'_v2771 
    let _run_target_args'_v736 = v2786 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2793 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v2798 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2800 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2800 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2804 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2804 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2808 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2808 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2812 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2812 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2816 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2816 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2820 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2820 
    #endif
#else
    let v2823 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v2824 : bool = v2823 v2793
    let _run_target_args'_v2798 = v2824 
    #endif
    let v2825 : bool = _run_target_args'_v2798 
    let v2834 : bool = v2825 = false
    if v2834 then
        (* run_target_args'
        let v2839 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2841 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2841 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2845 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2845 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2849 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2849 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2853 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2853 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2857 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2857 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v2861 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2861 
        #endif
#else
        let v2864 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v2865 : System.DateTime = v2864 v2793
        let _run_target_args'_v2839 = v2865 
        #endif
        let v2866 : System.DateTime = _run_target_args'_v2839 
        let v2875 : _ = {| Exists = v2825; CreationTime = v2866 |}
        let v2877 : string = $"%A{v2875}"
        let v3191 : unit = ()
        let v3192 : (unit -> unit) = closure32(v0, v2877)
        let v3193 : unit = (fun () -> v3192 (); v3191) ()
        ()
    (* run_target_args'
    let v3512 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3513 : (unit -> unit) = method92(v0)
    let v3514 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3513 "$0()" )
    let _run_target_args'_v3512 = v3514 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3515 : (unit -> unit) = method92(v0)
    let v3516 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3515 "$0()" )
    let _run_target_args'_v3512 = v3516 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3517 : (unit -> unit) = method92(v0)
    let v3518 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3517 "$0()" )
    let _run_target_args'_v3512 = v3518 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3519 : (unit -> unit) = method98(v0)
    let v3520 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3519 () }
    let _run_target_args'_v3512 = v3520 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3521 : (unit -> unit) = method98(v0)
    let v3522 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3521 () }
    let _run_target_args'_v3512 = v3522 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3523 : (unit -> unit) = method98(v0)
    let v3524 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3523 () }
    let _run_target_args'_v3512 = v3524 
    #endif
#else
    let v3525 : (unit -> unit) = method98(v0)
    let v3526 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3525 () }
    let _run_target_args'_v3512 = v3526 
    #endif
    let v3527 : System.IDisposable = _run_target_args'_v3512 
    let _run_target_args'_v736 = v3527 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3534 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v3539 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3541 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3541 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3545 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3545 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3549 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3549 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3553 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3553 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3557 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3557 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3561 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3561 
    #endif
#else
    let v3564 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v3565 : bool = v3564 v3534
    let _run_target_args'_v3539 = v3565 
    #endif
    let v3566 : bool = _run_target_args'_v3539 
    let v3575 : bool = v3566 = false
    if v3575 then
        (* run_target_args'
        let v3580 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v3582 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3582 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v3586 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3586 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v3590 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3590 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v3594 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3594 
        #endif
#if FABLE_COMPILER_PYTHON
        let v3598 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3598 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v3602 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3602 
        #endif
#else
        let v3605 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v3606 : System.DateTime = v3605 v3534
        let _run_target_args'_v3580 = v3606 
        #endif
        let v3607 : System.DateTime = _run_target_args'_v3580 
        let v3616 : _ = {| Exists = v3566; CreationTime = v3607 |}
        let v3618 : string = $"%A{v3616}"
        let v3932 : unit = ()
        let v3933 : (unit -> unit) = closure32(v0, v3618)
        let v3934 : unit = (fun () -> v3933 (); v3932) ()
        ()
    (* run_target_args'
    let v4253 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4254 : (unit -> unit) = method92(v0)
    let v4255 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4254 "$0()" )
    let _run_target_args'_v4253 = v4255 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4256 : (unit -> unit) = method92(v0)
    let v4257 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4256 "$0()" )
    let _run_target_args'_v4253 = v4257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4258 : (unit -> unit) = method92(v0)
    let v4259 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4258 "$0()" )
    let _run_target_args'_v4253 = v4259 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4260 : (unit -> unit) = method98(v0)
    let v4261 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4260 () }
    let _run_target_args'_v4253 = v4261 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4262 : (unit -> unit) = method98(v0)
    let v4263 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4262 () }
    let _run_target_args'_v4253 = v4263 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4264 : (unit -> unit) = method98(v0)
    let v4265 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4264 () }
    let _run_target_args'_v4253 = v4265 
    #endif
#else
    let v4266 : (unit -> unit) = method98(v0)
    let v4267 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4266 () }
    let _run_target_args'_v4253 = v4267 
    #endif
    let v4268 : System.IDisposable = _run_target_args'_v4253 
    let _run_target_args'_v736 = v4268 
    #endif
#else
    let v4275 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v4280 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4282 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4282 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4286 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4290 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4290 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4294 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4294 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4298 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4298 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4302 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4302 
    #endif
#else
    let v4305 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v4306 : bool = v4305 v4275
    let _run_target_args'_v4280 = v4306 
    #endif
    let v4307 : bool = _run_target_args'_v4280 
    let v4316 : bool = v4307 = false
    if v4316 then
        (* run_target_args'
        let v4321 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v4323 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4323 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v4327 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4327 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v4331 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4331 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v4335 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4335 
        #endif
#if FABLE_COMPILER_PYTHON
        let v4339 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4339 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v4343 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4343 
        #endif
#else
        let v4346 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v4347 : System.DateTime = v4346 v4275
        let _run_target_args'_v4321 = v4347 
        #endif
        let v4348 : System.DateTime = _run_target_args'_v4321 
        let v4357 : _ = {| Exists = v4307; CreationTime = v4348 |}
        let v4359 : string = $"%A{v4357}"
        let v4673 : unit = ()
        let v4674 : (unit -> unit) = closure32(v0, v4359)
        let v4675 : unit = (fun () -> v4674 (); v4673) ()
        ()
    (* run_target_args'
    let v4994 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4995 : (unit -> unit) = method92(v0)
    let v4996 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4995 "$0()" )
    let _run_target_args'_v4994 = v4996 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4997 : (unit -> unit) = method92(v0)
    let v4998 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4997 "$0()" )
    let _run_target_args'_v4994 = v4998 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4999 : (unit -> unit) = method92(v0)
    let v5000 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4999 "$0()" )
    let _run_target_args'_v4994 = v5000 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5001 : (unit -> unit) = method98(v0)
    let v5002 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5001 () }
    let _run_target_args'_v4994 = v5002 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5003 : (unit -> unit) = method98(v0)
    let v5004 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5003 () }
    let _run_target_args'_v4994 = v5004 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5005 : (unit -> unit) = method98(v0)
    let v5006 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5005 () }
    let _run_target_args'_v4994 = v5006 
    #endif
#else
    let v5007 : (unit -> unit) = method98(v0)
    let v5008 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5007 () }
    let _run_target_args'_v4994 = v5008 
    #endif
    let v5009 : System.IDisposable = _run_target_args'_v4994 
    let _run_target_args'_v736 = v5009 
    #endif
    let v5016 : System.IDisposable = _run_target_args'_v736 
    v5016
and method74 (v0 : string, v1 : string) : unit =
    let v2 : bool = method75(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method39(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method37(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method76(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method100 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method102 () : string =
    let v0 : string = ""
    v0
and method103 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method103(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method104 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method104(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure36 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method105(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method105 (v0 : int32, v1 : int32) : (string -> string) =
    closure36(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US19_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method103(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method104(v56, v1, v2, v3)
            US19_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method105(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US19_1(v120)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US19_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method103(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method104(v56, v1, v2, v3)
            US19_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method105(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US19_1(v120)
and method106 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US19 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US19 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US19_1(v13) -> (* Error *)
            method106(v0, v1, v6)
        | US19_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US19_1(v3)
and method107 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US21 =
            if v3 then
                US21_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US21_1
        let v15 : char =
            match v11 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method107(v0, v17)
and method108 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v98 : US19 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US19_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method107(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int64 = System.Convert.ToInt64 v68.Length
                let v72 : int64 = 0L
                let v73 : UH0 = method103(v71, v68, v72)
                let struct (v74 : System.Text.StringBuilder, v75 : int32, v76 : int32) = method104(v73, v2, v3, v4)
                US19_0(v25, v62, v74, v75, v76)
            else
                let v78 : char list = []
                let v80 : char list = ''' :: v78 
                let v84 : char list = '"' :: v80 
                let v88 : (char list -> (char [])) = List.toArray
                let v89 : (char []) = v88 v84
                let v93 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v89} / s: %A{struct (v2, v3, v4)}"
                US19_1(v93)
    let v110 : US19 =
        match v98 with
        | US19_1(v107) -> (* Error *)
            US19_1(v107)
        | US19_0(v99, v100, v101, v102, v103) -> (* Ok *)
            let v104 : bool = '\\' = v99
            let v105 : char =
                if v104 then
                    '/'
                else
                    v99
            US19_0(v105, v100, v101, v102, v103)
    match v110 with
    | US19_1(v127) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v111, v112, v113, v114, v115) -> (* Ok *)
        let v117 : (char -> string) = _.ToString()
        let v118 : string = v117 v111
        let v121 : string = v0 + v118 
        method108(v121, v112, v113, v114, v115)
and method109 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US19 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method109(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method110 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US21 =
            if v3 then
                US21_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US21_1
        let v19 : char =
            match v15 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method110(v0, v21)
and method111 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v106 : US19 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US19_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method110(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method103(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method104(v77, v2, v3, v4)
                US19_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = ' ' :: v82 
                let v88 : char list = ''' :: v84 
                let v92 : char list = '"' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US19_1(v101)
    let v118 : US19 =
        match v106 with
        | US19_1(v115) -> (* Error *)
            US19_1(v115)
        | US19_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v112 : bool = '\\' = v107
            let v113 : char =
                if v112 then
                    '/'
                else
                    v107
            US19_0(v113, v108, v109, v110, v111)
    match v118 with
    | US19_1(v135) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v119, v120, v121, v122, v123) -> (* Ok *)
        let v125 : (char -> string) = _.ToString()
        let v126 : string = v125 v119
        let v129 : string = v0 + v126 
        method111(v129, v120, v121, v122, v123)
and method112 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method112(v0, v6)
        else
            v1
and method113 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US19 =
        if v5 then
            let v12 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US19_1(v12)
        else
            let v16 : char = v1.[int 0]
            let v18 : (string -> int32) = String.length
            let v19 : int32 = v18 v1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v19 |> int32 
            let v48 : int32 = v40 - 1
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v16
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method103(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method104(v61, v2, v3, v4)
            US19_0(v16, v50, v62, v63, v64)
    match v66 with
    | US19_1(v83) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v77 : string = v0 + v74 
        method113(v77, v68, v69, v70, v71)
and method101 (v0 : string) : US18 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method102()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure37()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US19 = method106(v10, v16, v23)
    let v197 : US20 =
        match v24 with
        | US19_1(v194) -> (* Error *)
            US20_1(v194)
        | US19_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v123 : US19 =
                if v30 then
                    let v31 : char list = []
                    let v33 : char list = ''' :: v31 
                    let v37 : char list = '"' :: v33 
                    let v41 : (char list -> (char [])) = List.toArray
                    let v42 : (char []) = v41 v37
                    let v46 : string = $"parsing.none_of / unexpected end of input / chars: %A{v42} / s: %A{struct (v27, v28, v29)}"
                    US19_1(v46)
                else
                    let v50 : char = v26.[int 0]
                    let v51 : int64 = 0L
                    let v52 : bool = method107(v50, v51)
                    let v53 : bool = v52 = false
                    if v53 then
                        let v55 : (string -> int32) = String.length
                        let v56 : int32 = v55 v26
                        let v64 : int32 = 1 |> int32 
                        let v77 : int32 = v56 |> int32 
                        let v85 : int32 = v77 - 1
                        let v87 : string = v26.[int v64..int v85]
                        let v92 : (char -> string) = _.ToString()
                        let v93 : string = v92 v50
                        let v96 : int64 = System.Convert.ToInt64 v93.Length
                        let v97 : int64 = 0L
                        let v98 : UH0 = method103(v96, v93, v97)
                        let struct (v99 : System.Text.StringBuilder, v100 : int32, v101 : int32) = method104(v98, v27, v28, v29)
                        US19_0(v50, v87, v99, v100, v101)
                    else
                        let v103 : char list = []
                        let v105 : char list = ''' :: v103 
                        let v109 : char list = '"' :: v105 
                        let v113 : (char list -> (char [])) = List.toArray
                        let v114 : (char []) = v113 v109
                        let v118 : string = $"parsing.none_of / unexpected char: '{v50}' / chars: %A{v114} / s: %A{struct (v27, v28, v29)}"
                        US19_1(v118)
            let v135 : US19 =
                match v123 with
                | US19_1(v132) -> (* Error *)
                    US19_1(v132)
                | US19_0(v124, v125, v126, v127, v128) -> (* Ok *)
                    let v129 : bool = '\\' = v124
                    let v130 : char =
                        if v129 then
                            '/'
                        else
                            v124
                    US19_0(v130, v125, v126, v127, v128)
            let v155 : US20 =
                match v135 with
                | US19_1(v152) -> (* Error *)
                    US20_1(v152)
                | US19_0(v136, v137, v138, v139, v140) -> (* Ok *)
                    let v142 : (char -> string) = _.ToString()
                    let v143 : string = v142 v136
                    let struct (v146 : string, v147 : string, v148 : System.Text.StringBuilder, v149 : int32, v150 : int32) = method108(v143, v137, v138, v139, v140)
                    US20_0(v146, v147, v148, v149, v150)
            let v165 : US20 =
                match v155 with
                | US20_1(v162) -> (* Error *)
                    US20_0(v9, v26, v27, v28, v29)
                | US20_0(v156, v157, v158, v159, v160) -> (* Ok *)
                    US20_0(v156, v157, v158, v159, v160)
            match v165 with
            | US20_1(v189) -> (* Error *)
                let v190 : string = "parsing.between / expected content"
                US20_1(v190)
            | US20_0(v166, v167, v168, v169, v170) -> (* Ok *)
                let v171 : UH1 = UH1_0
                let v172 : UH1 = UH1_1(v20, v171)
                let v173 : UH1 = UH1_1(v19, v172)
                let v174 : US19 = method109(v167, v168, v169, v170, v173)
                match v174 with
                | US19_1(v181) -> (* Error *)
                    let v183 : string = $"parsing.between / expected closing delimiter / e: %A{v181} / input: %A{struct (v10, v16, 1, 1)} / rest1: %A{struct (v26, v27, v28, v29)} / rest2: %A{struct (v167, v168, v169, v170)}"
                    US20_1(v183)
                | US19_0(v175, v176, v177, v178, v179) -> (* Ok *)
                    US20_0(v166, v176, v177, v178, v179)
    let v416 : US20 =
        match v197 with
        | US20_1(v203) -> (* Error *)
            let v204 : bool = "" = v10
            let v307 : US19 =
                if v204 then
                    let v205 : char list = []
                    let v207 : char list = ' ' :: v205 
                    let v211 : char list = ''' :: v207 
                    let v215 : char list = '"' :: v211 
                    let v219 : (char list -> (char [])) = List.toArray
                    let v220 : (char []) = v219 v215
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v220} / s: %A{struct (v16, 1, 1)}"
                    US19_1(v224)
                else
                    let v228 : char = v10.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method110(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v233 : (string -> int32) = String.length
                        let v234 : int32 = v233 v10
                        let v242 : int32 = 1 |> int32 
                        let v255 : int32 = v234 |> int32 
                        let v263 : int32 = v255 - 1
                        let v265 : string = v10.[int v242..int v263]
                        let v270 : (char -> string) = _.ToString()
                        let v271 : string = v270 v228
                        let v274 : int64 = System.Convert.ToInt64 v271.Length
                        let v275 : int64 = 0L
                        let v276 : UH0 = method103(v274, v271, v275)
                        let v277 : int32 = 1
                        let v278 : int32 = 1
                        let struct (v279 : System.Text.StringBuilder, v280 : int32, v281 : int32) = method104(v276, v16, v277, v278)
                        US19_0(v228, v265, v279, v280, v281)
                    else
                        let v283 : char list = []
                        let v285 : char list = ' ' :: v283 
                        let v289 : char list = ''' :: v285 
                        let v293 : char list = '"' :: v289 
                        let v297 : (char list -> (char [])) = List.toArray
                        let v298 : (char []) = v297 v293
                        let v302 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v298} / s: %A{struct (v16, 1, 1)}"
                        US19_1(v302)
            let v319 : US19 =
                match v307 with
                | US19_1(v316) -> (* Error *)
                    US19_1(v316)
                | US19_0(v308, v309, v310, v311, v312) -> (* Ok *)
                    let v313 : bool = '\\' = v308
                    let v314 : char =
                        if v313 then
                            '/'
                        else
                            v308
                    US19_0(v314, v309, v310, v311, v312)
            let v339 : US20 =
                match v319 with
                | US19_1(v336) -> (* Error *)
                    US20_1(v336)
                | US19_0(v320, v321, v322, v323, v324) -> (* Ok *)
                    let v326 : (char -> string) = _.ToString()
                    let v327 : string = v326 v320
                    let struct (v330 : string, v331 : string, v332 : System.Text.StringBuilder, v333 : int32, v334 : int32) = method111(v327, v321, v322, v323, v324)
                    US20_0(v330, v331, v332, v333, v334)
            match v339 with
            | US20_1(v345) -> (* Error *)
                let v346 : int32 = v10.Length
                let v347 : bool = v346 = 0
                let v354 : US22 =
                    if v347 then
                        US22_0(v10, v16, 1, 1)
                    else
                        let v350 : string = $"parsing.eof / expected end of input / input: %A{v10}"
                        US22_1(v350)
                let v363 : US20 =
                    match v354 with
                    | US22_1(v360) -> (* Error *)
                        US20_1(v360)
                    | US22_0(v355, v356, v357, v358) -> (* Ok *)
                        US20_0(v9, v355, v356, v357, v358)
                match v363 with
                | US20_1(v409) -> (* Error *)
                    US20_1(v409)
                | US20_0(v364, v365, v366, v367, v368) -> (* Ok *)
                    let v369 : int32 = 0
                    let v370 : int32 = method112(v365, v369)
                    let v372 : (string -> int32) = String.length
                    let v373 : int32 = v372 v365
                    let v381 : int32 = v370 |> int32 
                    let v394 : int32 = v373 |> int32 
                    let v402 : int32 = v394 - 1
                    let v404 : string = v365.[int v381..int v402]
                    US20_0(v364, v404, v366, v367, v368)
            | US20_0(v340, v341, v342, v343, v344) -> (* Ok *)
                v339
        | US20_0(v198, v199, v200, v201, v202) -> (* Ok *)
            v197
    let v671 : US23 =
        match v416 with
        | US20_1(v668) -> (* Error *)
            US23_1(v668)
        | US20_0(v417, v418, v419, v420, v421) -> (* Ok *)
            let v422 : bool = "" = v418
            let v542 : US19 =
                if v422 then
                    let v424 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v419, v420, v421)}"
                    US19_1(v424)
                else
                    let v428 : char = v418.[int 0]
                    let v429 : bool = v428 = ' '
                    if v429 then
                        let v431 : (string -> int32) = String.length
                        let v432 : int32 = v431 v418
                        let v440 : int32 = 1 |> int32 
                        let v453 : int32 = v432 |> int32 
                        let v461 : int32 = v453 - 1
                        let v463 : string = v418.[int v440..int v461]
                        let v468 : (char -> string) = _.ToString()
                        let v469 : string = v468 v428
                        let v472 : int64 = System.Convert.ToInt64 v469.Length
                        let v473 : int64 = 0L
                        let v474 : UH0 = method103(v472, v469, v473)
                        let struct (v475 : System.Text.StringBuilder, v476 : int32, v477 : int32) = method104(v474, v419, v420, v421)
                        US19_0(v428, v463, v475, v476, v477)
                    else
                        let v480 : string = "\n"
                        let v481 : int32 = v418.IndexOf v480 
                        let v484 : int32 = v481 - 1
                        let v485 : bool = -2 = v484
                        let v493 : int32 =
                            if v485 then
                                let v487 : (string -> int32) = String.length
                                let v488 : int32 = v487 v418
                                let v491 : int32 = v488 + 1
                                v491
                            else
                                let v492 : int32 = v484 + 1
                                v492
                        let v499 : int32 = 0 |> int32 
                        let v512 : int32 = v493 |> int32 
                        let v520 : int32 = v512 - 1
                        let v522 : string = v418.[int v499..int v520]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v420} / col: {v421}
{v419}{v522}"
                        let v530 : int32 = v421 - 1
                        let v531 : int32 = 0
                        let v532 : (string -> string) = method105(v530, v531)
                        let v533 : string = v532 v9
                        let v534 : string = "^"
                        let v535 : string = v533 + v534 
                        let v537 : string = $"{v527}
{v535}
"
                        US19_1(v537)
            let v554 : US24 =
                match v542 with
                | US19_1(v550) -> (* Error *)
                    let v551 : US21 = US21_1
                    US24_0(v551, v418, v419, v420, v421)
                | US19_0(v543, v544, v545, v546, v547) -> (* Ok *)
                    let v548 : US21 = US21_0(v543)
                    US24_0(v548, v544, v545, v546, v547)
            let v645 : US20 =
                match v554 with
                | US24_1(v642) -> (* Error *)
                    US20_1(v642)
                | US24_0(v555, v556, v557, v558, v559) -> (* Ok *)
                    let v560 : bool = "" = v556
                    let v621 : US19 =
                        if v560 then
                            let v567 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v557, v558, v559)}"
                            US19_1(v567)
                        else
                            let v571 : char = v556.[int 0]
                            let v573 : (string -> int32) = String.length
                            let v574 : int32 = v573 v556
                            let v582 : int32 = 1 |> int32 
                            let v595 : int32 = v574 |> int32 
                            let v603 : int32 = v595 - 1
                            let v605 : string = v556.[int v582..int v603]
                            let v610 : (char -> string) = _.ToString()
                            let v611 : string = v610 v571
                            let v614 : int64 = System.Convert.ToInt64 v611.Length
                            let v615 : int64 = 0L
                            let v616 : UH0 = method103(v614, v611, v615)
                            let struct (v617 : System.Text.StringBuilder, v618 : int32, v619 : int32) = method104(v616, v557, v558, v559)
                            US19_0(v571, v605, v617, v618, v619)
                    match v621 with
                    | US19_1(v638) -> (* Error *)
                        US20_1(v638)
                    | US19_0(v622, v623, v624, v625, v626) -> (* Ok *)
                        let v628 : (char -> string) = _.ToString()
                        let v629 : string = v628 v622
                        let struct (v632 : string, v633 : string, v634 : System.Text.StringBuilder, v635 : int32, v636 : int32) = method113(v629, v623, v624, v625, v626)
                        US20_0(v632, v633, v634, v635, v636)
            let v657 : US25 =
                match v645 with
                | US20_1(v653) -> (* Error *)
                    let v654 : US5 = US5_1
                    US25_0(v654, v418, v419, v420, v421)
                | US20_0(v646, v647, v648, v649, v650) -> (* Ok *)
                    let v651 : US5 = US5_0(v646)
                    US25_0(v651, v647, v648, v649, v650)
            match v657 with
            | US25_1(v664) -> (* Error *)
                US23_1(v664)
            | US25_0(v658, v659, v660, v661, v662) -> (* Ok *)
                US23_0(v417, v658, v659, v660, v661, v662)
    match v671 with
    | US23_1(v679) -> (* Error *)
        US18_1(v679)
    | US23_0(v672, v673, v674, v675, v676, v677) -> (* Ok *)
        US18_0(v672, v673)
and method116 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US21 =
            if v3 then
                US21_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US21_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US21_1
        let v23 : char =
            match v19 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method116(v0, v25)
and method117 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v114 : US19 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US19_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method116(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method103(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method104(v81, v2, v3, v4)
                US19_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US19_1(v109)
    match v114 with
    | US19_1(v131) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v121 : (char -> string) = _.ToString()
        let v122 : string = v121 v115
        let v125 : string = v0 + v122 
        method117(v125, v116, v117, v118, v119)
and method119 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US21 =
            if v3 then
                US21_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US21_1
        let v19 : char =
            match v15 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method119(v0, v21)
and closure38 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US20 =
    let v4 : bool = "" = v0
    let v125 : US19 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US19_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method103(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method104(v56, v1, v2, v3)
                US19_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method105(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US19_1(v120)
    let v196 : US19 =
        match v125 with
        | US19_1(v193) -> (* Error *)
            US19_1(v193)
        | US19_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US19_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method103(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method104(v187, v128, v129, v130)
                US19_0(v142, v176, v188, v189, v190)
    match v196 with
    | US19_1(v214) -> (* Error *)
        US20_1(v214)
    | US19_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '\\'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US20_0(v212, v198, v199, v200, v201)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US20 =
    let v4 : bool = "" = v0
    let v125 : US19 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US19_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method103(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method104(v56, v1, v2, v3)
                US19_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method105(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US19_1(v120)
    let v196 : US19 =
        match v125 with
        | US19_1(v193) -> (* Error *)
            US19_1(v193)
        | US19_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US19_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method103(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method104(v187, v128, v129, v130)
                US19_0(v142, v176, v188, v189, v190)
    match v196 with
    | US19_1(v214) -> (* Error *)
        US20_1(v214)
    | US19_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '`'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US20_0(v212, v198, v199, v200, v201)
and method120 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US20 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US20 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US20_1(v15) -> (* Error *)
            method120(v0, v1, v2, v3, v8)
        | US20_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US20_1(v5)
and method121 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method121(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method118 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v106 : US19 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US19_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method119(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method103(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method104(v77, v2, v3, v4)
                US19_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US19_1(v101)
    let v121 : US20 =
        match v106 with
        | US19_1(v118) -> (* Error *)
            US20_1(v118)
        | US19_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US20_0(v114, v108, v109, v110, v111)
    let v135 : US20 =
        match v121 with
        | US20_1(v127) -> (* Error *)
            let v128 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure38()
            let v129 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure39()
            let v130 : UH3 = UH3_0
            let v131 : UH3 = UH3_1(v129, v130)
            let v132 : UH3 = UH3_1(v128, v131)
            method120(v1, v2, v3, v4, v132)
        | US20_0(v122, v123, v124, v125, v126) -> (* Ok *)
            v121
    match v135 with
    | US20_1(v143) -> (* Error *)
        let v144 : UH2 = UH2_0
        let v145 : UH2 = method121(v0, v144)
        US27_0(v145, v1, v2, v3, v4)
    | US20_0(v136, v137, v138, v139, v140) -> (* Ok *)
        let v141 : UH2 = UH2_1(v136, v0)
        method118(v141, v137, v138, v139, v140)
and method122 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method122(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method123 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v106 : US19 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US19_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method119(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method103(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method104(v77, v2, v3, v4)
                US19_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US19_1(v101)
    let v121 : US20 =
        match v106 with
        | US19_1(v118) -> (* Error *)
            US20_1(v118)
        | US19_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US20_0(v114, v108, v109, v110, v111)
    match v121 with
    | US20_1(v129) -> (* Error *)
        let v130 : UH2 = UH2_0
        let v131 : UH2 = method121(v0, v130)
        US27_0(v131, v1, v2, v3, v4)
    | US20_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : UH2 = UH2_1(v122, v0)
        method123(v127, v123, v124, v125, v126)
and method115 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v114 : US19 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US19_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method116(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method103(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method104(v81, v2, v3, v4)
                US19_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US19_1(v109)
    let v134 : US20 =
        match v114 with
        | US19_1(v131) -> (* Error *)
            US20_1(v131)
        | US19_0(v115, v116, v117, v118, v119) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v115
            let struct (v125 : string, v126 : string, v127 : System.Text.StringBuilder, v128 : int32, v129 : int32) = method117(v122, v116, v117, v118, v119)
            US20_0(v125, v126, v127, v128, v129)
    let v522 : US20 =
        match v134 with
        | US20_1(v140) -> (* Error *)
            let v261 : US19 =
                if v5 then
                    let v142 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US19_1(v142)
                else
                    let v146 : char = v1.[int 0]
                    let v147 : bool = v146 = '"'
                    if v147 then
                        let v149 : (string -> int32) = String.length
                        let v150 : int32 = v149 v1
                        let v158 : int32 = 1 |> int32 
                        let v171 : int32 = v150 |> int32 
                        let v179 : int32 = v171 - 1
                        let v181 : string = v1.[int v158..int v179]
                        let v186 : (char -> string) = _.ToString()
                        let v187 : string = v186 v146
                        let v190 : int64 = System.Convert.ToInt64 v187.Length
                        let v191 : int64 = 0L
                        let v192 : UH0 = method103(v190, v187, v191)
                        let struct (v193 : System.Text.StringBuilder, v194 : int32, v195 : int32) = method104(v192, v2, v3, v4)
                        US19_0(v146, v181, v193, v194, v195)
                    else
                        let v198 : string = "\n"
                        let v199 : int32 = v1.IndexOf v198 
                        let v202 : int32 = v199 - 1
                        let v203 : bool = -2 = v202
                        let v211 : int32 =
                            if v203 then
                                let v205 : (string -> int32) = String.length
                                let v206 : int32 = v205 v1
                                let v209 : int32 = v206 + 1
                                v209
                            else
                                let v210 : int32 = v202 + 1
                                v210
                        let v217 : int32 = 0 |> int32 
                        let v230 : int32 = v211 |> int32 
                        let v238 : int32 = v230 - 1
                        let v240 : string = v1.[int v217..int v238]
                        let v245 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v240}"
                        let v248 : int32 = v4 - 1
                        let v249 : int32 = 0
                        let v250 : (string -> string) = method105(v248, v249)
                        let v251 : string = ""
                        let v252 : string = v250 v251
                        let v253 : string = "^"
                        let v254 : string = v252 + v253 
                        let v256 : string = $"{v245}
{v254}
"
                        US19_1(v256)
            let v451 : US20 =
                match v261 with
                | US19_1(v448) -> (* Error *)
                    US20_1(v448)
                | US19_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US27 = method118(v267, v263, v264, v265, v266)
                    let v301 : US20 =
                        match v268 with
                        | US27_1(v298) -> (* Error *)
                            US20_1(v298)
                        | US27_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method122(v269, v274)
                            let v280 : unit = ()
                            let _let'_v280 =
                                seq {
                                    yield! v275 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v283 : string seq = _let'_v280 
                            let v291 : (string -> (string seq -> string)) = String.concat
                            let v292 : string = ""
                            let v293 : (string seq -> string) = v291 v292
                            let v294 : string = v293 v283
                            US20_0(v294, v270, v271, v272, v273)
                    match v301 with
                    | US20_1(v443) -> (* Error *)
                        let v444 : string = "parsing.between / expected content"
                        US20_1(v444)
                    | US20_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v428 : US19 =
                            if v307 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v304, v305, v306)}"
                                US19_1(v309)
                            else
                                let v313 : char = v303.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v316 : (string -> int32) = String.length
                                    let v317 : int32 = v316 v303
                                    let v325 : int32 = 1 |> int32 
                                    let v338 : int32 = v317 |> int32 
                                    let v346 : int32 = v338 - 1
                                    let v348 : string = v303.[int v325..int v346]
                                    let v353 : (char -> string) = _.ToString()
                                    let v354 : string = v353 v313
                                    let v357 : int64 = System.Convert.ToInt64 v354.Length
                                    let v358 : int64 = 0L
                                    let v359 : UH0 = method103(v357, v354, v358)
                                    let struct (v360 : System.Text.StringBuilder, v361 : int32, v362 : int32) = method104(v359, v304, v305, v306)
                                    US19_0(v313, v348, v360, v361, v362)
                                else
                                    let v365 : string = "\n"
                                    let v366 : int32 = v303.IndexOf v365 
                                    let v369 : int32 = v366 - 1
                                    let v370 : bool = -2 = v369
                                    let v378 : int32 =
                                        if v370 then
                                            let v372 : (string -> int32) = String.length
                                            let v373 : int32 = v372 v303
                                            let v376 : int32 = v373 + 1
                                            v376
                                        else
                                            let v377 : int32 = v369 + 1
                                            v377
                                    let v384 : int32 = 0 |> int32 
                                    let v397 : int32 = v378 |> int32 
                                    let v405 : int32 = v397 - 1
                                    let v407 : string = v303.[int v384..int v405]
                                    let v412 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v407}"
                                    let v415 : int32 = v306 - 1
                                    let v416 : int32 = 0
                                    let v417 : (string -> string) = method105(v415, v416)
                                    let v418 : string = ""
                                    let v419 : string = v417 v418
                                    let v420 : string = "^"
                                    let v421 : string = v419 + v420 
                                    let v423 : string = $"{v412}
{v421}
"
                                    US19_1(v423)
                        match v428 with
                        | US19_1(v435) -> (* Error *)
                            let v437 : string = $"parsing.between / expected closing delimiter / e: %A{v435} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US20_1(v437)
                        | US19_0(v429, v430, v431, v432, v433) -> (* Ok *)
                            US20_0(v302, v430, v431, v432, v433)
            match v451 with
            | US20_1(v457) -> (* Error *)
                let v458 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure38()
                let v459 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure39()
                let v460 : UH3 = UH3_0
                let v461 : UH3 = UH3_1(v459, v460)
                let v462 : UH3 = UH3_1(v458, v461)
                let v463 : US20 = method120(v1, v2, v3, v4, v462)
                let v474 : US20 =
                    match v463 with
                    | US20_1(v471) -> (* Error *)
                        US20_1(v471)
                    | US20_0(v464, v465, v466, v467, v468) -> (* Ok *)
                        let v469 : string = ""
                        US20_0(v469, v465, v466, v467, v468)
                let v485 : US27 =
                    match v474 with
                    | US20_1(v482) -> (* Error *)
                        US27_1(v482)
                    | US20_0(v475, v476, v477, v478, v479) -> (* Ok *)
                        let v480 : UH2 = UH2_0
                        method123(v480, v476, v477, v478, v479)
                match v485 with
                | US27_1(v515) -> (* Error *)
                    US20_1(v515)
                | US27_0(v486, v487, v488, v489, v490) -> (* Ok *)
                    let v491 : string list = []
                    let v492 : string list = method122(v486, v491)
                    let v497 : unit = ()
                    let _let'_v497 =
                        seq {
                            yield! v492 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v500 : string seq = _let'_v497 
                    let v508 : (string -> (string seq -> string)) = String.concat
                    let v509 : string = ""
                    let v510 : (string seq -> string) = v508 v509
                    let v511 : string = v510 v500
                    US20_0(v511, v487, v488, v489, v490)
            | US20_0(v452, v453, v454, v455, v456) -> (* Ok *)
                v451
        | US20_0(v135, v136, v137, v138, v139) -> (* Ok *)
            v134
    match v522 with
    | US20_1(v585) -> (* Error *)
        let v586 : UH2 = UH2_0
        let v587 : UH2 = method121(v0, v586)
        US27_0(v587, v1, v2, v3, v4)
    | US20_0(v523, v524, v525, v526, v527) -> (* Ok *)
        let v528 : int32 = 0
        let v529 : int32 = method112(v524, v528)
        let v530 : bool = 0 = v529
        let v571 : US22 =
            if v530 then
                let v531 : string = "parsing.spaces1 / expected at least one space"
                US22_1(v531)
            else
                let v534 : (string -> int32) = String.length
                let v535 : int32 = v534 v524
                let v543 : int32 = v529 |> int32 
                let v556 : int32 = v535 |> int32 
                let v564 : int32 = v556 - 1
                let v566 : string = v524.[int v543..int v564]
                US22_0(v566, v525, v526, v527)
        match v571 with
        | US22_1(v578) -> (* Error *)
            let v579 : UH2 = UH2_0
            let v580 : UH2 = UH2_1(v523, v579)
            let v581 : UH2 = method121(v0, v580)
            US27_0(v581, v524, v525, v526, v527)
        | US22_0(v572, v573, v574, v575) -> (* Ok *)
            let v576 : UH2 = UH2_1(v523, v0)
            method115(v576, v572, v573, v574, v575)
and method114 (v0 : string) : US26 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method102()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US27 = method115(v19, v10, v16, v20, v21)
    match v22 with
    | US27_1(v36) -> (* Error *)
        US26_1(v36)
    | US27_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method122(v23, v28)
        let v31 : (string list -> (string [])) = List.toArray
        let v32 : (string []) = v31 v29
        US26_0(v32)
and method125 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "file_name"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v0}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v106 : string = "arguments"
    let v107 : string = $"{v106}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v10, v107)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v124 : string = $"{v51}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v10, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v141 : string = $"{v1}"
    let v149 : unit = ()
    let v150 : (unit -> unit) = closure7(v10, v141)
    let v151 : unit = (fun () -> v150 (); v149) ()
    let v158 : string = $"{v87}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v10, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v176 : string = "options"
    let v177 : string = $"{v176}"
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure7(v10, v177)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v194 : string = $"{v51}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v10, v194)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v211 : string = $"{v13}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v10, v211)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v229 : string = "command"
    let v230 : string = $"{v229}"
    let v238 : unit = ()
    let v239 : (unit -> unit) = closure7(v10, v230)
    let v240 : unit = (fun () -> v239 (); v238) ()
    let v247 : string = $"{v51}"
    let v255 : unit = ()
    let v256 : (unit -> unit) = closure7(v10, v247)
    let v257 : unit = (fun () -> v256 (); v255) ()
    let v264 : string = $"{v2}"
    let v272 : unit = ()
    let v273 : (unit -> unit) = closure7(v10, v264)
    let v274 : unit = (fun () -> v273 (); v272) ()
    let v281 : string = $"{v87}"
    let v289 : unit = ()
    let v290 : (unit -> unit) = closure7(v10, v281)
    let v291 : unit = (fun () -> v290 (); v289) ()
    let v299 : string = "cancellation_token"
    let v300 : string = $"{v299}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v10, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v317 : string = $"{v51}"
    let v325 : unit = ()
    let v326 : (unit -> unit) = closure7(v10, v317)
    let v327 : unit = (fun () -> v326 (); v325) ()
    (* run_target_args'
    let v337 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v338 : string = "format!(\"{:#?}\", $0)"
    let v339 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v338 
    let v340 : string = "fable_library_rust::String_::fromString($0)"
    let v341 : string = Fable.Core.RustInterop.emitRustExpr v339 v340 
    let _run_target_args'_v337 = v341 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v342 : string = "format!(\"{:#?}\", $0)"
    let v343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v342 
    let v344 : string = "fable_library_rust::String_::fromString($0)"
    let v345 : string = Fable.Core.RustInterop.emitRustExpr v343 v344 
    let _run_target_args'_v337 = v345 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v346 : string = "format!(\"{:#?}\", $0)"
    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v346 
    let v348 : string = "fable_library_rust::String_::fromString($0)"
    let v349 : string = Fable.Core.RustInterop.emitRustExpr v347 v348 
    let _run_target_args'_v337 = v349 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v351 : string = $"%A{v3}"
    let _run_target_args'_v337 = v351 
    #endif
#if FABLE_COMPILER_PYTHON
    let v355 : string = $"%A{v3}"
    let _run_target_args'_v337 = v355 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v359 : string = $"%A{v3}"
    let _run_target_args'_v337 = v359 
    #endif
#else
    let v363 : string = $"%A{v3}"
    let _run_target_args'_v337 = v363 
    #endif
    let v366 : string = _run_target_args'_v337 
    let v376 : string = $"{v366}"
    let v384 : unit = ()
    let v385 : (unit -> unit) = closure7(v10, v376)
    let v386 : unit = (fun () -> v385 (); v384) ()
    let v393 : string = $"{v87}"
    let v401 : unit = ()
    let v402 : (unit -> unit) = closure7(v10, v393)
    let v403 : unit = (fun () -> v402 (); v401) ()
    let v411 : string = "environment_variables"
    let v412 : string = $"{v411}"
    let v420 : unit = ()
    let v421 : (unit -> unit) = closure7(v10, v412)
    let v422 : unit = (fun () -> v421 (); v420) ()
    let v429 : string = $"{v51}"
    let v437 : unit = ()
    let v438 : (unit -> unit) = closure7(v10, v429)
    let v439 : unit = (fun () -> v438 (); v437) ()
    let v446 : string = $"%A{v4}"
    let v450 : string = $"{v446}"
    let v458 : unit = ()
    let v459 : (unit -> unit) = closure7(v10, v450)
    let v460 : unit = (fun () -> v459 (); v458) ()
    let v467 : string = $"{v87}"
    let v475 : unit = ()
    let v476 : (unit -> unit) = closure7(v10, v467)
    let v477 : unit = (fun () -> v476 (); v475) ()
    let v485 : string = "on_line"
    let v486 : string = $"{v485}"
    let v494 : unit = ()
    let v495 : (unit -> unit) = closure7(v10, v486)
    let v496 : unit = (fun () -> v495 (); v494) ()
    let v503 : string = $"{v51}"
    let v511 : unit = ()
    let v512 : (unit -> unit) = closure7(v10, v503)
    let v513 : unit = (fun () -> v512 (); v511) ()
    (* run_target_args'
    let v523 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v524 : string = "format!(\"{:#?}\", $0)"
    let v525 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v524 
    let v526 : string = "fable_library_rust::String_::fromString($0)"
    let v527 : string = Fable.Core.RustInterop.emitRustExpr v525 v526 
    let _run_target_args'_v523 = v527 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v528 : string = "format!(\"{:#?}\", $0)"
    let v529 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v528 
    let v530 : string = "fable_library_rust::String_::fromString($0)"
    let v531 : string = Fable.Core.RustInterop.emitRustExpr v529 v530 
    let _run_target_args'_v523 = v531 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v532 : string = "format!(\"{:#?}\", $0)"
    let v533 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v532 
    let v534 : string = "fable_library_rust::String_::fromString($0)"
    let v535 : string = Fable.Core.RustInterop.emitRustExpr v533 v534 
    let _run_target_args'_v523 = v535 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v537 : string = $"%A{v5}"
    let _run_target_args'_v523 = v537 
    #endif
#if FABLE_COMPILER_PYTHON
    let v541 : string = $"%A{v5}"
    let _run_target_args'_v523 = v541 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v545 : string = $"%A{v5}"
    let _run_target_args'_v523 = v545 
    #endif
#else
    let v549 : string = $"%A{v5}"
    let _run_target_args'_v523 = v549 
    #endif
    let v552 : string = _run_target_args'_v523 
    let v562 : string = $"{v552}"
    let v570 : unit = ()
    let v571 : (unit -> unit) = closure7(v10, v562)
    let v572 : unit = (fun () -> v571 (); v570) ()
    let v579 : string = $"{v87}"
    let v587 : unit = ()
    let v588 : (unit -> unit) = closure7(v10, v579)
    let v589 : unit = (fun () -> v588 (); v587) ()
    let v597 : string = "stdin"
    let v598 : string = $"{v597}"
    let v606 : unit = ()
    let v607 : (unit -> unit) = closure7(v10, v598)
    let v608 : unit = (fun () -> v607 (); v606) ()
    let v615 : string = $"{v51}"
    let v623 : unit = ()
    let v624 : (unit -> unit) = closure7(v10, v615)
    let v625 : unit = (fun () -> v624 (); v623) ()
    (* run_target_args'
    let v635 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v636 : string = "format!(\"{:#?}\", $0)"
    let v637 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v636 
    let v638 : string = "fable_library_rust::String_::fromString($0)"
    let v639 : string = Fable.Core.RustInterop.emitRustExpr v637 v638 
    let _run_target_args'_v635 = v639 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v640 : string = "format!(\"{:#?}\", $0)"
    let v641 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v640 
    let v642 : string = "fable_library_rust::String_::fromString($0)"
    let v643 : string = Fable.Core.RustInterop.emitRustExpr v641 v642 
    let _run_target_args'_v635 = v643 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v644 : string = "format!(\"{:#?}\", $0)"
    let v645 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v644 
    let v646 : string = "fable_library_rust::String_::fromString($0)"
    let v647 : string = Fable.Core.RustInterop.emitRustExpr v645 v646 
    let _run_target_args'_v635 = v647 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v649 : string = $"%A{v6}"
    let _run_target_args'_v635 = v649 
    #endif
#if FABLE_COMPILER_PYTHON
    let v653 : string = $"%A{v6}"
    let _run_target_args'_v635 = v653 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v657 : string = $"%A{v6}"
    let _run_target_args'_v635 = v657 
    #endif
#else
    let v661 : string = $"%A{v6}"
    let _run_target_args'_v635 = v661 
    #endif
    let v664 : string = _run_target_args'_v635 
    let v674 : string = $"{v664}"
    let v682 : unit = ()
    let v683 : (unit -> unit) = closure7(v10, v674)
    let v684 : unit = (fun () -> v683 (); v682) ()
    let v691 : string = $"{v87}"
    let v699 : unit = ()
    let v700 : (unit -> unit) = closure7(v10, v691)
    let v701 : unit = (fun () -> v700 (); v699) ()
    let v709 : string = "trace"
    let v710 : string = $"{v709}"
    let v718 : unit = ()
    let v719 : (unit -> unit) = closure7(v10, v710)
    let v720 : unit = (fun () -> v719 (); v718) ()
    let v727 : string = $"{v51}"
    let v735 : unit = ()
    let v736 : (unit -> unit) = closure7(v10, v727)
    let v737 : unit = (fun () -> v736 (); v735) ()
    let v745 : string =
        if v7 then
            let v743 : string = "true"
            v743
        else
            let v744 : string = "false"
            v744
    let v747 : string = $"{v745}"
    let v755 : unit = ()
    let v756 : (unit -> unit) = closure7(v10, v747)
    let v757 : unit = (fun () -> v756 (); v755) ()
    let v764 : string = $"{v87}"
    let v772 : unit = ()
    let v773 : (unit -> unit) = closure7(v10, v764)
    let v774 : unit = (fun () -> v773 (); v772) ()
    let v782 : string = "working_directory"
    let v783 : string = $"{v782}"
    let v791 : unit = ()
    let v792 : (unit -> unit) = closure7(v10, v783)
    let v793 : unit = (fun () -> v792 (); v791) ()
    let v800 : string = $"{v51}"
    let v808 : unit = ()
    let v809 : (unit -> unit) = closure7(v10, v800)
    let v810 : unit = (fun () -> v809 (); v808) ()
    (* run_target_args'
    let v820 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v821 : string = "format!(\"{:#?}\", $0)"
    let v822 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v821 
    let v823 : string = "fable_library_rust::String_::fromString($0)"
    let v824 : string = Fable.Core.RustInterop.emitRustExpr v822 v823 
    let _run_target_args'_v820 = v824 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v825 : string = "format!(\"{:#?}\", $0)"
    let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v825 
    let v827 : string = "fable_library_rust::String_::fromString($0)"
    let v828 : string = Fable.Core.RustInterop.emitRustExpr v826 v827 
    let _run_target_args'_v820 = v828 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v829 : string = "format!(\"{:#?}\", $0)"
    let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v829 
    let v831 : string = "fable_library_rust::String_::fromString($0)"
    let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
    let _run_target_args'_v820 = v832 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v834 : string = $"%A{v8}"
    let _run_target_args'_v820 = v834 
    #endif
#if FABLE_COMPILER_PYTHON
    let v838 : string = $"%A{v8}"
    let _run_target_args'_v820 = v838 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v842 : string = $"%A{v8}"
    let _run_target_args'_v820 = v842 
    #endif
#else
    let v846 : string = $"%A{v8}"
    let _run_target_args'_v820 = v846 
    #endif
    let v849 : string = _run_target_args'_v820 
    let v859 : string = $"{v849}"
    let v867 : unit = ()
    let v868 : (unit -> unit) = closure7(v10, v859)
    let v869 : unit = (fun () -> v868 (); v867) ()
    let v877 : string = " }"
    let v878 : string = $"{v877}"
    let v886 : unit = ()
    let v887 : (unit -> unit) = closure7(v10, v878)
    let v888 : unit = (fun () -> v887 (); v886) ()
    let v895 : string = $"{v877}"
    let v903 : unit = ()
    let v904 : (unit -> unit) = closure7(v10, v895)
    let v905 : unit = (fun () -> v904 (); v903) ()
    let v911 : string = v10.l0
    v911
and method124 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method125(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v21 : string = " "
    let v22 : string = v6 + v21 
    let v26 : string = v22 + v7 
    let v31 : string = " #"
    let v32 : string = v26 + v31 
    let v36 : (int64 -> string) = _.ToString()
    let v37 : string = v36 v18
    let v41 : string = v32 + v37 
    let v45 : string = v41 + v21 
    let v50 : string = "runtime.execute_with_options"
    let v51 : string = v45 + v50 
    let v56 : string = " / "
    let v57 : string = v51 + v56 
    let v61 : string = v57 + v17 
    method17(v61)
and closure40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure2()
    let v25 : unit = (fun () -> v24 (); v23) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
    let v66 : US0 = v52.l0
    let v67 : bool = v50.l0
    let v68 : bool = v67 = false
    let v71 : bool =
        if v68 then
            false
        else
            let v69 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v66
            let v70 : bool = 1 >= v69
            v70
    let v72 : bool = v71 = false
    let v310 : US6 =
        if v72 then
            US6_1
        else
            let v88 : unit = ()
            let v89 : unit = (fun () -> v24 (); v88) ()
            let struct (v112 : Mut0, v113 : Mut1, v114 : Mut2, v115 : Mut3, v116 : Mut4, v117 : int64 option) = TraceState.trace_state.Value
            let v130 : string = method7(v112, v113, v114, v115, v116, v117)
            let v131 : string = method11()
            let v133 : string = $"%A{v8}"
            let v136 : string = method124(v112, v113, v114, v115, v116, v117, v130, v131, v7, v133, v0, v1, v2, v3, v4, v5, v6)
            let v151 : unit = ()
            let v152 : unit = (fun () -> v24 (); v151) ()
            let struct (v175 : Mut0, v176 : Mut1, v177 : Mut2, v178 : Mut3, v179 : Mut4, v180 : int64 option) = TraceState.trace_state.Value
            let v195 : unit = ()
            let v196 : (unit -> unit) = closure8(v175)
            let v197 : unit = (fun () -> v196 (); v195) ()
            let v200 : (string -> unit) = closure9()
            (* run_target_args'
            let v201 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v202 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v136 v202 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v203 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v136 v203 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v204 : string = v178.l0
            let v205 : bool = v204 = ""
            let v220 : string =
                if v205 then
                    v136
                else
                    let v206 : bool = v136 = ""
                    if v206 then
                        let v207 : string = v178.l0
                        v207
                    else
                        let v208 : string = v178.l0
                        let v211 : string = "\n"
                        let v212 : string = v208 + v211 
                        let v216 : string = v212 + v136 
                        v216
            (* run_target_args'
            let v225 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v226 : string = "&*$0"
            let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v220 v226 
            let _run_target_args'_v225 = v227 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v220 v228 
            let _run_target_args'_v225 = v229 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v230 : string = "&*$0"
            let v231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v220 v230 
            let _run_target_args'_v225 = v231 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v233 : Ref<Str> = v220 |> unbox<Ref<Str>>
            let _run_target_args'_v225 = v233 
            #endif
#if FABLE_COMPILER_PYTHON
            let v237 : Ref<Str> = v220 |> unbox<Ref<Str>>
            let _run_target_args'_v225 = v237 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v241 : Ref<Str> = v220 |> unbox<Ref<Str>>
            let _run_target_args'_v225 = v241 
            #endif
#else
            let v245 : Ref<Str> = v220 |> unbox<Ref<Str>>
            let _run_target_args'_v225 = v245 
            #endif
            let v248 : Ref<Str> = _run_target_args'_v225 
            let v257 : string = $"$0.chars()"
            let v258 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v248 v257 
            let v259 : string = "$0"
            let v260 : _ = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "$0.collect::<Vec<_>>()"
            let v262 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v264 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v266 : bool = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "x"
            let v268 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = "String::from_iter($0)"
            let v270 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v271 : string = "true; $0 }).collect::<Vec<_>>()"
            let v272 : bool = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v273 : string = "_vec_map"
            let v274 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v273 
            let v275 : string = "$0.len()"
            let v276 : unativeint = Fable.Core.RustInterop.emitRustExpr v274 v275 
            let v282 : int32 = v276 |> int32 
            let v292 : string = ""
            let v293 : bool = v136 <> v292 
            let v297 : bool =
                if v293 then
                    let v296 : bool = v282 <= 1
                    v296
                else
                    false
            if v297 then
                v178.l0 <- v220
                ()
            else
                v178.l0 <- v292
                let v298 : string = "true; $0.into_iter().for_each(|x| { //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr v274 v298 
                let v300 : string = "x"
                let v301 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v300 
                let v302 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v303 : bool = Fable.Core.RustInterop.emitRustExpr v301 v302 
                let v304 : string = $"true"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr () v304 
                let v306 : string = "true; }); //"
                let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v200 v136
            #endif
#if FABLE_COMPILER_PYTHON
            v200 v136
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v200 v136
            #endif
#else
            v200 v136
            #endif
            // run_target_args' is_unit
            let v308 : (string -> unit) = v176.l0
            v308 v136
            US6_0(v175, v176, v177, v178, v179, v180)
    
    ()
and closure41 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method126 () : (std_process_Child option -> std_process_Child option) =
    closure41()
and closure42 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US28 =
    US28_0(v0)
and method127 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US28) =
    closure42()
and closure43 () (v0 : std_string_String) : US28 =
    US28_1(v0)
and method128 () : (std_string_String -> US28) =
    closure43()
and method130 (v0 : std_string_String, v1 : string, v2 : string, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "error"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v78 : string = "format!(\"{:#?}\", $0)"
    let v79 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v78 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let _run_target_args'_v73 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v73 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : string = $"%A{v0}"
    let _run_target_args'_v73 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = $"%A{v0}"
    let _run_target_args'_v73 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : string = $"%A{v0}"
    let _run_target_args'_v73 = v95 
    #endif
#else
    let v99 : string = $"%A{v0}"
    let _run_target_args'_v73 = v99 
    #endif
    let v102 : string = _run_target_args'_v73 
    let v112 : string = $"{v102}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v11, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v130 : string = "; "
    let v131 : string = $"{v130}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v11, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v149 : string = "file_name"
    let v150 : string = $"{v149}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v11, v150)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v167 : string = $"{v52}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v184 : string = $"{v1}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v11, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v201 : string = $"{v130}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v11, v201)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v219 : string = "arguments"
    let v220 : string = $"{v219}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v11, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v237 : string = $"{v52}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v11, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v254 : string = $"{v2}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v11, v254)
    let v264 : unit = (fun () -> v263 (); v262) ()
    let v271 : string = $"{v130}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v11, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v289 : string = "options"
    let v290 : string = $"{v289}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v11, v290)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v307 : string = $"{v52}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v11, v307)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v324 : string = $"{v14}"
    let v332 : unit = ()
    let v333 : (unit -> unit) = closure7(v11, v324)
    let v334 : unit = (fun () -> v333 (); v332) ()
    let v342 : string = "command"
    let v343 : string = $"{v342}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v11, v343)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v360 : string = $"{v52}"
    let v368 : unit = ()
    let v369 : (unit -> unit) = closure7(v11, v360)
    let v370 : unit = (fun () -> v369 (); v368) ()
    let v377 : string = $"{v3}"
    let v385 : unit = ()
    let v386 : (unit -> unit) = closure7(v11, v377)
    let v387 : unit = (fun () -> v386 (); v385) ()
    let v394 : string = $"{v130}"
    let v402 : unit = ()
    let v403 : (unit -> unit) = closure7(v11, v394)
    let v404 : unit = (fun () -> v403 (); v402) ()
    let v412 : string = "cancellation_token"
    let v413 : string = $"{v412}"
    let v421 : unit = ()
    let v422 : (unit -> unit) = closure7(v11, v413)
    let v423 : unit = (fun () -> v422 (); v421) ()
    let v430 : string = $"{v52}"
    let v438 : unit = ()
    let v439 : (unit -> unit) = closure7(v11, v430)
    let v440 : unit = (fun () -> v439 (); v438) ()
    (* run_target_args'
    let v450 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v451 : string = "format!(\"{:#?}\", $0)"
    let v452 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v451 
    let v453 : string = "fable_library_rust::String_::fromString($0)"
    let v454 : string = Fable.Core.RustInterop.emitRustExpr v452 v453 
    let _run_target_args'_v450 = v454 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v455 : string = "format!(\"{:#?}\", $0)"
    let v456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v455 
    let v457 : string = "fable_library_rust::String_::fromString($0)"
    let v458 : string = Fable.Core.RustInterop.emitRustExpr v456 v457 
    let _run_target_args'_v450 = v458 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v459 : string = "format!(\"{:#?}\", $0)"
    let v460 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v459 
    let v461 : string = "fable_library_rust::String_::fromString($0)"
    let v462 : string = Fable.Core.RustInterop.emitRustExpr v460 v461 
    let _run_target_args'_v450 = v462 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v464 : string = $"%A{v4}"
    let _run_target_args'_v450 = v464 
    #endif
#if FABLE_COMPILER_PYTHON
    let v468 : string = $"%A{v4}"
    let _run_target_args'_v450 = v468 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v472 : string = $"%A{v4}"
    let _run_target_args'_v450 = v472 
    #endif
#else
    let v476 : string = $"%A{v4}"
    let _run_target_args'_v450 = v476 
    #endif
    let v479 : string = _run_target_args'_v450 
    let v489 : string = $"{v479}"
    let v497 : unit = ()
    let v498 : (unit -> unit) = closure7(v11, v489)
    let v499 : unit = (fun () -> v498 (); v497) ()
    let v506 : string = $"{v130}"
    let v514 : unit = ()
    let v515 : (unit -> unit) = closure7(v11, v506)
    let v516 : unit = (fun () -> v515 (); v514) ()
    let v524 : string = "environment_variables"
    let v525 : string = $"{v524}"
    let v533 : unit = ()
    let v534 : (unit -> unit) = closure7(v11, v525)
    let v535 : unit = (fun () -> v534 (); v533) ()
    let v542 : string = $"{v52}"
    let v550 : unit = ()
    let v551 : (unit -> unit) = closure7(v11, v542)
    let v552 : unit = (fun () -> v551 (); v550) ()
    let v559 : string = $"%A{v5}"
    let v563 : string = $"{v559}"
    let v571 : unit = ()
    let v572 : (unit -> unit) = closure7(v11, v563)
    let v573 : unit = (fun () -> v572 (); v571) ()
    let v580 : string = $"{v130}"
    let v588 : unit = ()
    let v589 : (unit -> unit) = closure7(v11, v580)
    let v590 : unit = (fun () -> v589 (); v588) ()
    let v598 : string = "on_line"
    let v599 : string = $"{v598}"
    let v607 : unit = ()
    let v608 : (unit -> unit) = closure7(v11, v599)
    let v609 : unit = (fun () -> v608 (); v607) ()
    let v616 : string = $"{v52}"
    let v624 : unit = ()
    let v625 : (unit -> unit) = closure7(v11, v616)
    let v626 : unit = (fun () -> v625 (); v624) ()
    (* run_target_args'
    let v636 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v637 : string = "format!(\"{:#?}\", $0)"
    let v638 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v637 
    let v639 : string = "fable_library_rust::String_::fromString($0)"
    let v640 : string = Fable.Core.RustInterop.emitRustExpr v638 v639 
    let _run_target_args'_v636 = v640 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v641 : string = "format!(\"{:#?}\", $0)"
    let v642 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v641 
    let v643 : string = "fable_library_rust::String_::fromString($0)"
    let v644 : string = Fable.Core.RustInterop.emitRustExpr v642 v643 
    let _run_target_args'_v636 = v644 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v645 : string = "format!(\"{:#?}\", $0)"
    let v646 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v645 
    let v647 : string = "fable_library_rust::String_::fromString($0)"
    let v648 : string = Fable.Core.RustInterop.emitRustExpr v646 v647 
    let _run_target_args'_v636 = v648 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v650 : string = $"%A{v6}"
    let _run_target_args'_v636 = v650 
    #endif
#if FABLE_COMPILER_PYTHON
    let v654 : string = $"%A{v6}"
    let _run_target_args'_v636 = v654 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v658 : string = $"%A{v6}"
    let _run_target_args'_v636 = v658 
    #endif
#else
    let v662 : string = $"%A{v6}"
    let _run_target_args'_v636 = v662 
    #endif
    let v665 : string = _run_target_args'_v636 
    let v675 : string = $"{v665}"
    let v683 : unit = ()
    let v684 : (unit -> unit) = closure7(v11, v675)
    let v685 : unit = (fun () -> v684 (); v683) ()
    let v692 : string = $"{v130}"
    let v700 : unit = ()
    let v701 : (unit -> unit) = closure7(v11, v692)
    let v702 : unit = (fun () -> v701 (); v700) ()
    let v710 : string = "stdin"
    let v711 : string = $"{v710}"
    let v719 : unit = ()
    let v720 : (unit -> unit) = closure7(v11, v711)
    let v721 : unit = (fun () -> v720 (); v719) ()
    let v728 : string = $"{v52}"
    let v736 : unit = ()
    let v737 : (unit -> unit) = closure7(v11, v728)
    let v738 : unit = (fun () -> v737 (); v736) ()
    (* run_target_args'
    let v748 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v749 : string = "format!(\"{:#?}\", $0)"
    let v750 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v749 
    let v751 : string = "fable_library_rust::String_::fromString($0)"
    let v752 : string = Fable.Core.RustInterop.emitRustExpr v750 v751 
    let _run_target_args'_v748 = v752 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v753 : string = "format!(\"{:#?}\", $0)"
    let v754 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v753 
    let v755 : string = "fable_library_rust::String_::fromString($0)"
    let v756 : string = Fable.Core.RustInterop.emitRustExpr v754 v755 
    let _run_target_args'_v748 = v756 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v757 : string = "format!(\"{:#?}\", $0)"
    let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v757 
    let v759 : string = "fable_library_rust::String_::fromString($0)"
    let v760 : string = Fable.Core.RustInterop.emitRustExpr v758 v759 
    let _run_target_args'_v748 = v760 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v762 : string = $"%A{v7}"
    let _run_target_args'_v748 = v762 
    #endif
#if FABLE_COMPILER_PYTHON
    let v766 : string = $"%A{v7}"
    let _run_target_args'_v748 = v766 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v770 : string = $"%A{v7}"
    let _run_target_args'_v748 = v770 
    #endif
#else
    let v774 : string = $"%A{v7}"
    let _run_target_args'_v748 = v774 
    #endif
    let v777 : string = _run_target_args'_v748 
    let v787 : string = $"{v777}"
    let v795 : unit = ()
    let v796 : (unit -> unit) = closure7(v11, v787)
    let v797 : unit = (fun () -> v796 (); v795) ()
    let v804 : string = $"{v130}"
    let v812 : unit = ()
    let v813 : (unit -> unit) = closure7(v11, v804)
    let v814 : unit = (fun () -> v813 (); v812) ()
    let v822 : string = "trace"
    let v823 : string = $"{v822}"
    let v831 : unit = ()
    let v832 : (unit -> unit) = closure7(v11, v823)
    let v833 : unit = (fun () -> v832 (); v831) ()
    let v840 : string = $"{v52}"
    let v848 : unit = ()
    let v849 : (unit -> unit) = closure7(v11, v840)
    let v850 : unit = (fun () -> v849 (); v848) ()
    let v858 : string =
        if v8 then
            let v856 : string = "true"
            v856
        else
            let v857 : string = "false"
            v857
    let v860 : string = $"{v858}"
    let v868 : unit = ()
    let v869 : (unit -> unit) = closure7(v11, v860)
    let v870 : unit = (fun () -> v869 (); v868) ()
    let v877 : string = $"{v130}"
    let v885 : unit = ()
    let v886 : (unit -> unit) = closure7(v11, v877)
    let v887 : unit = (fun () -> v886 (); v885) ()
    let v895 : string = "working_directory"
    let v896 : string = $"{v895}"
    let v904 : unit = ()
    let v905 : (unit -> unit) = closure7(v11, v896)
    let v906 : unit = (fun () -> v905 (); v904) ()
    let v913 : string = $"{v52}"
    let v921 : unit = ()
    let v922 : (unit -> unit) = closure7(v11, v913)
    let v923 : unit = (fun () -> v922 (); v921) ()
    (* run_target_args'
    let v933 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v934 : string = "format!(\"{:#?}\", $0)"
    let v935 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v934 
    let v936 : string = "fable_library_rust::String_::fromString($0)"
    let v937 : string = Fable.Core.RustInterop.emitRustExpr v935 v936 
    let _run_target_args'_v933 = v937 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v938 : string = "format!(\"{:#?}\", $0)"
    let v939 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v938 
    let v940 : string = "fable_library_rust::String_::fromString($0)"
    let v941 : string = Fable.Core.RustInterop.emitRustExpr v939 v940 
    let _run_target_args'_v933 = v941 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v942 : string = "format!(\"{:#?}\", $0)"
    let v943 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v942 
    let v944 : string = "fable_library_rust::String_::fromString($0)"
    let v945 : string = Fable.Core.RustInterop.emitRustExpr v943 v944 
    let _run_target_args'_v933 = v945 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v947 : string = $"%A{v9}"
    let _run_target_args'_v933 = v947 
    #endif
#if FABLE_COMPILER_PYTHON
    let v951 : string = $"%A{v9}"
    let _run_target_args'_v933 = v951 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v955 : string = $"%A{v9}"
    let _run_target_args'_v933 = v955 
    #endif
#else
    let v959 : string = $"%A{v9}"
    let _run_target_args'_v933 = v959 
    #endif
    let v962 : string = _run_target_args'_v933 
    let v972 : string = $"{v962}"
    let v980 : unit = ()
    let v981 : (unit -> unit) = closure7(v11, v972)
    let v982 : unit = (fun () -> v981 (); v980) ()
    let v990 : string = " }"
    let v991 : string = $"{v990}"
    let v999 : unit = ()
    let v1000 : (unit -> unit) = closure7(v11, v991)
    let v1001 : unit = (fun () -> v1000 (); v999) ()
    let v1008 : string = $"{v990}"
    let v1016 : unit = ()
    let v1017 : (unit -> unit) = closure7(v11, v1008)
    let v1018 : unit = (fun () -> v1017 (); v1016) ()
    let v1024 : string = v11.l0
    v1024
and method129 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method130(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v22 : string = " "
    let v23 : string = v6 + v22 
    let v27 : string = v23 + v7 
    let v32 : string = " #"
    let v33 : string = v27 + v32 
    let v37 : (int64 -> string) = _.ToString()
    let v38 : string = v37 v19
    let v42 : string = v33 + v38 
    let v46 : string = v42 + v22 
    let v51 : string = "runtime.execute_with_options / child error"
    let v52 : string = v46 + v51 
    let v57 : string = " / "
    let v58 : string = v52 + v57 
    let v62 : string = v58 + v18 
    method17(v62)
and closure44 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure2()
    let v26 : unit = (fun () -> v25 (); v24) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 4 >= v70
            v71
    let v73 : bool = v72 = false
    let v311 : US6 =
        if v73 then
            US6_1
        else
            let v89 : unit = ()
            let v90 : unit = (fun () -> v25 (); v89) ()
            let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : Mut4, v118 : int64 option) = TraceState.trace_state.Value
            let v131 : string = method7(v113, v114, v115, v116, v117, v118)
            let v132 : string = method80()
            let v134 : string = $"%A{v8}"
            let v137 : string = method129(v113, v114, v115, v116, v117, v118, v131, v132, v9, v7, v134, v0, v1, v2, v3, v4, v5, v6)
            let v152 : unit = ()
            let v153 : unit = (fun () -> v25 (); v152) ()
            let struct (v176 : Mut0, v177 : Mut1, v178 : Mut2, v179 : Mut3, v180 : Mut4, v181 : int64 option) = TraceState.trace_state.Value
            let v196 : unit = ()
            let v197 : (unit -> unit) = closure8(v176)
            let v198 : unit = (fun () -> v197 (); v196) ()
            let v201 : (string -> unit) = closure9()
            (* run_target_args'
            let v202 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v203 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v203 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v204 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v205 : string = v179.l0
            let v206 : bool = v205 = ""
            let v221 : string =
                if v206 then
                    v137
                else
                    let v207 : bool = v137 = ""
                    if v207 then
                        let v208 : string = v179.l0
                        v208
                    else
                        let v209 : string = v179.l0
                        let v212 : string = "\n"
                        let v213 : string = v209 + v212 
                        let v217 : string = v213 + v137 
                        v217
            (* run_target_args'
            let v226 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v227 
            let _run_target_args'_v226 = v228 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v229 : string = "&*$0"
            let v230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v229 
            let _run_target_args'_v226 = v230 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v231 : string = "&*$0"
            let v232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v231 
            let _run_target_args'_v226 = v232 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v238 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v238 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v242 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v242 
            #endif
#else
            let v246 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v246 
            #endif
            let v249 : Ref<Str> = _run_target_args'_v226 
            let v258 : string = $"$0.chars()"
            let v259 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v249 v258 
            let v260 : string = "$0"
            let v261 : _ = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "$0.collect::<Vec<_>>()"
            let v263 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v265 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v267 : bool = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v268 : string = "x"
            let v269 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v268 
            let v270 : string = "String::from_iter($0)"
            let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v269 v270 
            let v272 : string = "true; $0 }).collect::<Vec<_>>()"
            let v273 : bool = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let v274 : string = "_vec_map"
            let v275 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v274 
            let v276 : string = "$0.len()"
            let v277 : unativeint = Fable.Core.RustInterop.emitRustExpr v275 v276 
            let v283 : int32 = v277 |> int32 
            let v293 : string = ""
            let v294 : bool = v137 <> v293 
            let v298 : bool =
                if v294 then
                    let v297 : bool = v283 <= 1
                    v297
                else
                    false
            if v298 then
                v179.l0 <- v221
                ()
            else
                v179.l0 <- v293
                let v299 : string = "true; $0.into_iter().for_each(|x| { //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr v275 v299 
                let v301 : string = "x"
                let v302 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v301 
                let v303 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
                let v305 : string = $"true"
                let v306 : bool = Fable.Core.RustInterop.emitRustExpr () v305 
                let v307 : string = "true; }); //"
                let v308 : bool = Fable.Core.RustInterop.emitRustExpr () v307 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v201 v137
            #endif
#if FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#else
            v201 v137
            #endif
            // run_target_args' is_unit
            let v309 : (string -> unit) = v177.l0
            v309 v137
            US6_0(v176, v177, v178, v179, v180, v181)
    
    ()
and method131 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure45 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method132 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure45()
and closure46 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method133 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and method134 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and closure47 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method135 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure47()
and closure48 () (v0 : std_string_String) : US30 =
    US30_0(v0)
and method136 () : (std_string_String -> US30) =
    closure48()
and closure49 () (v0 : std_string_String) : US30 =
    US30_1(v0)
and method137 () : (std_string_String -> US30) =
    closure49()
and method139 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "trace'"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v63 : string =
        if v0 then
            let v61 : string = "true"
            v61
        else
            let v62 : string = "false"
            v62
    let v65 : string = $"{v63}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "e"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    (* run_target_args'
    let v140 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v141 : string = "format!(\"{:#?}\", $0)"
    let v142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v141 
    let v143 : string = "fable_library_rust::String_::fromString($0)"
    let v144 : string = Fable.Core.RustInterop.emitRustExpr v142 v143 
    let _run_target_args'_v140 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "format!(\"{:#?}\", $0)"
    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v145 
    let v147 : string = "fable_library_rust::String_::fromString($0)"
    let v148 : string = Fable.Core.RustInterop.emitRustExpr v146 v147 
    let _run_target_args'_v140 = v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : string = "format!(\"{:#?}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v149 
    let v151 : string = "fable_library_rust::String_::fromString($0)"
    let v152 : string = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let _run_target_args'_v140 = v152 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = $"%A{v1}"
    let _run_target_args'_v140 = v154 
    #endif
#if FABLE_COMPILER_PYTHON
    let v158 : string = $"%A{v1}"
    let _run_target_args'_v140 = v158 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v162 : string = $"%A{v1}"
    let _run_target_args'_v140 = v162 
    #endif
#else
    let v166 : string = $"%A{v1}"
    let _run_target_args'_v140 = v166 
    #endif
    let v169 : string = _run_target_args'_v140 
    let v179 : string = $"{v169}"
    let v187 : unit = ()
    let v188 : (unit -> unit) = closure7(v3, v179)
    let v189 : unit = (fun () -> v188 (); v187) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v206 : unit = ()
    let v207 : (unit -> unit) = closure7(v3, v198)
    let v208 : unit = (fun () -> v207 (); v206) ()
    let v214 : string = v3.l0
    v214
and method138 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method139(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "runtime.stdio_line"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure50 (v0 : bool, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method138(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method141 () : string =
    let v0 : string = method13()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method140 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method141()
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v41 : string = v37 + v8 
    let v46 : string = " / "
    let v47 : string = v41 + v46 
    let v51 : string = v47 + v9 
    method17(v51)
and closure51 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v301 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method83()
            let v124 : bool = v0 = ""
            let v127 : string =
                if v124 then
                    let v125 : string = ""
                    v125
                else
                    method140(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v16 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure52 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method142 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure52()
and method143 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure53 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US31 =
    US31_0(v0)
and method144 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US31) =
    closure53()
and method145 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure54 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US32 =
    US32_0(v0)
and method146 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US32) =
    closure54()
and method147 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure55 () (v0 : std_process_Output) : US33 =
    US33_0(v0)
and method148 () : (std_process_Output -> US33) =
    closure55()
and closure56 () (v0 : std_string_String) : US33 =
    US33_1(v0)
and method149 () : (std_string_String -> US33) =
    closure56()
and method150 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method130(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v22 : string = " "
    let v23 : string = v6 + v22 
    let v27 : string = v23 + v7 
    let v32 : string = " #"
    let v33 : string = v27 + v32 
    let v37 : (int64 -> string) = _.ToString()
    let v38 : string = v37 v19
    let v42 : string = v33 + v38 
    let v46 : string = v42 + v22 
    let v51 : string = "runtime.execute_with_options / output error"
    let v52 : string = v46 + v51 
    let v57 : string = " / "
    let v58 : string = v52 + v57 
    let v62 : string = v58 + v18 
    method17(v62)
and closure57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure2()
    let v26 : unit = (fun () -> v25 (); v24) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 4 >= v70
            v71
    let v73 : bool = v72 = false
    let v311 : US6 =
        if v73 then
            US6_1
        else
            let v89 : unit = ()
            let v90 : unit = (fun () -> v25 (); v89) ()
            let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : Mut4, v118 : int64 option) = TraceState.trace_state.Value
            let v131 : string = method7(v113, v114, v115, v116, v117, v118)
            let v132 : string = method80()
            let v134 : string = $"%A{v8}"
            let v137 : string = method150(v113, v114, v115, v116, v117, v118, v131, v132, v9, v7, v134, v0, v1, v2, v3, v4, v5, v6)
            let v152 : unit = ()
            let v153 : unit = (fun () -> v25 (); v152) ()
            let struct (v176 : Mut0, v177 : Mut1, v178 : Mut2, v179 : Mut3, v180 : Mut4, v181 : int64 option) = TraceState.trace_state.Value
            let v196 : unit = ()
            let v197 : (unit -> unit) = closure8(v176)
            let v198 : unit = (fun () -> v197 (); v196) ()
            let v201 : (string -> unit) = closure9()
            (* run_target_args'
            let v202 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v203 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v203 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v204 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v205 : string = v179.l0
            let v206 : bool = v205 = ""
            let v221 : string =
                if v206 then
                    v137
                else
                    let v207 : bool = v137 = ""
                    if v207 then
                        let v208 : string = v179.l0
                        v208
                    else
                        let v209 : string = v179.l0
                        let v212 : string = "\n"
                        let v213 : string = v209 + v212 
                        let v217 : string = v213 + v137 
                        v217
            (* run_target_args'
            let v226 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v227 
            let _run_target_args'_v226 = v228 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v229 : string = "&*$0"
            let v230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v229 
            let _run_target_args'_v226 = v230 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v231 : string = "&*$0"
            let v232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v231 
            let _run_target_args'_v226 = v232 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v238 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v238 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v242 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v242 
            #endif
#else
            let v246 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v246 
            #endif
            let v249 : Ref<Str> = _run_target_args'_v226 
            let v258 : string = $"$0.chars()"
            let v259 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v249 v258 
            let v260 : string = "$0"
            let v261 : _ = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "$0.collect::<Vec<_>>()"
            let v263 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v265 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v267 : bool = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v268 : string = "x"
            let v269 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v268 
            let v270 : string = "String::from_iter($0)"
            let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v269 v270 
            let v272 : string = "true; $0 }).collect::<Vec<_>>()"
            let v273 : bool = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let v274 : string = "_vec_map"
            let v275 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v274 
            let v276 : string = "$0.len()"
            let v277 : unativeint = Fable.Core.RustInterop.emitRustExpr v275 v276 
            let v283 : int32 = v277 |> int32 
            let v293 : string = ""
            let v294 : bool = v137 <> v293 
            let v298 : bool =
                if v294 then
                    let v297 : bool = v283 <= 1
                    v297
                else
                    false
            if v298 then
                v179.l0 <- v221
                ()
            else
                v179.l0 <- v293
                let v299 : string = "true; $0.into_iter().for_each(|x| { //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr v275 v299 
                let v301 : string = "x"
                let v302 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v301 
                let v303 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
                let v305 : string = $"true"
                let v306 : bool = Fable.Core.RustInterop.emitRustExpr () v305 
                let v307 : string = "true; }); //"
                let v308 : bool = Fable.Core.RustInterop.emitRustExpr () v307 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v201 v137
            #endif
#if FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#else
            v201 v137
            #endif
            // run_target_args' is_unit
            let v309 : (string -> unit) = v177.l0
            v309 v137
            US6_0(v176, v177, v178, v179, v180, v181)
    
    ()
and closure58 () (v0 : int32) : US34 =
    US34_0(v0)
and method151 () : (int32 -> US34) =
    closure58()
and method153 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "std_trace_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method152 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method153(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "runtime.execute_with_options / result"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure59 (v0 : int32, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 0 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method83()
            let v125 : int32 = v1.Length
            let v126 : string = method152(v105, v106, v107, v108, v109, v110, v123, v124, v0, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method157 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "file_name"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v0}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v106 : string = "arguments"
    let v107 : string = $"{v106}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v10, v107)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v124 : string = $"{v51}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v10, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v141 : string = $"%A{v1}"
    let v145 : string = $"{v141}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v10, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v162 : string = $"{v87}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v10, v162)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v180 : string = "options"
    let v181 : string = $"{v180}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v10, v181)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v198 : string = $"{v51}"
    let v206 : unit = ()
    let v207 : (unit -> unit) = closure7(v10, v198)
    let v208 : unit = (fun () -> v207 (); v206) ()
    let v215 : string = $"{v13}"
    let v223 : unit = ()
    let v224 : (unit -> unit) = closure7(v10, v215)
    let v225 : unit = (fun () -> v224 (); v223) ()
    let v233 : string = "command"
    let v234 : string = $"{v233}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v10, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v251 : string = $"{v51}"
    let v259 : unit = ()
    let v260 : (unit -> unit) = closure7(v10, v251)
    let v261 : unit = (fun () -> v260 (); v259) ()
    let v268 : string = $"{v2}"
    let v276 : unit = ()
    let v277 : (unit -> unit) = closure7(v10, v268)
    let v278 : unit = (fun () -> v277 (); v276) ()
    let v285 : string = $"{v87}"
    let v293 : unit = ()
    let v294 : (unit -> unit) = closure7(v10, v285)
    let v295 : unit = (fun () -> v294 (); v293) ()
    let v303 : string = "cancellation_token"
    let v304 : string = $"{v303}"
    let v312 : unit = ()
    let v313 : (unit -> unit) = closure7(v10, v304)
    let v314 : unit = (fun () -> v313 (); v312) ()
    let v321 : string = $"{v51}"
    let v329 : unit = ()
    let v330 : (unit -> unit) = closure7(v10, v321)
    let v331 : unit = (fun () -> v330 (); v329) ()
    (* run_target_args'
    let v341 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v342 : string = "format!(\"{:#?}\", $0)"
    let v343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v342 
    let v344 : string = "fable_library_rust::String_::fromString($0)"
    let v345 : string = Fable.Core.RustInterop.emitRustExpr v343 v344 
    let _run_target_args'_v341 = v345 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v346 : string = "format!(\"{:#?}\", $0)"
    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v346 
    let v348 : string = "fable_library_rust::String_::fromString($0)"
    let v349 : string = Fable.Core.RustInterop.emitRustExpr v347 v348 
    let _run_target_args'_v341 = v349 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v350 : string = "format!(\"{:#?}\", $0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v350 
    let v352 : string = "fable_library_rust::String_::fromString($0)"
    let v353 : string = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let _run_target_args'_v341 = v353 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v355 : string = $"%A{v3}"
    let _run_target_args'_v341 = v355 
    #endif
#if FABLE_COMPILER_PYTHON
    let v359 : string = $"%A{v3}"
    let _run_target_args'_v341 = v359 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v363 : string = $"%A{v3}"
    let _run_target_args'_v341 = v363 
    #endif
#else
    let v367 : string = $"%A{v3}"
    let _run_target_args'_v341 = v367 
    #endif
    let v370 : string = _run_target_args'_v341 
    let v380 : string = $"{v370}"
    let v388 : unit = ()
    let v389 : (unit -> unit) = closure7(v10, v380)
    let v390 : unit = (fun () -> v389 (); v388) ()
    let v397 : string = $"{v87}"
    let v405 : unit = ()
    let v406 : (unit -> unit) = closure7(v10, v397)
    let v407 : unit = (fun () -> v406 (); v405) ()
    let v415 : string = "environment_variables"
    let v416 : string = $"{v415}"
    let v424 : unit = ()
    let v425 : (unit -> unit) = closure7(v10, v416)
    let v426 : unit = (fun () -> v425 (); v424) ()
    let v433 : string = $"{v51}"
    let v441 : unit = ()
    let v442 : (unit -> unit) = closure7(v10, v433)
    let v443 : unit = (fun () -> v442 (); v441) ()
    let v450 : string = $"%A{v4}"
    let v454 : string = $"{v450}"
    let v462 : unit = ()
    let v463 : (unit -> unit) = closure7(v10, v454)
    let v464 : unit = (fun () -> v463 (); v462) ()
    let v471 : string = $"{v87}"
    let v479 : unit = ()
    let v480 : (unit -> unit) = closure7(v10, v471)
    let v481 : unit = (fun () -> v480 (); v479) ()
    let v489 : string = "on_line"
    let v490 : string = $"{v489}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v10, v490)
    let v500 : unit = (fun () -> v499 (); v498) ()
    let v507 : string = $"{v51}"
    let v515 : unit = ()
    let v516 : (unit -> unit) = closure7(v10, v507)
    let v517 : unit = (fun () -> v516 (); v515) ()
    (* run_target_args'
    let v527 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v528 : string = "format!(\"{:#?}\", $0)"
    let v529 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v528 
    let v530 : string = "fable_library_rust::String_::fromString($0)"
    let v531 : string = Fable.Core.RustInterop.emitRustExpr v529 v530 
    let _run_target_args'_v527 = v531 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v532 : string = "format!(\"{:#?}\", $0)"
    let v533 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v532 
    let v534 : string = "fable_library_rust::String_::fromString($0)"
    let v535 : string = Fable.Core.RustInterop.emitRustExpr v533 v534 
    let _run_target_args'_v527 = v535 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v536 : string = "format!(\"{:#?}\", $0)"
    let v537 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v536 
    let v538 : string = "fable_library_rust::String_::fromString($0)"
    let v539 : string = Fable.Core.RustInterop.emitRustExpr v537 v538 
    let _run_target_args'_v527 = v539 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v541 : string = $"%A{v5}"
    let _run_target_args'_v527 = v541 
    #endif
#if FABLE_COMPILER_PYTHON
    let v545 : string = $"%A{v5}"
    let _run_target_args'_v527 = v545 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v549 : string = $"%A{v5}"
    let _run_target_args'_v527 = v549 
    #endif
#else
    let v553 : string = $"%A{v5}"
    let _run_target_args'_v527 = v553 
    #endif
    let v556 : string = _run_target_args'_v527 
    let v566 : string = $"{v556}"
    let v574 : unit = ()
    let v575 : (unit -> unit) = closure7(v10, v566)
    let v576 : unit = (fun () -> v575 (); v574) ()
    let v583 : string = $"{v87}"
    let v591 : unit = ()
    let v592 : (unit -> unit) = closure7(v10, v583)
    let v593 : unit = (fun () -> v592 (); v591) ()
    let v601 : string = "stdin"
    let v602 : string = $"{v601}"
    let v610 : unit = ()
    let v611 : (unit -> unit) = closure7(v10, v602)
    let v612 : unit = (fun () -> v611 (); v610) ()
    let v619 : string = $"{v51}"
    let v627 : unit = ()
    let v628 : (unit -> unit) = closure7(v10, v619)
    let v629 : unit = (fun () -> v628 (); v627) ()
    (* run_target_args'
    let v639 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v640 : string = "format!(\"{:#?}\", $0)"
    let v641 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v640 
    let v642 : string = "fable_library_rust::String_::fromString($0)"
    let v643 : string = Fable.Core.RustInterop.emitRustExpr v641 v642 
    let _run_target_args'_v639 = v643 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v644 : string = "format!(\"{:#?}\", $0)"
    let v645 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v644 
    let v646 : string = "fable_library_rust::String_::fromString($0)"
    let v647 : string = Fable.Core.RustInterop.emitRustExpr v645 v646 
    let _run_target_args'_v639 = v647 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v648 : string = "format!(\"{:#?}\", $0)"
    let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v648 
    let v650 : string = "fable_library_rust::String_::fromString($0)"
    let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
    let _run_target_args'_v639 = v651 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v653 : string = $"%A{v6}"
    let _run_target_args'_v639 = v653 
    #endif
#if FABLE_COMPILER_PYTHON
    let v657 : string = $"%A{v6}"
    let _run_target_args'_v639 = v657 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v661 : string = $"%A{v6}"
    let _run_target_args'_v639 = v661 
    #endif
#else
    let v665 : string = $"%A{v6}"
    let _run_target_args'_v639 = v665 
    #endif
    let v668 : string = _run_target_args'_v639 
    let v678 : string = $"{v668}"
    let v686 : unit = ()
    let v687 : (unit -> unit) = closure7(v10, v678)
    let v688 : unit = (fun () -> v687 (); v686) ()
    let v695 : string = $"{v87}"
    let v703 : unit = ()
    let v704 : (unit -> unit) = closure7(v10, v695)
    let v705 : unit = (fun () -> v704 (); v703) ()
    let v713 : string = "trace"
    let v714 : string = $"{v713}"
    let v722 : unit = ()
    let v723 : (unit -> unit) = closure7(v10, v714)
    let v724 : unit = (fun () -> v723 (); v722) ()
    let v731 : string = $"{v51}"
    let v739 : unit = ()
    let v740 : (unit -> unit) = closure7(v10, v731)
    let v741 : unit = (fun () -> v740 (); v739) ()
    let v749 : string =
        if v7 then
            let v747 : string = "true"
            v747
        else
            let v748 : string = "false"
            v748
    let v751 : string = $"{v749}"
    let v759 : unit = ()
    let v760 : (unit -> unit) = closure7(v10, v751)
    let v761 : unit = (fun () -> v760 (); v759) ()
    let v768 : string = $"{v87}"
    let v776 : unit = ()
    let v777 : (unit -> unit) = closure7(v10, v768)
    let v778 : unit = (fun () -> v777 (); v776) ()
    let v786 : string = "working_directory"
    let v787 : string = $"{v786}"
    let v795 : unit = ()
    let v796 : (unit -> unit) = closure7(v10, v787)
    let v797 : unit = (fun () -> v796 (); v795) ()
    let v804 : string = $"{v51}"
    let v812 : unit = ()
    let v813 : (unit -> unit) = closure7(v10, v804)
    let v814 : unit = (fun () -> v813 (); v812) ()
    (* run_target_args'
    let v824 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v825 : string = "format!(\"{:#?}\", $0)"
    let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v825 
    let v827 : string = "fable_library_rust::String_::fromString($0)"
    let v828 : string = Fable.Core.RustInterop.emitRustExpr v826 v827 
    let _run_target_args'_v824 = v828 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v829 : string = "format!(\"{:#?}\", $0)"
    let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v829 
    let v831 : string = "fable_library_rust::String_::fromString($0)"
    let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
    let _run_target_args'_v824 = v832 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v833 : string = "format!(\"{:#?}\", $0)"
    let v834 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v833 
    let v835 : string = "fable_library_rust::String_::fromString($0)"
    let v836 : string = Fable.Core.RustInterop.emitRustExpr v834 v835 
    let _run_target_args'_v824 = v836 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v838 : string = $"%A{v8}"
    let _run_target_args'_v824 = v838 
    #endif
#if FABLE_COMPILER_PYTHON
    let v842 : string = $"%A{v8}"
    let _run_target_args'_v824 = v842 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v846 : string = $"%A{v8}"
    let _run_target_args'_v824 = v846 
    #endif
#else
    let v850 : string = $"%A{v8}"
    let _run_target_args'_v824 = v850 
    #endif
    let v853 : string = _run_target_args'_v824 
    let v863 : string = $"{v853}"
    let v871 : unit = ()
    let v872 : (unit -> unit) = closure7(v10, v863)
    let v873 : unit = (fun () -> v872 (); v871) ()
    let v881 : string = " }"
    let v882 : string = $"{v881}"
    let v890 : unit = ()
    let v891 : (unit -> unit) = closure7(v10, v882)
    let v892 : unit = (fun () -> v891 (); v890) ()
    let v899 : string = $"{v881}"
    let v907 : unit = ()
    let v908 : (unit -> unit) = closure7(v10, v899)
    let v909 : unit = (fun () -> v908 (); v907) ()
    let v915 : string = v10.l0
    v915
and method156 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method157(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v21 : string = " "
    let v22 : string = v6 + v21 
    let v26 : string = v22 + v7 
    let v31 : string = " #"
    let v32 : string = v26 + v31 
    let v36 : (int64 -> string) = _.ToString()
    let v37 : string = v36 v18
    let v41 : string = v32 + v37 
    let v45 : string = v41 + v21 
    let v50 : string = "runtime.execute_with_options_async"
    let v51 : string = v45 + v50 
    let v56 : string = " / "
    let v57 : string = v51 + v56 
    let v61 : string = v57 + v17 
    method17(v61)
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure2()
    let v25 : unit = (fun () -> v24 (); v23) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
    let v66 : US0 = v52.l0
    let v67 : bool = v50.l0
    let v68 : bool = v67 = false
    let v71 : bool =
        if v68 then
            false
        else
            let v69 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v66
            let v70 : bool = 1 >= v69
            v70
    let v72 : bool = v71 = false
    let v306 : US6 =
        if v72 then
            US6_1
        else
            let v88 : unit = ()
            let v89 : unit = (fun () -> v24 (); v88) ()
            let struct (v112 : Mut0, v113 : Mut1, v114 : Mut2, v115 : Mut3, v116 : Mut4, v117 : int64 option) = TraceState.trace_state.Value
            let v130 : string = method7(v112, v113, v114, v115, v116, v117)
            let v131 : string = method11()
            let v132 : string = method156(v112, v113, v114, v115, v116, v117, v130, v131, v8, v7, v0, v1, v2, v3, v4, v5, v6)
            let v147 : unit = ()
            let v148 : unit = (fun () -> v24 (); v147) ()
            let struct (v171 : Mut0, v172 : Mut1, v173 : Mut2, v174 : Mut3, v175 : Mut4, v176 : int64 option) = TraceState.trace_state.Value
            let v191 : unit = ()
            let v192 : (unit -> unit) = closure8(v171)
            let v193 : unit = (fun () -> v192 (); v191) ()
            let v196 : (string -> unit) = closure9()
            (* run_target_args'
            let v197 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v198 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v132 v198 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v199 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v132 v199 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v200 : string = v174.l0
            let v201 : bool = v200 = ""
            let v216 : string =
                if v201 then
                    v132
                else
                    let v202 : bool = v132 = ""
                    if v202 then
                        let v203 : string = v174.l0
                        v203
                    else
                        let v204 : string = v174.l0
                        let v207 : string = "\n"
                        let v208 : string = v204 + v207 
                        let v212 : string = v208 + v132 
                        v212
            (* run_target_args'
            let v221 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v216 v222 
            let _run_target_args'_v221 = v223 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v216 v224 
            let _run_target_args'_v221 = v225 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v226 : string = "&*$0"
            let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v216 v226 
            let _run_target_args'_v221 = v227 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v229 : Ref<Str> = v216 |> unbox<Ref<Str>>
            let _run_target_args'_v221 = v229 
            #endif
#if FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v216 |> unbox<Ref<Str>>
            let _run_target_args'_v221 = v233 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v237 : Ref<Str> = v216 |> unbox<Ref<Str>>
            let _run_target_args'_v221 = v237 
            #endif
#else
            let v241 : Ref<Str> = v216 |> unbox<Ref<Str>>
            let _run_target_args'_v221 = v241 
            #endif
            let v244 : Ref<Str> = _run_target_args'_v221 
            let v253 : string = $"$0.chars()"
            let v254 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v244 v253 
            let v255 : string = "$0"
            let v256 : _ = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "$0.collect::<Vec<_>>()"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v260 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "x"
            let v264 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "String::from_iter($0)"
            let v266 : std_string_String = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "true; $0 }).collect::<Vec<_>>()"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "_vec_map"
            let v270 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "$0.len()"
            let v272 : unativeint = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v278 : int32 = v272 |> int32 
            let v288 : string = ""
            let v289 : bool = v132 <> v288 
            let v293 : bool =
                if v289 then
                    let v292 : bool = v278 <= 1
                    v292
                else
                    false
            if v293 then
                v174.l0 <- v216
                ()
            else
                v174.l0 <- v288
                let v294 : string = "true; $0.into_iter().for_each(|x| { //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v270 v294 
                let v296 : string = "x"
                let v297 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr v297 v298 
                let v300 : string = $"true"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr () v300 
                let v302 : string = "true; }); //"
                let v303 : bool = Fable.Core.RustInterop.emitRustExpr () v302 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v196 v132
            #endif
#if FABLE_COMPILER_PYTHON
            v196 v132
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v196 v132
            #endif
#else
            v196 v132
            #endif
            // run_target_args' is_unit
            let v304 : (string -> unit) = v172.l0
            v304 v132
            US6_0(v171, v172, v173, v174, v175, v176)
    
    ()
and method158 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method161 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure62 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US35 =
    US35_0(v0)
and method162 () : ((struct (int32 * string * bool) -> Async<unit>) -> US35) =
    closure62()
and method163 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure63 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v301 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method83()
            let v124 : bool = v0 = ""
            let v127 : string =
                if v124 then
                    let v125 : string = ""
                    v125
                else
                    method140(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v16 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method160 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v8959 : string = method161(v10)
            let v8961 : string = null |> unbox<string>
            let v8964 : bool = v8959 = v8961
            let v8965 : bool = v8964 <> true
            if v8965 then
                let v8968 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method162()
                let v8969 : US35 option = v3 |> Option.map v8968 
                let v8989 : US35 = US35_1
                let v8990 : US35 = v8969 |> Option.defaultValue v8989 
                match v8990 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v8994) -> (* Some *)
                    let v8995 : int32 = method163(v7)
                    let v8996 : Async<unit> = v8994 struct (v8995, v8959, v9)
                    do! v8996 
                    ()
                let v8999 : string =
                    if v9 then
                        let v8997 : string = $"! {v8959}"
                        v8997
                    else
                        let v8998 : string = $"> {v8959}"
                        v8998
                if v5 then
                    let v9314 : unit = ()
                    let v9315 : (unit -> unit) = closure63(v8999)
                    let v9316 : unit = (fun () -> v9315 (); v9314) ()
                    ()
                else
                    let v9635 : unit = ()
                    let v9636 : (unit -> unit) = closure10(v8999)
                    let v9637 : unit = (fun () -> v9636 (); v9635) ()
                    ()
                let v9641 : string =
                    if v9 then
                        let v9639 : string = "\u001b[7;4m"
                        v9639
                    else
                        let v9640 : string = ""
                        v9640
                let v9644 : string =
                    if v9 then
                        let v9642 : string = "\u001b[0m"
                        v9642
                    else
                        let v9643 : string = ""
                        v9643
                let v9645 : string = $"{v9641}{v8959}{v9644}"
                (* run_target_args'
                let v9646 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v9647 : (string -> unit) = v8.Push
                v9647 v9645
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v18581 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v18581 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18583 : unit = ()
    let _let'_v18583 =
        async {
            let v27513 : string = method161(v10)
            let v27515 : string = null |> unbox<string>
            let v27518 : bool = v27513 = v27515
            let v27519 : bool = v27518 <> true
            if v27519 then
                let v27522 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method162()
                let v27523 : US35 option = v3 |> Option.map v27522 
                let v27543 : US35 = US35_1
                let v27544 : US35 = v27523 |> Option.defaultValue v27543 
                match v27544 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v27548) -> (* Some *)
                    let v27549 : int32 = method163(v7)
                    let v27550 : Async<unit> = v27548 struct (v27549, v27513, v9)
                    do! v27550 
                    ()
                let v27553 : string =
                    if v9 then
                        let v27551 : string = $"! {v27513}"
                        v27551
                    else
                        let v27552 : string = $"> {v27513}"
                        v27552
                if v5 then
                    let v27868 : unit = ()
                    let v27869 : (unit -> unit) = closure63(v27553)
                    let v27870 : unit = (fun () -> v27869 (); v27868) ()
                    ()
                else
                    let v28189 : unit = ()
                    let v28190 : (unit -> unit) = closure10(v27553)
                    let v28191 : unit = (fun () -> v28190 (); v28189) ()
                    ()
                let v28195 : string =
                    if v9 then
                        let v28193 : string = "\u001b[7;4m"
                        v28193
                    else
                        let v28194 : string = ""
                        v28194
                let v28198 : string =
                    if v9 then
                        let v28196 : string = "\u001b[0m"
                        v28196
                    else
                        let v28197 : string = ""
                        v28197
                let v28199 : string = $"{v28195}{v27513}{v28198}"
                (* run_target_args'
                let v28200 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v28201 : (string -> unit) = v8.Push
                v28201 v28199
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v37135 : Async<unit> = _let'_v18583 
    let _run_target_args'_v15 = v37135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v37137 : unit = ()
    let _let'_v37137 =
        async {
            let v46067 : string = method161(v10)
            let v46069 : string = null |> unbox<string>
            let v46072 : bool = v46067 = v46069
            let v46073 : bool = v46072 <> true
            if v46073 then
                let v46076 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method162()
                let v46077 : US35 option = v3 |> Option.map v46076 
                let v46097 : US35 = US35_1
                let v46098 : US35 = v46077 |> Option.defaultValue v46097 
                match v46098 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v46102) -> (* Some *)
                    let v46103 : int32 = method163(v7)
                    let v46104 : Async<unit> = v46102 struct (v46103, v46067, v9)
                    do! v46104 
                    ()
                let v46107 : string =
                    if v9 then
                        let v46105 : string = $"! {v46067}"
                        v46105
                    else
                        let v46106 : string = $"> {v46067}"
                        v46106
                if v5 then
                    let v46422 : unit = ()
                    let v46423 : (unit -> unit) = closure63(v46107)
                    let v46424 : unit = (fun () -> v46423 (); v46422) ()
                    ()
                else
                    let v46743 : unit = ()
                    let v46744 : (unit -> unit) = closure10(v46107)
                    let v46745 : unit = (fun () -> v46744 (); v46743) ()
                    ()
                let v46749 : string =
                    if v9 then
                        let v46747 : string = "\u001b[7;4m"
                        v46747
                    else
                        let v46748 : string = ""
                        v46748
                let v46752 : string =
                    if v9 then
                        let v46750 : string = "\u001b[0m"
                        v46750
                    else
                        let v46751 : string = ""
                        v46751
                let v46753 : string = $"{v46749}{v46067}{v46752}"
                (* run_target_args'
                let v46754 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v46755 : (string -> unit) = v8.Push
                v46755 v46753
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v55689 : Async<unit> = _let'_v37137 
    let _run_target_args'_v15 = v55689 
    #endif
#else
    let v55691 : unit = ()
    let _let'_v55691 =
        async {
            let v64621 : string = method161(v10)
            let v64623 : string = null |> unbox<string>
            let v64626 : bool = v64621 = v64623
            let v64627 : bool = v64626 <> true
            if v64627 then
                let v64630 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method162()
                let v64631 : US35 option = v3 |> Option.map v64630 
                let v64651 : US35 = US35_1
                let v64652 : US35 = v64631 |> Option.defaultValue v64651 
                match v64652 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v64656) -> (* Some *)
                    let v64657 : int32 = method163(v7)
                    let v64658 : Async<unit> = v64656 struct (v64657, v64621, v9)
                    do! v64658 
                    ()
                let v64661 : string =
                    if v9 then
                        let v64659 : string = $"! {v64621}"
                        v64659
                    else
                        let v64660 : string = $"> {v64621}"
                        v64660
                if v5 then
                    let v64976 : unit = ()
                    let v64977 : (unit -> unit) = closure63(v64661)
                    let v64978 : unit = (fun () -> v64977 (); v64976) ()
                    ()
                else
                    let v65297 : unit = ()
                    let v65298 : (unit -> unit) = closure10(v64661)
                    let v65299 : unit = (fun () -> v65298 (); v65297) ()
                    ()
                let v65303 : string =
                    if v9 then
                        let v65301 : string = "\u001b[7;4m"
                        v65301
                    else
                        let v65302 : string = ""
                        v65302
                let v65306 : string =
                    if v9 then
                        let v65304 : string = "\u001b[0m"
                        v65304
                    else
                        let v65305 : string = ""
                        v65305
                let v65307 : string = $"{v65303}{v64621}{v65306}"
                (* run_target_args'
                let v65308 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v65309 : (string -> unit) = v8.Push
                v65309 v65307
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v74243 : Async<unit> = _let'_v55691 
    let _run_target_args'_v15 = v74243 
    #endif
    let v74244 : Async<unit> = _run_target_args'_v15 
    v74244
and method159 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method160(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method159(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure64 () (v0 : System.Threading.CancellationToken) : US36 =
    US36_0(v0)
and method164 () : (System.Threading.CancellationToken -> US36) =
    closure64()
and method165 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v598 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v600 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v600 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v604 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v604 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v608 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v608 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v612 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v612 
            #endif
#if FABLE_COMPILER_PYTHON
            let v616 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v616 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v620 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v620 
            #endif
#else
            let v623 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v623 = v623 
            let v624 : System.Threading.CancellationToken = v623 
            let v625 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v626 : (System.Threading.CancellationToken []) = [|v624; v625; v0|]
            let v627 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v628 : System.Threading.CancellationTokenSource = v627 v626
            let v629 : System.Threading.CancellationToken = v628.Token
            return v629 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1210 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v1210 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1212 : unit = ()
    let _let'_v1212 =
        async {
            (* run_target_args'
            let v1791 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1793 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1793 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1797 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1797 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1801 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1801 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1805 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1805 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1809 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1809 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1813 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1813 
            #endif
#else
            let v1816 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1816 = v1816 
            let v1817 : System.Threading.CancellationToken = v1816 
            let v1818 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1819 : (System.Threading.CancellationToken []) = [|v1817; v1818; v0|]
            let v1820 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1821 : System.Threading.CancellationTokenSource = v1820 v1819
            let v1822 : System.Threading.CancellationToken = v1821.Token
            return v1822 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2403 : Async<System.Threading.CancellationToken> = _let'_v1212 
    let _run_target_args'_v5 = v2403 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2405 : unit = ()
    let _let'_v2405 =
        async {
            (* run_target_args'
            let v2984 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2986 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2986 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2990 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2990 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2994 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2994 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2998 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2998 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3002 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3002 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3006 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3006 
            #endif
#else
            let v3009 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v3009 = v3009 
            let v3010 : System.Threading.CancellationToken = v3009 
            let v3011 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v3012 : (System.Threading.CancellationToken []) = [|v3010; v3011; v0|]
            let v3013 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v3014 : System.Threading.CancellationTokenSource = v3013 v3012
            let v3015 : System.Threading.CancellationToken = v3014.Token
            return v3015 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3596 : Async<System.Threading.CancellationToken> = _let'_v2405 
    let _run_target_args'_v5 = v3596 
    #endif
#else
    let v3598 : unit = ()
    let _let'_v3598 =
        async {
            (* run_target_args'
            let v4177 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4179 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4179 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4183 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4183 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4187 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4187 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4191 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4191 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4195 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4195 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4199 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4199 
            #endif
#else
            let v4202 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v4202 = v4202 
            let v4203 : System.Threading.CancellationToken = v4202 
            let v4204 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v4205 : (System.Threading.CancellationToken []) = [|v4203; v4204; v0|]
            let v4206 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v4207 : System.Threading.CancellationTokenSource = v4206 v4205
            let v4208 : System.Threading.CancellationToken = v4207.Token
            return v4208 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4789 : Async<System.Threading.CancellationToken> = _let'_v3598 
    let _run_target_args'_v5 = v4789 
    #endif
    let v4790 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v4790
and method166 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method167 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method166(v0)
    let v2 : bool = v1 = false
    if v2 then
        method167(v0)
and method170 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "ex"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "format!(\"{:#?}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v65 
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _run_target_args'_v64 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v64 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v0}"
    let _run_target_args'_v64 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : string = $"%A{v0}"
    let _run_target_args'_v64 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v86 : string = $"%A{v0}"
    let _run_target_args'_v64 = v86 
    #endif
#else
    let v90 : string = $"%A{v0}"
    let _run_target_args'_v64 = v90 
    #endif
    let v93 : string = _run_target_args'_v64 
    let v103 : string = $"{v93}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v2, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v2, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v138 : string = v2.l0
    v138
and method169 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method170(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure66 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 3 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method41()
            let v124 : string = method169(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method168 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v30716 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30718 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30718 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30722 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30722 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30726 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30726 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30730 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30730 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30734 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30734 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30738 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30738 
                #endif
#else
                let v30741 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v30716 = v30741 
                #endif
                let v30742 : System.Threading.Tasks.Task = _run_target_args'_v30716 
                (* run_target_args'
                let v30755 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30757 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v30755 = v30757 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30761 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v30755 = v30761 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30765 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v30755 = v30765 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30768 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30769 : Async<unit> = v30768 v30742
                let _run_target_args'_v30755 = v30769 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30770 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30771 : Async<unit> = v30770 v30742
                let _run_target_args'_v30755 = v30771 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30772 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30773 : Async<unit> = v30772 v30742
                let _run_target_args'_v30755 = v30773 
                #endif
#else
                let v30774 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30775 : Async<unit> = v30774 v30742
                let _run_target_args'_v30755 = v30775 
                #endif
                let v30776 : Async<unit> = _run_target_args'_v30755 
                do! v30776 
                (* run_target_args'
                let v30789 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30791 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30791 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30795 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30795 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30799 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30799 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30803 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30803 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30807 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30807 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30811 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30811 
                #endif
#else
                let v30814 : int32 = v0.ExitCode
                let _run_target_args'_v30789 = v30814 
                #endif
                let v30815 : int32 = _run_target_args'_v30789 
                return v30815 
                (* indent
                ()
            indent *)
            with ex ->
                let v31604 : exn = ex
                (* run_target_args'
                let v31609 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v31611 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31611 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v31615 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v31619 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31619 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v31623 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31623 
                #endif
#if FABLE_COMPILER_PYTHON
                let v31627 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31627 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v31631 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31631 
                #endif
#else
                let v31634 : string = $"{v31604.GetType ()}: {v31604.Message}"
                let _run_target_args'_v31609 = v31634 
                #endif
                let v31635 : string = _run_target_args'_v31609 
                (* run_target_args'
                let v31644 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v31645 : (string -> unit) = v1.Push
                v31645 v31635
                #endif
                // run_target_args' is_unit
                let v31647 : System.Threading.Tasks.TaskCanceledException = v31604 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v31961 : unit = ()
                let v31962 : (unit -> unit) = closure66(v31647)
                let v31963 : unit = (fun () -> v31962 (); v31961) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v63528 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v63528 
    #endif
#if FABLE_COMPILER_PYTHON
    let v63530 : unit = ()
    let _let'_v63530 =
        async {
            try
                (* run_target_args'
                let v94225 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94227 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94227 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94231 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94231 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94235 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94235 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94239 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94239 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94243 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94243 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94247 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94247 
                #endif
#else
                let v94250 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v94225 = v94250 
                #endif
                let v94251 : System.Threading.Tasks.Task = _run_target_args'_v94225 
                (* run_target_args'
                let v94264 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94266 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v94264 = v94266 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94270 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v94264 = v94270 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94274 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v94264 = v94274 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94277 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94278 : Async<unit> = v94277 v94251
                let _run_target_args'_v94264 = v94278 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94279 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94280 : Async<unit> = v94279 v94251
                let _run_target_args'_v94264 = v94280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94281 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94282 : Async<unit> = v94281 v94251
                let _run_target_args'_v94264 = v94282 
                #endif
#else
                let v94283 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94284 : Async<unit> = v94283 v94251
                let _run_target_args'_v94264 = v94284 
                #endif
                let v94285 : Async<unit> = _run_target_args'_v94264 
                do! v94285 
                (* run_target_args'
                let v94298 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94300 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94300 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94304 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94304 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94308 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94308 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94312 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94312 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94316 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94316 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94320 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94320 
                #endif
#else
                let v94323 : int32 = v0.ExitCode
                let _run_target_args'_v94298 = v94323 
                #endif
                let v94324 : int32 = _run_target_args'_v94298 
                return v94324 
                (* indent
                ()
            indent *)
            with ex ->
                let v95113 : exn = ex
                (* run_target_args'
                let v95118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v95120 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v95124 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95124 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v95128 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95128 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v95132 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95132 
                #endif
#if FABLE_COMPILER_PYTHON
                let v95136 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95136 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v95140 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95140 
                #endif
#else
                let v95143 : string = $"{v95113.GetType ()}: {v95113.Message}"
                let _run_target_args'_v95118 = v95143 
                #endif
                let v95144 : string = _run_target_args'_v95118 
                (* run_target_args'
                let v95153 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v95154 : (string -> unit) = v1.Push
                v95154 v95144
                #endif
                // run_target_args' is_unit
                let v95156 : System.Threading.Tasks.TaskCanceledException = v95113 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v95470 : unit = ()
                let v95471 : (unit -> unit) = closure66(v95156)
                let v95472 : unit = (fun () -> v95471 (); v95470) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v127037 : Async<int32> = _let'_v63530 
    let _run_target_args'_v7 = v127037 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127039 : unit = ()
    let _let'_v127039 =
        async {
            try
                (* run_target_args'
                let v157734 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v157736 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157736 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v157740 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157740 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v157744 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157744 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v157748 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157748 
                #endif
#if FABLE_COMPILER_PYTHON
                let v157752 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157752 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v157756 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157756 
                #endif
#else
                let v157759 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v157734 = v157759 
                #endif
                let v157760 : System.Threading.Tasks.Task = _run_target_args'_v157734 
                (* run_target_args'
                let v157773 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v157775 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v157773 = v157775 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v157779 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v157773 = v157779 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v157783 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v157773 = v157783 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v157786 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157787 : Async<unit> = v157786 v157760
                let _run_target_args'_v157773 = v157787 
                #endif
#if FABLE_COMPILER_PYTHON
                let v157788 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157789 : Async<unit> = v157788 v157760
                let _run_target_args'_v157773 = v157789 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v157790 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157791 : Async<unit> = v157790 v157760
                let _run_target_args'_v157773 = v157791 
                #endif
#else
                let v157792 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157793 : Async<unit> = v157792 v157760
                let _run_target_args'_v157773 = v157793 
                #endif
                let v157794 : Async<unit> = _run_target_args'_v157773 
                do! v157794 
                (* run_target_args'
                let v157807 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v157809 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157809 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v157813 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157813 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v157817 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157817 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v157821 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157821 
                #endif
#if FABLE_COMPILER_PYTHON
                let v157825 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157825 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v157829 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157829 
                #endif
#else
                let v157832 : int32 = v0.ExitCode
                let _run_target_args'_v157807 = v157832 
                #endif
                let v157833 : int32 = _run_target_args'_v157807 
                return v157833 
                (* indent
                ()
            indent *)
            with ex ->
                let v158622 : exn = ex
                (* run_target_args'
                let v158627 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v158629 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158629 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v158633 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158633 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v158637 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158637 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v158641 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158641 
                #endif
#if FABLE_COMPILER_PYTHON
                let v158645 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158645 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v158649 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158649 
                #endif
#else
                let v158652 : string = $"{v158622.GetType ()}: {v158622.Message}"
                let _run_target_args'_v158627 = v158652 
                #endif
                let v158653 : string = _run_target_args'_v158627 
                (* run_target_args'
                let v158662 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v158663 : (string -> unit) = v1.Push
                v158663 v158653
                #endif
                // run_target_args' is_unit
                let v158665 : System.Threading.Tasks.TaskCanceledException = v158622 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v158979 : unit = ()
                let v158980 : (unit -> unit) = closure66(v158665)
                let v158981 : unit = (fun () -> v158980 (); v158979) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v190546 : Async<int32> = _let'_v127039 
    let _run_target_args'_v7 = v190546 
    #endif
#else
    let v190548 : unit = ()
    let _let'_v190548 =
        async {
            try
                (* run_target_args'
                let v221243 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v221245 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221245 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v221249 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221249 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v221253 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221253 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v221257 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221257 
                #endif
#if FABLE_COMPILER_PYTHON
                let v221261 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221261 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v221265 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221265 
                #endif
#else
                let v221268 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v221243 = v221268 
                #endif
                let v221269 : System.Threading.Tasks.Task = _run_target_args'_v221243 
                (* run_target_args'
                let v221282 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v221284 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v221282 = v221284 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v221288 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v221282 = v221288 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v221292 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v221282 = v221292 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v221295 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221296 : Async<unit> = v221295 v221269
                let _run_target_args'_v221282 = v221296 
                #endif
#if FABLE_COMPILER_PYTHON
                let v221297 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221298 : Async<unit> = v221297 v221269
                let _run_target_args'_v221282 = v221298 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v221299 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221300 : Async<unit> = v221299 v221269
                let _run_target_args'_v221282 = v221300 
                #endif
#else
                let v221301 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221302 : Async<unit> = v221301 v221269
                let _run_target_args'_v221282 = v221302 
                #endif
                let v221303 : Async<unit> = _run_target_args'_v221282 
                do! v221303 
                (* run_target_args'
                let v221316 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v221318 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221318 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v221322 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221322 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v221326 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221326 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v221330 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221330 
                #endif
#if FABLE_COMPILER_PYTHON
                let v221334 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221334 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v221338 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221338 
                #endif
#else
                let v221341 : int32 = v0.ExitCode
                let _run_target_args'_v221316 = v221341 
                #endif
                let v221342 : int32 = _run_target_args'_v221316 
                return v221342 
                (* indent
                ()
            indent *)
            with ex ->
                let v222131 : exn = ex
                (* run_target_args'
                let v222136 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v222138 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222138 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v222142 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222142 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v222146 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222146 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v222150 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222150 
                #endif
#if FABLE_COMPILER_PYTHON
                let v222154 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222154 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v222158 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222158 
                #endif
#else
                let v222161 : string = $"{v222131.GetType ()}: {v222131.Message}"
                let _run_target_args'_v222136 = v222161 
                #endif
                let v222162 : string = _run_target_args'_v222136 
                (* run_target_args'
                let v222171 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v222172 : (string -> unit) = v1.Push
                v222172 v222162
                #endif
                // run_target_args' is_unit
                let v222174 : System.Threading.Tasks.TaskCanceledException = v222131 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v222488 : unit = ()
                let v222489 : (unit -> unit) = closure66(v222174)
                let v222490 : unit = (fun () -> v222489 (); v222488) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v254055 : Async<int32> = _let'_v190548 
    let _run_target_args'_v7 = v254055 
    #endif
    let v254056 : Async<int32> = _run_target_args'_v7 
    v254056
and method172 (v0 : int32, v1 : int32, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "exit_code"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v72 : string = $"{v0}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v10, v72)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v90 : string = "; "
    let v91 : string = $"{v90}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v10, v91)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v109 : string = "output_length"
    let v110 : string = $"{v109}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v10, v110)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v127 : string = $"{v51}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v10, v127)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v147 : string = $"{v1}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v10, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v90}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v10, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "options"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v10, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v51}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v10, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v13}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v10, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v235 : string = "command"
    let v236 : string = $"{v235}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v10, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v253 : string = $"{v51}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v10, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v2}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v10, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v90}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v10, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = "cancellation_token"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v10, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v323 : string = $"{v51}"
    let v331 : unit = ()
    let v332 : (unit -> unit) = closure7(v10, v323)
    let v333 : unit = (fun () -> v332 (); v331) ()
    (* run_target_args'
    let v343 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v344 : string = "format!(\"{:#?}\", $0)"
    let v345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v344 
    let v346 : string = "fable_library_rust::String_::fromString($0)"
    let v347 : string = Fable.Core.RustInterop.emitRustExpr v345 v346 
    let _run_target_args'_v343 = v347 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v348 : string = "format!(\"{:#?}\", $0)"
    let v349 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v348 
    let v350 : string = "fable_library_rust::String_::fromString($0)"
    let v351 : string = Fable.Core.RustInterop.emitRustExpr v349 v350 
    let _run_target_args'_v343 = v351 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v352 : string = "format!(\"{:#?}\", $0)"
    let v353 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v352 
    let v354 : string = "fable_library_rust::String_::fromString($0)"
    let v355 : string = Fable.Core.RustInterop.emitRustExpr v353 v354 
    let _run_target_args'_v343 = v355 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v357 : string = $"%A{v3}"
    let _run_target_args'_v343 = v357 
    #endif
#if FABLE_COMPILER_PYTHON
    let v361 : string = $"%A{v3}"
    let _run_target_args'_v343 = v361 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v365 : string = $"%A{v3}"
    let _run_target_args'_v343 = v365 
    #endif
#else
    let v369 : string = $"%A{v3}"
    let _run_target_args'_v343 = v369 
    #endif
    let v372 : string = _run_target_args'_v343 
    let v382 : string = $"{v372}"
    let v390 : unit = ()
    let v391 : (unit -> unit) = closure7(v10, v382)
    let v392 : unit = (fun () -> v391 (); v390) ()
    let v399 : string = $"{v90}"
    let v407 : unit = ()
    let v408 : (unit -> unit) = closure7(v10, v399)
    let v409 : unit = (fun () -> v408 (); v407) ()
    let v417 : string = "environment_variables"
    let v418 : string = $"{v417}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v10, v418)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v435 : string = $"{v51}"
    let v443 : unit = ()
    let v444 : (unit -> unit) = closure7(v10, v435)
    let v445 : unit = (fun () -> v444 (); v443) ()
    let v452 : string = $"%A{v4}"
    let v456 : string = $"{v452}"
    let v464 : unit = ()
    let v465 : (unit -> unit) = closure7(v10, v456)
    let v466 : unit = (fun () -> v465 (); v464) ()
    let v473 : string = $"{v90}"
    let v481 : unit = ()
    let v482 : (unit -> unit) = closure7(v10, v473)
    let v483 : unit = (fun () -> v482 (); v481) ()
    let v491 : string = "on_line"
    let v492 : string = $"{v491}"
    let v500 : unit = ()
    let v501 : (unit -> unit) = closure7(v10, v492)
    let v502 : unit = (fun () -> v501 (); v500) ()
    let v509 : string = $"{v51}"
    let v517 : unit = ()
    let v518 : (unit -> unit) = closure7(v10, v509)
    let v519 : unit = (fun () -> v518 (); v517) ()
    (* run_target_args'
    let v529 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v530 : string = "format!(\"{:#?}\", $0)"
    let v531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v530 
    let v532 : string = "fable_library_rust::String_::fromString($0)"
    let v533 : string = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let _run_target_args'_v529 = v533 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v534 : string = "format!(\"{:#?}\", $0)"
    let v535 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v534 
    let v536 : string = "fable_library_rust::String_::fromString($0)"
    let v537 : string = Fable.Core.RustInterop.emitRustExpr v535 v536 
    let _run_target_args'_v529 = v537 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v538 : string = "format!(\"{:#?}\", $0)"
    let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v538 
    let v540 : string = "fable_library_rust::String_::fromString($0)"
    let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
    let _run_target_args'_v529 = v541 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v543 : string = $"%A{v5}"
    let _run_target_args'_v529 = v543 
    #endif
#if FABLE_COMPILER_PYTHON
    let v547 : string = $"%A{v5}"
    let _run_target_args'_v529 = v547 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v551 : string = $"%A{v5}"
    let _run_target_args'_v529 = v551 
    #endif
#else
    let v555 : string = $"%A{v5}"
    let _run_target_args'_v529 = v555 
    #endif
    let v558 : string = _run_target_args'_v529 
    let v568 : string = $"{v558}"
    let v576 : unit = ()
    let v577 : (unit -> unit) = closure7(v10, v568)
    let v578 : unit = (fun () -> v577 (); v576) ()
    let v585 : string = $"{v90}"
    let v593 : unit = ()
    let v594 : (unit -> unit) = closure7(v10, v585)
    let v595 : unit = (fun () -> v594 (); v593) ()
    let v603 : string = "stdin"
    let v604 : string = $"{v603}"
    let v612 : unit = ()
    let v613 : (unit -> unit) = closure7(v10, v604)
    let v614 : unit = (fun () -> v613 (); v612) ()
    let v621 : string = $"{v51}"
    let v629 : unit = ()
    let v630 : (unit -> unit) = closure7(v10, v621)
    let v631 : unit = (fun () -> v630 (); v629) ()
    (* run_target_args'
    let v641 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v642 : string = "format!(\"{:#?}\", $0)"
    let v643 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v642 
    let v644 : string = "fable_library_rust::String_::fromString($0)"
    let v645 : string = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let _run_target_args'_v641 = v645 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v646 : string = "format!(\"{:#?}\", $0)"
    let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v646 
    let v648 : string = "fable_library_rust::String_::fromString($0)"
    let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let _run_target_args'_v641 = v649 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v650 : string = "format!(\"{:#?}\", $0)"
    let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v650 
    let v652 : string = "fable_library_rust::String_::fromString($0)"
    let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
    let _run_target_args'_v641 = v653 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v655 : string = $"%A{v6}"
    let _run_target_args'_v641 = v655 
    #endif
#if FABLE_COMPILER_PYTHON
    let v659 : string = $"%A{v6}"
    let _run_target_args'_v641 = v659 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v663 : string = $"%A{v6}"
    let _run_target_args'_v641 = v663 
    #endif
#else
    let v667 : string = $"%A{v6}"
    let _run_target_args'_v641 = v667 
    #endif
    let v670 : string = _run_target_args'_v641 
    let v680 : string = $"{v670}"
    let v688 : unit = ()
    let v689 : (unit -> unit) = closure7(v10, v680)
    let v690 : unit = (fun () -> v689 (); v688) ()
    let v697 : string = $"{v90}"
    let v705 : unit = ()
    let v706 : (unit -> unit) = closure7(v10, v697)
    let v707 : unit = (fun () -> v706 (); v705) ()
    let v715 : string = "trace"
    let v716 : string = $"{v715}"
    let v724 : unit = ()
    let v725 : (unit -> unit) = closure7(v10, v716)
    let v726 : unit = (fun () -> v725 (); v724) ()
    let v733 : string = $"{v51}"
    let v741 : unit = ()
    let v742 : (unit -> unit) = closure7(v10, v733)
    let v743 : unit = (fun () -> v742 (); v741) ()
    let v751 : string =
        if v7 then
            let v749 : string = "true"
            v749
        else
            let v750 : string = "false"
            v750
    let v753 : string = $"{v751}"
    let v761 : unit = ()
    let v762 : (unit -> unit) = closure7(v10, v753)
    let v763 : unit = (fun () -> v762 (); v761) ()
    let v770 : string = $"{v90}"
    let v778 : unit = ()
    let v779 : (unit -> unit) = closure7(v10, v770)
    let v780 : unit = (fun () -> v779 (); v778) ()
    let v788 : string = "working_directory"
    let v789 : string = $"{v788}"
    let v797 : unit = ()
    let v798 : (unit -> unit) = closure7(v10, v789)
    let v799 : unit = (fun () -> v798 (); v797) ()
    let v806 : string = $"{v51}"
    let v814 : unit = ()
    let v815 : (unit -> unit) = closure7(v10, v806)
    let v816 : unit = (fun () -> v815 (); v814) ()
    (* run_target_args'
    let v826 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v827 : string = "format!(\"{:#?}\", $0)"
    let v828 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v827 
    let v829 : string = "fable_library_rust::String_::fromString($0)"
    let v830 : string = Fable.Core.RustInterop.emitRustExpr v828 v829 
    let _run_target_args'_v826 = v830 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v831 : string = "format!(\"{:#?}\", $0)"
    let v832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v831 
    let v833 : string = "fable_library_rust::String_::fromString($0)"
    let v834 : string = Fable.Core.RustInterop.emitRustExpr v832 v833 
    let _run_target_args'_v826 = v834 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v835 : string = "format!(\"{:#?}\", $0)"
    let v836 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v835 
    let v837 : string = "fable_library_rust::String_::fromString($0)"
    let v838 : string = Fable.Core.RustInterop.emitRustExpr v836 v837 
    let _run_target_args'_v826 = v838 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v840 : string = $"%A{v8}"
    let _run_target_args'_v826 = v840 
    #endif
#if FABLE_COMPILER_PYTHON
    let v844 : string = $"%A{v8}"
    let _run_target_args'_v826 = v844 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v848 : string = $"%A{v8}"
    let _run_target_args'_v826 = v848 
    #endif
#else
    let v852 : string = $"%A{v8}"
    let _run_target_args'_v826 = v852 
    #endif
    let v855 : string = _run_target_args'_v826 
    let v865 : string = $"{v855}"
    let v873 : unit = ()
    let v874 : (unit -> unit) = closure7(v10, v865)
    let v875 : unit = (fun () -> v874 (); v873) ()
    let v883 : string = " }"
    let v884 : string = $"{v883}"
    let v892 : unit = ()
    let v893 : (unit -> unit) = closure7(v10, v884)
    let v894 : unit = (fun () -> v893 (); v892) ()
    let v901 : string = $"{v883}"
    let v909 : unit = ()
    let v910 : (unit -> unit) = closure7(v10, v901)
    let v911 : unit = (fun () -> v910 (); v909) ()
    let v917 : string = v10.l0
    v917
and method171 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method172(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v21 : string = " "
    let v22 : string = v6 + v21 
    let v26 : string = v22 + v7 
    let v31 : string = " #"
    let v32 : string = v26 + v31 
    let v36 : (int64 -> string) = _.ToString()
    let v37 : string = v36 v18
    let v41 : string = v32 + v37 
    let v45 : string = v41 + v21 
    let v50 : string = "runtime.execute_with_options_async"
    let v51 : string = v45 + v50 
    let v56 : string = " / "
    let v57 : string = v51 + v56 
    let v61 : string = v57 + v17 
    method17(v61)
and closure67 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure2()
    let v25 : unit = (fun () -> v24 (); v23) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
    let v66 : US0 = v52.l0
    let v67 : bool = v50.l0
    let v68 : bool = v67 = false
    let v71 : bool =
        if v68 then
            false
        else
            let v69 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v66
            let v70 : bool = 1 >= v69
            v70
    let v72 : bool = v71 = false
    let v307 : US6 =
        if v72 then
            US6_1
        else
            let v88 : unit = ()
            let v89 : unit = (fun () -> v24 (); v88) ()
            let struct (v112 : Mut0, v113 : Mut1, v114 : Mut2, v115 : Mut3, v116 : Mut4, v117 : int64 option) = TraceState.trace_state.Value
            let v130 : string = method7(v112, v113, v114, v115, v116, v117)
            let v131 : string = method11()
            let v132 : int32 = v8.Length
            let v133 : string = method171(v112, v113, v114, v115, v116, v117, v130, v131, v7, v132, v0, v1, v2, v3, v4, v5, v6)
            let v148 : unit = ()
            let v149 : unit = (fun () -> v24 (); v148) ()
            let struct (v172 : Mut0, v173 : Mut1, v174 : Mut2, v175 : Mut3, v176 : Mut4, v177 : int64 option) = TraceState.trace_state.Value
            let v192 : unit = ()
            let v193 : (unit -> unit) = closure8(v172)
            let v194 : unit = (fun () -> v193 (); v192) ()
            let v197 : (string -> unit) = closure9()
            (* run_target_args'
            let v198 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v199 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v133 v199 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v200 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v133 v200 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v201 : string = v175.l0
            let v202 : bool = v201 = ""
            let v217 : string =
                if v202 then
                    v133
                else
                    let v203 : bool = v133 = ""
                    if v203 then
                        let v204 : string = v175.l0
                        v204
                    else
                        let v205 : string = v175.l0
                        let v208 : string = "\n"
                        let v209 : string = v205 + v208 
                        let v213 : string = v209 + v133 
                        v213
            (* run_target_args'
            let v222 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v217 v223 
            let _run_target_args'_v222 = v224 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v225 : string = "&*$0"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v217 v225 
            let _run_target_args'_v222 = v226 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v217 v227 
            let _run_target_args'_v222 = v228 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v230 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v230 
            #endif
#if FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v234 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v238 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v238 
            #endif
#else
            let v242 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v242 
            #endif
            let v245 : Ref<Str> = _run_target_args'_v222 
            let v254 : string = $"$0.chars()"
            let v255 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v245 v254 
            let v256 : string = "$0"
            let v257 : _ = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "$0.collect::<Vec<_>>()"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v261 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "x"
            let v265 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "String::from_iter($0)"
            let v267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v268 : string = "true; $0 }).collect::<Vec<_>>()"
            let v269 : bool = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v270 : string = "_vec_map"
            let v271 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v270 
            let v272 : string = "$0.len()"
            let v273 : unativeint = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let v279 : int32 = v273 |> int32 
            let v289 : string = ""
            let v290 : bool = v133 <> v289 
            let v294 : bool =
                if v290 then
                    let v293 : bool = v279 <= 1
                    v293
                else
                    false
            if v294 then
                v175.l0 <- v217
                ()
            else
                v175.l0 <- v289
                let v295 : string = "true; $0.into_iter().for_each(|x| { //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v271 v295 
                let v297 : string = "x"
                let v298 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr v298 v299 
                let v301 : string = $"true"
                let v302 : bool = Fable.Core.RustInterop.emitRustExpr () v301 
                let v303 : string = "true; }); //"
                let v304 : bool = Fable.Core.RustInterop.emitRustExpr () v303 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v197 v133
            #endif
#if FABLE_COMPILER_PYTHON
            v197 v133
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v197 v133
            #endif
#else
            v197 v133
            #endif
            // run_target_args' is_unit
            let v305 : (string -> unit) = v173.l0
            v305 v133
            US6_0(v172, v173, v174, v175, v176, v177)
    
    ()
and method155 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v19068 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v19071 : int32, v19072 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19071, v19072) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v19079 : int32, v19080 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19079, v19080) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v19087 : int32, v19088 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19087, v19088) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v19095 : int32, v19096 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19095, v19096) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v19103 : int32, v19104 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19103, v19104) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v19111 : int32, v19112 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19111, v19112) 
            #endif
#else
            let v19117 : US18 = method101(v0)
            let struct (v19129 : string, v19130 : US5) =
                match v19117 with
                | US18_1(v19120) -> (* Error *)
                    let v19122 : string = $"resultm.get / Result value was Error: {v19120}"
                    failwith<struct (string * US5)> v19122
                | US18_0(v19118, v19119) -> (* Ok *)
                    struct (v19118, v19119)
            let v19133 : (string -> US5) = method6()
            let v19134 : US5 option = v6 |> Option.map v19133 
            let v19154 : US5 = US5_1
            let v19155 : US5 = v19134 |> Option.defaultValue v19154 
            let v19162 : string =
                match v19155 with
                | US5_1 -> (* None *)
                    let v19160 : string = ""
                    v19160
                | US5_0(v19159) -> (* Some *)
                    v19159
            let v19474 : unit = ()
            let v19475 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v19130, v19129)
            let v19476 : unit = (fun () -> v19475 (); v19474) ()
            let v19791 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v19795 : string =
                match v19130 with
                | US5_1 -> (* None *)
                    let v19793 : string = ""
                    v19793
                | US5_0(v19792) -> (* Some *)
                    v19792
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v19795,
              StandardOutputEncoding = v19791,
              WorkingDirectory = v19162,
              FileName = v19129,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v19796 : System.Diagnostics.ProcessStartInfo = start_info
            let v19797 : (struct (string * string) []) = method158(v0, v1, v2, v3, v4, v5, v6)
            let v19798 : int32 = v19797.Length
            let v19799 : Mut5 = {l0 = 0} : Mut5
            while method30(v19798, v19799) do
                let v19801 : int32 = v19799.l0
                let struct (v19802 : string, v19803 : string) = v19797.[int v19801]
                v19796.EnvironmentVariables.[v19802] <- v19803 
                let v19804 : int32 = v19801 + 1
                v19799.l0 <- v19804
                ()
            let v19805 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v19796)
            use v19805 = v19805 
            let v19806 : System.Diagnostics.Process = v19805 
            let v19807 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v19808 : System.Collections.Concurrent.ConcurrentStack<string> = v19807 ()
            let v19809 : bool = false
            let v19810 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v19806, v19808, v19809)
            v19806.OutputDataReceived.Add v19810 
            let v19811 : bool = true
            let v19812 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v19806, v19808, v19811)
            v19806.ErrorDataReceived.Add v19812 
            let v19813 : (unit -> bool) = v19806.Start
            let v19814 : bool = v19813 ()
            let v19815 : bool = v19814 = false
            if v19815 then
                let v19816 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v19816
            let v19817 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v19817 v19806
            let v19818 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v19818 v19806
            let v19821 : (System.Threading.CancellationToken -> US36) = method164()
            let v19822 : US36 option = v1 |> Option.map v19821 
            let v19842 : US36 = US36_1
            let v19843 : US36 = v19822 |> Option.defaultValue v19842 
            let v19850 : System.Threading.CancellationToken =
                match v19843 with
                | US36_1 -> (* None *)
                    let v19848 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v19848
                | US36_0(v19847) -> (* Some *)
                    v19847
            let v19851 : Async<System.Threading.CancellationToken> = method165(v19850)
            let! v19851 = v19851 
            let v19852 : System.Threading.CancellationToken = v19851 
            let v19853 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v19852.Register
            let v19854 : (unit -> unit) = closure65(v19806)
            let v19855 : System.Threading.CancellationTokenRegistration = v19853 v19854
            use v19855 = v19855 
            let v19856 : System.Threading.CancellationTokenRegistration = v19855 
            let v19857 : Async<int32> = method168(v19806, v19808, v19852)
            let! v19857 = v19857 
            let v19858 : int32 = v19857 
            let v19860 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v19861 : string seq = v19860 v19808
            let v19865 : (string seq -> string seq) = Seq.rev
            let v19866 : string seq = v19865 v19861
            let v19871 : string = method73()
            let v19872 : (string -> (string seq -> string)) = String.concat
            let v19873 : (string seq -> string) = v19872 v19871
            let v19874 : string = v19873 v19866
            let v20190 : unit = ()
            let v20191 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v19858, v19874)
            let v20192 : unit = (fun () -> v20191 (); v20190) ()
            return struct (v19858, v19874) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v39556 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v39556 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39558 : unit = ()
    let _let'_v39558 =
        async {
            (* run_target_args'
            let v58601 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v58604 : int32, v58605 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58604, v58605) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v58612 : int32, v58613 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58612, v58613) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v58620 : int32, v58621 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58620, v58621) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v58628 : int32, v58629 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58628, v58629) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v58636 : int32, v58637 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58636, v58637) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v58644 : int32, v58645 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58644, v58645) 
            #endif
#else
            let v58650 : US18 = method101(v0)
            let struct (v58662 : string, v58663 : US5) =
                match v58650 with
                | US18_1(v58653) -> (* Error *)
                    let v58655 : string = $"resultm.get / Result value was Error: {v58653}"
                    failwith<struct (string * US5)> v58655
                | US18_0(v58651, v58652) -> (* Ok *)
                    struct (v58651, v58652)
            let v58666 : (string -> US5) = method6()
            let v58667 : US5 option = v6 |> Option.map v58666 
            let v58687 : US5 = US5_1
            let v58688 : US5 = v58667 |> Option.defaultValue v58687 
            let v58695 : string =
                match v58688 with
                | US5_1 -> (* None *)
                    let v58693 : string = ""
                    v58693
                | US5_0(v58692) -> (* Some *)
                    v58692
            let v59007 : unit = ()
            let v59008 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v58663, v58662)
            let v59009 : unit = (fun () -> v59008 (); v59007) ()
            let v59324 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v59328 : string =
                match v58663 with
                | US5_1 -> (* None *)
                    let v59326 : string = ""
                    v59326
                | US5_0(v59325) -> (* Some *)
                    v59325
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v59328,
              StandardOutputEncoding = v59324,
              WorkingDirectory = v58695,
              FileName = v58662,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v59329 : System.Diagnostics.ProcessStartInfo = start_info
            let v59330 : (struct (string * string) []) = method158(v0, v1, v2, v3, v4, v5, v6)
            let v59331 : int32 = v59330.Length
            let v59332 : Mut5 = {l0 = 0} : Mut5
            while method30(v59331, v59332) do
                let v59334 : int32 = v59332.l0
                let struct (v59335 : string, v59336 : string) = v59330.[int v59334]
                v59329.EnvironmentVariables.[v59335] <- v59336 
                let v59337 : int32 = v59334 + 1
                v59332.l0 <- v59337
                ()
            let v59338 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v59329)
            use v59338 = v59338 
            let v59339 : System.Diagnostics.Process = v59338 
            let v59340 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v59341 : System.Collections.Concurrent.ConcurrentStack<string> = v59340 ()
            let v59342 : bool = false
            let v59343 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v59339, v59341, v59342)
            v59339.OutputDataReceived.Add v59343 
            let v59344 : bool = true
            let v59345 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v59339, v59341, v59344)
            v59339.ErrorDataReceived.Add v59345 
            let v59346 : (unit -> bool) = v59339.Start
            let v59347 : bool = v59346 ()
            let v59348 : bool = v59347 = false
            if v59348 then
                let v59349 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v59349
            let v59350 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v59350 v59339
            let v59351 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v59351 v59339
            let v59354 : (System.Threading.CancellationToken -> US36) = method164()
            let v59355 : US36 option = v1 |> Option.map v59354 
            let v59375 : US36 = US36_1
            let v59376 : US36 = v59355 |> Option.defaultValue v59375 
            let v59383 : System.Threading.CancellationToken =
                match v59376 with
                | US36_1 -> (* None *)
                    let v59381 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v59381
                | US36_0(v59380) -> (* Some *)
                    v59380
            let v59384 : Async<System.Threading.CancellationToken> = method165(v59383)
            let! v59384 = v59384 
            let v59385 : System.Threading.CancellationToken = v59384 
            let v59386 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v59385.Register
            let v59387 : (unit -> unit) = closure65(v59339)
            let v59388 : System.Threading.CancellationTokenRegistration = v59386 v59387
            use v59388 = v59388 
            let v59389 : System.Threading.CancellationTokenRegistration = v59388 
            let v59390 : Async<int32> = method168(v59339, v59341, v59385)
            let! v59390 = v59390 
            let v59391 : int32 = v59390 
            let v59393 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v59394 : string seq = v59393 v59341
            let v59398 : (string seq -> string seq) = Seq.rev
            let v59399 : string seq = v59398 v59394
            let v59404 : string = method73()
            let v59405 : (string -> (string seq -> string)) = String.concat
            let v59406 : (string seq -> string) = v59405 v59404
            let v59407 : string = v59406 v59399
            let v59723 : unit = ()
            let v59724 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v59391, v59407)
            let v59725 : unit = (fun () -> v59724 (); v59723) ()
            return struct (v59391, v59407) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v79089 : Async<struct (int32 * string)> = _let'_v39558 
    let _run_target_args'_v11 = v79089 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79091 : unit = ()
    let _let'_v79091 =
        async {
            (* run_target_args'
            let v98134 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v98137 : int32, v98138 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98137, v98138) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v98145 : int32, v98146 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98145, v98146) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v98153 : int32, v98154 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98153, v98154) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v98161 : int32, v98162 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98161, v98162) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v98169 : int32, v98170 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98169, v98170) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v98177 : int32, v98178 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98177, v98178) 
            #endif
#else
            let v98183 : US18 = method101(v0)
            let struct (v98195 : string, v98196 : US5) =
                match v98183 with
                | US18_1(v98186) -> (* Error *)
                    let v98188 : string = $"resultm.get / Result value was Error: {v98186}"
                    failwith<struct (string * US5)> v98188
                | US18_0(v98184, v98185) -> (* Ok *)
                    struct (v98184, v98185)
            let v98199 : (string -> US5) = method6()
            let v98200 : US5 option = v6 |> Option.map v98199 
            let v98220 : US5 = US5_1
            let v98221 : US5 = v98200 |> Option.defaultValue v98220 
            let v98228 : string =
                match v98221 with
                | US5_1 -> (* None *)
                    let v98226 : string = ""
                    v98226
                | US5_0(v98225) -> (* Some *)
                    v98225
            let v98540 : unit = ()
            let v98541 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v98196, v98195)
            let v98542 : unit = (fun () -> v98541 (); v98540) ()
            let v98857 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v98861 : string =
                match v98196 with
                | US5_1 -> (* None *)
                    let v98859 : string = ""
                    v98859
                | US5_0(v98858) -> (* Some *)
                    v98858
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v98861,
              StandardOutputEncoding = v98857,
              WorkingDirectory = v98228,
              FileName = v98195,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v98862 : System.Diagnostics.ProcessStartInfo = start_info
            let v98863 : (struct (string * string) []) = method158(v0, v1, v2, v3, v4, v5, v6)
            let v98864 : int32 = v98863.Length
            let v98865 : Mut5 = {l0 = 0} : Mut5
            while method30(v98864, v98865) do
                let v98867 : int32 = v98865.l0
                let struct (v98868 : string, v98869 : string) = v98863.[int v98867]
                v98862.EnvironmentVariables.[v98868] <- v98869 
                let v98870 : int32 = v98867 + 1
                v98865.l0 <- v98870
                ()
            let v98871 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v98862)
            use v98871 = v98871 
            let v98872 : System.Diagnostics.Process = v98871 
            let v98873 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v98874 : System.Collections.Concurrent.ConcurrentStack<string> = v98873 ()
            let v98875 : bool = false
            let v98876 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v98872, v98874, v98875)
            v98872.OutputDataReceived.Add v98876 
            let v98877 : bool = true
            let v98878 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v98872, v98874, v98877)
            v98872.ErrorDataReceived.Add v98878 
            let v98879 : (unit -> bool) = v98872.Start
            let v98880 : bool = v98879 ()
            let v98881 : bool = v98880 = false
            if v98881 then
                let v98882 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v98882
            let v98883 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v98883 v98872
            let v98884 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v98884 v98872
            let v98887 : (System.Threading.CancellationToken -> US36) = method164()
            let v98888 : US36 option = v1 |> Option.map v98887 
            let v98908 : US36 = US36_1
            let v98909 : US36 = v98888 |> Option.defaultValue v98908 
            let v98916 : System.Threading.CancellationToken =
                match v98909 with
                | US36_1 -> (* None *)
                    let v98914 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v98914
                | US36_0(v98913) -> (* Some *)
                    v98913
            let v98917 : Async<System.Threading.CancellationToken> = method165(v98916)
            let! v98917 = v98917 
            let v98918 : System.Threading.CancellationToken = v98917 
            let v98919 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v98918.Register
            let v98920 : (unit -> unit) = closure65(v98872)
            let v98921 : System.Threading.CancellationTokenRegistration = v98919 v98920
            use v98921 = v98921 
            let v98922 : System.Threading.CancellationTokenRegistration = v98921 
            let v98923 : Async<int32> = method168(v98872, v98874, v98918)
            let! v98923 = v98923 
            let v98924 : int32 = v98923 
            let v98926 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v98927 : string seq = v98926 v98874
            let v98931 : (string seq -> string seq) = Seq.rev
            let v98932 : string seq = v98931 v98927
            let v98937 : string = method73()
            let v98938 : (string -> (string seq -> string)) = String.concat
            let v98939 : (string seq -> string) = v98938 v98937
            let v98940 : string = v98939 v98932
            let v99256 : unit = ()
            let v99257 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v98924, v98940)
            let v99258 : unit = (fun () -> v99257 (); v99256) ()
            return struct (v98924, v98940) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v118622 : Async<struct (int32 * string)> = _let'_v79091 
    let _run_target_args'_v11 = v118622 
    #endif
#else
    let v118624 : unit = ()
    let _let'_v118624 =
        async {
            (* run_target_args'
            let v137667 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v137670 : int32, v137671 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137670, v137671) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v137678 : int32, v137679 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137678, v137679) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v137686 : int32, v137687 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137686, v137687) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v137694 : int32, v137695 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137694, v137695) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v137702 : int32, v137703 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137702, v137703) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v137710 : int32, v137711 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137710, v137711) 
            #endif
#else
            let v137716 : US18 = method101(v0)
            let struct (v137728 : string, v137729 : US5) =
                match v137716 with
                | US18_1(v137719) -> (* Error *)
                    let v137721 : string = $"resultm.get / Result value was Error: {v137719}"
                    failwith<struct (string * US5)> v137721
                | US18_0(v137717, v137718) -> (* Ok *)
                    struct (v137717, v137718)
            let v137732 : (string -> US5) = method6()
            let v137733 : US5 option = v6 |> Option.map v137732 
            let v137753 : US5 = US5_1
            let v137754 : US5 = v137733 |> Option.defaultValue v137753 
            let v137761 : string =
                match v137754 with
                | US5_1 -> (* None *)
                    let v137759 : string = ""
                    v137759
                | US5_0(v137758) -> (* Some *)
                    v137758
            let v138073 : unit = ()
            let v138074 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v137729, v137728)
            let v138075 : unit = (fun () -> v138074 (); v138073) ()
            let v138390 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v138394 : string =
                match v137729 with
                | US5_1 -> (* None *)
                    let v138392 : string = ""
                    v138392
                | US5_0(v138391) -> (* Some *)
                    v138391
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v138394,
              StandardOutputEncoding = v138390,
              WorkingDirectory = v137761,
              FileName = v137728,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v138395 : System.Diagnostics.ProcessStartInfo = start_info
            let v138396 : (struct (string * string) []) = method158(v0, v1, v2, v3, v4, v5, v6)
            let v138397 : int32 = v138396.Length
            let v138398 : Mut5 = {l0 = 0} : Mut5
            while method30(v138397, v138398) do
                let v138400 : int32 = v138398.l0
                let struct (v138401 : string, v138402 : string) = v138396.[int v138400]
                v138395.EnvironmentVariables.[v138401] <- v138402 
                let v138403 : int32 = v138400 + 1
                v138398.l0 <- v138403
                ()
            let v138404 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v138395)
            use v138404 = v138404 
            let v138405 : System.Diagnostics.Process = v138404 
            let v138406 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v138407 : System.Collections.Concurrent.ConcurrentStack<string> = v138406 ()
            let v138408 : bool = false
            let v138409 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v138405, v138407, v138408)
            v138405.OutputDataReceived.Add v138409 
            let v138410 : bool = true
            let v138411 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v138405, v138407, v138410)
            v138405.ErrorDataReceived.Add v138411 
            let v138412 : (unit -> bool) = v138405.Start
            let v138413 : bool = v138412 ()
            let v138414 : bool = v138413 = false
            if v138414 then
                let v138415 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v138415
            let v138416 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v138416 v138405
            let v138417 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v138417 v138405
            let v138420 : (System.Threading.CancellationToken -> US36) = method164()
            let v138421 : US36 option = v1 |> Option.map v138420 
            let v138441 : US36 = US36_1
            let v138442 : US36 = v138421 |> Option.defaultValue v138441 
            let v138449 : System.Threading.CancellationToken =
                match v138442 with
                | US36_1 -> (* None *)
                    let v138447 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v138447
                | US36_0(v138446) -> (* Some *)
                    v138446
            let v138450 : Async<System.Threading.CancellationToken> = method165(v138449)
            let! v138450 = v138450 
            let v138451 : System.Threading.CancellationToken = v138450 
            let v138452 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v138451.Register
            let v138453 : (unit -> unit) = closure65(v138405)
            let v138454 : System.Threading.CancellationTokenRegistration = v138452 v138453
            use v138454 = v138454 
            let v138455 : System.Threading.CancellationTokenRegistration = v138454 
            let v138456 : Async<int32> = method168(v138405, v138407, v138451)
            let! v138456 = v138456 
            let v138457 : int32 = v138456 
            let v138459 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v138460 : string seq = v138459 v138407
            let v138464 : (string seq -> string seq) = Seq.rev
            let v138465 : string seq = v138464 v138460
            let v138470 : string = method73()
            let v138471 : (string -> (string seq -> string)) = String.concat
            let v138472 : (string seq -> string) = v138471 v138470
            let v138473 : string = v138472 v138465
            let v138789 : unit = ()
            let v138790 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v138457, v138473)
            let v138791 : unit = (fun () -> v138790 (); v138789) ()
            return struct (v138457, v138473) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v158155 : Async<struct (int32 * string)> = _let'_v118624 
    let _run_target_args'_v11 = v158155 
    #endif
    let v158156 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v158156
and method154 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method155(v0, v1, v2, v3, v4, v5, v6)
and method99 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method100(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US18 = method101(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US18_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US18_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US26 = method114(v34)
    let v44 : (string []) =
        match v35 with
        | US26_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US26_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v91 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v92 : string = "String::from($0)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v92 
    let _run_target_args'_v91 = v93 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v94 : string = "String::from($0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v94 
    let _run_target_args'_v91 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "String::from($0)"
    let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v96 
    let _run_target_args'_v91 = v97 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v99 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v99 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v107 
    #endif
#else
    let v111 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v111 
    #endif
    let v114 : std_string_String = _run_target_args'_v91 
    let v123 : string = "true; $0 }).collect::<Vec<_>>()"
    let v124 : bool = Fable.Core.RustInterop.emitRustExpr v114 v123 
    let v125 : string = "_vec_map"
    let v126 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v125 
    let v442 : unit = ()
    let v443 : (unit -> unit) = closure40(v0, v1, v2, v3, v4, v5, v6, v29, v126)
    let v444 : unit = (fun () -> v443 (); v442) ()
    let v764 : bool = true
    let mutable _capture_v764 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v765 : string = "std::process::Command::new(&*$0)"
    let v766 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v765 
    let v767 : string = "true; let mut v766 = v766"
    let v768 : bool = Fable.Core.RustInterop.emitRustExpr () v767 
    let v769 : string = "true; std::process::Command::args(&mut v766, &*$0)"
    let v770 : bool = Fable.Core.RustInterop.emitRustExpr v126 v769 
    let v771 : string = "$0"
    let v772 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v766 v771 
    let v773 : string = "std::process::Stdio::piped()"
    let v774 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "true; let mut v772 = v772"
    let v776 : bool = Fable.Core.RustInterop.emitRustExpr () v775 
    let v777 : string = "true; std::process::Command::stdout(&mut v772, std::process::Stdio::piped())"
    let v778 : bool = Fable.Core.RustInterop.emitRustExpr () v777 
    let v779 : string = "$0"
    let v780 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v772 v779 
    let v781 : string = "std::process::Stdio::piped()"
    let v782 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v781 
    let v783 : string = "true; let mut v780 = v780"
    let v784 : bool = Fable.Core.RustInterop.emitRustExpr () v783 
    let v785 : string = "true; std::process::Command::stderr(&mut v780, std::process::Stdio::piped())"
    let v786 : bool = Fable.Core.RustInterop.emitRustExpr () v785 
    let v787 : string = "$0"
    let v788 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v780 v787 
    let v789 : string = "std::process::Stdio::piped()"
    let v790 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v789 
    let v791 : string = "true; let mut v788 = v788"
    let v792 : bool = Fable.Core.RustInterop.emitRustExpr () v791 
    let v793 : string = "true; std::process::Command::stdin(&mut v788, std::process::Stdio::piped())"
    let v794 : bool = Fable.Core.RustInterop.emitRustExpr () v793 
    let v795 : string = "$0"
    let v796 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v788 v795 
    let v799 : (string -> US5) = method6()
    let v800 : US5 option = v6 |> Option.map v799 
    let v820 : US5 = US5_1
    let v821 : US5 = v800 |> Option.defaultValue v820 
    let v835 : std_process_Command =
        match v821 with
        | US5_1 -> (* None *)
            let v832 : string = $"v796"
            let v833 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v832 
            v833
        | US5_0(v825) -> (* Some *)
            let v826 : string = "true; let mut v796 = v796"
            let v827 : bool = Fable.Core.RustInterop.emitRustExpr () v826 
            let v828 : string = "true; std::process::Command::current_dir(&mut v796, &*$0)"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr v825 v828 
            let v830 : string = $"v796"
            let v831 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v830 
            v831
    let v836 : uint64 = System.Convert.ToUInt64 v2.Length
    let v837 : bool = v836 = 0UL
    let v857 : std_process_Command =
        if v837 then
            v835
        else
            let v838 : string = "$0.to_vec()"
            let v839 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v838 
            let v840 : string = "true; let _vec_fold_ = $0.into_iter().fold(v835, |acc, x| { //"
            let v841 : bool = Fable.Core.RustInterop.emitRustExpr v839 v840 
            let v842 : string = "acc"
            let v843 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v842 
            let v844 : string = "x"
            let struct (v845 : string, v846 : string) = Fable.Core.RustInterop.emitRustExpr () v844 
            let v847 : string = "true; let mut v843 = v843"
            let v848 : bool = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = "true; std::process::Command::env(&mut v843, &*$0, &*$1)"
            let v850 : bool = Fable.Core.RustInterop.emitRustExpr struct (v845, v846) v849 
            let v851 : string = "$0"
            let v852 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v843 v851 
            let v853 : string = "true; $0 })"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr v852 v853 
            let v855 : string = "_vec_fold_"
            let v856 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v855 
            v856
    let v858 : string = "true; let mut v857 = v857"
    let v859 : bool = Fable.Core.RustInterop.emitRustExpr () v858 
    let v860 : string = "std::process::Command::spawn(&mut v857)"
    let v861 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v860 
    let v862 : (std_io_Error -> std_string_String) = method77()
    (* run_target_args'
    let v864 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v865 : string = "$0.map_err(|x| $1(x))"
    let v866 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v861, v862) v865 
    let _run_target_args'_v864 = v866 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v867 : string = "$0.map_err(|x| $1(x))"
    let v868 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v861, v862) v867 
    let _run_target_args'_v864 = v868 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v869 : string = "$0.map_err(|x| $1(x))"
    let v870 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v861, v862) v869 
    let _run_target_args'_v864 = v870 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v871 : Result<std_process_Child, std_string_String> = match v861 with Ok x -> Ok x | Error x -> Error (v862 x)
    let _run_target_args'_v864 = v871 
    #endif
#if FABLE_COMPILER_PYTHON
    let v872 : Result<std_process_Child, std_string_String> = match v861 with Ok x -> Ok x | Error x -> Error (v862 x)
    let _run_target_args'_v864 = v872 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v873 : Result<std_process_Child, std_string_String> = match v861 with Ok x -> Ok x | Error x -> Error (v862 x)
    let _run_target_args'_v864 = v873 
    #endif
#else
    let v874 : Result<std_process_Child, std_string_String> = match v861 with Ok x -> Ok x | Error x -> Error (v862 x)
    let _run_target_args'_v864 = v874 
    #endif
    let v875 : Result<std_process_Child, std_string_String> = _run_target_args'_v864 
    let v878 : (std_process_Child option -> std_process_Child option) = method126()
    let v879 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v880 : bool = Fable.Core.RustInterop.emitRustExpr v875 v879 
    let v881 : string = "x"
    let v882 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v881 
    let v884 : std_process_Child option = Some v882 
    let v887 : std_process_Child option = v878 v884
    let v888 : string = "std::sync::Mutex::new(v887)"
    let v889 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v888 
    let v890 : string = "std::sync::Arc::new(v889)"
    let v891 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v890 
    let v892 : string = "true; $0 })"
    let v893 : bool = Fable.Core.RustInterop.emitRustExpr v891 v892 
    let v894 : string = "_result_map_"
    let v895 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v894 
    let v896 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US28) = method127()
    let v897 : (std_string_String -> US28) = method128()
    let v898 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v899 : US28 = Fable.Core.RustInterop.emitRustExpr struct (v896, v897, v895) v898 
    let struct (v5733 : int32, v5734 : US8, v5735 : US29) =
        match v899 with
        | US28_1(v5091) -> (* Error *)
            let v5407 : unit = ()
            let v5408 : (unit -> unit) = closure44(v0, v1, v2, v3, v4, v5, v6, v29, v126, v5091)
            let v5409 : unit = (fun () -> v5408 (); v5407) ()
            let v5728 : US8 = US8_0(v5091)
            let v5729 : US29 = US29_1
            struct (-1, v5728, v5729)
        | US28_0(v900) -> (* Ok *)
            let v901 : string = "true; let _capture = (|| { //"
            let v902 : bool = Fable.Core.RustInterop.emitRustExpr () v901 
            let v903 : string = "$0"
            let v904 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v900 v903 
            let v905 : string = "v904.lock()"
            let v906 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v905 
            (* run_target_args'
            let v908 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v909 : string = "$0.unwrap()"
            let v910 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v906 v909 
            let _run_target_args'_v908 = v910 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v911 : string = "$0.unwrap()"
            let v912 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v906 v911 
            let _run_target_args'_v908 = v912 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v913 : string = "$0.unwrap()"
            let v914 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v906 v913 
            let _run_target_args'_v908 = v914 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v915 : std_sync_MutexGuard<std_process_Child option> = match v906 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v908 = v915 
            #endif
#if FABLE_COMPILER_PYTHON
            let v916 : std_sync_MutexGuard<std_process_Child option> = match v906 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v908 = v916 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v917 : std_sync_MutexGuard<std_process_Child option> = match v906 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v908 = v917 
            #endif
#else
            let v918 : std_sync_MutexGuard<std_process_Child option> = match v906 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v908 = v918 
            #endif
            let v919 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v908 
            let v922 : std_sync_MutexGuard<std_process_Child option> = method131(v919)
            let v923 : string = "true; let mut v922 = v922"
            let v924 : bool = Fable.Core.RustInterop.emitRustExpr () v923 
            let v925 : string = "&mut $0"
            let v926 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v922 v925 
            let v927 : string = "$0.as_mut()"
            let v928 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v926 v927 
            let v929 : string = "$0.unwrap()"
            let v930 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v928 v929 
            let v931 : string = "&mut $0.stdout"
            let v932 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v930 v931 
            let v933 : string = "Option::take($0)"
            let v934 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v932 v933 
            let v935 : string = "$0.unwrap()"
            let v936 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v934 v935 
            let v937 : string = "true; $0 })()"
            let v938 : bool = Fable.Core.RustInterop.emitRustExpr v936 v937 
            let v939 : string = "_capture"
            let v940 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v939 
            let v941 : string = "true; let _capture = (|| { //"
            let v942 : bool = Fable.Core.RustInterop.emitRustExpr () v941 
            let v943 : string = "$0"
            let v944 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v900 v943 
            let v945 : string = "v944.lock()"
            let v946 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v945 
            (* run_target_args'
            let v948 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v949 : string = "$0.unwrap()"
            let v950 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v946 v949 
            let _run_target_args'_v948 = v950 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v951 : string = "$0.unwrap()"
            let v952 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v946 v951 
            let _run_target_args'_v948 = v952 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v953 : string = "$0.unwrap()"
            let v954 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v946 v953 
            let _run_target_args'_v948 = v954 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v955 : std_sync_MutexGuard<std_process_Child option> = match v946 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v948 = v955 
            #endif
#if FABLE_COMPILER_PYTHON
            let v956 : std_sync_MutexGuard<std_process_Child option> = match v946 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v948 = v956 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v957 : std_sync_MutexGuard<std_process_Child option> = match v946 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v948 = v957 
            #endif
#else
            let v958 : std_sync_MutexGuard<std_process_Child option> = match v946 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v948 = v958 
            #endif
            let v959 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v948 
            let v962 : std_sync_MutexGuard<std_process_Child option> = method131(v959)
            let v963 : string = "true; let mut v962 = v962"
            let v964 : bool = Fable.Core.RustInterop.emitRustExpr () v963 
            let v965 : string = "&mut $0"
            let v966 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v962 v965 
            let v967 : string = "$0.as_mut()"
            let v968 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v966 v967 
            let v969 : string = "$0.unwrap()"
            let v970 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v968 v969 
            let v971 : string = "&mut $0.stderr"
            let v972 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v970 v971 
            let v973 : string = "Option::take($0)"
            let v974 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v972 v973 
            let v975 : string = "$0.unwrap()"
            let v976 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v974 v975 
            let v977 : string = "true; $0 })()"
            let v978 : bool = Fable.Core.RustInterop.emitRustExpr v976 v977 
            let v979 : string = "_capture"
            let v980 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v979 
            let v981 : string = "true; let _capture = (|| { //"
            let v982 : bool = Fable.Core.RustInterop.emitRustExpr () v981 
            let v983 : string = "$0"
            let v984 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v900 v983 
            let v985 : string = "v984.lock()"
            let v986 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v985 
            (* run_target_args'
            let v988 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v989 : string = "$0.unwrap()"
            let v990 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v986 v989 
            let _run_target_args'_v988 = v990 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v991 : string = "$0.unwrap()"
            let v992 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v986 v991 
            let _run_target_args'_v988 = v992 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v993 : string = "$0.unwrap()"
            let v994 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v986 v993 
            let _run_target_args'_v988 = v994 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v995 : std_sync_MutexGuard<std_process_Child option> = match v986 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v988 = v995 
            #endif
#if FABLE_COMPILER_PYTHON
            let v996 : std_sync_MutexGuard<std_process_Child option> = match v986 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v988 = v996 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v997 : std_sync_MutexGuard<std_process_Child option> = match v986 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v988 = v997 
            #endif
#else
            let v998 : std_sync_MutexGuard<std_process_Child option> = match v986 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v988 = v998 
            #endif
            let v999 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v988 
            let v1002 : std_sync_MutexGuard<std_process_Child option> = method131(v999)
            let v1003 : string = "true; let mut v1002 = v1002"
            let v1004 : bool = Fable.Core.RustInterop.emitRustExpr () v1003 
            let v1005 : string = "&mut $0"
            let v1006 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1002 v1005 
            let v1007 : string = "$0.as_mut()"
            let v1008 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1006 v1007 
            let v1009 : string = "$0.unwrap()"
            let v1010 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1008 v1009 
            let v1011 : string = "&mut $0.stdin"
            let v1012 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1010 v1011 
            let v1013 : string = "Option::take($0)"
            let v1014 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1012 v1013 
            let v1015 : string = "$0.unwrap()"
            let v1016 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1014 v1015 
            let v1018 : std_process_ChildStdin option = Some v1016 
            let v1021 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method132()
            let v1022 : std_process_ChildStdin option = v1021 v1018
            let v1023 : string = "std::sync::Mutex::new(v1022)"
            let v1024 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v1023 
            let v1025 : string = "std::sync::Arc::new(v1024)"
            let v1026 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1025 
            let v1027 : string = "true; $0 })()"
            let v1028 : bool = Fable.Core.RustInterop.emitRustExpr v1026 v1027 
            let v1029 : string = "_capture"
            let v1030 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1029 
            let v1031 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1032 : std_sync_mpsc_Sender<std_string_String>, v1033 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1031 
            let v1034 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method133()
            let v1035 : std_sync_mpsc_Sender<std_string_String> = v1034 v1032
            let v1036 : string = "std::sync::Mutex::new(v1035)"
            let v1037 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v1036 
            let v1038 : string = "std::sync::Arc::new(v1037)"
            let v1039 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1038 
            let v1040 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method134()
            let v1041 : std_sync_mpsc_Sender<std_string_String> = v1040 v1032
            let v1042 : string = "std::sync::Mutex::new(v1041)"
            let v1043 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v1042 
            let v1044 : string = "std::sync::Arc::new(v1043)"
            let v1045 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1044 
            let v1046 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method135()
            let v1047 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v1046 v1033
            let v1048 : string = "std::sync::Mutex::new(v1047)"
            let v1049 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1048 
            let v1050 : string = "std::sync::Arc::new(v1049)"
            let v1051 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1050 
            let v1052 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1053 : bool = Fable.Core.RustInterop.emitRustExpr () v1052 
            let v1054 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1055 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v940 v1054 
            let v1056 : string = "std::io::BufReader::new($0)"
            let v1057 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v1055 v1056 
            let v1058 : string = "std::io::BufRead::lines(v1057)"
            let v1059 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1058 
            let v1060 : string = "true; let mut v1059 = v1059; let _iter_try_for_each = v1059.try_for_each(|x| { //"
            let v1061 : bool = Fable.Core.RustInterop.emitRustExpr () v1060 
            let v1062 : string = "x"
            let v1063 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1062 
            let v1064 : string = "$0.clone()"
            let v1065 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1039 v1064 
            let v1066 : (std_io_Error -> std_string_String) = method77()
            (* run_target_args'
            let v1068 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1069 : string = "$0.map_err(|x| $1(x))"
            let v1070 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1063, v1066) v1069 
            let _run_target_args'_v1068 = v1070 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1071 : string = "$0.map_err(|x| $1(x))"
            let v1072 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1063, v1066) v1071 
            let _run_target_args'_v1068 = v1072 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1073 : string = "$0.map_err(|x| $1(x))"
            let v1074 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1063, v1066) v1073 
            let _run_target_args'_v1068 = v1074 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1075 : Result<std_string_String, std_string_String> = match v1063 with Ok x -> Ok x | Error x -> Error (v1066 x)
            let _run_target_args'_v1068 = v1075 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1076 : Result<std_string_String, std_string_String> = match v1063 with Ok x -> Ok x | Error x -> Error (v1066 x)
            let _run_target_args'_v1068 = v1076 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1077 : Result<std_string_String, std_string_String> = match v1063 with Ok x -> Ok x | Error x -> Error (v1066 x)
            let _run_target_args'_v1068 = v1077 
            #endif
#else
            let v1078 : Result<std_string_String, std_string_String> = match v1063 with Ok x -> Ok x | Error x -> Error (v1066 x)
            let _run_target_args'_v1068 = v1078 
            #endif
            let v1079 : Result<std_string_String, std_string_String> = _run_target_args'_v1068 
            let v1082 : (std_string_String -> US30) = method136()
            let v1083 : (std_string_String -> US30) = method137()
            let v1084 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1085 : US30 = Fable.Core.RustInterop.emitRustExpr struct (v1082, v1083, v1079) v1084 
            let v2493 : std_string_String =
                match v1085 with
                | US30_1(v1790) -> (* Error *)
                    let v2102 : unit = ()
                    let v2103 : (unit -> unit) = closure50(v5, v1790)
                    let v2104 : unit = (fun () -> v2103 (); v2102) ()
                    let v2419 : string = $"\u001b[4;7m{v1790}\u001b[0m"
                    (* run_target_args'
                    let v2424 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2425 : string = "&*$0"
                    let v2426 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2419 v2425 
                    let _run_target_args'_v2424 = v2426 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2427 : string = "&*$0"
                    let v2428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2419 v2427 
                    let _run_target_args'_v2424 = v2428 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2429 : string = "&*$0"
                    let v2430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2419 v2429 
                    let _run_target_args'_v2424 = v2430 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2432 : Ref<Str> = v2419 |> unbox<Ref<Str>>
                    let _run_target_args'_v2424 = v2432 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2436 : Ref<Str> = v2419 |> unbox<Ref<Str>>
                    let _run_target_args'_v2424 = v2436 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2440 : Ref<Str> = v2419 |> unbox<Ref<Str>>
                    let _run_target_args'_v2424 = v2440 
                    #endif
#else
                    let v2444 : Ref<Str> = v2419 |> unbox<Ref<Str>>
                    let _run_target_args'_v2424 = v2444 
                    #endif
                    let v2447 : Ref<Str> = _run_target_args'_v2424 
                    (* run_target_args'
                    let v2460 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2461 : string = "String::from($0)"
                    let v2462 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2447 v2461 
                    let _run_target_args'_v2460 = v2462 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2463 : string = "String::from($0)"
                    let v2464 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2447 v2463 
                    let _run_target_args'_v2460 = v2464 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2465 : string = "String::from($0)"
                    let v2466 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2447 v2465 
                    let _run_target_args'_v2460 = v2466 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2468 : std_string_String = v2447 |> unbox<std_string_String>
                    let _run_target_args'_v2460 = v2468 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2472 : std_string_String = v2447 |> unbox<std_string_String>
                    let _run_target_args'_v2460 = v2472 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2476 : std_string_String = v2447 |> unbox<std_string_String>
                    let _run_target_args'_v2460 = v2476 
                    #endif
#else
                    let v2480 : std_string_String = v2447 |> unbox<std_string_String>
                    let _run_target_args'_v2460 = v2480 
                    #endif
                    let v2483 : std_string_String = _run_target_args'_v2460 
                    v2483
                | US30_0(v1086) -> (* Ok *)
                    let v1087 : string = "fable_library_rust::String_::fromString($0)"
                    let v1088 : string = Fable.Core.RustInterop.emitRustExpr v1086 v1087 
                    let v1089 : string = "encoding_rs::UTF_8"
                    let v1090 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1089 
                    let v1091 : string = "$0.encode(&*$1).0"
                    let v1092 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1090, v1088) v1091 
                    let v1093 : string = "$0.as_ref()"
                    let v1094 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1092 v1093 
                    let v1095 : string = "std::str::from_utf8($0)"
                    let v1096 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1094 v1095 
                    (* run_target_args'
                    let v1098 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1099 : string = "$0.unwrap()"
                    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1096 v1099 
                    let _run_target_args'_v1098 = v1100 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1101 : string = "$0.unwrap()"
                    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1096 v1101 
                    let _run_target_args'_v1098 = v1102 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1103 : string = "$0.unwrap()"
                    let v1104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1096 v1103 
                    let _run_target_args'_v1098 = v1104 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1105 : Ref<Str> = match v1096 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1098 = v1105 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1106 : Ref<Str> = match v1096 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1098 = v1106 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1107 : Ref<Str> = match v1096 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1098 = v1107 
                    #endif
#else
                    let v1108 : Ref<Str> = match v1096 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1098 = v1108 
                    #endif
                    let v1109 : Ref<Str> = _run_target_args'_v1098 
                    (* run_target_args'
                    let v1116 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1117 : string = "String::from($0)"
                    let v1118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1109 v1117 
                    let _run_target_args'_v1116 = v1118 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1119 : string = "String::from($0)"
                    let v1120 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1109 v1119 
                    let _run_target_args'_v1116 = v1120 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1121 : string = "String::from($0)"
                    let v1122 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1109 v1121 
                    let _run_target_args'_v1116 = v1122 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1124 : std_string_String = v1109 |> unbox<std_string_String>
                    let _run_target_args'_v1116 = v1124 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1128 : std_string_String = v1109 |> unbox<std_string_String>
                    let _run_target_args'_v1116 = v1128 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1132 : std_string_String = v1109 |> unbox<std_string_String>
                    let _run_target_args'_v1116 = v1132 
                    #endif
#else
                    let v1136 : std_string_String = v1109 |> unbox<std_string_String>
                    let _run_target_args'_v1116 = v1136 
                    #endif
                    let v1139 : std_string_String = _run_target_args'_v1116 
                    let v1148 : string = "fable_library_rust::String_::fromString($0)"
                    let v1149 : string = Fable.Core.RustInterop.emitRustExpr v1139 v1148 
                    let v1150 : string = $"> {v1149}"
                    if v5 then
                        let v1465 : unit = ()
                        let v1466 : (unit -> unit) = closure51(v1150)
                        let v1467 : unit = (fun () -> v1466 (); v1465) ()
                        ()
                    else
                        let v1786 : unit = ()
                        let v1787 : (unit -> unit) = closure10(v1150)
                        let v1788 : unit = (fun () -> v1787 (); v1786) ()
                        ()
                    v1139
            let v2494 : string = "$0"
            let v2495 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1065 v2494 
            let v2496 : string = "v2495.lock()"
            let v2497 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2496 
            (* run_target_args'
            let v2499 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2500 : string = "$0.unwrap()"
            let v2501 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2497 v2500 
            let _run_target_args'_v2499 = v2501 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2502 : string = "$0.unwrap()"
            let v2503 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2497 v2502 
            let _run_target_args'_v2499 = v2503 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2504 : string = "$0.unwrap()"
            let v2505 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2497 v2504 
            let _run_target_args'_v2499 = v2505 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2506 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2497 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2499 = v2506 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2507 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2497 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2499 = v2507 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2508 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2497 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2499 = v2508 
            #endif
#else
            let v2509 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2497 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2499 = v2509 
            #endif
            let v2510 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v2499 
            let v2513 : string = "&$0"
            let v2514 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2510 v2513 
            let v2515 : string = "$0.send($1)"
            let v2516 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v2514, v2493) v2515 
            let v2517 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method142()
            (* run_target_args'
            let v2519 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2520 : string = "$0.map_err(|x| $1(x))"
            let v2521 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2516, v2517) v2520 
            let _run_target_args'_v2519 = v2521 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2522 : string = "$0.map_err(|x| $1(x))"
            let v2523 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2516, v2517) v2522 
            let _run_target_args'_v2519 = v2523 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2524 : string = "$0.map_err(|x| $1(x))"
            let v2525 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2516, v2517) v2524 
            let _run_target_args'_v2519 = v2525 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2526 : Result<unit, std_string_String> = match v2516 with Ok x -> Ok x | Error x -> Error (v2517 x)
            let _run_target_args'_v2519 = v2526 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2527 : Result<unit, std_string_String> = match v2516 with Ok x -> Ok x | Error x -> Error (v2517 x)
            let _run_target_args'_v2519 = v2527 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2528 : Result<unit, std_string_String> = match v2516 with Ok x -> Ok x | Error x -> Error (v2517 x)
            let _run_target_args'_v2519 = v2528 
            #endif
#else
            let v2529 : Result<unit, std_string_String> = match v2516 with Ok x -> Ok x | Error x -> Error (v2517 x)
            let _run_target_args'_v2519 = v2529 
            #endif
            let v2530 : Result<unit, std_string_String> = _run_target_args'_v2519 
            let v2533 : string = "$0"
            let v2534 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v2530 v2533 
            let v2535 : string = "true; $0 }); //"
            let v2536 : bool = Fable.Core.RustInterop.emitRustExpr v2534 v2535 
            let v2537 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v2538 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v2537 
            let v2539 : Result<unit, string> = method143(v2538)
            let v2540 : string = ""
            let v2541 : string = "}"
            let v2542 : string = v2540 + v2541 
            let x = v2539 //
            let v2543 : _ = x
            let v2544 : unit = ()
            (* run_target_args'
            let v2545 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2546 : string = $"true; let _fix_closure_v2544 = $0"
            let v2547 : bool = Fable.Core.RustInterop.emitRustExpr v2543 v2546 
            let _run_target_args'_v2545 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2548 : string = $"true; let _fix_closure_v2544 = $0"
            let v2549 : bool = Fable.Core.RustInterop.emitRustExpr v2543 v2548 
            let _run_target_args'_v2545 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2550 : string = $"true; let _fix_closure_v2544 = $0"
            let v2551 : bool = Fable.Core.RustInterop.emitRustExpr v2543 v2550 
            let _run_target_args'_v2545 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v2545 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v2545 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v2545 = false 
            #endif
#else
            let _run_target_args'_v2545 = false 
            #endif
            let v2552 : bool = _run_target_args'_v2545 
            let v2553 : string = $"true; _fix_closure_v2544 " + v2542 + "); " + v2540 + " // rust.fix_closure'"
            let v2554 : bool = Fable.Core.RustInterop.emitRustExpr () v2553 
            let v2555 : string = "__spawn"
            let v2556 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v2555 
            let v2557 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v2558 : bool = Fable.Core.RustInterop.emitRustExpr () v2557 
            let v2559 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v2560 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v980 v2559 
            let v2561 : string = "std::io::BufReader::new($0)"
            let v2562 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v2560 v2561 
            let v2563 : string = "std::io::BufRead::lines(v2562)"
            let v2564 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2563 
            let v2565 : string = "true; let mut v2564 = v2564; let _iter_try_for_each = v2564.try_for_each(|x| { //"
            let v2566 : bool = Fable.Core.RustInterop.emitRustExpr () v2565 
            let v2567 : string = "x"
            let v2568 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v2567 
            let v2569 : string = "$0.clone()"
            let v2570 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1045 v2569 
            let v2571 : (std_io_Error -> std_string_String) = method77()
            (* run_target_args'
            let v2573 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2574 : string = "$0.map_err(|x| $1(x))"
            let v2575 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2568, v2571) v2574 
            let _run_target_args'_v2573 = v2575 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2576 : string = "$0.map_err(|x| $1(x))"
            let v2577 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2568, v2571) v2576 
            let _run_target_args'_v2573 = v2577 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2578 : string = "$0.map_err(|x| $1(x))"
            let v2579 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2568, v2571) v2578 
            let _run_target_args'_v2573 = v2579 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2580 : Result<std_string_String, std_string_String> = match v2568 with Ok x -> Ok x | Error x -> Error (v2571 x)
            let _run_target_args'_v2573 = v2580 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2581 : Result<std_string_String, std_string_String> = match v2568 with Ok x -> Ok x | Error x -> Error (v2571 x)
            let _run_target_args'_v2573 = v2581 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2582 : Result<std_string_String, std_string_String> = match v2568 with Ok x -> Ok x | Error x -> Error (v2571 x)
            let _run_target_args'_v2573 = v2582 
            #endif
#else
            let v2583 : Result<std_string_String, std_string_String> = match v2568 with Ok x -> Ok x | Error x -> Error (v2571 x)
            let _run_target_args'_v2573 = v2583 
            #endif
            let v2584 : Result<std_string_String, std_string_String> = _run_target_args'_v2573 
            let v2587 : (std_string_String -> US30) = method136()
            let v2588 : (std_string_String -> US30) = method137()
            let v2589 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v2590 : US30 = Fable.Core.RustInterop.emitRustExpr struct (v2587, v2588, v2584) v2589 
            let v4061 : std_string_String =
                match v2590 with
                | US30_1(v3362) -> (* Error *)
                    let v3672 : unit = ()
                    let v3673 : (unit -> unit) = closure50(v5, v3362)
                    let v3674 : unit = (fun () -> v3673 (); v3672) ()
                    let v3987 : string = $"\u001b[4;7m{v3362}\u001b[0m"
                    (* run_target_args'
                    let v3992 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3993 : string = "&*$0"
                    let v3994 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3987 v3993 
                    let _run_target_args'_v3992 = v3994 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3995 : string = "&*$0"
                    let v3996 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3987 v3995 
                    let _run_target_args'_v3992 = v3996 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3997 : string = "&*$0"
                    let v3998 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3987 v3997 
                    let _run_target_args'_v3992 = v3998 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4000 : Ref<Str> = v3987 |> unbox<Ref<Str>>
                    let _run_target_args'_v3992 = v4000 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4004 : Ref<Str> = v3987 |> unbox<Ref<Str>>
                    let _run_target_args'_v3992 = v4004 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4008 : Ref<Str> = v3987 |> unbox<Ref<Str>>
                    let _run_target_args'_v3992 = v4008 
                    #endif
#else
                    let v4012 : Ref<Str> = v3987 |> unbox<Ref<Str>>
                    let _run_target_args'_v3992 = v4012 
                    #endif
                    let v4015 : Ref<Str> = _run_target_args'_v3992 
                    (* run_target_args'
                    let v4028 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4029 : string = "String::from($0)"
                    let v4030 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4015 v4029 
                    let _run_target_args'_v4028 = v4030 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4031 : string = "String::from($0)"
                    let v4032 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4015 v4031 
                    let _run_target_args'_v4028 = v4032 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4033 : string = "String::from($0)"
                    let v4034 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4015 v4033 
                    let _run_target_args'_v4028 = v4034 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4036 : std_string_String = v4015 |> unbox<std_string_String>
                    let _run_target_args'_v4028 = v4036 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4040 : std_string_String = v4015 |> unbox<std_string_String>
                    let _run_target_args'_v4028 = v4040 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4044 : std_string_String = v4015 |> unbox<std_string_String>
                    let _run_target_args'_v4028 = v4044 
                    #endif
#else
                    let v4048 : std_string_String = v4015 |> unbox<std_string_String>
                    let _run_target_args'_v4028 = v4048 
                    #endif
                    let v4051 : std_string_String = _run_target_args'_v4028 
                    v4051
                | US30_0(v2591) -> (* Ok *)
                    let v2592 : string = "fable_library_rust::String_::fromString($0)"
                    let v2593 : string = Fable.Core.RustInterop.emitRustExpr v2591 v2592 
                    let v2594 : string = "encoding_rs::UTF_8"
                    let v2595 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v2594 
                    let v2596 : string = "$0.encode(&*$1).0"
                    let v2597 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v2595, v2593) v2596 
                    let v2598 : string = "$0.as_ref()"
                    let v2599 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v2597 v2598 
                    let v2600 : string = "std::str::from_utf8($0)"
                    let v2601 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v2599 v2600 
                    (* run_target_args'
                    let v2603 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2604 : string = "$0.unwrap()"
                    let v2605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2601 v2604 
                    let _run_target_args'_v2603 = v2605 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2606 : string = "$0.unwrap()"
                    let v2607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2601 v2606 
                    let _run_target_args'_v2603 = v2607 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2608 : string = "$0.unwrap()"
                    let v2609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2601 v2608 
                    let _run_target_args'_v2603 = v2609 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2610 : Ref<Str> = match v2601 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2603 = v2610 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2611 : Ref<Str> = match v2601 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2603 = v2611 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2612 : Ref<Str> = match v2601 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2603 = v2612 
                    #endif
#else
                    let v2613 : Ref<Str> = match v2601 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2603 = v2613 
                    #endif
                    let v2614 : Ref<Str> = _run_target_args'_v2603 
                    (* run_target_args'
                    let v2621 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2622 : string = "String::from($0)"
                    let v2623 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2614 v2622 
                    let _run_target_args'_v2621 = v2623 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2624 : string = "String::from($0)"
                    let v2625 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2614 v2624 
                    let _run_target_args'_v2621 = v2625 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2626 : string = "String::from($0)"
                    let v2627 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2614 v2626 
                    let _run_target_args'_v2621 = v2627 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2629 : std_string_String = v2614 |> unbox<std_string_String>
                    let _run_target_args'_v2621 = v2629 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2633 : std_string_String = v2614 |> unbox<std_string_String>
                    let _run_target_args'_v2621 = v2633 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2637 : std_string_String = v2614 |> unbox<std_string_String>
                    let _run_target_args'_v2621 = v2637 
                    #endif
#else
                    let v2641 : std_string_String = v2614 |> unbox<std_string_String>
                    let _run_target_args'_v2621 = v2641 
                    #endif
                    let v2644 : std_string_String = _run_target_args'_v2621 
                    let v2653 : string = "fable_library_rust::String_::fromString($0)"
                    let v2654 : string = Fable.Core.RustInterop.emitRustExpr v2644 v2653 
                    let v2655 : string = $"! {v2654}"
                    if v5 then
                        let v2967 : unit = ()
                        let v2968 : (unit -> unit) = closure51(v2655)
                        let v2969 : unit = (fun () -> v2968 (); v2967) ()
                        ()
                    else
                        let v3285 : unit = ()
                        let v3286 : (unit -> unit) = closure10(v2655)
                        let v3287 : unit = (fun () -> v3286 (); v3285) ()
                        ()
                    let v3289 : string = $"\u001b[4;7m{v2644}\u001b[0m"
                    (* run_target_args'
                    let v3294 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3295 : string = "&*$0"
                    let v3296 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3289 v3295 
                    let _run_target_args'_v3294 = v3296 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3297 : string = "&*$0"
                    let v3298 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3289 v3297 
                    let _run_target_args'_v3294 = v3298 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3299 : string = "&*$0"
                    let v3300 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3289 v3299 
                    let _run_target_args'_v3294 = v3300 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3302 : Ref<Str> = v3289 |> unbox<Ref<Str>>
                    let _run_target_args'_v3294 = v3302 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3306 : Ref<Str> = v3289 |> unbox<Ref<Str>>
                    let _run_target_args'_v3294 = v3306 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3310 : Ref<Str> = v3289 |> unbox<Ref<Str>>
                    let _run_target_args'_v3294 = v3310 
                    #endif
#else
                    let v3314 : Ref<Str> = v3289 |> unbox<Ref<Str>>
                    let _run_target_args'_v3294 = v3314 
                    #endif
                    let v3317 : Ref<Str> = _run_target_args'_v3294 
                    (* run_target_args'
                    let v3330 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3331 : string = "String::from($0)"
                    let v3332 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3317 v3331 
                    let _run_target_args'_v3330 = v3332 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3333 : string = "String::from($0)"
                    let v3334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3317 v3333 
                    let _run_target_args'_v3330 = v3334 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3335 : string = "String::from($0)"
                    let v3336 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3317 v3335 
                    let _run_target_args'_v3330 = v3336 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3338 : std_string_String = v3317 |> unbox<std_string_String>
                    let _run_target_args'_v3330 = v3338 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3342 : std_string_String = v3317 |> unbox<std_string_String>
                    let _run_target_args'_v3330 = v3342 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3346 : std_string_String = v3317 |> unbox<std_string_String>
                    let _run_target_args'_v3330 = v3346 
                    #endif
#else
                    let v3350 : std_string_String = v3317 |> unbox<std_string_String>
                    let _run_target_args'_v3330 = v3350 
                    #endif
                    let v3353 : std_string_String = _run_target_args'_v3330 
                    v3353
            let v4062 : string = "$0"
            let v4063 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2570 v4062 
            let v4064 : string = "v4063.lock()"
            let v4065 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v4064 
            (* run_target_args'
            let v4067 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4068 : string = "$0.unwrap()"
            let v4069 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4065 v4068 
            let _run_target_args'_v4067 = v4069 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4070 : string = "$0.unwrap()"
            let v4071 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4065 v4070 
            let _run_target_args'_v4067 = v4071 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4072 : string = "$0.unwrap()"
            let v4073 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4065 v4072 
            let _run_target_args'_v4067 = v4073 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4074 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4065 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4067 = v4074 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4075 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4065 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4067 = v4075 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4076 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4065 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4067 = v4076 
            #endif
#else
            let v4077 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4065 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4067 = v4077 
            #endif
            let v4078 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v4067 
            let v4081 : string = "&$0"
            let v4082 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4078 v4081 
            let v4083 : string = "$0.send($1)"
            let v4084 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v4082, v4061) v4083 
            let v4085 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method142()
            (* run_target_args'
            let v4087 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4088 : string = "$0.map_err(|x| $1(x))"
            let v4089 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4084, v4085) v4088 
            let _run_target_args'_v4087 = v4089 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4090 : string = "$0.map_err(|x| $1(x))"
            let v4091 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4084, v4085) v4090 
            let _run_target_args'_v4087 = v4091 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4092 : string = "$0.map_err(|x| $1(x))"
            let v4093 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4084, v4085) v4092 
            let _run_target_args'_v4087 = v4093 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4094 : Result<unit, std_string_String> = match v4084 with Ok x -> Ok x | Error x -> Error (v4085 x)
            let _run_target_args'_v4087 = v4094 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4095 : Result<unit, std_string_String> = match v4084 with Ok x -> Ok x | Error x -> Error (v4085 x)
            let _run_target_args'_v4087 = v4095 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4096 : Result<unit, std_string_String> = match v4084 with Ok x -> Ok x | Error x -> Error (v4085 x)
            let _run_target_args'_v4087 = v4096 
            #endif
#else
            let v4097 : Result<unit, std_string_String> = match v4084 with Ok x -> Ok x | Error x -> Error (v4085 x)
            let _run_target_args'_v4087 = v4097 
            #endif
            let v4098 : Result<unit, std_string_String> = _run_target_args'_v4087 
            let v4101 : string = "$0"
            let v4102 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v4098 v4101 
            let v4103 : string = "true; $0 }); //"
            let v4104 : bool = Fable.Core.RustInterop.emitRustExpr v4102 v4103 
            let v4105 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v4106 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v4105 
            let v4107 : Result<unit, string> = method143(v4106)
            let v4108 : string = v2540 + v2541 
            let x = v4107 //
            let v4109 : _ = x
            let v4110 : unit = ()
            (* run_target_args'
            let v4111 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4112 : string = $"true; let _fix_closure_v4110 = $0"
            let v4113 : bool = Fable.Core.RustInterop.emitRustExpr v4109 v4112 
            let _run_target_args'_v4111 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4114 : string = $"true; let _fix_closure_v4110 = $0"
            let v4115 : bool = Fable.Core.RustInterop.emitRustExpr v4109 v4114 
            let _run_target_args'_v4111 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4116 : string = $"true; let _fix_closure_v4110 = $0"
            let v4117 : bool = Fable.Core.RustInterop.emitRustExpr v4109 v4116 
            let _run_target_args'_v4111 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v4111 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v4111 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v4111 = false 
            #endif
#else
            let _run_target_args'_v4111 = false 
            #endif
            let v4118 : bool = _run_target_args'_v4111 
            let v4119 : string = $"true; _fix_closure_v4110 " + v4108 + "); " + v2540 + " // rust.fix_closure'"
            let v4120 : bool = Fable.Core.RustInterop.emitRustExpr () v4119 
            let v4121 : string = "__spawn"
            let v4122 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4121 
            let v4125 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US31) = method144()
            let v4126 : US31 option = v4 |> Option.map v4125 
            let v4146 : US31 = US31_1
            let v4147 : US31 = v4126 |> Option.defaultValue v4146 
            match v4147 with
            | US31_1 -> (* None *)
                ()
            | US31_0(v4151) -> (* Some *)
                let v4152 : string = "$0"
                let v4153 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1030 v4152 
                let v4154 : string = "v4153.lock()"
                let v4155 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v4154 
                (* run_target_args'
                let v4157 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4158 : string = "$0.unwrap()"
                let v4159 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4155 v4158 
                let _run_target_args'_v4157 = v4159 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4160 : string = "$0.unwrap()"
                let v4161 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4155 v4160 
                let _run_target_args'_v4157 = v4161 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4162 : string = "$0.unwrap()"
                let v4163 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4155 v4162 
                let _run_target_args'_v4157 = v4163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4164 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4164 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4165 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4165 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4166 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4166 
                #endif
#else
                let v4167 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4167 
                #endif
                let v4168 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v4157 
                let v4171 : std_sync_MutexGuard<std_process_ChildStdin option> = method145(v4168)
                let v4172 : string = "true; let mut v4171 = v4171"
                let v4173 : bool = Fable.Core.RustInterop.emitRustExpr () v4172 
                let v4174 : string = "&mut $0"
                let v4175 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v4171 v4174 
                let v4176 : string = "Option::take($0)"
                let v4177 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v4175 v4176 
                let v4178 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v4179 : bool = Fable.Core.RustInterop.emitRustExpr v4177 v4178 
                let v4180 : string = "x"
                let v4181 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v4180 
                let v4182 : string = "std::sync::Mutex::new(v4181)"
                let v4183 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v4182 
                let v4184 : string = "std::sync::Arc::new(v4183)"
                let v4185 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v4184 
                let v4186 : string = "true; $0 })"
                let v4187 : bool = Fable.Core.RustInterop.emitRustExpr v4185 v4186 
                let v4188 : string = "_optionm_map_"
                let v4189 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v4188 
                let v4192 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US32) = method146()
                let v4193 : US32 option = v4189 |> Option.map v4192 
                let v4213 : US32 = US32_1
                let v4214 : US32 = v4193 |> Option.defaultValue v4213 
                match v4214 with
                | US32_1 -> (* None *)
                    ()
                | US32_0(v4218) -> (* Some *)
                    v4151 v4218
                    let v4219 : string = "$0"
                    let v4220 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4218 v4219 
                    let v4221 : string = "v4220.lock()"
                    let v4222 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v4221 
                    (* run_target_args'
                    let v4224 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4225 : string = "$0.unwrap()"
                    let v4226 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4222 v4225 
                    let _run_target_args'_v4224 = v4226 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4227 : string = "$0.unwrap()"
                    let v4228 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4222 v4227 
                    let _run_target_args'_v4224 = v4228 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4229 : string = "$0.unwrap()"
                    let v4230 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4222 v4229 
                    let _run_target_args'_v4224 = v4230 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4231 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4232 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4232 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4233 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4233 
                    #endif
#else
                    let v4234 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4234 
                    #endif
                    let v4235 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v4224 
                    let v4238 : std_sync_MutexGuard<std_process_ChildStdin> = method147(v4235)
                    let v4239 : string = "true; let mut v4238 = v4238"
                    let v4240 : bool = Fable.Core.RustInterop.emitRustExpr () v4239 
                    let v4241 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v4242 : bool = Fable.Core.RustInterop.emitRustExpr v4238 v4241 
                    ()
            let v4243 : string = "$0"
            let v4244 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v900 v4243 
            let v4245 : string = "v4244.lock()"
            let v4246 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v4245 
            (* run_target_args'
            let v4248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4249 : string = "$0.unwrap()"
            let v4250 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4246 v4249 
            let _run_target_args'_v4248 = v4250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4251 : string = "$0.unwrap()"
            let v4252 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4246 v4251 
            let _run_target_args'_v4248 = v4252 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4253 : string = "$0.unwrap()"
            let v4254 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4246 v4253 
            let _run_target_args'_v4248 = v4254 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4255 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4255 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4256 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4256 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4257 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4257 
            #endif
#else
            let v4258 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4258 
            #endif
            let v4259 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v4248 
            let v4262 : std_sync_MutexGuard<std_process_Child option> = method131(v4259)
            let v4263 : string = "true; let mut v4262 = v4262"
            let v4264 : bool = Fable.Core.RustInterop.emitRustExpr () v4263 
            let v4265 : string = "&mut $0"
            let v4266 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v4262 v4265 
            let v4267 : string = "Option::take($0)"
            let v4268 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v4266 v4267 
            let v4269 : string = "$0.unwrap()"
            let v4270 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v4268 v4269 
            let v4271 : string = "$0.wait_with_output()"
            let v4272 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4270 v4271 
            let v4273 : (std_io_Error -> std_string_String) = method77()
            (* run_target_args'
            let v4275 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4276 : string = "$0.map_err(|x| $1(x))"
            let v4277 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4272, v4273) v4276 
            let _run_target_args'_v4275 = v4277 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4278 : string = "$0.map_err(|x| $1(x))"
            let v4279 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4272, v4273) v4278 
            let _run_target_args'_v4275 = v4279 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4280 : string = "$0.map_err(|x| $1(x))"
            let v4281 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4272, v4273) v4280 
            let _run_target_args'_v4275 = v4281 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4282 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4282 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4283 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4283 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4284 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4284 
            #endif
#else
            let v4285 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4285 
            #endif
            let v4286 : Result<std_process_Output, std_string_String> = _run_target_args'_v4275 
            let v4289 : string = "v4122"
            let v4290 : string = v4289 + v2540 
            let v4291 : string = v4290 + v2540 
            let v4292 : string = "v2556"
            let v4293 : string = ", "
            let v4294 : string = v4292 + v4293 
            let v4295 : string = v4294 + v4291 
            let v4296 : string = "vec![" + v4295 + "]"
            let v4297 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v4296 
            let v4298 : string = "true; $0.into_iter().for_each(|x| { //"
            let v4299 : bool = Fable.Core.RustInterop.emitRustExpr v4297 v4298 
            let v4300 : string = "x"
            let v4301 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4300 
            let v4302 : string = "std::thread::JoinHandle::join($0)"
            let v4303 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v4301 v4302 
            (* run_target_args'
            let v4305 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4306 : string = "$0.unwrap()"
            let v4307 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4303 v4306 
            let _run_target_args'_v4305 = v4307 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4308 : string = "$0.unwrap()"
            let v4309 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4303 v4308 
            let _run_target_args'_v4305 = v4309 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4310 : string = "$0.unwrap()"
            let v4311 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4303 v4310 
            let _run_target_args'_v4305 = v4311 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4312 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4312 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4313 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4313 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4314 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4314 
            #endif
#else
            let v4315 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4315 
            #endif
            let v4316 : Result<unit, string> = _run_target_args'_v4305 
            (* run_target_args'
            let v4319 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4320 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4316 v4320 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4321 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4316 v4321 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4322 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4316 v4322 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v4323 : string = $"true"
            let v4324 : bool = Fable.Core.RustInterop.emitRustExpr () v4323 
            let v4325 : string = "true; }}); { //"
            let v4326 : bool = Fable.Core.RustInterop.emitRustExpr () v4325 
            let v4327 : (std_process_Output -> US33) = method148()
            let v4328 : (std_string_String -> US33) = method149()
            let v4330 : US33 = match v4286 with Ok x -> v4327 x | Error x -> v4328 x
            match v4330 with
            | US33_1(v4450) -> (* Error *)
                let v4764 : unit = ()
                let v4765 : (unit -> unit) = closure57(v0, v1, v2, v3, v4, v5, v6, v29, v126, v4450)
                let v4766 : unit = (fun () -> v4765 (); v4764) ()
                let v5083 : US8 = US8_0(v4450)
                let v5084 : US29 = US29_1
                struct (-2, v5083, v5084)
            | US33_0(v4333) -> (* Ok *)
                let v4334 : string = "$0.status"
                let v4335 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v4333 v4334 
                let v4336 : string = "$0.code()"
                let v4337 : int32 option = Fable.Core.RustInterop.emitRustExpr v4335 v4336 
                let v4340 : (int32 -> US34) = method151()
                let v4341 : US34 option = v4337 |> Option.map v4340 
                let v4361 : US34 = US34_1
                let v4362 : US34 = v4341 |> Option.defaultValue v4361 
                match v4362 with
                | US34_1 -> (* None *)
                    let v4369 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v4374 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4375 : string = "&*$0"
                    let v4376 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4369 v4375 
                    let _run_target_args'_v4374 = v4376 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4377 : string = "&*$0"
                    let v4378 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4369 v4377 
                    let _run_target_args'_v4374 = v4378 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4379 : string = "&*$0"
                    let v4380 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4369 v4379 
                    let _run_target_args'_v4374 = v4380 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4382 : Ref<Str> = v4369 |> unbox<Ref<Str>>
                    let _run_target_args'_v4374 = v4382 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4386 : Ref<Str> = v4369 |> unbox<Ref<Str>>
                    let _run_target_args'_v4374 = v4386 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4390 : Ref<Str> = v4369 |> unbox<Ref<Str>>
                    let _run_target_args'_v4374 = v4390 
                    #endif
#else
                    let v4394 : Ref<Str> = v4369 |> unbox<Ref<Str>>
                    let _run_target_args'_v4374 = v4394 
                    #endif
                    let v4397 : Ref<Str> = _run_target_args'_v4374 
                    (* run_target_args'
                    let v4410 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4411 : string = "String::from($0)"
                    let v4412 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4397 v4411 
                    let _run_target_args'_v4410 = v4412 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4413 : string = "String::from($0)"
                    let v4414 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4397 v4413 
                    let _run_target_args'_v4410 = v4414 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4415 : string = "String::from($0)"
                    let v4416 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4397 v4415 
                    let _run_target_args'_v4410 = v4416 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4418 : std_string_String = v4397 |> unbox<std_string_String>
                    let _run_target_args'_v4410 = v4418 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4422 : std_string_String = v4397 |> unbox<std_string_String>
                    let _run_target_args'_v4410 = v4422 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4426 : std_string_String = v4397 |> unbox<std_string_String>
                    let _run_target_args'_v4410 = v4426 
                    #endif
#else
                    let v4430 : std_string_String = v4397 |> unbox<std_string_String>
                    let _run_target_args'_v4410 = v4430 
                    #endif
                    let v4433 : std_string_String = _run_target_args'_v4410 
                    let v4442 : US8 = US8_0(v4433)
                    let v4443 : US29 = US29_0(v1051)
                    struct (-1, v4442, v4443)
                | US34_0(v4366) -> (* Some *)
                    let v4367 : US8 = US8_1
                    let v4368 : US29 = US29_0(v1051)
                    struct (v4366, v4367, v4368)
    let v5746 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v5735 with
        | US29_1 -> (* None *)
            let v5742 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v5742
        | US29_0(v5736) -> (* Some *)
            let v5738 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v5736 
            v5738
    let v5747 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v5748 : bool = Fable.Core.RustInterop.emitRustExpr v5746 v5747 
    let v5749 : string = "x"
    let v5750 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v5749 
    let v5751 : string = "$0"
    let v5752 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v5750 v5751 
    let v5753 : string = "v5752.lock()"
    let v5754 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v5753 
    (* run_target_args'
    let v5756 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5757 : string = "$0.unwrap()"
    let v5758 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5754 v5757 
    let _run_target_args'_v5756 = v5758 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5759 : string = "$0.unwrap()"
    let v5760 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5754 v5759 
    let _run_target_args'_v5756 = v5760 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5761 : string = "$0.unwrap()"
    let v5762 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5754 v5761 
    let _run_target_args'_v5756 = v5762 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5763 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5754 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5756 = v5763 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5764 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5754 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5756 = v5764 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5765 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5754 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5756 = v5765 
    #endif
#else
    let v5766 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5754 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5756 = v5766 
    #endif
    let v5767 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v5756 
    let v5770 : string = "$0.iter()"
    let v5771 : _ = Fable.Core.RustInterop.emitRustExpr v5767 v5770 
    let v5772 : string = "$0.collect::<Vec<_>>()"
    let v5773 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5771 v5772 
    let v5774 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v5775 : bool = Fable.Core.RustInterop.emitRustExpr v5773 v5774 
    let v5776 : string = "x"
    let v5777 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5776 
    let v5778 : string = "fable_library_rust::String_::fromString($0)"
    let v5779 : string = Fable.Core.RustInterop.emitRustExpr v5777 v5778 
    let v5780 : string = "true; $0 }).collect::<Vec<_>>()"
    let v5781 : bool = Fable.Core.RustInterop.emitRustExpr v5779 v5780 
    let v5782 : string = "_vec_map"
    let v5783 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5782 
    let v5784 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v5785 : (string []) = Fable.Core.RustInterop.emitRustExpr v5783 v5784 
    let v5787 : string seq = v5785 |> Seq.ofArray
    let v5792 : string = method73()
    let v5793 : (string -> (string seq -> string)) = String.concat
    let v5794 : (string seq -> string) = v5793 v5792
    let v5795 : string = v5794 v5787
    let v5799 : string = "true; $0 })"
    let v5800 : bool = Fable.Core.RustInterop.emitRustExpr v5795 v5799 
    let v5801 : string = "_optionm_map_"
    let v5802 : string option = Fable.Core.RustInterop.emitRustExpr () v5801 
    let v5809 : US5 =
        match v5734 with
        | US8_1 -> (* None *)
            US5_1
        | US8_0(v5803) -> (* Some *)
            let v5804 : string = "fable_library_rust::String_::fromString($0)"
            let v5805 : string = Fable.Core.RustInterop.emitRustExpr v5803 v5804 
            US5_0(v5805)
    let v5813 : string =
        match v5809 with
        | US5_1 -> (* None *)
            let v5811 : string = ""
            v5811
        | US5_0(v5810) -> (* Some *)
            v5810
    let v5815 : string = v5802 |> Option.defaultValue v5813 
    let v6130 : unit = ()
    let v6131 : (unit -> unit) = closure59(v5733, v5815)
    let v6132 : unit = (fun () -> v6131 (); v6130) ()
    let v6449 : (int32 * string) = v5733, v5815 
    v6449 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v764 <- Some x
    let v6452 : (int32 * string) = match _capture_v764 with Some x -> x | None -> failwith "base.capture / _capture_v764=None"
    let (a, b) = v6452 
    let v12139 : int32 = a
    let v12140 : string = b
    let _run_target_args'_v15 = struct (v12139, v12140) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v12147 : int32, v12148 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v12147, v12148) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v12155 : int32, v12156 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v12155, v12156) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v12163 : int32, v12164 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v12163, v12164) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v12171 : int32, v12172 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v12171, v12172) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v12179 : int32, v12180 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v12179, v12180) 
    #endif
#else
    let v12185 : Async<struct (int32 * string)> = method154(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v12194 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v12197 : int32, v12198 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12194 = struct (v12197, v12198) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v12205 : int32, v12206 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12194 = struct (v12205, v12206) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v12213 : int32, v12214 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12194 = struct (v12213, v12214) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v12221 : int32, v12222 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12194 = struct (v12221, v12222) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12227 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v12228 : int32, v12229 : string) = v12227 v12185
    let _run_target_args'_v12194 = struct (v12228, v12229) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12230 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v12231 : int32, v12232 : string) = v12230 v12185
    let _run_target_args'_v12194 = struct (v12231, v12232) 
    #endif
#else
    let v12233 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v12234 : int32, v12235 : string) = v12233 v12185
    let _run_target_args'_v12194 = struct (v12234, v12235) 
    #endif
    let struct (v12236 : int32, v12237 : string) = _run_target_args'_v12194 
    let _run_target_args'_v15 = struct (v12236, v12237) 
    #endif
    let struct (v12248 : int32, v12249 : string) = _run_target_args'_v15 
    struct (v12248, v12249)
and method174 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "exit_code"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "run_result"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v84}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "new_code_path"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v2}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v4, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v226 : string = " }"
    let v227 : string = $"{v226}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v4, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v243 : string = v4.l0
    v243
and method173 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method174(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / check error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure68 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method80()
            let v126 : string = method173(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method176 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "exit_code"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v67 : string = $"{v0}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "run_result"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v139 : string = $"{v1}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v156 : string = $"{v85}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v5, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v174 : string = "new_code_path"
    let v175 : string = $"{v174}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v5, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v46}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v5, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v209 : string = $"{v2}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v5, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v226 : string = $"{v85}"
    let v234 : unit = ()
    let v235 : (unit -> unit) = closure7(v5, v226)
    let v236 : unit = (fun () -> v235 (); v234) ()
    let v244 : string = "external_command"
    let v245 : string = $"{v244}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v5, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v262 : string = $"{v46}"
    let v270 : unit = ()
    let v271 : (unit -> unit) = closure7(v5, v262)
    let v272 : unit = (fun () -> v271 (); v270) ()
    let v279 : string = $"{v3}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v5, v279)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v297 : string = " }"
    let v298 : string = $"{v297}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v5, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v314 : string = v5.l0
    v314
and method175 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method176(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_gleam / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure69 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method175(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method174(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / esbuild error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method80()
            let v126 : string = method177(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method178 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method174(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / trunk error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure71 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method80()
            let v126 : string = method178(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and closure72 () (v0 : string) : US5 =
    US5_0(v0)
and closure73 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method73()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method180 (v0 : exn, v1 : std_string_String, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "run_result'"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    (* run_target_args'
    let v181 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v182 : string = "format!(\"{:#?}\", $0)"
    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v182 
    let v184 : string = "fable_library_rust::String_::fromString($0)"
    let v185 : string = Fable.Core.RustInterop.emitRustExpr v183 v184 
    let _run_target_args'_v181 = v185 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v181 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v181 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v195 : string = $"%A{v1}"
    let _run_target_args'_v181 = v195 
    #endif
#if FABLE_COMPILER_PYTHON
    let v199 : string = $"%A{v1}"
    let _run_target_args'_v181 = v199 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v1}"
    let _run_target_args'_v181 = v203 
    #endif
#else
    let v207 : string = $"%A{v1}"
    let _run_target_args'_v181 = v207 
    #endif
    let v210 : string = _run_target_args'_v181 
    let v220 : string = $"{v210}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v5, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v237 : string = $"{v124}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v5, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v255 : string = "new_code_path"
    let v256 : string = $"{v255}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v5, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v46}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v5, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v290 : string = $"{v2}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v5, v290)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v307 : string = $"{v124}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v5, v307)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v325 : string = "external_command"
    let v326 : string = $"{v325}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v5, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v343 : string = $"{v46}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v5, v343)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v360 : string = $"{v3}"
    let v368 : unit = ()
    let v369 : (unit -> unit) = closure7(v5, v360)
    let v370 : unit = (fun () -> v369 (); v368) ()
    let v378 : string = " }"
    let v379 : string = $"{v378}"
    let v387 : unit = ()
    let v388 : (unit -> unit) = closure7(v5, v379)
    let v389 : unit = (fun () -> v388 (); v387) ()
    let v395 : string = v5.l0
    v395
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_gleam / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure75 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method179(v107, v108, v109, v110, v111, v112, v125, v126, v3, v2, v0, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure74 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure75(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method181 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method181(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method182 () : string =
    let v0 : string = "py-path"
    v0
and method183 () : string =
    let v0 : string = "env"
    v0
and method185 (v0 : US39, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "env"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v64 : string = $"%A{v0}"
    let v68 : string = $"{v64}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v5, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "exit_code"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v46}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v143 : string = $"{v1}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v143)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v160 : string = $"{v86}"
    let v168 : unit = ()
    let v169 : (unit -> unit) = closure7(v5, v160)
    let v170 : unit = (fun () -> v169 (); v168) ()
    let v178 : string = "run_result"
    let v179 : string = $"{v178}"
    let v187 : unit = ()
    let v188 : (unit -> unit) = closure7(v5, v179)
    let v189 : unit = (fun () -> v188 (); v187) ()
    let v196 : string = $"{v46}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v5, v196)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v213 : string = $"{v2}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v5, v213)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v230 : string = $"{v86}"
    let v238 : unit = ()
    let v239 : (unit -> unit) = closure7(v5, v230)
    let v240 : unit = (fun () -> v239 (); v238) ()
    let v248 : string = "new_code_path"
    let v249 : string = $"{v248}"
    let v257 : unit = ()
    let v258 : (unit -> unit) = closure7(v5, v249)
    let v259 : unit = (fun () -> v258 (); v257) ()
    let v266 : string = $"{v46}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v5, v266)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v283 : string = $"{v3}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v5, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v301 : string = " }"
    let v302 : string = $"{v301}"
    let v310 : unit = ()
    let v311 : (unit -> unit) = closure7(v5, v302)
    let v312 : unit = (fun () -> v311 (); v310) ()
    let v318 : string = v5.l0
    v318
and method184 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US39, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method185(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / env install error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure77 (v0 : US39, v1 : string, v2 : string, v3 : int32) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method184(v107, v108, v109, v110, v111, v112, v125, v126, v0, v3, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure78 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method73()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method187 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "run_result"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "new_code_path"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "external_command"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method186 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method187(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method186(v107, v108, v109, v110, v111, v112, v125, v126, v3, v1, v0, v2)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method188 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method176(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method188(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method189 () : string =
    let v0 : string = "fs-path"
    v0
and method190 () : string =
    let v0 : string = "command"
    v0
and method191 () : string =
    let v0 : string = "path"
    v0
and method193 (v0 : string) : string =
    let v1 : string = method32()
    let v2 : string = method34(v1, v0)
    method67(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method193(v2)
and method192 () : (std_string_String -> string) =
    closure82()
and method194 () : string =
    let v0 : string = "retries"
    v0
and method195 () : string =
    let v0 : string = "working-directory"
    v0
and method198 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "exit_code"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "repl_result"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v84}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "retry"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v2}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v4, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v226 : string = " }"
    let v227 : string = $"{v226}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v4, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v243 : string = v4.l0
    v243
and method197 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method198(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.run / repl error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    let v67 : bool = v66 = false
    let v302 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method11()
            let v127 : string = $"{v1}/{v0}"
            let v128 : string = method197(v107, v108, v109, v110, v111, v112, v125, v126, v3, v2, v127)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v19 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and method196 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v8 : (struct (string * string) []) = [||]
    let v10 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v18 : string option = None
    let v21 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v22 : string = "TRACE_LEVEL"
    let v23 : string = "Verbose"
    let v24 : string = "AUTOMATION"
    let v25 : string = "True"
    let v26 : (struct (string * string) []) = [|struct (v22, v23); struct (v24, v25)|]
    let v37 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v33 : string option = None
            v33
        | US5_0(v27) -> (* Some *)
            let v29 : string option = Some v27 
            v29
    let v38 : bool = false
    let struct (v39 : int32, v40 : string) = method99(v21, v5, v26, v10, v14, v38, v37)
    let v41 : bool = v39 = 0
    let v43 : bool =
        if v41 then
            true
        else
            let v42 : bool = v3 >= v1
            v42
    if v43 then
        struct (v39, v40)
    else
        let v356 : unit = ()
        let v357 : (unit -> unit) = closure83(v1, v3, v40, v39)
        let v358 : unit = (fun () -> v357 (); v356) ()
        let v674 : uint8 = v3 + 1uy
        method196(v0, v1, v2, v674)
and method200 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "jupyter_result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method200(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib / jupyter nbconvert"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method199(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method202 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "pwsh_replace_html_result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method201 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method202(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib / html cell ids"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method201(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method204 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method203 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method204(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method203(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method205 () : string =
    let v0 : string = "cleanup"
    v0
and method206 () : string =
    let v0 : string = "wasm"
    v0
and method207 () : string =
    let v0 : string = "contract"
    v0
and method208 (v0 : string, v1 : string, v2 : US40) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "extension"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v63 : string = $"{v0}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v4, v63)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v81 : string = "; "
    let v82 : string = $"{v81}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v4, v82)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v100 : string = "code"
    let v101 : string = $"{v100}"
    let v109 : unit = ()
    let v110 : (unit -> unit) = closure7(v4, v101)
    let v111 : unit = (fun () -> v110 (); v109) ()
    let v118 : string = $"{v45}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v4, v118)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v135 : string = $"{v1}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v4, v135)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v152 : string = $"{v81}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v4, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v170 : string = "runtime"
    let v171 : string = $"{v170}"
    let v179 : unit = ()
    let v180 : (unit -> unit) = closure7(v4, v171)
    let v181 : unit = (fun () -> v180 (); v179) ()
    let v188 : string = $"{v45}"
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure7(v4, v188)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v205 : string = $"%A{v2}"
    let v209 : string = $"{v205}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v4, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v227 : string = " }"
    let v228 : string = $"{v227}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v4, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v244 : string = v4.l0
    v244
and method209 (v0 : US5, v1 : string, v2 : US43, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method34(v3, v4)
    let v6 : string = method34(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US43_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method34(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US42_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US42_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US42_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method34(v10, v42)
            method34(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method211 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method211(v0, v4, v2)
        let v6 : string = method34(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method212 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method212(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method210 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method76(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method34(v4, v7)
    let v9 : string = method44(v8)
    method74(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method211(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method122(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method212(v3, v35)
    let v37 : string list = []
    let v38 : string list = method122(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method34(v4, v58)
    let v60 : string = method44(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v65 : string = "\n"
    let v66 : string = v61 + v65 
    let v70 : string = v66 + v62 
    let v73 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v75 : string = v70 + v65 
    let v79 : string = v75 + v73 
    let v82 : string = $"    <LangVersion>preview</LangVersion>"
    let v84 : string = v79 + v65 
    let v88 : string = v84 + v82 
    let v91 : string = $"    <RollForward>Major</RollForward>"
    let v93 : string = v88 + v65 
    let v97 : string = v93 + v91 
    let v100 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v102 : string = v97 + v65 
    let v106 : string = v102 + v100 
    let v109 : string = $"    <PublishAot>false</PublishAot>"
    let v111 : string = v106 + v65 
    let v115 : string = v111 + v109 
    let v118 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v120 : string = v115 + v65 
    let v124 : string = v120 + v118 
    let v127 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v129 : string = v124 + v65 
    let v133 : string = v129 + v127 
    let v136 : string = $"    <SelfContained>true</SelfContained>"
    let v138 : string = v133 + v65 
    let v142 : string = v138 + v136 
    let v145 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v147 : string = v142 + v65 
    let v151 : string = v147 + v145 
    let v154 : string = $"    <OutputType>Exe</OutputType>"
    let v156 : string = v151 + v65 
    let v160 : string = v156 + v154 
    let v163 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v165 : string = v160 + v65 
    let v169 : string = v165 + v163 
    let v172 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v174 : string = v169 + v65 
    let v178 : string = v174 + v172 
    let v181 : string = $"</PropertyGroup>"
    let v183 : string = v178 + v65 
    let v187 : string = v183 + v181 
    let v190 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v192 : string = v187 + v65 
    let v196 : string = v192 + v190 
    let v199 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v201 : string = v196 + v65 
    let v205 : string = v201 + v199 
    let v208 : string = $"</PropertyGroup>"
    let v210 : string = v205 + v65 
    let v214 : string = v210 + v208 
    let v217 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v219 : string = v214 + v65 
    let v223 : string = v219 + v217 
    let v226 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v228 : string = v223 + v65 
    let v232 : string = v228 + v226 
    let v235 : string = $"</PropertyGroup>"
    let v237 : string = v232 + v65 
    let v241 : string = v237 + v235 
    let v244 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v246 : string = v241 + v65 
    let v250 : string = v246 + v244 
    let v253 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v255 : string = v250 + v65 
    let v259 : string = v255 + v253 
    let v262 : string = $"</PropertyGroup>"
    let v264 : string = v259 + v65 
    let v268 : string = v264 + v262 
    let v271 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v273 : string = v268 + v65 
    let v277 : string = v273 + v271 
    let v280 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v282 : string = v277 + v65 
    let v286 : string = v282 + v280 
    let v289 : string = $"</PropertyGroup>"
    let v291 : string = v286 + v65 
    let v295 : string = v291 + v289 
    let v298 : string = $"<ItemGroup>"
    let v300 : string = v295 + v65 
    let v304 : string = v300 + v298 
    let v307 : string = $"    {v32}"
    let v309 : string = v304 + v65 
    let v313 : string = v309 + v307 
    let v316 : string = $"    <Compile Include=\"{v9}\" />"
    let v318 : string = v313 + v65 
    let v322 : string = v318 + v316 
    let v325 : string = $"</ItemGroup>"
    let v327 : string = v322 + v65 
    let v331 : string = v327 + v325 
    let v334 : string = $"<ItemGroup>"
    let v336 : string = v331 + v65 
    let v340 : string = v336 + v334 
    let v343 : string = $"    {v55}"
    let v345 : string = v340 + v65 
    let v349 : string = v345 + v343 
    let v352 : string = $"</ItemGroup>"
    let v354 : string = v349 + v65 
    let v358 : string = v354 + v352 
    let v361 : string = $"</Project>"
    let v363 : string = v358 + v65 
    let v367 : string = v363 + v361 
    method74(v60, v367)
    v60
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US44 =
    US44_0(v0)
and method214 () : (chrono_DateTime<chrono_Utc> -> US44) =
    closure87()
and method215 () : string =
    let v0 : string = "hh:mm"
    v0
and method216 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method217 () : string =
    let v0 : string = "hhmm"
    v0
and method213 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v677 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v683 : System.DateTime = System.DateTime.UnixEpoch
    let v687 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v688 : System.DateTime = v687 v683
    let v692 : System.DateTimeKind = System.DateTimeKind.Local
    let v693 : System.DateTime = System.DateTime.SpecifyKind (v1, v692)
    let v697 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v698 : System.DateTime = v697 v693
    (* run_target_args'
    let v707 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v708 : (System.DateTime -> int64) = _.Ticks
    let v709 : int64 = v708 v698
    let _run_target_args'_v707 = v709 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v710 : (System.DateTime -> int64) = _.Ticks
    let v711 : int64 = v710 v698
    let _run_target_args'_v707 = v711 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v713 : int64 = null |> unbox<int64>
    let _run_target_args'_v707 = v713 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v716 : (System.DateTime -> int64) = _.Ticks
    let v717 : int64 = v716 v698
    let _run_target_args'_v707 = v717 
    #endif
#if FABLE_COMPILER_PYTHON
    let v718 : (System.DateTime -> int64) = _.Ticks
    let v719 : int64 = v718 v698
    let _run_target_args'_v707 = v719 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v720 : (System.DateTime -> int64) = _.Ticks
    let v721 : int64 = v720 v698
    let _run_target_args'_v707 = v721 
    #endif
#else
    let v722 : (System.DateTime -> int64) = _.Ticks
    let v723 : int64 = v722 v698
    let _run_target_args'_v707 = v723 
    #endif
    let v724 : int64 = _run_target_args'_v707 
    (* run_target_args'
    let v751 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v752 : (System.DateTime -> int64) = _.Ticks
    let v753 : int64 = v752 v688
    let _run_target_args'_v751 = v753 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v754 : (System.DateTime -> int64) = _.Ticks
    let v755 : int64 = v754 v688
    let _run_target_args'_v751 = v755 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v757 : int64 = null |> unbox<int64>
    let _run_target_args'_v751 = v757 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v760 : (System.DateTime -> int64) = _.Ticks
    let v761 : int64 = v760 v688
    let _run_target_args'_v751 = v761 
    #endif
#if FABLE_COMPILER_PYTHON
    let v762 : (System.DateTime -> int64) = _.Ticks
    let v763 : int64 = v762 v688
    let _run_target_args'_v751 = v763 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v764 : (System.DateTime -> int64) = _.Ticks
    let v765 : int64 = v764 v688
    let _run_target_args'_v751 = v765 
    #endif
#else
    let v766 : (System.DateTime -> int64) = _.Ticks
    let v767 : int64 = v766 v688
    let _run_target_args'_v751 = v767 
    #endif
    let v768 : int64 = _run_target_args'_v751 
    let v790 : int64 = v724 |> int64 
    let v794 : int64 = v768 |> int64 
    let v797 : int64 = v790 - v794
    let v798 : int64 = v797 / 10L
    let v799 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v800 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v798 v799 
    let v803 : (chrono_DateTime<chrono_Utc> -> US44) = method214()
    let v804 : US44 option = v800 |> Option.map v803 
    let v824 : US44 = US44_1
    let v825 : US44 = v804 |> Option.defaultValue v824 
    let v845 : US5 =
        match v825 with
        | US44_1 -> (* None *)
            US5_1
        | US44_0(v829) -> (* Some *)
            let v830 : string = "$0.naive_utc()"
            let v831 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v829 v830 
            let v832 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v833 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v831 v832 
            let v834 : string = "%Y%m%d-%H%M-%S%f"
            let v835 : string = "r#\"" + v834 + "\"#"
            let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v835 
            let v837 : string = "$0.format($1).to_string()"
            let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v833, v836) v837 
            let v839 : string = "fable_library_rust::String_::fromString($0)"
            let v840 : string = Fable.Core.RustInterop.emitRustExpr v838 v839 
            let v841 : string = $"{v840.[0..17]}-{v840.[18..21]}-{v840.[22]}"
            US5_0(v841)
    let v849 : string =
        match v845 with
        | US5_1 -> (* None *)
            let v847 : string = ""
            v847
        | US5_0(v846) -> (* Some *)
            v846
    (* run_target_args'
    let v854 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v855 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v856 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v855 
    let _run_target_args'_v854 = v856 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v858 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v858 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v862 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v862 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v866 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v866 
    #endif
#if FABLE_COMPILER_PYTHON
    let v870 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v870 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v873 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v854 = v873 
    #endif
#else
    let v874 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v854 = v874 
    #endif
    let v875 : System.TimeZoneInfo = _run_target_args'_v854 
    (* run_target_args'
    let v891 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v898 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v899 : (System.DateTime -> int64) = _.Ticks
    let v900 : int64 = v899 v698
    let _run_target_args'_v898 = v900 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v901 : (System.DateTime -> int64) = _.Ticks
    let v902 : int64 = v901 v698
    let _run_target_args'_v898 = v902 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v904 : int64 = null |> unbox<int64>
    let _run_target_args'_v898 = v904 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v907 : (System.DateTime -> int64) = _.Ticks
    let v908 : int64 = v907 v698
    let _run_target_args'_v898 = v908 
    #endif
#if FABLE_COMPILER_PYTHON
    let v909 : (System.DateTime -> int64) = _.Ticks
    let v910 : int64 = v909 v698
    let _run_target_args'_v898 = v910 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v911 : (System.DateTime -> int64) = _.Ticks
    let v912 : int64 = v911 v698
    let _run_target_args'_v898 = v912 
    #endif
#else
    let v913 : (System.DateTime -> int64) = _.Ticks
    let v914 : int64 = v913 v698
    let _run_target_args'_v898 = v914 
    #endif
    let v915 : int64 = _run_target_args'_v898 
    let v936 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v937 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v698, v915) v936 
    let v939 : System.TimeSpan = v937 |> System.TimeSpan 
    let _run_target_args'_v891 = v939 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v948 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v949 : (System.DateTime -> int64) = _.Ticks
    let v950 : int64 = v949 v698
    let _run_target_args'_v948 = v950 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v951 : (System.DateTime -> int64) = _.Ticks
    let v952 : int64 = v951 v698
    let _run_target_args'_v948 = v952 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v954 : int64 = null |> unbox<int64>
    let _run_target_args'_v948 = v954 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v957 : (System.DateTime -> int64) = _.Ticks
    let v958 : int64 = v957 v698
    let _run_target_args'_v948 = v958 
    #endif
#if FABLE_COMPILER_PYTHON
    let v959 : (System.DateTime -> int64) = _.Ticks
    let v960 : int64 = v959 v698
    let _run_target_args'_v948 = v960 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v961 : (System.DateTime -> int64) = _.Ticks
    let v962 : int64 = v961 v698
    let _run_target_args'_v948 = v962 
    #endif
#else
    let v963 : (System.DateTime -> int64) = _.Ticks
    let v964 : int64 = v963 v698
    let _run_target_args'_v948 = v964 
    #endif
    let v965 : int64 = _run_target_args'_v948 
    let v986 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v987 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v698, v965) v986 
    let v989 : System.TimeSpan = v987 |> System.TimeSpan 
    let _run_target_args'_v891 = v989 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v993 : US3 = US3_2
    let v994 : US4 = US4_4(v993)
    let v995 : string = $"date_time.get_utc_offset / target: {v994}"
    let v996 : System.TimeSpan = failwith<System.TimeSpan> v995
    let _run_target_args'_v891 = v996 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1000 : US3 = US3_0
    let v1001 : US4 = US4_5(v1000)
    let v1002 : string = $"date_time.get_utc_offset / target: {v1001}"
    let v1003 : System.TimeSpan = failwith<System.TimeSpan> v1002
    let _run_target_args'_v891 = v1003 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1007 : US3 = US3_0
    let v1008 : US4 = US4_6(v1007)
    let v1009 : string = $"date_time.get_utc_offset / target: {v1008}"
    let v1010 : System.TimeSpan = failwith<System.TimeSpan> v1009
    let _run_target_args'_v891 = v1010 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1013 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1018 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1019 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1020 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1019 
    let _run_target_args'_v1018 = v1020 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1022 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1022 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1026 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1026 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1030 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1030 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1034 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1034 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1037 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1018 = v1037 
    #endif
#else
    let v1038 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1018 = v1038 
    #endif
    let v1039 : System.TimeZoneInfo = _run_target_args'_v1018 
    let v1048 : (System.DateTime -> System.TimeSpan) = v1013 v1039
    let v1049 : System.TimeSpan = v1048 v698
    let _run_target_args'_v891 = v1049 
    #endif
#else
    let v1050 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1055 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1056 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1057 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1056 
    let _run_target_args'_v1055 = v1057 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1059 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1059 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1063 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1063 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1067 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1067 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1071 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1071 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1074 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1055 = v1074 
    #endif
#else
    let v1075 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1055 = v1075 
    #endif
    let v1076 : System.TimeZoneInfo = _run_target_args'_v1055 
    let v1085 : (System.DateTime -> System.TimeSpan) = v1050 v1076
    let v1086 : System.TimeSpan = v1085 v698
    let _run_target_args'_v891 = v1086 
    #endif
    let v1087 : System.TimeSpan = _run_target_args'_v891 
    let v1103 : (System.TimeSpan -> int32) = _.Hours
    let v1104 : int32 = v1103 v1087
    let v1107 : bool = v1104 > 0
    let v1108 : uint8 =
        if v1107 then
            1uy
        else
            0uy
    let v1109 : string = method215()
    (* run_target_args'
    let v1169 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1170 : string = "$0.toString($1)"
    let v1171 : string = Fable.Core.RustInterop.emitRustExpr struct (v1087, v1109) v1170 
    let _run_target_args'_v1169 = v1171 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1172 : string = "$0.toString($1)"
    let v1173 : string = Fable.Core.RustInterop.emitRustExpr struct (v1087, v1109) v1172 
    let _run_target_args'_v1169 = v1173 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1174 : string = "$0.toString($1)"
    let v1175 : string = Fable.Core.RustInterop.emitRustExpr struct (v1087, v1109) v1174 
    let _run_target_args'_v1169 = v1175 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1176 : string = v1087.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1169 = v1176 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1177 : string = v1087.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1169 = v1177 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1179 : string = v1087.ToString v1109 
    let _run_target_args'_v1169 = v1179 
    #endif
#else
    let v1238 : string = v1087.ToString v1109 
    let _run_target_args'_v1169 = v1238 
    #endif
    let v1296 : string = _run_target_args'_v1169 
    let v1415 : string = $"{v1108}{v1296.[0..1]}{v1296.[3..4]}"
    let v1417 : (System.Guid -> string) = _.ToString()
    let v1418 : string = v1417 v0
    let v1421 : int32 = v849.Length
    let v1422 : int32 = v1415.Length
    let v1423 : int32 = v1421 + v1422
    let v1425 : (string -> int32) = String.length
    let v1426 : int32 = v1425 v1418
    let v1434 : int32 = v1423 |> int32 
    let v1447 : int32 = v1426 |> int32 
    let v1455 : int32 = v1447 - 1
    let v1457 : string = v1418.[int v1434..int v1455]
    let v1461 : string = $"{v849}{v1415}{v1457}"
    (* run_target_args'
    let v1466 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1468 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1468 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1472 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1472 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1476 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1466 = v1476 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1480 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1480 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1484 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1484 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1488 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1488 
    #endif
#else
    let v1492 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1492 
    #endif
    let v1495 : System.Guid = _run_target_args'_v1466 
    let _run_target_args'_v677 = v1495 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1509 : System.DateTime = System.DateTime.UnixEpoch
    let v1513 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1514 : System.DateTime = v1513 v1509
    let v1518 : System.DateTimeKind = System.DateTimeKind.Local
    let v1519 : System.DateTime = System.DateTime.SpecifyKind (v1, v1518)
    let v1523 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1524 : System.DateTime = v1523 v1519
    (* run_target_args'
    let v1533 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1534 : (System.DateTime -> int64) = _.Ticks
    let v1535 : int64 = v1534 v1524
    let _run_target_args'_v1533 = v1535 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1536 : (System.DateTime -> int64) = _.Ticks
    let v1537 : int64 = v1536 v1524
    let _run_target_args'_v1533 = v1537 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1539 : int64 = null |> unbox<int64>
    let _run_target_args'_v1533 = v1539 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1542 : (System.DateTime -> int64) = _.Ticks
    let v1543 : int64 = v1542 v1524
    let _run_target_args'_v1533 = v1543 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1544 : (System.DateTime -> int64) = _.Ticks
    let v1545 : int64 = v1544 v1524
    let _run_target_args'_v1533 = v1545 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1546 : (System.DateTime -> int64) = _.Ticks
    let v1547 : int64 = v1546 v1524
    let _run_target_args'_v1533 = v1547 
    #endif
#else
    let v1548 : (System.DateTime -> int64) = _.Ticks
    let v1549 : int64 = v1548 v1524
    let _run_target_args'_v1533 = v1549 
    #endif
    let v1550 : int64 = _run_target_args'_v1533 
    (* run_target_args'
    let v1577 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1578 : (System.DateTime -> int64) = _.Ticks
    let v1579 : int64 = v1578 v1514
    let _run_target_args'_v1577 = v1579 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1580 : (System.DateTime -> int64) = _.Ticks
    let v1581 : int64 = v1580 v1514
    let _run_target_args'_v1577 = v1581 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1583 : int64 = null |> unbox<int64>
    let _run_target_args'_v1577 = v1583 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1586 : (System.DateTime -> int64) = _.Ticks
    let v1587 : int64 = v1586 v1514
    let _run_target_args'_v1577 = v1587 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1588 : (System.DateTime -> int64) = _.Ticks
    let v1589 : int64 = v1588 v1514
    let _run_target_args'_v1577 = v1589 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1590 : (System.DateTime -> int64) = _.Ticks
    let v1591 : int64 = v1590 v1514
    let _run_target_args'_v1577 = v1591 
    #endif
#else
    let v1592 : (System.DateTime -> int64) = _.Ticks
    let v1593 : int64 = v1592 v1514
    let _run_target_args'_v1577 = v1593 
    #endif
    let v1594 : int64 = _run_target_args'_v1577 
    let v1616 : int64 = v1550 |> int64 
    let v1620 : int64 = v1594 |> int64 
    let v1623 : int64 = v1616 - v1620
    let v1624 : int64 = v1623 / 10L
    let v1625 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1626 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1624 v1625 
    let v1629 : (chrono_DateTime<chrono_Utc> -> US44) = method214()
    let v1630 : US44 option = v1626 |> Option.map v1629 
    let v1650 : US44 = US44_1
    let v1651 : US44 = v1630 |> Option.defaultValue v1650 
    let v1671 : US5 =
        match v1651 with
        | US44_1 -> (* None *)
            US5_1
        | US44_0(v1655) -> (* Some *)
            let v1656 : string = "$0.naive_utc()"
            let v1657 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1655 v1656 
            let v1658 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1659 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1657 v1658 
            let v1660 : string = "%Y%m%d-%H%M-%S%f"
            let v1661 : string = "r#\"" + v1660 + "\"#"
            let v1662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1661 
            let v1663 : string = "$0.format($1).to_string()"
            let v1664 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1659, v1662) v1663 
            let v1665 : string = "fable_library_rust::String_::fromString($0)"
            let v1666 : string = Fable.Core.RustInterop.emitRustExpr v1664 v1665 
            let v1667 : string = $"{v1666.[0..17]}-{v1666.[18..21]}-{v1666.[22]}"
            US5_0(v1667)
    let v1675 : string =
        match v1671 with
        | US5_1 -> (* None *)
            let v1673 : string = ""
            v1673
        | US5_0(v1672) -> (* Some *)
            v1672
    (* run_target_args'
    let v1680 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1681 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1682 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1681 
    let _run_target_args'_v1680 = v1682 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1684 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1684 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1688 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1692 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1692 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1696 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1696 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1699 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1680 = v1699 
    #endif
#else
    let v1700 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1680 = v1700 
    #endif
    let v1701 : System.TimeZoneInfo = _run_target_args'_v1680 
    (* run_target_args'
    let v1717 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1724 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1725 : (System.DateTime -> int64) = _.Ticks
    let v1726 : int64 = v1725 v1524
    let _run_target_args'_v1724 = v1726 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1727 : (System.DateTime -> int64) = _.Ticks
    let v1728 : int64 = v1727 v1524
    let _run_target_args'_v1724 = v1728 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1730 : int64 = null |> unbox<int64>
    let _run_target_args'_v1724 = v1730 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1733 : (System.DateTime -> int64) = _.Ticks
    let v1734 : int64 = v1733 v1524
    let _run_target_args'_v1724 = v1734 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1735 : (System.DateTime -> int64) = _.Ticks
    let v1736 : int64 = v1735 v1524
    let _run_target_args'_v1724 = v1736 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1737 : (System.DateTime -> int64) = _.Ticks
    let v1738 : int64 = v1737 v1524
    let _run_target_args'_v1724 = v1738 
    #endif
#else
    let v1739 : (System.DateTime -> int64) = _.Ticks
    let v1740 : int64 = v1739 v1524
    let _run_target_args'_v1724 = v1740 
    #endif
    let v1741 : int64 = _run_target_args'_v1724 
    let v1762 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1763 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1524, v1741) v1762 
    let v1765 : System.TimeSpan = v1763 |> System.TimeSpan 
    let _run_target_args'_v1717 = v1765 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1774 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1775 : (System.DateTime -> int64) = _.Ticks
    let v1776 : int64 = v1775 v1524
    let _run_target_args'_v1774 = v1776 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1777 : (System.DateTime -> int64) = _.Ticks
    let v1778 : int64 = v1777 v1524
    let _run_target_args'_v1774 = v1778 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1780 : int64 = null |> unbox<int64>
    let _run_target_args'_v1774 = v1780 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1783 : (System.DateTime -> int64) = _.Ticks
    let v1784 : int64 = v1783 v1524
    let _run_target_args'_v1774 = v1784 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1785 : (System.DateTime -> int64) = _.Ticks
    let v1786 : int64 = v1785 v1524
    let _run_target_args'_v1774 = v1786 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1787 : (System.DateTime -> int64) = _.Ticks
    let v1788 : int64 = v1787 v1524
    let _run_target_args'_v1774 = v1788 
    #endif
#else
    let v1789 : (System.DateTime -> int64) = _.Ticks
    let v1790 : int64 = v1789 v1524
    let _run_target_args'_v1774 = v1790 
    #endif
    let v1791 : int64 = _run_target_args'_v1774 
    let v1812 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1813 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1524, v1791) v1812 
    let v1815 : System.TimeSpan = v1813 |> System.TimeSpan 
    let _run_target_args'_v1717 = v1815 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1819 : US3 = US3_2
    let v1820 : US4 = US4_4(v1819)
    let v1821 : string = $"date_time.get_utc_offset / target: {v1820}"
    let v1822 : System.TimeSpan = failwith<System.TimeSpan> v1821
    let _run_target_args'_v1717 = v1822 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1826 : US3 = US3_0
    let v1827 : US4 = US4_5(v1826)
    let v1828 : string = $"date_time.get_utc_offset / target: {v1827}"
    let v1829 : System.TimeSpan = failwith<System.TimeSpan> v1828
    let _run_target_args'_v1717 = v1829 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1833 : US3 = US3_0
    let v1834 : US4 = US4_6(v1833)
    let v1835 : string = $"date_time.get_utc_offset / target: {v1834}"
    let v1836 : System.TimeSpan = failwith<System.TimeSpan> v1835
    let _run_target_args'_v1717 = v1836 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1839 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1844 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1845 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1846 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1845 
    let _run_target_args'_v1844 = v1846 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1848 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1848 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1852 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1852 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1856 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1856 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1860 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1860 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1863 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1844 = v1863 
    #endif
#else
    let v1864 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1844 = v1864 
    #endif
    let v1865 : System.TimeZoneInfo = _run_target_args'_v1844 
    let v1874 : (System.DateTime -> System.TimeSpan) = v1839 v1865
    let v1875 : System.TimeSpan = v1874 v1524
    let _run_target_args'_v1717 = v1875 
    #endif
#else
    let v1876 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1881 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1882 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1883 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1882 
    let _run_target_args'_v1881 = v1883 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1885 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1885 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1889 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1889 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1893 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1893 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1897 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1897 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1900 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1881 = v1900 
    #endif
#else
    let v1901 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1881 = v1901 
    #endif
    let v1902 : System.TimeZoneInfo = _run_target_args'_v1881 
    let v1911 : (System.DateTime -> System.TimeSpan) = v1876 v1902
    let v1912 : System.TimeSpan = v1911 v1524
    let _run_target_args'_v1717 = v1912 
    #endif
    let v1913 : System.TimeSpan = _run_target_args'_v1717 
    let v1929 : (System.TimeSpan -> int32) = _.Hours
    let v1930 : int32 = v1929 v1913
    let v1933 : bool = v1930 > 0
    let v1934 : uint8 =
        if v1933 then
            1uy
        else
            0uy
    let v1935 : string = method215()
    (* run_target_args'
    let v1995 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1996 : string = "$0.toString($1)"
    let v1997 : string = Fable.Core.RustInterop.emitRustExpr struct (v1913, v1935) v1996 
    let _run_target_args'_v1995 = v1997 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1998 : string = "$0.toString($1)"
    let v1999 : string = Fable.Core.RustInterop.emitRustExpr struct (v1913, v1935) v1998 
    let _run_target_args'_v1995 = v1999 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2000 : string = "$0.toString($1)"
    let v2001 : string = Fable.Core.RustInterop.emitRustExpr struct (v1913, v1935) v2000 
    let _run_target_args'_v1995 = v2001 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2002 : string = v1913.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1995 = v2002 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2003 : string = v1913.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1995 = v2003 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2005 : string = v1913.ToString v1935 
    let _run_target_args'_v1995 = v2005 
    #endif
#else
    let v2064 : string = v1913.ToString v1935 
    let _run_target_args'_v1995 = v2064 
    #endif
    let v2122 : string = _run_target_args'_v1995 
    let v2241 : string = $"{v1934}{v2122.[0..1]}{v2122.[3..4]}"
    let v2243 : (System.Guid -> string) = _.ToString()
    let v2244 : string = v2243 v0
    let v2247 : int32 = v1675.Length
    let v2248 : int32 = v2241.Length
    let v2249 : int32 = v2247 + v2248
    let v2251 : (string -> int32) = String.length
    let v2252 : int32 = v2251 v2244
    let v2260 : int32 = v2249 |> int32 
    let v2273 : int32 = v2252 |> int32 
    let v2281 : int32 = v2273 - 1
    let v2283 : string = v2244.[int v2260..int v2281]
    let v2287 : string = $"{v1675}{v2241}{v2283}"
    (* run_target_args'
    let v2292 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2294 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2294 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2298 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2298 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2302 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2292 = v2302 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2306 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2306 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2310 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2310 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2314 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2314 
    #endif
#else
    let v2318 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2318 
    #endif
    let v2321 : System.Guid = _run_target_args'_v2292 
    let _run_target_args'_v677 = v2321 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2331 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v677 = v2331 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2334 : string = method216()
    let v2335 : bool = v2334 = ""
    let v2337 : string =
        if v2335 then
            let v2336 : string = "M-d-y hh:mm:ss tt"
            v2336
        else
            v2334
    let v2338 : (string -> string) = v1.ToString
    let v2339 : string = v2338 v2337
    (* run_target_args'
    let v2358 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2359 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2360 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2359 
    let _run_target_args'_v2358 = v2360 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2362 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2362 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2366 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2366 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2370 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2370 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2374 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2374 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2377 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2358 = v2377 
    #endif
#else
    let v2378 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2358 = v2378 
    #endif
    let v2379 : System.TimeZoneInfo = _run_target_args'_v2358 
    (* run_target_args'
    let v2395 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2402 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2403 : (System.DateTime -> int64) = _.Ticks
    let v2404 : int64 = v2403 v1
    let _run_target_args'_v2402 = v2404 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2405 : (System.DateTime -> int64) = _.Ticks
    let v2406 : int64 = v2405 v1
    let _run_target_args'_v2402 = v2406 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2408 : int64 = null |> unbox<int64>
    let _run_target_args'_v2402 = v2408 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2411 : (System.DateTime -> int64) = _.Ticks
    let v2412 : int64 = v2411 v1
    let _run_target_args'_v2402 = v2412 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2413 : (System.DateTime -> int64) = _.Ticks
    let v2414 : int64 = v2413 v1
    let _run_target_args'_v2402 = v2414 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2415 : (System.DateTime -> int64) = _.Ticks
    let v2416 : int64 = v2415 v1
    let _run_target_args'_v2402 = v2416 
    #endif
#else
    let v2417 : (System.DateTime -> int64) = _.Ticks
    let v2418 : int64 = v2417 v1
    let _run_target_args'_v2402 = v2418 
    #endif
    let v2419 : int64 = _run_target_args'_v2402 
    let v2440 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2441 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2419) v2440 
    let v2443 : System.TimeSpan = v2441 |> System.TimeSpan 
    let _run_target_args'_v2395 = v2443 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2452 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2453 : (System.DateTime -> int64) = _.Ticks
    let v2454 : int64 = v2453 v1
    let _run_target_args'_v2452 = v2454 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2455 : (System.DateTime -> int64) = _.Ticks
    let v2456 : int64 = v2455 v1
    let _run_target_args'_v2452 = v2456 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2458 : int64 = null |> unbox<int64>
    let _run_target_args'_v2452 = v2458 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2461 : (System.DateTime -> int64) = _.Ticks
    let v2462 : int64 = v2461 v1
    let _run_target_args'_v2452 = v2462 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2463 : (System.DateTime -> int64) = _.Ticks
    let v2464 : int64 = v2463 v1
    let _run_target_args'_v2452 = v2464 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2465 : (System.DateTime -> int64) = _.Ticks
    let v2466 : int64 = v2465 v1
    let _run_target_args'_v2452 = v2466 
    #endif
#else
    let v2467 : (System.DateTime -> int64) = _.Ticks
    let v2468 : int64 = v2467 v1
    let _run_target_args'_v2452 = v2468 
    #endif
    let v2469 : int64 = _run_target_args'_v2452 
    let v2490 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2491 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2469) v2490 
    let v2493 : System.TimeSpan = v2491 |> System.TimeSpan 
    let _run_target_args'_v2395 = v2493 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2497 : US3 = US3_2
    let v2498 : US4 = US4_4(v2497)
    let v2499 : string = $"date_time.get_utc_offset / target: {v2498}"
    let v2500 : System.TimeSpan = failwith<System.TimeSpan> v2499
    let _run_target_args'_v2395 = v2500 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2504 : US3 = US3_0
    let v2505 : US4 = US4_5(v2504)
    let v2506 : string = $"date_time.get_utc_offset / target: {v2505}"
    let v2507 : System.TimeSpan = failwith<System.TimeSpan> v2506
    let _run_target_args'_v2395 = v2507 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2511 : US3 = US3_0
    let v2512 : US4 = US4_6(v2511)
    let v2513 : string = $"date_time.get_utc_offset / target: {v2512}"
    let v2514 : System.TimeSpan = failwith<System.TimeSpan> v2513
    let _run_target_args'_v2395 = v2514 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2517 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2522 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2523 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2524 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2523 
    let _run_target_args'_v2522 = v2524 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2526 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2526 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2530 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2530 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2534 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2534 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2538 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2538 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2541 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2522 = v2541 
    #endif
#else
    let v2542 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2522 = v2542 
    #endif
    let v2543 : System.TimeZoneInfo = _run_target_args'_v2522 
    let v2552 : (System.DateTime -> System.TimeSpan) = v2517 v2543
    let v2553 : System.TimeSpan = v2552 v1
    let _run_target_args'_v2395 = v2553 
    #endif
#else
    let v2554 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2559 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2560 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2561 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2560 
    let _run_target_args'_v2559 = v2561 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2563 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2563 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2567 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2567 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2571 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2571 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2575 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2575 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2578 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2559 = v2578 
    #endif
#else
    let v2579 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2559 = v2579 
    #endif
    let v2580 : System.TimeZoneInfo = _run_target_args'_v2559 
    let v2589 : (System.DateTime -> System.TimeSpan) = v2554 v2580
    let v2590 : System.TimeSpan = v2589 v1
    let _run_target_args'_v2395 = v2590 
    #endif
    let v2591 : System.TimeSpan = _run_target_args'_v2395 
    let v2607 : (System.TimeSpan -> int32) = _.Hours
    let v2608 : int32 = v2607 v2591
    let v2611 : bool = v2608 > 0
    let v2612 : uint8 =
        if v2611 then
            1uy
        else
            0uy
    let v2613 : string = method217()
    (* run_target_args'
    let v2673 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2674 : string = "$0.toString($1)"
    let v2675 : string = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2613) v2674 
    let _run_target_args'_v2673 = v2675 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2676 : string = "$0.toString($1)"
    let v2677 : string = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2613) v2676 
    let _run_target_args'_v2673 = v2677 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2678 : string = "$0.toString($1)"
    let v2679 : string = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2613) v2678 
    let _run_target_args'_v2673 = v2679 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2680 : string = v2591.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2673 = v2680 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2681 : string = v2591.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2673 = v2681 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2683 : string = v2591.ToString v2613 
    let _run_target_args'_v2673 = v2683 
    #endif
#else
    let v2742 : string = v2591.ToString v2613 
    let _run_target_args'_v2673 = v2742 
    #endif
    let v2800 : string = _run_target_args'_v2673 
    let v2919 : string = $"{v2612}{v2800}"
    let v2921 : (System.Guid -> string) = _.ToString()
    let v2922 : string = v2921 v0
    let v2925 : int32 = v2339.Length
    let v2926 : int32 = v2919.Length
    let v2927 : int32 = v2925 + v2926
    let v2929 : (string -> int32) = String.length
    let v2930 : int32 = v2929 v2922
    let v2938 : int32 = v2927 |> int32 
    let v2951 : int32 = v2930 |> int32 
    let v2959 : int32 = v2951 - 1
    let v2961 : string = v2922.[int v2938..int v2959]
    let v2965 : string = $"{v2339}{v2919}{v2961}"
    (* run_target_args'
    let v2970 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2972 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2972 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2976 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2976 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2980 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2970 = v2980 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2984 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2984 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2988 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2988 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2992 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2992 
    #endif
#else
    let v2996 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2996 
    #endif
    let v2999 : System.Guid = _run_target_args'_v2970 
    let _run_target_args'_v677 = v2999 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3008 : string = method216()
    let v3009 : bool = v3008 = ""
    let v3011 : string =
        if v3009 then
            let v3010 : string = "M-d-y hh:mm:ss tt"
            v3010
        else
            v3008
    let v3012 : (string -> string) = v1.ToString
    let v3013 : string = v3012 v3011
    (* run_target_args'
    let v3032 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3033 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3034 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3033 
    let _run_target_args'_v3032 = v3034 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3036 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3036 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3040 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3040 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3044 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3044 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3048 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3048 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3051 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3032 = v3051 
    #endif
#else
    let v3052 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3032 = v3052 
    #endif
    let v3053 : System.TimeZoneInfo = _run_target_args'_v3032 
    (* run_target_args'
    let v3069 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3076 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3077 : (System.DateTime -> int64) = _.Ticks
    let v3078 : int64 = v3077 v1
    let _run_target_args'_v3076 = v3078 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3079 : (System.DateTime -> int64) = _.Ticks
    let v3080 : int64 = v3079 v1
    let _run_target_args'_v3076 = v3080 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3082 : int64 = null |> unbox<int64>
    let _run_target_args'_v3076 = v3082 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3085 : (System.DateTime -> int64) = _.Ticks
    let v3086 : int64 = v3085 v1
    let _run_target_args'_v3076 = v3086 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3087 : (System.DateTime -> int64) = _.Ticks
    let v3088 : int64 = v3087 v1
    let _run_target_args'_v3076 = v3088 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3089 : (System.DateTime -> int64) = _.Ticks
    let v3090 : int64 = v3089 v1
    let _run_target_args'_v3076 = v3090 
    #endif
#else
    let v3091 : (System.DateTime -> int64) = _.Ticks
    let v3092 : int64 = v3091 v1
    let _run_target_args'_v3076 = v3092 
    #endif
    let v3093 : int64 = _run_target_args'_v3076 
    let v3114 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3115 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3093) v3114 
    let v3117 : System.TimeSpan = v3115 |> System.TimeSpan 
    let _run_target_args'_v3069 = v3117 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3126 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3127 : (System.DateTime -> int64) = _.Ticks
    let v3128 : int64 = v3127 v1
    let _run_target_args'_v3126 = v3128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3129 : (System.DateTime -> int64) = _.Ticks
    let v3130 : int64 = v3129 v1
    let _run_target_args'_v3126 = v3130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3132 : int64 = null |> unbox<int64>
    let _run_target_args'_v3126 = v3132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3135 : (System.DateTime -> int64) = _.Ticks
    let v3136 : int64 = v3135 v1
    let _run_target_args'_v3126 = v3136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3137 : (System.DateTime -> int64) = _.Ticks
    let v3138 : int64 = v3137 v1
    let _run_target_args'_v3126 = v3138 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3139 : (System.DateTime -> int64) = _.Ticks
    let v3140 : int64 = v3139 v1
    let _run_target_args'_v3126 = v3140 
    #endif
#else
    let v3141 : (System.DateTime -> int64) = _.Ticks
    let v3142 : int64 = v3141 v1
    let _run_target_args'_v3126 = v3142 
    #endif
    let v3143 : int64 = _run_target_args'_v3126 
    let v3164 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3165 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3143) v3164 
    let v3167 : System.TimeSpan = v3165 |> System.TimeSpan 
    let _run_target_args'_v3069 = v3167 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3171 : US3 = US3_2
    let v3172 : US4 = US4_4(v3171)
    let v3173 : string = $"date_time.get_utc_offset / target: {v3172}"
    let v3174 : System.TimeSpan = failwith<System.TimeSpan> v3173
    let _run_target_args'_v3069 = v3174 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3178 : US3 = US3_0
    let v3179 : US4 = US4_5(v3178)
    let v3180 : string = $"date_time.get_utc_offset / target: {v3179}"
    let v3181 : System.TimeSpan = failwith<System.TimeSpan> v3180
    let _run_target_args'_v3069 = v3181 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3185 : US3 = US3_0
    let v3186 : US4 = US4_6(v3185)
    let v3187 : string = $"date_time.get_utc_offset / target: {v3186}"
    let v3188 : System.TimeSpan = failwith<System.TimeSpan> v3187
    let _run_target_args'_v3069 = v3188 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3191 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3196 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3197 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3198 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3197 
    let _run_target_args'_v3196 = v3198 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3200 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3200 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3204 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3204 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3208 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3208 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3212 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3212 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3215 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3196 = v3215 
    #endif
#else
    let v3216 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3196 = v3216 
    #endif
    let v3217 : System.TimeZoneInfo = _run_target_args'_v3196 
    let v3226 : (System.DateTime -> System.TimeSpan) = v3191 v3217
    let v3227 : System.TimeSpan = v3226 v1
    let _run_target_args'_v3069 = v3227 
    #endif
#else
    let v3228 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3233 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3234 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3235 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3234 
    let _run_target_args'_v3233 = v3235 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3237 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3237 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3241 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3241 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3245 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3245 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3249 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3249 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3252 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3233 = v3252 
    #endif
#else
    let v3253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3233 = v3253 
    #endif
    let v3254 : System.TimeZoneInfo = _run_target_args'_v3233 
    let v3263 : (System.DateTime -> System.TimeSpan) = v3228 v3254
    let v3264 : System.TimeSpan = v3263 v1
    let _run_target_args'_v3069 = v3264 
    #endif
    let v3265 : System.TimeSpan = _run_target_args'_v3069 
    let v3281 : (System.TimeSpan -> int32) = _.Hours
    let v3282 : int32 = v3281 v3265
    let v3285 : bool = v3282 > 0
    let v3286 : uint8 =
        if v3285 then
            1uy
        else
            0uy
    let v3287 : string = method217()
    (* run_target_args'
    let v3347 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3348 : string = "$0.toString($1)"
    let v3349 : string = Fable.Core.RustInterop.emitRustExpr struct (v3265, v3287) v3348 
    let _run_target_args'_v3347 = v3349 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3350 : string = "$0.toString($1)"
    let v3351 : string = Fable.Core.RustInterop.emitRustExpr struct (v3265, v3287) v3350 
    let _run_target_args'_v3347 = v3351 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3352 : string = "$0.toString($1)"
    let v3353 : string = Fable.Core.RustInterop.emitRustExpr struct (v3265, v3287) v3352 
    let _run_target_args'_v3347 = v3353 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3354 : string = v3265.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3347 = v3354 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3355 : string = v3265.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3347 = v3355 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3357 : string = v3265.ToString v3287 
    let _run_target_args'_v3347 = v3357 
    #endif
#else
    let v3416 : string = v3265.ToString v3287 
    let _run_target_args'_v3347 = v3416 
    #endif
    let v3474 : string = _run_target_args'_v3347 
    let v3593 : string = $"{v3286}{v3474}"
    let v3595 : (System.Guid -> string) = _.ToString()
    let v3596 : string = v3595 v0
    let v3599 : int32 = v3013.Length
    let v3600 : int32 = v3593.Length
    let v3601 : int32 = v3599 + v3600
    let v3603 : (string -> int32) = String.length
    let v3604 : int32 = v3603 v3596
    let v3612 : int32 = v3601 |> int32 
    let v3625 : int32 = v3604 |> int32 
    let v3633 : int32 = v3625 - 1
    let v3635 : string = v3596.[int v3612..int v3633]
    let v3639 : string = $"{v3013}{v3593}{v3635}"
    (* run_target_args'
    let v3644 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3646 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3646 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3650 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3650 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3654 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3644 = v3654 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3658 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3658 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3662 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3666 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3666 
    #endif
#else
    let v3670 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3670 
    #endif
    let v3673 : System.Guid = _run_target_args'_v3644 
    let _run_target_args'_v677 = v3673 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3682 : string = method216()
    let v3683 : bool = v3682 = ""
    let v3685 : string =
        if v3683 then
            let v3684 : string = "M-d-y hh:mm:ss tt"
            v3684
        else
            v3682
    let v3686 : (string -> string) = v1.ToString
    let v3687 : string = v3686 v3685
    (* run_target_args'
    let v3706 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3707 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3708 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3707 
    let _run_target_args'_v3706 = v3708 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3710 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3710 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3714 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3714 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3718 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3718 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3722 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3722 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3725 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3706 = v3725 
    #endif
#else
    let v3726 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3706 = v3726 
    #endif
    let v3727 : System.TimeZoneInfo = _run_target_args'_v3706 
    (* run_target_args'
    let v3743 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3750 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3751 : (System.DateTime -> int64) = _.Ticks
    let v3752 : int64 = v3751 v1
    let _run_target_args'_v3750 = v3752 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3753 : (System.DateTime -> int64) = _.Ticks
    let v3754 : int64 = v3753 v1
    let _run_target_args'_v3750 = v3754 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3756 : int64 = null |> unbox<int64>
    let _run_target_args'_v3750 = v3756 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3759 : (System.DateTime -> int64) = _.Ticks
    let v3760 : int64 = v3759 v1
    let _run_target_args'_v3750 = v3760 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3761 : (System.DateTime -> int64) = _.Ticks
    let v3762 : int64 = v3761 v1
    let _run_target_args'_v3750 = v3762 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3763 : (System.DateTime -> int64) = _.Ticks
    let v3764 : int64 = v3763 v1
    let _run_target_args'_v3750 = v3764 
    #endif
#else
    let v3765 : (System.DateTime -> int64) = _.Ticks
    let v3766 : int64 = v3765 v1
    let _run_target_args'_v3750 = v3766 
    #endif
    let v3767 : int64 = _run_target_args'_v3750 
    let v3788 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3789 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3767) v3788 
    let v3791 : System.TimeSpan = v3789 |> System.TimeSpan 
    let _run_target_args'_v3743 = v3791 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3800 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3801 : (System.DateTime -> int64) = _.Ticks
    let v3802 : int64 = v3801 v1
    let _run_target_args'_v3800 = v3802 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3803 : (System.DateTime -> int64) = _.Ticks
    let v3804 : int64 = v3803 v1
    let _run_target_args'_v3800 = v3804 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3806 : int64 = null |> unbox<int64>
    let _run_target_args'_v3800 = v3806 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3809 : (System.DateTime -> int64) = _.Ticks
    let v3810 : int64 = v3809 v1
    let _run_target_args'_v3800 = v3810 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3811 : (System.DateTime -> int64) = _.Ticks
    let v3812 : int64 = v3811 v1
    let _run_target_args'_v3800 = v3812 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3813 : (System.DateTime -> int64) = _.Ticks
    let v3814 : int64 = v3813 v1
    let _run_target_args'_v3800 = v3814 
    #endif
#else
    let v3815 : (System.DateTime -> int64) = _.Ticks
    let v3816 : int64 = v3815 v1
    let _run_target_args'_v3800 = v3816 
    #endif
    let v3817 : int64 = _run_target_args'_v3800 
    let v3838 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3839 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3817) v3838 
    let v3841 : System.TimeSpan = v3839 |> System.TimeSpan 
    let _run_target_args'_v3743 = v3841 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3845 : US3 = US3_2
    let v3846 : US4 = US4_4(v3845)
    let v3847 : string = $"date_time.get_utc_offset / target: {v3846}"
    let v3848 : System.TimeSpan = failwith<System.TimeSpan> v3847
    let _run_target_args'_v3743 = v3848 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3852 : US3 = US3_0
    let v3853 : US4 = US4_5(v3852)
    let v3854 : string = $"date_time.get_utc_offset / target: {v3853}"
    let v3855 : System.TimeSpan = failwith<System.TimeSpan> v3854
    let _run_target_args'_v3743 = v3855 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3859 : US3 = US3_0
    let v3860 : US4 = US4_6(v3859)
    let v3861 : string = $"date_time.get_utc_offset / target: {v3860}"
    let v3862 : System.TimeSpan = failwith<System.TimeSpan> v3861
    let _run_target_args'_v3743 = v3862 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3865 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3870 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3871 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3872 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3871 
    let _run_target_args'_v3870 = v3872 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3874 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3874 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3878 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3878 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3882 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3882 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3886 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3886 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3889 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3870 = v3889 
    #endif
#else
    let v3890 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3870 = v3890 
    #endif
    let v3891 : System.TimeZoneInfo = _run_target_args'_v3870 
    let v3900 : (System.DateTime -> System.TimeSpan) = v3865 v3891
    let v3901 : System.TimeSpan = v3900 v1
    let _run_target_args'_v3743 = v3901 
    #endif
#else
    let v3902 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3907 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3908 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3909 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3908 
    let _run_target_args'_v3907 = v3909 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3911 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3911 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3915 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3915 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3919 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3919 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3923 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3926 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3907 = v3926 
    #endif
#else
    let v3927 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3907 = v3927 
    #endif
    let v3928 : System.TimeZoneInfo = _run_target_args'_v3907 
    let v3937 : (System.DateTime -> System.TimeSpan) = v3902 v3928
    let v3938 : System.TimeSpan = v3937 v1
    let _run_target_args'_v3743 = v3938 
    #endif
    let v3939 : System.TimeSpan = _run_target_args'_v3743 
    let v3955 : (System.TimeSpan -> int32) = _.Hours
    let v3956 : int32 = v3955 v3939
    let v3959 : bool = v3956 > 0
    let v3960 : uint8 =
        if v3959 then
            1uy
        else
            0uy
    let v3961 : string = method217()
    (* run_target_args'
    let v4021 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4022 : string = "$0.toString($1)"
    let v4023 : string = Fable.Core.RustInterop.emitRustExpr struct (v3939, v3961) v4022 
    let _run_target_args'_v4021 = v4023 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4024 : string = "$0.toString($1)"
    let v4025 : string = Fable.Core.RustInterop.emitRustExpr struct (v3939, v3961) v4024 
    let _run_target_args'_v4021 = v4025 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4026 : string = "$0.toString($1)"
    let v4027 : string = Fable.Core.RustInterop.emitRustExpr struct (v3939, v3961) v4026 
    let _run_target_args'_v4021 = v4027 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4028 : string = v3939.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4021 = v4028 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4029 : string = v3939.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4021 = v4029 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4031 : string = v3939.ToString v3961 
    let _run_target_args'_v4021 = v4031 
    #endif
#else
    let v4090 : string = v3939.ToString v3961 
    let _run_target_args'_v4021 = v4090 
    #endif
    let v4148 : string = _run_target_args'_v4021 
    let v4267 : string = $"{v3960}{v4148}"
    let v4269 : (System.Guid -> string) = _.ToString()
    let v4270 : string = v4269 v0
    let v4273 : int32 = v3687.Length
    let v4274 : int32 = v4267.Length
    let v4275 : int32 = v4273 + v4274
    let v4277 : (string -> int32) = String.length
    let v4278 : int32 = v4277 v4270
    let v4286 : int32 = v4275 |> int32 
    let v4299 : int32 = v4278 |> int32 
    let v4307 : int32 = v4299 - 1
    let v4309 : string = v4270.[int v4286..int v4307]
    let v4313 : string = $"{v3687}{v4267}{v4309}"
    (* run_target_args'
    let v4318 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4320 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4320 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4324 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4328 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4318 = v4328 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4332 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4332 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4336 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4336 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4340 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4340 
    #endif
#else
    let v4344 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4344 
    #endif
    let v4347 : System.Guid = _run_target_args'_v4318 
    let _run_target_args'_v677 = v4347 
    #endif
#else
    let v4356 : string = method216()
    let v4357 : bool = v4356 = ""
    let v4359 : string =
        if v4357 then
            let v4358 : string = "M-d-y hh:mm:ss tt"
            v4358
        else
            v4356
    let v4360 : (string -> string) = v1.ToString
    let v4361 : string = v4360 v4359
    (* run_target_args'
    let v4380 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4381 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4382 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4381 
    let _run_target_args'_v4380 = v4382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4384 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4384 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4388 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4388 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4392 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4396 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4396 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4399 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4380 = v4399 
    #endif
#else
    let v4400 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4380 = v4400 
    #endif
    let v4401 : System.TimeZoneInfo = _run_target_args'_v4380 
    (* run_target_args'
    let v4417 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v4424 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4425 : (System.DateTime -> int64) = _.Ticks
    let v4426 : int64 = v4425 v1
    let _run_target_args'_v4424 = v4426 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4427 : (System.DateTime -> int64) = _.Ticks
    let v4428 : int64 = v4427 v1
    let _run_target_args'_v4424 = v4428 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4430 : int64 = null |> unbox<int64>
    let _run_target_args'_v4424 = v4430 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4433 : (System.DateTime -> int64) = _.Ticks
    let v4434 : int64 = v4433 v1
    let _run_target_args'_v4424 = v4434 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4435 : (System.DateTime -> int64) = _.Ticks
    let v4436 : int64 = v4435 v1
    let _run_target_args'_v4424 = v4436 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4437 : (System.DateTime -> int64) = _.Ticks
    let v4438 : int64 = v4437 v1
    let _run_target_args'_v4424 = v4438 
    #endif
#else
    let v4439 : (System.DateTime -> int64) = _.Ticks
    let v4440 : int64 = v4439 v1
    let _run_target_args'_v4424 = v4440 
    #endif
    let v4441 : int64 = _run_target_args'_v4424 
    let v4462 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4463 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4441) v4462 
    let v4465 : System.TimeSpan = v4463 |> System.TimeSpan 
    let _run_target_args'_v4417 = v4465 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4474 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4475 : (System.DateTime -> int64) = _.Ticks
    let v4476 : int64 = v4475 v1
    let _run_target_args'_v4474 = v4476 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4477 : (System.DateTime -> int64) = _.Ticks
    let v4478 : int64 = v4477 v1
    let _run_target_args'_v4474 = v4478 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4480 : int64 = null |> unbox<int64>
    let _run_target_args'_v4474 = v4480 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4483 : (System.DateTime -> int64) = _.Ticks
    let v4484 : int64 = v4483 v1
    let _run_target_args'_v4474 = v4484 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4485 : (System.DateTime -> int64) = _.Ticks
    let v4486 : int64 = v4485 v1
    let _run_target_args'_v4474 = v4486 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4487 : (System.DateTime -> int64) = _.Ticks
    let v4488 : int64 = v4487 v1
    let _run_target_args'_v4474 = v4488 
    #endif
#else
    let v4489 : (System.DateTime -> int64) = _.Ticks
    let v4490 : int64 = v4489 v1
    let _run_target_args'_v4474 = v4490 
    #endif
    let v4491 : int64 = _run_target_args'_v4474 
    let v4512 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4513 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4491) v4512 
    let v4515 : System.TimeSpan = v4513 |> System.TimeSpan 
    let _run_target_args'_v4417 = v4515 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4519 : US3 = US3_2
    let v4520 : US4 = US4_4(v4519)
    let v4521 : string = $"date_time.get_utc_offset / target: {v4520}"
    let v4522 : System.TimeSpan = failwith<System.TimeSpan> v4521
    let _run_target_args'_v4417 = v4522 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4526 : US3 = US3_0
    let v4527 : US4 = US4_5(v4526)
    let v4528 : string = $"date_time.get_utc_offset / target: {v4527}"
    let v4529 : System.TimeSpan = failwith<System.TimeSpan> v4528
    let _run_target_args'_v4417 = v4529 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4533 : US3 = US3_0
    let v4534 : US4 = US4_6(v4533)
    let v4535 : string = $"date_time.get_utc_offset / target: {v4534}"
    let v4536 : System.TimeSpan = failwith<System.TimeSpan> v4535
    let _run_target_args'_v4417 = v4536 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4539 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4544 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4545 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4546 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4545 
    let _run_target_args'_v4544 = v4546 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4548 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4548 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4552 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4552 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4556 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4556 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4560 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4560 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4563 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4544 = v4563 
    #endif
#else
    let v4564 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4544 = v4564 
    #endif
    let v4565 : System.TimeZoneInfo = _run_target_args'_v4544 
    let v4574 : (System.DateTime -> System.TimeSpan) = v4539 v4565
    let v4575 : System.TimeSpan = v4574 v1
    let _run_target_args'_v4417 = v4575 
    #endif
#else
    let v4576 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4581 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4582 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4583 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4582 
    let _run_target_args'_v4581 = v4583 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4585 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4585 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4589 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4589 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4597 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4597 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4600 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4581 = v4600 
    #endif
#else
    let v4601 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4581 = v4601 
    #endif
    let v4602 : System.TimeZoneInfo = _run_target_args'_v4581 
    let v4611 : (System.DateTime -> System.TimeSpan) = v4576 v4602
    let v4612 : System.TimeSpan = v4611 v1
    let _run_target_args'_v4417 = v4612 
    #endif
    let v4613 : System.TimeSpan = _run_target_args'_v4417 
    let v4629 : (System.TimeSpan -> int32) = _.Hours
    let v4630 : int32 = v4629 v4613
    let v4633 : bool = v4630 > 0
    let v4634 : uint8 =
        if v4633 then
            1uy
        else
            0uy
    let v4635 : string = method217()
    (* run_target_args'
    let v4695 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4696 : string = "$0.toString($1)"
    let v4697 : string = Fable.Core.RustInterop.emitRustExpr struct (v4613, v4635) v4696 
    let _run_target_args'_v4695 = v4697 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4698 : string = "$0.toString($1)"
    let v4699 : string = Fable.Core.RustInterop.emitRustExpr struct (v4613, v4635) v4698 
    let _run_target_args'_v4695 = v4699 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4700 : string = "$0.toString($1)"
    let v4701 : string = Fable.Core.RustInterop.emitRustExpr struct (v4613, v4635) v4700 
    let _run_target_args'_v4695 = v4701 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4702 : string = v4613.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4695 = v4702 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4703 : string = v4613.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4695 = v4703 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4705 : string = v4613.ToString v4635 
    let _run_target_args'_v4695 = v4705 
    #endif
#else
    let v4764 : string = v4613.ToString v4635 
    let _run_target_args'_v4695 = v4764 
    #endif
    let v4822 : string = _run_target_args'_v4695 
    let v4941 : string = $"{v4634}{v4822}"
    let v4943 : (System.Guid -> string) = _.ToString()
    let v4944 : string = v4943 v0
    let v4947 : int32 = v4361.Length
    let v4948 : int32 = v4941.Length
    let v4949 : int32 = v4947 + v4948
    let v4951 : (string -> int32) = String.length
    let v4952 : int32 = v4951 v4944
    let v4960 : int32 = v4949 |> int32 
    let v4973 : int32 = v4952 |> int32 
    let v4981 : int32 = v4973 - 1
    let v4983 : string = v4944.[int v4960..int v4981]
    let v4987 : string = $"{v4361}{v4941}{v4983}"
    (* run_target_args'
    let v4992 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4994 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v4994 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4998 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v4998 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5002 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4992 = v5002 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5006 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5006 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5010 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5010 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5014 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5014 
    #endif
#else
    let v5018 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5018 
    #endif
    let v5021 : System.Guid = _run_target_args'_v4992 
    let _run_target_args'_v677 = v5021 
    #endif
    let v5030 : System.Guid = _run_target_args'_v677 
    v5030
and method218 (v0 : string, v1 : string) : unit =
    let v2 : bool = method37(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method76(v0)
        ()
    let v5 : string option = method39(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method37(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method76(v9)
        ()
    let v15 : bool = method37(v1)
    let v25 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method45(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v25 then
        let v26 : bool = true
        method87(v26, v1)
    let v27 : bool = method37(v1)
    let v28 : bool = v27 = false
    if v28 then
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v31 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v30 
        let v32 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v33 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v32 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v34 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method220 () : string =
    let v0 : string = "("
    v0
and method221 () : string =
    let v0 : string = " "
    v0
and method222 (v0 : US41) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v24 : string = v2.l0
    v24
and method226 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "is_error"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v65 : string =
        if v0 then
            let v63 : string = "true"
            v63
        else
            let v64 : string = "false"
            v64
    let v67 : string = $"{v65}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "retry"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v139 : string = $"{v1}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v156 : string = $"{v85}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v5, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v174 : string = "result"
    let v175 : string = $"{v174}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v5, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v46}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v5, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v212 : string = $"{v2}"
    let v220 : unit = ()
    let v221 : (unit -> unit) = closure7(v5, v212)
    let v222 : unit = (fun () -> v221 (); v220) ()
    let v230 : string = ", "
    let v231 : string = $"{v230}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v3}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v266 : string = " }"
    let v267 : string = $"{v266}"
    let v275 : unit = ()
    let v276 : (unit -> unit) = closure7(v5, v267)
    let v277 : unit = (fun () -> v276 (); v275) ()
    let v283 : string = v5.l0
    v283
and method225 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method226(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "common.retry_fn' / loop"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 1 >= v65
            v66
    let v68 : bool = v67 = false
    let v303 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method11()
            let v128 : string = $"{v1}/{v0}"
            let v129 : string = method225(v108, v109, v110, v111, v112, v113, v126, v127, v4, v128, v2, v3)
            let v144 : unit = ()
            let v145 : unit = (fun () -> v20 (); v144) ()
            let struct (v168 : Mut0, v169 : Mut1, v170 : Mut2, v171 : Mut3, v172 : Mut4, v173 : int64 option) = TraceState.trace_state.Value
            let v188 : unit = ()
            let v189 : (unit -> unit) = closure8(v168)
            let v190 : unit = (fun () -> v189 (); v188) ()
            let v193 : (string -> unit) = closure9()
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v196 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : string = v171.l0
            let v198 : bool = v197 = ""
            let v213 : string =
                if v198 then
                    v129
                else
                    let v199 : bool = v129 = ""
                    if v199 then
                        let v200 : string = v171.l0
                        v200
                    else
                        let v201 : string = v171.l0
                        let v204 : string = "\n"
                        let v205 : string = v201 + v204 
                        let v209 : string = v205 + v129 
                        v209
            (* run_target_args'
            let v218 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v219 
            let _run_target_args'_v218 = v220 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v221 
            let _run_target_args'_v218 = v222 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v223 
            let _run_target_args'_v218 = v224 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v226 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v226 
            #endif
#if FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v230 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v234 
            #endif
#else
            let v238 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v238 
            #endif
            let v241 : Ref<Str> = _run_target_args'_v218 
            let v250 : string = $"$0.chars()"
            let v251 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v241 v250 
            let v252 : string = "$0"
            let v253 : _ = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.collect::<Vec<_>>()"
            let v255 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v257 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "x"
            let v261 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v260 
            let v262 : string = "String::from_iter($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "true; $0 }).collect::<Vec<_>>()"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_map"
            let v267 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0.len()"
            let v269 : unativeint = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v275 : int32 = v269 |> int32 
            let v285 : string = ""
            let v286 : bool = v129 <> v285 
            let v290 : bool =
                if v286 then
                    let v289 : bool = v275 <= 1
                    v289
                else
                    false
            if v290 then
                v171.l0 <- v213
                ()
            else
                v171.l0 <- v285
                let v291 : string = "true; $0.into_iter().for_each(|x| { //"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v267 v291 
                let v293 : string = "x"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
                let v297 : string = $"true"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = "true; }); //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v193 v129
            #endif
#if FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#else
            v193 v129
            #endif
            // run_target_args' is_unit
            let v301 : (string -> unit) = v169.l0
            v301 v129
            US6_0(v168, v169, v170, v171, v172, v173)
    
    ()
and method224 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method99(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US45 =
        if v11 then
            US45_0(v9, v10)
        else
            US45_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US45_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US45_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v340 : unit = ()
        let v341 : (unit -> unit) = closure88(v0, v8, v23, v24, v22)
        let v342 : unit = (fun () -> v341 (); v340) ()
        let v658 : uint8 = v8 + 1uy
        method224(v0, v1, v2, v3, v4, v5, v6, v7, v658)
and method223 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method224(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method219 (v0 : US40, v1 : string, v2 : string, v3 : string, v4 : US14) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    (* run_target_args'
    let v23 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "cfg!(windows)"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let _run_target_args'_v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "cfg!(windows)"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let _run_target_args'_v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "cfg!(windows)"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let _run_target_args'_v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : US3 = US3_0
    let v31 : US4 = US4_5(v30)
    let v32 : string = $"platform.is_windows / target: {v31}"
    let v33 : bool = failwith<bool> v32
    let _run_target_args'_v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : US3 = US3_0
    let v35 : US4 = US4_6(v34)
    let v36 : string = $"platform.is_windows / target: {v35}"
    let v37 : bool = failwith<bool> v36
    let _run_target_args'_v23 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v39 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v40 : bool = v39 v38
    let _run_target_args'_v23 = v40 
    #endif
#else
    let v41 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v42 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v43 : bool = v42 v41
    let _run_target_args'_v23 = v43 
    #endif
    let v44 : bool = _run_target_args'_v23 
    let v55 : string =
        if v44 then
            let v53 : string = "_WINDOWS"
            v53
        else
            let v54 : string = "_LINUX"
            v54
    let v56 : string = $" --define {v55}"
    let v172 : string =
        match v0 with
        | US40_1 -> (* None *)
            let v170 : string = ""
            v170
        | US40_0(v57) -> (* Some *)
            let v59 : string = Unchecked.defaultof<_>
            let v63 : string = Unchecked.defaultof<_>
            let v68 : bool =
                match v57 with
                | US41_0(v66) -> (* Wasm *)
                    let v67 : bool = v59 = v66
                    v67
                | _ ->
                    false
            let v109 : US5 =
                if v68 then
                    let v69 : string = "Wasm"
                    US5_0(v69)
                else
                    (* run_target_args'
                    let v73 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v74 : string = method220()
                    let _run_target_args'_v73 = v74 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : string = method220()
                    let _run_target_args'_v73 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : string = method220()
                    let _run_target_args'_v73 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v77 : string = method221()
                    let _run_target_args'_v73 = v77 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v78 : string = method221()
                    let _run_target_args'_v73 = v78 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v79 : string = method221()
                    let _run_target_args'_v73 = v79 
                    #endif
#else
                    let v80 : string = method221()
                    let _run_target_args'_v73 = v80 
                    #endif
                    let v81 : string = _run_target_args'_v73 
                    let v85 : US41 = US41_0(v59)
                    let v86 : string = method222(v85)
                    let v93 : (string []) = v86.Split v81 
                    let v97 : string = v93.[int 0]
                    let v100 : string = method222(v57)
                    let v102 : bool = v100.StartsWith (v97, false, null)
                    if v102 then
                        let v105 : string = "Wasm"
                        US5_0(v105)
                    else
                        US5_1
            let v162 : US5 =
                match v109 with
                | US5_1 -> (* None *)
                    let v114 : bool =
                        match v57 with
                        | US41_1(v112) -> (* Contract *)
                            let v113 : bool = v63 = v112
                            v113
                        | _ ->
                            false
                    let v155 : US5 =
                        if v114 then
                            let v115 : string = "Contract"
                            US5_0(v115)
                        else
                            (* run_target_args'
                            let v119 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v120 : string = method220()
                            let _run_target_args'_v119 = v120 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v121 : string = method220()
                            let _run_target_args'_v119 = v121 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v122 : string = method220()
                            let _run_target_args'_v119 = v122 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v123 : string = method221()
                            let _run_target_args'_v119 = v123 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v124 : string = method221()
                            let _run_target_args'_v119 = v124 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v125 : string = method221()
                            let _run_target_args'_v119 = v125 
                            #endif
#else
                            let v126 : string = method221()
                            let _run_target_args'_v119 = v126 
                            #endif
                            let v127 : string = _run_target_args'_v119 
                            let v131 : US41 = US41_1(v63)
                            let v132 : string = method222(v131)
                            let v139 : (string []) = v132.Split v127 
                            let v143 : string = v139.[int 0]
                            let v146 : string = method222(v57)
                            let v148 : bool = v146.StartsWith (v143, false, null)
                            if v148 then
                                let v151 : string = "Contract"
                                US5_0(v151)
                            else
                                US5_1
                    match v155 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v156) -> (* Some *)
                        US5_0(v156)
                | US5_0(v110) -> (* Some *)
                    US5_0(v110)
            let v166 : string =
                match v162 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v163) -> (* Some *)
                    v163
            let v167 : (unit -> string) = v166.ToUpper
            let v168 : string = v167 ()
            let v169 : string = $" --define {v168}"
            v169
    let v173 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v56}{v172}"
    let v185 : Result<string, string> =
        match v4 with
        | US14_1(v179) -> (* Error *)
            let v181 : Result<string, string> = Error v179 
            v181
        | US14_0(v174) -> (* Ok *)
            let v176 : Result<string, string> = Ok v174 
            v176
    (* run_target_args'
    let v187 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v188 : string = "$0.ok()"
    let v189 : string option = Fable.Core.RustInterop.emitRustExpr v185 v188 
    let _run_target_args'_v187 = v189 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : string = "$0.ok()"
    let v191 : string option = Fable.Core.RustInterop.emitRustExpr v185 v190 
    let _run_target_args'_v187 = v191 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v192 : string = "$0.ok()"
    let v193 : string option = Fable.Core.RustInterop.emitRustExpr v185 v192 
    let _run_target_args'_v187 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v194 : string option = match v185 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v187 = v194 
    #endif
#if FABLE_COMPILER_PYTHON
    let v195 : string option = match v185 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v187 = v195 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v196 : string option = match v185 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v187 = v196 
    #endif
#else
    let v197 : string option = match v185 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v187 = v197 
    #endif
    let v198 : string option = _run_target_args'_v187 
    let v201 : uint8 = 3uy
    let v202 : bool = true
    method223(v201, v173, v6, v9, v11, v15, v202, v198)
and method228 (v0 : int32, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "dotnet_fable_result"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v137 : string = $"{v1}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v3, v137)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v155 : string = " }"
    let v156 : string = $"{v155}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v172 : string = v3.l0
    v172
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_rust / dotnet fable error"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method227(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method229 () : (std_string_String -> bool) =
    closure90()
and method230 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method231 () : string =
    let v0 : string = "("
    v0
and method232 () : string =
    let v0 : string = "("
    v0
and method234 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v50 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v58 
    #endif
#else
    let v62 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v62 
    #endif
    let v65 : std_string_String = _run_target_args'_v42 
    let v74 : string = "true; let _capture_move = (move || { //"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "Box::new($0)"
    let v77 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v65 v76 
    let v78 : string = "Box::leak($0)"
    let v79 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "$0"
    let v81 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let v82 : string = $"$0.captures_iter(v79)"
    let v83 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "true; let _regex_captures : Vec<_> = v83.map(|x| { //"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = $"x"
    let v87 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "Box::new($0)"
    let v89 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "Box::leak($0)"
    let v91 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = $"$0.capture_names()"
    let v93 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v92 
    let v94 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v93.map(|x| { //"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "x.unwrap_or(\"\").to_string().into()"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr () v96 
    let v98 : string = "$0.clone()"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = $"v91.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v103 : (string * string) = v99, v101 
    let v106 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v107 : bool = Fable.Core.RustInterop.emitRustExpr v103 v106 
    let v108 : string = "_regex_captures"
    let v109 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "true; $0 }).collect::<Vec<_>>()"
    let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "_regex_captures"
    let v113 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = "true; $0 })()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = "_capture_move"
    let v117 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v116 
    v117
and closure91 () (v0 : std_collections_HashMap<string, string>) : US46 =
    US46_0(v0)
and method235 () : (std_collections_HashMap<string, string> -> US46) =
    closure91()
and method236 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    let v67 : bool = v66 = false
    let v302 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method11()
            let v127 : string = $"{v0}/{3uy}"
            let v128 : string = method225(v107, v108, v109, v110, v111, v112, v125, v126, v3, v127, v1, v2)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v19 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and method233 (v0 : US14, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v7 : (struct (string * string) []) = [||]
    let v9 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v13 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v17 : string option = None
    let v20 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v32 : Result<string, string> =
        match v0 with
        | US14_1(v26) -> (* Error *)
            let v28 : Result<string, string> = Error v26 
            v28
        | US14_0(v21) -> (* Ok *)
            let v23 : Result<string, string> = Ok v21 
            v23
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.ok()"
    let v36 : string option = Fable.Core.RustInterop.emitRustExpr v32 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.ok()"
    let v38 : string option = Fable.Core.RustInterop.emitRustExpr v32 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.ok()"
    let v40 : string option = Fable.Core.RustInterop.emitRustExpr v32 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : string option = _run_target_args'_v34 
    let v48 : bool = true
    let struct (v49 : int32, v50 : string) = method99(v20, v4, v7, v9, v13, v48, v45)
    let v53 : string = "failed to load manifest for workspace member"
    let v54 : bool = v50.Contains v53 
    let v57 : bool = v54 = false
    let v274 : US45 =
        if v57 then
            let v58 : bool = v49 = 0
            if v58 then
                US45_0(v49, v50)
            else
                US45_1(v49, v50)
        else
            let v62 : string = $"regex::Regex::new(&$0)"
            let v63 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v64 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v63 v62 
            (* run_target_args'
            let v66 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v67 : string = "$0.unwrap()"
            let v68 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v67 
            let _run_target_args'_v66 = v68 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v69 : string = "$0.unwrap()"
            let v70 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v69 
            let _run_target_args'_v66 = v70 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v71 : string = "$0.unwrap()"
            let v72 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v71 
            let _run_target_args'_v66 = v72 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v73 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v73 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v75 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v75 
            #endif
#else
            let v76 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v76 
            #endif
            let v77 : regex_Regex = _run_target_args'_v66 
            let v80 : Vec<std_collections_HashMap<string, string>> = method234(v50, v77)
            let v81 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v82 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v80 v81 
            let v83 : std_collections_HashMap<string, string> option = v82 |> Array.tryItem 0 
            let v86 : (std_collections_HashMap<string, string> -> US46) = method235()
            let v87 : US46 option = v83 |> Option.map v86 
            let v107 : US46 = US46_1
            let v108 : US46 = v87 |> Option.defaultValue v107 
            let v147 : US47 =
                match v108 with
                | US46_1 -> (* None *)
                    US47_1
                | US46_0(v112) -> (* Some *)
                    let v113 : string = method236()
                    let v114 : string = "std::collections::HashMap::get(&$0, &v113).map(|x| x).cloned()"
                    let v115 : string option = Fable.Core.RustInterop.emitRustExpr v112 v114 
                    let v118 : (string -> US5) = method6()
                    let v119 : US5 option = v115 |> Option.map v118 
                    let v139 : US5 = US5_1
                    let v140 : US5 = v119 |> Option.defaultValue v139 
                    US47_0(v140)
            let v154 : US5 =
                match v147 with
                | US47_0(v148) -> (* Some *)
                    match v148 with
                    | US5_0(v149) -> (* Some *)
                        US5_0(v149)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v154 with
            | US5_1 -> (* None *)
                US45_1(v49, v50)
            | US5_0(v156) -> (* Some *)
                let v157 : bool = method36(v156)
                let v158 : bool = v157 = false
                if v158 then
                    let v159 : string option = method39(v156)
                    let v162 : string = ""
                    let v163 : string = v159 |> Option.defaultValue v162 
                    let v166 : System.IDisposable = method76(v163)
                    (* run_target_args'
                    let v173 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v174 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v174 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v175 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v175 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v177 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v173 = v177 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v180 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v180 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v182 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v182 
                    #endif
#else
                    let v183 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v183 
                    #endif
                    let v184 : System.DateTime = _run_target_args'_v173 
                    let v190 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v191 : System.Guid = v190 ()
                    let v194 : System.Guid = method213(v191, v184)
                    let v196 : (System.Guid -> string) = _.ToString()
                    let v197 : string = v196 v194
                    let v200 : string = $"[package]"
                    let v201 : string = $"name = \"spiral_{v197}\""
                    let v204 : string = "\n"
                    let v205 : string = v200 + v204 
                    let v209 : string = v205 + v201 
                    let v212 : string = $"version = \"0.0.1\""
                    let v214 : string = v209 + v204 
                    let v218 : string = v214 + v212 
                    let v221 : string = $"edition = \"2021\""
                    let v223 : string = v218 + v204 
                    let v227 : string = v223 + v221 
                    let v230 : string = $""
                    let v232 : string = v227 + v204 
                    let v236 : string = v232 + v230 
                    let v239 : string = $"[[bin]]"
                    let v241 : string = v236 + v204 
                    let v245 : string = v241 + v239 
                    let v248 : string = $"name = \"spiral_{v197}\""
                    let v250 : string = v245 + v204 
                    let v254 : string = v250 + v248 
                    let v257 : string = $"path = \"spiral.rs\""
                    let v259 : string = v254 + v204 
                    let v263 : string = v259 + v257 
                    (* run_target_args'
                    let v266 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v267 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v156, v263) v267 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v156, v263)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v268 : bool = v49 = 0
                if v268 then
                    US45_0(v49, v50)
                else
                    US45_1(v49, v50)
    let struct (v282 : bool, v283 : int32, v284 : string) =
        match v274 with
        | US45_1(v277, v278) -> (* Error *)
            struct (true, v277, v278)
        | US45_0(v275, v276) -> (* Ok *)
            struct (false, v275, v276)
    let v285 : bool = v282 = false
    let v287 : bool =
        if v285 then
            true
        else
            let v286 : bool = v2 >= 3uy
            v286
    if v287 then
        struct (v283, v284)
    else
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure92(v2, v283, v284, v282)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v918 : uint8 = v2 + 1uy
        method233(v0, v1, v918)
and method238 (v0 : int32, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "cargo_fmt_result"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v137 : string = $"{v1}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v3, v137)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v155 : string = " }"
    let v156 : string = $"{v155}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v172 : string = v3.l0
    v172
and method237 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method238(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_rust / cargo fmt error"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method237(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method239 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method241 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "exit_code"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "new_code_path"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "external_command"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v210 : string = $"{v2}"
    let v218 : unit = ()
    let v219 : (unit -> unit) = closure7(v6, v210)
    let v220 : unit = (fun () -> v219 (); v218) ()
    let v227 : string = $"{v86}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v6, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v245 : string = "cleanup"
    let v246 : string = $"{v245}"
    let v254 : unit = ()
    let v255 : (unit -> unit) = closure7(v6, v246)
    let v256 : unit = (fun () -> v255 (); v254) ()
    let v263 : string = $"{v47}"
    let v271 : unit = ()
    let v272 : (unit -> unit) = closure7(v6, v263)
    let v273 : unit = (fun () -> v272 (); v271) ()
    let v281 : string =
        if v3 then
            let v279 : string = "true"
            v279
        else
            let v280 : string = "false"
            v280
    let v283 : string = $"{v281}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v6, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v300 : string = $"{v86}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v6, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v318 : string = "cargo_result"
    let v319 : string = $"{v318}"
    let v327 : unit = ()
    let v328 : (unit -> unit) = closure7(v6, v319)
    let v329 : unit = (fun () -> v328 (); v327) ()
    let v336 : string = $"{v47}"
    let v344 : unit = ()
    let v345 : (unit -> unit) = closure7(v6, v336)
    let v346 : unit = (fun () -> v345 (); v344) ()
    let v353 : string = $"{v4}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v6, v353)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v371 : string = " }"
    let v372 : string = $"{v371}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v6, v372)
    let v382 : unit = (fun () -> v381 (); v380) ()
    let v388 : string = v6.l0
    v388
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method241(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v17 : string = " "
    let v18 : string = v6 + v17 
    let v22 : string = v18 + v7 
    let v27 : string = " #"
    let v28 : string = v22 + v27 
    let v32 : (int64 -> string) = _.ToString()
    let v33 : string = v32 v14
    let v37 : string = v28 + v33 
    let v41 : string = v37 + v17 
    let v46 : string = "spiral.process_rust / error"
    let v47 : string = v41 + v46 
    let v52 : string = " / "
    let v53 : string = v47 + v52 
    let v57 : string = v53 + v13 
    method17(v57)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 4 >= v65
            v66
    let v68 : bool = v67 = false
    let v302 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method80()
            let v128 : string = method240(v108, v109, v110, v111, v112, v113, v126, v127, v3, v1, v4, v0, v2)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v20 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and closure99 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v12 : (string -> bool) = closure99()
    let v13 : (string []) = v9 |> Array.skipWhile v12 
    let v14 : (string []) = v13 |> Array.skip 2 
    let v16 : string seq = v14 |> Seq.ofArray
    let v20 : string = method73()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method243 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "new_code_path"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "external_command"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "cargo_result"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method243(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_rust / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method242(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method245 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "exit_code"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "new_code_path"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "cargo_result"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v210 : string = $"{v2}"
    let v218 : unit = ()
    let v219 : (unit -> unit) = closure7(v6, v210)
    let v220 : unit = (fun () -> v219 (); v218) ()
    let v227 : string = $"{v86}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v6, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v245 : string = "cleanup"
    let v246 : string = $"{v245}"
    let v254 : unit = ()
    let v255 : (unit -> unit) = closure7(v6, v246)
    let v256 : unit = (fun () -> v255 (); v254) ()
    let v263 : string = $"{v47}"
    let v271 : unit = ()
    let v272 : (unit -> unit) = closure7(v6, v263)
    let v273 : unit = (fun () -> v272 (); v271) ()
    let v281 : string =
        if v3 then
            let v279 : string = "true"
            v279
        else
            let v280 : string = "false"
            v280
    let v283 : string = $"{v281}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v6, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v300 : string = $"{v86}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v6, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v318 : string = "spiral_wasm_result"
    let v319 : string = $"{v318}"
    let v327 : unit = ()
    let v328 : (unit -> unit) = closure7(v6, v319)
    let v329 : unit = (fun () -> v328 (); v327) ()
    let v336 : string = $"{v47}"
    let v344 : unit = ()
    let v345 : (unit -> unit) = closure7(v6, v336)
    let v346 : unit = (fun () -> v345 (); v344) ()
    let v353 : string = $"{v4}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v6, v353)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v371 : string = " }"
    let v372 : string = $"{v371}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v6, v372)
    let v382 : unit = (fun () -> v381 (); v380) ()
    let v388 : string = v6.l0
    v388
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method245(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v17 : string = " "
    let v18 : string = v6 + v17 
    let v22 : string = v18 + v7 
    let v27 : string = " #"
    let v28 : string = v22 + v27 
    let v32 : (int64 -> string) = _.ToString()
    let v33 : string = v32 v14
    let v37 : string = v28 + v33 
    let v41 : string = v37 + v17 
    let v46 : string = "spiral.process_rust / wasm error"
    let v47 : string = v41 + v46 
    let v52 : string = " / "
    let v53 : string = v47 + v52 
    let v57 : string = v53 + v13 
    method17(v57)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 4 >= v65
            v66
    let v68 : bool = v67 = false
    let v303 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method80()
            let v128 : string = $"\n{v3}"
            let v129 : string = method244(v108, v109, v110, v111, v112, v113, v126, v127, v4, v1, v2, v0, v128)
            let v144 : unit = ()
            let v145 : unit = (fun () -> v20 (); v144) ()
            let struct (v168 : Mut0, v169 : Mut1, v170 : Mut2, v171 : Mut3, v172 : Mut4, v173 : int64 option) = TraceState.trace_state.Value
            let v188 : unit = ()
            let v189 : (unit -> unit) = closure8(v168)
            let v190 : unit = (fun () -> v189 (); v188) ()
            let v193 : (string -> unit) = closure9()
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v196 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : string = v171.l0
            let v198 : bool = v197 = ""
            let v213 : string =
                if v198 then
                    v129
                else
                    let v199 : bool = v129 = ""
                    if v199 then
                        let v200 : string = v171.l0
                        v200
                    else
                        let v201 : string = v171.l0
                        let v204 : string = "\n"
                        let v205 : string = v201 + v204 
                        let v209 : string = v205 + v129 
                        v209
            (* run_target_args'
            let v218 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v219 
            let _run_target_args'_v218 = v220 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v221 
            let _run_target_args'_v218 = v222 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v223 
            let _run_target_args'_v218 = v224 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v226 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v226 
            #endif
#if FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v230 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v234 
            #endif
#else
            let v238 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v238 
            #endif
            let v241 : Ref<Str> = _run_target_args'_v218 
            let v250 : string = $"$0.chars()"
            let v251 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v241 v250 
            let v252 : string = "$0"
            let v253 : _ = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.collect::<Vec<_>>()"
            let v255 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v257 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "x"
            let v261 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v260 
            let v262 : string = "String::from_iter($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "true; $0 }).collect::<Vec<_>>()"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_map"
            let v267 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0.len()"
            let v269 : unativeint = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v275 : int32 = v269 |> int32 
            let v285 : string = ""
            let v286 : bool = v129 <> v285 
            let v290 : bool =
                if v286 then
                    let v289 : bool = v275 <= 1
                    v289
                else
                    false
            if v290 then
                v171.l0 <- v213
                ()
            else
                v171.l0 <- v285
                let v291 : string = "true; $0.into_iter().for_each(|x| { //"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v267 v291 
                let v293 : string = "x"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
                let v297 : string = $"true"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = "true; }); //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v193 v129
            #endif
#if FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#else
            v193 v129
            #endif
            // run_target_args' is_unit
            let v301 : (string -> unit) = v169.l0
            v301 v129
            US6_0(v168, v169, v170, v171, v172, v173)
    
    ()
and method247 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method13()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v10 : string = "{ "
    let v11 : string = $"{v10}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v7, v11)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v29 : string = "exit_code"
    let v30 : string = $"{v29}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v7, v30)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v48 : string = " = "
    let v49 : string = $"{v48}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v7, v49)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v69 : string = $"{v0}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v7, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v7, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v106 : string = "new_code_path"
    let v107 : string = $"{v106}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v7, v107)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v124 : string = $"{v48}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v7, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v141 : string = $"{v1}"
    let v149 : unit = ()
    let v150 : (unit -> unit) = closure7(v7, v141)
    let v151 : unit = (fun () -> v150 (); v149) ()
    let v158 : string = $"{v87}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v7, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v176 : string = "wasm_path"
    let v177 : string = $"{v176}"
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure7(v7, v177)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v194 : string = $"{v48}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v7, v194)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v211 : string = $"{v2}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v7, v211)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v228 : string = $"{v87}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v7, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v246 : string = "command"
    let v247 : string = $"{v246}"
    let v255 : unit = ()
    let v256 : (unit -> unit) = closure7(v7, v247)
    let v257 : unit = (fun () -> v256 (); v255) ()
    let v264 : string = $"{v48}"
    let v272 : unit = ()
    let v273 : (unit -> unit) = closure7(v7, v264)
    let v274 : unit = (fun () -> v273 (); v272) ()
    let v281 : string = $"{v3}"
    let v289 : unit = ()
    let v290 : (unit -> unit) = closure7(v7, v281)
    let v291 : unit = (fun () -> v290 (); v289) ()
    let v298 : string = $"{v87}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v7, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v316 : string = "cleanup"
    let v317 : string = $"{v316}"
    let v325 : unit = ()
    let v326 : (unit -> unit) = closure7(v7, v317)
    let v327 : unit = (fun () -> v326 (); v325) ()
    let v334 : string = $"{v48}"
    let v342 : unit = ()
    let v343 : (unit -> unit) = closure7(v7, v334)
    let v344 : unit = (fun () -> v343 (); v342) ()
    let v352 : string =
        if v4 then
            let v350 : string = "true"
            v350
        else
            let v351 : string = "false"
            v351
    let v354 : string = $"{v352}"
    let v362 : unit = ()
    let v363 : (unit -> unit) = closure7(v7, v354)
    let v364 : unit = (fun () -> v363 (); v362) ()
    let v371 : string = $"{v87}"
    let v379 : unit = ()
    let v380 : (unit -> unit) = closure7(v7, v371)
    let v381 : unit = (fun () -> v380 (); v379) ()
    let v389 : string = "cargo_result"
    let v390 : string = $"{v389}"
    let v398 : unit = ()
    let v399 : (unit -> unit) = closure7(v7, v390)
    let v400 : unit = (fun () -> v399 (); v398) ()
    let v407 : string = $"{v48}"
    let v415 : unit = ()
    let v416 : (unit -> unit) = closure7(v7, v407)
    let v417 : unit = (fun () -> v416 (); v415) ()
    let v424 : string = $"{v5}"
    let v432 : unit = ()
    let v433 : (unit -> unit) = closure7(v7, v424)
    let v434 : unit = (fun () -> v433 (); v432) ()
    let v442 : string = " }"
    let v443 : string = $"{v442}"
    let v451 : unit = ()
    let v452 : (unit -> unit) = closure7(v7, v443)
    let v453 : unit = (fun () -> v452 (); v451) ()
    let v459 : string = v7.l0
    v459
and method246 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method247(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v18 : string = " "
    let v19 : string = v6 + v18 
    let v23 : string = v19 + v7 
    let v28 : string = " #"
    let v29 : string = v23 + v28 
    let v33 : (int64 -> string) = _.ToString()
    let v34 : string = v33 v15
    let v38 : string = v29 + v34 
    let v42 : string = v38 + v18 
    let v47 : string = "spiral.process_rust / cargo error"
    let v48 : string = v42 + v47 
    let v53 : string = " / "
    let v54 : string = v48 + v53 
    let v58 : string = v54 + v14 
    method17(v58)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure2()
    let v22 : unit = (fun () -> v21 (); v20) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : Mut4, v50 : int64 option) = TraceState.trace_state.Value
    let v63 : US0 = v49.l0
    let v64 : bool = v47.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    let v69 : bool = v68 = false
    let v304 : US6 =
        if v69 then
            US6_1
        else
            let v85 : unit = ()
            let v86 : unit = (fun () -> v21 (); v85) ()
            let struct (v109 : Mut0, v110 : Mut1, v111 : Mut2, v112 : Mut3, v113 : Mut4, v114 : int64 option) = TraceState.trace_state.Value
            let v127 : string = method7(v109, v110, v111, v112, v113, v114)
            let v128 : string = method80()
            let v129 : string = $"\n{v2}"
            let v130 : string = method246(v109, v110, v111, v112, v113, v114, v127, v128, v3, v1, v4, v5, v0, v129)
            let v145 : unit = ()
            let v146 : unit = (fun () -> v21 (); v145) ()
            let struct (v169 : Mut0, v170 : Mut1, v171 : Mut2, v172 : Mut3, v173 : Mut4, v174 : int64 option) = TraceState.trace_state.Value
            let v189 : unit = ()
            let v190 : (unit -> unit) = closure8(v169)
            let v191 : unit = (fun () -> v190 (); v189) ()
            let v194 : (string -> unit) = closure9()
            (* run_target_args'
            let v195 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v130 v196 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v197 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v130 v197 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v198 : string = v172.l0
            let v199 : bool = v198 = ""
            let v214 : string =
                if v199 then
                    v130
                else
                    let v200 : bool = v130 = ""
                    if v200 then
                        let v201 : string = v172.l0
                        v201
                    else
                        let v202 : string = v172.l0
                        let v205 : string = "\n"
                        let v206 : string = v202 + v205 
                        let v210 : string = v206 + v130 
                        v210
            (* run_target_args'
            let v219 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v220 
            let _run_target_args'_v219 = v221 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v222 
            let _run_target_args'_v219 = v223 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v224 
            let _run_target_args'_v219 = v225 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v227 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v227 
            #endif
#if FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v231 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v235 
            #endif
#else
            let v239 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v239 
            #endif
            let v242 : Ref<Str> = _run_target_args'_v219 
            let v251 : string = $"$0.chars()"
            let v252 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v242 v251 
            let v253 : string = "$0"
            let v254 : _ = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.collect::<Vec<_>>()"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v258 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "x"
            let v262 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "String::from_iter($0)"
            let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "true; $0 }).collect::<Vec<_>>()"
            let v266 : bool = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "_vec_map"
            let v268 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = "$0.len()"
            let v270 : unativeint = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v276 : int32 = v270 |> int32 
            let v286 : string = ""
            let v287 : bool = v130 <> v286 
            let v291 : bool =
                if v287 then
                    let v290 : bool = v276 <= 1
                    v290
                else
                    false
            if v291 then
                v172.l0 <- v214
                ()
            else
                v172.l0 <- v286
                let v292 : string = "true; $0.into_iter().for_each(|x| { //"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v268 v292 
                let v294 : string = "x"
                let v295 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v295 v296 
                let v298 : string = $"true"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = "true; }); //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr () v300 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v194 v130
            #endif
#if FABLE_COMPILER_PYTHON
            v194 v130
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v194 v130
            #endif
#else
            v194 v130
            #endif
            // run_target_args' is_unit
            let v302 : (string -> unit) = v170.l0
            v302 v130
            US6_0(v169, v170, v171, v172, v173, v174)
    
    ()
and method249 (v0 : string, v1 : UH5) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "new_code_path"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "cleanup"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"%A{v1}"
    let v138 : string = $"{v134}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v3, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v156 : string = " }"
    let v157 : string = $"{v156}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v3, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v173 : string = v3.l0
    v173
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method249(v8, v24)
    let v26 : int64 = v0.l0
    let v29 : string = " "
    let v30 : string = v6 + v29 
    let v34 : string = v30 + v7 
    let v39 : string = " #"
    let v40 : string = v34 + v39 
    let v44 : (int64 -> string) = _.ToString()
    let v45 : string = v44 v26
    let v49 : string = v40 + v45 
    let v53 : string = v49 + v29 
    let v58 : string = "spiral.process_rust / cleanup"
    let v59 : string = v53 + v58 
    let v64 : string = " / "
    let v65 : string = v59 + v64 
    let v69 : string = v65 + v25 
    method17(v69)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    let v74 : bool = v73 = false
    let v308 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method83()
            let v134 : string = method248(v114, v115, v116, v117, v118, v119, v132, v133, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
            let v149 : unit = ()
            let v150 : unit = (fun () -> v26 (); v149) ()
            let struct (v173 : Mut0, v174 : Mut1, v175 : Mut2, v176 : Mut3, v177 : Mut4, v178 : int64 option) = TraceState.trace_state.Value
            let v193 : unit = ()
            let v194 : (unit -> unit) = closure8(v173)
            let v195 : unit = (fun () -> v194 (); v193) ()
            let v198 : (string -> unit) = closure9()
            (* run_target_args'
            let v199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v200 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v200 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v201 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v201 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v202 : string = v176.l0
            let v203 : bool = v202 = ""
            let v218 : string =
                if v203 then
                    v134
                else
                    let v204 : bool = v134 = ""
                    if v204 then
                        let v205 : string = v176.l0
                        v205
                    else
                        let v206 : string = v176.l0
                        let v209 : string = "\n"
                        let v210 : string = v206 + v209 
                        let v214 : string = v210 + v134 
                        v214
            (* run_target_args'
            let v223 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v224 
            let _run_target_args'_v223 = v225 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v226 : string = "&*$0"
            let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v226 
            let _run_target_args'_v223 = v227 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v228 
            let _run_target_args'_v223 = v229 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v235 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v239 
            #endif
#else
            let v243 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v243 
            #endif
            let v246 : Ref<Str> = _run_target_args'_v223 
            let v255 : string = $"$0.chars()"
            let v256 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v246 v255 
            let v257 : string = "$0"
            let v258 : _ = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "$0.collect::<Vec<_>>()"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v262 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "x"
            let v266 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "String::from_iter($0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "true; $0 }).collect::<Vec<_>>()"
            let v270 : bool = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v271 : string = "_vec_map"
            let v272 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "$0.len()"
            let v274 : unativeint = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v280 : int32 = v274 |> int32 
            let v290 : string = ""
            let v291 : bool = v134 <> v290 
            let v295 : bool =
                if v291 then
                    let v294 : bool = v280 <= 1
                    v294
                else
                    false
            if v295 then
                v176.l0 <- v218
                ()
            else
                v176.l0 <- v290
                let v296 : string = "true; $0.into_iter().for_each(|x| { //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v272 v296 
                let v298 : string = "x"
                let v299 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v299 v300 
                let v302 : string = $"true"
                let v303 : bool = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = "true; }); //"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr () v304 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v198 v134
            #endif
#if FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#else
            v198 v134
            #endif
            // run_target_args' is_unit
            let v306 : (string -> unit) = v174.l0
            v306 v134
            US6_0(v173, v174, v175, v176, v177, v178)
    
    ()
and closure105 () () : US48 =
    US48_0
and method251 () : (unit -> US48) =
    closure105()
and closure106 () (v0 : string) : US48 =
    US48_1(v0)
and method252 () : (string -> US48) =
    closure106()
and method254 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "error'"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method253 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method254(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "file_system.file_delete"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure107 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method80()
            let v124 : string = method253(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method250 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method47()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US48) = method251()
        let v24 : (string -> US48) = method252()
        let v26 : US48 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US48_1(v29) -> (* Error *)
            let v341 : unit = ()
            let v342 : (unit -> unit) = closure107(v29)
            let v343 : unit = (fun () -> v342 (); v341) ()
            ()
        | US48_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v658 : (string -> unit) = System.IO.File.Delete
        v658 v1
        #endif
        // run_target_args' is_unit
        method250(v3)
    | UH5_0 -> (* Nil *)
        ()
and method255 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US49 =
    US49_0(v0)
and method256 () : (std_fs_FileType -> US49) =
    closure109()
and closure110 () (v0 : std_string_String) : US49 =
    US49_1(v0)
and method257 () : (std_string_String -> US49) =
    closure110()
and method258 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v201 : string = null |> unbox<string>
    let _run_target_args'_v5 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v209 : string = null |> unbox<string>
    let _run_target_args'_v5 = v209 
    #endif
#if FABLE_COMPILER_PYTHON
    let v213 : string = null |> unbox<string>
    let _run_target_args'_v5 = v213 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : (string -> string) = System.IO.Path.GetDirectoryName
    let v217 : string = v216 v0
    let _run_target_args'_v5 = v217 
    #endif
#else
    let v218 : (string -> string) = System.IO.Path.GetDirectoryName
    let v219 : string = v218 v0
    let _run_target_args'_v5 = v219 
    #endif
    let v220 : string = _run_target_args'_v5 
    v220
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method77()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US49) = method256()
    let v37 : (std_string_String -> US49) = method257()
    let v39 : US49 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v296 : US50 =
        match v39 with
        | US49_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US50_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v89 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v90 : string = "format!(\"{}\", $0)"
                let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v90 
                let _run_target_args'_v89 = v91 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v92 : string = "format!(\"{}\", $0)"
                let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v92 
                let _run_target_args'_v89 = v93 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94 : string = "format!(\"{}\", $0)"
                let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v94 
                let _run_target_args'_v89 = v95 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v97 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v97 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v105 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v105 
                #endif
#else
                let v109 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v109 
                #endif
                let v112 : std_string_String = _run_target_args'_v89 
                let v121 : string = "fable_library_rust::String_::fromString($0)"
                let v122 : string = Fable.Core.RustInterop.emitRustExpr v112 v121 
                let v123 : string = method258(v122)
                let v125 : bool = v123.StartsWith (v0, false, null)
                let v128 : bool = v125 = false
                if v128 then
                    US50_1
                else
                    let v130 : string option = method39(v122)
                    let v133 : (string -> US5) = method6()
                    let v134 : US5 option = v130 |> Option.map v133 
                    let v154 : US5 = US5_1
                    let v155 : US5 = v134 |> Option.defaultValue v154 
                    match v155 with
                    | US5_0(v159) -> (* Some *)
                        let v161 : bool = v159.Contains v0 
                        let v164 : bool = v161 = false
                        if v164 then
                            US50_2
                        else
                            US50_1
                    | _ ->
                        US50_1
        | _ ->
            let v172 : string = "async_walkdir::DirEntry::path(&$0)"
            let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v172 
            (* run_target_args'
            let v178 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v179 : string = "$0.display()"
            let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
            let _run_target_args'_v178 = v180 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v181 : string = "$0.display()"
            let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
            let _run_target_args'_v178 = v182 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
            let _run_target_args'_v178 = v184 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v186 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v186 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v194 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v194 
            #endif
#else
            let v198 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v198 
            #endif
            let v201 : std_path_Display = _run_target_args'_v178 
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "format!(\"{}\", $0)"
            let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "format!(\"{}\", $0)"
            let v218 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "format!(\"{}\", $0)"
            let v220 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : std_string_String = _run_target_args'_v214 
            let v246 : string = "fable_library_rust::String_::fromString($0)"
            let v247 : string = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = method258(v247)
            let v250 : bool = v248.StartsWith (v0, false, null)
            let v253 : bool = v250 = false
            if v253 then
                US50_1
            else
                let v255 : string option = method39(v247)
                let v258 : (string -> US5) = method6()
                let v259 : US5 option = v255 |> Option.map v258 
                let v279 : US5 = US5_1
                let v280 : US5 = v259 |> Option.defaultValue v279 
                match v280 with
                | US5_0(v284) -> (* Some *)
                    let v286 : bool = v284.Contains v0 
                    let v289 : bool = v286 = false
                    if v289 then
                        US50_2
                    else
                        US50_1
                | _ ->
                    US50_1
    let v297 : string = ""
    let v298 : string = "}"
    let v299 : string = v297 + v298 
    let x = v296 //
    let v300 : _ = x
    let v301 : unit = ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = $"true; let _fix_closure_v301 = $0"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v300 v303 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : string = $"true; let _fix_closure_v301 = $0"
    let v306 : bool = Fable.Core.RustInterop.emitRustExpr v300 v305 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v307 : string = $"true; let _fix_closure_v301 = $0"
    let v308 : bool = Fable.Core.RustInterop.emitRustExpr v300 v307 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v302 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#else
    let _run_target_args'_v302 = false 
    #endif
    let v309 : bool = _run_target_args'_v302 
    let v310 : string = $"true; _fix_closure_v301 " + v299 + "); " + v297 + " // rust.fix_closure'"
    let v311 : bool = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "__future_init"
    let v313 : _ = Fable.Core.RustInterop.emitRustExpr () v312 
    let v314 : string = "v313"
    let v315 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US50>>, Send<Dyn<std_future_Future<US50>>>>>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "v315.await"
    let v317 : US50 = Fable.Core.RustInterop.emitRustExpr () v316 
    let v326 : async_walkdir_Filtering =
        match v317 with
        | US50_2 -> (* Continue *)
            let v322 : string = "async_walkdir::Filtering::Continue"
            let v323 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v322 
            v323
        | US50_0 -> (* Ignore *)
            let v318 : string = "async_walkdir::Filtering::Ignore"
            let v319 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v318 
            v319
        | US50_1 -> (* IgnoreDir *)
            let v320 : string = "async_walkdir::Filtering::IgnoreDir"
            let v321 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v320 
            v321
    let v327 : string = v297 + v298 
    let x = v326 //
    let v328 : _ = x
    let v329 : unit = ()
    (* run_target_args'
    let v330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v331 : string = $"true; let _fix_closure_v329 = $0"
    let v332 : bool = Fable.Core.RustInterop.emitRustExpr v328 v331 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = $"true; let _fix_closure_v329 = $0"
    let v334 : bool = Fable.Core.RustInterop.emitRustExpr v328 v333 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v335 : string = $"true; let _fix_closure_v329 = $0"
    let v336 : bool = Fable.Core.RustInterop.emitRustExpr v328 v335 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v330 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#else
    let _run_target_args'_v330 = false 
    #endif
    let v337 : bool = _run_target_args'_v330 
    let v338 : string = $"true; _fix_closure_v329 " + v327 + "); " + v297 + " // rust.fix_closure'"
    let v339 : bool = Fable.Core.RustInterop.emitRustExpr () v338 
    let v340 : string = "__future_init"
    let v341 : _ = Fable.Core.RustInterop.emitRustExpr () v340 
    let v342 : string = "v341"
    let v343 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v342 
    v343
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method260 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US51 =
    US51_0(v0)
and method261 () : (async_walkdir_DirEntry -> US51) =
    closure113()
and closure114 () (v0 : std_string_String) : US51 =
    US51_1(v0)
and method262 () : (std_string_String -> US51) =
    closure114()
and method264 (v0 : std_string_String) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "error"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "format!(\"{:#?}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v65 
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _run_target_args'_v64 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v64 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v0}"
    let _run_target_args'_v64 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : string = $"%A{v0}"
    let _run_target_args'_v64 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v86 : string = $"%A{v0}"
    let _run_target_args'_v64 = v86 
    #endif
#else
    let v90 : string = $"%A{v0}"
    let _run_target_args'_v64 = v90 
    #endif
    let v93 : string = _run_target_args'_v64 
    let v103 : string = $"{v93}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v2, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v2, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v138 : string = v2.l0
    v138
and method263 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method264(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript / stream_filter_map"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure115 (v0 : std_string_String) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method80()
            let v124 : string = method263(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method260()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US51) = method261()
    let v19 : (std_string_String -> US51) = method262()
    let v21 : US51 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v830 : US52 =
        match v21 with
        | US51_1(v199) -> (* Error *)
            let v511 : unit = ()
            let v512 : (unit -> unit) = closure115(v199)
            let v513 : unit = (fun () -> v512 (); v511) ()
            US52_1
        | US51_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v67 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v68 : string = "format!(\"{}\", $0)"
            let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v68 
            let _run_target_args'_v67 = v69 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v70 : string = "format!(\"{}\", $0)"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v70 
            let _run_target_args'_v67 = v71 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v72 : string = "format!(\"{}\", $0)"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v72 
            let _run_target_args'_v67 = v73 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v75 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v75 
            #endif
#if FABLE_COMPILER_PYTHON
            let v79 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v79 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v83 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v83 
            #endif
#else
            let v87 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v87 
            #endif
            let v90 : std_string_String = _run_target_args'_v67 
            let v99 : string = "fable_library_rust::String_::fromString($0)"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v90 v99 
            let v101 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v102 : string = $"regex::Regex::new(&$0)"
            let v103 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v101 v102 
            (* run_target_args'
            let v105 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "$0.unwrap()"
            let v107 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v106 
            let _run_target_args'_v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "$0.unwrap()"
            let v109 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v108 
            let _run_target_args'_v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "$0.unwrap()"
            let v111 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v110 
            let _run_target_args'_v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v114 
            #endif
#else
            let v115 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v115 
            #endif
            let v116 : regex_Regex = _run_target_args'_v105 
            let v119 : Vec<std_collections_HashMap<string, string>> = method234(v100, v116)
            let v120 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v121 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v119 v120 
            let v122 : std_collections_HashMap<string, string> option = v121 |> Array.tryItem 0 
            let v125 : (std_collections_HashMap<string, string> -> US46) = method235()
            let v126 : US46 option = v122 |> Option.map v125 
            let v146 : US46 = US46_1
            let v147 : US46 = v126 |> Option.defaultValue v146 
            let v186 : US47 =
                match v147 with
                | US46_1 -> (* None *)
                    US47_1
                | US46_0(v151) -> (* Some *)
                    let v152 : string = method236()
                    let v153 : string = "std::collections::HashMap::get(&$0, &v152).map(|x| x).cloned()"
                    let v154 : string option = Fable.Core.RustInterop.emitRustExpr v151 v153 
                    let v157 : (string -> US5) = method6()
                    let v158 : US5 option = v154 |> Option.map v157 
                    let v178 : US5 = US5_1
                    let v179 : US5 = v158 |> Option.defaultValue v178 
                    US47_0(v179)
            let v193 : US5 =
                match v186 with
                | US47_0(v187) -> (* Some *)
                    match v187 with
                    | US5_0(v188) -> (* Some *)
                        US5_0(v188)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v193 with
            | US5_1 -> (* None *)
                US52_1
            | US5_0(v194) -> (* Some *)
                US52_0(v100, v194)
    match v830 with
    | US52_1 -> (* None *)
        let v838 : struct (string * string) option = None
        v838
    | US52_0(v831, v832) -> (* Some *)
        let v834 : struct (string * string) option = Some struct (v831, v832) 
        v834
and method259 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US52 =
    US52_0(v0, v1)
and method265 () : (struct (string * string) -> US52) =
    closure117()
and method267 (v0 : US52) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "version"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"%A{v0}"
    let v65 : string = $"{v61}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v2, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = " }"
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v2, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v100 : string = v2.l0
    v100
and method266 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US52) : string =
    let v9 : string = method267(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure118 (v0 : US52) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method266(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method268 (v0 : string, v1 : string, v2 : US52) : unit =
    match v2 with
    | US52_1 -> (* None *)
        let v13 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v13
    | US52_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method34(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method34(v0, v8)
        method218(v7, v9)
        let v10 : string = "fable_modules"
        let v11 : string = method34(v7, v10)
        let v12 : bool = true
        method87(v12, v11)
and method269 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_typescript"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method269(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method271 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "new_code_path"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method270 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method271(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure120 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method270(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method272 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method272(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method273 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method273(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method73()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method275 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "new_code_path"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "external_command"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "run_result"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method274 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method275(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_typescript / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method274(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method276 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method176(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_typescript / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method276(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method277 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_python"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method277(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method278 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method271(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_python"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure126 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method278(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure127 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method73()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method279 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method275(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_python / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method279(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method280 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method176(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_python / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method280(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method282 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "subcommand"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "format!(\"{:#?}\", $0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "format!(\"{:#?}\", $0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v70 
    let v72 : string = "fable_library_rust::String_::fromString($0)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v65 = v77 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v79 : string = $"%A{v0}"
    let _run_target_args'_v65 = v79 
    #endif
#if FABLE_COMPILER_PYTHON
    let v83 : string = $"%A{v0}"
    let _run_target_args'_v65 = v83 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : string = $"%A{v0}"
    let _run_target_args'_v65 = v87 
    #endif
#else
    let v91 : string = $"%A{v0}"
    let _run_target_args'_v65 = v91 
    #endif
    let v94 : string = _run_target_args'_v65 
    let v104 : string = $"{v94}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v3, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v122 : string = "; "
    let v123 : string = $"{v122}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v3, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v141 : string = "arg_matches"
    let v142 : string = $"{v141}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v3, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v159 : string = $"{v44}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    (* run_target_args'
    let v179 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v180 : string = "format!(\"{:#?}\", $0)"
    let v181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v180 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v181 v182 
    let _run_target_args'_v179 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "format!(\"{:#?}\", $0)"
    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v184 
    let v186 : string = "fable_library_rust::String_::fromString($0)"
    let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
    let _run_target_args'_v179 = v187 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v188 : string = "format!(\"{:#?}\", $0)"
    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v188 
    let v190 : string = "fable_library_rust::String_::fromString($0)"
    let v191 : string = Fable.Core.RustInterop.emitRustExpr v189 v190 
    let _run_target_args'_v179 = v191 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v193 : string = $"%A{v1}"
    let _run_target_args'_v179 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = $"%A{v1}"
    let _run_target_args'_v179 = v197 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v201 : string = $"%A{v1}"
    let _run_target_args'_v179 = v201 
    #endif
#else
    let v205 : string = $"%A{v1}"
    let _run_target_args'_v179 = v205 
    #endif
    let v208 : string = _run_target_args'_v179 
    let v218 : string = $"{v208}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v3, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v236 : string = " }"
    let v237 : string = $"{v236}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v3, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v253 : string = v3.l0
    v253
and method281 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method282(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / invalid subcommand"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : string = method281(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v28 v37 
    v38
and method283 () : (serde_json_Error -> string) =
    closure132()
and method18 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US7) = method19()
    let v14 : US7 option = v10 |> Option.map v13 
    let v35 : US7 = US7_1
    let v36 : US7 = v14 |> Option.defaultValue v35 
    let v21569 : (struct (string * string) []) =
        match v36 with
        | US7_0(v40, v41) -> (* Some *)
            let v42 : string = "fable_library_rust::String_::fromString($0)"
            let v43 : string = Fable.Core.RustInterop.emitRustExpr v40 v42 
            let v44 : bool = v43 = "gleam"
            if v44 then
                let v45 : string = method20()
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "&*$0"
                let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "&*$0"
                let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "&*$0"
                let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : Ref<Str> = _run_target_args'_v50 
                let v82 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v83 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v73) v82 
                let v86 : (std_string_String -> US8) = method21()
                let v87 : US8 option = v83 |> Option.map v86 
                let v107 : US8 = US8_1
                let v108 : US8 = v87 |> Option.defaultValue v107 
                let v115 : std_string_String =
                    match v108 with
                    | US8_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US8_0(v112) -> (* Some *)
                        v112
                let v116 : string = "fable_library_rust::String_::fromString($0)"
                let v117 : string = Fable.Core.RustInterop.emitRustExpr v115 v116 
                let v118 : string = method22()
                (* run_target_args'
                let v123 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v124 : string = "&*$0"
                let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                let _run_target_args'_v123 = v125 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v126 : string = "&*$0"
                let v127 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v126 
                let _run_target_args'_v123 = v127 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v128 : string = "&*$0"
                let v129 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v128 
                let _run_target_args'_v123 = v129 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v131 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v131 
                #endif
#if FABLE_COMPILER_PYTHON
                let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v135 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v139 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v139 
                #endif
#else
                let v143 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v143 
                #endif
                let v146 : Ref<Str> = _run_target_args'_v123 
                let v155 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v156 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v146) v155 
                let v159 : (std_string_String -> US8) = method21()
                let v160 : US8 option = v156 |> Option.map v159 
                let v180 : US8 = US8_1
                let v181 : US8 = v160 |> Option.defaultValue v180 
                let v242 : US9 =
                    match v181 with
                    | US8_1 -> (* None *)
                        US9_1
                    | US8_0(v185) -> (* Some *)
                        let v186 : string = "fable_library_rust::String_::fromString($0)"
                        let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
                        
                        
                        
                        
                        let v190 : string = "JavaScript"
                        let v191 : (unit -> string) = v190.ToLower
                        let v192 : string = v191 ()
                        let v197 : string = "Erlang"
                        let v198 : (unit -> string) = v197.ToLower
                        let v199 : string = v198 ()
                        let v202 : bool = "Erlang" = v187
                        let v206 : US10 =
                            if v202 then
                                let v203 : US11 = US11_0
                                US10_0(v203)
                            else
                                US10_1
                        let v238 : US10 =
                            match v206 with
                            | US10_1 -> (* None *)
                                let v209 : bool = "JavaScript" = v187
                                let v213 : US10 =
                                    if v209 then
                                        let v210 : US11 = US11_1
                                        US10_0(v210)
                                    else
                                        US10_1
                                match v213 with
                                | US10_1 -> (* None *)
                                    let v216 : bool = v199 = v187
                                    let v220 : US10 =
                                        if v216 then
                                            let v217 : US11 = US11_0
                                            US10_0(v217)
                                        else
                                            US10_1
                                    match v220 with
                                    | US10_1 -> (* None *)
                                        let v223 : bool = v192 = v187
                                        let v227 : US10 =
                                            if v223 then
                                                let v224 : US11 = US11_1
                                                US10_0(v224)
                                            else
                                                US10_1
                                        match v227 with
                                        | US10_1 -> (* None *)
                                            US10_1
                                        | US10_0(v228) -> (* Some *)
                                            US10_0(v228)
                                    | US10_0(v221) -> (* Some *)
                                        US10_0(v221)
                                | US10_0(v214) -> (* Some *)
                                    US10_0(v214)
                            | US10_0(v207) -> (* Some *)
                                US10_0(v207)
                        US9_0(v238)
                let v249 : US10 =
                    match v242 with
                    | US9_0(v243) -> (* Some *)
                        match v243 with
                        | US10_0(v244) -> (* Some *)
                            US10_0(v244)
                        | _ ->
                            US10_1
                    | _ ->
                        US10_1
                let v253 : US11 =
                    match v249 with
                    | US10_1 -> (* None *)
                        US11_0
                    | US10_0(v250) -> (* Some *)
                        v250
                let v254 : string = method23()
                (* run_target_args'
                let v259 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v260 : string = "&*$0"
                let v261 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _run_target_args'_v259 = v261 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v262 : string = "&*$0"
                let v263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v262 
                let _run_target_args'_v259 = v263 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v264 : string = "&*$0"
                let v265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v264 
                let _run_target_args'_v259 = v265 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v267 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v267 
                #endif
#if FABLE_COMPILER_PYTHON
                let v271 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v271 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v275 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v275 
                #endif
#else
                let v279 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v279 
                #endif
                let v282 : Ref<Str> = _run_target_args'_v259 
                let v291 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v292 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v282) v291 
                let v295 : (Vec<std_string_String> -> US12) = method24()
                let v296 : US12 option = v292 |> Option.map v295 
                let v316 : US12 = US12_1
                let v317 : US12 = v296 |> Option.defaultValue v316 
                let v321 : (std_string_String []) = [||]
                let v322 : string = "$0.to_vec()"
                let v323 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v321 v322 
                let v326 : Vec<std_string_String> =
                    match v317 with
                    | US12_1 -> (* None *)
                        v323
                    | US12_0(v324) -> (* Some *)
                        v324
                (* run_target_args'
                let v331 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v336 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v337 : string = "std::fs::read(&*$0)"
                let v338 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v117 v337 
                (* run_target_args'
                let v340 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v341 : string = "$0.unwrap()"
                let v342 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v341 
                let _run_target_args'_v340 = v342 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v343 : string = "$0.unwrap()"
                let v344 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v343 
                let _run_target_args'_v340 = v344 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v345 : string = "$0.unwrap()"
                let v346 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v345 
                let _run_target_args'_v340 = v346 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v347 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v347 
                #endif
#if FABLE_COMPILER_PYTHON
                let v348 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v348 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v349 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v349 
                #endif
#else
                let v350 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v350 
                #endif
                let v351 : Vec<uint8> = _run_target_args'_v340 
                let _run_target_args'_v336 = v351 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v359 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v363 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v363 
                #endif
#if FABLE_COMPILER_PYTHON
                let v367 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v367 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v371 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v371 
                #endif
#else
                let v374 : (uint8 []) = v117 |> System.IO.File.ReadAllBytes
                let v375 : string = "$0.to_vec()"
                let v376 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                let _run_target_args'_v336 = v376 
                #endif
                let v377 : Vec<uint8> = _run_target_args'_v336 
                let v386 : Vec<uint8> = method25(v377)
                let v387 : string = "std::string::String::from_utf8($0)"
                let v388 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v386 v387 
                (* run_target_args'
                let v390 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v391 : string = "$0.unwrap()"
                let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v391 
                let _run_target_args'_v390 = v392 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v393 : string = "$0.unwrap()"
                let v394 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v393 
                let _run_target_args'_v390 = v394 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v395 : string = "$0.unwrap()"
                let v396 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v395 
                let _run_target_args'_v390 = v396 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v397 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v397 
                #endif
#if FABLE_COMPILER_PYTHON
                let v398 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v398 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v399 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v399 
                #endif
#else
                let v400 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v400 
                #endif
                let v401 : std_string_String = _run_target_args'_v390 
                let v404 : string = "fable_library_rust::String_::fromString($0)"
                let v405 : string = Fable.Core.RustInterop.emitRustExpr v401 v404 
                let _run_target_args'_v331 = v405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v407 : string = null |> unbox<string>
                let _run_target_args'_v331 = v407 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v411 : string = null |> unbox<string>
                let _run_target_args'_v331 = v411 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v415 : string = null |> unbox<string>
                let _run_target_args'_v331 = v415 
                #endif
#if FABLE_COMPILER_PYTHON
                let v419 : string = null |> unbox<string>
                let _run_target_args'_v331 = v419 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v423 : string = null |> unbox<string>
                let _run_target_args'_v331 = v423 
                #endif
#else
                let v426 : string = v117 |> System.IO.File.ReadAllText
                let _run_target_args'_v331 = v426 
                #endif
                let v427 : string = _run_target_args'_v331 
                let v436 : string = "gleam"
                let v437 : string = method26(v436, v427)
                let v438 : string = method27(v437)
                let v439 : string = method32()
                let v440 : US5 = method33(v439)
                let v446 : US5 =
                    match v440 with
                    | US5_1 -> (* None *)
                        let v443 : string = __SOURCE_DIRECTORY__
                        method33(v443)
                    | US5_0(v441) -> (* Some *)
                        US5_0(v441)
                let v452 : US5 =
                    match v446 with
                    | US5_1 -> (* None *)
                        let v449 : string = "/workspaces"
                        method33(v449)
                    | US5_0(v447) -> (* Some *)
                        US5_0(v447)
                let v456 : string =
                    match v452 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v453) -> (* Some *)
                        v453
                let v457 : string = method53(v456)
                let v458 : bool = "deps" = v457
                let v469 : string =
                    if v458 then
                        let v459 : string option = method39(v456)
                        let v461 : string = v459 |> Option.get
                        let v464 : US5 = method33(v461)
                        match v464 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v465) -> (* Some *)
                            v465
                    else
                        v456
                let v470 : string = "polyglot"
                let v471 : string = method34(v469, v470)
                let v472 : string = method32()
                let v474 : (unit -> string) = v472.ToLower
                let v475 : string = v474 ()
                let v479 : (unit -> string) = v471.ToLower
                let v480 : string = v479 ()
                let v484 : bool = v475.StartsWith (v480, false, null)
                let v489 : US14 =
                    if v484 then
                        US14_1(v480)
                    else
                        US14_0(v480)
                let v501 : Result<string, string> =
                    match v489 with
                    | US14_1(v495) -> (* Error *)
                        let v497 : Result<string, string> = Error v495 
                        v497
                    | US14_0(v490) -> (* Ok *)
                        let v492 : Result<string, string> = Ok v490 
                        v492
                let v502 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v503 : bool = Fable.Core.RustInterop.emitRustExpr v501 v502 
                let v504 : string = "x"
                let v505 : string = Fable.Core.RustInterop.emitRustExpr () v504 
                let v506 : string = "true; $0 })"
                let v507 : bool = Fable.Core.RustInterop.emitRustExpr v505 v506 
                let v508 : string = "_result_unwrap_or_else"
                let v509 : string = Fable.Core.RustInterop.emitRustExpr () v508 
                let v510 : string = method67(v509)
                let v511 : string option = method39(v117)
                let v514 : string = ""
                let v515 : string = v511 |> Option.defaultValue v514 
                let v518 : string = method67(v515)
                let v519 : string = ".."
                let v520 : string = method34(v518, v519)
                let v521 : string = method67(v520)
                let v522 : string = "gleam.toml"
                let v523 : string = method34(v521, v522)
                let v524 : string = "gleam_stdlib=\"0.57.0\""
                let v525 : string = "gleam_time=\">=1.0.0 and <2.0.0\""
                let v526 : string = "gleam_erlang=\">=0.34.0 and <1.0.0\""
                let v527 : string = "envoy=\">=1.0.0 and <2.0.0\""
                let v528 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v529 : (string []) = [|v524; v525; v526; v527; v528|]
                let v530 : string = "$0.to_vec()"
                let v531 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v529 v530 
                let v532 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v533 : bool = Fable.Core.RustInterop.emitRustExpr v531 v532 
                let v534 : string = "x"
                let v535 : string = Fable.Core.RustInterop.emitRustExpr () v534 
                (* run_target_args'
                let v540 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v541 : string = "&*$0"
                let v542 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v535 v541 
                let _run_target_args'_v540 = v542 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v543 : string = "&*$0"
                let v544 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v535 v543 
                let _run_target_args'_v540 = v544 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v545 : string = "&*$0"
                let v546 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v535 v545 
                let _run_target_args'_v540 = v546 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v548 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v548 
                #endif
#if FABLE_COMPILER_PYTHON
                let v552 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v552 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v556 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v556 
                #endif
#else
                let v560 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v560 
                #endif
                let v563 : Ref<Str> = _run_target_args'_v540 
                (* run_target_args'
                let v576 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v577 : string = "String::from($0)"
                let v578 : std_string_String = Fable.Core.RustInterop.emitRustExpr v563 v577 
                let _run_target_args'_v576 = v578 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v579 : string = "String::from($0)"
                let v580 : std_string_String = Fable.Core.RustInterop.emitRustExpr v563 v579 
                let _run_target_args'_v576 = v580 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v581 : string = "String::from($0)"
                let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr v563 v581 
                let _run_target_args'_v576 = v582 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v584 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v584 
                #endif
#if FABLE_COMPILER_PYTHON
                let v588 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v588 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v592 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v592 
                #endif
#else
                let v596 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v596 
                #endif
                let v599 : std_string_String = _run_target_args'_v576 
                let v608 : string = "true; $0 }).collect::<Vec<_>>()"
                let v609 : bool = Fable.Core.RustInterop.emitRustExpr v599 v608 
                let v610 : string = "_vec_map"
                let v611 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v610 
                let v612 : Vec<std_string_String> = method71(v326)
                let v613 : Vec<std_string_String> = method72(v611)
                let v614 : string = "true; let mut v613 = v613"
                let v615 : bool = Fable.Core.RustInterop.emitRustExpr () v614 
                let v616 : string = "true; v613.extend(v612)"
                let v617 : bool = Fable.Core.RustInterop.emitRustExpr () v616 
                let v618 : string = "v613"
                let v619 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v618 
                let v620 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v621 : bool = Fable.Core.RustInterop.emitRustExpr v619 v620 
                let v622 : string = "x"
                let v623 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v622 
                let v624 : string = "fable_library_rust::String_::fromString($0)"
                let v625 : string = Fable.Core.RustInterop.emitRustExpr v623 v624 
                let v628 : string = "="
                let v629 : bool = v625.Contains v628 
                let v644 : string =
                    if v629 then
                        v625
                    else
                        let v634 : string = "]"
                        let v635 : bool = v625.EndsWith (v634, false, null)
                        if v635 then
                            let v638 : string = $"={{version='*',features=["
                            let v639 : string = "["
                            let v640 : string = v625.Replace (v639, v638)
                            let v641 : string = $"{v640}}}"
                            v641
                        else
                            let v642 : string = $"{v625}='*'"
                            v642
                let v645 : string = "true; $0 }).collect::<Vec<_>>()"
                let v646 : bool = Fable.Core.RustInterop.emitRustExpr v644 v645 
                let v647 : string = "_vec_map"
                let v648 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v647 
                let v649 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v650 : (string []) = Fable.Core.RustInterop.emitRustExpr v648 v649 
                let v655 : unit = ()
                let _let'_v655 =
                    seq {
                        for i = 0 to v650.Length - 1 do yield v650.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v658 : string seq = _let'_v655 
                let v666 : string = method73()
                let v667 : (string -> (string seq -> string)) = String.concat
                let v668 : (string seq -> string) = v667 v666
                let v669 : string = v668 v658
                
                
                let v673 : bool =
                    match v253 with
                    | US11_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v677 : US5 =
                    if v673 then
                        let v674 : string = "Erlang"
                        US5_0(v674)
                    else
                        US5_1
                let v691 : US5 =
                    match v677 with
                    | US5_1 -> (* None *)
                        let v680 : bool =
                            match v253 with
                            | US11_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v684 : US5 =
                            if v680 then
                                let v681 : string = "JavaScript"
                                US5_0(v681)
                            else
                                US5_1
                        match v684 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v685) -> (* Some *)
                            US5_0(v685)
                    | US5_0(v678) -> (* Some *)
                        US5_0(v678)
                let v695 : string =
                    match v691 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v692) -> (* Some *)
                        v692
                let v697 : (unit -> string) = v695.ToLower
                let v698 : string = v697 ()
                let v703 : string = "_real"
                let v704 : bool = v117.Contains v703 
                let v709 : string =
                    if v704 then
                        let v707 : string = "main_real"
                        v707
                    else
                        let v708 : string = "main"
                        v708
                let v710 : string = $"name = \"{v709}\""
                let v711 : string = $"target = \"{v698}\""
                let v714 : string = "\n"
                let v715 : string = v710 + v714 
                let v719 : string = v715 + v711 
                let v722 : string = $""
                let v724 : string = v719 + v714 
                let v728 : string = v724 + v722 
                let v731 : string = $"[dependencies]"
                let v733 : string = v728 + v714 
                let v737 : string = v733 + v731 
                let v740 : string = $"{v669}"
                let v742 : string = v737 + v714 
                let v746 : string = v742 + v740 
                method74(v523, v746)
                let v750 : System.Threading.CancellationToken option = None
                let v753 : (struct (string * string) []) = [||]
                let v755 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v759 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v763 : string option = None
                let v766 : string = $"gleam check"
                let v768 : string option = Some v521 
                let v771 : bool = true
                let struct (v772 : int32, v773 : string) = method99(v766, v750, v753, v755, v759, v771, v768)
                let v775 : bool = v772 <> 0 
                let struct (v4033 : US5, v4034 : US5, v4035 : US5, v4036 : US5) =
                    if v775 then
                        let v1085 : unit = ()
                        let v1086 : (unit -> unit) = closure68(v117, v773, v772)
                        let v1087 : unit = (fun () -> v1086 (); v1085) ()
                        let v1398 : US5 = US5_0(v436)
                        let v1399 : US5 = US5_1
                        let v1400 : US5 = US5_1
                        let v1401 : US5 = US5_1
                        struct (v1398, v1399, v1400, v1401)
                    else
                        let v1402 : bool =
                            match v253 with
                            | US11_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v1405 : string =
                            if v1402 then
                                let v1403 : string = $"gleam run --no-print-progress \"{v117}\""
                                v1403
                            else
                                let v1404 : string = $"gleam build --no-print-progress"
                                v1404
                        let v1406 : string = "TRACE_LEVEL"
                        let v1407 : string = "GLEAM_LOG"
                        let v1408 : string = "GLEAM_LOG_NOCOLOUR"
                        let v1409 : (struct (string * string) []) = [|struct (v1406, v514); struct (v1407, v514); struct (v1408, v514)|]
                        let v1411 : System.Threading.CancellationToken option = None
                        let v1414 : (struct (string * string) []) = [||]
                        let v1416 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1420 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1424 : string option = None
                        let v1428 : string option = Some v521 
                        let v1431 : bool = true
                        let struct (v1432 : int32, v1433 : string) = method99(v1405, v1411, v1409, v1416, v1420, v1431, v1428)
                        let v1434 : int32 = v1409.Length
                        let v1435 : (string []) = Array.zeroCreate<string> (v1434)
                        let v1436 : Mut5 = {l0 = 0} : Mut5
                        while method30(v1434, v1436) do
                            let v1438 : int32 = v1436.l0
                            let struct (v1439 : string, v1440 : string) = v1409.[int v1438]
                            let v1441 : string = $"$env:{v1439}=''{v1440}''"
                            v1435.[int v1438] <- v1441
                            let v1442 : int32 = v1438 + 1
                            v1436.l0 <- v1442
                            ()
                        let v1444 : string seq = v1435 |> Seq.ofArray
                        let v1449 : (string -> (string seq -> string)) = String.concat
                        let v1450 : string = ";"
                        let v1451 : (string seq -> string) = v1449 v1450
                        let v1452 : string = v1451 v1444
                        let v1455 : string = $"pwsh -c '{v1452}; {v1405}'"
                        let v1457 : bool = v1432 <> 0 
                        let struct (v4029 : US5, v4030 : US5, v4031 : US5, v4032 : US5) =
                            if v1457 then
                                let v1767 : unit = ()
                                let v1768 : (unit -> unit) = closure69(v117, v1433, v1432, v1455)
                                let v1769 : unit = (fun () -> v1768 (); v1767) ()
                                let v2080 : US5 = US5_0(v436)
                                let v2081 : US5 = US5_1
                                let v2082 : US5 = US5_1
                                let v2083 : US5 = US5_1
                                struct (v2080, v2081, v2082, v2083)
                            else
                                let v2084 : bool =
                                    match v253 with
                                    | US11_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v3930 : string =
                                    if v2084 then
                                        v1433
                                    else
                                        let v2085 : string = $"{v521}/build/dev/javascript/main/main.mjs"
                                        (* run_target_args'
                                        let v2090 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2095 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2096 : string = "std::fs::read(&*$0)"
                                        let v2097 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2085 v2096 
                                        (* run_target_args'
                                        let v2099 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2100 : string = "$0.unwrap()"
                                        let v2101 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2097 v2100 
                                        let _run_target_args'_v2099 = v2101 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2102 : string = "$0.unwrap()"
                                        let v2103 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2097 v2102 
                                        let _run_target_args'_v2099 = v2103 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2104 : string = "$0.unwrap()"
                                        let v2105 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2097 v2104 
                                        let _run_target_args'_v2099 = v2105 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2106 : Vec<uint8> = match v2097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2099 = v2106 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2107 : Vec<uint8> = match v2097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2099 = v2107 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2108 : Vec<uint8> = match v2097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2099 = v2108 
                                        #endif
#else
                                        let v2109 : Vec<uint8> = match v2097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2099 = v2109 
                                        #endif
                                        let v2110 : Vec<uint8> = _run_target_args'_v2099 
                                        let _run_target_args'_v2095 = v2110 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2114 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2095 = v2114 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2118 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2095 = v2118 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2122 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2095 = v2122 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2126 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2095 = v2126 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2130 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2095 = v2130 
                                        #endif
#else
                                        let v2133 : (uint8 []) = v2085 |> System.IO.File.ReadAllBytes
                                        let v2134 : string = "$0.to_vec()"
                                        let v2135 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2133 v2134 
                                        let _run_target_args'_v2095 = v2135 
                                        #endif
                                        let v2136 : Vec<uint8> = _run_target_args'_v2095 
                                        let v2145 : Vec<uint8> = method25(v2136)
                                        let v2146 : string = "std::string::String::from_utf8($0)"
                                        let v2147 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2145 v2146 
                                        (* run_target_args'
                                        let v2149 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2150 : string = "$0.unwrap()"
                                        let v2151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2147 v2150 
                                        let _run_target_args'_v2149 = v2151 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2152 : string = "$0.unwrap()"
                                        let v2153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2147 v2152 
                                        let _run_target_args'_v2149 = v2153 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2154 : string = "$0.unwrap()"
                                        let v2155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2147 v2154 
                                        let _run_target_args'_v2149 = v2155 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2156 : std_string_String = match v2147 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2149 = v2156 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2157 : std_string_String = match v2147 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2149 = v2157 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2158 : std_string_String = match v2147 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2149 = v2158 
                                        #endif
#else
                                        let v2159 : std_string_String = match v2147 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2149 = v2159 
                                        #endif
                                        let v2160 : std_string_String = _run_target_args'_v2149 
                                        let v2163 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2164 : string = Fable.Core.RustInterop.emitRustExpr v2160 v2163 
                                        let _run_target_args'_v2090 = v2164 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2166 : string = null |> unbox<string>
                                        let _run_target_args'_v2090 = v2166 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2170 : string = null |> unbox<string>
                                        let _run_target_args'_v2090 = v2170 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2174 : string = null |> unbox<string>
                                        let _run_target_args'_v2090 = v2174 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2178 : string = null |> unbox<string>
                                        let _run_target_args'_v2090 = v2178 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2182 : string = null |> unbox<string>
                                        let _run_target_args'_v2090 = v2182 
                                        #endif
#else
                                        let v2185 : string = v2085 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2090 = v2185 
                                        #endif
                                        let v2186 : string = _run_target_args'_v2090 
                                        let v2195 : string = $"#app_"
                                        let v2196 : string = $"#app_{v438}"
                                        let v2197 : string = v2186.Replace (v2195, v2196)
                                        let v2200 : string = "main()"
                                        let v2201 : bool = v2197.EndsWith (v2200, false, null)
                                        let v2204 : bool = v2201 = false
                                        if v2204 then
                                            let v2205 : string = $"{v2197}
main()"
                                            method74(v2085, v2205)
                                        let v2207 : System.Threading.CancellationToken option = None
                                        let v2210 : (struct (string * string) []) = [||]
                                        let v2212 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2216 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2220 : string option = None
                                        let v2223 : string = $"bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir={v518} {v2085}"
                                        let v2224 : string = "PATH"
                                        let v2225 : string = method3(v2224)
                                        let v2226 : bool = v2225 = ""
                                        let v2264 : US5 =
                                            if v2226 then
                                                US5_1
                                            else
                                                (* run_target_args'
                                                let v2229 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2230 : string = "cfg!(windows)"
                                                let v2231 : bool = Fable.Core.RustInterop.emitRustExpr () v2230 
                                                let _run_target_args'_v2229 = v2231 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2232 : string = "cfg!(windows)"
                                                let v2233 : bool = Fable.Core.RustInterop.emitRustExpr () v2232 
                                                let _run_target_args'_v2229 = v2233 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2234 : string = "cfg!(windows)"
                                                let v2235 : bool = Fable.Core.RustInterop.emitRustExpr () v2234 
                                                let _run_target_args'_v2229 = v2235 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2236 : US3 = US3_0
                                                let v2237 : US4 = US4_5(v2236)
                                                let v2238 : string = $"platform.is_windows / target: {v2237}"
                                                let v2239 : bool = failwith<bool> v2238
                                                let _run_target_args'_v2229 = v2239 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2240 : US3 = US3_0
                                                let v2241 : US4 = US4_6(v2240)
                                                let v2242 : string = $"platform.is_windows / target: {v2241}"
                                                let v2243 : bool = failwith<bool> v2242
                                                let _run_target_args'_v2229 = v2243 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2244 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v2245 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v2246 : bool = v2245 v2244
                                                let _run_target_args'_v2229 = v2246 
                                                #endif
#else
                                                let v2247 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v2248 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v2249 : bool = v2248 v2247
                                                let _run_target_args'_v2229 = v2249 
                                                #endif
                                                let v2250 : bool = _run_target_args'_v2229 
                                                let v2260 : string =
                                                    if v2250 then
                                                        v1450
                                                    else
                                                        let v2259 : string = ":"
                                                        v2259
                                                let v2261 : string = "~/.bun/bin"
                                                let v2262 : string = $"{v2261}{v2260}{v2225}"
                                                US5_0(v2262)
                                        let v2269 : (struct (string * string) []) =
                                            match v2264 with
                                            | US5_1 -> (* None *)
                                                [||]
                                            | US5_0(v2265) -> (* Some *)
                                                [|struct (v2224, v2265)|]
                                        let v2271 : string option = Some v521 
                                        let v2274 : bool = true
                                        let struct (v2275 : int32, v2276 : string) = method99(v2223, v2207, v2269, v2212, v2216, v2274, v2271)
                                        let v2278 : bool = v2275 <> 0 
                                        if v2278 then
                                            let v2588 : unit = ()
                                            let v2589 : (unit -> unit) = closure70(v117, v2276, v2275)
                                            let v2590 : unit = (fun () -> v2589 (); v2588) ()
                                            v514
                                        else
                                            let v2901 : string = $"<!DOCTYPE html>"
                                            let v2902 : string = $"<html lang=\"en\">"
                                            let v2904 : string = v2901 + v714 
                                            let v2908 : string = v2904 + v2902 
                                            let v2911 : string = $"  <head>"
                                            let v2913 : string = v2908 + v714 
                                            let v2917 : string = v2913 + v2911 
                                            let v2920 : string = $"    <meta charset=\"UTF-8\" />"
                                            let v2922 : string = v2917 + v714 
                                            let v2926 : string = v2922 + v2920 
                                            let v2929 : string = $"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />"
                                            let v2931 : string = v2926 + v714 
                                            let v2935 : string = v2931 + v2929 
                                            let v2938 : string = $"    <link"
                                            let v2940 : string = v2935 + v714 
                                            let v2944 : string = v2940 + v2938 
                                            let v2947 : string = $"      data-trunk"
                                            let v2949 : string = v2944 + v714 
                                            let v2953 : string = v2949 + v2947 
                                            let v2956 : string = $"      rel=\"inline\""
                                            let v2958 : string = v2953 + v714 
                                            let v2962 : string = v2958 + v2956 
                                            let v2965 : string = $"      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\""
                                            let v2967 : string = v2962 + v714 
                                            let v2971 : string = v2967 + v2965 
                                            let v2974 : string = $"    />"
                                            let v2976 : string = v2971 + v714 
                                            let v2980 : string = v2976 + v2974 
                                            let v2983 : string = $"    <link"
                                            let v2985 : string = v2980 + v714 
                                            let v2989 : string = v2985 + v2983 
                                            let v2992 : string = $"      data-trunk"
                                            let v2994 : string = v2989 + v714 
                                            let v2998 : string = v2994 + v2992 
                                            let v3001 : string = $"      rel=\"inline\""
                                            let v3003 : string = v2998 + v714 
                                            let v3007 : string = v3003 + v3001 
                                            let v3010 : string = $"      type=\"module\""
                                            let v3012 : string = v3007 + v714 
                                            let v3016 : string = v3012 + v3010 
                                            let v3019 : string = $"      href=\"main.js\""
                                            let v3021 : string = v3016 + v714 
                                            let v3025 : string = v3021 + v3019 
                                            let v3028 : string = $"    />"
                                            let v3030 : string = v3025 + v714 
                                            let v3034 : string = v3030 + v3028 
                                            let v3037 : string = $"  </head>"
                                            let v3039 : string = v3034 + v714 
                                            let v3043 : string = v3039 + v3037 
                                            let v3046 : string = $"  <body>"
                                            let v3048 : string = v3043 + v714 
                                            let v3052 : string = v3048 + v3046 
                                            let v3055 : string = $"    <div id=\"app_{v438}\"></div>"
                                            let v3057 : string = v3052 + v714 
                                            let v3061 : string = v3057 + v3055 
                                            let v3064 : string = $"  </body>"
                                            let v3066 : string = v3061 + v714 
                                            let v3070 : string = v3066 + v3064 
                                            let v3073 : string = $"</html>"
                                            let v3075 : string = v3070 + v714 
                                            let v3079 : string = v3075 + v3073 
                                            let v3082 : string = $"{v518}/index.html"
                                            method74(v3082, v3079)
                                            let v3083 : string = $"{v518}/spiral_{v438}.rs"
                                            method74(v3083, v514)
                                            let v3084 : string = $"[package]"
                                            let v3085 : string = $"name = \"spiral_{v438}\""
                                            let v3087 : string = v3084 + v714 
                                            let v3091 : string = v3087 + v3085 
                                            let v3094 : string = $""
                                            let v3096 : string = v3091 + v714 
                                            let v3100 : string = v3096 + v3094 
                                            let v3103 : string = $"[workspace]"
                                            let v3105 : string = v3100 + v714 
                                            let v3109 : string = v3105 + v3103 
                                            let v3112 : string = $""
                                            let v3114 : string = v3109 + v714 
                                            let v3118 : string = v3114 + v3112 
                                            let v3121 : string = $"[lib]"
                                            let v3123 : string = v3118 + v714 
                                            let v3127 : string = v3123 + v3121 
                                            let v3130 : string = $"crate-type = [\"cdylib\", \"rlib\"]"
                                            let v3132 : string = v3127 + v714 
                                            let v3136 : string = v3132 + v3130 
                                            let v3139 : string = $"path = \"spiral_{v438}.rs\""
                                            let v3141 : string = v3136 + v714 
                                            let v3145 : string = v3141 + v3139 
                                            let v3148 : string = $""
                                            let v3150 : string = v3145 + v714 
                                            let v3154 : string = v3150 + v3148 
                                            let v3157 : string = $"[dependencies]"
                                            let v3159 : string = v3154 + v714 
                                            let v3163 : string = v3159 + v3157 
                                            let v3166 : string = $"{v518}/Cargo.toml"
                                            method74(v3166, v3163)
                                            let v3168 : System.Threading.CancellationToken option = None
                                            let v3171 : (struct (string * string) []) = [||]
                                            let v3173 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v3177 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v3181 : string option = None
                                            let v3184 : string = $"trunk build --release --minify --dist={v518} --public-url=./ --no-sri"
                                            let v3185 : string = "TRUNK_TOOLS_WASM_BINDGEN"
                                            let v3186 : string = "0.2.93"
                                            let v3187 : (struct (string * string) []) = [|struct (v3185, v3186)|]
                                            let v3189 : string option = Some v518 
                                            let v3192 : bool = true
                                            let struct (v3193 : int32, v3194 : string) = method99(v3184, v3168, v3187, v3173, v3177, v3192, v3189)
                                            let v3196 : bool = v3193 <> 0 
                                            if v3196 then
                                                let v3506 : unit = ()
                                                let v3507 : (unit -> unit) = closure71(v117, v3194, v3193)
                                                let v3508 : unit = (fun () -> v3507 (); v3506) ()
                                                v514
                                            else
                                                (* run_target_args'
                                                let v3823 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3828 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3829 : string = "std::fs::read(&*$0)"
                                                let v3830 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3082 v3829 
                                                (* run_target_args'
                                                let v3832 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3833 : string = "$0.unwrap()"
                                                let v3834 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3830 v3833 
                                                let _run_target_args'_v3832 = v3834 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3835 : string = "$0.unwrap()"
                                                let v3836 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3830 v3835 
                                                let _run_target_args'_v3832 = v3836 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3837 : string = "$0.unwrap()"
                                                let v3838 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3830 v3837 
                                                let _run_target_args'_v3832 = v3838 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3839 : Vec<uint8> = match v3830 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3832 = v3839 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3840 : Vec<uint8> = match v3830 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3832 = v3840 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3841 : Vec<uint8> = match v3830 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3832 = v3841 
                                                #endif
#else
                                                let v3842 : Vec<uint8> = match v3830 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3832 = v3842 
                                                #endif
                                                let v3843 : Vec<uint8> = _run_target_args'_v3832 
                                                let _run_target_args'_v3828 = v3843 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3847 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3828 = v3847 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3851 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3828 = v3851 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3855 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3828 = v3855 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3859 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3828 = v3859 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3863 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3828 = v3863 
                                                #endif
#else
                                                let v3866 : (uint8 []) = v3082 |> System.IO.File.ReadAllBytes
                                                let v3867 : string = "$0.to_vec()"
                                                let v3868 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3866 v3867 
                                                let _run_target_args'_v3828 = v3868 
                                                #endif
                                                let v3869 : Vec<uint8> = _run_target_args'_v3828 
                                                let v3878 : Vec<uint8> = method25(v3869)
                                                let v3879 : string = "std::string::String::from_utf8($0)"
                                                let v3880 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3878 v3879 
                                                (* run_target_args'
                                                let v3882 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3883 : string = "$0.unwrap()"
                                                let v3884 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3880 v3883 
                                                let _run_target_args'_v3882 = v3884 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3885 : string = "$0.unwrap()"
                                                let v3886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3880 v3885 
                                                let _run_target_args'_v3882 = v3886 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3887 : string = "$0.unwrap()"
                                                let v3888 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3880 v3887 
                                                let _run_target_args'_v3882 = v3888 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3889 : std_string_String = match v3880 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3882 = v3889 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3890 : std_string_String = match v3880 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3882 = v3890 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3891 : std_string_String = match v3880 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3882 = v3891 
                                                #endif
#else
                                                let v3892 : std_string_String = match v3880 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3882 = v3892 
                                                #endif
                                                let v3893 : std_string_String = _run_target_args'_v3882 
                                                let v3896 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3897 : string = Fable.Core.RustInterop.emitRustExpr v3893 v3896 
                                                let _run_target_args'_v3823 = v3897 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3899 : string = null |> unbox<string>
                                                let _run_target_args'_v3823 = v3899 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3903 : string = null |> unbox<string>
                                                let _run_target_args'_v3823 = v3903 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3907 : string = null |> unbox<string>
                                                let _run_target_args'_v3823 = v3907 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3911 : string = null |> unbox<string>
                                                let _run_target_args'_v3823 = v3911 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3915 : string = null |> unbox<string>
                                                let _run_target_args'_v3823 = v3915 
                                                #endif
#else
                                                let v3918 : string = v3082 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3823 = v3918 
                                                #endif
                                                let v3919 : string = _run_target_args'_v3823 
                                                v3919
                                (* run_target_args'
                                let v3935 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3936 : string = "&*$0"
                                let v3937 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3930 v3936 
                                let _run_target_args'_v3935 = v3937 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3938 : string = "&*$0"
                                let v3939 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3930 v3938 
                                let _run_target_args'_v3935 = v3939 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3940 : string = "&*$0"
                                let v3941 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3930 v3940 
                                let _run_target_args'_v3935 = v3941 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3943 : Ref<Str> = v3930 |> unbox<Ref<Str>>
                                let _run_target_args'_v3935 = v3943 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3947 : Ref<Str> = v3930 |> unbox<Ref<Str>>
                                let _run_target_args'_v3935 = v3947 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3951 : Ref<Str> = v3930 |> unbox<Ref<Str>>
                                let _run_target_args'_v3935 = v3951 
                                #endif
#else
                                let v3955 : Ref<Str> = v3930 |> unbox<Ref<Str>>
                                let _run_target_args'_v3935 = v3955 
                                #endif
                                let v3958 : Ref<Str> = _run_target_args'_v3935 
                                (* run_target_args'
                                let v3971 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3972 : string = "String::from($0)"
                                let v3973 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3958 v3972 
                                let _run_target_args'_v3971 = v3973 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3974 : string = "String::from($0)"
                                let v3975 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3958 v3974 
                                let _run_target_args'_v3971 = v3975 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3976 : string = "String::from($0)"
                                let v3977 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3958 v3976 
                                let _run_target_args'_v3971 = v3977 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3979 : std_string_String = v3958 |> unbox<std_string_String>
                                let _run_target_args'_v3971 = v3979 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3983 : std_string_String = v3958 |> unbox<std_string_String>
                                let _run_target_args'_v3971 = v3983 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3987 : std_string_String = v3958 |> unbox<std_string_String>
                                let _run_target_args'_v3971 = v3987 
                                #endif
#else
                                let v3991 : std_string_String = v3958 |> unbox<std_string_String>
                                let _run_target_args'_v3971 = v3991 
                                #endif
                                let v3994 : std_string_String = _run_target_args'_v3971 
                                let v4003 : (string -> US5) = closure72()
                                let v4004 : (unit -> string) = closure73(v3930)
                                let v4005 : (exn -> US5) = closure74(v117, v1455, v3994)
                                let v4007 : US5 = US5_1
                                let result = ref v4007
                                try
                                    result.Value <- v4004 () |> v4003 
                                with ex ->
                                    result.Value <- v4005 ex 
                                let v4008 : US5 = result.Value
                                let v4022 : string option =
                                    match v4008 with
                                    | US5_1 -> (* None *)
                                        let v4018 : string option = None
                                        v4018
                                    | US5_0(v4012) -> (* Some *)
                                        let v4014 : string option = Some v4012 
                                        v4014
                                let v4023 : string = "$0.unwrap()"
                                let v4024 : string = Fable.Core.RustInterop.emitRustExpr v4022 v4023 
                                let v4025 : US5 = US5_0(v436)
                                let v4026 : US5 = US5_0(v427)
                                let v4027 : US5 = US5_0(v117)
                                let v4028 : US5 = US5_0(v4024)
                                struct (v4025, v4026, v4027, v4028)
                        struct (v4029, v4030, v4031, v4032)
                let v4039 : string =
                    match v4033 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4037) -> (* Some *)
                        v4037
                let v4040 : string = "extension"
                let v4043 : string =
                    match v4034 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4041) -> (* Some *)
                        v4041
                let v4044 : string = "code"
                let v4047 : string =
                    match v4036 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4045) -> (* Some *)
                        v4045
                let v4048 : string = "output"
                let v4049 : (struct (string * string) []) = [|struct (v4040, v4039); struct (v4044, v4043); struct (v4048, v4047)|]
                let v4050 : string = "$0.to_vec()"
                let v4051 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4049 v4050 
                let v4052 : unit = ()
                let v4053 : string = $"true; let _func1_from_v4052 = Func1::from(move |value| {{ //"
                let v4054 : bool = Fable.Core.RustInterop.emitRustExpr () v4053 
                let v4055 : string = $"value"
                let struct (v4056 : string, v4057 : string) = Fable.Core.RustInterop.emitRustExpr () v4055 
                (* run_target_args'
                let v4062 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4063 : string = "&*$0"
                let v4064 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4056 v4063 
                let _run_target_args'_v4062 = v4064 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4065 : string = "&*$0"
                let v4066 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4056 v4065 
                let _run_target_args'_v4062 = v4066 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4067 : string = "&*$0"
                let v4068 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4056 v4067 
                let _run_target_args'_v4062 = v4068 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4070 : Ref<Str> = v4056 |> unbox<Ref<Str>>
                let _run_target_args'_v4062 = v4070 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4074 : Ref<Str> = v4056 |> unbox<Ref<Str>>
                let _run_target_args'_v4062 = v4074 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4078 : Ref<Str> = v4056 |> unbox<Ref<Str>>
                let _run_target_args'_v4062 = v4078 
                #endif
#else
                let v4082 : Ref<Str> = v4056 |> unbox<Ref<Str>>
                let _run_target_args'_v4062 = v4082 
                #endif
                let v4085 : Ref<Str> = _run_target_args'_v4062 
                (* run_target_args'
                let v4098 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4099 : string = "String::from($0)"
                let v4100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4085 v4099 
                let _run_target_args'_v4098 = v4100 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4101 : string = "String::from($0)"
                let v4102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4085 v4101 
                let _run_target_args'_v4098 = v4102 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4103 : string = "String::from($0)"
                let v4104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4085 v4103 
                let _run_target_args'_v4098 = v4104 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4106 : std_string_String = v4085 |> unbox<std_string_String>
                let _run_target_args'_v4098 = v4106 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4110 : std_string_String = v4085 |> unbox<std_string_String>
                let _run_target_args'_v4098 = v4110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4114 : std_string_String = v4085 |> unbox<std_string_String>
                let _run_target_args'_v4098 = v4114 
                #endif
#else
                let v4118 : std_string_String = v4085 |> unbox<std_string_String>
                let _run_target_args'_v4098 = v4118 
                #endif
                let v4121 : std_string_String = _run_target_args'_v4098 
                (* run_target_args'
                let v4134 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4135 : string = "&*$0"
                let v4136 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4057 v4135 
                let _run_target_args'_v4134 = v4136 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4137 : string = "&*$0"
                let v4138 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4057 v4137 
                let _run_target_args'_v4134 = v4138 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4139 : string = "&*$0"
                let v4140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4057 v4139 
                let _run_target_args'_v4134 = v4140 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4142 : Ref<Str> = v4057 |> unbox<Ref<Str>>
                let _run_target_args'_v4134 = v4142 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4146 : Ref<Str> = v4057 |> unbox<Ref<Str>>
                let _run_target_args'_v4134 = v4146 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4150 : Ref<Str> = v4057 |> unbox<Ref<Str>>
                let _run_target_args'_v4134 = v4150 
                #endif
#else
                let v4154 : Ref<Str> = v4057 |> unbox<Ref<Str>>
                let _run_target_args'_v4134 = v4154 
                #endif
                let v4157 : Ref<Str> = _run_target_args'_v4134 
                (* run_target_args'
                let v4170 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4171 : string = "String::from($0)"
                let v4172 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4157 v4171 
                let _run_target_args'_v4170 = v4172 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4173 : string = "String::from($0)"
                let v4174 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4157 v4173 
                let _run_target_args'_v4170 = v4174 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4175 : string = "String::from($0)"
                let v4176 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4157 v4175 
                let _run_target_args'_v4170 = v4176 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4178 : std_string_String = v4157 |> unbox<std_string_String>
                let _run_target_args'_v4170 = v4178 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4182 : std_string_String = v4157 |> unbox<std_string_String>
                let _run_target_args'_v4170 = v4182 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4186 : std_string_String = v4157 |> unbox<std_string_String>
                let _run_target_args'_v4170 = v4186 
                #endif
#else
                let v4190 : std_string_String = v4157 |> unbox<std_string_String>
                let _run_target_args'_v4170 = v4190 
                #endif
                let v4193 : std_string_String = _run_target_args'_v4170 
                let v4203 : (std_string_String * std_string_String) = v4121, v4193 
                let func1_from_result = v4203 //
                let v4206 : _ = func1_from_result
                let v4207 : string = $"true; $0 /*"
                let v4208 : bool = Fable.Core.RustInterop.emitRustExpr v4206 v4207 
                let v4209 : string = $"*/ }}); //"
                let v4210 : bool = Fable.Core.RustInterop.emitRustExpr () v4209 
                let v4211 : string = $"_func1_from_v4052"
                let v4212 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v4211 
                let v4213 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v4214 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v4212)
                let v4215 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4051, v4214) v4213 
                let v4216 : string = "std::collections::BTreeMap::from_iter(v4215.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v4217 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4216 
                let v4218 : string = "serde_json::to_string(&v4217)"
                let v4219 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4218 
                (* run_target_args'
                let v4221 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4222 : string = "$0.unwrap()"
                let v4223 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4219 v4222 
                let _run_target_args'_v4221 = v4223 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4224 : string = "$0.unwrap()"
                let v4225 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4219 v4224 
                let _run_target_args'_v4221 = v4225 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4226 : string = "$0.unwrap()"
                let v4227 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4219 v4226 
                let _run_target_args'_v4221 = v4227 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4228 : std_string_String = match v4219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4221 = v4228 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4229 : std_string_String = match v4219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4221 = v4229 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4230 : std_string_String = match v4219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4221 = v4230 
                #endif
#else
                let v4231 : std_string_String = match v4219 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4221 = v4231 
                #endif
                let v4232 : std_string_String = _run_target_args'_v4221 
                let v4235 : string = "fable_library_rust::String_::fromString($0)"
                let v4236 : string = Fable.Core.RustInterop.emitRustExpr v4232 v4235 
                let v4237 : string = "command_result"
                [|struct (v4237, v4236)|]
            else
                let v4239 : string = "fable_library_rust::String_::fromString($0)"
                let v4240 : string = Fable.Core.RustInterop.emitRustExpr v40 v4239 
                let v4241 : bool = v4240 = "cuda"
                if v4241 then
                    let v4242 : string = method182()
                    (* run_target_args'
                    let v4247 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4248 : string = "&*$0"
                    let v4249 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4242 v4248 
                    let _run_target_args'_v4247 = v4249 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4250 : string = "&*$0"
                    let v4251 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4242 v4250 
                    let _run_target_args'_v4247 = v4251 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4252 : string = "&*$0"
                    let v4253 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4242 v4252 
                    let _run_target_args'_v4247 = v4253 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4255 : Ref<Str> = v4242 |> unbox<Ref<Str>>
                    let _run_target_args'_v4247 = v4255 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4259 : Ref<Str> = v4242 |> unbox<Ref<Str>>
                    let _run_target_args'_v4247 = v4259 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4263 : Ref<Str> = v4242 |> unbox<Ref<Str>>
                    let _run_target_args'_v4247 = v4263 
                    #endif
#else
                    let v4267 : Ref<Str> = v4242 |> unbox<Ref<Str>>
                    let _run_target_args'_v4247 = v4267 
                    #endif
                    let v4270 : Ref<Str> = _run_target_args'_v4247 
                    let v4279 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v4280 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4270) v4279 
                    let v4283 : (std_string_String -> US8) = method21()
                    let v4284 : US8 option = v4280 |> Option.map v4283 
                    let v4304 : US8 = US8_1
                    let v4305 : US8 = v4284 |> Option.defaultValue v4304 
                    let v4312 : std_string_String =
                        match v4305 with
                        | US8_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US8_0(v4309) -> (* Some *)
                            v4309
                    let v4313 : string = "fable_library_rust::String_::fromString($0)"
                    let v4314 : string = Fable.Core.RustInterop.emitRustExpr v4312 v4313 
                    let v4315 : string = method183()
                    (* run_target_args'
                    let v4320 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4321 : string = "&*$0"
                    let v4322 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4315 v4321 
                    let _run_target_args'_v4320 = v4322 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4323 : string = "&*$0"
                    let v4324 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4315 v4323 
                    let _run_target_args'_v4320 = v4324 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4325 : string = "&*$0"
                    let v4326 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4315 v4325 
                    let _run_target_args'_v4320 = v4326 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4328 : Ref<Str> = v4315 |> unbox<Ref<Str>>
                    let _run_target_args'_v4320 = v4328 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4332 : Ref<Str> = v4315 |> unbox<Ref<Str>>
                    let _run_target_args'_v4320 = v4332 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4336 : Ref<Str> = v4315 |> unbox<Ref<Str>>
                    let _run_target_args'_v4320 = v4336 
                    #endif
#else
                    let v4340 : Ref<Str> = v4315 |> unbox<Ref<Str>>
                    let _run_target_args'_v4320 = v4340 
                    #endif
                    let v4343 : Ref<Str> = _run_target_args'_v4320 
                    let v4352 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v4353 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4343) v4352 
                    let v4356 : (std_string_String -> US8) = method21()
                    let v4357 : US8 option = v4353 |> Option.map v4356 
                    let v4377 : US8 = US8_1
                    let v4378 : US8 = v4357 |> Option.defaultValue v4377 
                    let v4439 : US37 =
                        match v4378 with
                        | US8_1 -> (* None *)
                            US37_1
                        | US8_0(v4382) -> (* Some *)
                            let v4383 : string = "fable_library_rust::String_::fromString($0)"
                            let v4384 : string = Fable.Core.RustInterop.emitRustExpr v4382 v4383 
                            
                            
                            
                            
                            let v4387 : string = "Poetry"
                            let v4388 : (unit -> string) = v4387.ToLower
                            let v4389 : string = v4388 ()
                            let v4394 : string = "Pip"
                            let v4395 : (unit -> string) = v4394.ToLower
                            let v4396 : string = v4395 ()
                            let v4399 : bool = "Pip" = v4384
                            let v4403 : US38 =
                                if v4399 then
                                    let v4400 : US39 = US39_0
                                    US38_0(v4400)
                                else
                                    US38_1
                            let v4435 : US38 =
                                match v4403 with
                                | US38_1 -> (* None *)
                                    let v4406 : bool = "Poetry" = v4384
                                    let v4410 : US38 =
                                        if v4406 then
                                            let v4407 : US39 = US39_1
                                            US38_0(v4407)
                                        else
                                            US38_1
                                    match v4410 with
                                    | US38_1 -> (* None *)
                                        let v4413 : bool = v4396 = v4384
                                        let v4417 : US38 =
                                            if v4413 then
                                                let v4414 : US39 = US39_0
                                                US38_0(v4414)
                                            else
                                                US38_1
                                        match v4417 with
                                        | US38_1 -> (* None *)
                                            let v4420 : bool = v4389 = v4384
                                            let v4424 : US38 =
                                                if v4420 then
                                                    let v4421 : US39 = US39_1
                                                    US38_0(v4421)
                                                else
                                                    US38_1
                                            match v4424 with
                                            | US38_1 -> (* None *)
                                                US38_1
                                            | US38_0(v4425) -> (* Some *)
                                                US38_0(v4425)
                                        | US38_0(v4418) -> (* Some *)
                                            US38_0(v4418)
                                    | US38_0(v4411) -> (* Some *)
                                        US38_0(v4411)
                                | US38_0(v4404) -> (* Some *)
                                    US38_0(v4404)
                            US37_0(v4435)
                    let v4446 : US38 =
                        match v4439 with
                        | US37_0(v4440) -> (* Some *)
                            match v4440 with
                            | US38_0(v4441) -> (* Some *)
                                US38_0(v4441)
                            | _ ->
                                US38_1
                        | _ ->
                            US38_1
                    let v4450 : US39 =
                        match v4446 with
                        | US38_1 -> (* None *)
                            US39_0
                        | US38_0(v4447) -> (* Some *)
                            v4447
                    let v4451 : string = method23()
                    (* run_target_args'
                    let v4456 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4457 : string = "&*$0"
                    let v4458 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4451 v4457 
                    let _run_target_args'_v4456 = v4458 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4459 : string = "&*$0"
                    let v4460 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4451 v4459 
                    let _run_target_args'_v4456 = v4460 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4461 : string = "&*$0"
                    let v4462 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4451 v4461 
                    let _run_target_args'_v4456 = v4462 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4464 : Ref<Str> = v4451 |> unbox<Ref<Str>>
                    let _run_target_args'_v4456 = v4464 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4468 : Ref<Str> = v4451 |> unbox<Ref<Str>>
                    let _run_target_args'_v4456 = v4468 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4472 : Ref<Str> = v4451 |> unbox<Ref<Str>>
                    let _run_target_args'_v4456 = v4472 
                    #endif
#else
                    let v4476 : Ref<Str> = v4451 |> unbox<Ref<Str>>
                    let _run_target_args'_v4456 = v4476 
                    #endif
                    let v4479 : Ref<Str> = _run_target_args'_v4456 
                    let v4488 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v4489 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4479) v4488 
                    let v4492 : (Vec<std_string_String> -> US12) = method24()
                    let v4493 : US12 option = v4489 |> Option.map v4492 
                    let v4513 : US12 = US12_1
                    let v4514 : US12 = v4493 |> Option.defaultValue v4513 
                    let v4518 : (std_string_String []) = [||]
                    let v4519 : string = "$0.to_vec()"
                    let v4520 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4518 v4519 
                    let v4523 : Vec<std_string_String> =
                        match v4514 with
                        | US12_1 -> (* None *)
                            v4520
                        | US12_0(v4521) -> (* Some *)
                            v4521
                    (* run_target_args'
                    let v4528 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v4533 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4534 : string = "std::fs::read(&*$0)"
                    let v4535 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4314 v4534 
                    (* run_target_args'
                    let v4537 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4538 : string = "$0.unwrap()"
                    let v4539 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4535 v4538 
                    let _run_target_args'_v4537 = v4539 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4540 : string = "$0.unwrap()"
                    let v4541 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4535 v4540 
                    let _run_target_args'_v4537 = v4541 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4542 : string = "$0.unwrap()"
                    let v4543 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4535 v4542 
                    let _run_target_args'_v4537 = v4543 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4544 : Vec<uint8> = match v4535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4537 = v4544 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4545 : Vec<uint8> = match v4535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4537 = v4545 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4546 : Vec<uint8> = match v4535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4537 = v4546 
                    #endif
#else
                    let v4547 : Vec<uint8> = match v4535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4537 = v4547 
                    #endif
                    let v4548 : Vec<uint8> = _run_target_args'_v4537 
                    let _run_target_args'_v4533 = v4548 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4552 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4533 = v4552 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4556 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4533 = v4556 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4560 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4533 = v4560 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4564 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4533 = v4564 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4568 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4533 = v4568 
                    #endif
#else
                    let v4571 : (uint8 []) = v4314 |> System.IO.File.ReadAllBytes
                    let v4572 : string = "$0.to_vec()"
                    let v4573 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4571 v4572 
                    let _run_target_args'_v4533 = v4573 
                    #endif
                    let v4574 : Vec<uint8> = _run_target_args'_v4533 
                    let v4583 : Vec<uint8> = method25(v4574)
                    let v4584 : string = "std::string::String::from_utf8($0)"
                    let v4585 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4583 v4584 
                    (* run_target_args'
                    let v4587 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4588 : string = "$0.unwrap()"
                    let v4589 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4585 v4588 
                    let _run_target_args'_v4587 = v4589 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4590 : string = "$0.unwrap()"
                    let v4591 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4585 v4590 
                    let _run_target_args'_v4587 = v4591 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4592 : string = "$0.unwrap()"
                    let v4593 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4585 v4592 
                    let _run_target_args'_v4587 = v4593 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4594 : std_string_String = match v4585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4587 = v4594 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4595 : std_string_String = match v4585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4587 = v4595 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4596 : std_string_String = match v4585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4587 = v4596 
                    #endif
#else
                    let v4597 : std_string_String = match v4585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4587 = v4597 
                    #endif
                    let v4598 : std_string_String = _run_target_args'_v4587 
                    let v4601 : string = "fable_library_rust::String_::fromString($0)"
                    let v4602 : string = Fable.Core.RustInterop.emitRustExpr v4598 v4601 
                    let _run_target_args'_v4528 = v4602 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4604 : string = null |> unbox<string>
                    let _run_target_args'_v4528 = v4604 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4608 : string = null |> unbox<string>
                    let _run_target_args'_v4528 = v4608 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4612 : string = null |> unbox<string>
                    let _run_target_args'_v4528 = v4612 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4616 : string = null |> unbox<string>
                    let _run_target_args'_v4528 = v4616 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4620 : string = null |> unbox<string>
                    let _run_target_args'_v4528 = v4620 
                    #endif
#else
                    let v4623 : string = v4314 |> System.IO.File.ReadAllText
                    let _run_target_args'_v4528 = v4623 
                    #endif
                    let v4624 : string = _run_target_args'_v4528 
                    let v4633 : string = method32()
                    let v4634 : US5 = method33(v4633)
                    let v4640 : US5 =
                        match v4634 with
                        | US5_1 -> (* None *)
                            let v4637 : string = __SOURCE_DIRECTORY__
                            method33(v4637)
                        | US5_0(v4635) -> (* Some *)
                            US5_0(v4635)
                    let v4646 : US5 =
                        match v4640 with
                        | US5_1 -> (* None *)
                            let v4643 : string = "/workspaces"
                            method33(v4643)
                        | US5_0(v4641) -> (* Some *)
                            US5_0(v4641)
                    let v4650 : string =
                        match v4646 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v4647) -> (* Some *)
                            v4647
                    let v4651 : string = method53(v4650)
                    let v4652 : bool = "deps" = v4651
                    let v4663 : string =
                        if v4652 then
                            let v4653 : string option = method39(v4650)
                            let v4655 : string = v4653 |> Option.get
                            let v4658 : US5 = method33(v4655)
                            match v4658 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v4659) -> (* Some *)
                                v4659
                        else
                            v4650
                    let v4664 : string = "polyglot"
                    let v4665 : string = method34(v4663, v4664)
                    let v4666 : string = method32()
                    let v4668 : (unit -> string) = v4666.ToLower
                    let v4669 : string = v4668 ()
                    let v4673 : (unit -> string) = v4665.ToLower
                    let v4674 : string = v4673 ()
                    let v4678 : bool = v4669.StartsWith (v4674, false, null)
                    let v4683 : US14 =
                        if v4678 then
                            US14_1(v4674)
                        else
                            US14_0(v4674)
                    let v4695 : Result<string, string> =
                        match v4683 with
                        | US14_1(v4689) -> (* Error *)
                            let v4691 : Result<string, string> = Error v4689 
                            v4691
                        | US14_0(v4684) -> (* Ok *)
                            let v4686 : Result<string, string> = Ok v4684 
                            v4686
                    let v4696 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v4697 : bool = Fable.Core.RustInterop.emitRustExpr v4695 v4696 
                    let v4698 : string = "x"
                    let v4699 : string = Fable.Core.RustInterop.emitRustExpr () v4698 
                    let v4700 : string = "true; $0 })"
                    let v4701 : bool = Fable.Core.RustInterop.emitRustExpr v4699 v4700 
                    let v4702 : string = "_result_unwrap_or_else"
                    let v4703 : string = Fable.Core.RustInterop.emitRustExpr () v4702 
                    let v4704 : string option = method39(v4314)
                    let v4707 : string = ""
                    let v4708 : string = v4704 |> Option.defaultValue v4707 
                    let v4716 : string =
                        match v4450 with
                        | US39_0 -> (* Pip *)
                            let v4711 : string = "requirements.txt"
                            method34(v4708, v4711)
                        | US39_1 -> (* Poetry *)
                            let v4713 : string = "pyproject.toml"
                            method34(v4708, v4713)
                    let v4717 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v4718 : bool = Fable.Core.RustInterop.emitRustExpr v4523 v4717 
                    let v4719 : string = "x"
                    let v4720 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4719 
                    let v4721 : string = "fable_library_rust::String_::fromString($0)"
                    let v4722 : string = Fable.Core.RustInterop.emitRustExpr v4720 v4721 
                    let v4725 : string = "="
                    let v4726 : bool = v4722.Contains v4725 
                    let v4741 : string =
                        if v4726 then
                            v4722
                        else
                            let v4731 : string = "]"
                            let v4732 : bool = v4722.EndsWith (v4731, false, null)
                            if v4732 then
                                let v4735 : string = $"={{version='*',features=["
                                let v4736 : string = "["
                                let v4737 : string = v4722.Replace (v4736, v4735)
                                let v4738 : string = $"{v4737}}}"
                                v4738
                            else
                                let v4739 : string = $"{v4722}='*'"
                                v4739
                    let v4742 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v4743 : bool = Fable.Core.RustInterop.emitRustExpr v4741 v4742 
                    let v4744 : string = "_vec_map"
                    let v4745 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4744 
                    let v4746 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v4747 : (string []) = Fable.Core.RustInterop.emitRustExpr v4745 v4746 
                    let v4752 : unit = ()
                    let _let'_v4752 =
                        seq {
                            for i = 0 to v4747.Length - 1 do yield v4747.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v4755 : string seq = _let'_v4752 
                    let v4763 : string = method73()
                    let v4764 : (string -> (string seq -> string)) = String.concat
                    let v4765 : (string seq -> string) = v4764 v4763
                    let v4766 : string = v4765 v4755
                    let v4770 : bool = v4766 = ""
                    let struct (v4912 : int32, v4913 : string) =
                        if v4770 then
                            struct (0, v4707)
                        else
                            let v4883 : string =
                                match v4450 with
                                | US39_0 -> (* Pip *)
                                    v4766
                                | US39_1 -> (* Poetry *)
                                    let v4771 : string = $"[tool.poetry]"
                                    let v4772 : string = $"name = \"test\""
                                    let v4775 : string = "\n"
                                    let v4776 : string = v4771 + v4775 
                                    let v4780 : string = v4776 + v4772 
                                    let v4783 : string = $"version = \"0.0.1\""
                                    let v4785 : string = v4780 + v4775 
                                    let v4789 : string = v4785 + v4783 
                                    let v4792 : string = $"description = \"\""
                                    let v4794 : string = v4789 + v4775 
                                    let v4798 : string = v4794 + v4792 
                                    let v4801 : string = $"authors = []"
                                    let v4803 : string = v4798 + v4775 
                                    let v4807 : string = v4803 + v4801 
                                    let v4810 : string = $""
                                    let v4812 : string = v4807 + v4775 
                                    let v4816 : string = v4812 + v4810 
                                    let v4819 : string = $"[tool.poetry.dependencies]"
                                    let v4821 : string = v4816 + v4775 
                                    let v4825 : string = v4821 + v4819 
                                    let v4828 : string = $"python=\"~3.12\""
                                    let v4830 : string = v4825 + v4775 
                                    let v4834 : string = v4830 + v4828 
                                    let v4837 : string = $"{v4766}"
                                    let v4839 : string = v4834 + v4775 
                                    let v4843 : string = v4839 + v4837 
                                    let v4846 : string = $""
                                    let v4848 : string = v4843 + v4775 
                                    let v4852 : string = v4848 + v4846 
                                    let v4855 : string = $"[build-system]"
                                    let v4857 : string = v4852 + v4775 
                                    let v4861 : string = v4857 + v4855 
                                    let v4864 : string = $"requires = [\"poetry-core\"]"
                                    let v4866 : string = v4861 + v4775 
                                    let v4870 : string = v4866 + v4864 
                                    let v4873 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v4875 : string = v4870 + v4775 
                                    let v4879 : string = v4875 + v4873 
                                    v4879
                            method74(v4716, v4883)
                            let v4885 : System.Threading.CancellationToken option = None
                            let v4888 : (struct (string * string) []) = [||]
                            let v4890 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v4894 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v4898 : string option = None
                            let v4904 : string =
                                match v4450 with
                                | US39_0 -> (* Pip *)
                                    let v4901 : string = $"pip install -r requirements.txt"
                                    v4901
                                | US39_1 -> (* Poetry *)
                                    let v4902 : string = $"poetry install"
                                    v4902
                            let v4906 : string option = Some v4708 
                            let v4909 : bool = true
                            method99(v4904, v4885, v4888, v4890, v4894, v4909, v4906)
                    let v4915 : bool = v4912 <> 0 
                    let struct (v6268 : US5, v6269 : US5, v6270 : US5, v6271 : US5) =
                        if v4915 then
                            let v5227 : unit = ()
                            let v5228 : (unit -> unit) = closure77(v4450, v4314, v4913, v4912)
                            let v5229 : unit = (fun () -> v5228 (); v5227) ()
                            let v5542 : string = "py"
                            let v5543 : US5 = US5_0(v5542)
                            let v5544 : US5 = US5_1
                            let v5545 : US5 = US5_1
                            let v5546 : US5 = US5_1
                            struct (v5543, v5544, v5545, v5546)
                        else
                            let v5550 : string =
                                match v4450 with
                                | US39_0 -> (* Pip *)
                                    let v5547 : string = $"python \"{v4314}\""
                                    v5547
                                | US39_1 -> (* Poetry *)
                                    let v5548 : string = $"poetry run python \"{v4314}\""
                                    v5548
                            let v5551 : string = "TRACE_LEVEL"
                            let v5552 : string = "Verbose"
                            let v5553 : (struct (string * string) []) = [|struct (v5551, v5552)|]
                            let v5555 : System.Threading.CancellationToken option = None
                            let v5558 : (struct (string * string) []) = [||]
                            let v5560 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v5564 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v5568 : string option = None
                            let v5572 : string option = Some v4708 
                            let v5575 : bool = true
                            let struct (v5576 : int32, v5577 : string) = method99(v5550, v5555, v5553, v5560, v5564, v5575, v5572)
                            let v5578 : int32 = v5553.Length
                            let v5579 : (string []) = Array.zeroCreate<string> (v5578)
                            let v5580 : Mut5 = {l0 = 0} : Mut5
                            while method30(v5578, v5580) do
                                let v5582 : int32 = v5580.l0
                                let struct (v5583 : string, v5584 : string) = v5553.[int v5582]
                                let v5585 : string = $"$env:{v5583}=''{v5584}''"
                                v5579.[int v5582] <- v5585
                                let v5586 : int32 = v5582 + 1
                                v5580.l0 <- v5586
                                ()
                            let v5588 : string seq = v5579 |> Seq.ofArray
                            let v5593 : (string -> (string seq -> string)) = String.concat
                            let v5594 : string = ";"
                            let v5595 : (string seq -> string) = v5593 v5594
                            let v5596 : string = v5595 v5588
                            let v5599 : string = $"pwsh -c '{v5596}; {v5550}'"
                            let v5600 : bool = v5576 = 0
                            let v5607 : bool =
                                if v5600 then
                                    true
                                else
                                    let v5603 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v5604 : bool = v5577.Contains v5603 
                                    v5604
                            let struct (v6264 : US5, v6265 : US5, v6266 : US5, v6267 : US5) =
                                if v5607 then
                                    let v5608 : (string -> US5) = closure72()
                                    let v5609 : (unit -> string) = closure78(v5577)
                                    let v5610 : (exn -> US5) = closure79(v4314, v5577, v5599)
                                    let v5612 : US5 = US5_1
                                    let result = ref v5612
                                    try
                                        result.Value <- v5609 () |> v5608 
                                    with ex ->
                                        result.Value <- v5610 ex 
                                    let v5613 : US5 = result.Value
                                    let v5627 : string option =
                                        match v5613 with
                                        | US5_1 -> (* None *)
                                            let v5623 : string option = None
                                            v5623
                                        | US5_0(v5617) -> (* Some *)
                                            let v5619 : string option = Some v5617 
                                            v5619
                                    let v5628 : string = "$0.unwrap()"
                                    let v5629 : string = Fable.Core.RustInterop.emitRustExpr v5627 v5628 
                                    let v5630 : string = "py"
                                    let v5631 : US5 = US5_0(v5630)
                                    let v5632 : US5 = US5_0(v4624)
                                    let v5633 : US5 = US5_0(v4314)
                                    let v5634 : US5 = US5_0(v5629)
                                    struct (v5631, v5632, v5633, v5634)
                                else
                                    let v5944 : unit = ()
                                    let v5945 : (unit -> unit) = closure81(v4314, v5577, v5576, v5599)
                                    let v5946 : unit = (fun () -> v5945 (); v5944) ()
                                    let v6259 : string = "py"
                                    let v6260 : US5 = US5_0(v6259)
                                    let v6261 : US5 = US5_1
                                    let v6262 : US5 = US5_1
                                    let v6263 : US5 = US5_1
                                    struct (v6260, v6261, v6262, v6263)
                            struct (v6264, v6265, v6266, v6267)
                    let v6274 : string =
                        match v6268 with
                        | US5_1 -> (* None *)
                            v4707
                        | US5_0(v6272) -> (* Some *)
                            v6272
                    let v6275 : string = "extension"
                    let v6278 : string =
                        match v6269 with
                        | US5_1 -> (* None *)
                            v4707
                        | US5_0(v6276) -> (* Some *)
                            v6276
                    let v6279 : string = "code"
                    let v6282 : string =
                        match v6271 with
                        | US5_1 -> (* None *)
                            v4707
                        | US5_0(v6280) -> (* Some *)
                            v6280
                    let v6283 : string = "output"
                    let v6284 : (struct (string * string) []) = [|struct (v6275, v6274); struct (v6279, v6278); struct (v6283, v6282)|]
                    let v6285 : string = "$0.to_vec()"
                    let v6286 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v6284 v6285 
                    let v6287 : unit = ()
                    let v6288 : string = $"true; let _func1_from_v6287 = Func1::from(move |value| {{ //"
                    let v6289 : bool = Fable.Core.RustInterop.emitRustExpr () v6288 
                    let v6290 : string = $"value"
                    let struct (v6291 : string, v6292 : string) = Fable.Core.RustInterop.emitRustExpr () v6290 
                    (* run_target_args'
                    let v6297 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6298 : string = "&*$0"
                    let v6299 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6291 v6298 
                    let _run_target_args'_v6297 = v6299 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6300 : string = "&*$0"
                    let v6301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6291 v6300 
                    let _run_target_args'_v6297 = v6301 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6302 : string = "&*$0"
                    let v6303 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6291 v6302 
                    let _run_target_args'_v6297 = v6303 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6305 : Ref<Str> = v6291 |> unbox<Ref<Str>>
                    let _run_target_args'_v6297 = v6305 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6309 : Ref<Str> = v6291 |> unbox<Ref<Str>>
                    let _run_target_args'_v6297 = v6309 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6313 : Ref<Str> = v6291 |> unbox<Ref<Str>>
                    let _run_target_args'_v6297 = v6313 
                    #endif
#else
                    let v6317 : Ref<Str> = v6291 |> unbox<Ref<Str>>
                    let _run_target_args'_v6297 = v6317 
                    #endif
                    let v6320 : Ref<Str> = _run_target_args'_v6297 
                    (* run_target_args'
                    let v6333 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6334 : string = "String::from($0)"
                    let v6335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6320 v6334 
                    let _run_target_args'_v6333 = v6335 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6336 : string = "String::from($0)"
                    let v6337 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6320 v6336 
                    let _run_target_args'_v6333 = v6337 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6338 : string = "String::from($0)"
                    let v6339 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6320 v6338 
                    let _run_target_args'_v6333 = v6339 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6341 : std_string_String = v6320 |> unbox<std_string_String>
                    let _run_target_args'_v6333 = v6341 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6345 : std_string_String = v6320 |> unbox<std_string_String>
                    let _run_target_args'_v6333 = v6345 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6349 : std_string_String = v6320 |> unbox<std_string_String>
                    let _run_target_args'_v6333 = v6349 
                    #endif
#else
                    let v6353 : std_string_String = v6320 |> unbox<std_string_String>
                    let _run_target_args'_v6333 = v6353 
                    #endif
                    let v6356 : std_string_String = _run_target_args'_v6333 
                    (* run_target_args'
                    let v6369 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6370 : string = "&*$0"
                    let v6371 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6292 v6370 
                    let _run_target_args'_v6369 = v6371 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6372 : string = "&*$0"
                    let v6373 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6292 v6372 
                    let _run_target_args'_v6369 = v6373 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6374 : string = "&*$0"
                    let v6375 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6292 v6374 
                    let _run_target_args'_v6369 = v6375 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6377 : Ref<Str> = v6292 |> unbox<Ref<Str>>
                    let _run_target_args'_v6369 = v6377 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6381 : Ref<Str> = v6292 |> unbox<Ref<Str>>
                    let _run_target_args'_v6369 = v6381 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6385 : Ref<Str> = v6292 |> unbox<Ref<Str>>
                    let _run_target_args'_v6369 = v6385 
                    #endif
#else
                    let v6389 : Ref<Str> = v6292 |> unbox<Ref<Str>>
                    let _run_target_args'_v6369 = v6389 
                    #endif
                    let v6392 : Ref<Str> = _run_target_args'_v6369 
                    (* run_target_args'
                    let v6405 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6406 : string = "String::from($0)"
                    let v6407 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6392 v6406 
                    let _run_target_args'_v6405 = v6407 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6408 : string = "String::from($0)"
                    let v6409 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6392 v6408 
                    let _run_target_args'_v6405 = v6409 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6410 : string = "String::from($0)"
                    let v6411 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6392 v6410 
                    let _run_target_args'_v6405 = v6411 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6413 : std_string_String = v6392 |> unbox<std_string_String>
                    let _run_target_args'_v6405 = v6413 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6417 : std_string_String = v6392 |> unbox<std_string_String>
                    let _run_target_args'_v6405 = v6417 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6421 : std_string_String = v6392 |> unbox<std_string_String>
                    let _run_target_args'_v6405 = v6421 
                    #endif
#else
                    let v6425 : std_string_String = v6392 |> unbox<std_string_String>
                    let _run_target_args'_v6405 = v6425 
                    #endif
                    let v6428 : std_string_String = _run_target_args'_v6405 
                    let v6438 : (std_string_String * std_string_String) = v6356, v6428 
                    let func1_from_result = v6438 //
                    let v6441 : _ = func1_from_result
                    let v6442 : string = $"true; $0 /*"
                    let v6443 : bool = Fable.Core.RustInterop.emitRustExpr v6441 v6442 
                    let v6444 : string = $"*/ }}); //"
                    let v6445 : bool = Fable.Core.RustInterop.emitRustExpr () v6444 
                    let v6446 : string = $"_func1_from_v6287"
                    let v6447 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v6446 
                    let v6448 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v6449 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v6447)
                    let v6450 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v6286, v6449) v6448 
                    let v6451 : string = "std::collections::BTreeMap::from_iter(v6450.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v6452 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6451 
                    let v6453 : string = "serde_json::to_string(&v6452)"
                    let v6454 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v6453 
                    (* run_target_args'
                    let v6456 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6457 : string = "$0.unwrap()"
                    let v6458 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6454 v6457 
                    let _run_target_args'_v6456 = v6458 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6459 : string = "$0.unwrap()"
                    let v6460 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6454 v6459 
                    let _run_target_args'_v6456 = v6460 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6461 : string = "$0.unwrap()"
                    let v6462 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6454 v6461 
                    let _run_target_args'_v6456 = v6462 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6463 : std_string_String = match v6454 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6456 = v6463 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6464 : std_string_String = match v6454 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6456 = v6464 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6465 : std_string_String = match v6454 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6456 = v6465 
                    #endif
#else
                    let v6466 : std_string_String = match v6454 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6456 = v6466 
                    #endif
                    let v6467 : std_string_String = _run_target_args'_v6456 
                    let v6470 : string = "fable_library_rust::String_::fromString($0)"
                    let v6471 : string = Fable.Core.RustInterop.emitRustExpr v6467 v6470 
                    let v6472 : string = "command_result"
                    [|struct (v6472, v6471)|]
                else
                    let v6474 : string = "fable_library_rust::String_::fromString($0)"
                    let v6475 : string = Fable.Core.RustInterop.emitRustExpr v40 v6474 
                    let v6476 : bool = v6475 = "fable"
                    if v6476 then
                        let v6477 : string = method189()
                        (* run_target_args'
                        let v6482 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v6483 : string = "&*$0"
                        let v6484 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6477 v6483 
                        let _run_target_args'_v6482 = v6484 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v6485 : string = "&*$0"
                        let v6486 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6477 v6485 
                        let _run_target_args'_v6482 = v6486 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v6487 : string = "&*$0"
                        let v6488 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6477 v6487 
                        let _run_target_args'_v6482 = v6488 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v6490 : Ref<Str> = v6477 |> unbox<Ref<Str>>
                        let _run_target_args'_v6482 = v6490 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v6494 : Ref<Str> = v6477 |> unbox<Ref<Str>>
                        let _run_target_args'_v6482 = v6494 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v6498 : Ref<Str> = v6477 |> unbox<Ref<Str>>
                        let _run_target_args'_v6482 = v6498 
                        #endif
#else
                        let v6502 : Ref<Str> = v6477 |> unbox<Ref<Str>>
                        let _run_target_args'_v6482 = v6502 
                        #endif
                        let v6505 : Ref<Str> = _run_target_args'_v6482 
                        let v6514 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v6515 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6505) v6514 
                        let v6518 : (std_string_String -> US8) = method21()
                        let v6519 : US8 option = v6515 |> Option.map v6518 
                        let v6539 : US8 = US8_1
                        let v6540 : US8 = v6519 |> Option.defaultValue v6539 
                        let v6547 : std_string_String =
                            match v6540 with
                            | US8_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US8_0(v6544) -> (* Some *)
                                v6544
                        let v6548 : string = "fable_library_rust::String_::fromString($0)"
                        let v6549 : string = Fable.Core.RustInterop.emitRustExpr v6547 v6548 
                        let v6550 : string = method190()
                        (* run_target_args'
                        let v6555 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v6556 : string = "&*$0"
                        let v6557 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6550 v6556 
                        let _run_target_args'_v6555 = v6557 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v6558 : string = "&*$0"
                        let v6559 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6550 v6558 
                        let _run_target_args'_v6555 = v6559 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v6560 : string = "&*$0"
                        let v6561 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6550 v6560 
                        let _run_target_args'_v6555 = v6561 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v6563 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                        let _run_target_args'_v6555 = v6563 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v6567 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                        let _run_target_args'_v6555 = v6567 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v6571 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                        let _run_target_args'_v6555 = v6571 
                        #endif
#else
                        let v6575 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                        let _run_target_args'_v6555 = v6575 
                        #endif
                        let v6578 : Ref<Str> = _run_target_args'_v6555 
                        let v6587 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v6588 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6578) v6587 
                        let v6591 : (std_string_String -> US8) = method21()
                        let v6592 : US8 option = v6588 |> Option.map v6591 
                        let v6612 : US8 = US8_1
                        let v6613 : US8 = v6592 |> Option.defaultValue v6612 
                        let v6623 : US5 =
                            match v6613 with
                            | US8_1 -> (* None *)
                                US5_1
                            | US8_0(v6617) -> (* Some *)
                                let v6618 : string = "fable_library_rust::String_::fromString($0)"
                                let v6619 : string = Fable.Core.RustInterop.emitRustExpr v6617 v6618 
                                US5_0(v6619)
                        let v6741 : string =
                            match v6623 with
                            | US5_1 -> (* None *)
                                let v6739 : string = "{}"
                                v6739
                            | US5_0(v6624) -> (* Some *)
                                let v6625 : clap_Command = method0()
                                let v6626 : string = $"_ {v6624} --fs-path \"{v6549}\""
                                let v6627 : US26 = method114(v6626)
                                let v6636 : (string []) =
                                    match v6627 with
                                    | US26_1(v6629) -> (* Error *)
                                        let v6631 : string = $"resultm.get / Result value was Error: {v6629}"
                                        failwith<(string [])> v6631
                                    | US26_0(v6628) -> (* Ok *)
                                        v6628
                                let v6637 : string = "$0.to_vec()"
                                let v6638 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v6636 v6637 
                                let v6639 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v6640 : bool = Fable.Core.RustInterop.emitRustExpr v6638 v6639 
                                let v6641 : string = "x"
                                let v6642 : string = Fable.Core.RustInterop.emitRustExpr () v6641 
                                (* run_target_args'
                                let v6647 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6648 : string = "&*$0"
                                let v6649 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6642 v6648 
                                let _run_target_args'_v6647 = v6649 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6650 : string = "&*$0"
                                let v6651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6642 v6650 
                                let _run_target_args'_v6647 = v6651 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6652 : string = "&*$0"
                                let v6653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6642 v6652 
                                let _run_target_args'_v6647 = v6653 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6655 : Ref<Str> = v6642 |> unbox<Ref<Str>>
                                let _run_target_args'_v6647 = v6655 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6659 : Ref<Str> = v6642 |> unbox<Ref<Str>>
                                let _run_target_args'_v6647 = v6659 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6663 : Ref<Str> = v6642 |> unbox<Ref<Str>>
                                let _run_target_args'_v6647 = v6663 
                                #endif
#else
                                let v6667 : Ref<Str> = v6642 |> unbox<Ref<Str>>
                                let _run_target_args'_v6647 = v6667 
                                #endif
                                let v6670 : Ref<Str> = _run_target_args'_v6647 
                                (* run_target_args'
                                let v6683 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6684 : string = "String::from($0)"
                                let v6685 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6670 v6684 
                                let _run_target_args'_v6683 = v6685 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6686 : string = "String::from($0)"
                                let v6687 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6670 v6686 
                                let _run_target_args'_v6683 = v6687 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6688 : string = "String::from($0)"
                                let v6689 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6670 v6688 
                                let _run_target_args'_v6683 = v6689 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6691 : std_string_String = v6670 |> unbox<std_string_String>
                                let _run_target_args'_v6683 = v6691 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6695 : std_string_String = v6670 |> unbox<std_string_String>
                                let _run_target_args'_v6683 = v6695 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6699 : std_string_String = v6670 |> unbox<std_string_String>
                                let _run_target_args'_v6683 = v6699 
                                #endif
#else
                                let v6703 : std_string_String = v6670 |> unbox<std_string_String>
                                let _run_target_args'_v6683 = v6703 
                                #endif
                                let v6706 : std_string_String = _run_target_args'_v6683 
                                let v6715 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v6716 : bool = Fable.Core.RustInterop.emitRustExpr v6706 v6715 
                                let v6717 : string = "_vec_map"
                                let v6718 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6717 
                                let v6719 : string = "clap::Command::get_matches_from($0, v6718)"
                                let v6720 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v6625 v6719 
                                let v6721 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v0, v6720)
                                let v6722 : string = "v6721.await"
                                let v6723 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v6722 
                                (* run_target_args'
                                let v6725 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6726 : string = "$0.unwrap()"
                                let v6727 : string = Fable.Core.RustInterop.emitRustExpr v6723 v6726 
                                let _run_target_args'_v6725 = v6727 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6728 : string = "$0.unwrap()"
                                let v6729 : string = Fable.Core.RustInterop.emitRustExpr v6723 v6728 
                                let _run_target_args'_v6725 = v6729 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6730 : string = "$0.unwrap()"
                                let v6731 : string = Fable.Core.RustInterop.emitRustExpr v6723 v6730 
                                let _run_target_args'_v6725 = v6731 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6732 : string = match v6723 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6725 = v6732 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6733 : string = match v6723 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6725 = v6733 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6734 : string = match v6723 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6725 = v6734 
                                #endif
#else
                                let v6735 : string = match v6723 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6725 = v6735 
                                #endif
                                let v6736 : string = _run_target_args'_v6725 
                                v6736
                        let v6742 : string = "command_result"
                        [|struct (v6742, v6741)|]
                    else
                        let v6744 : string = "fable_library_rust::String_::fromString($0)"
                        let v6745 : string = Fable.Core.RustInterop.emitRustExpr v40 v6744 
                        let v6746 : bool = v6745 = "dib"
                        if v6746 then
                            let v6747 : string = method191()
                            (* run_target_args'
                            let v6752 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6753 : string = "&*$0"
                            let v6754 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6747 v6753 
                            let _run_target_args'_v6752 = v6754 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6755 : string = "&*$0"
                            let v6756 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6747 v6755 
                            let _run_target_args'_v6752 = v6756 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6757 : string = "&*$0"
                            let v6758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6747 v6757 
                            let _run_target_args'_v6752 = v6758 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6760 : Ref<Str> = v6747 |> unbox<Ref<Str>>
                            let _run_target_args'_v6752 = v6760 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6764 : Ref<Str> = v6747 |> unbox<Ref<Str>>
                            let _run_target_args'_v6752 = v6764 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6768 : Ref<Str> = v6747 |> unbox<Ref<Str>>
                            let _run_target_args'_v6752 = v6768 
                            #endif
#else
                            let v6772 : Ref<Str> = v6747 |> unbox<Ref<Str>>
                            let _run_target_args'_v6752 = v6772 
                            #endif
                            let v6775 : Ref<Str> = _run_target_args'_v6752 
                            let v6784 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6785 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6775) v6784 
                            let v6788 : (std_string_String -> string) = method192()
                            let v6789 : string option = v6785 |> Option.map v6788 
                            let v6809 : string = "$0.unwrap()"
                            let v6810 : string = Fable.Core.RustInterop.emitRustExpr v6789 v6809 
                            let v6811 : string = method194()
                            (* run_target_args'
                            let v6816 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6817 : string = "&*$0"
                            let v6818 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6811 v6817 
                            let _run_target_args'_v6816 = v6818 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6819 : string = "&*$0"
                            let v6820 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6811 v6819 
                            let _run_target_args'_v6816 = v6820 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6821 : string = "&*$0"
                            let v6822 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6811 v6821 
                            let _run_target_args'_v6816 = v6822 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6824 : Ref<Str> = v6811 |> unbox<Ref<Str>>
                            let _run_target_args'_v6816 = v6824 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6828 : Ref<Str> = v6811 |> unbox<Ref<Str>>
                            let _run_target_args'_v6816 = v6828 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6832 : Ref<Str> = v6811 |> unbox<Ref<Str>>
                            let _run_target_args'_v6816 = v6832 
                            #endif
#else
                            let v6836 : Ref<Str> = v6811 |> unbox<Ref<Str>>
                            let _run_target_args'_v6816 = v6836 
                            #endif
                            let v6839 : Ref<Str> = _run_target_args'_v6816 
                            let v6848 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6849 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6839) v6848 
                            let v6851 : uint8 = v6849 |> Option.defaultValue 1uy 
                            let v6854 : string = method195()
                            (* run_target_args'
                            let v6859 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6860 : string = "&*$0"
                            let v6861 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6854 v6860 
                            let _run_target_args'_v6859 = v6861 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6862 : string = "&*$0"
                            let v6863 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6854 v6862 
                            let _run_target_args'_v6859 = v6863 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6864 : string = "&*$0"
                            let v6865 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6854 v6864 
                            let _run_target_args'_v6859 = v6865 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6867 : Ref<Str> = v6854 |> unbox<Ref<Str>>
                            let _run_target_args'_v6859 = v6867 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6871 : Ref<Str> = v6854 |> unbox<Ref<Str>>
                            let _run_target_args'_v6859 = v6871 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6875 : Ref<Str> = v6854 |> unbox<Ref<Str>>
                            let _run_target_args'_v6859 = v6875 
                            #endif
#else
                            let v6879 : Ref<Str> = v6854 |> unbox<Ref<Str>>
                            let _run_target_args'_v6859 = v6879 
                            #endif
                            let v6882 : Ref<Str> = _run_target_args'_v6859 
                            let v6891 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6892 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6882) v6891 
                            let v6895 : (std_string_String -> US8) = method21()
                            let v6896 : US8 option = v6892 |> Option.map v6895 
                            let v6916 : US8 = US8_1
                            let v6917 : US8 = v6896 |> Option.defaultValue v6916 
                            let v6927 : US5 =
                                match v6917 with
                                | US8_1 -> (* None *)
                                    US5_1
                                | US8_0(v6921) -> (* Some *)
                                    let v6922 : string = "fable_library_rust::String_::fromString($0)"
                                    let v6923 : string = Fable.Core.RustInterop.emitRustExpr v6921 v6922 
                                    US5_0(v6923)
                            let v6928 : uint8 = 1uy
                            let struct (v6929 : int32, v6930 : string) = method196(v6927, v6851, v6810, v6928)
                            let v6932 : bool = v6929 <> 0 
                            let struct (v8481 : int32, v8482 : string) =
                                if v6932 then
                                    struct (v6929, v6930)
                                else
                                    let v6936 : System.Threading.CancellationToken option = None
                                    let v6939 : (struct (string * string) []) = [||]
                                    let v6941 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v6945 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v6949 : string option = None
                                    let v6952 : string = $"jupyter nbconvert \"{v6810}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v6953 : bool = true
                                    let struct (v6954 : int32, v6955 : string) = method99(v6952, v6936, v6939, v6941, v6945, v6953, v6949)
                                    let v7268 : unit = ()
                                    let v7269 : (unit -> unit) = closure84(v6955, v6954)
                                    let v7270 : unit = (fun () -> v7269 (); v7268) ()
                                    let v7587 : bool = v6954 <> 0 
                                    if v7587 then
                                        let v7590 : string = $"repl_result: {v6930}

jupyter_result: {v6955}"
                                        struct (v6954, v7590)
                                    else
                                        let v7591 : string = "'"
                                        let v7592 : string = "''"
                                        let v7593 : string = v6810.Replace (v7591, v7592)
                                        let v7595 : System.Threading.CancellationToken option = None
                                        let v7598 : (struct (string * string) []) = [||]
                                        let v7600 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v7604 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v7608 : string option = None
                                        let v7611 : string = $"pwsh -c \"$counter = 1; $path = '{v7593}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v7612 : bool = true
                                        let struct (v7613 : int32, v7614 : string) = method99(v7611, v7595, v7598, v7600, v7604, v7612, v7608)
                                        let v7927 : unit = ()
                                        let v7928 : (unit -> unit) = closure85(v7614, v7613)
                                        let v7929 : unit = (fun () -> v7928 (); v7927) ()
                                        let v8245 : string = $"{v6810}.html"
                                        (* run_target_args'
                                        let v8250 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v8255 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8256 : string = "std::fs::read(&*$0)"
                                        let v8257 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8245 v8256 
                                        (* run_target_args'
                                        let v8259 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8260 : string = "$0.unwrap()"
                                        let v8261 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8257 v8260 
                                        let _run_target_args'_v8259 = v8261 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8262 : string = "$0.unwrap()"
                                        let v8263 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8257 v8262 
                                        let _run_target_args'_v8259 = v8263 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8264 : string = "$0.unwrap()"
                                        let v8265 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8257 v8264 
                                        let _run_target_args'_v8259 = v8265 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8266 : Vec<uint8> = match v8257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8259 = v8266 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8267 : Vec<uint8> = match v8257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8259 = v8267 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8268 : Vec<uint8> = match v8257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8259 = v8268 
                                        #endif
#else
                                        let v8269 : Vec<uint8> = match v8257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8259 = v8269 
                                        #endif
                                        let v8270 : Vec<uint8> = _run_target_args'_v8259 
                                        let _run_target_args'_v8255 = v8270 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8274 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8255 = v8274 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8278 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8255 = v8278 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8282 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8255 = v8282 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8286 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8255 = v8286 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8290 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8255 = v8290 
                                        #endif
#else
                                        let v8293 : (uint8 []) = v8245 |> System.IO.File.ReadAllBytes
                                        let v8294 : string = "$0.to_vec()"
                                        let v8295 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8293 v8294 
                                        let _run_target_args'_v8255 = v8295 
                                        #endif
                                        let v8296 : Vec<uint8> = _run_target_args'_v8255 
                                        let v8305 : Vec<uint8> = method25(v8296)
                                        let v8306 : string = "std::string::String::from_utf8($0)"
                                        let v8307 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8305 v8306 
                                        (* run_target_args'
                                        let v8309 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8310 : string = "$0.unwrap()"
                                        let v8311 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8307 v8310 
                                        let _run_target_args'_v8309 = v8311 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8312 : string = "$0.unwrap()"
                                        let v8313 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8307 v8312 
                                        let _run_target_args'_v8309 = v8313 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8314 : string = "$0.unwrap()"
                                        let v8315 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8307 v8314 
                                        let _run_target_args'_v8309 = v8315 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8316 : std_string_String = match v8307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8309 = v8316 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8317 : std_string_String = match v8307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8309 = v8317 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8318 : std_string_String = match v8307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8309 = v8318 
                                        #endif
#else
                                        let v8319 : std_string_String = match v8307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8309 = v8319 
                                        #endif
                                        let v8320 : std_string_String = _run_target_args'_v8309 
                                        let v8323 : string = "fable_library_rust::String_::fromString($0)"
                                        let v8324 : string = Fable.Core.RustInterop.emitRustExpr v8320 v8323 
                                        let _run_target_args'_v8250 = v8324 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8326 : string = null |> unbox<string>
                                        let _run_target_args'_v8250 = v8326 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8330 : string = null |> unbox<string>
                                        let _run_target_args'_v8250 = v8330 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8334 : string = null |> unbox<string>
                                        let _run_target_args'_v8250 = v8334 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8338 : string = null |> unbox<string>
                                        let _run_target_args'_v8250 = v8338 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8342 : string = null |> unbox<string>
                                        let _run_target_args'_v8250 = v8342 
                                        #endif
#else
                                        let v8345 : string = v8245 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v8250 = v8345 
                                        #endif
                                        let v8346 : string = _run_target_args'_v8250 
                                        let v8355 : string = "\r\n"
                                        let v8356 : string = "\n"
                                        let v8357 : string = v8346.Replace (v8355, v8356)
                                        let v8358 : string = $"{v6810}.html"
                                        (* run_target_args'
                                        let v8359 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8360 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v8358, v8357) v8360 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v8358, v8357)
                                        #endif
                                        // run_target_args' is_unit
                                        let v8361 : string = $"{v6810}.ipynb"
                                        (* run_target_args'
                                        let v8366 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v8371 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8372 : string = "std::fs::read(&*$0)"
                                        let v8373 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8361 v8372 
                                        (* run_target_args'
                                        let v8375 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8376 : string = "$0.unwrap()"
                                        let v8377 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8373 v8376 
                                        let _run_target_args'_v8375 = v8377 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8378 : string = "$0.unwrap()"
                                        let v8379 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8373 v8378 
                                        let _run_target_args'_v8375 = v8379 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8380 : string = "$0.unwrap()"
                                        let v8381 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8373 v8380 
                                        let _run_target_args'_v8375 = v8381 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8382 : Vec<uint8> = match v8373 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8375 = v8382 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8383 : Vec<uint8> = match v8373 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8375 = v8383 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8384 : Vec<uint8> = match v8373 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8375 = v8384 
                                        #endif
#else
                                        let v8385 : Vec<uint8> = match v8373 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8375 = v8385 
                                        #endif
                                        let v8386 : Vec<uint8> = _run_target_args'_v8375 
                                        let _run_target_args'_v8371 = v8386 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8390 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8371 = v8390 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8394 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8371 = v8394 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8398 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8371 = v8398 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8402 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8371 = v8402 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8406 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8371 = v8406 
                                        #endif
#else
                                        let v8409 : (uint8 []) = v8361 |> System.IO.File.ReadAllBytes
                                        let v8410 : string = "$0.to_vec()"
                                        let v8411 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8409 v8410 
                                        let _run_target_args'_v8371 = v8411 
                                        #endif
                                        let v8412 : Vec<uint8> = _run_target_args'_v8371 
                                        let v8421 : Vec<uint8> = method25(v8412)
                                        let v8422 : string = "std::string::String::from_utf8($0)"
                                        let v8423 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8421 v8422 
                                        (* run_target_args'
                                        let v8425 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8426 : string = "$0.unwrap()"
                                        let v8427 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8423 v8426 
                                        let _run_target_args'_v8425 = v8427 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8428 : string = "$0.unwrap()"
                                        let v8429 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8423 v8428 
                                        let _run_target_args'_v8425 = v8429 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8430 : string = "$0.unwrap()"
                                        let v8431 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8423 v8430 
                                        let _run_target_args'_v8425 = v8431 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8432 : std_string_String = match v8423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8425 = v8432 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8433 : std_string_String = match v8423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8425 = v8433 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8434 : std_string_String = match v8423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8425 = v8434 
                                        #endif
#else
                                        let v8435 : std_string_String = match v8423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8425 = v8435 
                                        #endif
                                        let v8436 : std_string_String = _run_target_args'_v8425 
                                        let v8439 : string = "fable_library_rust::String_::fromString($0)"
                                        let v8440 : string = Fable.Core.RustInterop.emitRustExpr v8436 v8439 
                                        let _run_target_args'_v8366 = v8440 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8442 : string = null |> unbox<string>
                                        let _run_target_args'_v8366 = v8442 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8446 : string = null |> unbox<string>
                                        let _run_target_args'_v8366 = v8446 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8450 : string = null |> unbox<string>
                                        let _run_target_args'_v8366 = v8450 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8454 : string = null |> unbox<string>
                                        let _run_target_args'_v8366 = v8454 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8458 : string = null |> unbox<string>
                                        let _run_target_args'_v8366 = v8458 
                                        #endif
#else
                                        let v8461 : string = v8361 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v8366 = v8461 
                                        #endif
                                        let v8462 : string = _run_target_args'_v8366 
                                        let v8471 : string = v8462.Replace (v8355, v8356)
                                        let v8472 : string = "\\r\\n"
                                        let v8473 : string = "\\n"
                                        let v8474 : string = v8471.Replace (v8472, v8473)
                                        let v8475 : string = $"{v6810}.ipynb"
                                        (* run_target_args'
                                        let v8476 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8477 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v8475, v8474) v8477 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v8475, v8474)
                                        #endif
                                        // run_target_args' is_unit
                                        let v8478 : string = $"repl_result: {v6930}

jupyter_result: {v6955}

pwsh_replace_html_result: {v7614}"
                                        struct (v7613, v8478)
                            let v8795 : unit = ()
                            let v8796 : (unit -> unit) = closure86(v8482, v8481)
                            let v8797 : unit = (fun () -> v8796 (); v8795) ()
                            let v9114 : bool = v8481 <> 0 
                            if v9114 then
                                let v9117 : string = $"spiral.run / dib / exit_code: {v8481} / result: {v8482}"
                                failwith<unit> v9117
                            let v9118 : string = "stdio"
                            [|struct (v9118, v8482)|]
                        else
                            let v9120 : string = "fable_library_rust::String_::fromString($0)"
                            let v9121 : string = Fable.Core.RustInterop.emitRustExpr v40 v9120 
                            let v9122 : bool = v9121 = "rust"
                            let struct (v21534 : US5, v21535 : US5, v21536 : US5, v21537 : US5) =
                                if v9122 then
                                    let v9123 : string = method189()
                                    (* run_target_args'
                                    let v9128 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9129 : string = "&*$0"
                                    let v9130 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9123 v9129 
                                    let _run_target_args'_v9128 = v9130 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9131 : string = "&*$0"
                                    let v9132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9123 v9131 
                                    let _run_target_args'_v9128 = v9132 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9133 : string = "&*$0"
                                    let v9134 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9123 v9133 
                                    let _run_target_args'_v9128 = v9134 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9136 : Ref<Str> = v9123 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9128 = v9136 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9140 : Ref<Str> = v9123 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9128 = v9140 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9144 : Ref<Str> = v9123 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9128 = v9144 
                                    #endif
#else
                                    let v9148 : Ref<Str> = v9123 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9128 = v9148 
                                    #endif
                                    let v9151 : Ref<Str> = _run_target_args'_v9128 
                                    let v9160 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v9161 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9151) v9160 
                                    let v9164 : (std_string_String -> US8) = method21()
                                    let v9165 : US8 option = v9161 |> Option.map v9164 
                                    let v9185 : US8 = US8_1
                                    let v9186 : US8 = v9165 |> Option.defaultValue v9185 
                                    let v9193 : std_string_String =
                                        match v9186 with
                                        | US8_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US8_0(v9190) -> (* Some *)
                                            v9190
                                    let v9194 : string = "fable_library_rust::String_::fromString($0)"
                                    let v9195 : string = Fable.Core.RustInterop.emitRustExpr v9193 v9194 
                                    let v9196 : string = method23()
                                    (* run_target_args'
                                    let v9201 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9202 : string = "&*$0"
                                    let v9203 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9196 v9202 
                                    let _run_target_args'_v9201 = v9203 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9204 : string = "&*$0"
                                    let v9205 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9196 v9204 
                                    let _run_target_args'_v9201 = v9205 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9206 : string = "&*$0"
                                    let v9207 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9196 v9206 
                                    let _run_target_args'_v9201 = v9207 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9209 : Ref<Str> = v9196 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9201 = v9209 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9213 : Ref<Str> = v9196 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9201 = v9213 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9217 : Ref<Str> = v9196 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9201 = v9217 
                                    #endif
#else
                                    let v9221 : Ref<Str> = v9196 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9201 = v9221 
                                    #endif
                                    let v9224 : Ref<Str> = _run_target_args'_v9201 
                                    let v9233 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v9234 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9224) v9233 
                                    let v9237 : (Vec<std_string_String> -> US12) = method24()
                                    let v9238 : US12 option = v9234 |> Option.map v9237 
                                    let v9258 : US12 = US12_1
                                    let v9259 : US12 = v9238 |> Option.defaultValue v9258 
                                    let v9263 : (std_string_String []) = [||]
                                    let v9264 : string = "$0.to_vec()"
                                    let v9265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v9263 v9264 
                                    let v9268 : Vec<std_string_String> =
                                        match v9259 with
                                        | US12_1 -> (* None *)
                                            v9265
                                        | US12_0(v9266) -> (* Some *)
                                            v9266
                                    let v9269 : string = method205()
                                    (* run_target_args'
                                    let v9274 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9275 : string = "&*$0"
                                    let v9276 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9269 v9275 
                                    let _run_target_args'_v9274 = v9276 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9277 : string = "&*$0"
                                    let v9278 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9269 v9277 
                                    let _run_target_args'_v9274 = v9278 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9279 : string = "&*$0"
                                    let v9280 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9269 v9279 
                                    let _run_target_args'_v9274 = v9280 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9282 : Ref<Str> = v9269 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9274 = v9282 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9286 : Ref<Str> = v9269 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9274 = v9286 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9290 : Ref<Str> = v9269 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9274 = v9290 
                                    #endif
#else
                                    let v9294 : Ref<Str> = v9269 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9274 = v9294 
                                    #endif
                                    let v9297 : Ref<Str> = _run_target_args'_v9274 
                                    let v9306 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v9307 : bool = Fable.Core.RustInterop.emitRustExpr struct (v41, v9297) v9306 
                                    let v9308 : string = method206()
                                    (* run_target_args'
                                    let v9313 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9314 : string = "&*$0"
                                    let v9315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9308 v9314 
                                    let _run_target_args'_v9313 = v9315 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9316 : string = "&*$0"
                                    let v9317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9308 v9316 
                                    let _run_target_args'_v9313 = v9317 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9318 : string = "&*$0"
                                    let v9319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9308 v9318 
                                    let _run_target_args'_v9313 = v9319 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9321 : Ref<Str> = v9308 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9313 = v9321 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9325 : Ref<Str> = v9308 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9313 = v9325 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9329 : Ref<Str> = v9308 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9313 = v9329 
                                    #endif
#else
                                    let v9333 : Ref<Str> = v9308 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9313 = v9333 
                                    #endif
                                    let v9336 : Ref<Str> = _run_target_args'_v9313 
                                    let v9345 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v9346 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9336) v9345 
                                    let v9349 : (std_string_String -> US8) = method21()
                                    let v9350 : US8 option = v9346 |> Option.map v9349 
                                    let v9370 : US8 = US8_1
                                    let v9371 : US8 = v9350 |> Option.defaultValue v9370 
                                    let v9381 : US5 =
                                        match v9371 with
                                        | US8_1 -> (* None *)
                                            US5_1
                                        | US8_0(v9375) -> (* Some *)
                                            let v9376 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9377 : string = Fable.Core.RustInterop.emitRustExpr v9375 v9376 
                                            US5_0(v9377)
                                    let v9382 : string = method207()
                                    (* run_target_args'
                                    let v9387 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9388 : string = "&*$0"
                                    let v9389 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9382 v9388 
                                    let _run_target_args'_v9387 = v9389 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9390 : string = "&*$0"
                                    let v9391 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9382 v9390 
                                    let _run_target_args'_v9387 = v9391 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9392 : string = "&*$0"
                                    let v9393 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9382 v9392 
                                    let _run_target_args'_v9387 = v9393 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9395 : Ref<Str> = v9382 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9387 = v9395 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9399 : Ref<Str> = v9382 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9387 = v9399 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9403 : Ref<Str> = v9382 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9387 = v9403 
                                    #endif
#else
                                    let v9407 : Ref<Str> = v9382 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9387 = v9407 
                                    #endif
                                    let v9410 : Ref<Str> = _run_target_args'_v9387 
                                    let v9419 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v9420 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9410) v9419 
                                    let v9423 : (std_string_String -> US8) = method21()
                                    let v9424 : US8 option = v9420 |> Option.map v9423 
                                    let v9444 : US8 = US8_1
                                    let v9445 : US8 = v9424 |> Option.defaultValue v9444 
                                    let v9455 : US5 =
                                        match v9445 with
                                        | US8_1 -> (* None *)
                                            US5_1
                                        | US8_0(v9449) -> (* Some *)
                                            let v9450 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9451 : string = Fable.Core.RustInterop.emitRustExpr v9449 v9450 
                                            US5_0(v9451)
                                    let v9464 : US40 =
                                        match v9381 with
                                        | US5_0(v9456) -> (* Some *)
                                            let v9457 : US41 = US41_0(v9456)
                                            US40_0(v9457)
                                        | _ ->
                                            match v9455 with
                                            | US5_0(v9459) -> (* Some *)
                                                let v9460 : US41 = US41_1(v9459)
                                                US40_0(v9460)
                                            | _ ->
                                                US40_1
                                    (* run_target_args'
                                    let v9469 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v9474 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9475 : string = "std::fs::read(&*$0)"
                                    let v9476 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9195 v9475 
                                    (* run_target_args'
                                    let v9478 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9479 : string = "$0.unwrap()"
                                    let v9480 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9476 v9479 
                                    let _run_target_args'_v9478 = v9480 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9481 : string = "$0.unwrap()"
                                    let v9482 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9476 v9481 
                                    let _run_target_args'_v9478 = v9482 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9483 : string = "$0.unwrap()"
                                    let v9484 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9476 v9483 
                                    let _run_target_args'_v9478 = v9484 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9485 : Vec<uint8> = match v9476 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9478 = v9485 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9486 : Vec<uint8> = match v9476 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9478 = v9486 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9487 : Vec<uint8> = match v9476 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9478 = v9487 
                                    #endif
#else
                                    let v9488 : Vec<uint8> = match v9476 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9478 = v9488 
                                    #endif
                                    let v9489 : Vec<uint8> = _run_target_args'_v9478 
                                    let _run_target_args'_v9474 = v9489 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9493 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9474 = v9493 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9497 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9474 = v9497 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9501 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9474 = v9501 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9505 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9474 = v9505 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9509 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9474 = v9509 
                                    #endif
#else
                                    let v9512 : (uint8 []) = v9195 |> System.IO.File.ReadAllBytes
                                    let v9513 : string = "$0.to_vec()"
                                    let v9514 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9512 v9513 
                                    let _run_target_args'_v9474 = v9514 
                                    #endif
                                    let v9515 : Vec<uint8> = _run_target_args'_v9474 
                                    let v9524 : Vec<uint8> = method25(v9515)
                                    let v9525 : string = "std::string::String::from_utf8($0)"
                                    let v9526 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9524 v9525 
                                    (* run_target_args'
                                    let v9528 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9529 : string = "$0.unwrap()"
                                    let v9530 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9526 v9529 
                                    let _run_target_args'_v9528 = v9530 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9531 : string = "$0.unwrap()"
                                    let v9532 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9526 v9531 
                                    let _run_target_args'_v9528 = v9532 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9533 : string = "$0.unwrap()"
                                    let v9534 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9526 v9533 
                                    let _run_target_args'_v9528 = v9534 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9535 : std_string_String = match v9526 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9528 = v9535 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9536 : std_string_String = match v9526 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9528 = v9536 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9537 : std_string_String = match v9526 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9528 = v9537 
                                    #endif
#else
                                    let v9538 : std_string_String = match v9526 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9528 = v9538 
                                    #endif
                                    let v9539 : std_string_String = _run_target_args'_v9528 
                                    let v9542 : string = "fable_library_rust::String_::fromString($0)"
                                    let v9543 : string = Fable.Core.RustInterop.emitRustExpr v9539 v9542 
                                    let _run_target_args'_v9469 = v9543 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9545 : string = null |> unbox<string>
                                    let _run_target_args'_v9469 = v9545 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9549 : string = null |> unbox<string>
                                    let _run_target_args'_v9469 = v9549 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9553 : string = null |> unbox<string>
                                    let _run_target_args'_v9469 = v9553 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9557 : string = null |> unbox<string>
                                    let _run_target_args'_v9469 = v9557 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9561 : string = null |> unbox<string>
                                    let _run_target_args'_v9469 = v9561 
                                    #endif
#else
                                    let v9564 : string = v9195 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v9469 = v9564 
                                    #endif
                                    let v9565 : string = _run_target_args'_v9469 
                                    let v9574 : string = "rs"
                                    let v9575 : string = method208(v9574, v9565, v9464)
                                    let v9576 : string = method27(v9575)
                                    let v9577 : string = method32()
                                    let v9578 : US5 = method33(v9577)
                                    let v9584 : US5 =
                                        match v9578 with
                                        | US5_1 -> (* None *)
                                            let v9581 : string = __SOURCE_DIRECTORY__
                                            method33(v9581)
                                        | US5_0(v9579) -> (* Some *)
                                            US5_0(v9579)
                                    let v9590 : US5 =
                                        match v9584 with
                                        | US5_1 -> (* None *)
                                            let v9587 : string = "/workspaces"
                                            method33(v9587)
                                        | US5_0(v9585) -> (* Some *)
                                            US5_0(v9585)
                                    let v9594 : string =
                                        match v9590 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v9591) -> (* Some *)
                                            v9591
                                    let v9595 : string = method53(v9594)
                                    let v9596 : bool = "deps" = v9595
                                    let v9607 : string =
                                        if v9596 then
                                            let v9597 : string option = method39(v9594)
                                            let v9599 : string = v9597 |> Option.get
                                            let v9602 : US5 = method33(v9599)
                                            match v9602 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v9603) -> (* Some *)
                                                v9603
                                        else
                                            v9594
                                    let v9608 : string = "polyglot"
                                    let v9609 : string = method34(v9607, v9608)
                                    let v9610 : string = method32()
                                    let v9612 : (unit -> string) = v9610.ToLower
                                    let v9613 : string = v9612 ()
                                    let v9617 : (unit -> string) = v9609.ToLower
                                    let v9618 : string = v9617 ()
                                    let v9622 : bool = v9613.StartsWith (v9618, false, null)
                                    let v9627 : US14 =
                                        if v9622 then
                                            US14_1(v9618)
                                        else
                                            US14_0(v9618)
                                    let v9639 : Result<string, string> =
                                        match v9627 with
                                        | US14_1(v9633) -> (* Error *)
                                            let v9635 : Result<string, string> = Error v9633 
                                            v9635
                                        | US14_0(v9628) -> (* Ok *)
                                            let v9630 : Result<string, string> = Ok v9628 
                                            v9630
                                    let v9640 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v9641 : bool = Fable.Core.RustInterop.emitRustExpr v9639 v9640 
                                    let v9642 : string = "x"
                                    let v9643 : string = Fable.Core.RustInterop.emitRustExpr () v9642 
                                    let v9644 : string = "true; $0 })"
                                    let v9645 : bool = Fable.Core.RustInterop.emitRustExpr v9643 v9644 
                                    let v9646 : string = "_result_unwrap_or_else"
                                    let v9647 : string = Fable.Core.RustInterop.emitRustExpr () v9646 
                                    let v9648 : string = "spiral"
                                    let v9649 : US42 = US42_0
                                    let v9650 : US43 = US43_0(v9649)
                                    let v9651 : US5 = US5_0(v9576)
                                    let v9652 : string = method209(v9651, v9648, v9650, v9647)
                                    let v9653 : string = "Fable.Core"
                                    let v9654 : string = "4.3.0"
                                    let v9655 : UH4 = UH4_0
                                    let v9656 : UH4 = UH4_1(v9653, v9654, v9655)
                                    let v9657 : UH2 = UH2_0
                                    let v9658 : string = method210(v9565, v9648, v9657, v9656, v9652, v9647)
                                    let v9659 : string = "../../.."
                                    let v9660 : string = method34(v9652, v9659)
                                    let v9661 : string = "Cargo.toml"
                                    let v9662 : string = method34(v9660, v9661)
                                    let v9663 : bool = method36(v9662)
                                    let v9664 : bool = v9663 = false
                                    if v9664 then
                                        (* run_target_args'
                                        let v9671 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9672 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9671 = v9672 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v9673 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9671 = v9673 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v9675 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v9671 = v9675 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v9678 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9671 = v9678 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v9679 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9671 = v9679 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v9680 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9671 = v9680 
                                        #endif
#else
                                        let v9681 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9671 = v9681 
                                        #endif
                                        let v9682 : System.DateTime = _run_target_args'_v9671 
                                        let v9688 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v9689 : System.Guid = v9688 ()
                                        let v9692 : System.Guid = method213(v9689, v9682)
                                        let v9694 : (System.Guid -> string) = _.ToString()
                                        let v9695 : string = v9694 v9692
                                        let v9698 : string = $"[package]"
                                        let v9699 : string = $"name = \"spiral_{v9695}\""
                                        let v9702 : string = "\n"
                                        let v9703 : string = v9698 + v9702 
                                        let v9707 : string = v9703 + v9699 
                                        let v9710 : string = $"version = \"0.0.1\""
                                        let v9712 : string = v9707 + v9702 
                                        let v9716 : string = v9712 + v9710 
                                        let v9719 : string = $"edition = \"2021\""
                                        let v9721 : string = v9716 + v9702 
                                        let v9725 : string = v9721 + v9719 
                                        let v9728 : string = $""
                                        let v9730 : string = v9725 + v9702 
                                        let v9734 : string = v9730 + v9728 
                                        let v9737 : string = $"[[bin]]"
                                        let v9739 : string = v9734 + v9702 
                                        let v9743 : string = v9739 + v9737 
                                        let v9746 : string = $"name = \"spiral_{v9695}\""
                                        let v9748 : string = v9743 + v9702 
                                        let v9752 : string = v9748 + v9746 
                                        let v9755 : string = $"path = \"spiral.rs\""
                                        let v9757 : string = v9752 + v9702 
                                        let v9761 : string = v9757 + v9755 
                                        (* run_target_args'
                                        let v9764 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9765 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v9662, v9761) v9765 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v9662, v9761)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v9766 : string = method34(v9652, v9661)
                                    let v9767 : bool = method36(v9766)
                                    let v9768 : bool = v9767 = false
                                    if v9768 then
                                        (* run_target_args'
                                        let v9775 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9776 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9775 = v9776 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v9777 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9775 = v9777 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v9779 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v9775 = v9779 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v9782 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9775 = v9782 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v9783 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9775 = v9783 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v9784 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9775 = v9784 
                                        #endif
#else
                                        let v9785 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9775 = v9785 
                                        #endif
                                        let v9786 : System.DateTime = _run_target_args'_v9775 
                                        let v9792 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v9793 : System.Guid = v9792 ()
                                        let v9796 : System.Guid = method213(v9793, v9786)
                                        let v9798 : (System.Guid -> string) = _.ToString()
                                        let v9799 : string = v9798 v9796
                                        let v9802 : string = $"[package]"
                                        let v9803 : string = $"name = \"spiral_{v9799}\""
                                        let v9806 : string = "\n"
                                        let v9807 : string = v9802 + v9806 
                                        let v9811 : string = v9807 + v9803 
                                        let v9814 : string = $"version = \"0.0.1\""
                                        let v9816 : string = v9811 + v9806 
                                        let v9820 : string = v9816 + v9814 
                                        let v9823 : string = $"edition = \"2021\""
                                        let v9825 : string = v9820 + v9806 
                                        let v9829 : string = v9825 + v9823 
                                        let v9832 : string = $""
                                        let v9834 : string = v9829 + v9806 
                                        let v9838 : string = v9834 + v9832 
                                        let v9841 : string = $"[[bin]]"
                                        let v9843 : string = v9838 + v9806 
                                        let v9847 : string = v9843 + v9841 
                                        let v9850 : string = $"name = \"spiral_{v9799}\""
                                        let v9852 : string = v9847 + v9806 
                                        let v9856 : string = v9852 + v9850 
                                        let v9859 : string = $"path = \"spiral.rs\""
                                        let v9861 : string = v9856 + v9806 
                                        let v9865 : string = v9861 + v9859 
                                        (* run_target_args'
                                        let v9868 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9869 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v9766, v9865) v9869 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v9766, v9865)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v9870 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v9871 : string = method34(v9647, v9870)
                                    let v9872 : string = "fable_modules/fable-library-rust"
                                    let v9873 : string = method34(v9652, v9872)
                                    method218(v9871, v9873)
                                    let struct (v9874 : int32, v9875 : string) = method219(v9464, v9652, v9574, v9658, v9627)
                                    let v9877 : bool = v9874 <> 0 
                                    let struct (v15074 : US5, v15075 : US5, v15076 : US5, v15077 : US5) =
                                        if v9877 then
                                            let v10191 : unit = ()
                                            let v10192 : (unit -> unit) = closure89(v9875, v9874)
                                            let v10193 : unit = (fun () -> v10192 (); v10191) ()
                                            let v10508 : US5 = US5_0(v9574)
                                            let v10509 : US5 = US5_1
                                            let v10510 : US5 = US5_1
                                            let v10511 : US5 = US5_0(v9875)
                                            struct (v10508, v10509, v10510, v10511)
                                        else
                                            let v10512 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v10618 : Vec<std_string_String> =
                                                if v10512 then
                                                    v9268
                                                else
                                                    let v10513 : (std_string_String -> bool) = method229()
                                                    let v10514 : Vec<std_string_String> = method230(v9268)
                                                    let v10515 : string = "v10514.into_iter().filter(|x| v10513(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v10516 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10515 
                                                    let v10517 : string = "$0.len()"
                                                    let v10518 : unativeint = Fable.Core.RustInterop.emitRustExpr v10516 v10517 
                                                    let v10524 : int32 = v10518 |> int32 
                                                    let v10532 : bool = v10524 > 0
                                                    if v10532 then
                                                        v9268
                                                    else
                                                        let v10533 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v10538 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v10539 : string = "&*$0"
                                                        let v10540 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10533 v10539 
                                                        let _run_target_args'_v10538 = v10540 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v10541 : string = "&*$0"
                                                        let v10542 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10533 v10541 
                                                        let _run_target_args'_v10538 = v10542 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v10543 : string = "&*$0"
                                                        let v10544 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10533 v10543 
                                                        let _run_target_args'_v10538 = v10544 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v10546 : Ref<Str> = v10533 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10538 = v10546 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v10550 : Ref<Str> = v10533 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10538 = v10550 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v10554 : Ref<Str> = v10533 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10538 = v10554 
                                                        #endif
#else
                                                        let v10558 : Ref<Str> = v10533 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10538 = v10558 
                                                        #endif
                                                        let v10561 : Ref<Str> = _run_target_args'_v10538 
                                                        (* run_target_args'
                                                        let v10574 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v10575 : string = "String::from($0)"
                                                        let v10576 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10561 v10575 
                                                        let _run_target_args'_v10574 = v10576 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v10577 : string = "String::from($0)"
                                                        let v10578 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10561 v10577 
                                                        let _run_target_args'_v10574 = v10578 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v10579 : string = "String::from($0)"
                                                        let v10580 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10561 v10579 
                                                        let _run_target_args'_v10574 = v10580 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v10582 : std_string_String = v10561 |> unbox<std_string_String>
                                                        let _run_target_args'_v10574 = v10582 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v10586 : std_string_String = v10561 |> unbox<std_string_String>
                                                        let _run_target_args'_v10574 = v10586 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v10590 : std_string_String = v10561 |> unbox<std_string_String>
                                                        let _run_target_args'_v10574 = v10590 
                                                        #endif
#else
                                                        let v10594 : std_string_String = v10561 |> unbox<std_string_String>
                                                        let _run_target_args'_v10574 = v10594 
                                                        #endif
                                                        let v10597 : std_string_String = _run_target_args'_v10574 
                                                        let v10606 : (std_string_String []) = [|v10597|]
                                                        let v10607 : string = "$0.to_vec()"
                                                        let v10608 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v10606 v10607 
                                                        let v10609 : Vec<std_string_String> = method71(v10608)
                                                        let v10610 : Vec<std_string_String> = method72(v9268)
                                                        let v10611 : string = "true; let mut v10610 = v10610"
                                                        let v10612 : bool = Fable.Core.RustInterop.emitRustExpr () v10611 
                                                        let v10613 : string = "true; v10610.extend(v10609)"
                                                        let v10614 : bool = Fable.Core.RustInterop.emitRustExpr () v10613 
                                                        let v10615 : string = "v10610"
                                                        let v10616 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10615 
                                                        v10616
                                            let v10619 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v10620 : bool = Fable.Core.RustInterop.emitRustExpr v10618 v10619 
                                            let v10621 : string = "x"
                                            let v10622 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10621 
                                            let v10623 : string = "fable_library_rust::String_::fromString($0)"
                                            let v10624 : string = Fable.Core.RustInterop.emitRustExpr v10622 v10623 
                                            let v10627 : string = "="
                                            let v10628 : bool = v10624.Contains v10627 
                                            let v10643 : string =
                                                if v10628 then
                                                    v10624
                                                else
                                                    let v10633 : string = "]"
                                                    let v10634 : bool = v10624.EndsWith (v10633, false, null)
                                                    if v10634 then
                                                        let v10637 : string = $"={{version='*',features=["
                                                        let v10638 : string = "["
                                                        let v10639 : string = v10624.Replace (v10638, v10637)
                                                        let v10640 : string = $"{v10639}}}"
                                                        v10640
                                                    else
                                                        let v10641 : string = $"{v10624}='*'"
                                                        v10641
                                            let v10644 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v10645 : bool = Fable.Core.RustInterop.emitRustExpr v10643 v10644 
                                            let v10646 : string = "_vec_map"
                                            let v10647 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v10646 
                                            let v10648 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v10649 : (string []) = Fable.Core.RustInterop.emitRustExpr v10647 v10648 
                                            let v10654 : unit = ()
                                            let _let'_v10654 =
                                                seq {
                                                    for i = 0 to v10649.Length - 1 do yield v10649.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v10657 : string seq = _let'_v10654 
                                            let v10665 : string = method73()
                                            let v10666 : (string -> (string seq -> string)) = String.concat
                                            let v10667 : (string seq -> string) = v10666 v10665
                                            let v10668 : string = v10667 v10657
                                            let v10672 : string = $"{v9648}.{v9574}"
                                            let v10673 : string = method34(v9652, v10672)
                                            (* run_target_args'
                                            let v10678 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v10683 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v10684 : string = "std::fs::read(&*$0)"
                                            let v10685 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10673 v10684 
                                            (* run_target_args'
                                            let v10687 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v10688 : string = "$0.unwrap()"
                                            let v10689 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10685 v10688 
                                            let _run_target_args'_v10687 = v10689 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10690 : string = "$0.unwrap()"
                                            let v10691 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10685 v10690 
                                            let _run_target_args'_v10687 = v10691 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10692 : string = "$0.unwrap()"
                                            let v10693 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10685 v10692 
                                            let _run_target_args'_v10687 = v10693 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10694 : Vec<uint8> = match v10685 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10687 = v10694 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10695 : Vec<uint8> = match v10685 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10687 = v10695 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10696 : Vec<uint8> = match v10685 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10687 = v10696 
                                            #endif
#else
                                            let v10697 : Vec<uint8> = match v10685 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10687 = v10697 
                                            #endif
                                            let v10698 : Vec<uint8> = _run_target_args'_v10687 
                                            let _run_target_args'_v10683 = v10698 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10702 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10683 = v10702 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10706 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10683 = v10706 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10710 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10683 = v10710 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10714 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10683 = v10714 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10718 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10683 = v10718 
                                            #endif
#else
                                            let v10721 : (uint8 []) = v10673 |> System.IO.File.ReadAllBytes
                                            let v10722 : string = "$0.to_vec()"
                                            let v10723 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10721 v10722 
                                            let _run_target_args'_v10683 = v10723 
                                            #endif
                                            let v10724 : Vec<uint8> = _run_target_args'_v10683 
                                            let v10733 : Vec<uint8> = method25(v10724)
                                            let v10734 : string = "std::string::String::from_utf8($0)"
                                            let v10735 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v10733 v10734 
                                            (* run_target_args'
                                            let v10737 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v10738 : string = "$0.unwrap()"
                                            let v10739 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10735 v10738 
                                            let _run_target_args'_v10737 = v10739 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10740 : string = "$0.unwrap()"
                                            let v10741 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10735 v10740 
                                            let _run_target_args'_v10737 = v10741 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10742 : string = "$0.unwrap()"
                                            let v10743 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10735 v10742 
                                            let _run_target_args'_v10737 = v10743 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10744 : std_string_String = match v10735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10737 = v10744 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10745 : std_string_String = match v10735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10737 = v10745 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10746 : std_string_String = match v10735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10737 = v10746 
                                            #endif
#else
                                            let v10747 : std_string_String = match v10735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10737 = v10747 
                                            #endif
                                            let v10748 : std_string_String = _run_target_args'_v10737 
                                            let v10751 : string = "fable_library_rust::String_::fromString($0)"
                                            let v10752 : string = Fable.Core.RustInterop.emitRustExpr v10748 v10751 
                                            let _run_target_args'_v10678 = v10752 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10754 : string = null |> unbox<string>
                                            let _run_target_args'_v10678 = v10754 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10758 : string = null |> unbox<string>
                                            let _run_target_args'_v10678 = v10758 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10762 : string = null |> unbox<string>
                                            let _run_target_args'_v10678 = v10762 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10766 : string = null |> unbox<string>
                                            let _run_target_args'_v10678 = v10766 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10770 : string = null |> unbox<string>
                                            let _run_target_args'_v10678 = v10770 
                                            #endif
#else
                                            let v10773 : string = v10673 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v10678 = v10773 
                                            #endif
                                            let v10774 : string = _run_target_args'_v10678 
                                            let v10783 : string = method231()
                                            let v10786 : string = "on_startup!"
                                            let v10787 : string = v10786 + v10783 
                                            let v10790 : string = method232()
                                            let v10793 : string = " method0"
                                            let v10794 : string = v10793 + v10790 
                                            let v10798 : bool = v10774.Contains v10787 
                                            let v10806 : bool =
                                                if v10798 then
                                                    let v10802 : bool = v10774.Contains v10794 
                                                    let v10805 : bool = v10802 = false
                                                    v10805
                                                else
                                                    false
                                            let v10807 : string = $"cargo-features = [\"edition2024\"]"
                                            let v10808 : string = $""
                                            let v10811 : string = "\n"
                                            let v10812 : string = v10807 + v10811 
                                            let v10816 : string = v10812 + v10808 
                                            let v10819 : string = $"[package]"
                                            let v10821 : string = v10816 + v10811 
                                            let v10825 : string = v10821 + v10819 
                                            let v10828 : string = $"name = \"spiral_{v9576}\""
                                            let v10830 : string = v10825 + v10811 
                                            let v10834 : string = v10830 + v10828 
                                            let v10837 : string = $"version = \"0.0.1\""
                                            let v10839 : string = v10834 + v10811 
                                            let v10843 : string = v10839 + v10837 
                                            let v10846 : string = $"edition = \"2024\""
                                            let v10848 : string = v10843 + v10811 
                                            let v10852 : string = v10848 + v10846 
                                            let v10855 : string = $""
                                            let v10857 : string = v10852 + v10811 
                                            let v10861 : string = v10857 + v10855 
                                            let v10864 : string = $"[dependencies]"
                                            let v10866 : string = v10861 + v10811 
                                            let v10870 : string = v10866 + v10864 
                                            let v10875 : US40 = US40_1
                                            let v10876 : bool = v9464 <> v10875 
                                            let v10894 : string =
                                                if v10876 then
                                                    let v10880 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v10880
                                                else
                                                    let v10881 : string = $"fable_library_rust = {{"
                                                    let v10882 : string = $" workspace = true,"
                                                    let v10883 : string = v10881 + v10882 
                                                    let v10884 : string = $" features = ["
                                                    let v10885 : string = v10883 + v10884 
                                                    let v10888 : string =
                                                        if v10806 then
                                                            let v10886 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v10886
                                                        else
                                                            let v10887 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v10887
                                                    let v10889 : string = v10885 + v10888 
                                                    let v10890 : string = $"]"
                                                    let v10891 : string = v10889 + v10890 
                                                    let v10892 : string = $"}}"
                                                    let v10893 : string = v10891 + v10892 
                                                    v10893
                                            let v10896 : string = v10870 + v10811 
                                            let v10900 : string = v10896 + v10894 
                                            let v10903 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v10905 : string = v10900 + v10811 
                                            let v10909 : string = v10905 + v10903 
                                            let v10912 : string = $"{v10668}"
                                            let v10914 : string = v10909 + v10811 
                                            let v10918 : string = v10914 + v10912 
                                            let v10921 : string = $""
                                            let v10923 : string = v10918 + v10811 
                                            let v10927 : string = v10923 + v10921 
                                            let v10930 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v10951 : string =
                                                if v10930 then
                                                    let v10931 : string = $"[[bin]]"
                                                    let v10932 : string = $"name = \"spiral_{v9576}\""
                                                    let v10934 : string = v10931 + v10811 
                                                    let v10938 : string = v10934 + v10932 
                                                    v10938
                                                else
                                                    let v10941 : string = $"[lib]"
                                                    let v10942 : string = $"crate-type = [\"cdylib\"]"
                                                    let v10944 : string = v10941 + v10811 
                                                    let v10948 : string = v10944 + v10942 
                                                    v10948
                                            let v10953 : string = v10927 + v10811 
                                            let v10957 : string = v10953 + v10951 
                                            let v10960 : string = $"path = \"spiral.rs\""
                                            let v10962 : string = v10957 + v10811 
                                            let v10966 : string = v10962 + v10960 
                                            let v10969 : string = method44(v9647)
                                            let v10970 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v10971 : string = $""
                                            let v10973 : string = v10970 + v10811 
                                            let v10977 : string = v10973 + v10971 
                                            let v10980 : string = $"[workspace]"
                                            let v10982 : string = v10977 + v10811 
                                            let v10986 : string = v10982 + v10980 
                                            let v10989 : string = $"resolver = \"2\""
                                            let v10991 : string = v10986 + v10811 
                                            let v10995 : string = v10991 + v10989 
                                            let v10998 : string = $"members = [\"packages/Rust/*\"]"
                                            let v11000 : string = v10995 + v10811 
                                            let v11004 : string = v11000 + v10998 
                                            let v11007 : string = $""
                                            let v11009 : string = v11004 + v10811 
                                            let v11013 : string = v11009 + v11007 
                                            let v11016 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v11018 : string = v11013 + v10811 
                                            let v11022 : string = v11018 + v11016 
                                            let v11025 : string = $"path = \"{v10969}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v11027 : string = v11022 + v10811 
                                            let v11031 : string = v11027 + v11025 
                                            let v11034 : string = $"default-features = false"
                                            let v11036 : string = v11031 + v10811 
                                            let v11040 : string = v11036 + v11034 
                                            let v11043 : string = $"features = []"
                                            let v11045 : string = v11040 + v10811 
                                            let v11049 : string = v11045 + v11043 
                                            let v11052 : string = $""
                                            let v11054 : string = v11049 + v10811 
                                            let v11058 : string = v11054 + v11052 
                                            let v11061 : string = $"[workspace.dependencies]"
                                            let v11063 : string = v11058 + v10811 
                                            let v11067 : string = v11063 + v11061 
                                            let v11070 : string = $"inline_colorization = \"~0.1\""
                                            let v11072 : string = v11067 + v10811 
                                            let v11076 : string = v11072 + v11070 
                                            let v11079 : string = $""
                                            let v11081 : string = v11076 + v10811 
                                            let v11085 : string = v11081 + v11079 
                                            let v11088 : string = $"[profile.release]"
                                            let v11090 : string = v11085 + v10811 
                                            let v11094 : string = v11090 + v11088 
                                            let v11097 : string = $"codegen-units = 1"
                                            let v11099 : string = v11094 + v10811 
                                            let v11103 : string = v11099 + v11097 
                                            let v11106 : string = $"opt-level = \"z\""
                                            let v11108 : string = v11103 + v10811 
                                            let v11112 : string = v11108 + v11106 
                                            let v11115 : string = $"lto = true"
                                            let v11117 : string = v11112 + v10811 
                                            let v11121 : string = v11117 + v11115 
                                            let v11124 : string = $"debug = false"
                                            let v11126 : string = v11121 + v10811 
                                            let v11130 : string = v11126 + v11124 
                                            let v11133 : string = $"panic = \"abort\""
                                            let v11135 : string = v11130 + v10811 
                                            let v11139 : string = v11135 + v11133 
                                            let v11142 : string = $"overflow-checks = true"
                                            let v11144 : string = v11139 + v10811 
                                            let v11148 : string = v11144 + v11142 
                                            let v11151 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v11153 : string = v11148 + v10811 
                                            let v11157 : string = v11153 + v11151 
                                            method74(v9766, v10966)
                                            method74(v9662, v11157)
                                            let v11160 : string = "src/Range.rs"
                                            let v11161 : string = method34(v9873, v11160)
                                            let v11162 : bool = method36(v11161)
                                            if v11162 then
                                                (* run_target_args'
                                                let v11167 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v11172 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v11173 : string = "std::fs::read(&*$0)"
                                                let v11174 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v11161 v11173 
                                                (* run_target_args'
                                                let v11176 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v11177 : string = "$0.unwrap()"
                                                let v11178 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11174 v11177 
                                                let _run_target_args'_v11176 = v11178 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11179 : string = "$0.unwrap()"
                                                let v11180 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11174 v11179 
                                                let _run_target_args'_v11176 = v11180 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11181 : string = "$0.unwrap()"
                                                let v11182 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11174 v11181 
                                                let _run_target_args'_v11176 = v11182 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11183 : Vec<uint8> = match v11174 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11176 = v11183 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11184 : Vec<uint8> = match v11174 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11176 = v11184 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11185 : Vec<uint8> = match v11174 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11176 = v11185 
                                                #endif
#else
                                                let v11186 : Vec<uint8> = match v11174 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11176 = v11186 
                                                #endif
                                                let v11187 : Vec<uint8> = _run_target_args'_v11176 
                                                let _run_target_args'_v11172 = v11187 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11191 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11172 = v11191 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11195 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11172 = v11195 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11199 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11172 = v11199 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11203 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11172 = v11203 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11207 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11172 = v11207 
                                                #endif
#else
                                                let v11210 : (uint8 []) = v11161 |> System.IO.File.ReadAllBytes
                                                let v11211 : string = "$0.to_vec()"
                                                let v11212 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11210 v11211 
                                                let _run_target_args'_v11172 = v11212 
                                                #endif
                                                let v11213 : Vec<uint8> = _run_target_args'_v11172 
                                                let v11222 : Vec<uint8> = method25(v11213)
                                                let v11223 : string = "std::string::String::from_utf8($0)"
                                                let v11224 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v11222 v11223 
                                                (* run_target_args'
                                                let v11226 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v11227 : string = "$0.unwrap()"
                                                let v11228 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11224 v11227 
                                                let _run_target_args'_v11226 = v11228 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11229 : string = "$0.unwrap()"
                                                let v11230 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11224 v11229 
                                                let _run_target_args'_v11226 = v11230 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11231 : string = "$0.unwrap()"
                                                let v11232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11224 v11231 
                                                let _run_target_args'_v11226 = v11232 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11233 : std_string_String = match v11224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11226 = v11233 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11234 : std_string_String = match v11224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11226 = v11234 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11235 : std_string_String = match v11224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11226 = v11235 
                                                #endif
#else
                                                let v11236 : std_string_String = match v11224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11226 = v11236 
                                                #endif
                                                let v11237 : std_string_String = _run_target_args'_v11226 
                                                let v11240 : string = "fable_library_rust::String_::fromString($0)"
                                                let v11241 : string = Fable.Core.RustInterop.emitRustExpr v11237 v11240 
                                                let _run_target_args'_v11167 = v11241 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11243 : string = null |> unbox<string>
                                                let _run_target_args'_v11167 = v11243 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11247 : string = null |> unbox<string>
                                                let _run_target_args'_v11167 = v11247 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11251 : string = null |> unbox<string>
                                                let _run_target_args'_v11167 = v11251 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11255 : string = null |> unbox<string>
                                                let _run_target_args'_v11167 = v11255 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11259 : string = null |> unbox<string>
                                                let _run_target_args'_v11167 = v11259 
                                                #endif
#else
                                                let v11262 : string = v11161 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v11167 = v11262 
                                                #endif
                                                let v11263 : string = _run_target_args'_v11167 
                                                let v11272 : string = "use crate::String_::fromCharCode;"
                                                let v11273 : string = "use crate::String_::fromChar;"
                                                let v11274 : string = v11263.Replace (v11272, v11273)
                                                let v11275 : string = "fromCharCode(c)"
                                                let v11276 : string = "std::char::from_u32(c).unwrap()"
                                                let v11277 : string = v11274.Replace (v11275, v11276)
                                                method74(v11161, v11277)
                                            let v11278 : uint8 = 1uy
                                            let struct (v11279 : int32, v11280 : string) = method233(v9627, v9766, v11278)
                                            let v11282 : bool = v11279 <> 0 
                                            if v11282 then
                                                let v11594 : unit = ()
                                                let v11595 : (unit -> unit) = closure93(v11280, v11279)
                                                let v11596 : unit = (fun () -> v11595 (); v11594) ()
                                                ()
                                            (* run_target_args'
                                            let v11913 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v11918 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11919 : string = "std::fs::read(&*$0)"
                                            let v11920 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10673 v11919 
                                            (* run_target_args'
                                            let v11922 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11923 : string = "$0.unwrap()"
                                            let v11924 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11920 v11923 
                                            let _run_target_args'_v11922 = v11924 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11925 : string = "$0.unwrap()"
                                            let v11926 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11920 v11925 
                                            let _run_target_args'_v11922 = v11926 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11927 : string = "$0.unwrap()"
                                            let v11928 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11920 v11927 
                                            let _run_target_args'_v11922 = v11928 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11929 : Vec<uint8> = match v11920 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11922 = v11929 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11930 : Vec<uint8> = match v11920 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11922 = v11930 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v11931 : Vec<uint8> = match v11920 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11922 = v11931 
                                            #endif
#else
                                            let v11932 : Vec<uint8> = match v11920 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11922 = v11932 
                                            #endif
                                            let v11933 : Vec<uint8> = _run_target_args'_v11922 
                                            let _run_target_args'_v11918 = v11933 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11937 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11918 = v11937 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11941 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11918 = v11941 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11945 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11918 = v11945 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11949 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11918 = v11949 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v11953 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11918 = v11953 
                                            #endif
#else
                                            let v11956 : (uint8 []) = v10673 |> System.IO.File.ReadAllBytes
                                            let v11957 : string = "$0.to_vec()"
                                            let v11958 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11956 v11957 
                                            let _run_target_args'_v11918 = v11958 
                                            #endif
                                            let v11959 : Vec<uint8> = _run_target_args'_v11918 
                                            let v11968 : Vec<uint8> = method25(v11959)
                                            let v11969 : string = "std::string::String::from_utf8($0)"
                                            let v11970 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v11968 v11969 
                                            (* run_target_args'
                                            let v11972 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11973 : string = "$0.unwrap()"
                                            let v11974 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11970 v11973 
                                            let _run_target_args'_v11972 = v11974 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11975 : string = "$0.unwrap()"
                                            let v11976 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11970 v11975 
                                            let _run_target_args'_v11972 = v11976 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11977 : string = "$0.unwrap()"
                                            let v11978 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11970 v11977 
                                            let _run_target_args'_v11972 = v11978 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11979 : std_string_String = match v11970 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11972 = v11979 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11980 : std_string_String = match v11970 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11972 = v11980 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v11981 : std_string_String = match v11970 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11972 = v11981 
                                            #endif
#else
                                            let v11982 : std_string_String = match v11970 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11972 = v11982 
                                            #endif
                                            let v11983 : std_string_String = _run_target_args'_v11972 
                                            let v11986 : string = "fable_library_rust::String_::fromString($0)"
                                            let v11987 : string = Fable.Core.RustInterop.emitRustExpr v11983 v11986 
                                            let _run_target_args'_v11913 = v11987 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11989 : string = null |> unbox<string>
                                            let _run_target_args'_v11913 = v11989 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11993 : string = null |> unbox<string>
                                            let _run_target_args'_v11913 = v11993 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11997 : string = null |> unbox<string>
                                            let _run_target_args'_v11913 = v11997 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12001 : string = null |> unbox<string>
                                            let _run_target_args'_v11913 = v12001 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12005 : string = null |> unbox<string>
                                            let _run_target_args'_v11913 = v12005 
                                            #endif
#else
                                            let v12008 : string = v10673 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v11913 = v12008 
                                            #endif
                                            let v12009 : string = _run_target_args'_v11913 
                                            let v12018 : string = method239()
                                            let v12021 : string = "pub fn main() -> Result<(), String> "
                                            let v12022 : string = v12021 + v12018 
                                            let v12025 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12118 : string =
                                                if v12025 then
                                                    let v12026 : string = ""
                                                    v12026
                                                else
                                                    let v12027 : string = $"#[near_sdk::near_bindgen]"
                                                    let v12028 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v12030 : string = v12027 + v10811 
                                                    let v12034 : string = v12030 + v12028 
                                                    let v12037 : string = $"pub struct MainState {{"
                                                    let v12039 : string = v12034 + v10811 
                                                    let v12043 : string = v12039 + v12037 
                                                    let v12046 : string = $"}}"
                                                    let v12048 : string = v12043 + v10811 
                                                    let v12052 : string = v12048 + v12046 
                                                    let v12055 : string = $""
                                                    let v12057 : string = v12052 + v10811 
                                                    let v12061 : string = v12057 + v12055 
                                                    let v12064 : string = $"#[near_sdk::near_bindgen]"
                                                    let v12066 : string = v12061 + v10811 
                                                    let v12070 : string = v12066 + v12064 
                                                    let v12073 : string = $"impl MainState {{"
                                                    let v12075 : string = v12070 + v10811 
                                                    let v12079 : string = v12075 + v12073 
                                                    let v12082 : string = $"    pub fn state_main() {{"
                                                    let v12084 : string = v12079 + v10811 
                                                    let v12088 : string = v12084 + v12082 
                                                    let v12091 : string = $"        Spiral::method0();"
                                                    let v12093 : string = v12088 + v10811 
                                                    let v12097 : string = v12093 + v12091 
                                                    let v12100 : string = $"    }}"
                                                    let v12102 : string = v12097 + v10811 
                                                    let v12106 : string = v12102 + v12100 
                                                    let v12109 : string = $"}}"
                                                    let v12111 : string = v12106 + v10811 
                                                    let v12115 : string = v12111 + v12109 
                                                    v12115
                                            let v12119 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12130 : bool =
                                                if v12119 then
                                                    let v12122 : string = "Spiral::method0()"
                                                    let v12123 : string = v10787 + v12122 
                                                    let v12127 : bool = v12009.Contains v12123 
                                                    v12127
                                                else
                                                    false
                                            let v12133 : string =
                                                if v12130 then
                                                    let v12131 : string = $"{v12022} Ok(Spiral::method0()) }}"
                                                    v12131
                                                else
                                                    let v12132 : string = $"{v12022} Ok(()) }}"
                                                    v12132
                                            let v12135 : string = v12118 + v10811 
                                            let v12139 : string = v12135 + v12133 
                                            let v12143 : bool = v12009.Contains v12022 
                                            let v12146 : string = $"{v12009}\n\n{v12139}\n"
                                            let v12339 : string =
                                                if v12143 then
                                                    v12009
                                                else
                                                    let v12150 : bool =
                                                        match v9464 with
                                                        | US40_0(v12147) -> (* Some *)
                                                            match v12147 with
                                                            | US41_1(v12148) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v12151 : string = "\";\".into()"
                                                    let v12152 : string = Fable.Core.RustInterop.emitRustExpr () v12151 
                                                    let v12155 : string = "),)"
                                                    let v12156 : string = v12155 + v12152 
                                                    let v12159 : string = "));"
                                                    let v12160 : string = v12146.Replace (v12156, v12159)
                                                    let v12161 : string = "\";\".into()"
                                                    let v12162 : string = Fable.Core.RustInterop.emitRustExpr () v12161 
                                                    let v12165 : string = "},)"
                                                    let v12166 : string = v12165 + v12162 
                                                    let v12169 : string = "});"
                                                    let v12170 : string = v12160.Replace (v12166, v12169)
                                                    let v12171 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v12172 : string = " defaultOf::<()>();"
                                                    let v12173 : string = method64(v12171, v12172, v12170)
                                                    let v12174 : string = "\\s\\sgetZero\\(\\);"
                                                    let v12175 : string = " getZero::<()>();"
                                                    let v12176 : string = method64(v12174, v12175, v12173)
                                                    let v12177 : string = "\"t\".into()"
                                                    let v12178 : string = Fable.Core.RustInterop.emitRustExpr () v12177 
                                                    let v12181 : string = "(&e.get_Curren"
                                                    let v12182 : string = v12181 + v12178 
                                                    let v12185 : string = "(e.get_Current"
                                                    let v12186 : string = v12176.Replace (v12182, v12185)
                                                    let v12187 : string = "\"::<()>()\".into()"
                                                    let v12188 : string = Fable.Core.RustInterop.emitRustExpr () v12187 
                                                    let v12191 : string = "getNull"
                                                    let v12192 : string = v12191 + v12188 
                                                    let v12195 : string = "fable_library_rust::Native_::getZero()"
                                                    let v12196 : string = v12186.Replace (v12192, v12195)
                                                    let v12197 : string = $"\")\".into()"
                                                    let v12198 : string = Fable.Core.RustInterop.emitRustExpr () v12197 
                                                    let v12201 : string = "null::<()>("
                                                    let v12202 : string = v12201 + v12198 
                                                    let v12205 : string = v12196.Replace (v12202, v12195)
                                                    let v12206 : string = "null::<\\(\\)>\\(\\)"
                                                    let v12207 : string = method64(v12206, v12195, v12205)
                                                    let v12208 : string = "\\(null::<\\(\\)>\\(\\)"
                                                    let v12209 : string = "(null()"
                                                    let v12210 : string = method64(v12208, v12209, v12207)
                                                    let v12211 : string = " null::<\\(\\)>\\(\\)"
                                                    let v12212 : string = " null()"
                                                    let v12213 : string = method64(v12211, v12212, v12210)
                                                    let v12214 : string = "unbox::<bool>\\(null\\(\\)"
                                                    let v12215 : string = "false"
                                                    let v12216 : string = method64(v12214, v12215, v12213)
                                                    let v12217 : string = "unbox::<string>\\(null\\(\\)"
                                                    let v12218 : string = method64(v12217, v12195, v12216)
                                                    let v12219 : string = "unbox::<i32>\\(null\\(\\)"
                                                    let v12220 : string = "0"
                                                    let v12221 : string = method64(v12219, v12220, v12218)
                                                    let v12222 : string = "unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"
                                                    let v12223 : string = method64(v12222, v12220, v12221)
                                                    let v12224 : string = "null\\(\\)"
                                                    let v12225 : string = method64(v12224, v12195, v12223)
                                                    let v12226 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v12227 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v12228 : string = method64(v12226, v12227, v12225)
                                                    let v12229 : string = " gen:"
                                                    let v12230 : string = " f:"
                                                    let v12231 : string = v12228.Replace (v12229, v12230)
                                                    let v12232 : string = "\\(gen\\("
                                                    let v12233 : string = "(f("
                                                    let v12234 : string = method64(v12232, v12233, v12231)
                                                    let v12235 : string = "\\(gen,"
                                                    let v12236 : string = "(f,"
                                                    let v12237 : string = method64(v12235, v12236, v12234)
                                                    let v12238 : string = " gen "
                                                    let v12239 : string = " f "
                                                    let v12240 : string = v12237.Replace (v12238, v12239)
                                                    let v12241 : string = "::Slice'_"
                                                    let v12242 : string = "::Slice__"
                                                    let v12243 : string = v12240.Replace (v12241, v12242)
                                                    let v12244 : string = " Slice'_"
                                                    let v12245 : string = " Slice__"
                                                    let v12246 : string = v12243.Replace (v12244, v12245)
                                                    let v12247 : string = "\",\".into()"
                                                    let v12248 : string = Fable.Core.RustInterop.emitRustExpr () v12247 
                                                    let v12251 : string = "defaultOf()"
                                                    let v12252 : string = v12251 + v12248 
                                                    let v12255 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v12256 : string = v12246.Replace (v12252, v12255)
                                                    let v12257 : string = "\"__.\".into()"
                                                    let v12258 : string = Fable.Core.RustInterop.emitRustExpr () v12257 
                                                    let v12261 : string = "__self"
                                                    let v12262 : string = v12261 + v12258 
                                                    let v12265 : string = "self."
                                                    let v12266 : string = v12256.Replace (v12262, v12265)
                                                    let v12267 : string = "\"_.\".into()"
                                                    let v12268 : string = Fable.Core.RustInterop.emitRustExpr () v12267 
                                                    let v12271 : string = "_self"
                                                    let v12272 : string = v12271 + v12268 
                                                    let v12275 : string = v12266.Replace (v12272, v12265)
                                                    let v12276 : string = "\"h\".into()"
                                                    let v12277 : string = Fable.Core.RustInterop.emitRustExpr () v12276 
                                                    let v12280 : string = "get_or_insert_wit"
                                                    let v12281 : string = v12280 + v12277 
                                                    let v12284 : string = "get_or_init"
                                                    let v12285 : string = v12275.Replace (v12281, v12284)
                                                    let v12286 : string = "\";\".into()"
                                                    let v12287 : string = Fable.Core.RustInterop.emitRustExpr () v12286 
                                                    let v12290 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v12291 : string = v12290 + v12287 
                                                    let v12294 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v12295 : string = v12285.Replace (v12291, v12294)
                                                    let v12296 : string = "\";\".into()"
                                                    let v12297 : string = Fable.Core.RustInterop.emitRustExpr () v12296 
                                                    let v12300 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v12301 : string = v12300 + v12297 
                                                    let v12304 : string = "type TimeZoneInfo = i64;"
                                                    let v12305 : string = v12295.Replace (v12301, v12304)
                                                    let v12306 : string = "\";\".into()"
                                                    let v12307 : string = Fable.Core.RustInterop.emitRustExpr () v12306 
                                                    let v12310 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v12311 : string = v12310 + v12307 
                                                    let v12314 : string = "type TaskCanceledException = ();"
                                                    let v12315 : string = v12305.Replace (v12311, v12314)
                                                    let v12324 : (string -> string) =
                                                        if v10806 then
                                                            closure94()
                                                        else
                                                            let v12319 : string = "// "
                                                            let v12320 : string = v12319 + v10787 
                                                            closure95(v10787, v12320)
                                                    let v12325 : string = v12324 v12315
                                                    let v12326 : bool = v12150 = false
                                                    let v12337 : (string -> string) =
                                                        if v12326 then
                                                            closure94()
                                                        else
                                                            let v12331 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v12332 : string = ";"
                                                            let v12333 : string = v12331 + v12332 
                                                            closure96(v12333)
                                                    v12337 v12325
                                            let v12340 : bool = v12143 = false
                                            if v12340 then
                                                method74(v10673, v12339)
                                            let v12341 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12342 : bool = v12341 <> true
                                            let v12345 : string =
                                                if v12342 then
                                                    let v12343 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v9766}\""
                                                    v12343
                                                else
                                                    let v12344 : string = $"cargo run --manifest-path \"{v9766}\""
                                                    v12344
                                            let v12346 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12347 : bool = v12346 <> true
                                            let v12358 : (struct (string * string) []) =
                                                if v12347 then
                                                    [||]
                                                else
                                                    let v12349 : string = "TRACE_LEVEL"
                                                    let v12350 : string = "Verbose"
                                                    let v12351 : string = "RUSTC_WRAPPER"
                                                    let v12352 : string = "sccache"
                                                    let v12353 : string = "RUST_BACKTRACE"
                                                    let v12354 : string = "full"
                                                    let v12355 : string = "RUSTFLAGS"
                                                    let v12356 : string = "-C prefer-dynamic"
                                                    [|struct (v12349, v12350); struct (v12351, v12352); struct (v12353, v12354); struct (v12355, v12356)|]
                                            let v12360 : System.Threading.CancellationToken option = None
                                            let v12363 : (struct (string * string) []) = [||]
                                            let v12365 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v12369 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v12373 : string option = None
                                            let v12387 : Result<string, string> =
                                                match v9627 with
                                                | US14_1(v12381) -> (* Error *)
                                                    let v12383 : Result<string, string> = Error v12381 
                                                    v12383
                                                | US14_0(v12376) -> (* Ok *)
                                                    let v12378 : Result<string, string> = Ok v12376 
                                                    v12378
                                            (* run_target_args'
                                            let v12389 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v12390 : string = "$0.ok()"
                                            let v12391 : string option = Fable.Core.RustInterop.emitRustExpr v12387 v12390 
                                            let _run_target_args'_v12389 = v12391 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12392 : string = "$0.ok()"
                                            let v12393 : string option = Fable.Core.RustInterop.emitRustExpr v12387 v12392 
                                            let _run_target_args'_v12389 = v12393 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12394 : string = "$0.ok()"
                                            let v12395 : string option = Fable.Core.RustInterop.emitRustExpr v12387 v12394 
                                            let _run_target_args'_v12389 = v12395 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12396 : string option = match v12387 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12389 = v12396 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12397 : string option = match v12387 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12389 = v12397 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12398 : string option = match v12387 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12389 = v12398 
                                            #endif
#else
                                            let v12399 : string option = match v12387 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12389 = v12399 
                                            #endif
                                            let v12400 : string option = _run_target_args'_v12389 
                                            let v12403 : bool = true
                                            let struct (v12404 : int32, v12405 : string) = method99(v12345, v12360, v12358, v12365, v12369, v12403, v12400)
                                            let v12406 : bool =
                                                match v9464 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v14413 : US5, v14414 : US5, v14415 : US5, v14416 : US5) =
                                                if v12406 then
                                                    let v12407 : int32 = v12358.Length
                                                    let v12408 : (string []) = Array.zeroCreate<string> (v12407)
                                                    let v12409 : Mut5 = {l0 = 0} : Mut5
                                                    while method30(v12407, v12409) do
                                                        let v12411 : int32 = v12409.l0
                                                        let struct (v12412 : string, v12413 : string) = v12358.[int v12411]
                                                        let v12414 : string = $"$env:{v12412}=''{v12413}''"
                                                        v12408.[int v12411] <- v12414
                                                        let v12415 : int32 = v12411 + 1
                                                        v12409.l0 <- v12415
                                                        ()
                                                    let v12417 : string seq = v12408 |> Seq.ofArray
                                                    let v12422 : (string -> (string seq -> string)) = String.concat
                                                    let v12423 : string = ";"
                                                    let v12424 : (string seq -> string) = v12422 v12423
                                                    let v12425 : string = v12424 v12417
                                                    let v12428 : (string []) = [|v12425; v12345|]
                                                    let v12430 : string seq = v12428 |> Seq.ofArray
                                                    let v12434 : (string -> (string seq -> string)) = String.concat
                                                    let v12435 : (string seq -> string) = v12434 v12423
                                                    let v12436 : string = v12435 v12430
                                                    let v12439 : string = $"pwsh -c '{v12436}'"
                                                    let v12441 : bool = v12404 <> 0 
                                                    let struct (v13098 : US5, v13099 : US5, v13100 : US5, v13101 : US5) =
                                                        if v12441 then
                                                            let v12753 : unit = ()
                                                            let v12754 : (unit -> unit) = closure97(v9307, v10673, v12405, v12404, v12439)
                                                            let v12755 : unit = (fun () -> v12754 (); v12753) ()
                                                            let v13068 : US5 = US5_0(v9574)
                                                            let v13069 : US5 = US5_1
                                                            let v13070 : US5 = US5_1
                                                            let v13071 : US5 = US5_1
                                                            struct (v13068, v13069, v13070, v13071)
                                                        else
                                                            let v13072 : (string -> US5) = closure72()
                                                            let v13073 : (unit -> string) = closure98(v12405)
                                                            let v13074 : (exn -> US5) = closure100(v10673, v12405, v12439)
                                                            let v13076 : US5 = US5_1
                                                            let result = ref v13076
                                                            try
                                                                result.Value <- v13073 () |> v13072 
                                                            with ex ->
                                                                result.Value <- v13074 ex 
                                                            let v13077 : US5 = result.Value
                                                            let v13091 : string option =
                                                                match v13077 with
                                                                | US5_1 -> (* None *)
                                                                    let v13087 : string option = None
                                                                    v13087
                                                                | US5_0(v13081) -> (* Some *)
                                                                    let v13083 : string option = Some v13081 
                                                                    v13083
                                                            let v13092 : string = "$0.unwrap()"
                                                            let v13093 : string = Fable.Core.RustInterop.emitRustExpr v13091 v13092 
                                                            let v13094 : US5 = US5_0(v9574)
                                                            let v13095 : US5 = US5_0(v12339)
                                                            let v13096 : US5 = US5_0(v10673)
                                                            let v13097 : US5 = US5_0(v13093)
                                                            struct (v13094, v13095, v13096, v13097)
                                                    struct (v13098, v13099, v13100, v13101)
                                                else
                                                    let v13102 : string = $"target/spiral/{v9648}/target/wasm32-unknown-unknown/release/spiral_{v9576}.wasm"
                                                    let v13109 : string =
                                                        match v9464 with
                                                        | US40_0(v13103) -> (* Some *)
                                                            match v13103 with
                                                            | US41_1(v13105) -> (* Contract *)
                                                                v13105
                                                            | US41_0(v13104) -> (* Wasm *)
                                                                v13104
                                                        | _ ->
                                                            let v13108 : string = ""
                                                            v13108
                                                    let v13110 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v13102} -t debug {v13109}'"
                                                    let v13111 : string = "AUTOMATION"
                                                    let v13112 : string = method3(v13111)
                                                    let v13113 : string = "scripts/invoke-block.ps1"
                                                    let v13114 : string = $"pwsh -c \"pwsh {v13113} {v13110} -Linux -EnvironmentVariables AUTOMATION={v13112}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v13115 : bool = v12404 = 0
                                                    let struct (v14409 : US5, v14410 : US5, v14411 : US5, v14412 : US5) =
                                                        if v13115 then
                                                            let v13117 : System.Threading.CancellationToken option = None
                                                            let v13120 : (struct (string * string) []) = [||]
                                                            let v13122 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v13126 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v13130 : string option = None
                                                            let v13134 : string option = Some v9647 
                                                            let v13137 : bool = true
                                                            let struct (v13138 : int32, v13139 : string) = method99(v13114, v13117, v13120, v13122, v13126, v13137, v13134)
                                                            let v13140 : bool = v13138 = 0
                                                            let struct (v13775 : US5, v13776 : US5, v13777 : US5, v13778 : US5) =
                                                                if v13140 then
                                                                    let v13141 : US5 = US5_0(v9574)
                                                                    let v13142 : US5 = US5_0(v12339)
                                                                    let v13143 : US5 = US5_0(v10673)
                                                                    let v13144 : US5 = US5_0(v13139)
                                                                    struct (v13141, v13142, v13143, v13144)
                                                                else
                                                                    let v13455 : unit = ()
                                                                    let v13456 : (unit -> unit) = closure102(v9307, v10673, v12405, v13139, v13138)
                                                                    let v13457 : unit = (fun () -> v13456 (); v13455) ()
                                                                    let v13771 : US5 = US5_0(v9574)
                                                                    let v13772 : US5 = US5_1
                                                                    let v13773 : US5 = US5_1
                                                                    let v13774 : US5 = US5_1
                                                                    struct (v13771, v13772, v13773, v13774)
                                                            struct (v13775, v13776, v13777, v13778)
                                                        else
                                                            let v14089 : unit = ()
                                                            let v14090 : (unit -> unit) = closure103(v9307, v10673, v12405, v12404, v13102, v13114)
                                                            let v14091 : unit = (fun () -> v14090 (); v14089) ()
                                                            let v14405 : US5 = US5_0(v9574)
                                                            let v14406 : US5 = US5_1
                                                            let v14407 : US5 = US5_1
                                                            let v14408 : US5 = US5_1
                                                            struct (v14405, v14406, v14407, v14408)
                                                    struct (v14409, v14410, v14411, v14412)
                                            if v9307 then
                                                let v14417 : bool =
                                                    match v9464 with
                                                    | US40_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v14418 : bool = v14417 <> true
                                                let v14421 : string =
                                                    if v14418 then
                                                        let v14419 : string = "wasm32-unknown-unknown/release"
                                                        v14419
                                                    else
                                                        let v14420 : string = "debug"
                                                        v14420
                                                let v14422 : string = ""
                                                let v14423 : string = $"target/{v14421}/spiral_{v9576}{v14422}"
                                                let v14424 : string = method34(v9660, v14423)
                                                let v14425 : string = ".wasm"
                                                let v14426 : string = $"target/{v14421}/spiral_{v9576}{v14425}"
                                                let v14427 : string = method34(v9660, v14426)
                                                let v14428 : string = ".pdb"
                                                let v14429 : string = $"target/{v14421}/spiral_{v9576}{v14428}"
                                                let v14430 : string = method34(v9660, v14429)
                                                let v14431 : string = ".exe"
                                                let v14432 : string = $"target/{v14421}/spiral_{v9576}{v14431}"
                                                let v14433 : string = method34(v9660, v14432)
                                                let v14434 : string = ".d"
                                                let v14435 : string = $"target/{v14421}/spiral_{v9576}{v14434}"
                                                let v14436 : string = method34(v9660, v14435)
                                                let v14437 : bool = method36(v14424)
                                                let v14438 : bool = method36(v14427)
                                                let v14439 : bool = method36(v14430)
                                                let v14440 : bool = method36(v14433)
                                                let v14441 : bool = method36(v14436)
                                                let v14749 : unit = ()
                                                let v14750 : (unit -> unit) = closure104(v10673, v14436, v14441, v14433, v14440, v14430, v14439, v14427, v14438, v14424, v14437)
                                                let v14751 : unit = (fun () -> v14750 (); v14749) ()
                                                let v15065 : UH5 =
                                                    if v14437 then
                                                        let v15062 : UH5 = UH5_0
                                                        UH5_1(v14424, v14437, v15062)
                                                    else
                                                        UH5_0
                                                let v15067 : UH5 =
                                                    if v14438 then
                                                        UH5_1(v14427, v14438, v15065)
                                                    else
                                                        v15065
                                                let v15069 : UH5 =
                                                    if v14439 then
                                                        UH5_1(v14430, v14439, v15067)
                                                    else
                                                        v15067
                                                let v15071 : UH5 =
                                                    if v14440 then
                                                        UH5_1(v14433, v14440, v15069)
                                                    else
                                                        v15069
                                                let v15073 : UH5 =
                                                    if v14441 then
                                                        UH5_1(v14436, v14441, v15071)
                                                    else
                                                        v15071
                                                method250(v15073)
                                            struct (v14413, v14414, v14415, v14416)
                                    struct (v15074, v15075, v15076, v15077)
                                else
                                    let v15078 : string = "fable_library_rust::String_::fromString($0)"
                                    let v15079 : string = Fable.Core.RustInterop.emitRustExpr v40 v15078 
                                    let v15080 : bool = v15079 = "typescript"
                                    let struct (v21530 : US5, v21531 : US5, v21532 : US5, v21533 : US5) =
                                        if v15080 then
                                            let v15081 : string = method189()
                                            (* run_target_args'
                                            let v15086 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15087 : string = "&*$0"
                                            let v15088 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15081 v15087 
                                            let _run_target_args'_v15086 = v15088 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15089 : string = "&*$0"
                                            let v15090 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15081 v15089 
                                            let _run_target_args'_v15086 = v15090 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15091 : string = "&*$0"
                                            let v15092 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15081 v15091 
                                            let _run_target_args'_v15086 = v15092 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15094 : Ref<Str> = v15081 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15086 = v15094 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15098 : Ref<Str> = v15081 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15086 = v15098 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15102 : Ref<Str> = v15081 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15086 = v15102 
                                            #endif
#else
                                            let v15106 : Ref<Str> = v15081 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15086 = v15106 
                                            #endif
                                            let v15109 : Ref<Str> = _run_target_args'_v15086 
                                            let v15118 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v15119 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v15109) v15118 
                                            let v15122 : (std_string_String -> US8) = method21()
                                            let v15123 : US8 option = v15119 |> Option.map v15122 
                                            let v15143 : US8 = US8_1
                                            let v15144 : US8 = v15123 |> Option.defaultValue v15143 
                                            let v15151 : std_string_String =
                                                match v15144 with
                                                | US8_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US8_0(v15148) -> (* Some *)
                                                    v15148
                                            let v15152 : string = "fable_library_rust::String_::fromString($0)"
                                            let v15153 : string = Fable.Core.RustInterop.emitRustExpr v15151 v15152 
                                            let v15154 : string = method23()
                                            (* run_target_args'
                                            let v15159 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15160 : string = "&*$0"
                                            let v15161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15154 v15160 
                                            let _run_target_args'_v15159 = v15161 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15162 : string = "&*$0"
                                            let v15163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15154 v15162 
                                            let _run_target_args'_v15159 = v15163 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15164 : string = "&*$0"
                                            let v15165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15154 v15164 
                                            let _run_target_args'_v15159 = v15165 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15167 : Ref<Str> = v15154 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15159 = v15167 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15171 : Ref<Str> = v15154 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15159 = v15171 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15175 : Ref<Str> = v15154 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15159 = v15175 
                                            #endif
#else
                                            let v15179 : Ref<Str> = v15154 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15159 = v15179 
                                            #endif
                                            let v15182 : Ref<Str> = _run_target_args'_v15159 
                                            let v15191 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v15192 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v15182) v15191 
                                            let v15195 : (Vec<std_string_String> -> US12) = method24()
                                            let v15196 : US12 option = v15192 |> Option.map v15195 
                                            let v15216 : US12 = US12_1
                                            let v15217 : US12 = v15196 |> Option.defaultValue v15216 
                                            let v15221 : (std_string_String []) = [||]
                                            let v15222 : string = "$0.to_vec()"
                                            let v15223 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v15221 v15222 
                                            let v15226 : Vec<std_string_String> =
                                                match v15217 with
                                                | US12_1 -> (* None *)
                                                    v15223
                                                | US12_0(v15224) -> (* Some *)
                                                    v15224
                                            (* run_target_args'
                                            let v15231 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v15236 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15237 : string = "std::fs::read(&*$0)"
                                            let v15238 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v15153 v15237 
                                            (* run_target_args'
                                            let v15240 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15241 : string = "$0.unwrap()"
                                            let v15242 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15238 v15241 
                                            let _run_target_args'_v15240 = v15242 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15243 : string = "$0.unwrap()"
                                            let v15244 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15238 v15243 
                                            let _run_target_args'_v15240 = v15244 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15245 : string = "$0.unwrap()"
                                            let v15246 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15238 v15245 
                                            let _run_target_args'_v15240 = v15246 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15247 : Vec<uint8> = match v15238 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15240 = v15247 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15248 : Vec<uint8> = match v15238 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15240 = v15248 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15249 : Vec<uint8> = match v15238 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15240 = v15249 
                                            #endif
#else
                                            let v15250 : Vec<uint8> = match v15238 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15240 = v15250 
                                            #endif
                                            let v15251 : Vec<uint8> = _run_target_args'_v15240 
                                            let _run_target_args'_v15236 = v15251 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15255 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15236 = v15255 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15259 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15236 = v15259 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15263 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15236 = v15263 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15267 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15236 = v15267 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15271 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15236 = v15271 
                                            #endif
#else
                                            let v15274 : (uint8 []) = v15153 |> System.IO.File.ReadAllBytes
                                            let v15275 : string = "$0.to_vec()"
                                            let v15276 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15274 v15275 
                                            let _run_target_args'_v15236 = v15276 
                                            #endif
                                            let v15277 : Vec<uint8> = _run_target_args'_v15236 
                                            let v15286 : Vec<uint8> = method25(v15277)
                                            let v15287 : string = "std::string::String::from_utf8($0)"
                                            let v15288 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v15286 v15287 
                                            (* run_target_args'
                                            let v15290 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15291 : string = "$0.unwrap()"
                                            let v15292 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15288 v15291 
                                            let _run_target_args'_v15290 = v15292 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15293 : string = "$0.unwrap()"
                                            let v15294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15288 v15293 
                                            let _run_target_args'_v15290 = v15294 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15295 : string = "$0.unwrap()"
                                            let v15296 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15288 v15295 
                                            let _run_target_args'_v15290 = v15296 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15297 : std_string_String = match v15288 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15290 = v15297 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15298 : std_string_String = match v15288 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15290 = v15298 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15299 : std_string_String = match v15288 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15290 = v15299 
                                            #endif
#else
                                            let v15300 : std_string_String = match v15288 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15290 = v15300 
                                            #endif
                                            let v15301 : std_string_String = _run_target_args'_v15290 
                                            let v15304 : string = "fable_library_rust::String_::fromString($0)"
                                            let v15305 : string = Fable.Core.RustInterop.emitRustExpr v15301 v15304 
                                            let _run_target_args'_v15231 = v15305 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15307 : string = null |> unbox<string>
                                            let _run_target_args'_v15231 = v15307 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15311 : string = null |> unbox<string>
                                            let _run_target_args'_v15231 = v15311 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15315 : string = null |> unbox<string>
                                            let _run_target_args'_v15231 = v15315 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15319 : string = null |> unbox<string>
                                            let _run_target_args'_v15231 = v15319 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15323 : string = null |> unbox<string>
                                            let _run_target_args'_v15231 = v15323 
                                            #endif
#else
                                            let v15326 : string = v15153 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v15231 = v15326 
                                            #endif
                                            let v15327 : string = _run_target_args'_v15231 
                                            let v15338 : string = "ts"
                                            let v15339 : string = $"%A{struct (v15338, v15327)}"
                                            let v15342 : string = method27(v15339)
                                            let v15343 : string = method32()
                                            let v15344 : US5 = method33(v15343)
                                            let v15350 : US5 =
                                                match v15344 with
                                                | US5_1 -> (* None *)
                                                    let v15347 : string = __SOURCE_DIRECTORY__
                                                    method33(v15347)
                                                | US5_0(v15345) -> (* Some *)
                                                    US5_0(v15345)
                                            let v15356 : US5 =
                                                match v15350 with
                                                | US5_1 -> (* None *)
                                                    let v15353 : string = "/workspaces"
                                                    method33(v15353)
                                                | US5_0(v15351) -> (* Some *)
                                                    US5_0(v15351)
                                            let v15360 : string =
                                                match v15356 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v15357) -> (* Some *)
                                                    v15357
                                            let v15361 : string = method53(v15360)
                                            let v15362 : bool = "deps" = v15361
                                            let v15373 : string =
                                                if v15362 then
                                                    let v15363 : string option = method39(v15360)
                                                    let v15365 : string = v15363 |> Option.get
                                                    let v15368 : US5 = method33(v15365)
                                                    match v15368 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v15369) -> (* Some *)
                                                        v15369
                                                else
                                                    v15360
                                            let v15374 : string = "polyglot"
                                            let v15375 : string = method34(v15373, v15374)
                                            let v15376 : string = method32()
                                            let v15378 : (unit -> string) = v15376.ToLower
                                            let v15379 : string = v15378 ()
                                            let v15383 : (unit -> string) = v15375.ToLower
                                            let v15384 : string = v15383 ()
                                            let v15388 : bool = v15379.StartsWith (v15384, false, null)
                                            let v15393 : US14 =
                                                if v15388 then
                                                    US14_1(v15384)
                                                else
                                                    US14_0(v15384)
                                            let v15405 : Result<string, string> =
                                                match v15393 with
                                                | US14_1(v15399) -> (* Error *)
                                                    let v15401 : Result<string, string> = Error v15399 
                                                    v15401
                                                | US14_0(v15394) -> (* Ok *)
                                                    let v15396 : Result<string, string> = Ok v15394 
                                                    v15396
                                            let v15406 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v15407 : bool = Fable.Core.RustInterop.emitRustExpr v15405 v15406 
                                            let v15408 : string = "x"
                                            let v15409 : string = Fable.Core.RustInterop.emitRustExpr () v15408 
                                            let v15410 : string = "true; $0 })"
                                            let v15411 : bool = Fable.Core.RustInterop.emitRustExpr v15409 v15410 
                                            let v15412 : string = "_result_unwrap_or_else"
                                            let v15413 : string = Fable.Core.RustInterop.emitRustExpr () v15412 
                                            let v15414 : string = "spiral"
                                            let v15415 : US42 = US42_1
                                            let v15416 : US43 = US43_0(v15415)
                                            let v15417 : US5 = US5_0(v15342)
                                            let v15418 : string = method209(v15417, v15414, v15416, v15413)
                                            let v15419 : string = "Fable.Core"
                                            let v15420 : string = "4.3.0"
                                            let v15421 : UH4 = UH4_0
                                            let v15422 : UH4 = UH4_1(v15419, v15420, v15421)
                                            let v15423 : UH2 = UH2_0
                                            let v15424 : string = method210(v15327, v15414, v15423, v15422, v15418, v15413)
                                            let v15425 : string = "lib/typescript/fable/fable_modules"
                                            let v15426 : string = method34(v15413, v15425)
                                            let v15427 : string = $"fable-library-{v15338}"
                                            let v15428 : string = method255(v15427)
                                            let v15429 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v15430 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v15426 v15429 
                                            let v15431 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v15432 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v15427)
                                            let v15433 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v15430, v15432) v15431 
                                            let v15434 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method259(v15428)
                                            let v15435 : string = "futures::stream::StreamExt::filter_map(v15433, |x| async { v15434(x) })"
                                            let v15436 : _ = Fable.Core.RustInterop.emitRustExpr () v15435 
                                            let v15437 : string = "Box::pin(futures::stream::StreamExt::collect(v15436))"
                                            let v15438 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v15437 
                                            let v15439 : string = "v15438.await"
                                            let v15440 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v15439 
                                            let v15441 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v15442 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v15440 v15441 
                                            let v15443 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v15444 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v15445 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v15442, v15444) v15443 
                                            let v15446 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v15447 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v15445 v15446 
                                            let v15448 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v15449 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v15447 v15448 
                                            let v15450 : struct (string * string) option = v15449 |> Array.tryItem 0 
                                            let v15453 : (struct (string * string) -> US52) = method265()
                                            let v15454 : US52 option = v15450 |> Option.map v15453 
                                            let v15475 : US52 = US52_1
                                            let v15476 : US52 = v15454 |> Option.defaultValue v15475 
                                            let v15791 : unit = ()
                                            let v15792 : (unit -> unit) = closure118(v15476)
                                            let v15793 : unit = (fun () -> v15792 (); v15791) ()
                                            method268(v15418, v15426, v15476)
                                            let v16108 : US40 = US40_1
                                            let struct (v16109 : int32, v16110 : string) = method219(v16108, v15418, v15338, v15424, v15393)
                                            method268(v15418, v15426, v15476)
                                            let v16112 : bool = v16109 <> 0 
                                            let struct (v18347 : US5, v18348 : US5, v18349 : US5, v18350 : US5) =
                                                if v16112 then
                                                    let v16426 : unit = ()
                                                    let v16427 : (unit -> unit) = closure119(v16110, v16109)
                                                    let v16428 : unit = (fun () -> v16427 (); v16426) ()
                                                    let v16743 : US5 = US5_0(v15338)
                                                    let v16744 : US5 = US5_1
                                                    let v16745 : US5 = US5_1
                                                    let v16746 : US5 = US5_0(v16110)
                                                    struct (v16743, v16744, v16745, v16746)
                                                else
                                                    let v16747 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v16748 : bool = Fable.Core.RustInterop.emitRustExpr v15226 v16747 
                                                    let v16749 : string = "x"
                                                    let v16750 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16749 
                                                    let v16751 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v16752 : string = Fable.Core.RustInterop.emitRustExpr v16750 v16751 
                                                    let v16755 : string = "="
                                                    let v16756 : bool = v16752.Contains v16755 
                                                    let v16760 : string =
                                                        if v16756 then
                                                            v16752
                                                        else
                                                            let v16759 : string = $"\"{v16752}\":\"*\""
                                                            v16759
                                                    let v16761 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v16762 : bool = Fable.Core.RustInterop.emitRustExpr v16760 v16761 
                                                    let v16763 : string = "_vec_map"
                                                    let v16764 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v16763 
                                                    let v16765 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v16766 : (string []) = Fable.Core.RustInterop.emitRustExpr v16764 v16765 
                                                    let v16771 : unit = ()
                                                    let _let'_v16771 =
                                                        seq {
                                                            for i = 0 to v16766.Length - 1 do yield v16766.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v16774 : string seq = _let'_v16771 
                                                    let v16782 : (string -> (string seq -> string)) = String.concat
                                                    let v16783 : string = ",\n"
                                                    let v16784 : (string seq -> string) = v16782 v16783
                                                    let v16785 : string = v16784 v16774
                                                    let v16788 : string = $"{{"
                                                    let v16789 : string = $"  \"name\": \"spiral_{v15342}\","
                                                    let v16790 : string = v16788 + v16789 
                                                    let v16791 : string = $"  \"dependencies\": {{"
                                                    let v16792 : string = v16790 + v16791 
                                                    let v16793 : string = v16792 + v16785 
                                                    let v16794 : string = $"  }},"
                                                    let v16795 : string = v16793 + v16794 
                                                    let v16796 : string = $"    \"devDependencies\": {{"
                                                    let v16797 : string = v16795 + v16796 
                                                    let v16798 : string = $"  }},"
                                                    let v16799 : string = v16797 + v16798 
                                                    let v16800 : string = $"}}"
                                                    let v16801 : string = v16799 + v16800 
                                                    let v16802 : string = "package.json"
                                                    let v16803 : string = method34(v15418, v16802)
                                                    let v16804 : string = "../.."
                                                    let v16805 : string = method34(v15418, v16804)
                                                    let v16806 : string = method34(v16805, v16802)
                                                    method74(v16803, v16801)
                                                    let v16807 : string = ""
                                                    method74(v16806, v16807)
                                                    let v16808 : string = $"{v15414}.{v15338}"
                                                    let v16809 : string = method34(v15418, v16808)
                                                    let v17119 : unit = ()
                                                    let v17120 : (unit -> unit) = closure120(v16809)
                                                    let v17121 : unit = (fun () -> v17120 (); v17119) ()
                                                    (* run_target_args'
                                                    let v17438 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v17443 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17444 : string = "std::fs::read(&*$0)"
                                                    let v17445 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v16809 v17444 
                                                    (* run_target_args'
                                                    let v17447 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17448 : string = "$0.unwrap()"
                                                    let v17449 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17445 v17448 
                                                    let _run_target_args'_v17447 = v17449 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17450 : string = "$0.unwrap()"
                                                    let v17451 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17445 v17450 
                                                    let _run_target_args'_v17447 = v17451 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17452 : string = "$0.unwrap()"
                                                    let v17453 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17445 v17452 
                                                    let _run_target_args'_v17447 = v17453 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17454 : Vec<uint8> = match v17445 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17447 = v17454 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17455 : Vec<uint8> = match v17445 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17447 = v17455 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17456 : Vec<uint8> = match v17445 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17447 = v17456 
                                                    #endif
#else
                                                    let v17457 : Vec<uint8> = match v17445 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17447 = v17457 
                                                    #endif
                                                    let v17458 : Vec<uint8> = _run_target_args'_v17447 
                                                    let _run_target_args'_v17443 = v17458 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17462 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17443 = v17462 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17466 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17443 = v17466 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17470 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17443 = v17470 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17474 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17443 = v17474 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17478 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17443 = v17478 
                                                    #endif
#else
                                                    let v17481 : (uint8 []) = v16809 |> System.IO.File.ReadAllBytes
                                                    let v17482 : string = "$0.to_vec()"
                                                    let v17483 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17481 v17482 
                                                    let _run_target_args'_v17443 = v17483 
                                                    #endif
                                                    let v17484 : Vec<uint8> = _run_target_args'_v17443 
                                                    let v17493 : Vec<uint8> = method25(v17484)
                                                    let v17494 : string = "std::string::String::from_utf8($0)"
                                                    let v17495 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v17493 v17494 
                                                    (* run_target_args'
                                                    let v17497 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17498 : string = "$0.unwrap()"
                                                    let v17499 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17495 v17498 
                                                    let _run_target_args'_v17497 = v17499 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17500 : string = "$0.unwrap()"
                                                    let v17501 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17495 v17500 
                                                    let _run_target_args'_v17497 = v17501 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17502 : string = "$0.unwrap()"
                                                    let v17503 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17495 v17502 
                                                    let _run_target_args'_v17497 = v17503 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17504 : std_string_String = match v17495 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17497 = v17504 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17505 : std_string_String = match v17495 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17497 = v17505 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17506 : std_string_String = match v17495 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17497 = v17506 
                                                    #endif
#else
                                                    let v17507 : std_string_String = match v17495 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17497 = v17507 
                                                    #endif
                                                    let v17508 : std_string_String = _run_target_args'_v17497 
                                                    let v17511 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v17512 : string = Fable.Core.RustInterop.emitRustExpr v17508 v17511 
                                                    let _run_target_args'_v17438 = v17512 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17514 : string = null |> unbox<string>
                                                    let _run_target_args'_v17438 = v17514 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17518 : string = null |> unbox<string>
                                                    let _run_target_args'_v17438 = v17518 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17522 : string = null |> unbox<string>
                                                    let _run_target_args'_v17438 = v17522 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17526 : string = null |> unbox<string>
                                                    let _run_target_args'_v17438 = v17526 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17530 : string = null |> unbox<string>
                                                    let _run_target_args'_v17438 = v17530 
                                                    #endif
#else
                                                    let v17533 : string = v16809 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v17438 = v17533 
                                                    #endif
                                                    let v17534 : string = _run_target_args'_v17438 
                                                    let v17545 : string = "// spiral.process_typescript"
                                                    let v17546 : bool = v17534.Contains v17545 
                                                    let v17555 : string =
                                                        if v17546 then
                                                            v17534
                                                        else
                                                            let v17549 : string = $"\"./fable_modules/fable-library-ts.{v15476}/"
                                                            let v17550 : string = $"\"{v15413}/lib/typescript/fable/fable_modules/fable-library-ts.{v15476}/"
                                                            let v17551 : string = v17534.Replace (v17549, v17550)
                                                            let v17552 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v17553 : string = " defaultOf::<()>();"
                                                            method64(v17552, v17553, v17551)
                                                    let v17556 : bool = v17546 = false
                                                    if v17556 then
                                                        let v17557 : string = $"{v17555}\n\n{v17545}\n"
                                                        method74(v16809, v17557)
                                                    let v17558 : string = $"bun --bun run \"{v16809}\""
                                                    let v17559 : string = "PATH"
                                                    let v17560 : string = method3(v17559)
                                                    let v17561 : bool = v17560 = ""
                                                    let v17600 : US5 =
                                                        if v17561 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v17564 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v17565 : string = "cfg!(windows)"
                                                            let v17566 : bool = Fable.Core.RustInterop.emitRustExpr () v17565 
                                                            let _run_target_args'_v17564 = v17566 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v17567 : string = "cfg!(windows)"
                                                            let v17568 : bool = Fable.Core.RustInterop.emitRustExpr () v17567 
                                                            let _run_target_args'_v17564 = v17568 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v17569 : string = "cfg!(windows)"
                                                            let v17570 : bool = Fable.Core.RustInterop.emitRustExpr () v17569 
                                                            let _run_target_args'_v17564 = v17570 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v17571 : US3 = US3_0
                                                            let v17572 : US4 = US4_5(v17571)
                                                            let v17573 : string = $"platform.is_windows / target: {v17572}"
                                                            let v17574 : bool = failwith<bool> v17573
                                                            let _run_target_args'_v17564 = v17574 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v17575 : US3 = US3_0
                                                            let v17576 : US4 = US4_6(v17575)
                                                            let v17577 : string = $"platform.is_windows / target: {v17576}"
                                                            let v17578 : bool = failwith<bool> v17577
                                                            let _run_target_args'_v17564 = v17578 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v17579 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v17580 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v17581 : bool = v17580 v17579
                                                            let _run_target_args'_v17564 = v17581 
                                                            #endif
#else
                                                            let v17582 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v17583 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v17584 : bool = v17583 v17582
                                                            let _run_target_args'_v17564 = v17584 
                                                            #endif
                                                            let v17585 : bool = _run_target_args'_v17564 
                                                            let v17596 : string =
                                                                if v17585 then
                                                                    let v17594 : string = ";"
                                                                    v17594
                                                                else
                                                                    let v17595 : string = ":"
                                                                    v17595
                                                            let v17597 : string = "~/.bun/bin"
                                                            let v17598 : string = $"{v17597}{v17596}{v17560}"
                                                            US5_0(v17598)
                                                    let v17606 : UH4 =
                                                        match v17600 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v17601) -> (* Some *)
                                                            let v17602 : UH4 = UH4_0
                                                            UH4_1(v17559, v17601, v17602)
                                                    let v17607 : string = "TRACE_LEVEL"
                                                    let v17608 : string = "Verbose"
                                                    let v17609 : UH4 = UH4_0
                                                    let v17610 : UH4 = UH4_1(v17607, v17608, v17609)
                                                    let v17611 : UH4 = method272(v17606, v17610)
                                                    let v17612 : struct (string * string) list = []
                                                    let v17613 : struct (string * string) list = method273(v17611, v17612)
                                                    let v17615 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v17616 : (struct (string * string) []) = v17615 v17613
                                                    let v17620 : System.Threading.CancellationToken option = None
                                                    let v17623 : (struct (string * string) []) = [||]
                                                    let v17625 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v17629 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v17633 : string option = None
                                                    let v17647 : Result<string, string> =
                                                        match v15393 with
                                                        | US14_1(v17641) -> (* Error *)
                                                            let v17643 : Result<string, string> = Error v17641 
                                                            v17643
                                                        | US14_0(v17636) -> (* Ok *)
                                                            let v17638 : Result<string, string> = Ok v17636 
                                                            v17638
                                                    (* run_target_args'
                                                    let v17649 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17650 : string = "$0.ok()"
                                                    let v17651 : string option = Fable.Core.RustInterop.emitRustExpr v17647 v17650 
                                                    let _run_target_args'_v17649 = v17651 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17652 : string = "$0.ok()"
                                                    let v17653 : string option = Fable.Core.RustInterop.emitRustExpr v17647 v17652 
                                                    let _run_target_args'_v17649 = v17653 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17654 : string = "$0.ok()"
                                                    let v17655 : string option = Fable.Core.RustInterop.emitRustExpr v17647 v17654 
                                                    let _run_target_args'_v17649 = v17655 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17656 : string option = match v17647 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17649 = v17656 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17657 : string option = match v17647 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17649 = v17657 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17658 : string option = match v17647 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17649 = v17658 
                                                    #endif
#else
                                                    let v17659 : string option = match v17647 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17649 = v17659 
                                                    #endif
                                                    let v17660 : string option = _run_target_args'_v17649 
                                                    let v17663 : bool = true
                                                    let struct (v17664 : int32, v17665 : string) = method99(v17558, v17620, v17616, v17625, v17629, v17663, v17660)
                                                    let v17666 : int32 = v17616.Length
                                                    let v17667 : (string []) = Array.zeroCreate<string> (v17666)
                                                    let v17668 : Mut5 = {l0 = 0} : Mut5
                                                    while method30(v17666, v17668) do
                                                        let v17670 : int32 = v17668.l0
                                                        let struct (v17671 : string, v17672 : string) = v17616.[int v17670]
                                                        let v17673 : string = $"$env:{v17671}=''{v17672}''"
                                                        v17667.[int v17670] <- v17673
                                                        let v17674 : int32 = v17670 + 1
                                                        v17668.l0 <- v17674
                                                        ()
                                                    let v17676 : string seq = v17667 |> Seq.ofArray
                                                    let v17681 : (string -> (string seq -> string)) = String.concat
                                                    let v17682 : string = ";"
                                                    let v17683 : (string seq -> string) = v17681 v17682
                                                    let v17684 : string = v17683 v17676
                                                    let v17687 : string = $"pwsh -c '{v17684}; {v17558}'"
                                                    let v17688 : bool = v17664 = 0
                                                    let struct (v18343 : US5, v18344 : US5, v18345 : US5, v18346 : US5) =
                                                        if v17688 then
                                                            let v17689 : (string -> US5) = closure72()
                                                            let v17690 : (unit -> string) = closure121(v17665)
                                                            let v17691 : (exn -> US5) = closure122(v16809, v17665, v17687)
                                                            let v17693 : US5 = US5_1
                                                            let result = ref v17693
                                                            try
                                                                result.Value <- v17690 () |> v17689 
                                                            with ex ->
                                                                result.Value <- v17691 ex 
                                                            let v17694 : US5 = result.Value
                                                            let v17708 : string option =
                                                                match v17694 with
                                                                | US5_1 -> (* None *)
                                                                    let v17704 : string option = None
                                                                    v17704
                                                                | US5_0(v17698) -> (* Some *)
                                                                    let v17700 : string option = Some v17698 
                                                                    v17700
                                                            let v17709 : string = "$0.unwrap()"
                                                            let v17710 : string = Fable.Core.RustInterop.emitRustExpr v17708 v17709 
                                                            let v17711 : US5 = US5_0(v15338)
                                                            let v17712 : US5 = US5_0(v17555)
                                                            let v17713 : US5 = US5_0(v16809)
                                                            let v17714 : US5 = US5_0(v17710)
                                                            struct (v17711, v17712, v17713, v17714)
                                                        else
                                                            let v18024 : unit = ()
                                                            let v18025 : (unit -> unit) = closure124(v16809, v17665, v17664, v17687)
                                                            let v18026 : unit = (fun () -> v18025 (); v18024) ()
                                                            let v18339 : US5 = US5_0(v15338)
                                                            let v18340 : US5 = US5_1
                                                            let v18341 : US5 = US5_1
                                                            let v18342 : US5 = US5_1
                                                            struct (v18339, v18340, v18341, v18342)
                                                    struct (v18343, v18344, v18345, v18346)
                                            struct (v18347, v18348, v18349, v18350)
                                        else
                                            let v18351 : string = "fable_library_rust::String_::fromString($0)"
                                            let v18352 : string = Fable.Core.RustInterop.emitRustExpr v40 v18351 
                                            let v18353 : bool = v18352 = "python"
                                            let struct (v21526 : US5, v21527 : US5, v21528 : US5, v21529 : US5) =
                                                if v18353 then
                                                    let v18354 : string = method189()
                                                    (* run_target_args'
                                                    let v18359 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18360 : string = "&*$0"
                                                    let v18361 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18354 v18360 
                                                    let _run_target_args'_v18359 = v18361 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18362 : string = "&*$0"
                                                    let v18363 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18354 v18362 
                                                    let _run_target_args'_v18359 = v18363 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18364 : string = "&*$0"
                                                    let v18365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18354 v18364 
                                                    let _run_target_args'_v18359 = v18365 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18367 : Ref<Str> = v18354 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18359 = v18367 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18371 : Ref<Str> = v18354 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18359 = v18371 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18375 : Ref<Str> = v18354 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18359 = v18375 
                                                    #endif
#else
                                                    let v18379 : Ref<Str> = v18354 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18359 = v18379 
                                                    #endif
                                                    let v18382 : Ref<Str> = _run_target_args'_v18359 
                                                    let v18391 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v18392 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v18382) v18391 
                                                    let v18395 : (std_string_String -> US8) = method21()
                                                    let v18396 : US8 option = v18392 |> Option.map v18395 
                                                    let v18416 : US8 = US8_1
                                                    let v18417 : US8 = v18396 |> Option.defaultValue v18416 
                                                    let v18424 : std_string_String =
                                                        match v18417 with
                                                        | US8_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US8_0(v18421) -> (* Some *)
                                                            v18421
                                                    let v18425 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v18426 : string = Fable.Core.RustInterop.emitRustExpr v18424 v18425 
                                                    let v18427 : string = method23()
                                                    (* run_target_args'
                                                    let v18432 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18433 : string = "&*$0"
                                                    let v18434 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18427 v18433 
                                                    let _run_target_args'_v18432 = v18434 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18435 : string = "&*$0"
                                                    let v18436 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18427 v18435 
                                                    let _run_target_args'_v18432 = v18436 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18437 : string = "&*$0"
                                                    let v18438 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18427 v18437 
                                                    let _run_target_args'_v18432 = v18438 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18440 : Ref<Str> = v18427 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18432 = v18440 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18444 : Ref<Str> = v18427 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18432 = v18444 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18448 : Ref<Str> = v18427 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18432 = v18448 
                                                    #endif
#else
                                                    let v18452 : Ref<Str> = v18427 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18432 = v18452 
                                                    #endif
                                                    let v18455 : Ref<Str> = _run_target_args'_v18432 
                                                    let v18464 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v18465 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v18455) v18464 
                                                    let v18468 : (Vec<std_string_String> -> US12) = method24()
                                                    let v18469 : US12 option = v18465 |> Option.map v18468 
                                                    let v18489 : US12 = US12_1
                                                    let v18490 : US12 = v18469 |> Option.defaultValue v18489 
                                                    let v18494 : (std_string_String []) = [||]
                                                    let v18495 : string = "$0.to_vec()"
                                                    let v18496 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v18494 v18495 
                                                    let v18499 : Vec<std_string_String> =
                                                        match v18490 with
                                                        | US12_1 -> (* None *)
                                                            v18496
                                                        | US12_0(v18497) -> (* Some *)
                                                            v18497
                                                    let v18500 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v18505 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v18510 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18511 : string = "std::fs::read(&*$0)"
                                                    let v18512 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v18426 v18511 
                                                    (* run_target_args'
                                                    let v18514 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18515 : string = "$0.unwrap()"
                                                    let v18516 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18512 v18515 
                                                    let _run_target_args'_v18514 = v18516 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18517 : string = "$0.unwrap()"
                                                    let v18518 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18512 v18517 
                                                    let _run_target_args'_v18514 = v18518 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18519 : string = "$0.unwrap()"
                                                    let v18520 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18512 v18519 
                                                    let _run_target_args'_v18514 = v18520 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18521 : Vec<uint8> = match v18512 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18514 = v18521 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18522 : Vec<uint8> = match v18512 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18514 = v18522 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18523 : Vec<uint8> = match v18512 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18514 = v18523 
                                                    #endif
#else
                                                    let v18524 : Vec<uint8> = match v18512 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18514 = v18524 
                                                    #endif
                                                    let v18525 : Vec<uint8> = _run_target_args'_v18514 
                                                    let _run_target_args'_v18510 = v18525 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18529 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18510 = v18529 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18533 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18510 = v18533 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18537 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18510 = v18537 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18541 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18510 = v18541 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18545 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18510 = v18545 
                                                    #endif
#else
                                                    let v18548 : (uint8 []) = v18426 |> System.IO.File.ReadAllBytes
                                                    let v18549 : string = "$0.to_vec()"
                                                    let v18550 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18548 v18549 
                                                    let _run_target_args'_v18510 = v18550 
                                                    #endif
                                                    let v18551 : Vec<uint8> = _run_target_args'_v18510 
                                                    let v18560 : Vec<uint8> = method25(v18551)
                                                    let v18561 : string = "std::string::String::from_utf8($0)"
                                                    let v18562 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v18560 v18561 
                                                    (* run_target_args'
                                                    let v18564 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18565 : string = "$0.unwrap()"
                                                    let v18566 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18562 v18565 
                                                    let _run_target_args'_v18564 = v18566 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18567 : string = "$0.unwrap()"
                                                    let v18568 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18562 v18567 
                                                    let _run_target_args'_v18564 = v18568 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18569 : string = "$0.unwrap()"
                                                    let v18570 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18562 v18569 
                                                    let _run_target_args'_v18564 = v18570 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18571 : std_string_String = match v18562 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18564 = v18571 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18572 : std_string_String = match v18562 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18564 = v18572 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18573 : std_string_String = match v18562 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18564 = v18573 
                                                    #endif
#else
                                                    let v18574 : std_string_String = match v18562 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18564 = v18574 
                                                    #endif
                                                    let v18575 : std_string_String = _run_target_args'_v18564 
                                                    let v18578 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v18579 : string = Fable.Core.RustInterop.emitRustExpr v18575 v18578 
                                                    let _run_target_args'_v18505 = v18579 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18581 : string = null |> unbox<string>
                                                    let _run_target_args'_v18505 = v18581 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18585 : string = null |> unbox<string>
                                                    let _run_target_args'_v18505 = v18585 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18589 : string = null |> unbox<string>
                                                    let _run_target_args'_v18505 = v18589 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18593 : string = null |> unbox<string>
                                                    let _run_target_args'_v18505 = v18593 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18597 : string = null |> unbox<string>
                                                    let _run_target_args'_v18505 = v18597 
                                                    #endif
#else
                                                    let v18600 : string = v18426 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v18505 = v18600 
                                                    #endif
                                                    let v18601 : string = _run_target_args'_v18505 
                                                    let v18612 : string = "py"
                                                    let v18613 : string = $"%A{struct (v18612, v18601)}"
                                                    let v18616 : string = method27(v18613)
                                                    let v18617 : string = method32()
                                                    let v18618 : US5 = method33(v18617)
                                                    let v18624 : US5 =
                                                        match v18618 with
                                                        | US5_1 -> (* None *)
                                                            let v18621 : string = __SOURCE_DIRECTORY__
                                                            method33(v18621)
                                                        | US5_0(v18619) -> (* Some *)
                                                            US5_0(v18619)
                                                    let v18630 : US5 =
                                                        match v18624 with
                                                        | US5_1 -> (* None *)
                                                            let v18627 : string = "/workspaces"
                                                            method33(v18627)
                                                        | US5_0(v18625) -> (* Some *)
                                                            US5_0(v18625)
                                                    let v18634 : string =
                                                        match v18630 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v18631) -> (* Some *)
                                                            v18631
                                                    let v18635 : string = method53(v18634)
                                                    let v18636 : bool = "deps" = v18635
                                                    let v18647 : string =
                                                        if v18636 then
                                                            let v18637 : string option = method39(v18634)
                                                            let v18639 : string = v18637 |> Option.get
                                                            let v18642 : US5 = method33(v18639)
                                                            match v18642 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v18643) -> (* Some *)
                                                                v18643
                                                        else
                                                            v18634
                                                    let v18648 : string = "polyglot"
                                                    let v18649 : string = method34(v18647, v18648)
                                                    let v18650 : string = method32()
                                                    let v18652 : (unit -> string) = v18650.ToLower
                                                    let v18653 : string = v18652 ()
                                                    let v18657 : (unit -> string) = v18649.ToLower
                                                    let v18658 : string = v18657 ()
                                                    let v18662 : bool = v18653.StartsWith (v18658, false, null)
                                                    let v18667 : US14 =
                                                        if v18662 then
                                                            US14_1(v18658)
                                                        else
                                                            US14_0(v18658)
                                                    let v18679 : Result<string, string> =
                                                        match v18667 with
                                                        | US14_1(v18673) -> (* Error *)
                                                            let v18675 : Result<string, string> = Error v18673 
                                                            v18675
                                                        | US14_0(v18668) -> (* Ok *)
                                                            let v18670 : Result<string, string> = Ok v18668 
                                                            v18670
                                                    let v18680 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v18681 : bool = Fable.Core.RustInterop.emitRustExpr v18679 v18680 
                                                    let v18682 : string = "x"
                                                    let v18683 : string = Fable.Core.RustInterop.emitRustExpr () v18682 
                                                    let v18684 : string = "true; $0 })"
                                                    let v18685 : bool = Fable.Core.RustInterop.emitRustExpr v18683 v18684 
                                                    let v18686 : string = "_result_unwrap_or_else"
                                                    let v18687 : string = Fable.Core.RustInterop.emitRustExpr () v18686 
                                                    let v18688 : string = "spiral"
                                                    let v18689 : US42 = US42_2
                                                    let v18690 : US43 = US43_0(v18689)
                                                    let v18691 : US5 = US5_0(v18616)
                                                    let v18692 : string = method209(v18691, v18688, v18690, v18687)
                                                    let v18693 : string = "Fable.Core"
                                                    let v18694 : string = "4.3.0"
                                                    let v18695 : UH4 = UH4_0
                                                    let v18696 : UH4 = UH4_1(v18693, v18694, v18695)
                                                    let v18697 : UH2 = UH2_0
                                                    let v18698 : string = method210(v18601, v18688, v18697, v18696, v18692, v18687)
                                                    let v18699 : string = "lib/python/fable/fable_modules"
                                                    let v18700 : string = method34(v18687, v18699)
                                                    let v18701 : string = $"fable_library"
                                                    let v18702 : string = method34(v18700, v18701)
                                                    let v18703 : string = $"fable_modules/fable_library"
                                                    let v18704 : string = method34(v18692, v18703)
                                                    method218(v18702, v18704)
                                                    let v18705 : US40 = US40_1
                                                    let struct (v18706 : int32, v18707 : string) = method219(v18705, v18692, v18612, v18698, v18667)
                                                    let v18709 : bool = v18706 <> 0 
                                                    let struct (v20890 : US5, v20891 : US5, v20892 : US5, v20893 : US5) =
                                                        if v18709 then
                                                            let v19023 : unit = ()
                                                            let v19024 : (unit -> unit) = closure125(v18707, v18706)
                                                            let v19025 : unit = (fun () -> v19024 (); v19023) ()
                                                            let v19340 : US5 = US5_0(v18612)
                                                            let v19341 : US5 = US5_1
                                                            let v19342 : US5 = US5_1
                                                            let v19343 : US5 = US5_0(v18707)
                                                            struct (v19340, v19341, v19342, v19343)
                                                        else
                                                            let v19344 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v19345 : bool = Fable.Core.RustInterop.emitRustExpr v18499 v19344 
                                                            let v19346 : string = "x"
                                                            let v19347 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v19346 
                                                            let v19348 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19349 : string = Fable.Core.RustInterop.emitRustExpr v19347 v19348 
                                                            let v19352 : string = "="
                                                            let v19353 : bool = v19349.Contains v19352 
                                                            let v19357 : string =
                                                                if v19353 then
                                                                    v19349
                                                                else
                                                                    let v19356 : string = $"\"{v19349}\":\"*\""
                                                                    v19356
                                                            let v19358 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v19359 : bool = Fable.Core.RustInterop.emitRustExpr v19357 v19358 
                                                            let v19360 : string = "_vec_map"
                                                            let v19361 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v19360 
                                                            let v19362 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v19363 : (string []) = Fable.Core.RustInterop.emitRustExpr v19361 v19362 
                                                            let v19368 : unit = ()
                                                            let _let'_v19368 =
                                                                seq {
                                                                    for i = 0 to v19363.Length - 1 do yield v19363.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v19371 : string seq = _let'_v19368 
                                                            let v19379 : (string -> (string seq -> string)) = String.concat
                                                            let v19380 : string = ",\n"
                                                            let v19381 : (string seq -> string) = v19379 v19380
                                                            let v19382 : string = v19381 v19371
                                                            let v19385 : string = $"{{"
                                                            let v19386 : string = $"  \"name\": \"spiral_{v18616}\","
                                                            let v19387 : string = v19385 + v19386 
                                                            let v19388 : string = $"  \"dependencies\": {{"
                                                            let v19389 : string = v19387 + v19388 
                                                            let v19390 : string = v19389 + v19382 
                                                            let v19391 : string = $"  }},"
                                                            let v19392 : string = v19390 + v19391 
                                                            let v19393 : string = $"    \"devDependencies\": {{"
                                                            let v19394 : string = v19392 + v19393 
                                                            let v19395 : string = $"  }},"
                                                            let v19396 : string = v19394 + v19395 
                                                            let v19397 : string = $"}}"
                                                            let v19398 : string = v19396 + v19397 
                                                            let v19399 : string = "package.json"
                                                            let v19400 : string = method34(v18692, v19399)
                                                            let v19401 : string = "../.."
                                                            let v19402 : string = method34(v18692, v19401)
                                                            let v19403 : string = method34(v19402, v19399)
                                                            method74(v19400, v19398)
                                                            let v19404 : string = ""
                                                            method74(v19403, v19404)
                                                            let v19405 : string = $"{v18688}.{v18612}"
                                                            let v19406 : string = method34(v18692, v19405)
                                                            let v19716 : unit = ()
                                                            let v19717 : (unit -> unit) = closure126(v19406)
                                                            let v19718 : unit = (fun () -> v19717 (); v19716) ()
                                                            (* run_target_args'
                                                            let v20035 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v20040 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20041 : string = "std::fs::read(&*$0)"
                                                            let v20042 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v19406 v20041 
                                                            (* run_target_args'
                                                            let v20044 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20045 : string = "$0.unwrap()"
                                                            let v20046 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20042 v20045 
                                                            let _run_target_args'_v20044 = v20046 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20047 : string = "$0.unwrap()"
                                                            let v20048 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20042 v20047 
                                                            let _run_target_args'_v20044 = v20048 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20049 : string = "$0.unwrap()"
                                                            let v20050 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20042 v20049 
                                                            let _run_target_args'_v20044 = v20050 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20051 : Vec<uint8> = match v20042 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20044 = v20051 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20052 : Vec<uint8> = match v20042 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20044 = v20052 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20053 : Vec<uint8> = match v20042 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20044 = v20053 
                                                            #endif
#else
                                                            let v20054 : Vec<uint8> = match v20042 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20044 = v20054 
                                                            #endif
                                                            let v20055 : Vec<uint8> = _run_target_args'_v20044 
                                                            let _run_target_args'_v20040 = v20055 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20059 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20040 = v20059 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20063 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20040 = v20063 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20067 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20040 = v20067 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20071 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20040 = v20071 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20075 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20040 = v20075 
                                                            #endif
#else
                                                            let v20078 : (uint8 []) = v19406 |> System.IO.File.ReadAllBytes
                                                            let v20079 : string = "$0.to_vec()"
                                                            let v20080 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20078 v20079 
                                                            let _run_target_args'_v20040 = v20080 
                                                            #endif
                                                            let v20081 : Vec<uint8> = _run_target_args'_v20040 
                                                            let v20090 : Vec<uint8> = method25(v20081)
                                                            let v20091 : string = "std::string::String::from_utf8($0)"
                                                            let v20092 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v20090 v20091 
                                                            (* run_target_args'
                                                            let v20094 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20095 : string = "$0.unwrap()"
                                                            let v20096 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20092 v20095 
                                                            let _run_target_args'_v20094 = v20096 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20097 : string = "$0.unwrap()"
                                                            let v20098 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20092 v20097 
                                                            let _run_target_args'_v20094 = v20098 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20099 : string = "$0.unwrap()"
                                                            let v20100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20092 v20099 
                                                            let _run_target_args'_v20094 = v20100 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20101 : std_string_String = match v20092 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20094 = v20101 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20102 : std_string_String = match v20092 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20094 = v20102 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20103 : std_string_String = match v20092 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20094 = v20103 
                                                            #endif
#else
                                                            let v20104 : std_string_String = match v20092 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20094 = v20104 
                                                            #endif
                                                            let v20105 : std_string_String = _run_target_args'_v20094 
                                                            let v20108 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v20109 : string = Fable.Core.RustInterop.emitRustExpr v20105 v20108 
                                                            let _run_target_args'_v20035 = v20109 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20111 : string = null |> unbox<string>
                                                            let _run_target_args'_v20035 = v20111 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20115 : string = null |> unbox<string>
                                                            let _run_target_args'_v20035 = v20115 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20119 : string = null |> unbox<string>
                                                            let _run_target_args'_v20035 = v20119 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20123 : string = null |> unbox<string>
                                                            let _run_target_args'_v20035 = v20123 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20127 : string = null |> unbox<string>
                                                            let _run_target_args'_v20035 = v20127 
                                                            #endif
#else
                                                            let v20130 : string = v19406 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v20035 = v20130 
                                                            #endif
                                                            let v20131 : string = _run_target_args'_v20035 
                                                            let v20142 : string = "# spiral.process_python"
                                                            let v20143 : bool = v20131.Contains v20142 
                                                            let v20155 : string =
                                                                if v20143 then
                                                                    v20131
                                                                else
                                                                    let v20146 : string = "\";\".into()"
                                                                    let v20147 : string = Fable.Core.RustInterop.emitRustExpr () v20146 
                                                                    let v20148 : string = "),)"
                                                                    let v20149 : string = v20148 + v20147 
                                                                    let v20150 : string = "));"
                                                                    let v20151 : string = v20131.Replace (v20149, v20150)
                                                                    let v20152 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v20153 : string = " defaultOf::<()>();"
                                                                    method64(v20152, v20153, v20151)
                                                            let v20156 : bool = v20143 = false
                                                            if v20156 then
                                                                let v20157 : string = $"{v20155}\n\n{v20142}\n"
                                                                method74(v19406, v20157)
                                                            let v20158 : string = $"python \"{v19406}\""
                                                            let v20159 : string = "TRACE_LEVEL"
                                                            let v20160 : string = "Verbose"
                                                            let v20161 : (struct (string * string) []) = [|struct (v20159, v20160)|]
                                                            let v20163 : System.Threading.CancellationToken option = None
                                                            let v20166 : (struct (string * string) []) = [||]
                                                            let v20168 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v20172 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v20176 : string option = None
                                                            let v20190 : Result<string, string> =
                                                                match v18667 with
                                                                | US14_1(v20184) -> (* Error *)
                                                                    let v20186 : Result<string, string> = Error v20184 
                                                                    v20186
                                                                | US14_0(v20179) -> (* Ok *)
                                                                    let v20181 : Result<string, string> = Ok v20179 
                                                                    v20181
                                                            (* run_target_args'
                                                            let v20192 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20193 : string = "$0.ok()"
                                                            let v20194 : string option = Fable.Core.RustInterop.emitRustExpr v20190 v20193 
                                                            let _run_target_args'_v20192 = v20194 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20195 : string = "$0.ok()"
                                                            let v20196 : string option = Fable.Core.RustInterop.emitRustExpr v20190 v20195 
                                                            let _run_target_args'_v20192 = v20196 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20197 : string = "$0.ok()"
                                                            let v20198 : string option = Fable.Core.RustInterop.emitRustExpr v20190 v20197 
                                                            let _run_target_args'_v20192 = v20198 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20199 : string option = match v20190 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20192 = v20199 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20200 : string option = match v20190 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20192 = v20200 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20201 : string option = match v20190 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20192 = v20201 
                                                            #endif
#else
                                                            let v20202 : string option = match v20190 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20192 = v20202 
                                                            #endif
                                                            let v20203 : string option = _run_target_args'_v20192 
                                                            let v20206 : bool = true
                                                            let struct (v20207 : int32, v20208 : string) = method99(v20158, v20163, v20161, v20168, v20172, v20206, v20203)
                                                            let v20209 : int32 = v20161.Length
                                                            let v20210 : (string []) = Array.zeroCreate<string> (v20209)
                                                            let v20211 : Mut5 = {l0 = 0} : Mut5
                                                            while method30(v20209, v20211) do
                                                                let v20213 : int32 = v20211.l0
                                                                let struct (v20214 : string, v20215 : string) = v20161.[int v20213]
                                                                let v20216 : string = $"$env:{v20214}=''{v20215}''"
                                                                v20210.[int v20213] <- v20216
                                                                let v20217 : int32 = v20213 + 1
                                                                v20211.l0 <- v20217
                                                                ()
                                                            let v20219 : string seq = v20210 |> Seq.ofArray
                                                            let v20224 : (string -> (string seq -> string)) = String.concat
                                                            let v20225 : string = ";"
                                                            let v20226 : (string seq -> string) = v20224 v20225
                                                            let v20227 : string = v20226 v20219
                                                            let v20230 : string = $"pwsh -c '{v20227}; {v20158}'"
                                                            let v20231 : bool = v20207 = 0
                                                            let struct (v20886 : US5, v20887 : US5, v20888 : US5, v20889 : US5) =
                                                                if v20231 then
                                                                    let v20232 : (string -> US5) = closure72()
                                                                    let v20233 : (unit -> string) = closure127(v20208)
                                                                    let v20234 : (exn -> US5) = closure128(v19406, v20208, v20230)
                                                                    let v20236 : US5 = US5_1
                                                                    let result = ref v20236
                                                                    try
                                                                        result.Value <- v20233 () |> v20232 
                                                                    with ex ->
                                                                        result.Value <- v20234 ex 
                                                                    let v20237 : US5 = result.Value
                                                                    let v20251 : string option =
                                                                        match v20237 with
                                                                        | US5_1 -> (* None *)
                                                                            let v20247 : string option = None
                                                                            v20247
                                                                        | US5_0(v20241) -> (* Some *)
                                                                            let v20243 : string option = Some v20241 
                                                                            v20243
                                                                    let v20252 : string = "$0.unwrap()"
                                                                    let v20253 : string = Fable.Core.RustInterop.emitRustExpr v20251 v20252 
                                                                    let v20254 : US5 = US5_0(v18612)
                                                                    let v20255 : US5 = US5_0(v20155)
                                                                    let v20256 : US5 = US5_0(v19406)
                                                                    let v20257 : US5 = US5_0(v20253)
                                                                    struct (v20254, v20255, v20256, v20257)
                                                                else
                                                                    let v20567 : unit = ()
                                                                    let v20568 : (unit -> unit) = closure130(v19406, v20208, v20207, v20230)
                                                                    let v20569 : unit = (fun () -> v20568 (); v20567) ()
                                                                    let v20882 : US5 = US5_0(v18612)
                                                                    let v20883 : US5 = US5_1
                                                                    let v20884 : US5 = US5_1
                                                                    let v20885 : US5 = US5_1
                                                                    struct (v20882, v20883, v20884, v20885)
                                                            struct (v20886, v20887, v20888, v20889)
                                                    struct (v20890, v20891, v20892, v20893)
                                                else
                                                    let v21205 : unit = ()
                                                    let v21206 : (unit -> unit) = closure131(v41, v40)
                                                    let v21207 : unit = (fun () -> v21206 (); v21205) ()
                                                    let v21522 : US5 = US5_1
                                                    let v21523 : US5 = US5_1
                                                    let v21524 : US5 = US5_1
                                                    let v21525 : US5 = US5_1
                                                    struct (v21522, v21523, v21524, v21525)
                                            struct (v21526, v21527, v21528, v21529)
                                    struct (v21530, v21531, v21532, v21533)
                            let v21541 : string =
                                match v21534 with
                                | US5_1 -> (* None *)
                                    let v21539 : string = ""
                                    v21539
                                | US5_0(v21538) -> (* Some *)
                                    v21538
                            let v21542 : string = "extension"
                            let v21546 : string =
                                match v21535 with
                                | US5_1 -> (* None *)
                                    let v21544 : string = ""
                                    v21544
                                | US5_0(v21543) -> (* Some *)
                                    v21543
                            let v21547 : string = "code"
                            let v21551 : string =
                                match v21536 with
                                | US5_1 -> (* None *)
                                    let v21549 : string = ""
                                    v21549
                                | US5_0(v21548) -> (* Some *)
                                    v21548
                            let v21552 : string = "code_path"
                            let v21556 : string =
                                match v21537 with
                                | US5_1 -> (* None *)
                                    let v21554 : string = ""
                                    v21554
                                | US5_0(v21553) -> (* Some *)
                                    v21553
                            let v21557 : string = "output"
                            [|struct (v21542, v21541); struct (v21547, v21546); struct (v21552, v21551); struct (v21557, v21556)|]
        | _ ->
            let v21563 : string = "extension"
            let v21564 : string = ""
            let v21565 : string = "code"
            let v21566 : string = "code_path"
            let v21567 : string = "output"
            [|struct (v21563, v21564); struct (v21565, v21564); struct (v21566, v21564); struct (v21567, v21564)|]
    let v21570 : string = "$0.to_vec()"
    let v21571 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v21569 v21570 
    let v21572 : unit = ()
    let v21573 : string = $"true; let _func1_from_v21572 = Func1::from(move |value| {{ //"
    let v21574 : bool = Fable.Core.RustInterop.emitRustExpr () v21573 
    let v21575 : string = $"value"
    let struct (v21576 : string, v21577 : string) = Fable.Core.RustInterop.emitRustExpr () v21575 
    (* run_target_args'
    let v21582 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21583 : string = "&*$0"
    let v21584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21576 v21583 
    let _run_target_args'_v21582 = v21584 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21585 : string = "&*$0"
    let v21586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21576 v21585 
    let _run_target_args'_v21582 = v21586 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21587 : string = "&*$0"
    let v21588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21576 v21587 
    let _run_target_args'_v21582 = v21588 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21590 : Ref<Str> = v21576 |> unbox<Ref<Str>>
    let _run_target_args'_v21582 = v21590 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21594 : Ref<Str> = v21576 |> unbox<Ref<Str>>
    let _run_target_args'_v21582 = v21594 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21598 : Ref<Str> = v21576 |> unbox<Ref<Str>>
    let _run_target_args'_v21582 = v21598 
    #endif
#else
    let v21602 : Ref<Str> = v21576 |> unbox<Ref<Str>>
    let _run_target_args'_v21582 = v21602 
    #endif
    let v21605 : Ref<Str> = _run_target_args'_v21582 
    (* run_target_args'
    let v21618 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21619 : string = "String::from($0)"
    let v21620 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21605 v21619 
    let _run_target_args'_v21618 = v21620 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21621 : string = "String::from($0)"
    let v21622 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21605 v21621 
    let _run_target_args'_v21618 = v21622 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21623 : string = "String::from($0)"
    let v21624 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21605 v21623 
    let _run_target_args'_v21618 = v21624 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21626 : std_string_String = v21605 |> unbox<std_string_String>
    let _run_target_args'_v21618 = v21626 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21630 : std_string_String = v21605 |> unbox<std_string_String>
    let _run_target_args'_v21618 = v21630 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21634 : std_string_String = v21605 |> unbox<std_string_String>
    let _run_target_args'_v21618 = v21634 
    #endif
#else
    let v21638 : std_string_String = v21605 |> unbox<std_string_String>
    let _run_target_args'_v21618 = v21638 
    #endif
    let v21641 : std_string_String = _run_target_args'_v21618 
    (* run_target_args'
    let v21654 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21655 : string = "&*$0"
    let v21656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21577 v21655 
    let _run_target_args'_v21654 = v21656 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21657 : string = "&*$0"
    let v21658 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21577 v21657 
    let _run_target_args'_v21654 = v21658 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21659 : string = "&*$0"
    let v21660 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21577 v21659 
    let _run_target_args'_v21654 = v21660 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21662 : Ref<Str> = v21577 |> unbox<Ref<Str>>
    let _run_target_args'_v21654 = v21662 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21666 : Ref<Str> = v21577 |> unbox<Ref<Str>>
    let _run_target_args'_v21654 = v21666 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21670 : Ref<Str> = v21577 |> unbox<Ref<Str>>
    let _run_target_args'_v21654 = v21670 
    #endif
#else
    let v21674 : Ref<Str> = v21577 |> unbox<Ref<Str>>
    let _run_target_args'_v21654 = v21674 
    #endif
    let v21677 : Ref<Str> = _run_target_args'_v21654 
    (* run_target_args'
    let v21690 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21691 : string = "String::from($0)"
    let v21692 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21677 v21691 
    let _run_target_args'_v21690 = v21692 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21693 : string = "String::from($0)"
    let v21694 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21677 v21693 
    let _run_target_args'_v21690 = v21694 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21695 : string = "String::from($0)"
    let v21696 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21677 v21695 
    let _run_target_args'_v21690 = v21696 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21698 : std_string_String = v21677 |> unbox<std_string_String>
    let _run_target_args'_v21690 = v21698 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21702 : std_string_String = v21677 |> unbox<std_string_String>
    let _run_target_args'_v21690 = v21702 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21706 : std_string_String = v21677 |> unbox<std_string_String>
    let _run_target_args'_v21690 = v21706 
    #endif
#else
    let v21710 : std_string_String = v21677 |> unbox<std_string_String>
    let _run_target_args'_v21690 = v21710 
    #endif
    let v21713 : std_string_String = _run_target_args'_v21690 
    let v21723 : (std_string_String * std_string_String) = v21641, v21713 
    let func1_from_result = v21723 //
    let v21726 : _ = func1_from_result
    let v21727 : string = $"true; $0 /*"
    let v21728 : bool = Fable.Core.RustInterop.emitRustExpr v21726 v21727 
    let v21729 : string = $"*/ }}); //"
    let v21730 : bool = Fable.Core.RustInterop.emitRustExpr () v21729 
    let v21731 : string = $"_func1_from_v21572"
    let v21732 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v21731 
    let v21733 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v21734 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v21732)
    let v21735 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v21571, v21734) v21733 
    let v21736 : string = "std::collections::BTreeMap::from_iter(v21735.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v21737 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v21736 
    let v21738 : string = "serde_json::to_string(&v21737)"
    let v21739 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v21738 
    let v21740 : (serde_json_Error -> string) = method283()
    (* run_target_args'
    let v21742 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21743 : string = "$0.map_err(|x| $1(x))"
    let v21744 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21739, v21740) v21743 
    let _run_target_args'_v21742 = v21744 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21745 : string = "$0.map_err(|x| $1(x))"
    let v21746 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21739, v21740) v21745 
    let _run_target_args'_v21742 = v21746 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21747 : string = "$0.map_err(|x| $1(x))"
    let v21748 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21739, v21740) v21747 
    let _run_target_args'_v21742 = v21748 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21749 : Result<std_string_String, string> = match v21739 with Ok x -> Ok x | Error x -> Error (v21740 x)
    let _run_target_args'_v21742 = v21749 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21750 : Result<std_string_String, string> = match v21739 with Ok x -> Ok x | Error x -> Error (v21740 x)
    let _run_target_args'_v21742 = v21750 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21751 : Result<std_string_String, string> = match v21739 with Ok x -> Ok x | Error x -> Error (v21740 x)
    let _run_target_args'_v21742 = v21751 
    #endif
#else
    let v21752 : Result<std_string_String, string> = match v21739 with Ok x -> Ok x | Error x -> Error (v21740 x)
    let _run_target_args'_v21742 = v21752 
    #endif
    let v21753 : Result<std_string_String, string> = _run_target_args'_v21742 
    let v21756 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v21757 : bool = Fable.Core.RustInterop.emitRustExpr v21753 v21756 
    let v21758 : string = "x"
    let v21759 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21758 
    let v21760 : string = "fable_library_rust::String_::fromString($0)"
    let v21761 : string = Fable.Core.RustInterop.emitRustExpr v21759 v21760 
    let v21762 : string = "true; $0 })"
    let v21763 : bool = Fable.Core.RustInterop.emitRustExpr v21761 v21762 
    let v21764 : string = "_result_map_"
    let v21765 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v21764 
    let v21766 : string = ""
    let v21767 : string = "}"
    let v21768 : string = v21766 + v21767 
    let x = v21765 //
    let v21769 : _ = x
    let v21770 : unit = ()
    (* run_target_args'
    let v21771 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21772 : string = $"true; let _fix_closure_v21770 = $0"
    let v21773 : bool = Fable.Core.RustInterop.emitRustExpr v21769 v21772 
    let _run_target_args'_v21771 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21774 : string = $"true; let _fix_closure_v21770 = $0"
    let v21775 : bool = Fable.Core.RustInterop.emitRustExpr v21769 v21774 
    let _run_target_args'_v21771 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21776 : string = $"true; let _fix_closure_v21770 = $0"
    let v21777 : bool = Fable.Core.RustInterop.emitRustExpr v21769 v21776 
    let _run_target_args'_v21771 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v21771 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v21771 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v21771 = false 
    #endif
#else
    let _run_target_args'_v21771 = false 
    #endif
    let v21778 : bool = _run_target_args'_v21771 
    let v21779 : string = $"true; _fix_closure_v21770 " + v21768 + "); " + v21766 + " // rust.fix_closure'"
    let v21780 : bool = Fable.Core.RustInterop.emitRustExpr () v21779 
    let v21781 : string = "__future_init"
    let v21782 : _ = Fable.Core.RustInterop.emitRustExpr () v21781 
    let v21783 : string = "v21782"
    let v21784 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v21783 
    v21784
and closure1 () (v0 : (string [])) : int32 =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v366 : unit = ()
    let v367 : (unit -> unit) = closure5(v0)
    let v368 : unit = (fun () -> v367 (); v366) ()
    let v680 : clap_Command = method0()
    let v681 : string = "clap::Command::get_matches($0)"
    let v682 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v680 v681 
    let v683 : US0 = v44.l0
    let v684 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v683, v682)
    let v685 : string = "futures::executor::block_on($0)"
    let v686 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v684 v685 
    (* run_target_args'
    let v688 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v689 : string = "$0.unwrap()"
    let v690 : string = Fable.Core.RustInterop.emitRustExpr v686 v689 
    let _run_target_args'_v688 = v690 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v691 : string = "$0.unwrap()"
    let v692 : string = Fable.Core.RustInterop.emitRustExpr v686 v691 
    let _run_target_args'_v688 = v692 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v693 : string = "$0.unwrap()"
    let v694 : string = Fable.Core.RustInterop.emitRustExpr v686 v693 
    let _run_target_args'_v688 = v694 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v695 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v695 
    #endif
#if FABLE_COMPILER_PYTHON
    let v696 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v696 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v697 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v697 
    #endif
#else
    let v698 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v698 
    #endif
    let v699 : string = _run_target_args'_v688 
    let v702 : US0 = v44.l0
    let v703 : bool =
        match v702 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v703 then
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v699)
        let v707 : unit = (fun () -> v706 (); v705) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
