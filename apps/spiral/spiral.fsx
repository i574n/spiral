#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
type IOsEnviron = abstract environ: x: unit -> obj
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
    | US4_6 of f6_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US12 =
    | US12_0
    | US12_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : string
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_path_PathBuf
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US16 =
    | US16_0
    | US16_1 of f1_0 : std_string_String
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : US5
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US18_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) * UH1
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : char
    | US20_1
and [<Struct>] US21 =
    | US21_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : US20 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : (string [])
    | US25_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US26 =
    | US26_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US26_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH3
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US27_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_string_String
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_process_Output
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : int32
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : System.Threading.CancellationToken
    | US35_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : string
    | US40_1 of f1_0 : string
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US41 =
    | US41_0
    | US41_1
    | US41_2
and [<Struct>] US42 =
    | US42_0 of f0_0 : US41
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US43_1
and [<Struct>] US44 =
    | US44_0 of f0_0 : int32 * f0_1 : string
    | US44_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_collections_HashMap<string, string>
    | US45_1
and [<Struct>] US46 =
    | US46_0 of f0_0 : US5
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US47 =
    | US47_0
    | US47_1 of f1_0 : string
and [<Struct>] US48 =
    | US48_0 of f0_0 : std_fs_FileType
    | US48_1 of f1_0 : std_string_String
and [<Struct>] US49 =
    | US49_0
    | US49_1
    | US49_2
and [<Struct>] US50 =
    | US50_0 of f0_0 : async_walkdir_DirEntry
    | US50_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : string * f0_1 : string
    | US51_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v84 : (string list -> (string [])) = List.toArray
    let v85 : (string []) = v84 v80
    let v88 : string = "$0.to_vec()"
    let v89 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v85 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    (* run_target_args'
    let v134 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v135 
    let _run_target_args'_v134 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : string = "String::from($0)"
    let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v137 
    let _run_target_args'_v134 = v138 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v139 : string = "String::from($0)"
    let v140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v139 
    let _run_target_args'_v134 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v142 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v150 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v150 
    #endif
#else
    let v154 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v134 = v154 
    #endif
    let v157 : std_string_String = _run_target_args'_v134 
    let v166 : string = "Box::new($0)"
    let v167 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v157 v166 
    let v168 : string = "Box::leak($0)"
    let v169 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v167 v168 
    let v170 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v171 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let v172 : string = "true; $0 }).collect::<Vec<_>>()"
    let v173 : bool = Fable.Core.RustInterop.emitRustExpr v171 v172 
    let v174 : string = "_vec_map"
    let v175 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v177 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : string = "$0.value_parser($1)"
    let v179 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v177) v178 
    let v180 : string = "clap::Command::arg($0, $1)"
    let v181 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v179) v180 
    let v182 : string = "NAME"
    let v183 : string = "r#\"" + v182 + "\"#"
    let v184 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v183 
    let v185 : string = "VERSION"
    let v186 : string = "r#\"" + v185 + "\"#"
    let v187 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v184; v187|]
    let v190 : unativeint = 1 |> unativeint 
    let v194 : unativeint = 0 |> unativeint 
    let v198 : unativeint = 0 |> unativeint 
    let v202 : bool = v194 = v198 
    let v210 : clap_builder_ValueRange =
        if v202 then
            let v205 : string = "clap::builder::ValueRange::new($0..)"
            let v206 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v190 v205 
            v206
        else
            let v207 : string = ""
            let v208 : string = "clap::builder::ValueRange::new($0.." + v207 + "$1)"
            let v209 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v190, v194) v208 
            v209
    let v211 : string = "deps"
    let v212 : string = "r#\"" + v211 + "\"#"
    let v213 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v212 
    let v214 : string = "clap::Arg::new($0)"
    let v215 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v213 v214 
    let v216 : string = "$0.short($1)"
    let v217 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v215, 'd') v216 
    let v218 : string = "r#\"" + v211 + "\"#"
    let v219 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v218 
    let v220 : string = "$0.long($1)"
    let v221 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v217, v219) v220 
    let v222 : string = "$0.to_vec()"
    let v223 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v188 v222 
    let v224 : string = "$0.value_names($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v221, v223) v224 
    let v226 : string = "$0.num_args($1)"
    let v227 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v225, v210) v226 
    let v228 : string = "clap::ArgAction::Append"
    let v229 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "$0.action($1)"
    let v231 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v227, v229) v230 
    let v232 : string = "clap::Command::arg($0, $1)"
    let v233 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v181, v231) v232 
    let v234 : string = "clap::Command::subcommand($0, v233)"
    let v235 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v234 
    let v236 : string = "cuda"
    let v237 : string = "r#\"" + v236 + "\"#"
    let v238 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "clap::Command::new($0)"
    let v240 : clap_Command = Fable.Core.RustInterop.emitRustExpr v238 v239 
    let v241 : string = "py-path"
    let v242 : string = "r#\"" + v241 + "\"#"
    let v243 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v242 
    let v244 : string = "clap::Arg::new($0)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v243 v244 
    let v246 : string = "$0.short($1)"
    let v247 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, 'p') v246 
    let v248 : string = "r#\"" + v241 + "\"#"
    let v249 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v248 
    let v250 : string = "$0.long($1)"
    let v251 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v247, v249) v250 
    let v252 : string = "$0.required($1)"
    let v253 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v251, true) v252 
    let v254 : string = "clap::Command::arg($0, $1)"
    let v255 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v240, v253) v254 
    let v256 : string = "env"
    let v257 : string = "r#\"" + v256 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "clap::Arg::new($0)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "$0.short($1)"
    let v262 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, 'e') v261 
    let v263 : string = "r#\"" + v256 + "\"#"
    let v264 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "$0.long($1)"
    let v266 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v262, v264) v265 
    
    
    let v269 : string = "Poetry"
    let v270 : (unit -> string) = v269.ToLower
    let v271 : string = v270 ()
    let v276 : string = "Pip"
    let v277 : (unit -> string) = v276.ToLower
    let v278 : string = v277 ()
    let v281 : string list = []
    let v283 : string list = v271 :: v281 
    let v287 : string list = v278 :: v283 
    let v291 : (string list -> (string [])) = List.toArray
    let v292 : (string []) = v291 v287
    let v295 : string = "$0.to_vec()"
    let v296 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v292 v295 
    let v297 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
    let v299 : string = "x"
    let v300 : string = Fable.Core.RustInterop.emitRustExpr () v299 
    (* run_target_args'
    let v305 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v306 : string = "&*$0"
    let v307 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v300 v306 
    let _run_target_args'_v305 = v307 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v308 : string = "&*$0"
    let v309 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v300 v308 
    let _run_target_args'_v305 = v309 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v310 : string = "&*$0"
    let v311 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v300 v310 
    let _run_target_args'_v305 = v311 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v313 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v313 
    #endif
#if FABLE_COMPILER_PYTHON
    let v317 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v317 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v321 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v321 
    #endif
#else
    let v325 : Ref<Str> = v300 |> unbox<Ref<Str>>
    let _run_target_args'_v305 = v325 
    #endif
    let v328 : Ref<Str> = _run_target_args'_v305 
    (* run_target_args'
    let v341 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v342 : string = "String::from($0)"
    let v343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v328 v342 
    let _run_target_args'_v341 = v343 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v344 : string = "String::from($0)"
    let v345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v328 v344 
    let _run_target_args'_v341 = v345 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v346 : string = "String::from($0)"
    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v328 v346 
    let _run_target_args'_v341 = v347 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v349 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v349 
    #endif
#if FABLE_COMPILER_PYTHON
    let v353 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v353 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v357 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v357 
    #endif
#else
    let v361 : std_string_String = v328 |> unbox<std_string_String>
    let _run_target_args'_v341 = v361 
    #endif
    let v364 : std_string_String = _run_target_args'_v341 
    let v373 : string = "Box::new($0)"
    let v374 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v364 v373 
    let v375 : string = "Box::leak($0)"
    let v376 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v374 v375 
    let v377 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v378 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v376 v377 
    let v379 : string = "true; $0 }).collect::<Vec<_>>()"
    let v380 : bool = Fable.Core.RustInterop.emitRustExpr v378 v379 
    let v381 : string = "_vec_map"
    let v382 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v381 
    let v383 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v384 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v382 v383 
    let v385 : string = "$0.value_parser($1)"
    let v386 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v266, v384) v385 
    let v387 : string = "clap::Command::arg($0, $1)"
    let v388 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v255, v386) v387 
    let v389 : string = "r#\"" + v182 + "\"#"
    let v390 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v389 
    let v391 : string = "r#\"" + v185 + "\"#"
    let v392 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v391 
    let v393 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v390; v392|]
    let v395 : unativeint = 1 |> unativeint 
    let v399 : unativeint = 0 |> unativeint 
    let v403 : unativeint = 0 |> unativeint 
    let v407 : bool = v399 = v403 
    let v415 : clap_builder_ValueRange =
        if v407 then
            let v410 : string = "clap::builder::ValueRange::new($0..)"
            let v411 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v395 v410 
            v411
        else
            let v412 : string = ""
            let v413 : string = "clap::builder::ValueRange::new($0.." + v412 + "$1)"
            let v414 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v395, v399) v413 
            v414
    let v416 : string = "r#\"" + v211 + "\"#"
    let v417 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v416 
    let v418 : string = "clap::Arg::new($0)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v417 v418 
    let v420 : string = "$0.short($1)"
    let v421 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, 'd') v420 
    let v422 : string = "r#\"" + v211 + "\"#"
    let v423 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "$0.long($1)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v421, v423) v424 
    let v426 : string = "$0.to_vec()"
    let v427 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v393 v426 
    let v428 : string = "$0.value_names($1)"
    let v429 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, v427) v428 
    let v430 : string = "$0.num_args($1)"
    let v431 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v429, v415) v430 
    let v432 : string = "clap::ArgAction::Append"
    let v433 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v432 
    let v434 : string = "$0.action($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v431, v433) v434 
    let v436 : string = "clap::Command::arg($0, $1)"
    let v437 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v388, v435) v436 
    let v438 : string = "clap::Command::subcommand($0, v437)"
    let v439 : clap_Command = Fable.Core.RustInterop.emitRustExpr v235 v438 
    let v440 : string = "fable"
    let v441 : string = "r#\"" + v440 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "clap::Command::new($0)"
    let v444 : clap_Command = Fable.Core.RustInterop.emitRustExpr v442 v443 
    let v445 : string = "fs-path"
    let v446 : string = "r#\"" + v445 + "\"#"
    let v447 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v446 
    let v448 : string = "clap::Arg::new($0)"
    let v449 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v447 v448 
    let v450 : string = "$0.short($1)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v449, 'f') v450 
    let v452 : string = "r#\"" + v445 + "\"#"
    let v453 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v452 
    let v454 : string = "$0.long($1)"
    let v455 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, v453) v454 
    let v456 : string = "$0.required($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v455, true) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v444, v457) v458 
    let v460 : string = "r#\"" + v0 + "\"#"
    let v461 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v460 
    let v462 : string = "clap::Arg::new($0)"
    let v463 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let v464 : string = "$0.short($1)"
    let v465 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v463, 'c') v464 
    let v466 : string = "r#\"" + v0 + "\"#"
    let v467 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v466 
    let v468 : string = "$0.long($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v465, v467) v468 
    let v470 : string = "clap::Command::arg($0, $1)"
    let v471 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v459, v469) v470 
    let v472 : string = "clap::Command::subcommand($0, v471)"
    let v473 : clap_Command = Fable.Core.RustInterop.emitRustExpr v439 v472 
    let v474 : string = "rust"
    let v475 : string = "r#\"" + v474 + "\"#"
    let v476 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v475 
    let v477 : string = "clap::Command::new($0)"
    let v478 : clap_Command = Fable.Core.RustInterop.emitRustExpr v476 v477 
    let v479 : string = "r#\"" + v445 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : string = "clap::Arg::new($0)"
    let v482 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v480 v481 
    let v483 : string = "$0.short($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v482, 'f') v483 
    let v485 : string = "r#\"" + v445 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "$0.long($1)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v484, v486) v487 
    let v489 : string = "$0.required($1)"
    let v490 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v488, true) v489 
    let v491 : string = "clap::Command::arg($0, $1)"
    let v492 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v478, v490) v491 
    let v493 : string = "r#\"" + v182 + "\"#"
    let v494 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v493 
    let v495 : string = "r#\"" + v185 + "\"#"
    let v496 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v495 
    let v497 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v494; v496|]
    let v499 : unativeint = 1 |> unativeint 
    let v503 : unativeint = 0 |> unativeint 
    let v507 : unativeint = 0 |> unativeint 
    let v511 : bool = v503 = v507 
    let v519 : clap_builder_ValueRange =
        if v511 then
            let v514 : string = "clap::builder::ValueRange::new($0..)"
            let v515 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v499 v514 
            v515
        else
            let v516 : string = ""
            let v517 : string = "clap::builder::ValueRange::new($0.." + v516 + "$1)"
            let v518 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v499, v503) v517 
            v518
    let v520 : string = "r#\"" + v211 + "\"#"
    let v521 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v520 
    let v522 : string = "clap::Arg::new($0)"
    let v523 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v521 v522 
    let v524 : string = "$0.short($1)"
    let v525 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v523, 'd') v524 
    let v526 : string = "r#\"" + v211 + "\"#"
    let v527 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v526 
    let v528 : string = "$0.long($1)"
    let v529 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v525, v527) v528 
    let v530 : string = "$0.to_vec()"
    let v531 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v497 v530 
    let v532 : string = "$0.value_names($1)"
    let v533 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v529, v531) v532 
    let v534 : string = "$0.num_args($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v533, v519) v534 
    let v536 : string = "clap::ArgAction::Append"
    let v537 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v536 
    let v538 : string = "$0.action($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "clap::Command::arg($0, $1)"
    let v541 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v492, v539) v540 
    let v543 : unativeint = 0 |> unativeint 
    let v547 : unativeint = 1 |> unativeint 
    let v551 : unativeint = 0 |> unativeint 
    let v555 : bool = v547 = v551 
    let v563 : clap_builder_ValueRange =
        if v555 then
            let v558 : string = "clap::builder::ValueRange::new($0..)"
            let v559 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v543 v558 
            v559
        else
            let v560 : string = "="
            let v561 : string = "clap::builder::ValueRange::new($0.." + v560 + "$1)"
            let v562 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v543, v547) v561 
            v562
    let v564 : string = "wasm"
    let v565 : string = "r#\"" + v564 + "\"#"
    let v566 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v565 
    let v567 : string = "clap::Arg::new($0)"
    let v568 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v566 v567 
    let v569 : string = "$0.short($1)"
    let v570 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v568, 'w') v569 
    let v571 : string = "r#\"" + v564 + "\"#"
    let v572 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v571 
    let v573 : string = "$0.long($1)"
    let v574 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v570, v572) v573 
    let v575 : string = "$0.num_args($1)"
    let v576 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v574, v563) v575 
    let v577 : string = "$0.require_equals($1)"
    let v578 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v576, true) v577 
    let v579 : string = ""
    let v580 : string = "r#\"" + v579 + "\"#"
    let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
    let v582 : string = "$0.default_missing_value($1)"
    let v583 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v578, v581) v582 
    let v584 : string = "clap::Command::arg($0, $1)"
    let v585 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v541, v583) v584 
    let v587 : unativeint = 0 |> unativeint 
    let v591 : unativeint = 1 |> unativeint 
    let v595 : unativeint = 0 |> unativeint 
    let v599 : bool = v591 = v595 
    let v607 : clap_builder_ValueRange =
        if v599 then
            let v602 : string = "clap::builder::ValueRange::new($0..)"
            let v603 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v587 v602 
            v603
        else
            let v604 : string = "="
            let v605 : string = "clap::builder::ValueRange::new($0.." + v604 + "$1)"
            let v606 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v587, v591) v605 
            v606
    let v608 : string = "contract"
    let v609 : string = "r#\"" + v608 + "\"#"
    let v610 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v609 
    let v611 : string = "clap::Arg::new($0)"
    let v612 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v610 v611 
    let v613 : string = "$0.short($1)"
    let v614 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v612, 'c') v613 
    let v615 : string = "r#\"" + v608 + "\"#"
    let v616 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v615 
    let v617 : string = "$0.long($1)"
    let v618 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v614, v616) v617 
    let v619 : string = "$0.num_args($1)"
    let v620 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v618, v607) v619 
    let v621 : string = "$0.require_equals($1)"
    let v622 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v620, true) v621 
    let v623 : string = "r#\"" + v579 + "\"#"
    let v624 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v623 
    let v625 : string = "$0.default_missing_value($1)"
    let v626 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v622, v624) v625 
    let v627 : string = "clap::Command::arg($0, $1)"
    let v628 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v585, v626) v627 
    let v629 : string = "cleanup"
    let v630 : string = "r#\"" + v629 + "\"#"
    let v631 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v630 
    let v632 : string = "clap::Arg::new($0)"
    let v633 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v631 v632 
    let v634 : string = "$0.short($1)"
    let v635 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v633, 'l') v634 
    let v636 : string = "r#\"" + v629 + "\"#"
    let v637 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v636 
    let v638 : string = "$0.long($1)"
    let v639 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v635, v637) v638 
    let v640 : string = "true"
    let v641 : string = "r#\"" + v640 + "\"#"
    let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v641 
    let v643 : string = "$0.default_value($1)"
    let v644 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v639, v642) v643 
    let v645 : string = "clap::ArgAction::SetFalse"
    let v646 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v645 
    let v647 : string = "$0.action($1)"
    let v648 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v644, v646) v647 
    let v649 : string = "clap::Command::arg($0, $1)"
    let v650 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v628, v648) v649 
    let v651 : string = "clap::Command::subcommand($0, v650)"
    let v652 : clap_Command = Fable.Core.RustInterop.emitRustExpr v473 v651 
    let v653 : string = "typescript"
    let v654 : string = "r#\"" + v653 + "\"#"
    let v655 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v654 
    let v656 : string = "clap::Command::new($0)"
    let v657 : clap_Command = Fable.Core.RustInterop.emitRustExpr v655 v656 
    let v658 : string = "r#\"" + v445 + "\"#"
    let v659 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v658 
    let v660 : string = "clap::Arg::new($0)"
    let v661 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v659 v660 
    let v662 : string = "$0.short($1)"
    let v663 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v661, 'f') v662 
    let v664 : string = "r#\"" + v445 + "\"#"
    let v665 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v664 
    let v666 : string = "$0.long($1)"
    let v667 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v663, v665) v666 
    let v668 : string = "$0.required($1)"
    let v669 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v667, true) v668 
    let v670 : string = "clap::Command::arg($0, $1)"
    let v671 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v657, v669) v670 
    let v672 : string = "r#\"" + v182 + "\"#"
    let v673 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v672 
    let v674 : string = "r#\"" + v185 + "\"#"
    let v675 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v674 
    let v676 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v673; v675|]
    let v678 : unativeint = 1 |> unativeint 
    let v682 : unativeint = 0 |> unativeint 
    let v686 : unativeint = 0 |> unativeint 
    let v690 : bool = v682 = v686 
    let v697 : clap_builder_ValueRange =
        if v690 then
            let v693 : string = "clap::builder::ValueRange::new($0..)"
            let v694 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v678 v693 
            v694
        else
            let v695 : string = "clap::builder::ValueRange::new($0.." + v579 + "$1)"
            let v696 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v678, v682) v695 
            v696
    let v698 : string = "r#\"" + v211 + "\"#"
    let v699 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v698 
    let v700 : string = "clap::Arg::new($0)"
    let v701 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v699 v700 
    let v702 : string = "$0.short($1)"
    let v703 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v701, 'd') v702 
    let v704 : string = "r#\"" + v211 + "\"#"
    let v705 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v704 
    let v706 : string = "$0.long($1)"
    let v707 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v703, v705) v706 
    let v708 : string = "$0.to_vec()"
    let v709 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v676 v708 
    let v710 : string = "$0.value_names($1)"
    let v711 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v707, v709) v710 
    let v712 : string = "$0.num_args($1)"
    let v713 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v711, v697) v712 
    let v714 : string = "clap::ArgAction::Append"
    let v715 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v714 
    let v716 : string = "$0.action($1)"
    let v717 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v713, v715) v716 
    let v718 : string = "clap::Command::arg($0, $1)"
    let v719 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v671, v717) v718 
    let v720 : string = "clap::Command::subcommand($0, v719)"
    let v721 : clap_Command = Fable.Core.RustInterop.emitRustExpr v652 v720 
    let v722 : string = "python"
    let v723 : string = "r#\"" + v722 + "\"#"
    let v724 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v723 
    let v725 : string = "clap::Command::new($0)"
    let v726 : clap_Command = Fable.Core.RustInterop.emitRustExpr v724 v725 
    let v727 : string = "r#\"" + v445 + "\"#"
    let v728 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v727 
    let v729 : string = "clap::Arg::new($0)"
    let v730 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v728 v729 
    let v731 : string = "$0.short($1)"
    let v732 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v730, 'f') v731 
    let v733 : string = "r#\"" + v445 + "\"#"
    let v734 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v733 
    let v735 : string = "$0.long($1)"
    let v736 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v732, v734) v735 
    let v737 : string = "$0.required($1)"
    let v738 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v736, true) v737 
    let v739 : string = "clap::Command::arg($0, $1)"
    let v740 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v726, v738) v739 
    let v741 : string = "r#\"" + v182 + "\"#"
    let v742 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v741 
    let v743 : string = "r#\"" + v185 + "\"#"
    let v744 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v743 
    let v745 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v742; v744|]
    let v747 : unativeint = 1 |> unativeint 
    let v751 : unativeint = 0 |> unativeint 
    let v755 : unativeint = 0 |> unativeint 
    let v759 : bool = v751 = v755 
    let v766 : clap_builder_ValueRange =
        if v759 then
            let v762 : string = "clap::builder::ValueRange::new($0..)"
            let v763 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v747 v762 
            v763
        else
            let v764 : string = "clap::builder::ValueRange::new($0.." + v579 + "$1)"
            let v765 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v747, v751) v764 
            v765
    let v767 : string = "r#\"" + v211 + "\"#"
    let v768 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v767 
    let v769 : string = "clap::Arg::new($0)"
    let v770 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v768 v769 
    let v771 : string = "$0.short($1)"
    let v772 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v770, 'd') v771 
    let v773 : string = "r#\"" + v211 + "\"#"
    let v774 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "$0.long($1)"
    let v776 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v772, v774) v775 
    let v777 : string = "$0.to_vec()"
    let v778 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v745 v777 
    let v779 : string = "$0.value_names($1)"
    let v780 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v776, v778) v779 
    let v781 : string = "$0.num_args($1)"
    let v782 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v780, v766) v781 
    let v783 : string = "clap::ArgAction::Append"
    let v784 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v783 
    let v785 : string = "$0.action($1)"
    let v786 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v782, v784) v785 
    let v787 : string = "clap::Command::arg($0, $1)"
    let v788 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v740, v786) v787 
    let v789 : string = "clap::Command::subcommand($0, v788)"
    let v790 : clap_Command = Fable.Core.RustInterop.emitRustExpr v721 v789 
    let v791 : string = "dib"
    let v792 : string = "r#\"" + v791 + "\"#"
    let v793 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v792 
    let v794 : string = "clap::Command::new($0)"
    let v795 : clap_Command = Fable.Core.RustInterop.emitRustExpr v793 v794 
    let v796 : string = "path"
    let v797 : string = "r#\"" + v796 + "\"#"
    let v798 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v797 
    let v799 : string = "clap::Arg::new($0)"
    let v800 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v798 v799 
    let v801 : string = "$0.short($1)"
    let v802 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v800, 'p') v801 
    let v803 : string = "r#\"" + v796 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "$0.long($1)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v802, v804) v805 
    let v807 : string = "$0.required($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, true) v807 
    let v809 : string = "clap::Command::arg($0, $1)"
    let v810 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v795, v808) v809 
    let v811 : string = "u8"
    let v812 : string = "clap::value_parser!(" + v811 + ").into()"
    let v813 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v812 
    let v814 : string = "retries"
    let v815 : string = "r#\"" + v814 + "\"#"
    let v816 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v815 
    let v817 : string = "clap::Arg::new($0)"
    let v818 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v816 v817 
    let v819 : string = "$0.short($1)"
    let v820 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v818, 'r') v819 
    let v821 : string = "r#\"" + v814 + "\"#"
    let v822 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v821 
    let v823 : string = "$0.long($1)"
    let v824 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v820, v822) v823 
    let v825 : string = "$0.value_parser($1)"
    let v826 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v824, v813) v825 
    let v827 : string = "clap::Command::arg($0, $1)"
    let v828 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v810, v826) v827 
    let v829 : string = "working-directory"
    let v830 : string = "r#\"" + v829 + "\"#"
    let v831 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v830 
    let v832 : string = "clap::Arg::new($0)"
    let v833 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v831 v832 
    let v834 : string = "$0.short($1)"
    let v835 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v833, 'w') v834 
    let v836 : string = "r#\"" + v829 + "\"#"
    let v837 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v836 
    let v838 : string = "$0.long($1)"
    let v839 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v835, v837) v838 
    let v840 : string = "clap::Command::arg($0, $1)"
    let v841 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v828, v839) v840 
    let v842 : string = "clap::Command::subcommand($0, v841)"
    let v843 : clap_Command = Fable.Core.RustInterop.emitRustExpr v790 v842 
    v843
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method4(v0)
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result_map_"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method5()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    let _run_target_args'_v2 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : US3 = US3_1
    let v20 : US4 = US4_4(v19)
    let v21 : string = $"env.get_environment_variable / target: {v20} / var: {v0}"
    let v22 : string = failwith<string> v21
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : US3 = US3_2
    let v24 : US4 = US4_4(v23)
    let v25 : string = $"env.get_environment_variable / target: {v24} / var: {v0}"
    let v26 : string = failwith<string> v25
    let _run_target_args'_v2 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : string = "process.env[$0] ?? \"\""
    let v28 : string = Fable.Core.JsInterop.emitJsExpr v0 v27 
    let _run_target_args'_v2 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string = "os"
    let v31 : IOsEnviron = Fable.Core.PyInterop.importAll v30 
    let v32 : string = "v31.environ"
    let v33 : obj = Fable.Core.PyInterop.emitPyExpr () v32 
    let v37 : string = "v33.get($0)"
    let v38 : string = Fable.Core.PyInterop.emitPyExpr v0 v37 
    let mutable _v38 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v42 : (string -> string option) = Option.ofObj
    let v43 : string option = v42 v38
    v43 
    #else
    Some v38 
    #endif
    |> fun x -> _v38 <- Some x
    let v44 : string option = match _v38 with Some x -> x | None -> failwith "optionm'.of_obj / _v38=None"
    let v49 : (string -> US5) = method6()
    let v50 : US5 option = v44 |> Option.map v49 
    let v70 : US5 = US5_1
    let v71 : US5 = v50 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US5_1 -> (* None *)
            let v76 : string = ""
            v76
        | US5_0(v75) -> (* Some *)
            v75
    let _run_target_args'_v2 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : US3 = US3_1
    let v80 : US4 = US4_1(v79)
    let v81 : string = $"env.get_environment_variable / target: {v80} / var: {v0}"
    let v82 : string = failwith<string> v81
    let _run_target_args'_v2 = v82 
    #endif
#else
    let v83 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v84 : string = v83 v0
    let mutable _v84 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v86 : (string -> string option) = Option.ofObj
    let v87 : string option = v86 v84
    v87 
    #else
    Some v84 
    #endif
    |> fun x -> _v84 <- Some x
    let v88 : string option = match _v84 with Some x -> x | None -> failwith "optionm'.of_obj / _v84=None"
    let v93 : (string -> US5) = method6()
    let v94 : US5 option = v88 |> Option.map v93 
    let v114 : US5 = US5_1
    let v115 : US5 = v94 |> Option.defaultValue v114 
    let v122 : string =
        match v115 with
        | US5_1 -> (* None *)
            let v120 : string = ""
            v120
        | US5_0(v119) -> (* Some *)
            v119
    let _run_target_args'_v2 = v122 
    #endif
    let v123 : string = _run_target_args'_v2 
    v123
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v210 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v143 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v144 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v145 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v147 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v143 = v147 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v150 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v151 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v152 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v152 
            #endif
#else
            let v153 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v153 
            #endif
            let v154 : System.DateTime = _run_target_args'_v143 
            (* run_target_args'
            let v165 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v166 : (System.DateTime -> int64) = _.Ticks
            let v167 : int64 = v166 v154
            let _run_target_args'_v165 = v167 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v168 : (System.DateTime -> int64) = _.Ticks
            let v169 : int64 = v168 v154
            let _run_target_args'_v165 = v169 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : int64 = null |> unbox<int64>
            let _run_target_args'_v165 = v171 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : (System.DateTime -> int64) = _.Ticks
            let v175 : int64 = v174 v154
            let _run_target_args'_v165 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : (System.DateTime -> int64) = _.Ticks
            let v177 : int64 = v176 v154
            let _run_target_args'_v165 = v177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : (System.DateTime -> int64) = _.Ticks
            let v179 : int64 = v178 v154
            let _run_target_args'_v165 = v179 
            #endif
#else
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v154
            let _run_target_args'_v165 = v181 
            #endif
            let v182 : int64 = _run_target_args'_v165 
            let v204 : int64 = v182 |> int64 
            US2_0(v204)
    struct (v127, v210)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v43 v52 
    let _run_target_args'_v13 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "String::from($0)"
    let v62 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "String::from($0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "String::from($0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : std_string_String = _run_target_args'_v60 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v83 v92 
    let _run_target_args'_v13 = v93 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v94 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v95 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v94 
    (* run_target_args'
    let v100 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v101 : string = "String::from($0)"
    let v102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v101 
    let _run_target_args'_v100 = v102 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v103 : string = "String::from($0)"
    let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v103 
    let _run_target_args'_v100 = v104 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v105 : string = "String::from($0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v105 
    let _run_target_args'_v100 = v106 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v116 
    #endif
#else
    let v120 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v120 
    #endif
    let v123 : std_string_String = _run_target_args'_v100 
    let v132 : string = "fable_library_rust::String_::fromString($0)"
    let v133 : string = Fable.Core.RustInterop.emitRustExpr v123 v132 
    let _run_target_args'_v13 = v133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v135 : string = null |> unbox<string>
    let _run_target_args'_v13 = v135 
    #endif
#if FABLE_COMPILER_PYTHON
    let v139 : string = null |> unbox<string>
    let _run_target_args'_v13 = v139 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v143 : string = null |> unbox<string>
    let _run_target_args'_v13 = v143 
    #endif
#else
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v13 = v147 
    #endif
    let v150 : string = _run_target_args'_v13 
    let v161 : string = "True"
    let v162 : bool = v150 <> v161 
    let v174 : US2 =
        if v162 then
            US2_1
        else
            let v166 : string = $"near_sdk::env::block_timestamp()"
            let v167 : uint64 = Fable.Core.RustInterop.emitRustExpr () v166 
            let v169 : (uint64 -> int64) = int64
            let v170 : int64 = v169 v167
            US2_0(v170)
    let v175 : US1 = US1_1
    let _run_target_args'_v3 = struct (v175, v174) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v176 : US1, v177 : US2) = method2()
    let _run_target_args'_v3 = struct (v176, v177) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v178 : US1, v179 : US2) = method2()
    let _run_target_args'_v3 = struct (v178, v179) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v180 : US1, v181 : US2) = method2()
    let _run_target_args'_v3 = struct (v180, v181) 
    #endif
#else
    let struct (v182 : US1, v183 : US2) = method2()
    let _run_target_args'_v3 = struct (v182, v183) 
    #endif
    let struct (v184 : US1, v185 : US2) = _run_target_args'_v3 
    let v190 : Mut0 = {l0 = 1L} : Mut0
    let v191 : (string -> unit) = closure4()
    let v192 : Mut1 = {l0 = v191} : Mut1
    let v193 : Mut2 = {l0 = true} : Mut2
    let v194 : string = ""
    let v195 : Mut3 = {l0 = v194} : Mut3
    let v198 : US0 =
        match v184 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v196) -> (* Some *)
            v196
    let v199 : Mut4 = {l0 = v198} : Mut4
    let v210 : int64 option =
        match v185 with
        | US2_1 -> (* None *)
            let v206 : int64 option = None
            v206
        | US2_0(v200) -> (* Some *)
            let v202 : int64 option = Some v200 
            v202
    struct (v190, v192, v193, v195, v199, v210)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and method7 (v0 : US0) : bool =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v38 : Mut0, v39 : Mut1, v40 : Mut2, v41 : Mut3, v42 : Mut4, v43 : int64 option) = TraceState.trace_state.Value
    let v56 : US0 = v42.l0
    let v57 : bool = v40.l0
    let v58 : bool = v57 = false
    if v58 then
        false
    else
        let v59 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v60 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v56
        let v61 : bool = v59 >= v60
        v61
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v195 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v198 : (int64 -> US2) = method9()
    let v199 : US2 option = v5 |> Option.map v198 
    let v219 : US2 = US2_1
    let v220 : US2 = v199 |> Option.defaultValue v219 
    let v360 : System.DateTime =
        match v220 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v343 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v344 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v344 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v345 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v347 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v343 = v347 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v350 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v350 
            #endif
#if FABLE_COMPILER_PYTHON
            let v351 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v351 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v352 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v352 
            #endif
#else
            let v353 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v353 
            #endif
            let v354 : System.DateTime = _run_target_args'_v343 
            v354
        | US2_0(v224) -> (* Some *)
            (* run_target_args'
            let v231 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v232 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v232 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v233 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v233 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v235 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v231 = v235 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v238 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v238 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v240 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v240 
            #endif
#else
            let v241 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v241 
            #endif
            let v242 : System.DateTime = _run_target_args'_v231 
            (* run_target_args'
            let v253 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v254 : (System.DateTime -> int64) = _.Ticks
            let v255 : int64 = v254 v242
            let _run_target_args'_v253 = v255 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v256 : (System.DateTime -> int64) = _.Ticks
            let v257 : int64 = v256 v242
            let _run_target_args'_v253 = v257 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v259 : int64 = null |> unbox<int64>
            let _run_target_args'_v253 = v259 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : (System.DateTime -> int64) = _.Ticks
            let v263 : int64 = v262 v242
            let _run_target_args'_v253 = v263 
            #endif
#if FABLE_COMPILER_PYTHON
            let v264 : (System.DateTime -> int64) = _.Ticks
            let v265 : int64 = v264 v242
            let _run_target_args'_v253 = v265 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v266 : (System.DateTime -> int64) = _.Ticks
            let v267 : int64 = v266 v242
            let _run_target_args'_v253 = v267 
            #endif
#else
            let v268 : (System.DateTime -> int64) = _.Ticks
            let v269 : int64 = v268 v242
            let _run_target_args'_v253 = v269 
            #endif
            let v270 : int64 = _run_target_args'_v253 
            let v292 : int64 = v270 |> int64 
            let v297 : int64 = v292 - v224
            let v303 : System.TimeSpan = v297 |> System.TimeSpan 
            let v309 : (System.TimeSpan -> int32) = _.Hours
            let v310 : int32 = v309 v303
            let v314 : (System.TimeSpan -> int32) = _.Minutes
            let v315 : int32 = v314 v303
            let v319 : (System.TimeSpan -> int32) = _.Seconds
            let v320 : int32 = v319 v303
            let v324 : (System.TimeSpan -> int32) = _.Milliseconds
            let v325 : int32 = v324 v303
            let v334 : System.DateTime = System.DateTime (1, 1, 1, v310, v315, v320, v325)
            v334
    let v361 : string = method10()
    let v363 : bool = v361 = ""
    let v365 : string =
        if v363 then
            let v364 : string = "M-d-y hh:mm:ss tt"
            v364
        else
            v361
    let v366 : (string -> string) = v360.ToString
    let v367 : string = v366 v365
    let _run_target_args'_v195 = v367 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v384 : (int64 -> US2) = method9()
    let v385 : US2 option = v5 |> Option.map v384 
    let v405 : US2 = US2_1
    let v406 : US2 = v385 |> Option.defaultValue v405 
    let v546 : System.DateTime =
        match v406 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v529 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v530 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v530 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v531 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v531 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v533 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v529 = v533 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v536 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v536 
            #endif
#if FABLE_COMPILER_PYTHON
            let v537 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v537 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v538 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v538 
            #endif
#else
            let v539 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v539 
            #endif
            let v540 : System.DateTime = _run_target_args'_v529 
            v540
        | US2_0(v410) -> (* Some *)
            (* run_target_args'
            let v417 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v418 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v418 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v419 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v419 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v421 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v417 = v421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v424 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v424 
            #endif
#if FABLE_COMPILER_PYTHON
            let v425 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v425 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v426 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v426 
            #endif
#else
            let v427 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v427 
            #endif
            let v428 : System.DateTime = _run_target_args'_v417 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : (System.DateTime -> int64) = _.Ticks
            let v441 : int64 = v440 v428
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : (System.DateTime -> int64) = _.Ticks
            let v443 : int64 = v442 v428
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : int64 = null |> unbox<int64>
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v448 : (System.DateTime -> int64) = _.Ticks
            let v449 : int64 = v448 v428
            let _run_target_args'_v439 = v449 
            #endif
#if FABLE_COMPILER_PYTHON
            let v450 : (System.DateTime -> int64) = _.Ticks
            let v451 : int64 = v450 v428
            let _run_target_args'_v439 = v451 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v452 : (System.DateTime -> int64) = _.Ticks
            let v453 : int64 = v452 v428
            let _run_target_args'_v439 = v453 
            #endif
#else
            let v454 : (System.DateTime -> int64) = _.Ticks
            let v455 : int64 = v454 v428
            let _run_target_args'_v439 = v455 
            #endif
            let v456 : int64 = _run_target_args'_v439 
            let v478 : int64 = v456 |> int64 
            let v483 : int64 = v478 - v410
            let v489 : System.TimeSpan = v483 |> System.TimeSpan 
            let v495 : (System.TimeSpan -> int32) = _.Hours
            let v496 : int32 = v495 v489
            let v500 : (System.TimeSpan -> int32) = _.Minutes
            let v501 : int32 = v500 v489
            let v505 : (System.TimeSpan -> int32) = _.Seconds
            let v506 : int32 = v505 v489
            let v510 : (System.TimeSpan -> int32) = _.Milliseconds
            let v511 : int32 = v510 v489
            let v520 : System.DateTime = System.DateTime (1, 1, 1, v496, v501, v506, v511)
            v520
    let v547 : string = method10()
    let v549 : bool = v547 = ""
    let v551 : string =
        if v549 then
            let v550 : string = "M-d-y hh:mm:ss tt"
            v550
        else
            v547
    let v552 : (string -> string) = v546.ToString
    let v553 : string = v552 v551
    let _run_target_args'_v195 = v553 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v568 : string = $"near_sdk::env::block_timestamp()"
    let v569 : uint64 = Fable.Core.RustInterop.emitRustExpr () v568 
    let v572 : (int64 -> US2) = method9()
    let v573 : US2 option = v5 |> Option.map v572 
    let v593 : US2 = US2_1
    let v594 : US2 = v573 |> Option.defaultValue v593 
    let v606 : uint64 =
        match v594 with
        | US2_1 -> (* None *)
            v569
        | US2_0(v598) -> (* Some *)
            let v600 : (int64 -> uint64) = uint64
            let v601 : uint64 = v600 v598
            let v604 : uint64 = v569 - v601
            v604
    let v607 : uint64 = v606 / 1000000000UL
    let v608 : uint64 = v607 % 60UL
    let v609 : uint64 = v607 / 60UL
    let v610 : uint64 = v609 % 60UL
    let v611 : uint64 = v607 / 3600UL
    let v612 : uint64 = v611 % 24UL
    let v613 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v612, v610, v608) v613 
    let v615 : string = "fable_library_rust::String_::fromString($0)"
    let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
    let _run_target_args'_v195 = v616 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v619 : (int64 -> US2) = method9()
    let v620 : US2 option = v5 |> Option.map v619 
    let v640 : US2 = US2_1
    let v641 : US2 = v620 |> Option.defaultValue v640 
    let v781 : System.DateTime =
        match v641 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v764 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v765 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v765 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v766 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v766 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v768 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v764 = v768 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v771 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v771 
            #endif
#if FABLE_COMPILER_PYTHON
            let v772 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v772 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v773 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v773 
            #endif
#else
            let v774 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v774 
            #endif
            let v775 : System.DateTime = _run_target_args'_v764 
            v775
        | US2_0(v645) -> (* Some *)
            (* run_target_args'
            let v652 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v653 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v653 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v654 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v654 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v656 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v652 = v656 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v659 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v659 
            #endif
#if FABLE_COMPILER_PYTHON
            let v660 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v660 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v661 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v661 
            #endif
#else
            let v662 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v662 
            #endif
            let v663 : System.DateTime = _run_target_args'_v652 
            (* run_target_args'
            let v674 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v675 : (System.DateTime -> int64) = _.Ticks
            let v676 : int64 = v675 v663
            let _run_target_args'_v674 = v676 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v677 : (System.DateTime -> int64) = _.Ticks
            let v678 : int64 = v677 v663
            let _run_target_args'_v674 = v678 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v680 : int64 = null |> unbox<int64>
            let _run_target_args'_v674 = v680 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v683 : (System.DateTime -> int64) = _.Ticks
            let v684 : int64 = v683 v663
            let _run_target_args'_v674 = v684 
            #endif
#if FABLE_COMPILER_PYTHON
            let v685 : (System.DateTime -> int64) = _.Ticks
            let v686 : int64 = v685 v663
            let _run_target_args'_v674 = v686 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v687 : (System.DateTime -> int64) = _.Ticks
            let v688 : int64 = v687 v663
            let _run_target_args'_v674 = v688 
            #endif
#else
            let v689 : (System.DateTime -> int64) = _.Ticks
            let v690 : int64 = v689 v663
            let _run_target_args'_v674 = v690 
            #endif
            let v691 : int64 = _run_target_args'_v674 
            let v713 : int64 = v691 |> int64 
            let v718 : int64 = v713 - v645
            let v724 : System.TimeSpan = v718 |> System.TimeSpan 
            let v730 : (System.TimeSpan -> int32) = _.Hours
            let v731 : int32 = v730 v724
            let v735 : (System.TimeSpan -> int32) = _.Minutes
            let v736 : int32 = v735 v724
            let v740 : (System.TimeSpan -> int32) = _.Seconds
            let v741 : int32 = v740 v724
            let v745 : (System.TimeSpan -> int32) = _.Milliseconds
            let v746 : int32 = v745 v724
            let v755 : System.DateTime = System.DateTime (1, 1, 1, v731, v736, v741, v746)
            v755
    let v782 : string = method11()
    let v784 : bool = v782 = ""
    let v786 : string =
        if v784 then
            let v785 : string = "M-d-y hh:mm:ss tt"
            v785
        else
            v782
    let v787 : (string -> string) = v781.ToString
    let v788 : string = v787 v786
    let _run_target_args'_v195 = v788 
    #endif
#if FABLE_COMPILER_PYTHON
    let v805 : (int64 -> US2) = method9()
    let v806 : US2 option = v5 |> Option.map v805 
    let v826 : US2 = US2_1
    let v827 : US2 = v806 |> Option.defaultValue v826 
    let v967 : System.DateTime =
        match v827 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v950 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v951 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v951 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v952 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v952 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v954 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v950 = v954 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v957 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v957 
            #endif
#if FABLE_COMPILER_PYTHON
            let v958 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v958 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v959 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v959 
            #endif
#else
            let v960 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v960 
            #endif
            let v961 : System.DateTime = _run_target_args'_v950 
            v961
        | US2_0(v831) -> (* Some *)
            (* run_target_args'
            let v838 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v839 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v839 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v840 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v840 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v842 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v838 = v842 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v845 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v845 
            #endif
#if FABLE_COMPILER_PYTHON
            let v846 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v846 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v847 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v847 
            #endif
#else
            let v848 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v848 
            #endif
            let v849 : System.DateTime = _run_target_args'_v838 
            (* run_target_args'
            let v860 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v861 : (System.DateTime -> int64) = _.Ticks
            let v862 : int64 = v861 v849
            let _run_target_args'_v860 = v862 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v863 : (System.DateTime -> int64) = _.Ticks
            let v864 : int64 = v863 v849
            let _run_target_args'_v860 = v864 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v866 : int64 = null |> unbox<int64>
            let _run_target_args'_v860 = v866 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v869 : (System.DateTime -> int64) = _.Ticks
            let v870 : int64 = v869 v849
            let _run_target_args'_v860 = v870 
            #endif
#if FABLE_COMPILER_PYTHON
            let v871 : (System.DateTime -> int64) = _.Ticks
            let v872 : int64 = v871 v849
            let _run_target_args'_v860 = v872 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v873 : (System.DateTime -> int64) = _.Ticks
            let v874 : int64 = v873 v849
            let _run_target_args'_v860 = v874 
            #endif
#else
            let v875 : (System.DateTime -> int64) = _.Ticks
            let v876 : int64 = v875 v849
            let _run_target_args'_v860 = v876 
            #endif
            let v877 : int64 = _run_target_args'_v860 
            let v899 : int64 = v877 |> int64 
            let v904 : int64 = v899 - v831
            let v910 : System.TimeSpan = v904 |> System.TimeSpan 
            let v916 : (System.TimeSpan -> int32) = _.Hours
            let v917 : int32 = v916 v910
            let v921 : (System.TimeSpan -> int32) = _.Minutes
            let v922 : int32 = v921 v910
            let v926 : (System.TimeSpan -> int32) = _.Seconds
            let v927 : int32 = v926 v910
            let v931 : (System.TimeSpan -> int32) = _.Milliseconds
            let v932 : int32 = v931 v910
            let v941 : System.DateTime = System.DateTime (1, 1, 1, v917, v922, v927, v932)
            v941
    let v968 : string = method11()
    let v970 : bool = v968 = ""
    let v972 : string =
        if v970 then
            let v971 : string = "M-d-y hh:mm:ss tt"
            v971
        else
            v968
    let v973 : (string -> string) = v967.ToString
    let v974 : string = v973 v972
    let _run_target_args'_v195 = v974 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v991 : (int64 -> US2) = method9()
    let v992 : US2 option = v5 |> Option.map v991 
    let v1012 : US2 = US2_1
    let v1013 : US2 = v992 |> Option.defaultValue v1012 
    let v1153 : System.DateTime =
        match v1013 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1136 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1137 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1137 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1138 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1138 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1140 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1136 = v1140 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1143 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1144 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1145 
            #endif
#else
            let v1146 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1146 
            #endif
            let v1147 : System.DateTime = _run_target_args'_v1136 
            v1147
        | US2_0(v1017) -> (* Some *)
            (* run_target_args'
            let v1024 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1025 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1025 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1026 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1026 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1028 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1024 = v1028 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1031 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1031 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1032 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1032 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1033 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1033 
            #endif
#else
            let v1034 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1034 
            #endif
            let v1035 : System.DateTime = _run_target_args'_v1024 
            (* run_target_args'
            let v1046 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1047 : (System.DateTime -> int64) = _.Ticks
            let v1048 : int64 = v1047 v1035
            let _run_target_args'_v1046 = v1048 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1049 : (System.DateTime -> int64) = _.Ticks
            let v1050 : int64 = v1049 v1035
            let _run_target_args'_v1046 = v1050 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1052 : int64 = null |> unbox<int64>
            let _run_target_args'_v1046 = v1052 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1055 : (System.DateTime -> int64) = _.Ticks
            let v1056 : int64 = v1055 v1035
            let _run_target_args'_v1046 = v1056 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1057 : (System.DateTime -> int64) = _.Ticks
            let v1058 : int64 = v1057 v1035
            let _run_target_args'_v1046 = v1058 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1059 : (System.DateTime -> int64) = _.Ticks
            let v1060 : int64 = v1059 v1035
            let _run_target_args'_v1046 = v1060 
            #endif
#else
            let v1061 : (System.DateTime -> int64) = _.Ticks
            let v1062 : int64 = v1061 v1035
            let _run_target_args'_v1046 = v1062 
            #endif
            let v1063 : int64 = _run_target_args'_v1046 
            let v1085 : int64 = v1063 |> int64 
            let v1090 : int64 = v1085 - v1017
            let v1096 : System.TimeSpan = v1090 |> System.TimeSpan 
            let v1102 : (System.TimeSpan -> int32) = _.Hours
            let v1103 : int32 = v1102 v1096
            let v1107 : (System.TimeSpan -> int32) = _.Minutes
            let v1108 : int32 = v1107 v1096
            let v1112 : (System.TimeSpan -> int32) = _.Seconds
            let v1113 : int32 = v1112 v1096
            let v1117 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1118 : int32 = v1117 v1096
            let v1127 : System.DateTime = System.DateTime (1, 1, 1, v1103, v1108, v1113, v1118)
            v1127
    let v1154 : string = method11()
    let v1156 : bool = v1154 = ""
    let v1158 : string =
        if v1156 then
            let v1157 : string = "M-d-y hh:mm:ss tt"
            v1157
        else
            v1154
    let v1159 : (string -> string) = v1153.ToString
    let v1160 : string = v1159 v1158
    let _run_target_args'_v195 = v1160 
    #endif
#else
    let v1177 : (int64 -> US2) = method9()
    let v1178 : US2 option = v5 |> Option.map v1177 
    let v1198 : US2 = US2_1
    let v1199 : US2 = v1178 |> Option.defaultValue v1198 
    let v1339 : System.DateTime =
        match v1199 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1322 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1323 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1323 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1324 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1324 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1326 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1322 = v1326 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1329 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1329 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1330 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1330 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1331 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1331 
            #endif
#else
            let v1332 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1332 
            #endif
            let v1333 : System.DateTime = _run_target_args'_v1322 
            v1333
        | US2_0(v1203) -> (* Some *)
            (* run_target_args'
            let v1210 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1211 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1211 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1212 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1212 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1214 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1210 = v1214 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1217 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1217 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1218 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1218 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1219 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1219 
            #endif
#else
            let v1220 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1220 
            #endif
            let v1221 : System.DateTime = _run_target_args'_v1210 
            (* run_target_args'
            let v1232 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1233 : (System.DateTime -> int64) = _.Ticks
            let v1234 : int64 = v1233 v1221
            let _run_target_args'_v1232 = v1234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1235 : (System.DateTime -> int64) = _.Ticks
            let v1236 : int64 = v1235 v1221
            let _run_target_args'_v1232 = v1236 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1238 : int64 = null |> unbox<int64>
            let _run_target_args'_v1232 = v1238 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1241 : (System.DateTime -> int64) = _.Ticks
            let v1242 : int64 = v1241 v1221
            let _run_target_args'_v1232 = v1242 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1243 : (System.DateTime -> int64) = _.Ticks
            let v1244 : int64 = v1243 v1221
            let _run_target_args'_v1232 = v1244 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1245 : (System.DateTime -> int64) = _.Ticks
            let v1246 : int64 = v1245 v1221
            let _run_target_args'_v1232 = v1246 
            #endif
#else
            let v1247 : (System.DateTime -> int64) = _.Ticks
            let v1248 : int64 = v1247 v1221
            let _run_target_args'_v1232 = v1248 
            #endif
            let v1249 : int64 = _run_target_args'_v1232 
            let v1271 : int64 = v1249 |> int64 
            let v1276 : int64 = v1271 - v1203
            let v1282 : System.TimeSpan = v1276 |> System.TimeSpan 
            let v1288 : (System.TimeSpan -> int32) = _.Hours
            let v1289 : int32 = v1288 v1282
            let v1293 : (System.TimeSpan -> int32) = _.Minutes
            let v1294 : int32 = v1293 v1282
            let v1298 : (System.TimeSpan -> int32) = _.Seconds
            let v1299 : int32 = v1298 v1282
            let v1303 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1304 : int32 = v1303 v1282
            let v1313 : System.DateTime = System.DateTime (1, 1, 1, v1289, v1294, v1299, v1304)
            v1313
    let v1340 : string = method11()
    let v1342 : bool = v1340 = ""
    let v1344 : string =
        if v1342 then
            let v1343 : string = "M-d-y hh:mm:ss tt"
            v1343
        else
            v1340
    let v1345 : (string -> string) = v1339.ToString
    let v1346 : string = v1345 v1344
    let _run_target_args'_v195 = v1346 
    #endif
    let v1361 : string = _run_target_args'_v195 
    v1361
and method13 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v4 : string = v2 + v1 
    v0.l0 <- v4
    ()
and method14 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v2 : string = "Debug"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_bright_blue"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v86 : string = "inline_colorization::color_reset"
    let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v87) v88 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let _run_target_args'_v47 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v92 : string = "inline_colorization::color_bright_blue"
    let v93 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v93, v121, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v47 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "inline_colorization::color_bright_blue"
    let v137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v136 
    (* run_target_args'
    let v142 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v143 : string = "&*$0"
    let v144 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v143 
    let _run_target_args'_v142 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "&*$0"
    let v146 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v145 
    let _run_target_args'_v142 = v146 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v147 : string = "&*$0"
    let v148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v147 
    let _run_target_args'_v142 = v148 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v154 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v154 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v158 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v158 
    #endif
#else
    let v162 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v162 
    #endif
    let v165 : Ref<Str> = _run_target_args'_v142 
    let v174 : string = "inline_colorization::color_reset"
    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v177 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v137, v165, v175) v176 
    let v178 : string = "fable_library_rust::String_::fromString($0)"
    let v179 : string = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let _run_target_args'_v47 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v181 : string = "\u001b[94m"
    let v185 : string = method14()
    let v189 : string = v181 + v30 
    let v193 : string = v189 + v185 
    let _run_target_args'_v47 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = "\u001b[94m"
    let v201 : string = method14()
    let v205 : string = v197 + v30 
    let v209 : string = v205 + v201 
    let _run_target_args'_v47 = v209 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v213 : string = "\u001b[94m"
    let v217 : string = method14()
    let v221 : string = v213 + v30 
    let v225 : string = v221 + v217 
    let _run_target_args'_v47 = v225 
    #endif
#else
    let v229 : string = "\u001b[94m"
    let v233 : string = method14()
    let v237 : string = v229 + v30 
    let v241 : string = v237 + v233 
    let _run_target_args'_v47 = v241 
    #endif
    let v244 : string = _run_target_args'_v47 
    v244
and method16 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v42 : char list = []
    let v44 : char list = '/' :: v42 
    let v48 : char list = ' ' :: v44 
    let v53 : (char list -> (char [])) = List.toArray
    let v54 : (char []) = v53 v48
    let v57 : string = v8.TrimEnd v54 
    v57
and method15 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "args"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"%A{v8}"
    let v73 : string = $"{v69}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v10, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = " }"
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v108 : string = v10.l0
    let v109 : int64 = v0.l0
    let v112 : string = " "
    let v113 : string = v6 + v112 
    let v117 : string = v113 + v7 
    let v122 : string = " #"
    let v123 : string = v117 + v122 
    let v127 : (int64 -> string) = _.ToString()
    let v128 : string = v127 v109
    let v132 : string = v123 + v128 
    let v136 : string = v132 + v112 
    let v141 : string = "spiral.main"
    let v142 : string = v136 + v141 
    let v147 : string = " / "
    let v148 : string = v142 + v147 
    let v152 : string = v148 + v108 
    method16(v152)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure10(v0)
    let v4 : unit = (fun () -> v3 (); v2) ()
    ()
and method17 (v0 : string) : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v38 : Mut0, v39 : Mut1, v40 : Mut2, v41 : Mut3, v42 : Mut4, v43 : int64 option) = TraceState.trace_state.Value
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure8(v38)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v63 : (string -> unit) = closure9()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v65 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v66 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = v41.l0
    let v68 : bool = v67 = ""
    let v83 : string =
        if v68 then
            v0
        else
            let v69 : bool = v0 = ""
            if v69 then
                let v70 : string = v41.l0
                v70
            else
                let v71 : string = v41.l0
                let v74 : string = "\n"
                let v75 : string = v71 + v74 
                let v79 : string = v75 + v0 
                v79
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "&*$0"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "&*$0"
    let v92 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "&*$0"
    let v94 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : Ref<Str> = _run_target_args'_v88 
    let v120 : string = $"$0.chars()"
    let v121 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v111 v120 
    let v122 : string = "$0"
    let v123 : _ = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.collect::<Vec<_>>()"
    let v125 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let v126 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v127 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v129 : bool = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let v130 : string = "x"
    let v131 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = "String::from_iter($0)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v132 
    let v134 : string = "true; $0 }).collect::<Vec<_>>()"
    let v135 : bool = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let v136 : string = "_vec_map"
    let v137 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v136 
    let v138 : string = "$0.len()"
    let v139 : unativeint = Fable.Core.RustInterop.emitRustExpr v137 v138 
    let v145 : int32 = v139 |> int32 
    let v155 : string = ""
    let v156 : bool = v0 <> v155 
    let v160 : bool =
        if v156 then
            let v159 : bool = v145 <= 1
            v159
        else
            false
    if v160 then
        v41.l0 <- v83
        ()
    else
        v41.l0 <- v155
        let v161 : string = "true; $0.into_iter().for_each(|x| { //"
        let v162 : bool = Fable.Core.RustInterop.emitRustExpr v137 v161 
        let v163 : string = "x"
        let v164 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v163 
        let v165 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v166 : bool = Fable.Core.RustInterop.emitRustExpr v164 v165 
        let v167 : string = $"true"
        let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
        let v169 : string = "true; }); //"
        let v170 : bool = Fable.Core.RustInterop.emitRustExpr () v169 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v63 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v63 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v63 v0
    #endif
#else
    v63 v0
    #endif
    // run_target_args' is_unit
    let v171 : (string -> unit) = v39.l0
    v171 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method15(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method19 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method20 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method21 () : (std_string_String -> US7) =
    closure13()
and method22 () : string =
    let v0 : string = "target"
    v0
and method23 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method24 () : (Vec<std_string_String> -> US11) =
    closure14()
and method25 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method27 () : string =
    let v0 : string = ""
    v0
and method28 (v0 : string) : string =
    v0
and method29 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method30 () : string =
    let v0 : string = ""
    v0
and method26 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method27()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method28(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method29(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method30()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method28(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method31 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v62 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v63 : string = "format!(\"{}\", $0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v63 
    let _run_target_args'_v62 = v64 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v65 : string = "format!(\"{}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v65 
    let _run_target_args'_v62 = v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = "format!(\"{}\", $0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v67 
    let _run_target_args'_v62 = v68 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v70 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v70 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v78 
    #endif
#else
    let v82 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v82 
    #endif
    let v85 : std_string_String = _run_target_args'_v62 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v85 v94 
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _run_target_args'_v4 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = null |> unbox<string>
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "fs"
    let v105 : IFs = Fable.Core.JsInterop.importAll v104 
    let v106 : string = "fs.realpathSync('.')"
    let v107 : string = Fable.Core.JsInterop.emitJsExpr () v106 
    let _run_target_args'_v4 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : string = null |> unbox<string>
    let _run_target_args'_v4 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v113 : string = null |> unbox<string>
    let _run_target_args'_v4 = v113 
    #endif
#else
    let v116 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v117 : string = v116 ()
    let _run_target_args'_v4 = v117 
    #endif
    let v118 : string = _run_target_args'_v4 
    v118
and method33 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v48 
    let _run_target_args'_v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "String::from($0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v50 
    let _run_target_args'_v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "String::from($0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v52 
    let _run_target_args'_v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v63 
    #endif
#else
    let v67 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v67 
    #endif
    let v70 : std_string_String = _run_target_args'_v47 
    (* run_target_args'
    let v83 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "std::path::PathBuf::from($0)"
    let v85 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v84 
    let _run_target_args'_v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "std::path::PathBuf::from($0)"
    let v87 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v86 
    let _run_target_args'_v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "std::path::PathBuf::from($0)"
    let v89 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v88 
    let _run_target_args'_v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v99 
    #endif
#else
    let v103 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v103 
    #endif
    let v106 : std_path_PathBuf = _run_target_args'_v83 
    (* run_target_args'
    let v119 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v120 : string = "&*$0"
    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v120 
    let _run_target_args'_v119 = v121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v122 : string = "&*$0"
    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v122 
    let _run_target_args'_v119 = v123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : string = "&*$0"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v124 
    let _run_target_args'_v119 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v127 
    #endif
#if FABLE_COMPILER_PYTHON
    let v131 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v131 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v135 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v135 
    #endif
#else
    let v139 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v139 
    #endif
    let v142 : Ref<Str> = _run_target_args'_v119 
    (* run_target_args'
    let v155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : string = "String::from($0)"
    let v157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v156 
    let _run_target_args'_v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : string = "String::from($0)"
    let v159 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v158 
    let _run_target_args'_v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : string = "String::from($0)"
    let v161 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v160 
    let _run_target_args'_v155 = v161 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v171 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v171 
    #endif
#else
    let v175 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v175 
    #endif
    let v178 : std_string_String = _run_target_args'_v155 
    let v187 : string = "$0.join($1)"
    let v188 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v106, v178) v187 
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "$0.display()"
    let v195 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "$0.display()"
    let v197 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "$0.display()"
    let v199 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v205 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v209 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v209 
    #endif
#else
    let v213 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v213 
    #endif
    let v216 : std_path_Display = _run_target_args'_v193 
    (* run_target_args'
    let v229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v230 : string = "format!(\"{}\", $0)"
    let v231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v230 
    let _run_target_args'_v229 = v231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v232 : string = "format!(\"{}\", $0)"
    let v233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v232 
    let _run_target_args'_v229 = v233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v234 : string = "format!(\"{}\", $0)"
    let v235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v234 
    let _run_target_args'_v229 = v235 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v241 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v245 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v245 
    #endif
#else
    let v249 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v249 
    #endif
    let v252 : std_string_String = _run_target_args'_v229 
    let v261 : string = "fable_library_rust::String_::fromString($0)"
    let v262 : string = Fable.Core.RustInterop.emitRustExpr v252 v261 
    let _run_target_args'_v6 = v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : US3 = US3_1
    let v264 : US4 = US4_4(v263)
    let v265 : string = $"file_system.(</>) / target: {v264} / a: {v0} / b: {v1}"
    let v266 : string = failwith<string> v265
    let _run_target_args'_v6 = v266 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : string = null |> unbox<string>
    let _run_target_args'_v6 = v268 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v271 : string = "path"
    let v272 : IPathJoin = Fable.Core.JsInterop.importAll v271 
    let v273 : string = "v272.join($0, $1)"
    let v274 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v273 
    let _run_target_args'_v6 = v274 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : US3 = US3_0
    let v276 : US4 = US4_6(v275)
    let v277 : string = $"file_system.(</>) / target: {v276} / a: {v0} / b: {v1}"
    let v278 : string = failwith<string> v277
    let _run_target_args'_v6 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v279 : US3 = US3_1
    let v280 : US4 = US4_1(v279)
    let v281 : string = $"file_system.(</>) / target: {v280} / a: {v0} / b: {v1}"
    let v282 : string = failwith<string> v281
    let _run_target_args'_v6 = v282 
    #endif
#else
    let v283 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v283 
    #endif
    let v284 : string = _run_target_args'_v6 
    v284
and method35 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_file()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.File.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure15 () (v0 : string) : bool =
    method35(v0)
and method36 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_dir()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.Directory.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure16 () (v0 : string) : bool =
    method36(v0)
and method38 (v0 : string) : string option =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v115 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v118 
    (* run_target_args'
    let v124 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "$0.display()"
    let v126 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v125 
    let _run_target_args'_v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "$0.display()"
    let v128 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v127 
    let _run_target_args'_v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "$0.display()"
    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v129 
    let _run_target_args'_v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v140 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v140 
    #endif
#else
    let v144 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v144 
    #endif
    let v147 : std_path_Display = _run_target_args'_v124 
    (* run_target_args'
    let v160 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v161 : string = "format!(\"{}\", $0)"
    let v162 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v161 
    let _run_target_args'_v160 = v162 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : string = "format!(\"{}\", $0)"
    let v164 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v163 
    let _run_target_args'_v160 = v164 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v165 : string = "format!(\"{}\", $0)"
    let v166 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v165 
    let _run_target_args'_v160 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v168 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v176 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v176 
    #endif
#else
    let v180 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v180 
    #endif
    let v183 : std_string_String = _run_target_args'_v160 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v183 v192 
    let v194 : string = "true; $0 })"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr v193 v194 
    let v196 : string = "_optionm_map_"
    let v197 : string option = Fable.Core.RustInterop.emitRustExpr () v196 
    let _run_target_args'_v5 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v199 : string option = None
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v203 : string option = None
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v206 : string = "path"
    let v207 : IPathDirname = Fable.Core.JsInterop.importAll v206 
    let v208 : string = "v207.dirname($0)"
    let v209 : string = Fable.Core.JsInterop.emitJsExpr v0 v208 
    let v210 : bool = v209 = v0
    let v213 : US5 =
        if v210 then
            US5_1
        else
            US5_0(v209)
    let v224 : string option =
        match v213 with
        | US5_1 -> (* None *)
            let v220 : string option = None
            v220
        | US5_0(v214) -> (* Some *)
            let v216 : string option = Some v214 
            v216
    let _run_target_args'_v5 = v224 
    #endif
#if FABLE_COMPILER_PYTHON
    let v226 : string option = None
    let _run_target_args'_v5 = v226 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v230 : string option = None
    let _run_target_args'_v5 = v230 
    #endif
#else
    let v233 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v234 : System_IO_DirectoryInfo = v233 v0
    let v236 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v240 : bool = v234 = v236 
    let v285 : US5 =
        if v240 then
            US5_1
        else
            (* run_target_args'
            let v248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v250 : string = null |> unbox<string>
            let _run_target_args'_v248 = v250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v254 : string = null |> unbox<string>
            let _run_target_args'_v248 = v254 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v258 : string = null |> unbox<string>
            let _run_target_args'_v248 = v258 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : string = null |> unbox<string>
            let _run_target_args'_v248 = v262 
            #endif
#if FABLE_COMPILER_PYTHON
            let v266 : string = null |> unbox<string>
            let _run_target_args'_v248 = v266 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : string = null |> unbox<string>
            let _run_target_args'_v248 = v270 
            #endif
#else
            let v273 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v274 : string = v273 v234
            let _run_target_args'_v248 = v274 
            #endif
            let v275 : string = _run_target_args'_v248 
            US5_0(v275)
    let v296 : string option =
        match v285 with
        | US5_1 -> (* None *)
            let v292 : string option = None
            v292
        | US5_0(v286) -> (* Some *)
            let v288 : string option = Some v286 
            v288
    let _run_target_args'_v5 = v296 
    #endif
    let v297 : string option = _run_target_args'_v5 
    v297
and method39 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US13 =
    let v5 : string = method33(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US13_0(v4)
    else
        let v8 : string option = method38(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v32 : US5 = US5_1
        let v33 : US5 = v12 |> Option.defaultValue v32 
        match v33 with
        | US5_1 -> (* None *)
            let v39 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v40 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v41 : string = v39 + v40 
            US13_1(v41)
        | US5_0(v37) -> (* Some *)
            method39(v0, v1, v2, v3, v37)
and method37 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US13 =
    let v4 : string = method33(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US13_0(v1)
    else
        let v7 : string option = method38(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v31 : US5 = US5_1
        let v32 : US5 = v11 |> Option.defaultValue v31 
        match v32 with
        | US5_1 -> (* None *)
            let v38 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v39 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v40 : string = v38 + v39 
            US13_1(v40)
        | US5_0(v36) -> (* Some *)
            method39(v0, v1, v2, v3, v36)
and method34 (v0 : US12, v1 : string, v2 : string) : US13 =
    let v3 : bool =
        match v0 with
        | US12_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method37(v1, v2, v3, v6)
and method40 () : string =
    
    
    
    
    
    let v2 : string = "Warning"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_yellow"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v86 : string = "inline_colorization::color_reset"
    let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v87) v88 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let _run_target_args'_v47 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v92 : string = "inline_colorization::color_yellow"
    let v93 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v93, v121, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v47 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "inline_colorization::color_yellow"
    let v137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v136 
    (* run_target_args'
    let v142 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v143 : string = "&*$0"
    let v144 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v143 
    let _run_target_args'_v142 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "&*$0"
    let v146 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v145 
    let _run_target_args'_v142 = v146 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v147 : string = "&*$0"
    let v148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v147 
    let _run_target_args'_v142 = v148 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v154 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v154 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v158 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v158 
    #endif
#else
    let v162 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v162 
    #endif
    let v165 : Ref<Str> = _run_target_args'_v142 
    let v174 : string = "inline_colorization::color_reset"
    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v177 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v137, v165, v175) v176 
    let v178 : string = "fable_library_rust::String_::fromString($0)"
    let v179 : string = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let _run_target_args'_v47 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v181 : string = "\u001b[93m"
    let v185 : string = method14()
    let v189 : string = v181 + v30 
    let v193 : string = v189 + v185 
    let _run_target_args'_v47 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = "\u001b[93m"
    let v201 : string = method14()
    let v205 : string = v197 + v30 
    let v209 : string = v205 + v201 
    let _run_target_args'_v47 = v209 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v213 : string = "\u001b[93m"
    let v217 : string = method14()
    let v221 : string = v213 + v30 
    let v225 : string = v221 + v217 
    let _run_target_args'_v47 = v225 
    #endif
#else
    let v229 : string = "\u001b[93m"
    let v233 : string = method14()
    let v237 : string = v229 + v30 
    let v241 : string = v237 + v233 
    let _run_target_args'_v47 = v241 
    #endif
    let v244 : string = _run_target_args'_v47 
    v244
and method41 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "dir"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "error"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v9}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v11, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v177 : string = v11.l0
    let v178 : int64 = v0.l0
    let v181 : string = " "
    let v182 : string = v6 + v181 
    let v186 : string = v182 + v7 
    let v191 : string = " #"
    let v192 : string = v186 + v191 
    let v196 : (int64 -> string) = _.ToString()
    let v197 : string = v196 v178
    let v201 : string = v192 + v197 
    let v205 : string = v201 + v181 
    let v210 : string = "file_system.get_workspace_root"
    let v211 : string = v205 + v210 
    let v216 : string = " / "
    let v217 : string = v211 + v216 
    let v221 : string = v217 + v177 
    method16(v221)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method40()
        let v61 : string = method41(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and closure18 () (v0 : std_io_Error) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v46 : string = $"{v36}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v2, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v62 : string = v2.l0
    v62
and method45 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US14 =
    US14_0(v0)
and method46 () : (std_path_PathBuf -> US14) =
    closure19()
and closure20 () (v0 : string) : US14 =
    US14_1(v0)
and method47 () : (string -> US14) =
    closure20()
and method50 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v200 : US3 = US3_1
    let v201 : US4 = US4_4(v200)
    let v202 : string = $"file_system.get_file_name / target: {v201} / path: {v0}"
    let v203 : string = failwith<string> v202
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : string = "path"
    let v209 : IPathBasename = Fable.Core.JsInterop.importAll v208 
    let v210 : string = "v209.basename($0)"
    let v211 : string = Fable.Core.JsInterop.emitJsExpr v0 v210 
    let _run_target_args'_v5 = v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v212 : US3 = US3_0
    let v213 : US4 = US4_6(v212)
    let v214 : string = $"file_system.get_file_name / target: {v213} / path: {v0}"
    let v215 : string = failwith<string> v214
    let _run_target_args'_v5 = v215 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : US3 = US3_1
    let v217 : US4 = US4_1(v216)
    let v218 : string = $"file_system.get_file_name / target: {v217} / path: {v0}"
    let v219 : string = failwith<string> v218
    let _run_target_args'_v5 = v219 
    #endif
#else
    let v220 : (string -> string) = System.IO.Path.GetFileName
    let v221 : string = v220 v0
    let _run_target_args'_v5 = v221 
    #endif
    let v222 : string = _run_target_args'_v5 
    v222
and method49 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method50(v4)
    let v6 : string option = method38(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method13()
    let v36 : Mut3 = {l0 = v35} : Mut3
    let v38 : string = $"{v3}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v36, v38)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v54 : string = v36.l0
    let v55 : bool = v2 >= 11uy
    if v55 then
        let v56 : string = $"file_system.read_link / "
        let v57 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v58 : string = v56 + v57 
        (* run_target_args'
        let v63 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v64 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v65 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v58 v64 
        let _run_target_args'_v63 = v65 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v66 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v67 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v58 v66 
        let _run_target_args'_v63 = v67 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v68 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v69 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v58 v68 
        let _run_target_args'_v63 = v69 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v71 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v71 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v75 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v79 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v79 
        #endif
#else
        let v83 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v83 
        #endif
        let v86 : std_io_Error = _run_target_args'_v63 
        (* run_target_args'
        let v96 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v97 : string = "Err($0)"
        let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v97 
        let _run_target_args'_v96 = v98 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v99 : string = "Err($0)"
        let v100 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v99 
        let _run_target_args'_v96 = v100 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v101 : string = "Err($0)"
        let v102 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v101 
        let _run_target_args'_v96 = v102 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v103 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v96 = v103 
        #endif
#if FABLE_COMPILER_PYTHON
        let v104 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v96 = v104 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v105 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v96 = v105 
        #endif
#else
        let v106 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v96 = v106 
        #endif
        let v107 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v96 
        v107
    else
        match v31 with
        | US5_0(v110) -> (* Some *)
            let v113 : string = ""
            let v114 : bool = v4 <> v113 
            if v114 then
                let v117 : uint8 = v2 + 1uy
                let v118 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v117
                let v119 : Result<std_path_PathBuf, std_io_Error> = v118 v110
                let v120 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v122 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v123 : string = "$0.map_err(|x| $1(x))"
                let v124 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v119, v120) v123 
                let _run_target_args'_v122 = v124 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v125 : string = "$0.map_err(|x| $1(x))"
                let v126 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v119, v120) v125 
                let _run_target_args'_v122 = v126 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v127 : string = "$0.map_err(|x| $1(x))"
                let v128 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v119, v120) v127 
                let _run_target_args'_v122 = v128 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v129 : Result<std_path_PathBuf, string> = match v119 with Ok x -> Ok x | Error x -> Error (v120 x)
                let _run_target_args'_v122 = v129 
                #endif
#if FABLE_COMPILER_PYTHON
                let v130 : Result<std_path_PathBuf, string> = match v119 with Ok x -> Ok x | Error x -> Error (v120 x)
                let _run_target_args'_v122 = v130 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v131 : Result<std_path_PathBuf, string> = match v119 with Ok x -> Ok x | Error x -> Error (v120 x)
                let _run_target_args'_v122 = v131 
                #endif
#else
                let v132 : Result<std_path_PathBuf, string> = match v119 with Ok x -> Ok x | Error x -> Error (v120 x)
                let _run_target_args'_v122 = v132 
                #endif
                let v133 : Result<std_path_PathBuf, string> = _run_target_args'_v122 
                let v136 : (std_path_PathBuf -> US14) = method46()
                let v137 : (string -> US14) = method47()
                let v139 : US14 = match v133 with Ok x -> v136 x | Error x -> v137 x
                match v139 with
                | US14_1(v307) -> (* Error *)
                    let v308 : string = $"file_system.read_link / "
                    let v309 : string = $"error': {v307} / error: {v54} / name: {v5}"
                    let v310 : string = v308 + v309 
                    (* run_target_args'
                    let v315 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v316 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v317 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v310 v316 
                    let _run_target_args'_v315 = v317 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v318 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v319 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v310 v318 
                    let _run_target_args'_v315 = v319 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v320 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v321 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v310 v320 
                    let _run_target_args'_v315 = v321 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v323 : std_io_Error = v310 |> unbox<std_io_Error>
                    let _run_target_args'_v315 = v323 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v327 : std_io_Error = v310 |> unbox<std_io_Error>
                    let _run_target_args'_v315 = v327 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v331 : std_io_Error = v310 |> unbox<std_io_Error>
                    let _run_target_args'_v315 = v331 
                    #endif
#else
                    let v335 : std_io_Error = v310 |> unbox<std_io_Error>
                    let _run_target_args'_v315 = v335 
                    #endif
                    let v338 : std_io_Error = _run_target_args'_v315 
                    (* run_target_args'
                    let v348 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v349 : string = "Err($0)"
                    let v350 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v338 v349 
                    let _run_target_args'_v348 = v350 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v351 : string = "Err($0)"
                    let v352 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v338 v351 
                    let _run_target_args'_v348 = v352 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v353 : string = "Err($0)"
                    let v354 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v338 v353 
                    let _run_target_args'_v348 = v354 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v355 : Result<std_path_PathBuf, std_io_Error> = v338 |> Error
                    let _run_target_args'_v348 = v355 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v356 : Result<std_path_PathBuf, std_io_Error> = v338 |> Error
                    let _run_target_args'_v348 = v356 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v357 : Result<std_path_PathBuf, std_io_Error> = v338 |> Error
                    let _run_target_args'_v348 = v357 
                    #endif
#else
                    let v358 : Result<std_path_PathBuf, std_io_Error> = v338 |> Error
                    let _run_target_args'_v348 = v358 
                    #endif
                    let v359 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v348 
                    v359
                | US14_0(v142) -> (* Ok *)
                    (* run_target_args'
                    let v147 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v148 : string = "$0.display()"
                    let v149 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v142 v148 
                    let _run_target_args'_v147 = v149 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v150 : string = "$0.display()"
                    let v151 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v142 v150 
                    let _run_target_args'_v147 = v151 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v152 : string = "$0.display()"
                    let v153 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v142 v152 
                    let _run_target_args'_v147 = v153 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v155 : std_path_Display = v142 |> unbox<std_path_Display>
                    let _run_target_args'_v147 = v155 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v159 : std_path_Display = v142 |> unbox<std_path_Display>
                    let _run_target_args'_v147 = v159 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v163 : std_path_Display = v142 |> unbox<std_path_Display>
                    let _run_target_args'_v147 = v163 
                    #endif
#else
                    let v167 : std_path_Display = v142 |> unbox<std_path_Display>
                    let _run_target_args'_v147 = v167 
                    #endif
                    let v170 : std_path_Display = _run_target_args'_v147 
                    let v180 : string = v170 |> string 
                    let v183 : string = method33(v180, v5)
                    (* run_target_args'
                    let v188 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v189 : string = "&*$0"
                    let v190 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v189 
                    let _run_target_args'_v188 = v190 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v191 : string = "&*$0"
                    let v192 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v191 
                    let _run_target_args'_v188 = v192 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v193 : string = "&*$0"
                    let v194 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v193 
                    let _run_target_args'_v188 = v194 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v196 : Ref<Str> = v183 |> unbox<Ref<Str>>
                    let _run_target_args'_v188 = v196 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v200 : Ref<Str> = v183 |> unbox<Ref<Str>>
                    let _run_target_args'_v188 = v200 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v204 : Ref<Str> = v183 |> unbox<Ref<Str>>
                    let _run_target_args'_v188 = v204 
                    #endif
#else
                    let v208 : Ref<Str> = v183 |> unbox<Ref<Str>>
                    let _run_target_args'_v188 = v208 
                    #endif
                    let v211 : Ref<Str> = _run_target_args'_v188 
                    (* run_target_args'
                    let v224 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v225 : string = "String::from($0)"
                    let v226 : std_string_String = Fable.Core.RustInterop.emitRustExpr v211 v225 
                    let _run_target_args'_v224 = v226 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v227 : string = "String::from($0)"
                    let v228 : std_string_String = Fable.Core.RustInterop.emitRustExpr v211 v227 
                    let _run_target_args'_v224 = v228 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v229 : string = "String::from($0)"
                    let v230 : std_string_String = Fable.Core.RustInterop.emitRustExpr v211 v229 
                    let _run_target_args'_v224 = v230 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v232 : std_string_String = v211 |> unbox<std_string_String>
                    let _run_target_args'_v224 = v232 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v236 : std_string_String = v211 |> unbox<std_string_String>
                    let _run_target_args'_v224 = v236 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v240 : std_string_String = v211 |> unbox<std_string_String>
                    let _run_target_args'_v224 = v240 
                    #endif
#else
                    let v244 : std_string_String = v211 |> unbox<std_string_String>
                    let _run_target_args'_v224 = v244 
                    #endif
                    let v247 : std_string_String = _run_target_args'_v224 
                    (* run_target_args'
                    let v260 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v261 : string = "std::path::PathBuf::from($0)"
                    let v262 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v247 v261 
                    let _run_target_args'_v260 = v262 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v263 : string = "std::path::PathBuf::from($0)"
                    let v264 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v247 v263 
                    let _run_target_args'_v260 = v264 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v265 : string = "std::path::PathBuf::from($0)"
                    let v266 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v247 v265 
                    let _run_target_args'_v260 = v266 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v268 : std_path_PathBuf = v247 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v260 = v268 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v272 : std_path_PathBuf = v247 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v260 = v272 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v276 : std_path_PathBuf = v247 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v260 = v276 
                    #endif
#else
                    let v280 : std_path_PathBuf = v247 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v260 = v280 
                    #endif
                    let v283 : std_path_PathBuf = _run_target_args'_v260 
                    (* run_target_args'
                    let v293 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v294 : string = "Ok($0)"
                    let v295 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v283 v294 
                    let _run_target_args'_v293 = v295 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v296 : string = "Ok($0)"
                    let v297 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v283 v296 
                    let _run_target_args'_v293 = v297 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v298 : string = "Ok($0)"
                    let v299 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v283 v298 
                    let _run_target_args'_v293 = v299 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v300 : Result<std_path_PathBuf, std_io_Error> = v283 |> Ok
                    let _run_target_args'_v293 = v300 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v301 : Result<std_path_PathBuf, std_io_Error> = v283 |> Ok
                    let _run_target_args'_v293 = v301 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v302 : Result<std_path_PathBuf, std_io_Error> = v283 |> Ok
                    let _run_target_args'_v293 = v302 
                    #endif
#else
                    let v303 : Result<std_path_PathBuf, std_io_Error> = v283 |> Ok
                    let _run_target_args'_v293 = v303 
                    #endif
                    let v304 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v293 
                    v304
            else
                let v364 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v365 : string = $"path: {v0} / error: {v54} / path': {v4} / name: {v5}"
                let v366 : string = v364 + v365 
                (* run_target_args'
                let v371 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v372 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v373 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v366 v372 
                let _run_target_args'_v371 = v373 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v374 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v375 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v366 v374 
                let _run_target_args'_v371 = v375 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v376 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v377 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v366 v376 
                let _run_target_args'_v371 = v377 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v379 : std_io_Error = v366 |> unbox<std_io_Error>
                let _run_target_args'_v371 = v379 
                #endif
#if FABLE_COMPILER_PYTHON
                let v383 : std_io_Error = v366 |> unbox<std_io_Error>
                let _run_target_args'_v371 = v383 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : std_io_Error = v366 |> unbox<std_io_Error>
                let _run_target_args'_v371 = v387 
                #endif
#else
                let v391 : std_io_Error = v366 |> unbox<std_io_Error>
                let _run_target_args'_v371 = v391 
                #endif
                let v394 : std_io_Error = _run_target_args'_v371 
                (* run_target_args'
                let v404 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v405 : string = "Err($0)"
                let v406 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v394 v405 
                let _run_target_args'_v404 = v406 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v407 : string = "Err($0)"
                let v408 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v394 v407 
                let _run_target_args'_v404 = v408 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v409 : string = "Err($0)"
                let v410 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v394 v409 
                let _run_target_args'_v404 = v410 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v411 : Result<std_path_PathBuf, std_io_Error> = v394 |> Error
                let _run_target_args'_v404 = v411 
                #endif
#if FABLE_COMPILER_PYTHON
                let v412 : Result<std_path_PathBuf, std_io_Error> = v394 |> Error
                let _run_target_args'_v404 = v412 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v413 : Result<std_path_PathBuf, std_io_Error> = v394 |> Error
                let _run_target_args'_v404 = v413 
                #endif
#else
                let v414 : Result<std_path_PathBuf, std_io_Error> = v394 |> Error
                let _run_target_args'_v404 = v414 
                #endif
                let v415 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v404 
                v415
        | _ ->
            let v419 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v420 : string = $"path: {v0} / error: {v54} / path': {v4} / name: {v5}"
            let v421 : string = v419 + v420 
            (* run_target_args'
            let v426 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v427 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v428 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v421 v427 
            let _run_target_args'_v426 = v428 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v429 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v430 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v421 v429 
            let _run_target_args'_v426 = v430 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v431 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v432 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v421 v431 
            let _run_target_args'_v426 = v432 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v434 : std_io_Error = v421 |> unbox<std_io_Error>
            let _run_target_args'_v426 = v434 
            #endif
#if FABLE_COMPILER_PYTHON
            let v438 : std_io_Error = v421 |> unbox<std_io_Error>
            let _run_target_args'_v426 = v438 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v442 : std_io_Error = v421 |> unbox<std_io_Error>
            let _run_target_args'_v426 = v442 
            #endif
#else
            let v446 : std_io_Error = v421 |> unbox<std_io_Error>
            let _run_target_args'_v426 = v446 
            #endif
            let v449 : std_io_Error = _run_target_args'_v426 
            (* run_target_args'
            let v459 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v460 : string = "Err($0)"
            let v461 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v449 v460 
            let _run_target_args'_v459 = v461 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v462 : string = "Err($0)"
            let v463 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v449 v462 
            let _run_target_args'_v459 = v463 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v464 : string = "Err($0)"
            let v465 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v449 v464 
            let _run_target_args'_v459 = v465 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v466 : Result<std_path_PathBuf, std_io_Error> = v449 |> Error
            let _run_target_args'_v459 = v466 
            #endif
#if FABLE_COMPILER_PYTHON
            let v467 : Result<std_path_PathBuf, std_io_Error> = v449 |> Error
            let _run_target_args'_v459 = v467 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v468 : Result<std_path_PathBuf, std_io_Error> = v449 |> Error
            let _run_target_args'_v459 = v468 
            #endif
#else
            let v469 : Result<std_path_PathBuf, std_io_Error> = v449 |> Error
            let _run_target_args'_v459 = v469 
            #endif
            let v470 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v459 
            v470
and method48 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US14) = method46()
    let v27 : (string -> US14) = method47()
    let v29 : US14 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US14_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method49(v0, v49, v1, v48, v2)
        | US14_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US14) = method46()
    let v72 : (string -> US14) = method47()
    let v74 : US14 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US14_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method49(v0, v94, v1, v93, v2)
        | US14_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US14) = method46()
    let v117 : (string -> US14) = method47()
    let v119 : US14 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US14_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method49(v0, v139, v1, v138, v2)
        | US14_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method48(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method51 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method50(v0)
    let v5 : string option = method38(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method13()
    let v35 : Mut3 = {l0 = v34} : Mut3
    let v37 : string = $"{v3}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v35, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v53 : string = v35.l0
    let v54 : bool = v2 >= 11uy
    if v54 then
        let v55 : string = $"file_system.read_link / "
        let v56 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v57 : string = v55 + v56 
        (* run_target_args'
        let v62 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v63 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v64 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v57 v63 
        let _run_target_args'_v62 = v64 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v65 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v66 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v57 v65 
        let _run_target_args'_v62 = v66 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v67 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v68 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v57 v67 
        let _run_target_args'_v62 = v68 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v70 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v70 
        #endif
#if FABLE_COMPILER_PYTHON
        let v74 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v74 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v78 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v78 
        #endif
#else
        let v82 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v82 
        #endif
        let v85 : std_io_Error = _run_target_args'_v62 
        (* run_target_args'
        let v95 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v96 : string = "Err($0)"
        let v97 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v96 
        let _run_target_args'_v95 = v97 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v98 : string = "Err($0)"
        let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v98 
        let _run_target_args'_v95 = v99 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v100 : string = "Err($0)"
        let v101 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v100 
        let _run_target_args'_v95 = v101 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v102 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v95 = v102 
        #endif
#if FABLE_COMPILER_PYTHON
        let v103 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v95 = v103 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v104 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v95 = v104 
        #endif
#else
        let v105 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v95 = v105 
        #endif
        let v106 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v95 
        v106
    else
        match v30 with
        | US5_0(v109) -> (* Some *)
            let v112 : string = ""
            let v113 : bool = v0 <> v112 
            if v113 then
                let v116 : uint8 = v2 + 1uy
                let v117 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v116
                let v118 : Result<std_path_PathBuf, std_io_Error> = v117 v109
                let v119 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v121 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v122 : string = "$0.map_err(|x| $1(x))"
                let v123 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v118, v119) v122 
                let _run_target_args'_v121 = v123 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v124 : string = "$0.map_err(|x| $1(x))"
                let v125 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v118, v119) v124 
                let _run_target_args'_v121 = v125 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v126 : string = "$0.map_err(|x| $1(x))"
                let v127 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v118, v119) v126 
                let _run_target_args'_v121 = v127 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v128 : Result<std_path_PathBuf, string> = match v118 with Ok x -> Ok x | Error x -> Error (v119 x)
                let _run_target_args'_v121 = v128 
                #endif
#if FABLE_COMPILER_PYTHON
                let v129 : Result<std_path_PathBuf, string> = match v118 with Ok x -> Ok x | Error x -> Error (v119 x)
                let _run_target_args'_v121 = v129 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v130 : Result<std_path_PathBuf, string> = match v118 with Ok x -> Ok x | Error x -> Error (v119 x)
                let _run_target_args'_v121 = v130 
                #endif
#else
                let v131 : Result<std_path_PathBuf, string> = match v118 with Ok x -> Ok x | Error x -> Error (v119 x)
                let _run_target_args'_v121 = v131 
                #endif
                let v132 : Result<std_path_PathBuf, string> = _run_target_args'_v121 
                let v135 : (std_path_PathBuf -> US14) = method46()
                let v136 : (string -> US14) = method47()
                let v138 : US14 = match v132 with Ok x -> v135 x | Error x -> v136 x
                match v138 with
                | US14_1(v306) -> (* Error *)
                    let v307 : string = $"file_system.read_link / "
                    let v308 : string = $"error': {v306} / error: {v53} / name: {v4}"
                    let v309 : string = v307 + v308 
                    (* run_target_args'
                    let v314 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v315 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v316 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v309 v315 
                    let _run_target_args'_v314 = v316 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v317 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v318 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v309 v317 
                    let _run_target_args'_v314 = v318 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v319 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v320 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v309 v319 
                    let _run_target_args'_v314 = v320 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v322 : std_io_Error = v309 |> unbox<std_io_Error>
                    let _run_target_args'_v314 = v322 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v326 : std_io_Error = v309 |> unbox<std_io_Error>
                    let _run_target_args'_v314 = v326 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v330 : std_io_Error = v309 |> unbox<std_io_Error>
                    let _run_target_args'_v314 = v330 
                    #endif
#else
                    let v334 : std_io_Error = v309 |> unbox<std_io_Error>
                    let _run_target_args'_v314 = v334 
                    #endif
                    let v337 : std_io_Error = _run_target_args'_v314 
                    (* run_target_args'
                    let v347 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v348 : string = "Err($0)"
                    let v349 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v337 v348 
                    let _run_target_args'_v347 = v349 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v350 : string = "Err($0)"
                    let v351 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v337 v350 
                    let _run_target_args'_v347 = v351 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v352 : string = "Err($0)"
                    let v353 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v337 v352 
                    let _run_target_args'_v347 = v353 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v354 : Result<std_path_PathBuf, std_io_Error> = v337 |> Error
                    let _run_target_args'_v347 = v354 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v355 : Result<std_path_PathBuf, std_io_Error> = v337 |> Error
                    let _run_target_args'_v347 = v355 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v356 : Result<std_path_PathBuf, std_io_Error> = v337 |> Error
                    let _run_target_args'_v347 = v356 
                    #endif
#else
                    let v357 : Result<std_path_PathBuf, std_io_Error> = v337 |> Error
                    let _run_target_args'_v347 = v357 
                    #endif
                    let v358 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v347 
                    v358
                | US14_0(v141) -> (* Ok *)
                    (* run_target_args'
                    let v146 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v147 : string = "$0.display()"
                    let v148 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v141 v147 
                    let _run_target_args'_v146 = v148 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v149 : string = "$0.display()"
                    let v150 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v141 v149 
                    let _run_target_args'_v146 = v150 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v151 : string = "$0.display()"
                    let v152 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v141 v151 
                    let _run_target_args'_v146 = v152 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v154 : std_path_Display = v141 |> unbox<std_path_Display>
                    let _run_target_args'_v146 = v154 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v158 : std_path_Display = v141 |> unbox<std_path_Display>
                    let _run_target_args'_v146 = v158 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v162 : std_path_Display = v141 |> unbox<std_path_Display>
                    let _run_target_args'_v146 = v162 
                    #endif
#else
                    let v166 : std_path_Display = v141 |> unbox<std_path_Display>
                    let _run_target_args'_v146 = v166 
                    #endif
                    let v169 : std_path_Display = _run_target_args'_v146 
                    let v179 : string = v169 |> string 
                    let v182 : string = method33(v179, v4)
                    (* run_target_args'
                    let v187 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v188 : string = "&*$0"
                    let v189 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v182 v188 
                    let _run_target_args'_v187 = v189 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v190 : string = "&*$0"
                    let v191 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v182 v190 
                    let _run_target_args'_v187 = v191 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v192 : string = "&*$0"
                    let v193 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v182 v192 
                    let _run_target_args'_v187 = v193 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v195 : Ref<Str> = v182 |> unbox<Ref<Str>>
                    let _run_target_args'_v187 = v195 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v199 : Ref<Str> = v182 |> unbox<Ref<Str>>
                    let _run_target_args'_v187 = v199 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v203 : Ref<Str> = v182 |> unbox<Ref<Str>>
                    let _run_target_args'_v187 = v203 
                    #endif
#else
                    let v207 : Ref<Str> = v182 |> unbox<Ref<Str>>
                    let _run_target_args'_v187 = v207 
                    #endif
                    let v210 : Ref<Str> = _run_target_args'_v187 
                    (* run_target_args'
                    let v223 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v224 : string = "String::from($0)"
                    let v225 : std_string_String = Fable.Core.RustInterop.emitRustExpr v210 v224 
                    let _run_target_args'_v223 = v225 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v226 : string = "String::from($0)"
                    let v227 : std_string_String = Fable.Core.RustInterop.emitRustExpr v210 v226 
                    let _run_target_args'_v223 = v227 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v228 : string = "String::from($0)"
                    let v229 : std_string_String = Fable.Core.RustInterop.emitRustExpr v210 v228 
                    let _run_target_args'_v223 = v229 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v231 : std_string_String = v210 |> unbox<std_string_String>
                    let _run_target_args'_v223 = v231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v235 : std_string_String = v210 |> unbox<std_string_String>
                    let _run_target_args'_v223 = v235 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v239 : std_string_String = v210 |> unbox<std_string_String>
                    let _run_target_args'_v223 = v239 
                    #endif
#else
                    let v243 : std_string_String = v210 |> unbox<std_string_String>
                    let _run_target_args'_v223 = v243 
                    #endif
                    let v246 : std_string_String = _run_target_args'_v223 
                    (* run_target_args'
                    let v259 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v260 : string = "std::path::PathBuf::from($0)"
                    let v261 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v246 v260 
                    let _run_target_args'_v259 = v261 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v262 : string = "std::path::PathBuf::from($0)"
                    let v263 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v246 v262 
                    let _run_target_args'_v259 = v263 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v264 : string = "std::path::PathBuf::from($0)"
                    let v265 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v246 v264 
                    let _run_target_args'_v259 = v265 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v267 : std_path_PathBuf = v246 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v259 = v267 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v271 : std_path_PathBuf = v246 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v259 = v271 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v275 : std_path_PathBuf = v246 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v259 = v275 
                    #endif
#else
                    let v279 : std_path_PathBuf = v246 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v259 = v279 
                    #endif
                    let v282 : std_path_PathBuf = _run_target_args'_v259 
                    (* run_target_args'
                    let v292 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v293 : string = "Ok($0)"
                    let v294 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v282 v293 
                    let _run_target_args'_v292 = v294 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v295 : string = "Ok($0)"
                    let v296 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v282 v295 
                    let _run_target_args'_v292 = v296 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v297 : string = "Ok($0)"
                    let v298 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v282 v297 
                    let _run_target_args'_v292 = v298 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v299 : Result<std_path_PathBuf, std_io_Error> = v282 |> Ok
                    let _run_target_args'_v292 = v299 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v300 : Result<std_path_PathBuf, std_io_Error> = v282 |> Ok
                    let _run_target_args'_v292 = v300 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v301 : Result<std_path_PathBuf, std_io_Error> = v282 |> Ok
                    let _run_target_args'_v292 = v301 
                    #endif
#else
                    let v302 : Result<std_path_PathBuf, std_io_Error> = v282 |> Ok
                    let _run_target_args'_v292 = v302 
                    #endif
                    let v303 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v292 
                    v303
            else
                let v363 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v364 : string = $"path: {v0} / error: {v53} / path': {v0} / name: {v4}"
                let v365 : string = v363 + v364 
                (* run_target_args'
                let v370 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v371 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v372 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v365 v371 
                let _run_target_args'_v370 = v372 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v373 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v374 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v365 v373 
                let _run_target_args'_v370 = v374 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v375 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v376 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v365 v375 
                let _run_target_args'_v370 = v376 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v378 : std_io_Error = v365 |> unbox<std_io_Error>
                let _run_target_args'_v370 = v378 
                #endif
#if FABLE_COMPILER_PYTHON
                let v382 : std_io_Error = v365 |> unbox<std_io_Error>
                let _run_target_args'_v370 = v382 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v386 : std_io_Error = v365 |> unbox<std_io_Error>
                let _run_target_args'_v370 = v386 
                #endif
#else
                let v390 : std_io_Error = v365 |> unbox<std_io_Error>
                let _run_target_args'_v370 = v390 
                #endif
                let v393 : std_io_Error = _run_target_args'_v370 
                (* run_target_args'
                let v403 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v404 : string = "Err($0)"
                let v405 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v393 v404 
                let _run_target_args'_v403 = v405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v406 : string = "Err($0)"
                let v407 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v393 v406 
                let _run_target_args'_v403 = v407 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v408 : string = "Err($0)"
                let v409 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v393 v408 
                let _run_target_args'_v403 = v409 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v410 : Result<std_path_PathBuf, std_io_Error> = v393 |> Error
                let _run_target_args'_v403 = v410 
                #endif
#if FABLE_COMPILER_PYTHON
                let v411 : Result<std_path_PathBuf, std_io_Error> = v393 |> Error
                let _run_target_args'_v403 = v411 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v412 : Result<std_path_PathBuf, std_io_Error> = v393 |> Error
                let _run_target_args'_v403 = v412 
                #endif
#else
                let v413 : Result<std_path_PathBuf, std_io_Error> = v393 |> Error
                let _run_target_args'_v403 = v413 
                #endif
                let v414 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v403 
                v414
        | _ ->
            let v418 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v419 : string = $"path: {v0} / error: {v53} / path': {v0} / name: {v4}"
            let v420 : string = v418 + v419 
            (* run_target_args'
            let v425 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v426 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v427 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v420 v426 
            let _run_target_args'_v425 = v427 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v428 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v429 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v420 v428 
            let _run_target_args'_v425 = v429 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v430 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v431 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v420 v430 
            let _run_target_args'_v425 = v431 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v433 : std_io_Error = v420 |> unbox<std_io_Error>
            let _run_target_args'_v425 = v433 
            #endif
#if FABLE_COMPILER_PYTHON
            let v437 : std_io_Error = v420 |> unbox<std_io_Error>
            let _run_target_args'_v425 = v437 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v441 : std_io_Error = v420 |> unbox<std_io_Error>
            let _run_target_args'_v425 = v441 
            #endif
#else
            let v445 : std_io_Error = v420 |> unbox<std_io_Error>
            let _run_target_args'_v425 = v445 
            #endif
            let v448 : std_io_Error = _run_target_args'_v425 
            (* run_target_args'
            let v458 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v459 : string = "Err($0)"
            let v460 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v448 v459 
            let _run_target_args'_v458 = v460 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v461 : string = "Err($0)"
            let v462 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v448 v461 
            let _run_target_args'_v458 = v462 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v463 : string = "Err($0)"
            let v464 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v448 v463 
            let _run_target_args'_v458 = v464 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v465 : Result<std_path_PathBuf, std_io_Error> = v448 |> Error
            let _run_target_args'_v458 = v465 
            #endif
#if FABLE_COMPILER_PYTHON
            let v466 : Result<std_path_PathBuf, std_io_Error> = v448 |> Error
            let _run_target_args'_v458 = v466 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v467 : Result<std_path_PathBuf, std_io_Error> = v448 |> Error
            let _run_target_args'_v458 = v467 
            #endif
#else
            let v468 : Result<std_path_PathBuf, std_io_Error> = v448 |> Error
            let _run_target_args'_v458 = v468 
            #endif
            let v469 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v458 
            v469
and method44 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US14) = method46()
    let v26 : (string -> US14) = method47()
    let v28 : US14 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US14_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v48, v1, v47)
        | US14_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US14) = method46()
    let v71 : (string -> US14) = method47()
    let v73 : US14 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US14_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v93, v1, v92)
        | US14_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US14) = method46()
    let v116 : (string -> US14) = method47()
    let v118 : US14 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US14_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v138, v1, v137)
        | US14_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method53 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method54 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method55 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method57 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method50(v4)
    let v6 : string option = method38(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method13()
    let v36 : Mut3 = {l0 = v35} : Mut3
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v41 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "format!(\"{:#?}\", $0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v41 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : string = $"%A{v3}"
    let _run_target_args'_v41 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v3}"
    let _run_target_args'_v41 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : string = $"%A{v3}"
    let _run_target_args'_v41 = v63 
    #endif
#else
    let v67 : string = $"%A{v3}"
    let _run_target_args'_v41 = v67 
    #endif
    let v70 : string = _run_target_args'_v41 
    let v80 : string = $"{v70}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v36, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v36.l0
    let v97 : bool = v2 >= 11uy
    if v97 then
        let v98 : string = $"file_system.read_link / "
        let v99 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v100 : string = v98 + v99 
        (* run_target_args'
        let v105 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v106 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v107 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v100 v106 
        let _run_target_args'_v105 = v107 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v108 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v109 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v100 v108 
        let _run_target_args'_v105 = v109 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v110 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v111 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v100 v110 
        let _run_target_args'_v105 = v111 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v113 : std_io_Error = v100 |> unbox<std_io_Error>
        let _run_target_args'_v105 = v113 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : std_io_Error = v100 |> unbox<std_io_Error>
        let _run_target_args'_v105 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v121 : std_io_Error = v100 |> unbox<std_io_Error>
        let _run_target_args'_v105 = v121 
        #endif
#else
        let v125 : std_io_Error = v100 |> unbox<std_io_Error>
        let _run_target_args'_v105 = v125 
        #endif
        let v128 : std_io_Error = _run_target_args'_v105 
        (* run_target_args'
        let v138 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v139 : string = "Err($0)"
        let v140 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v128 v139 
        let _run_target_args'_v138 = v140 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v141 : string = "Err($0)"
        let v142 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v128 v141 
        let _run_target_args'_v138 = v142 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v143 : string = "Err($0)"
        let v144 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v128 v143 
        let _run_target_args'_v138 = v144 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v145 : Result<std_path_PathBuf, std_io_Error> = v128 |> Error
        let _run_target_args'_v138 = v145 
        #endif
#if FABLE_COMPILER_PYTHON
        let v146 : Result<std_path_PathBuf, std_io_Error> = v128 |> Error
        let _run_target_args'_v138 = v146 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v147 : Result<std_path_PathBuf, std_io_Error> = v128 |> Error
        let _run_target_args'_v138 = v147 
        #endif
#else
        let v148 : Result<std_path_PathBuf, std_io_Error> = v128 |> Error
        let _run_target_args'_v138 = v148 
        #endif
        let v149 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v138 
        v149
    else
        match v31 with
        | US5_0(v152) -> (* Some *)
            let v155 : string = ""
            let v156 : bool = v4 <> v155 
            if v156 then
                let v159 : uint8 = v2 + 1uy
                let v160 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v159
                let v161 : Result<std_path_PathBuf, std_io_Error> = v160 v152
                let v162 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v164 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v165 : string = "$0.map_err(|x| $1(x))"
                let v166 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v161, v162) v165 
                let _run_target_args'_v164 = v166 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v167 : string = "$0.map_err(|x| $1(x))"
                let v168 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v161, v162) v167 
                let _run_target_args'_v164 = v168 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v169 : string = "$0.map_err(|x| $1(x))"
                let v170 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v161, v162) v169 
                let _run_target_args'_v164 = v170 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v171 : Result<std_path_PathBuf, string> = match v161 with Ok x -> Ok x | Error x -> Error (v162 x)
                let _run_target_args'_v164 = v171 
                #endif
#if FABLE_COMPILER_PYTHON
                let v172 : Result<std_path_PathBuf, string> = match v161 with Ok x -> Ok x | Error x -> Error (v162 x)
                let _run_target_args'_v164 = v172 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v173 : Result<std_path_PathBuf, string> = match v161 with Ok x -> Ok x | Error x -> Error (v162 x)
                let _run_target_args'_v164 = v173 
                #endif
#else
                let v174 : Result<std_path_PathBuf, string> = match v161 with Ok x -> Ok x | Error x -> Error (v162 x)
                let _run_target_args'_v164 = v174 
                #endif
                let v175 : Result<std_path_PathBuf, string> = _run_target_args'_v164 
                let v178 : (std_path_PathBuf -> US14) = method46()
                let v179 : (string -> US14) = method47()
                let v181 : US14 = match v175 with Ok x -> v178 x | Error x -> v179 x
                match v181 with
                | US14_1(v349) -> (* Error *)
                    let v350 : string = $"file_system.read_link / "
                    let v351 : string = $"error': {v349} / error: {v96} / name: {v5}"
                    let v352 : string = v350 + v351 
                    (* run_target_args'
                    let v357 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v358 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v359 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v352 v358 
                    let _run_target_args'_v357 = v359 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v360 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v361 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v352 v360 
                    let _run_target_args'_v357 = v361 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v362 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v363 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v352 v362 
                    let _run_target_args'_v357 = v363 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v365 : std_io_Error = v352 |> unbox<std_io_Error>
                    let _run_target_args'_v357 = v365 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v369 : std_io_Error = v352 |> unbox<std_io_Error>
                    let _run_target_args'_v357 = v369 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v373 : std_io_Error = v352 |> unbox<std_io_Error>
                    let _run_target_args'_v357 = v373 
                    #endif
#else
                    let v377 : std_io_Error = v352 |> unbox<std_io_Error>
                    let _run_target_args'_v357 = v377 
                    #endif
                    let v380 : std_io_Error = _run_target_args'_v357 
                    (* run_target_args'
                    let v390 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v391 : string = "Err($0)"
                    let v392 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v380 v391 
                    let _run_target_args'_v390 = v392 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v393 : string = "Err($0)"
                    let v394 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v380 v393 
                    let _run_target_args'_v390 = v394 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v395 : string = "Err($0)"
                    let v396 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v380 v395 
                    let _run_target_args'_v390 = v396 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v397 : Result<std_path_PathBuf, std_io_Error> = v380 |> Error
                    let _run_target_args'_v390 = v397 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v398 : Result<std_path_PathBuf, std_io_Error> = v380 |> Error
                    let _run_target_args'_v390 = v398 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v399 : Result<std_path_PathBuf, std_io_Error> = v380 |> Error
                    let _run_target_args'_v390 = v399 
                    #endif
#else
                    let v400 : Result<std_path_PathBuf, std_io_Error> = v380 |> Error
                    let _run_target_args'_v390 = v400 
                    #endif
                    let v401 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v390 
                    v401
                | US14_0(v184) -> (* Ok *)
                    (* run_target_args'
                    let v189 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v190 : string = "$0.display()"
                    let v191 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v184 v190 
                    let _run_target_args'_v189 = v191 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v192 : string = "$0.display()"
                    let v193 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v184 v192 
                    let _run_target_args'_v189 = v193 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v194 : string = "$0.display()"
                    let v195 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v184 v194 
                    let _run_target_args'_v189 = v195 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v197 : std_path_Display = v184 |> unbox<std_path_Display>
                    let _run_target_args'_v189 = v197 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : std_path_Display = v184 |> unbox<std_path_Display>
                    let _run_target_args'_v189 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v205 : std_path_Display = v184 |> unbox<std_path_Display>
                    let _run_target_args'_v189 = v205 
                    #endif
#else
                    let v209 : std_path_Display = v184 |> unbox<std_path_Display>
                    let _run_target_args'_v189 = v209 
                    #endif
                    let v212 : std_path_Display = _run_target_args'_v189 
                    let v222 : string = v212 |> string 
                    let v225 : string = method33(v222, v5)
                    (* run_target_args'
                    let v230 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v231 : string = "&*$0"
                    let v232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v225 v231 
                    let _run_target_args'_v230 = v232 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v233 : string = "&*$0"
                    let v234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v225 v233 
                    let _run_target_args'_v230 = v234 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v235 : string = "&*$0"
                    let v236 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v225 v235 
                    let _run_target_args'_v230 = v236 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v238 : Ref<Str> = v225 |> unbox<Ref<Str>>
                    let _run_target_args'_v230 = v238 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v242 : Ref<Str> = v225 |> unbox<Ref<Str>>
                    let _run_target_args'_v230 = v242 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v246 : Ref<Str> = v225 |> unbox<Ref<Str>>
                    let _run_target_args'_v230 = v246 
                    #endif
#else
                    let v250 : Ref<Str> = v225 |> unbox<Ref<Str>>
                    let _run_target_args'_v230 = v250 
                    #endif
                    let v253 : Ref<Str> = _run_target_args'_v230 
                    (* run_target_args'
                    let v266 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v267 : string = "String::from($0)"
                    let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v253 v267 
                    let _run_target_args'_v266 = v268 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v269 : string = "String::from($0)"
                    let v270 : std_string_String = Fable.Core.RustInterop.emitRustExpr v253 v269 
                    let _run_target_args'_v266 = v270 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v271 : string = "String::from($0)"
                    let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v253 v271 
                    let _run_target_args'_v266 = v272 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v274 : std_string_String = v253 |> unbox<std_string_String>
                    let _run_target_args'_v266 = v274 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v278 : std_string_String = v253 |> unbox<std_string_String>
                    let _run_target_args'_v266 = v278 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : std_string_String = v253 |> unbox<std_string_String>
                    let _run_target_args'_v266 = v282 
                    #endif
#else
                    let v286 : std_string_String = v253 |> unbox<std_string_String>
                    let _run_target_args'_v266 = v286 
                    #endif
                    let v289 : std_string_String = _run_target_args'_v266 
                    (* run_target_args'
                    let v302 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v303 : string = "std::path::PathBuf::from($0)"
                    let v304 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v289 v303 
                    let _run_target_args'_v302 = v304 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v305 : string = "std::path::PathBuf::from($0)"
                    let v306 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v289 v305 
                    let _run_target_args'_v302 = v306 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v307 : string = "std::path::PathBuf::from($0)"
                    let v308 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v289 v307 
                    let _run_target_args'_v302 = v308 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v310 : std_path_PathBuf = v289 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v302 = v310 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v314 : std_path_PathBuf = v289 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v302 = v314 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v318 : std_path_PathBuf = v289 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v302 = v318 
                    #endif
#else
                    let v322 : std_path_PathBuf = v289 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v302 = v322 
                    #endif
                    let v325 : std_path_PathBuf = _run_target_args'_v302 
                    (* run_target_args'
                    let v335 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v336 : string = "Ok($0)"
                    let v337 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v325 v336 
                    let _run_target_args'_v335 = v337 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v338 : string = "Ok($0)"
                    let v339 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v325 v338 
                    let _run_target_args'_v335 = v339 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v340 : string = "Ok($0)"
                    let v341 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v325 v340 
                    let _run_target_args'_v335 = v341 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v342 : Result<std_path_PathBuf, std_io_Error> = v325 |> Ok
                    let _run_target_args'_v335 = v342 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v343 : Result<std_path_PathBuf, std_io_Error> = v325 |> Ok
                    let _run_target_args'_v335 = v343 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v344 : Result<std_path_PathBuf, std_io_Error> = v325 |> Ok
                    let _run_target_args'_v335 = v344 
                    #endif
#else
                    let v345 : Result<std_path_PathBuf, std_io_Error> = v325 |> Ok
                    let _run_target_args'_v335 = v345 
                    #endif
                    let v346 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v335 
                    v346
            else
                let v406 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v407 : string = $"path: {v0} / error: {v96} / path': {v4} / name: {v5}"
                let v408 : string = v406 + v407 
                (* run_target_args'
                let v413 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v414 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v415 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v408 v414 
                let _run_target_args'_v413 = v415 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v416 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v417 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v408 v416 
                let _run_target_args'_v413 = v417 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v418 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v419 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v408 v418 
                let _run_target_args'_v413 = v419 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v421 : std_io_Error = v408 |> unbox<std_io_Error>
                let _run_target_args'_v413 = v421 
                #endif
#if FABLE_COMPILER_PYTHON
                let v425 : std_io_Error = v408 |> unbox<std_io_Error>
                let _run_target_args'_v413 = v425 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v429 : std_io_Error = v408 |> unbox<std_io_Error>
                let _run_target_args'_v413 = v429 
                #endif
#else
                let v433 : std_io_Error = v408 |> unbox<std_io_Error>
                let _run_target_args'_v413 = v433 
                #endif
                let v436 : std_io_Error = _run_target_args'_v413 
                (* run_target_args'
                let v446 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v447 : string = "Err($0)"
                let v448 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v436 v447 
                let _run_target_args'_v446 = v448 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v449 : string = "Err($0)"
                let v450 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v436 v449 
                let _run_target_args'_v446 = v450 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v451 : string = "Err($0)"
                let v452 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v436 v451 
                let _run_target_args'_v446 = v452 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v453 : Result<std_path_PathBuf, std_io_Error> = v436 |> Error
                let _run_target_args'_v446 = v453 
                #endif
#if FABLE_COMPILER_PYTHON
                let v454 : Result<std_path_PathBuf, std_io_Error> = v436 |> Error
                let _run_target_args'_v446 = v454 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v455 : Result<std_path_PathBuf, std_io_Error> = v436 |> Error
                let _run_target_args'_v446 = v455 
                #endif
#else
                let v456 : Result<std_path_PathBuf, std_io_Error> = v436 |> Error
                let _run_target_args'_v446 = v456 
                #endif
                let v457 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v446 
                v457
        | _ ->
            let v461 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v462 : string = $"path: {v0} / error: {v96} / path': {v4} / name: {v5}"
            let v463 : string = v461 + v462 
            (* run_target_args'
            let v468 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v469 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v470 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v463 v469 
            let _run_target_args'_v468 = v470 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v471 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v472 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v463 v471 
            let _run_target_args'_v468 = v472 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v473 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v474 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v463 v473 
            let _run_target_args'_v468 = v474 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v476 : std_io_Error = v463 |> unbox<std_io_Error>
            let _run_target_args'_v468 = v476 
            #endif
#if FABLE_COMPILER_PYTHON
            let v480 : std_io_Error = v463 |> unbox<std_io_Error>
            let _run_target_args'_v468 = v480 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v484 : std_io_Error = v463 |> unbox<std_io_Error>
            let _run_target_args'_v468 = v484 
            #endif
#else
            let v488 : std_io_Error = v463 |> unbox<std_io_Error>
            let _run_target_args'_v468 = v488 
            #endif
            let v491 : std_io_Error = _run_target_args'_v468 
            (* run_target_args'
            let v501 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v502 : string = "Err($0)"
            let v503 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v491 v502 
            let _run_target_args'_v501 = v503 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v504 : string = "Err($0)"
            let v505 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v491 v504 
            let _run_target_args'_v501 = v505 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v506 : string = "Err($0)"
            let v507 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v491 v506 
            let _run_target_args'_v501 = v507 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v508 : Result<std_path_PathBuf, std_io_Error> = v491 |> Error
            let _run_target_args'_v501 = v508 
            #endif
#if FABLE_COMPILER_PYTHON
            let v509 : Result<std_path_PathBuf, std_io_Error> = v491 |> Error
            let _run_target_args'_v501 = v509 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v510 : Result<std_path_PathBuf, std_io_Error> = v491 |> Error
            let _run_target_args'_v501 = v510 
            #endif
#else
            let v511 : Result<std_path_PathBuf, std_io_Error> = v491 |> Error
            let _run_target_args'_v501 = v511 
            #endif
            let v512 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v501 
            v512
and method56 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v45 : System.IO.FileAttributes = method53(v36)
    let v46 : System.IO.FileAttributes = method54()
    let v47 : bool = method55(v46, v45)
    if v47 then
        (* run_target_args'
        let v52 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v58 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v62 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v66 
        #endif
#if FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v70 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v74 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v74 
        #endif
#else
        let v78 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v52 = v78 
        #endif
        let v81 : System_IO_FileInfo = _run_target_args'_v52 
        (* run_target_args'
        let v94 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v96 : string = null |> unbox<string>
        let _run_target_args'_v94 = v96 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v100 : string = null |> unbox<string>
        let _run_target_args'_v94 = v100 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v104 : string = null |> unbox<string>
        let _run_target_args'_v94 = v104 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v108 : string = null |> unbox<string>
        let _run_target_args'_v94 = v108 
        #endif
#if FABLE_COMPILER_PYTHON
        let v112 : string = null |> unbox<string>
        let _run_target_args'_v94 = v112 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v116 : string = null |> unbox<string>
        let _run_target_args'_v94 = v116 
        #endif
#else
        let v119 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v120 : string = v119 v81
        let _run_target_args'_v94 = v120 
        #endif
        let v121 : string = _run_target_args'_v94 
        let v131 : std_path_PathBuf = v121 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v135 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v136 : string = "Ok($0)"
        let v137 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v136 
        let _run_target_args'_v135 = v137 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v138 : string = "Ok($0)"
        let v139 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v138 
        let _run_target_args'_v135 = v139 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v140 : string = "Ok($0)"
        let v141 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v140 
        let _run_target_args'_v135 = v141 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v142 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v142 
        #endif
#if FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v143 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v144 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v144 
        #endif
#else
        let v145 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v145 
        #endif
        let v146 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v135 
        v146
    else
        let v149 : string = $"file_system.read_link / Fsharp / "
        let v150 : string = $"The file or directory is not a reparse point. / "
        let v151 : string = v149 + v150 
        let v152 : string = $"path: {v0} / result: {v47} / path': {v2} / n: {v1}"
        let v153 : string = v151 + v152 
        (* run_target_args'
        let v158 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v159 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v160 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v159 
        let _run_target_args'_v158 = v160 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v161 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v162 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v161 
        let _run_target_args'_v158 = v162 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v163 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v164 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v163 
        let _run_target_args'_v158 = v164 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v166 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v166 
        #endif
#if FABLE_COMPILER_PYTHON
        let v170 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v170 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v174 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v174 
        #endif
#else
        let v178 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v178 
        #endif
        let v181 : std_io_Error = _run_target_args'_v158 
        let v190 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method57(v0, v190, v1, v181, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method56(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method58 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method50(v0)
    let v5 : string option = method38(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method13()
    let v35 : Mut3 = {l0 = v34} : Mut3
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v3}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v3}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v3}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v3}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v79 : string = $"{v69}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v35, v79)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v95 : string = v35.l0
    let v96 : bool = v2 >= 11uy
    if v96 then
        let v97 : string = $"file_system.read_link / "
        let v98 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v99 : string = v97 + v98 
        (* run_target_args'
        let v104 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v106 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v99 v105 
        let _run_target_args'_v104 = v106 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v107 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v108 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v99 v107 
        let _run_target_args'_v104 = v108 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v109 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v110 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v99 v109 
        let _run_target_args'_v104 = v110 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v112 : std_io_Error = v99 |> unbox<std_io_Error>
        let _run_target_args'_v104 = v112 
        #endif
#if FABLE_COMPILER_PYTHON
        let v116 : std_io_Error = v99 |> unbox<std_io_Error>
        let _run_target_args'_v104 = v116 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : std_io_Error = v99 |> unbox<std_io_Error>
        let _run_target_args'_v104 = v120 
        #endif
#else
        let v124 : std_io_Error = v99 |> unbox<std_io_Error>
        let _run_target_args'_v104 = v124 
        #endif
        let v127 : std_io_Error = _run_target_args'_v104 
        (* run_target_args'
        let v137 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v138 : string = "Err($0)"
        let v139 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v127 v138 
        let _run_target_args'_v137 = v139 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v140 : string = "Err($0)"
        let v141 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v127 v140 
        let _run_target_args'_v137 = v141 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v142 : string = "Err($0)"
        let v143 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v127 v142 
        let _run_target_args'_v137 = v143 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v144 : Result<std_path_PathBuf, std_io_Error> = v127 |> Error
        let _run_target_args'_v137 = v144 
        #endif
#if FABLE_COMPILER_PYTHON
        let v145 : Result<std_path_PathBuf, std_io_Error> = v127 |> Error
        let _run_target_args'_v137 = v145 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v146 : Result<std_path_PathBuf, std_io_Error> = v127 |> Error
        let _run_target_args'_v137 = v146 
        #endif
#else
        let v147 : Result<std_path_PathBuf, std_io_Error> = v127 |> Error
        let _run_target_args'_v137 = v147 
        #endif
        let v148 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v137 
        v148
    else
        match v30 with
        | US5_0(v151) -> (* Some *)
            let v154 : string = ""
            let v155 : bool = v0 <> v154 
            if v155 then
                let v158 : uint8 = v2 + 1uy
                let v159 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v158
                let v160 : Result<std_path_PathBuf, std_io_Error> = v159 v151
                let v161 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v163 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v164 : string = "$0.map_err(|x| $1(x))"
                let v165 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v160, v161) v164 
                let _run_target_args'_v163 = v165 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v166 : string = "$0.map_err(|x| $1(x))"
                let v167 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v160, v161) v166 
                let _run_target_args'_v163 = v167 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v168 : string = "$0.map_err(|x| $1(x))"
                let v169 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v160, v161) v168 
                let _run_target_args'_v163 = v169 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v170 : Result<std_path_PathBuf, string> = match v160 with Ok x -> Ok x | Error x -> Error (v161 x)
                let _run_target_args'_v163 = v170 
                #endif
#if FABLE_COMPILER_PYTHON
                let v171 : Result<std_path_PathBuf, string> = match v160 with Ok x -> Ok x | Error x -> Error (v161 x)
                let _run_target_args'_v163 = v171 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v172 : Result<std_path_PathBuf, string> = match v160 with Ok x -> Ok x | Error x -> Error (v161 x)
                let _run_target_args'_v163 = v172 
                #endif
#else
                let v173 : Result<std_path_PathBuf, string> = match v160 with Ok x -> Ok x | Error x -> Error (v161 x)
                let _run_target_args'_v163 = v173 
                #endif
                let v174 : Result<std_path_PathBuf, string> = _run_target_args'_v163 
                let v177 : (std_path_PathBuf -> US14) = method46()
                let v178 : (string -> US14) = method47()
                let v180 : US14 = match v174 with Ok x -> v177 x | Error x -> v178 x
                match v180 with
                | US14_1(v348) -> (* Error *)
                    let v349 : string = $"file_system.read_link / "
                    let v350 : string = $"error': {v348} / error: {v95} / name: {v4}"
                    let v351 : string = v349 + v350 
                    (* run_target_args'
                    let v356 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v351 v357 
                    let _run_target_args'_v356 = v358 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v359 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v360 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v351 v359 
                    let _run_target_args'_v356 = v360 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v361 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v362 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v351 v361 
                    let _run_target_args'_v356 = v362 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v364 : std_io_Error = v351 |> unbox<std_io_Error>
                    let _run_target_args'_v356 = v364 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v368 : std_io_Error = v351 |> unbox<std_io_Error>
                    let _run_target_args'_v356 = v368 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v372 : std_io_Error = v351 |> unbox<std_io_Error>
                    let _run_target_args'_v356 = v372 
                    #endif
#else
                    let v376 : std_io_Error = v351 |> unbox<std_io_Error>
                    let _run_target_args'_v356 = v376 
                    #endif
                    let v379 : std_io_Error = _run_target_args'_v356 
                    (* run_target_args'
                    let v389 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v390 : string = "Err($0)"
                    let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v379 v390 
                    let _run_target_args'_v389 = v391 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v392 : string = "Err($0)"
                    let v393 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v379 v392 
                    let _run_target_args'_v389 = v393 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v394 : string = "Err($0)"
                    let v395 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v379 v394 
                    let _run_target_args'_v389 = v395 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v396 : Result<std_path_PathBuf, std_io_Error> = v379 |> Error
                    let _run_target_args'_v389 = v396 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v397 : Result<std_path_PathBuf, std_io_Error> = v379 |> Error
                    let _run_target_args'_v389 = v397 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v398 : Result<std_path_PathBuf, std_io_Error> = v379 |> Error
                    let _run_target_args'_v389 = v398 
                    #endif
#else
                    let v399 : Result<std_path_PathBuf, std_io_Error> = v379 |> Error
                    let _run_target_args'_v389 = v399 
                    #endif
                    let v400 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v389 
                    v400
                | US14_0(v183) -> (* Ok *)
                    (* run_target_args'
                    let v188 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v189 : string = "$0.display()"
                    let v190 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v183 v189 
                    let _run_target_args'_v188 = v190 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v191 : string = "$0.display()"
                    let v192 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v183 v191 
                    let _run_target_args'_v188 = v192 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v193 : string = "$0.display()"
                    let v194 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v183 v193 
                    let _run_target_args'_v188 = v194 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v196 : std_path_Display = v183 |> unbox<std_path_Display>
                    let _run_target_args'_v188 = v196 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v200 : std_path_Display = v183 |> unbox<std_path_Display>
                    let _run_target_args'_v188 = v200 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v204 : std_path_Display = v183 |> unbox<std_path_Display>
                    let _run_target_args'_v188 = v204 
                    #endif
#else
                    let v208 : std_path_Display = v183 |> unbox<std_path_Display>
                    let _run_target_args'_v188 = v208 
                    #endif
                    let v211 : std_path_Display = _run_target_args'_v188 
                    let v221 : string = v211 |> string 
                    let v224 : string = method33(v221, v4)
                    (* run_target_args'
                    let v229 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v230 : string = "&*$0"
                    let v231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v224 v230 
                    let _run_target_args'_v229 = v231 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v232 : string = "&*$0"
                    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v224 v232 
                    let _run_target_args'_v229 = v233 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v234 : string = "&*$0"
                    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v224 v234 
                    let _run_target_args'_v229 = v235 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v237 : Ref<Str> = v224 |> unbox<Ref<Str>>
                    let _run_target_args'_v229 = v237 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v241 : Ref<Str> = v224 |> unbox<Ref<Str>>
                    let _run_target_args'_v229 = v241 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v245 : Ref<Str> = v224 |> unbox<Ref<Str>>
                    let _run_target_args'_v229 = v245 
                    #endif
#else
                    let v249 : Ref<Str> = v224 |> unbox<Ref<Str>>
                    let _run_target_args'_v229 = v249 
                    #endif
                    let v252 : Ref<Str> = _run_target_args'_v229 
                    (* run_target_args'
                    let v265 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v266 : string = "String::from($0)"
                    let v267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v252 v266 
                    let _run_target_args'_v265 = v267 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v268 : string = "String::from($0)"
                    let v269 : std_string_String = Fable.Core.RustInterop.emitRustExpr v252 v268 
                    let _run_target_args'_v265 = v269 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v270 : string = "String::from($0)"
                    let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v252 v270 
                    let _run_target_args'_v265 = v271 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v273 : std_string_String = v252 |> unbox<std_string_String>
                    let _run_target_args'_v265 = v273 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v277 : std_string_String = v252 |> unbox<std_string_String>
                    let _run_target_args'_v265 = v277 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v281 : std_string_String = v252 |> unbox<std_string_String>
                    let _run_target_args'_v265 = v281 
                    #endif
#else
                    let v285 : std_string_String = v252 |> unbox<std_string_String>
                    let _run_target_args'_v265 = v285 
                    #endif
                    let v288 : std_string_String = _run_target_args'_v265 
                    (* run_target_args'
                    let v301 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v302 : string = "std::path::PathBuf::from($0)"
                    let v303 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v288 v302 
                    let _run_target_args'_v301 = v303 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v304 : string = "std::path::PathBuf::from($0)"
                    let v305 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v288 v304 
                    let _run_target_args'_v301 = v305 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v306 : string = "std::path::PathBuf::from($0)"
                    let v307 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v288 v306 
                    let _run_target_args'_v301 = v307 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v309 : std_path_PathBuf = v288 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v301 = v309 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v313 : std_path_PathBuf = v288 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v301 = v313 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v317 : std_path_PathBuf = v288 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v301 = v317 
                    #endif
#else
                    let v321 : std_path_PathBuf = v288 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v301 = v321 
                    #endif
                    let v324 : std_path_PathBuf = _run_target_args'_v301 
                    (* run_target_args'
                    let v334 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v335 : string = "Ok($0)"
                    let v336 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v324 v335 
                    let _run_target_args'_v334 = v336 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v337 : string = "Ok($0)"
                    let v338 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v324 v337 
                    let _run_target_args'_v334 = v338 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v339 : string = "Ok($0)"
                    let v340 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v324 v339 
                    let _run_target_args'_v334 = v340 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v341 : Result<std_path_PathBuf, std_io_Error> = v324 |> Ok
                    let _run_target_args'_v334 = v341 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v342 : Result<std_path_PathBuf, std_io_Error> = v324 |> Ok
                    let _run_target_args'_v334 = v342 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v343 : Result<std_path_PathBuf, std_io_Error> = v324 |> Ok
                    let _run_target_args'_v334 = v343 
                    #endif
#else
                    let v344 : Result<std_path_PathBuf, std_io_Error> = v324 |> Ok
                    let _run_target_args'_v334 = v344 
                    #endif
                    let v345 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v334 
                    v345
            else
                let v405 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v406 : string = $"path: {v0} / error: {v95} / path': {v0} / name: {v4}"
                let v407 : string = v405 + v406 
                (* run_target_args'
                let v412 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v413 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v414 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v407 v413 
                let _run_target_args'_v412 = v414 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v415 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v416 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v407 v415 
                let _run_target_args'_v412 = v416 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v417 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v418 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v407 v417 
                let _run_target_args'_v412 = v418 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v420 : std_io_Error = v407 |> unbox<std_io_Error>
                let _run_target_args'_v412 = v420 
                #endif
#if FABLE_COMPILER_PYTHON
                let v424 : std_io_Error = v407 |> unbox<std_io_Error>
                let _run_target_args'_v412 = v424 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v428 : std_io_Error = v407 |> unbox<std_io_Error>
                let _run_target_args'_v412 = v428 
                #endif
#else
                let v432 : std_io_Error = v407 |> unbox<std_io_Error>
                let _run_target_args'_v412 = v432 
                #endif
                let v435 : std_io_Error = _run_target_args'_v412 
                (* run_target_args'
                let v445 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v446 : string = "Err($0)"
                let v447 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v435 v446 
                let _run_target_args'_v445 = v447 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v448 : string = "Err($0)"
                let v449 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v435 v448 
                let _run_target_args'_v445 = v449 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v450 : string = "Err($0)"
                let v451 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v435 v450 
                let _run_target_args'_v445 = v451 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v452 : Result<std_path_PathBuf, std_io_Error> = v435 |> Error
                let _run_target_args'_v445 = v452 
                #endif
#if FABLE_COMPILER_PYTHON
                let v453 : Result<std_path_PathBuf, std_io_Error> = v435 |> Error
                let _run_target_args'_v445 = v453 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v454 : Result<std_path_PathBuf, std_io_Error> = v435 |> Error
                let _run_target_args'_v445 = v454 
                #endif
#else
                let v455 : Result<std_path_PathBuf, std_io_Error> = v435 |> Error
                let _run_target_args'_v445 = v455 
                #endif
                let v456 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v445 
                v456
        | _ ->
            let v460 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v461 : string = $"path: {v0} / error: {v95} / path': {v0} / name: {v4}"
            let v462 : string = v460 + v461 
            (* run_target_args'
            let v467 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v468 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v469 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v462 v468 
            let _run_target_args'_v467 = v469 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v470 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v471 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v462 v470 
            let _run_target_args'_v467 = v471 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v472 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v473 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v462 v472 
            let _run_target_args'_v467 = v473 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v475 : std_io_Error = v462 |> unbox<std_io_Error>
            let _run_target_args'_v467 = v475 
            #endif
#if FABLE_COMPILER_PYTHON
            let v479 : std_io_Error = v462 |> unbox<std_io_Error>
            let _run_target_args'_v467 = v479 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v483 : std_io_Error = v462 |> unbox<std_io_Error>
            let _run_target_args'_v467 = v483 
            #endif
#else
            let v487 : std_io_Error = v462 |> unbox<std_io_Error>
            let _run_target_args'_v467 = v487 
            #endif
            let v490 : std_io_Error = _run_target_args'_v467 
            (* run_target_args'
            let v500 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v501 : string = "Err($0)"
            let v502 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v490 v501 
            let _run_target_args'_v500 = v502 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v503 : string = "Err($0)"
            let v504 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v490 v503 
            let _run_target_args'_v500 = v504 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v505 : string = "Err($0)"
            let v506 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v490 v505 
            let _run_target_args'_v500 = v506 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v507 : Result<std_path_PathBuf, std_io_Error> = v490 |> Error
            let _run_target_args'_v500 = v507 
            #endif
#if FABLE_COMPILER_PYTHON
            let v508 : Result<std_path_PathBuf, std_io_Error> = v490 |> Error
            let _run_target_args'_v500 = v508 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v509 : Result<std_path_PathBuf, std_io_Error> = v490 |> Error
            let _run_target_args'_v500 = v509 
            #endif
#else
            let v510 : Result<std_path_PathBuf, std_io_Error> = v490 |> Error
            let _run_target_args'_v500 = v510 
            #endif
            let v511 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v500 
            v511
and method52 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v44 : System.IO.FileAttributes = method53(v35)
    let v45 : System.IO.FileAttributes = method54()
    let v46 : bool = method55(v45, v44)
    if v46 then
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v77 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v51 = v77 
        #endif
        let v80 : System_IO_FileInfo = _run_target_args'_v51 
        (* run_target_args'
        let v93 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v95 : string = null |> unbox<string>
        let _run_target_args'_v93 = v95 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v99 : string = null |> unbox<string>
        let _run_target_args'_v93 = v99 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v103 : string = null |> unbox<string>
        let _run_target_args'_v93 = v103 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v107 : string = null |> unbox<string>
        let _run_target_args'_v93 = v107 
        #endif
#if FABLE_COMPILER_PYTHON
        let v111 : string = null |> unbox<string>
        let _run_target_args'_v93 = v111 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v115 : string = null |> unbox<string>
        let _run_target_args'_v93 = v115 
        #endif
#else
        let v118 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v119 : string = v118 v80
        let _run_target_args'_v93 = v119 
        #endif
        let v120 : string = _run_target_args'_v93 
        let v130 : std_path_PathBuf = v120 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v134 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "Ok($0)"
        let v136 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v135 
        let _run_target_args'_v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "Ok($0)"
        let v138 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v137 
        let _run_target_args'_v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "Ok($0)"
        let v140 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v139 
        let _run_target_args'_v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v143 
        #endif
#else
        let v144 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v144 
        #endif
        let v145 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v134 
        v145
    else
        let v148 : string = $"file_system.read_link / Fsharp / "
        let v149 : string = $"The file or directory is not a reparse point. / "
        let v150 : string = v148 + v149 
        let v151 : string = $"path: {v0} / result: {v46} / path': {v0} / n: {v1}"
        let v152 : string = v150 + v151 
        (* run_target_args'
        let v157 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v158 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v159 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v158 
        let _run_target_args'_v157 = v159 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v160 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v161 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v160 
        let _run_target_args'_v157 = v161 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v162 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v163 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v162 
        let _run_target_args'_v157 = v163 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v165 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v165 
        #endif
#if FABLE_COMPILER_PYTHON
        let v169 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v169 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v173 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v173 
        #endif
#else
        let v177 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v177 
        #endif
        let v180 : std_io_Error = _run_target_args'_v157 
        let v189 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method58(v0, v189, v1, v180)
and method43 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method36(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method44(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method36(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method44(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method36(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method44(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method59 () : (std_path_PathBuf -> US15) =
    closure25()
and method61 (v0 : string) : string =
    v0
and method62 () : string =
    let v0 : string = ""
    v0
and method60 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method61(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method62()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method62()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method62()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method62()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method62()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method42 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method43(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US15) = method59()
        let v22 : US15 option = v16 |> Option.map v21 
        let v42 : US15 = US15_1
        let v43 : US15 = v22 |> Option.defaultValue v42 
        let v89 : string =
            match v43 with
            | US15_1 -> (* None *)
                v0
            | US15_0(v47) -> (* Some *)
                (* run_target_args'
                let v52 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v53 
                let _run_target_args'_v52 = v54 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v55 
                let _run_target_args'_v52 = v56 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57 : string = "$0.display()"
                let v58 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v57 
                let _run_target_args'_v52 = v58 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v60 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v60 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v64 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v68 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v68 
                #endif
#else
                let v72 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v72 
                #endif
                let v75 : std_path_Display = _run_target_args'_v52 
                let v85 : string = v75 |> string 
                v85
        let v90 : bool = v89 = ""
        let v91 : string =
            if v90 then
                v0
            else
                v89
        let v92 : string = "^\\\\\\\\\\?\\\\"
        let v93 : string = ""
        let v94 : string = method60(v92, v93, v91)
        let v95 : int32 = v94.Length
        let v96 : bool = v95 < 2
        if v96 then
            v0
        else
            let v97 : string = $"{v94.[0] |> string |> _.ToLower()}{v94.[1..]}"
            let v98 : string = "\\"
            let v99 : string = "/"
            let v100 : string = v97.Replace (v98, v99)
            v100
and method32 (v0 : string) : US5 =
    let v1 : US12 = US12_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method33(v2, v3)
    let v5 : US13 = method34(v1, v4, v0)
    match v5 with
    | US13_1(v9) -> (* Error *)
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure17(v0, v9)
        let v72 : unit = (fun () -> v71 (); v70) ()
        US5_1
    | US13_0(v6) -> (* Ok *)
        let v7 : string = method42(v6)
        US5_0(v7)
and method65 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method66 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method64 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : bool = v115 = false
    let v312 : string =
        if v116 then
            let v117 : string = method31()
            let v118 : string = method33(v117, v0)
            let v119 : string = method42(v118)
            let v127 : string = "/"
            let v128 : (string []) = v119.Split v127 
            let v131 : (string []) = [||]
            let v132 : int32 = v128.Length
            let v133 : Mut6 = {l0 = 0; l1 = 0; l2 = v131} : Mut6
            while method65(v132, v133) do
                let v135 : int32 = v133.l0
                let v136 : int32 =  -v135
                let v137 : int32 = v136 + v132
                let v138 : int32 = v137 - 1
                let struct (v139 : int32, v140 : (string [])) = v133.l1, v133.l2
                let v141 : string = v128.[int v138]
                let v142 : bool = ".." = v141
                let struct (v188 : int32, v189 : (string [])) =
                    if v142 then
                        let v143 : int32 = v139 + 1
                        struct (v143, v140)
                    else
                        let v144 : bool = "." = v141
                        if v144 then
                            struct (v139, v140)
                        else
                            let v145 : bool = 0 = v139
                            if v145 then
                                let v148 : string = ":"
                                let v149 : bool = v141.EndsWith (v148, false, null)
                                if v149 then
                                    let v152 : string = $"{v117.[0]}:"
                                    let v153 : (string []) = [|v152|]
                                    let v154 : int32 = v153.Length
                                    let v155 : int32 = v140.Length
                                    let v156 : int32 = v154 + v155
                                    let v157 : (string []) = Array.zeroCreate<string> (v156)
                                    let v158 : Mut5 = {l0 = 0} : Mut5
                                    while method29(v156, v158) do
                                        let v160 : int32 = v158.l0
                                        let v161 : bool = v160 < v154
                                        let v165 : string =
                                            if v161 then
                                                let v162 : string = v153.[int v160]
                                                v162
                                            else
                                                let v163 : int32 = v160 - v154
                                                let v164 : string = v140.[int v163]
                                                v164
                                        v157.[int v160] <- v165
                                        let v166 : int32 = v160 + 1
                                        v158.l0 <- v166
                                        ()
                                    struct (0, v157)
                                else
                                    let v167 : (string []) = [|v141|]
                                    let v168 : int32 = v167.Length
                                    let v169 : int32 = v140.Length
                                    let v170 : int32 = v168 + v169
                                    let v171 : (string []) = Array.zeroCreate<string> (v170)
                                    let v172 : Mut5 = {l0 = 0} : Mut5
                                    while method29(v170, v172) do
                                        let v174 : int32 = v172.l0
                                        let v175 : bool = v174 < v168
                                        let v179 : string =
                                            if v175 then
                                                let v176 : string = v167.[int v174]
                                                v176
                                            else
                                                let v177 : int32 = v174 - v168
                                                let v178 : string = v140.[int v177]
                                                v178
                                        v171.[int v174] <- v179
                                        let v180 : int32 = v174 + 1
                                        v172.l0 <- v180
                                        ()
                                    struct (0, v171)
                            else
                                let v183 : int32 = v139 - 1
                                struct (v183, v140)
                let v190 : int32 = v135 + 1
                v133.l0 <- v190
                v133.l1 <- v188
                v133.l2 <- v189
                ()
            let struct (v191 : int32, v192 : (string [])) = v133.l1, v133.l2
            let v197 : unit = ()
            let _let'_v197 =
                seq {
                    for i = 0 to v192.Length - 1 do yield v192.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v200 : string seq = _let'_v197 
            let v206 : char = method66()
            let v208 : (char -> string) = _.ToString()
            let v209 : string = v208 v206
            let v213 : bool = v209 = "\n"
            let v215 : string =
                if v213 then
                    method28(v209)
                else
                    v209
            let v216 : (string -> (string seq -> string)) = String.concat
            let v217 : (string seq -> string) = v216 v215
            v217 v200
        else
            let v221 : string = "std::fs::canonicalize(&*$0)"
            let v222 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v221 
            (* run_target_args'
            let v224 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v225 : string = "$0.unwrap()"
            let v226 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v222 v225 
            let _run_target_args'_v224 = v226 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v227 : string = "$0.unwrap()"
            let v228 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v222 v227 
            let _run_target_args'_v224 = v228 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v229 : string = "$0.unwrap()"
            let v230 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v222 v229 
            let _run_target_args'_v224 = v230 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v232 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v232 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v233 
            #endif
#else
            let v234 : std_path_PathBuf = match v222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v224 = v234 
            #endif
            let v235 : std_path_PathBuf = _run_target_args'_v224 
            (* run_target_args'
            let v242 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v243 : string = "$0.display()"
            let v244 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v235 v243 
            let _run_target_args'_v242 = v244 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v245 : string = "$0.display()"
            let v246 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v235 v245 
            let _run_target_args'_v242 = v246 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v247 : string = "$0.display()"
            let v248 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v235 v247 
            let _run_target_args'_v242 = v248 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v250 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v250 
            #endif
#if FABLE_COMPILER_PYTHON
            let v254 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v254 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v258 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v258 
            #endif
#else
            let v262 : std_path_Display = v235 |> unbox<std_path_Display>
            let _run_target_args'_v242 = v262 
            #endif
            let v265 : std_path_Display = _run_target_args'_v242 
            (* run_target_args'
            let v278 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v279 : string = "format!(\"{}\", $0)"
            let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v279 
            let _run_target_args'_v278 = v280 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v281 : string = "format!(\"{}\", $0)"
            let v282 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v281 
            let _run_target_args'_v278 = v282 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v283 : string = "format!(\"{}\", $0)"
            let v284 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v283 
            let _run_target_args'_v278 = v284 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v286 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v286 
            #endif
#if FABLE_COMPILER_PYTHON
            let v290 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v290 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v294 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v294 
            #endif
#else
            let v298 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v278 = v298 
            #endif
            let v301 : std_string_String = _run_target_args'_v278 
            let v310 : string = "fable_library_rust::String_::fromString($0)"
            let v311 : string = Fable.Core.RustInterop.emitRustExpr v301 v310 
            v311
    let _run_target_args'_v5 = v312 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v314 : string = null |> unbox<string>
    let _run_target_args'_v5 = v314 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v318 : string = null |> unbox<string>
    let _run_target_args'_v5 = v318 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v322 : string = null |> unbox<string>
    let _run_target_args'_v5 = v322 
    #endif
#if FABLE_COMPILER_PYTHON
    let v326 : string = null |> unbox<string>
    let _run_target_args'_v5 = v326 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v330 : string = null |> unbox<string>
    let _run_target_args'_v5 = v330 
    #endif
#else
    let v333 : (string -> string) = System.IO.Path.GetFullPath
    let v334 : string = v333 v0
    let _run_target_args'_v5 = v334 
    #endif
    let v335 : string = _run_target_args'_v5 
    v335
and method63 (v0 : string) : string =
    let v1 : string = method64(v0)
    method42(v1)
and method67 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method68 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method69 () : string =
    let v0 : string = "\n"
    v0
and method71 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method35(v0)
    let v8 : bool = v7 = false
    let v119 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v68 : Vec<uint8> = method25(v59)
            let v69 : string = "std::string::String::from_utf8($0)"
            let v70 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v68 v69 
            (* run_target_args'
            let v72 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v73 : string = "$0.unwrap()"
            let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v73 
            let _run_target_args'_v72 = v74 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v75 : string = "$0.unwrap()"
            let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v75 
            let _run_target_args'_v72 = v76 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v77 
            let _run_target_args'_v72 = v78 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v79 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v80 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v81 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v81 
            #endif
#else
            let v82 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v82 
            #endif
            let v83 : std_string_String = _run_target_args'_v72 
            let v86 : string = "fable_library_rust::String_::fromString($0)"
            let v87 : string = Fable.Core.RustInterop.emitRustExpr v83 v86 
            let _run_target_args'_v13 = v87 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v89 : string = null |> unbox<string>
            let _run_target_args'_v13 = v89 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v93 : string = null |> unbox<string>
            let _run_target_args'_v13 = v93 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v97 : string = null |> unbox<string>
            let _run_target_args'_v13 = v97 
            #endif
#if FABLE_COMPILER_PYTHON
            let v101 : string = null |> unbox<string>
            let _run_target_args'_v13 = v101 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105 : string = null |> unbox<string>
            let _run_target_args'_v13 = v105 
            #endif
#else
            let v108 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v108 
            #endif
            let v109 : string = _run_target_args'_v13 
            let v118 : bool = v1 = v109
            v118
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v121 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v137 
    #endif
#else
    let v141 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v141 
    #endif
    let v144 : bool = _run_target_args'_v6 
    v144
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method73 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US16 =
    US16_0
and method74 () : (unit -> US16) =
    closure27()
and closure28 () (v0 : std_string_String) : US16 =
    US16_1(v0)
and method75 () : (std_string_String -> US16) =
    closure28()
and method76 () : string =
    
    
    
    
    
    let v2 : string = "Critical"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_bright_red"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v86 : string = "inline_colorization::color_reset"
    let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v87) v88 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let _run_target_args'_v47 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v92 : string = "inline_colorization::color_bright_red"
    let v93 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v93, v121, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v47 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "inline_colorization::color_bright_red"
    let v137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v136 
    (* run_target_args'
    let v142 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v143 : string = "&*$0"
    let v144 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v143 
    let _run_target_args'_v142 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "&*$0"
    let v146 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v145 
    let _run_target_args'_v142 = v146 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v147 : string = "&*$0"
    let v148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v147 
    let _run_target_args'_v142 = v148 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v154 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v154 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v158 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v158 
    #endif
#else
    let v162 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v162 
    #endif
    let v165 : Ref<Str> = _run_target_args'_v142 
    let v174 : string = "inline_colorization::color_reset"
    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v177 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v137, v165, v175) v176 
    let v178 : string = "fable_library_rust::String_::fromString($0)"
    let v179 : string = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let _run_target_args'_v47 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v181 : string = "\u001b[91m"
    let v185 : string = method14()
    let v189 : string = v181 + v30 
    let v193 : string = v189 + v185 
    let _run_target_args'_v47 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = "\u001b[91m"
    let v201 : string = method14()
    let v205 : string = v197 + v30 
    let v209 : string = v205 + v201 
    let _run_target_args'_v47 = v209 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v213 : string = "\u001b[91m"
    let v217 : string = method14()
    let v221 : string = v213 + v30 
    let v225 : string = v221 + v217 
    let _run_target_args'_v47 = v225 
    #endif
#else
    let v229 : string = "\u001b[91m"
    let v233 : string = method14()
    let v237 : string = v229 + v30 
    let v241 : string = v237 + v233 
    let _run_target_args'_v47 = v241 
    #endif
    let v244 : string = _run_target_args'_v47 
    v244
and method77 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "dir"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "error"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    (* run_target_args'
    let v145 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v146 : string = "format!(\"{:#?}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v146 
    let v148 : string = "fable_library_rust::String_::fromString($0)"
    let v149 : string = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let _run_target_args'_v145 = v149 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v150 : string = "format!(\"{:#?}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v150 
    let v152 : string = "fable_library_rust::String_::fromString($0)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let _run_target_args'_v145 = v153 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v154 : string = "format!(\"{:#?}\", $0)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v145 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = $"%A{v9}"
    let _run_target_args'_v145 = v159 
    #endif
#if FABLE_COMPILER_PYTHON
    let v163 : string = $"%A{v9}"
    let _run_target_args'_v145 = v163 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v167 : string = $"%A{v9}"
    let _run_target_args'_v145 = v167 
    #endif
#else
    let v171 : string = $"%A{v9}"
    let _run_target_args'_v145 = v171 
    #endif
    let v174 : string = _run_target_args'_v145 
    let v184 : string = $"{v174}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v11, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v202 : string = " }"
    let v203 : string = $"{v202}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v11, v203)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v219 : string = v11.l0
    let v220 : int64 = v0.l0
    let v223 : string = " "
    let v224 : string = v6 + v223 
    let v228 : string = v224 + v7 
    let v233 : string = " #"
    let v234 : string = v228 + v233 
    let v238 : (int64 -> string) = _.ToString()
    let v239 : string = v238 v220
    let v243 : string = v234 + v239 
    let v247 : string = v243 + v223 
    let v252 : string = "file_system.create_dir"
    let v253 : string = v247 + v252 
    let v258 : string = " / "
    let v259 : string = v253 + v258 
    let v263 : string = v259 + v219 
    method16(v263)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method77(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and method78 () : string =
    
    
    
    
    
    let v2 : string = "Verbose"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_bright_black"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v86 : string = "inline_colorization::color_reset"
    let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v87) v88 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let _run_target_args'_v47 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v92 : string = "inline_colorization::color_bright_black"
    let v93 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v93, v121, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v47 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "inline_colorization::color_bright_black"
    let v137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v136 
    (* run_target_args'
    let v142 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v143 : string = "&*$0"
    let v144 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v143 
    let _run_target_args'_v142 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "&*$0"
    let v146 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v145 
    let _run_target_args'_v142 = v146 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v147 : string = "&*$0"
    let v148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v147 
    let _run_target_args'_v142 = v148 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v154 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v154 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v158 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v158 
    #endif
#else
    let v162 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v142 = v162 
    #endif
    let v165 : Ref<Str> = _run_target_args'_v142 
    let v174 : string = "inline_colorization::color_reset"
    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v177 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v137, v165, v175) v176 
    let v178 : string = "fable_library_rust::String_::fromString($0)"
    let v179 : string = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let _run_target_args'_v47 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v181 : string = "\u001b[90m"
    let v185 : string = method14()
    let v189 : string = v181 + v30 
    let v193 : string = v189 + v185 
    let _run_target_args'_v47 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = "\u001b[90m"
    let v201 : string = method14()
    let v205 : string = v197 + v30 
    let v209 : string = v205 + v201 
    let _run_target_args'_v47 = v209 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v213 : string = "\u001b[90m"
    let v217 : string = method14()
    let v221 : string = v213 + v30 
    let v225 : string = v221 + v217 
    let _run_target_args'_v47 = v225 
    #endif
#else
    let v229 : string = "\u001b[90m"
    let v233 : string = method14()
    let v237 : string = v229 + v30 
    let v241 : string = v237 + v233 
    let _run_target_args'_v47 = v241 
    #endif
    let v244 : string = _run_target_args'_v47 
    v244
and method79 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "dir"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "file_system.create_dir"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method78()
        let v60 : string = method79(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method81 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method36(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method81(v1, v0)
and method80 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method82 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method83 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method84 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "dir"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "result"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v9}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v11, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v177 : string = v11.l0
    let v178 : int64 = v0.l0
    let v181 : string = " "
    let v182 : string = v6 + v181 
    let v186 : string = v182 + v7 
    let v191 : string = " #"
    let v192 : string = v186 + v191 
    let v196 : (int64 -> string) = _.ToString()
    let v197 : string = v196 v178
    let v201 : string = v192 + v197 
    let v205 : string = v201 + v181 
    let v210 : string = "file_system.create_dir"
    let v211 : string = v205 + v210 
    let v216 : string = " / "
    let v217 : string = v211 + v216 
    let v221 : string = v217 + v177 
    method16(v221)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : string = method84(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and method89 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "ex"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "path"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v9}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v11, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v177 : string = v11.l0
    let v178 : int64 = v0.l0
    let v181 : string = " "
    let v182 : string = v6 + v181 
    let v186 : string = v182 + v7 
    let v191 : string = " #"
    let v192 : string = v186 + v191 
    let v196 : (int64 -> string) = _.ToString()
    let v197 : string = v196 v178
    let v201 : string = v192 + v197 
    let v205 : string = v201 + v181 
    let v210 : string = "file_system.delete_directory_async"
    let v211 : string = v205 + v210 
    let v216 : string = " / "
    let v217 : string = v211 + v216 
    let v221 : string = v217 + v177 
    method16(v221)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        (* run_target_args'
        let v65 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v67 : string = $"%A{v1}"
        let _run_target_args'_v65 = v67 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = $"%A{v1}"
        let _run_target_args'_v65 = v71 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v75 : string = $"%A{v1}"
        let _run_target_args'_v65 = v75 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v79 : string = $"%A{v1}"
        let _run_target_args'_v65 = v79 
        #endif
#if FABLE_COMPILER_PYTHON
        let v83 : string = $"%A{v1}"
        let _run_target_args'_v65 = v83 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v87 : string = $"%A{v1}"
        let _run_target_args'_v65 = v87 
        #endif
#else
        let v90 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v65 = v90 
        #endif
        let v91 : string = _run_target_args'_v65 
        let v100 : string = method50(v0)
        let v101 : string = method89(v41, v42, v43, v44, v45, v46, v59, v60, v91, v100)
        method17(v101)
and method88 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v9202 : bool = true
                method81(v9202, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v9437 : exn = ex
                let v9438 : int64 = v1 % 100L
                let v9439 : bool = v9438 = 0L
                if v9439 then
                    let v9540 : unit = ()
                    let v9541 : (unit -> unit) = closure34(v0, v9437)
                    let v9542 : unit = (fun () -> v9541 (); v9540) ()
                    ()
                (* run_target_args'
                let v9647 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9648 : (int32 -> Async<unit>) = Async.Sleep
                let v9649 : Async<unit> = v9648 10
                let _run_target_args'_v9647 = v9649 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9650 : (int32 -> Async<unit>) = Async.Sleep
                let v9651 : Async<unit> = v9650 10
                let _run_target_args'_v9647 = v9651 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9652 : (int32 -> Async<unit>) = Async.Sleep
                let v9653 : Async<unit> = v9652 10
                let _run_target_args'_v9647 = v9653 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9654 : (int32 -> Async<unit>) = Async.Sleep
                let v9655 : Async<unit> = v9654 10
                let _run_target_args'_v9647 = v9655 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9656 : (int32 -> Async<unit>) = Async.Sleep
                let v9657 : Async<unit> = v9656 10
                let _run_target_args'_v9647 = v9657 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9658 : (int32 -> Async<unit>) = Async.Sleep
                let v9659 : Async<unit> = v9658 10
                let _run_target_args'_v9647 = v9659 
                #endif
#else
                let v9660 : (int32 -> Async<unit>) = Async.Sleep
                let v9661 : Async<unit> = v9660 10
                let _run_target_args'_v9647 = v9661 
                #endif
                let v9662 : Async<unit> = _run_target_args'_v9647 
                do! v9662 
                let v9668 : int64 = v1 + 1L
                let v9669 : Async<int64> = method87(v0, v9668)
                return! v9669 
                (* indent
                ()
            indent *)
            (* try_unit
            let v9904 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v19085 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v19085 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19087 : unit = ()
    let _let'_v19087 =
        async {
            try
                let v28269 : bool = true
                method81(v28269, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v28504 : exn = ex
                let v28505 : int64 = v1 % 100L
                let v28506 : bool = v28505 = 0L
                if v28506 then
                    let v28607 : unit = ()
                    let v28608 : (unit -> unit) = closure34(v0, v28504)
                    let v28609 : unit = (fun () -> v28608 (); v28607) ()
                    ()
                (* run_target_args'
                let v28714 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v28715 : (int32 -> Async<unit>) = Async.Sleep
                let v28716 : Async<unit> = v28715 10
                let _run_target_args'_v28714 = v28716 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v28717 : (int32 -> Async<unit>) = Async.Sleep
                let v28718 : Async<unit> = v28717 10
                let _run_target_args'_v28714 = v28718 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v28719 : (int32 -> Async<unit>) = Async.Sleep
                let v28720 : Async<unit> = v28719 10
                let _run_target_args'_v28714 = v28720 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v28721 : (int32 -> Async<unit>) = Async.Sleep
                let v28722 : Async<unit> = v28721 10
                let _run_target_args'_v28714 = v28722 
                #endif
#if FABLE_COMPILER_PYTHON
                let v28723 : (int32 -> Async<unit>) = Async.Sleep
                let v28724 : Async<unit> = v28723 10
                let _run_target_args'_v28714 = v28724 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v28725 : (int32 -> Async<unit>) = Async.Sleep
                let v28726 : Async<unit> = v28725 10
                let _run_target_args'_v28714 = v28726 
                #endif
#else
                let v28727 : (int32 -> Async<unit>) = Async.Sleep
                let v28728 : Async<unit> = v28727 10
                let _run_target_args'_v28714 = v28728 
                #endif
                let v28729 : Async<unit> = _run_target_args'_v28714 
                do! v28729 
                let v28735 : int64 = v1 + 1L
                let v28736 : Async<int64> = method87(v0, v28735)
                return! v28736 
                (* indent
                ()
            indent *)
            (* try_unit
            let v28971 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v38152 : Async<int64> = _let'_v19087 
    let _run_target_args'_v6 = v38152 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38154 : unit = ()
    let _let'_v38154 =
        async {
            try
                let v47336 : bool = true
                method81(v47336, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v47571 : exn = ex
                let v47572 : int64 = v1 % 100L
                let v47573 : bool = v47572 = 0L
                if v47573 then
                    let v47674 : unit = ()
                    let v47675 : (unit -> unit) = closure34(v0, v47571)
                    let v47676 : unit = (fun () -> v47675 (); v47674) ()
                    ()
                (* run_target_args'
                let v47781 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v47782 : (int32 -> Async<unit>) = Async.Sleep
                let v47783 : Async<unit> = v47782 10
                let _run_target_args'_v47781 = v47783 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v47784 : (int32 -> Async<unit>) = Async.Sleep
                let v47785 : Async<unit> = v47784 10
                let _run_target_args'_v47781 = v47785 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v47786 : (int32 -> Async<unit>) = Async.Sleep
                let v47787 : Async<unit> = v47786 10
                let _run_target_args'_v47781 = v47787 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v47788 : (int32 -> Async<unit>) = Async.Sleep
                let v47789 : Async<unit> = v47788 10
                let _run_target_args'_v47781 = v47789 
                #endif
#if FABLE_COMPILER_PYTHON
                let v47790 : (int32 -> Async<unit>) = Async.Sleep
                let v47791 : Async<unit> = v47790 10
                let _run_target_args'_v47781 = v47791 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v47792 : (int32 -> Async<unit>) = Async.Sleep
                let v47793 : Async<unit> = v47792 10
                let _run_target_args'_v47781 = v47793 
                #endif
#else
                let v47794 : (int32 -> Async<unit>) = Async.Sleep
                let v47795 : Async<unit> = v47794 10
                let _run_target_args'_v47781 = v47795 
                #endif
                let v47796 : Async<unit> = _run_target_args'_v47781 
                do! v47796 
                let v47802 : int64 = v1 + 1L
                let v47803 : Async<int64> = method87(v0, v47802)
                return! v47803 
                (* indent
                ()
            indent *)
            (* try_unit
            let v48038 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v57219 : Async<int64> = _let'_v38154 
    let _run_target_args'_v6 = v57219 
    #endif
#else
    let v57221 : unit = ()
    let _let'_v57221 =
        async {
            try
                let v66403 : bool = true
                method81(v66403, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v66638 : exn = ex
                let v66639 : int64 = v1 % 100L
                let v66640 : bool = v66639 = 0L
                if v66640 then
                    let v66741 : unit = ()
                    let v66742 : (unit -> unit) = closure34(v0, v66638)
                    let v66743 : unit = (fun () -> v66742 (); v66741) ()
                    ()
                (* run_target_args'
                let v66848 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v66849 : (int32 -> Async<unit>) = Async.Sleep
                let v66850 : Async<unit> = v66849 10
                let _run_target_args'_v66848 = v66850 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v66851 : (int32 -> Async<unit>) = Async.Sleep
                let v66852 : Async<unit> = v66851 10
                let _run_target_args'_v66848 = v66852 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v66853 : (int32 -> Async<unit>) = Async.Sleep
                let v66854 : Async<unit> = v66853 10
                let _run_target_args'_v66848 = v66854 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v66855 : (int32 -> Async<unit>) = Async.Sleep
                let v66856 : Async<unit> = v66855 10
                let _run_target_args'_v66848 = v66856 
                #endif
#if FABLE_COMPILER_PYTHON
                let v66857 : (int32 -> Async<unit>) = Async.Sleep
                let v66858 : Async<unit> = v66857 10
                let _run_target_args'_v66848 = v66858 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66859 : (int32 -> Async<unit>) = Async.Sleep
                let v66860 : Async<unit> = v66859 10
                let _run_target_args'_v66848 = v66860 
                #endif
#else
                let v66861 : (int32 -> Async<unit>) = Async.Sleep
                let v66862 : Async<unit> = v66861 10
                let _run_target_args'_v66848 = v66862 
                #endif
                let v66863 : Async<unit> = _run_target_args'_v66848 
                do! v66863 
                let v66869 : int64 = v1 + 1L
                let v66870 : Async<int64> = method87(v0, v66869)
                return! v66870 
                (* indent
                ()
            indent *)
            (* try_unit
            let v67105 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v76286 : Async<int64> = _let'_v57221 
    let _run_target_args'_v6 = v76286 
    #endif
    let v76287 : Async<int64> = _run_target_args'_v6 
    v76287
and method87 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method88(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method86 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method87(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method86(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : (Async<unit> -> unit) = Async.RunSynchronously
    v37 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : (Async<unit> -> unit) = Async.RunSynchronously
    v38 v27
    #endif
#else
    let v39 : (Async<unit> -> unit) = Async.RunSynchronously
    v39 v27
    #endif
    // run_target_args' is_unit
    ()
and method85 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method90 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method72 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v237 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v238 : string = "std::fs::create_dir_all(&*$0)"
    let v239 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v238 
    let v240 : (std_io_Error -> std_string_String) = method73()
    (* run_target_args'
    let v242 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v243 : string = "$0.map_err(|x| $1(x))"
    let v244 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v239, v240) v243 
    let _run_target_args'_v242 = v244 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v245 : string = "$0.map_err(|x| $1(x))"
    let v246 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v239, v240) v245 
    let _run_target_args'_v242 = v246 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v247 : string = "$0.map_err(|x| $1(x))"
    let v248 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v239, v240) v247 
    let _run_target_args'_v242 = v248 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v249 : Result<unit, std_string_String> = match v239 with Ok x -> Ok x | Error x -> Error (v240 x)
    let _run_target_args'_v242 = v249 
    #endif
#if FABLE_COMPILER_PYTHON
    let v250 : Result<unit, std_string_String> = match v239 with Ok x -> Ok x | Error x -> Error (v240 x)
    let _run_target_args'_v242 = v250 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v251 : Result<unit, std_string_String> = match v239 with Ok x -> Ok x | Error x -> Error (v240 x)
    let _run_target_args'_v242 = v251 
    #endif
#else
    let v252 : Result<unit, std_string_String> = match v239 with Ok x -> Ok x | Error x -> Error (v240 x)
    let _run_target_args'_v242 = v252 
    #endif
    let v253 : Result<unit, std_string_String> = _run_target_args'_v242 
    let v256 : (unit -> US16) = method74()
    let v257 : (std_string_String -> US16) = method75()
    let v259 : US16 = match v253 with Ok () -> v256 () | Error x -> v257 x
    match v259 with
    | US16_1(v385) -> (* Error *)
        let v446 : unit = ()
        let v447 : (unit -> unit) = closure29(v0, v385)
        let v448 : unit = (fun () -> v447 (); v446) ()
        ()
    | US16_0 -> (* Ok *)
        let v322 : unit = ()
        let v323 : (unit -> unit) = closure30(v0)
        let v324 : unit = (fun () -> v323 (); v322) ()
        ()
    (* run_target_args'
    let v513 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v514 : (unit -> unit) = method80(v0)
    let v515 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v514 "$0()" )
    let _run_target_args'_v513 = v515 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v516 : (unit -> unit) = method80(v0)
    let v517 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v516 "$0()" )
    let _run_target_args'_v513 = v517 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v518 : (unit -> unit) = method80(v0)
    let v519 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v518 "$0()" )
    let _run_target_args'_v513 = v519 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v520 : (unit -> unit) = method82(v0)
    let v521 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v520 () }
    let _run_target_args'_v513 = v521 
    #endif
#if FABLE_COMPILER_PYTHON
    let v522 : (unit -> unit) = method82(v0)
    let v523 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v522 () }
    let _run_target_args'_v513 = v523 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v524 : (unit -> unit) = method82(v0)
    let v525 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v524 () }
    let _run_target_args'_v513 = v525 
    #endif
#else
    let v526 : (unit -> unit) = method82(v0)
    let v527 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v526 () }
    let _run_target_args'_v513 = v527 
    #endif
    let v528 : System.IDisposable = _run_target_args'_v513 
    let _run_target_args'_v237 = v528 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v536 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v237 = v536 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v540 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v237 = v540 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v543 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v548 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v550 : bool = null |> unbox<bool>
    let _run_target_args'_v548 = v550 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v554 : bool = null |> unbox<bool>
    let _run_target_args'_v548 = v554 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v558 : bool = null |> unbox<bool>
    let _run_target_args'_v548 = v558 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v562 : bool = null |> unbox<bool>
    let _run_target_args'_v548 = v562 
    #endif
#if FABLE_COMPILER_PYTHON
    let v566 : bool = null |> unbox<bool>
    let _run_target_args'_v548 = v566 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v570 : bool = null |> unbox<bool>
    let _run_target_args'_v548 = v570 
    #endif
#else
    let v573 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v574 : bool = v573 v543
    let _run_target_args'_v548 = v574 
    #endif
    let v575 : bool = _run_target_args'_v548 
    let v584 : bool = v575 = false
    if v584 then
        (* run_target_args'
        let v589 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v591 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v589 = v591 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v595 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v589 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v599 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v589 = v599 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v603 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v589 = v603 
        #endif
#if FABLE_COMPILER_PYTHON
        let v607 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v589 = v607 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v611 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v589 = v611 
        #endif
#else
        let v614 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v615 : System.DateTime = v614 v543
        let _run_target_args'_v589 = v615 
        #endif
        let v616 : System.DateTime = _run_target_args'_v589 
        let v625 : _ = {| Exists = v575; CreationTime = v616 |}
        let v627 : string = $"%A{v625}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure32(v0, v627)
        let v692 : unit = (fun () -> v691 (); v690) ()
        ()
    (* run_target_args'
    let v757 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v758 : (unit -> unit) = method85(v0)
    let v759 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v758 "$0()" )
    let _run_target_args'_v757 = v759 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v760 : (unit -> unit) = method85(v0)
    let v761 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v760 "$0()" )
    let _run_target_args'_v757 = v761 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v762 : (unit -> unit) = method85(v0)
    let v763 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v762 "$0()" )
    let _run_target_args'_v757 = v763 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v764 : (unit -> unit) = method90(v0)
    let v765 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v764 () }
    let _run_target_args'_v757 = v765 
    #endif
#if FABLE_COMPILER_PYTHON
    let v766 : (unit -> unit) = method90(v0)
    let v767 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v766 () }
    let _run_target_args'_v757 = v767 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v768 : (unit -> unit) = method90(v0)
    let v769 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v768 () }
    let _run_target_args'_v757 = v769 
    #endif
#else
    let v770 : (unit -> unit) = method90(v0)
    let v771 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v770 () }
    let _run_target_args'_v757 = v771 
    #endif
    let v772 : System.IDisposable = _run_target_args'_v757 
    let _run_target_args'_v237 = v772 
    #endif
#if FABLE_COMPILER_PYTHON
    let v779 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v784 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v786 : bool = null |> unbox<bool>
    let _run_target_args'_v784 = v786 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v790 : bool = null |> unbox<bool>
    let _run_target_args'_v784 = v790 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v794 : bool = null |> unbox<bool>
    let _run_target_args'_v784 = v794 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v798 : bool = null |> unbox<bool>
    let _run_target_args'_v784 = v798 
    #endif
#if FABLE_COMPILER_PYTHON
    let v802 : bool = null |> unbox<bool>
    let _run_target_args'_v784 = v802 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v806 : bool = null |> unbox<bool>
    let _run_target_args'_v784 = v806 
    #endif
#else
    let v809 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v810 : bool = v809 v779
    let _run_target_args'_v784 = v810 
    #endif
    let v811 : bool = _run_target_args'_v784 
    let v820 : bool = v811 = false
    if v820 then
        (* run_target_args'
        let v825 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v827 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v825 = v827 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v831 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v825 = v831 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v825 = v835 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v839 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v825 = v839 
        #endif
#if FABLE_COMPILER_PYTHON
        let v843 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v825 = v843 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v847 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v825 = v847 
        #endif
#else
        let v850 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v851 : System.DateTime = v850 v779
        let _run_target_args'_v825 = v851 
        #endif
        let v852 : System.DateTime = _run_target_args'_v825 
        let v861 : _ = {| Exists = v811; CreationTime = v852 |}
        let v863 : string = $"%A{v861}"
        let v926 : unit = ()
        let v927 : (unit -> unit) = closure32(v0, v863)
        let v928 : unit = (fun () -> v927 (); v926) ()
        ()
    (* run_target_args'
    let v993 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v994 : (unit -> unit) = method85(v0)
    let v995 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v994 "$0()" )
    let _run_target_args'_v993 = v995 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v996 : (unit -> unit) = method85(v0)
    let v997 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v996 "$0()" )
    let _run_target_args'_v993 = v997 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v998 : (unit -> unit) = method85(v0)
    let v999 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v998 "$0()" )
    let _run_target_args'_v993 = v999 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1000 : (unit -> unit) = method90(v0)
    let v1001 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1000 () }
    let _run_target_args'_v993 = v1001 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1002 : (unit -> unit) = method90(v0)
    let v1003 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1002 () }
    let _run_target_args'_v993 = v1003 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1004 : (unit -> unit) = method90(v0)
    let v1005 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1004 () }
    let _run_target_args'_v993 = v1005 
    #endif
#else
    let v1006 : (unit -> unit) = method90(v0)
    let v1007 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1006 () }
    let _run_target_args'_v993 = v1007 
    #endif
    let v1008 : System.IDisposable = _run_target_args'_v993 
    let _run_target_args'_v237 = v1008 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1015 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v1020 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1022 : bool = null |> unbox<bool>
    let _run_target_args'_v1020 = v1022 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1026 : bool = null |> unbox<bool>
    let _run_target_args'_v1020 = v1026 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1030 : bool = null |> unbox<bool>
    let _run_target_args'_v1020 = v1030 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1034 : bool = null |> unbox<bool>
    let _run_target_args'_v1020 = v1034 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1038 : bool = null |> unbox<bool>
    let _run_target_args'_v1020 = v1038 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1042 : bool = null |> unbox<bool>
    let _run_target_args'_v1020 = v1042 
    #endif
#else
    let v1045 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v1046 : bool = v1045 v1015
    let _run_target_args'_v1020 = v1046 
    #endif
    let v1047 : bool = _run_target_args'_v1020 
    let v1056 : bool = v1047 = false
    if v1056 then
        (* run_target_args'
        let v1061 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1063 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1061 = v1063 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1067 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1061 = v1067 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1071 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1061 = v1071 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1075 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1061 = v1075 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1079 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1061 = v1079 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v1083 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1061 = v1083 
        #endif
#else
        let v1086 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v1087 : System.DateTime = v1086 v1015
        let _run_target_args'_v1061 = v1087 
        #endif
        let v1088 : System.DateTime = _run_target_args'_v1061 
        let v1097 : _ = {| Exists = v1047; CreationTime = v1088 |}
        let v1099 : string = $"%A{v1097}"
        let v1162 : unit = ()
        let v1163 : (unit -> unit) = closure32(v0, v1099)
        let v1164 : unit = (fun () -> v1163 (); v1162) ()
        ()
    (* run_target_args'
    let v1229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1230 : (unit -> unit) = method85(v0)
    let v1231 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1230 "$0()" )
    let _run_target_args'_v1229 = v1231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1232 : (unit -> unit) = method85(v0)
    let v1233 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1232 "$0()" )
    let _run_target_args'_v1229 = v1233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1234 : (unit -> unit) = method85(v0)
    let v1235 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1234 "$0()" )
    let _run_target_args'_v1229 = v1235 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1236 : (unit -> unit) = method90(v0)
    let v1237 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1236 () }
    let _run_target_args'_v1229 = v1237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1238 : (unit -> unit) = method90(v0)
    let v1239 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1238 () }
    let _run_target_args'_v1229 = v1239 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1240 : (unit -> unit) = method90(v0)
    let v1241 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1240 () }
    let _run_target_args'_v1229 = v1241 
    #endif
#else
    let v1242 : (unit -> unit) = method90(v0)
    let v1243 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1242 () }
    let _run_target_args'_v1229 = v1243 
    #endif
    let v1244 : System.IDisposable = _run_target_args'_v1229 
    let _run_target_args'_v237 = v1244 
    #endif
#else
    let v1251 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v1256 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1258 : bool = null |> unbox<bool>
    let _run_target_args'_v1256 = v1258 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1262 : bool = null |> unbox<bool>
    let _run_target_args'_v1256 = v1262 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1266 : bool = null |> unbox<bool>
    let _run_target_args'_v1256 = v1266 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1270 : bool = null |> unbox<bool>
    let _run_target_args'_v1256 = v1270 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1274 : bool = null |> unbox<bool>
    let _run_target_args'_v1256 = v1274 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1278 : bool = null |> unbox<bool>
    let _run_target_args'_v1256 = v1278 
    #endif
#else
    let v1281 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v1282 : bool = v1281 v1251
    let _run_target_args'_v1256 = v1282 
    #endif
    let v1283 : bool = _run_target_args'_v1256 
    let v1292 : bool = v1283 = false
    if v1292 then
        (* run_target_args'
        let v1297 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1299 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1297 = v1299 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1303 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1297 = v1303 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1307 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1297 = v1307 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1311 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1297 = v1311 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1315 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1297 = v1315 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v1319 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1297 = v1319 
        #endif
#else
        let v1322 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v1323 : System.DateTime = v1322 v1251
        let _run_target_args'_v1297 = v1323 
        #endif
        let v1324 : System.DateTime = _run_target_args'_v1297 
        let v1333 : _ = {| Exists = v1283; CreationTime = v1324 |}
        let v1335 : string = $"%A{v1333}"
        let v1398 : unit = ()
        let v1399 : (unit -> unit) = closure32(v0, v1335)
        let v1400 : unit = (fun () -> v1399 (); v1398) ()
        ()
    (* run_target_args'
    let v1465 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1466 : (unit -> unit) = method85(v0)
    let v1467 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1466 "$0()" )
    let _run_target_args'_v1465 = v1467 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1468 : (unit -> unit) = method85(v0)
    let v1469 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1468 "$0()" )
    let _run_target_args'_v1465 = v1469 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1470 : (unit -> unit) = method85(v0)
    let v1471 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1470 "$0()" )
    let _run_target_args'_v1465 = v1471 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1472 : (unit -> unit) = method90(v0)
    let v1473 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1472 () }
    let _run_target_args'_v1465 = v1473 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1474 : (unit -> unit) = method90(v0)
    let v1475 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1474 () }
    let _run_target_args'_v1465 = v1475 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1476 : (unit -> unit) = method90(v0)
    let v1477 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1476 () }
    let _run_target_args'_v1465 = v1477 
    #endif
#else
    let v1478 : (unit -> unit) = method90(v0)
    let v1479 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1478 () }
    let _run_target_args'_v1465 = v1479 
    #endif
    let v1480 : System.IDisposable = _run_target_args'_v1465 
    let _run_target_args'_v237 = v1480 
    #endif
    let v1487 : System.IDisposable = _run_target_args'_v237 
    v1487
and method70 (v0 : string, v1 : string) : unit =
    let v2 : bool = method71(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method38(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method36(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method72(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method92 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method94 () : string =
    let v0 : string = ""
    v0
and method95 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method95(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method96 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method96(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure36 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method97(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method97 (v0 : int32, v1 : int32) : (string -> string) =
    closure36(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method95(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method97(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method95(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method97(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and method98 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US18 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US18 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US18_1(v13) -> (* Error *)
            method98(v0, v1, v6)
        | US18_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US18_1(v3)
and method99 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US20_1
        let v15 : char =
            match v11 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method99(v0, v17)
and method100 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v98 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method99(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int64 = System.Convert.ToInt64 v68.Length
                let v72 : int64 = 0L
                let v73 : UH0 = method95(v71, v68, v72)
                let struct (v74 : System.Text.StringBuilder, v75 : int32, v76 : int32) = method96(v73, v2, v3, v4)
                US18_0(v25, v62, v74, v75, v76)
            else
                let v78 : char list = []
                let v80 : char list = ''' :: v78 
                let v84 : char list = '"' :: v80 
                let v88 : (char list -> (char [])) = List.toArray
                let v89 : (char []) = v88 v84
                let v93 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v89} / s: %A{struct (v2, v3, v4)}"
                US18_1(v93)
    let v110 : US18 =
        match v98 with
        | US18_1(v107) -> (* Error *)
            US18_1(v107)
        | US18_0(v99, v100, v101, v102, v103) -> (* Ok *)
            let v104 : bool = '\\' = v99
            let v105 : char =
                if v104 then
                    '/'
                else
                    v99
            US18_0(v105, v100, v101, v102, v103)
    match v110 with
    | US18_1(v127) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v111, v112, v113, v114, v115) -> (* Ok *)
        let v117 : (char -> string) = _.ToString()
        let v118 : string = v117 v111
        let v121 : string = v0 + v118 
        method100(v121, v112, v113, v114, v115)
and method101 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US18 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US18 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US18_1(v15) -> (* Error *)
            method101(v0, v1, v2, v3, v8)
        | US18_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US18_1(v5)
and method102 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method102(v0, v21)
and method103 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method102(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method95(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method96(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = ' ' :: v82 
                let v88 : char list = ''' :: v84 
                let v92 : char list = '"' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v118 : US18 =
        match v106 with
        | US18_1(v115) -> (* Error *)
            US18_1(v115)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v112 : bool = '\\' = v107
            let v113 : char =
                if v112 then
                    '/'
                else
                    v107
            US18_0(v113, v108, v109, v110, v111)
    match v118 with
    | US18_1(v135) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v119, v120, v121, v122, v123) -> (* Ok *)
        let v125 : (char -> string) = _.ToString()
        let v126 : string = v125 v119
        let v129 : string = v0 + v126 
        method103(v129, v120, v121, v122, v123)
and method104 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method104(v0, v6)
        else
            v1
and method105 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US18 =
        if v5 then
            let v12 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US18_1(v12)
        else
            let v16 : char = v1.[int 0]
            let v18 : (string -> int32) = String.length
            let v19 : int32 = v18 v1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v19 |> int32 
            let v48 : int32 = v40 - 1
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v16
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method95(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method96(v61, v2, v3, v4)
            US18_0(v16, v50, v62, v63, v64)
    match v66 with
    | US18_1(v83) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v77 : string = v0 + v74 
        method105(v77, v68, v69, v70, v71)
and method93 (v0 : string) : US17 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method94()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure37()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US18 = method98(v10, v16, v23)
    let v197 : US19 =
        match v24 with
        | US18_1(v194) -> (* Error *)
            US19_1(v194)
        | US18_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v123 : US18 =
                if v30 then
                    let v31 : char list = []
                    let v33 : char list = ''' :: v31 
                    let v37 : char list = '"' :: v33 
                    let v41 : (char list -> (char [])) = List.toArray
                    let v42 : (char []) = v41 v37
                    let v46 : string = $"parsing.none_of / unexpected end of input / chars: %A{v42} / s: %A{struct (v27, v28, v29)}"
                    US18_1(v46)
                else
                    let v50 : char = v26.[int 0]
                    let v51 : int64 = 0L
                    let v52 : bool = method99(v50, v51)
                    let v53 : bool = v52 = false
                    if v53 then
                        let v55 : (string -> int32) = String.length
                        let v56 : int32 = v55 v26
                        let v64 : int32 = 1 |> int32 
                        let v77 : int32 = v56 |> int32 
                        let v85 : int32 = v77 - 1
                        let v87 : string = v26.[int v64..int v85]
                        let v92 : (char -> string) = _.ToString()
                        let v93 : string = v92 v50
                        let v96 : int64 = System.Convert.ToInt64 v93.Length
                        let v97 : int64 = 0L
                        let v98 : UH0 = method95(v96, v93, v97)
                        let struct (v99 : System.Text.StringBuilder, v100 : int32, v101 : int32) = method96(v98, v27, v28, v29)
                        US18_0(v50, v87, v99, v100, v101)
                    else
                        let v103 : char list = []
                        let v105 : char list = ''' :: v103 
                        let v109 : char list = '"' :: v105 
                        let v113 : (char list -> (char [])) = List.toArray
                        let v114 : (char []) = v113 v109
                        let v118 : string = $"parsing.none_of / unexpected char: '{v50}' / chars: %A{v114} / s: %A{struct (v27, v28, v29)}"
                        US18_1(v118)
            let v135 : US18 =
                match v123 with
                | US18_1(v132) -> (* Error *)
                    US18_1(v132)
                | US18_0(v124, v125, v126, v127, v128) -> (* Ok *)
                    let v129 : bool = '\\' = v124
                    let v130 : char =
                        if v129 then
                            '/'
                        else
                            v124
                    US18_0(v130, v125, v126, v127, v128)
            let v155 : US19 =
                match v135 with
                | US18_1(v152) -> (* Error *)
                    US19_1(v152)
                | US18_0(v136, v137, v138, v139, v140) -> (* Ok *)
                    let v142 : (char -> string) = _.ToString()
                    let v143 : string = v142 v136
                    let struct (v146 : string, v147 : string, v148 : System.Text.StringBuilder, v149 : int32, v150 : int32) = method100(v143, v137, v138, v139, v140)
                    US19_0(v146, v147, v148, v149, v150)
            let v165 : US19 =
                match v155 with
                | US19_1(v162) -> (* Error *)
                    US19_0(v9, v26, v27, v28, v29)
                | US19_0(v156, v157, v158, v159, v160) -> (* Ok *)
                    US19_0(v156, v157, v158, v159, v160)
            match v165 with
            | US19_1(v189) -> (* Error *)
                let v190 : string = "parsing.between / expected content"
                US19_1(v190)
            | US19_0(v166, v167, v168, v169, v170) -> (* Ok *)
                let v171 : UH1 = UH1_0
                let v172 : UH1 = UH1_1(v20, v171)
                let v173 : UH1 = UH1_1(v19, v172)
                let v174 : US18 = method101(v167, v168, v169, v170, v173)
                match v174 with
                | US18_1(v181) -> (* Error *)
                    let v183 : string = $"parsing.between / expected closing delimiter / e: %A{v181} / input: %A{struct (v10, v16, 1, 1)} / rest1: %A{struct (v26, v27, v28, v29)} / rest2: %A{struct (v167, v168, v169, v170)}"
                    US19_1(v183)
                | US18_0(v175, v176, v177, v178, v179) -> (* Ok *)
                    US19_0(v166, v176, v177, v178, v179)
    let v416 : US19 =
        match v197 with
        | US19_1(v203) -> (* Error *)
            let v204 : bool = "" = v10
            let v307 : US18 =
                if v204 then
                    let v205 : char list = []
                    let v207 : char list = ' ' :: v205 
                    let v211 : char list = ''' :: v207 
                    let v215 : char list = '"' :: v211 
                    let v219 : (char list -> (char [])) = List.toArray
                    let v220 : (char []) = v219 v215
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v220} / s: %A{struct (v16, 1, 1)}"
                    US18_1(v224)
                else
                    let v228 : char = v10.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method102(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v233 : (string -> int32) = String.length
                        let v234 : int32 = v233 v10
                        let v242 : int32 = 1 |> int32 
                        let v255 : int32 = v234 |> int32 
                        let v263 : int32 = v255 - 1
                        let v265 : string = v10.[int v242..int v263]
                        let v270 : (char -> string) = _.ToString()
                        let v271 : string = v270 v228
                        let v274 : int64 = System.Convert.ToInt64 v271.Length
                        let v275 : int64 = 0L
                        let v276 : UH0 = method95(v274, v271, v275)
                        let v277 : int32 = 1
                        let v278 : int32 = 1
                        let struct (v279 : System.Text.StringBuilder, v280 : int32, v281 : int32) = method96(v276, v16, v277, v278)
                        US18_0(v228, v265, v279, v280, v281)
                    else
                        let v283 : char list = []
                        let v285 : char list = ' ' :: v283 
                        let v289 : char list = ''' :: v285 
                        let v293 : char list = '"' :: v289 
                        let v297 : (char list -> (char [])) = List.toArray
                        let v298 : (char []) = v297 v293
                        let v302 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v298} / s: %A{struct (v16, 1, 1)}"
                        US18_1(v302)
            let v319 : US18 =
                match v307 with
                | US18_1(v316) -> (* Error *)
                    US18_1(v316)
                | US18_0(v308, v309, v310, v311, v312) -> (* Ok *)
                    let v313 : bool = '\\' = v308
                    let v314 : char =
                        if v313 then
                            '/'
                        else
                            v308
                    US18_0(v314, v309, v310, v311, v312)
            let v339 : US19 =
                match v319 with
                | US18_1(v336) -> (* Error *)
                    US19_1(v336)
                | US18_0(v320, v321, v322, v323, v324) -> (* Ok *)
                    let v326 : (char -> string) = _.ToString()
                    let v327 : string = v326 v320
                    let struct (v330 : string, v331 : string, v332 : System.Text.StringBuilder, v333 : int32, v334 : int32) = method103(v327, v321, v322, v323, v324)
                    US19_0(v330, v331, v332, v333, v334)
            match v339 with
            | US19_1(v345) -> (* Error *)
                let v346 : int32 = v10.Length
                let v347 : bool = v346 = 0
                let v354 : US21 =
                    if v347 then
                        US21_0(v10, v16, 1, 1)
                    else
                        let v350 : string = $"parsing.eof / expected end of input / input: %A{v10}"
                        US21_1(v350)
                let v363 : US19 =
                    match v354 with
                    | US21_1(v360) -> (* Error *)
                        US19_1(v360)
                    | US21_0(v355, v356, v357, v358) -> (* Ok *)
                        US19_0(v9, v355, v356, v357, v358)
                match v363 with
                | US19_1(v409) -> (* Error *)
                    US19_1(v409)
                | US19_0(v364, v365, v366, v367, v368) -> (* Ok *)
                    let v369 : int32 = 0
                    let v370 : int32 = method104(v365, v369)
                    let v372 : (string -> int32) = String.length
                    let v373 : int32 = v372 v365
                    let v381 : int32 = v370 |> int32 
                    let v394 : int32 = v373 |> int32 
                    let v402 : int32 = v394 - 1
                    let v404 : string = v365.[int v381..int v402]
                    US19_0(v364, v404, v366, v367, v368)
            | US19_0(v340, v341, v342, v343, v344) -> (* Ok *)
                v339
        | US19_0(v198, v199, v200, v201, v202) -> (* Ok *)
            v197
    let v671 : US22 =
        match v416 with
        | US19_1(v668) -> (* Error *)
            US22_1(v668)
        | US19_0(v417, v418, v419, v420, v421) -> (* Ok *)
            let v422 : bool = "" = v418
            let v542 : US18 =
                if v422 then
                    let v424 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v419, v420, v421)}"
                    US18_1(v424)
                else
                    let v428 : char = v418.[int 0]
                    let v429 : bool = v428 = ' '
                    if v429 then
                        let v431 : (string -> int32) = String.length
                        let v432 : int32 = v431 v418
                        let v440 : int32 = 1 |> int32 
                        let v453 : int32 = v432 |> int32 
                        let v461 : int32 = v453 - 1
                        let v463 : string = v418.[int v440..int v461]
                        let v468 : (char -> string) = _.ToString()
                        let v469 : string = v468 v428
                        let v472 : int64 = System.Convert.ToInt64 v469.Length
                        let v473 : int64 = 0L
                        let v474 : UH0 = method95(v472, v469, v473)
                        let struct (v475 : System.Text.StringBuilder, v476 : int32, v477 : int32) = method96(v474, v419, v420, v421)
                        US18_0(v428, v463, v475, v476, v477)
                    else
                        let v480 : string = "\n"
                        let v481 : int32 = v418.IndexOf v480 
                        let v484 : int32 = v481 - 1
                        let v485 : bool = -2 = v484
                        let v493 : int32 =
                            if v485 then
                                let v487 : (string -> int32) = String.length
                                let v488 : int32 = v487 v418
                                let v491 : int32 = v488 + 1
                                v491
                            else
                                let v492 : int32 = v484 + 1
                                v492
                        let v499 : int32 = 0 |> int32 
                        let v512 : int32 = v493 |> int32 
                        let v520 : int32 = v512 - 1
                        let v522 : string = v418.[int v499..int v520]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v420} / col: {v421}
{v419}{v522}"
                        let v530 : int32 = v421 - 1
                        let v531 : int32 = 0
                        let v532 : (string -> string) = method97(v530, v531)
                        let v533 : string = v532 v9
                        let v534 : string = "^"
                        let v535 : string = v533 + v534 
                        let v537 : string = $"{v527}
{v535}
"
                        US18_1(v537)
            let v554 : US23 =
                match v542 with
                | US18_1(v550) -> (* Error *)
                    let v551 : US20 = US20_1
                    US23_0(v551, v418, v419, v420, v421)
                | US18_0(v543, v544, v545, v546, v547) -> (* Ok *)
                    let v548 : US20 = US20_0(v543)
                    US23_0(v548, v544, v545, v546, v547)
            let v645 : US19 =
                match v554 with
                | US23_1(v642) -> (* Error *)
                    US19_1(v642)
                | US23_0(v555, v556, v557, v558, v559) -> (* Ok *)
                    let v560 : bool = "" = v556
                    let v621 : US18 =
                        if v560 then
                            let v567 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v557, v558, v559)}"
                            US18_1(v567)
                        else
                            let v571 : char = v556.[int 0]
                            let v573 : (string -> int32) = String.length
                            let v574 : int32 = v573 v556
                            let v582 : int32 = 1 |> int32 
                            let v595 : int32 = v574 |> int32 
                            let v603 : int32 = v595 - 1
                            let v605 : string = v556.[int v582..int v603]
                            let v610 : (char -> string) = _.ToString()
                            let v611 : string = v610 v571
                            let v614 : int64 = System.Convert.ToInt64 v611.Length
                            let v615 : int64 = 0L
                            let v616 : UH0 = method95(v614, v611, v615)
                            let struct (v617 : System.Text.StringBuilder, v618 : int32, v619 : int32) = method96(v616, v557, v558, v559)
                            US18_0(v571, v605, v617, v618, v619)
                    match v621 with
                    | US18_1(v638) -> (* Error *)
                        US19_1(v638)
                    | US18_0(v622, v623, v624, v625, v626) -> (* Ok *)
                        let v628 : (char -> string) = _.ToString()
                        let v629 : string = v628 v622
                        let struct (v632 : string, v633 : string, v634 : System.Text.StringBuilder, v635 : int32, v636 : int32) = method105(v629, v623, v624, v625, v626)
                        US19_0(v632, v633, v634, v635, v636)
            let v657 : US24 =
                match v645 with
                | US19_1(v653) -> (* Error *)
                    let v654 : US5 = US5_1
                    US24_0(v654, v418, v419, v420, v421)
                | US19_0(v646, v647, v648, v649, v650) -> (* Ok *)
                    let v651 : US5 = US5_0(v646)
                    US24_0(v651, v647, v648, v649, v650)
            match v657 with
            | US24_1(v664) -> (* Error *)
                US22_1(v664)
            | US24_0(v658, v659, v660, v661, v662) -> (* Ok *)
                US22_0(v417, v658, v659, v660, v661, v662)
    match v671 with
    | US22_1(v679) -> (* Error *)
        US17_1(v679)
    | US22_0(v672, v673, v674, v675, v676, v677) -> (* Ok *)
        US17_0(v672, v673)
and method108 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US20_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US20_1
        let v23 : char =
            match v19 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method108(v0, v25)
and method109 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method108(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method95(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method96(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    match v114 with
    | US18_1(v131) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v121 : (char -> string) = _.ToString()
        let v122 : string = v121 v115
        let v125 : string = v0 + v122 
        method109(v125, v116, v117, v118, v119)
and method111 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method111(v0, v21)
and closure38 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method95(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method97(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method95(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method96(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '\\'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method95(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method97(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method95(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method96(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '`'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and method112 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US19 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method112(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method113 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method113(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method110 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method111(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method95(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method96(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    let v135 : US19 =
        match v121 with
        | US19_1(v127) -> (* Error *)
            let v128 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
            let v129 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
            let v130 : UH3 = UH3_0
            let v131 : UH3 = UH3_1(v129, v130)
            let v132 : UH3 = UH3_1(v128, v131)
            method112(v1, v2, v3, v4, v132)
        | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
            v121
    match v135 with
    | US19_1(v143) -> (* Error *)
        let v144 : UH2 = UH2_0
        let v145 : UH2 = method113(v0, v144)
        US26_0(v145, v1, v2, v3, v4)
    | US19_0(v136, v137, v138, v139, v140) -> (* Ok *)
        let v141 : UH2 = UH2_1(v136, v0)
        method110(v141, v137, v138, v139, v140)
and method114 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method114(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method115 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method111(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method95(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method96(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    match v121 with
    | US19_1(v129) -> (* Error *)
        let v130 : UH2 = UH2_0
        let v131 : UH2 = method113(v0, v130)
        US26_0(v131, v1, v2, v3, v4)
    | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : UH2 = UH2_1(v122, v0)
        method115(v127, v123, v124, v125, v126)
and method107 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method108(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method95(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method96(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    let v134 : US19 =
        match v114 with
        | US18_1(v131) -> (* Error *)
            US19_1(v131)
        | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v115
            let struct (v125 : string, v126 : string, v127 : System.Text.StringBuilder, v128 : int32, v129 : int32) = method109(v122, v116, v117, v118, v119)
            US19_0(v125, v126, v127, v128, v129)
    let v522 : US19 =
        match v134 with
        | US19_1(v140) -> (* Error *)
            let v261 : US18 =
                if v5 then
                    let v142 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US18_1(v142)
                else
                    let v146 : char = v1.[int 0]
                    let v147 : bool = v146 = '"'
                    if v147 then
                        let v149 : (string -> int32) = String.length
                        let v150 : int32 = v149 v1
                        let v158 : int32 = 1 |> int32 
                        let v171 : int32 = v150 |> int32 
                        let v179 : int32 = v171 - 1
                        let v181 : string = v1.[int v158..int v179]
                        let v186 : (char -> string) = _.ToString()
                        let v187 : string = v186 v146
                        let v190 : int64 = System.Convert.ToInt64 v187.Length
                        let v191 : int64 = 0L
                        let v192 : UH0 = method95(v190, v187, v191)
                        let struct (v193 : System.Text.StringBuilder, v194 : int32, v195 : int32) = method96(v192, v2, v3, v4)
                        US18_0(v146, v181, v193, v194, v195)
                    else
                        let v198 : string = "\n"
                        let v199 : int32 = v1.IndexOf v198 
                        let v202 : int32 = v199 - 1
                        let v203 : bool = -2 = v202
                        let v211 : int32 =
                            if v203 then
                                let v205 : (string -> int32) = String.length
                                let v206 : int32 = v205 v1
                                let v209 : int32 = v206 + 1
                                v209
                            else
                                let v210 : int32 = v202 + 1
                                v210
                        let v217 : int32 = 0 |> int32 
                        let v230 : int32 = v211 |> int32 
                        let v238 : int32 = v230 - 1
                        let v240 : string = v1.[int v217..int v238]
                        let v245 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v240}"
                        let v248 : int32 = v4 - 1
                        let v249 : int32 = 0
                        let v250 : (string -> string) = method97(v248, v249)
                        let v251 : string = ""
                        let v252 : string = v250 v251
                        let v253 : string = "^"
                        let v254 : string = v252 + v253 
                        let v256 : string = $"{v245}
{v254}
"
                        US18_1(v256)
            let v451 : US19 =
                match v261 with
                | US18_1(v448) -> (* Error *)
                    US19_1(v448)
                | US18_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US26 = method110(v267, v263, v264, v265, v266)
                    let v301 : US19 =
                        match v268 with
                        | US26_1(v298) -> (* Error *)
                            US19_1(v298)
                        | US26_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method114(v269, v274)
                            let v280 : unit = ()
                            let _let'_v280 =
                                seq {
                                    yield! v275 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v283 : string seq = _let'_v280 
                            let v291 : (string -> (string seq -> string)) = String.concat
                            let v292 : string = ""
                            let v293 : (string seq -> string) = v291 v292
                            let v294 : string = v293 v283
                            US19_0(v294, v270, v271, v272, v273)
                    match v301 with
                    | US19_1(v443) -> (* Error *)
                        let v444 : string = "parsing.between / expected content"
                        US19_1(v444)
                    | US19_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v428 : US18 =
                            if v307 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v304, v305, v306)}"
                                US18_1(v309)
                            else
                                let v313 : char = v303.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v316 : (string -> int32) = String.length
                                    let v317 : int32 = v316 v303
                                    let v325 : int32 = 1 |> int32 
                                    let v338 : int32 = v317 |> int32 
                                    let v346 : int32 = v338 - 1
                                    let v348 : string = v303.[int v325..int v346]
                                    let v353 : (char -> string) = _.ToString()
                                    let v354 : string = v353 v313
                                    let v357 : int64 = System.Convert.ToInt64 v354.Length
                                    let v358 : int64 = 0L
                                    let v359 : UH0 = method95(v357, v354, v358)
                                    let struct (v360 : System.Text.StringBuilder, v361 : int32, v362 : int32) = method96(v359, v304, v305, v306)
                                    US18_0(v313, v348, v360, v361, v362)
                                else
                                    let v365 : string = "\n"
                                    let v366 : int32 = v303.IndexOf v365 
                                    let v369 : int32 = v366 - 1
                                    let v370 : bool = -2 = v369
                                    let v378 : int32 =
                                        if v370 then
                                            let v372 : (string -> int32) = String.length
                                            let v373 : int32 = v372 v303
                                            let v376 : int32 = v373 + 1
                                            v376
                                        else
                                            let v377 : int32 = v369 + 1
                                            v377
                                    let v384 : int32 = 0 |> int32 
                                    let v397 : int32 = v378 |> int32 
                                    let v405 : int32 = v397 - 1
                                    let v407 : string = v303.[int v384..int v405]
                                    let v412 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v407}"
                                    let v415 : int32 = v306 - 1
                                    let v416 : int32 = 0
                                    let v417 : (string -> string) = method97(v415, v416)
                                    let v418 : string = ""
                                    let v419 : string = v417 v418
                                    let v420 : string = "^"
                                    let v421 : string = v419 + v420 
                                    let v423 : string = $"{v412}
{v421}
"
                                    US18_1(v423)
                        match v428 with
                        | US18_1(v435) -> (* Error *)
                            let v437 : string = $"parsing.between / expected closing delimiter / e: %A{v435} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US19_1(v437)
                        | US18_0(v429, v430, v431, v432, v433) -> (* Ok *)
                            US19_0(v302, v430, v431, v432, v433)
            match v451 with
            | US19_1(v457) -> (* Error *)
                let v458 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
                let v459 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
                let v460 : UH3 = UH3_0
                let v461 : UH3 = UH3_1(v459, v460)
                let v462 : UH3 = UH3_1(v458, v461)
                let v463 : US19 = method112(v1, v2, v3, v4, v462)
                let v474 : US19 =
                    match v463 with
                    | US19_1(v471) -> (* Error *)
                        US19_1(v471)
                    | US19_0(v464, v465, v466, v467, v468) -> (* Ok *)
                        let v469 : string = ""
                        US19_0(v469, v465, v466, v467, v468)
                let v485 : US26 =
                    match v474 with
                    | US19_1(v482) -> (* Error *)
                        US26_1(v482)
                    | US19_0(v475, v476, v477, v478, v479) -> (* Ok *)
                        let v480 : UH2 = UH2_0
                        method115(v480, v476, v477, v478, v479)
                match v485 with
                | US26_1(v515) -> (* Error *)
                    US19_1(v515)
                | US26_0(v486, v487, v488, v489, v490) -> (* Ok *)
                    let v491 : string list = []
                    let v492 : string list = method114(v486, v491)
                    let v497 : unit = ()
                    let _let'_v497 =
                        seq {
                            yield! v492 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v500 : string seq = _let'_v497 
                    let v508 : (string -> (string seq -> string)) = String.concat
                    let v509 : string = ""
                    let v510 : (string seq -> string) = v508 v509
                    let v511 : string = v510 v500
                    US19_0(v511, v487, v488, v489, v490)
            | US19_0(v452, v453, v454, v455, v456) -> (* Ok *)
                v451
        | US19_0(v135, v136, v137, v138, v139) -> (* Ok *)
            v134
    match v522 with
    | US19_1(v585) -> (* Error *)
        let v586 : UH2 = UH2_0
        let v587 : UH2 = method113(v0, v586)
        US26_0(v587, v1, v2, v3, v4)
    | US19_0(v523, v524, v525, v526, v527) -> (* Ok *)
        let v528 : int32 = 0
        let v529 : int32 = method104(v524, v528)
        let v530 : bool = 0 = v529
        let v571 : US21 =
            if v530 then
                let v531 : string = "parsing.spaces1 / expected at least one space"
                US21_1(v531)
            else
                let v534 : (string -> int32) = String.length
                let v535 : int32 = v534 v524
                let v543 : int32 = v529 |> int32 
                let v556 : int32 = v535 |> int32 
                let v564 : int32 = v556 - 1
                let v566 : string = v524.[int v543..int v564]
                US21_0(v566, v525, v526, v527)
        match v571 with
        | US21_1(v578) -> (* Error *)
            let v579 : UH2 = UH2_0
            let v580 : UH2 = UH2_1(v523, v579)
            let v581 : UH2 = method113(v0, v580)
            US26_0(v581, v524, v525, v526, v527)
        | US21_0(v572, v573, v574, v575) -> (* Ok *)
            let v576 : UH2 = UH2_1(v523, v0)
            method107(v576, v572, v573, v574, v575)
and method106 (v0 : string) : US25 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method94()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US26 = method107(v19, v10, v16, v20, v21)
    match v22 with
    | US26_1(v36) -> (* Error *)
        US25_1(v36)
    | US26_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method114(v23, v28)
        let v31 : (string list -> (string [])) = List.toArray
        let v32 : (string []) = v31 v29
        US25_0(v32)
and method116 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method13()
    let v18 : Mut3 = {l0 = v17} : Mut3
    let v21 : string = "{ "
    let v22 : string = $"{v21}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v18, v22)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v40 : string = "file_name"
    let v41 : string = $"{v40}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v18, v41)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v59 : string = " = "
    let v60 : string = $"{v59}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v18, v60)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v77 : string = $"{v8}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v18, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v18, v96)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v114 : string = "arguments"
    let v115 : string = $"{v114}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v18, v115)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v132 : string = $"{v59}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v18, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v149 : string = $"{v9}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v18, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v95}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v18, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v184 : string = "options"
    let v185 : string = $"{v184}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v18, v185)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v202 : string = $"{v59}"
    let v210 : unit = ()
    let v211 : (unit -> unit) = closure7(v18, v202)
    let v212 : unit = (fun () -> v211 (); v210) ()
    let v219 : string = $"{v21}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v18, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v237 : string = "command"
    let v238 : string = $"{v237}"
    let v246 : unit = ()
    let v247 : (unit -> unit) = closure7(v18, v238)
    let v248 : unit = (fun () -> v247 (); v246) ()
    let v255 : string = $"{v59}"
    let v263 : unit = ()
    let v264 : (unit -> unit) = closure7(v18, v255)
    let v265 : unit = (fun () -> v264 (); v263) ()
    let v272 : string = $"{v10}"
    let v280 : unit = ()
    let v281 : (unit -> unit) = closure7(v18, v272)
    let v282 : unit = (fun () -> v281 (); v280) ()
    let v289 : string = $"{v95}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v18, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v307 : string = "cancellation_token"
    let v308 : string = $"{v307}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v18, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v325 : string = $"{v59}"
    let v333 : unit = ()
    let v334 : (unit -> unit) = closure7(v18, v325)
    let v335 : unit = (fun () -> v334 (); v333) ()
    (* run_target_args'
    let v345 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v346 : string = "format!(\"{:#?}\", $0)"
    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v346 
    let v348 : string = "fable_library_rust::String_::fromString($0)"
    let v349 : string = Fable.Core.RustInterop.emitRustExpr v347 v348 
    let _run_target_args'_v345 = v349 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v350 : string = "format!(\"{:#?}\", $0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v350 
    let v352 : string = "fable_library_rust::String_::fromString($0)"
    let v353 : string = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let _run_target_args'_v345 = v353 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v354 : string = "format!(\"{:#?}\", $0)"
    let v355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v354 
    let v356 : string = "fable_library_rust::String_::fromString($0)"
    let v357 : string = Fable.Core.RustInterop.emitRustExpr v355 v356 
    let _run_target_args'_v345 = v357 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v359 : string = $"%A{v11}"
    let _run_target_args'_v345 = v359 
    #endif
#if FABLE_COMPILER_PYTHON
    let v363 : string = $"%A{v11}"
    let _run_target_args'_v345 = v363 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v367 : string = $"%A{v11}"
    let _run_target_args'_v345 = v367 
    #endif
#else
    let v371 : string = $"%A{v11}"
    let _run_target_args'_v345 = v371 
    #endif
    let v374 : string = _run_target_args'_v345 
    let v384 : string = $"{v374}"
    let v392 : unit = ()
    let v393 : (unit -> unit) = closure7(v18, v384)
    let v394 : unit = (fun () -> v393 (); v392) ()
    let v401 : string = $"{v95}"
    let v409 : unit = ()
    let v410 : (unit -> unit) = closure7(v18, v401)
    let v411 : unit = (fun () -> v410 (); v409) ()
    let v419 : string = "environment_variables"
    let v420 : string = $"{v419}"
    let v428 : unit = ()
    let v429 : (unit -> unit) = closure7(v18, v420)
    let v430 : unit = (fun () -> v429 (); v428) ()
    let v437 : string = $"{v59}"
    let v445 : unit = ()
    let v446 : (unit -> unit) = closure7(v18, v437)
    let v447 : unit = (fun () -> v446 (); v445) ()
    let v454 : string = $"%A{v12}"
    let v458 : string = $"{v454}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v18, v458)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v475 : string = $"{v95}"
    let v483 : unit = ()
    let v484 : (unit -> unit) = closure7(v18, v475)
    let v485 : unit = (fun () -> v484 (); v483) ()
    let v493 : string = "on_line"
    let v494 : string = $"{v493}"
    let v502 : unit = ()
    let v503 : (unit -> unit) = closure7(v18, v494)
    let v504 : unit = (fun () -> v503 (); v502) ()
    let v511 : string = $"{v59}"
    let v519 : unit = ()
    let v520 : (unit -> unit) = closure7(v18, v511)
    let v521 : unit = (fun () -> v520 (); v519) ()
    (* run_target_args'
    let v531 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v532 : string = "format!(\"{:#?}\", $0)"
    let v533 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v532 
    let v534 : string = "fable_library_rust::String_::fromString($0)"
    let v535 : string = Fable.Core.RustInterop.emitRustExpr v533 v534 
    let _run_target_args'_v531 = v535 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v536 : string = "format!(\"{:#?}\", $0)"
    let v537 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v536 
    let v538 : string = "fable_library_rust::String_::fromString($0)"
    let v539 : string = Fable.Core.RustInterop.emitRustExpr v537 v538 
    let _run_target_args'_v531 = v539 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v540 : string = "format!(\"{:#?}\", $0)"
    let v541 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v540 
    let v542 : string = "fable_library_rust::String_::fromString($0)"
    let v543 : string = Fable.Core.RustInterop.emitRustExpr v541 v542 
    let _run_target_args'_v531 = v543 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v545 : string = $"%A{v13}"
    let _run_target_args'_v531 = v545 
    #endif
#if FABLE_COMPILER_PYTHON
    let v549 : string = $"%A{v13}"
    let _run_target_args'_v531 = v549 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v553 : string = $"%A{v13}"
    let _run_target_args'_v531 = v553 
    #endif
#else
    let v557 : string = $"%A{v13}"
    let _run_target_args'_v531 = v557 
    #endif
    let v560 : string = _run_target_args'_v531 
    let v570 : string = $"{v560}"
    let v578 : unit = ()
    let v579 : (unit -> unit) = closure7(v18, v570)
    let v580 : unit = (fun () -> v579 (); v578) ()
    let v587 : string = $"{v95}"
    let v595 : unit = ()
    let v596 : (unit -> unit) = closure7(v18, v587)
    let v597 : unit = (fun () -> v596 (); v595) ()
    let v605 : string = "stdin"
    let v606 : string = $"{v605}"
    let v614 : unit = ()
    let v615 : (unit -> unit) = closure7(v18, v606)
    let v616 : unit = (fun () -> v615 (); v614) ()
    let v623 : string = $"{v59}"
    let v631 : unit = ()
    let v632 : (unit -> unit) = closure7(v18, v623)
    let v633 : unit = (fun () -> v632 (); v631) ()
    (* run_target_args'
    let v643 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v644 : string = "format!(\"{:#?}\", $0)"
    let v645 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v644 
    let v646 : string = "fable_library_rust::String_::fromString($0)"
    let v647 : string = Fable.Core.RustInterop.emitRustExpr v645 v646 
    let _run_target_args'_v643 = v647 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v648 : string = "format!(\"{:#?}\", $0)"
    let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v648 
    let v650 : string = "fable_library_rust::String_::fromString($0)"
    let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
    let _run_target_args'_v643 = v651 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v652 : string = "format!(\"{:#?}\", $0)"
    let v653 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v652 
    let v654 : string = "fable_library_rust::String_::fromString($0)"
    let v655 : string = Fable.Core.RustInterop.emitRustExpr v653 v654 
    let _run_target_args'_v643 = v655 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v657 : string = $"%A{v14}"
    let _run_target_args'_v643 = v657 
    #endif
#if FABLE_COMPILER_PYTHON
    let v661 : string = $"%A{v14}"
    let _run_target_args'_v643 = v661 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v665 : string = $"%A{v14}"
    let _run_target_args'_v643 = v665 
    #endif
#else
    let v669 : string = $"%A{v14}"
    let _run_target_args'_v643 = v669 
    #endif
    let v672 : string = _run_target_args'_v643 
    let v682 : string = $"{v672}"
    let v690 : unit = ()
    let v691 : (unit -> unit) = closure7(v18, v682)
    let v692 : unit = (fun () -> v691 (); v690) ()
    let v699 : string = $"{v95}"
    let v707 : unit = ()
    let v708 : (unit -> unit) = closure7(v18, v699)
    let v709 : unit = (fun () -> v708 (); v707) ()
    let v717 : string = "trace"
    let v718 : string = $"{v717}"
    let v726 : unit = ()
    let v727 : (unit -> unit) = closure7(v18, v718)
    let v728 : unit = (fun () -> v727 (); v726) ()
    let v735 : string = $"{v59}"
    let v743 : unit = ()
    let v744 : (unit -> unit) = closure7(v18, v735)
    let v745 : unit = (fun () -> v744 (); v743) ()
    let v753 : string =
        if v15 then
            let v751 : string = "true"
            v751
        else
            let v752 : string = "false"
            v752
    let v755 : string = $"{v753}"
    let v763 : unit = ()
    let v764 : (unit -> unit) = closure7(v18, v755)
    let v765 : unit = (fun () -> v764 (); v763) ()
    let v772 : string = $"{v95}"
    let v780 : unit = ()
    let v781 : (unit -> unit) = closure7(v18, v772)
    let v782 : unit = (fun () -> v781 (); v780) ()
    let v790 : string = "working_directory"
    let v791 : string = $"{v790}"
    let v799 : unit = ()
    let v800 : (unit -> unit) = closure7(v18, v791)
    let v801 : unit = (fun () -> v800 (); v799) ()
    let v808 : string = $"{v59}"
    let v816 : unit = ()
    let v817 : (unit -> unit) = closure7(v18, v808)
    let v818 : unit = (fun () -> v817 (); v816) ()
    (* run_target_args'
    let v828 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v829 : string = "format!(\"{:#?}\", $0)"
    let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v829 
    let v831 : string = "fable_library_rust::String_::fromString($0)"
    let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
    let _run_target_args'_v828 = v832 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v833 : string = "format!(\"{:#?}\", $0)"
    let v834 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v833 
    let v835 : string = "fable_library_rust::String_::fromString($0)"
    let v836 : string = Fable.Core.RustInterop.emitRustExpr v834 v835 
    let _run_target_args'_v828 = v836 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v837 : string = "format!(\"{:#?}\", $0)"
    let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v837 
    let v839 : string = "fable_library_rust::String_::fromString($0)"
    let v840 : string = Fable.Core.RustInterop.emitRustExpr v838 v839 
    let _run_target_args'_v828 = v840 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v842 : string = $"%A{v16}"
    let _run_target_args'_v828 = v842 
    #endif
#if FABLE_COMPILER_PYTHON
    let v846 : string = $"%A{v16}"
    let _run_target_args'_v828 = v846 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v850 : string = $"%A{v16}"
    let _run_target_args'_v828 = v850 
    #endif
#else
    let v854 : string = $"%A{v16}"
    let _run_target_args'_v828 = v854 
    #endif
    let v857 : string = _run_target_args'_v828 
    let v867 : string = $"{v857}"
    let v875 : unit = ()
    let v876 : (unit -> unit) = closure7(v18, v867)
    let v877 : unit = (fun () -> v876 (); v875) ()
    let v885 : string = " }"
    let v886 : string = $"{v885}"
    let v894 : unit = ()
    let v895 : (unit -> unit) = closure7(v18, v886)
    let v896 : unit = (fun () -> v895 (); v894) ()
    let v903 : string = $"{v885}"
    let v911 : unit = ()
    let v912 : (unit -> unit) = closure7(v18, v903)
    let v913 : unit = (fun () -> v912 (); v911) ()
    let v919 : string = v18.l0
    let v920 : int64 = v0.l0
    let v923 : string = " "
    let v924 : string = v6 + v923 
    let v928 : string = v924 + v7 
    let v933 : string = " #"
    let v934 : string = v928 + v933 
    let v938 : (int64 -> string) = _.ToString()
    let v939 : string = v938 v920
    let v943 : string = v934 + v939 
    let v947 : string = v943 + v923 
    let v952 : string = "runtime.execute_with_options"
    let v953 : string = v947 + v952 
    let v958 : string = " / "
    let v959 : string = v953 + v958 
    let v963 : string = v959 + v919 
    method16(v963)
and closure40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v25 : unit = ()
        let v26 : (unit -> unit) = closure2()
        let v27 : unit = (fun () -> v26 (); v25) ()
        let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
        let v66 : string = method8(v48, v49, v50, v51, v52, v53)
        let v67 : string = method12()
        let v69 : string = $"%A{v8}"
        let v72 : string = method116(v48, v49, v50, v51, v52, v53, v66, v67, v7, v69, v0, v1, v2, v3, v4, v5, v6)
        method17(v72)
and closure41 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method117 () : (std_process_Child option -> std_process_Child option) =
    closure41()
and closure42 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US27 =
    US27_0(v0)
and method118 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) =
    closure42()
and closure43 () (v0 : std_string_String) : US27 =
    US27_1(v0)
and method119 () : (std_string_String -> US27) =
    closure43()
and method120 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method13()
    let v19 : Mut3 = {l0 = v18} : Mut3
    let v22 : string = "{ "
    let v23 : string = $"{v22}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v19, v23)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v41 : string = "error"
    let v42 : string = $"{v41}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v19, v42)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v60 : string = " = "
    let v61 : string = $"{v60}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v19, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    (* run_target_args'
    let v81 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v81 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "format!(\"{:#?}\", $0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v86 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let _run_target_args'_v81 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "format!(\"{:#?}\", $0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v90 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let _run_target_args'_v81 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : string = $"%A{v8}"
    let _run_target_args'_v81 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v99 : string = $"%A{v8}"
    let _run_target_args'_v81 = v99 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : string = $"%A{v8}"
    let _run_target_args'_v81 = v103 
    #endif
#else
    let v107 : string = $"%A{v8}"
    let _run_target_args'_v81 = v107 
    #endif
    let v110 : string = _run_target_args'_v81 
    let v120 : string = $"{v110}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v19, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v138 : string = "; "
    let v139 : string = $"{v138}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v19, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v157 : string = "file_name"
    let v158 : string = $"{v157}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v19, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v175 : string = $"{v60}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v19, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v9}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v19, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v209 : string = $"{v138}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v19, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v227 : string = "arguments"
    let v228 : string = $"{v227}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v19, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v245 : string = $"{v60}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v19, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v262 : string = $"{v10}"
    let v270 : unit = ()
    let v271 : (unit -> unit) = closure7(v19, v262)
    let v272 : unit = (fun () -> v271 (); v270) ()
    let v279 : string = $"{v138}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v19, v279)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v297 : string = "options"
    let v298 : string = $"{v297}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v19, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v315 : string = $"{v60}"
    let v323 : unit = ()
    let v324 : (unit -> unit) = closure7(v19, v315)
    let v325 : unit = (fun () -> v324 (); v323) ()
    let v332 : string = $"{v22}"
    let v340 : unit = ()
    let v341 : (unit -> unit) = closure7(v19, v332)
    let v342 : unit = (fun () -> v341 (); v340) ()
    let v350 : string = "command"
    let v351 : string = $"{v350}"
    let v359 : unit = ()
    let v360 : (unit -> unit) = closure7(v19, v351)
    let v361 : unit = (fun () -> v360 (); v359) ()
    let v368 : string = $"{v60}"
    let v376 : unit = ()
    let v377 : (unit -> unit) = closure7(v19, v368)
    let v378 : unit = (fun () -> v377 (); v376) ()
    let v385 : string = $"{v11}"
    let v393 : unit = ()
    let v394 : (unit -> unit) = closure7(v19, v385)
    let v395 : unit = (fun () -> v394 (); v393) ()
    let v402 : string = $"{v138}"
    let v410 : unit = ()
    let v411 : (unit -> unit) = closure7(v19, v402)
    let v412 : unit = (fun () -> v411 (); v410) ()
    let v420 : string = "cancellation_token"
    let v421 : string = $"{v420}"
    let v429 : unit = ()
    let v430 : (unit -> unit) = closure7(v19, v421)
    let v431 : unit = (fun () -> v430 (); v429) ()
    let v438 : string = $"{v60}"
    let v446 : unit = ()
    let v447 : (unit -> unit) = closure7(v19, v438)
    let v448 : unit = (fun () -> v447 (); v446) ()
    (* run_target_args'
    let v458 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v459 : string = "format!(\"{:#?}\", $0)"
    let v460 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v459 
    let v461 : string = "fable_library_rust::String_::fromString($0)"
    let v462 : string = Fable.Core.RustInterop.emitRustExpr v460 v461 
    let _run_target_args'_v458 = v462 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v463 : string = "format!(\"{:#?}\", $0)"
    let v464 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v463 
    let v465 : string = "fable_library_rust::String_::fromString($0)"
    let v466 : string = Fable.Core.RustInterop.emitRustExpr v464 v465 
    let _run_target_args'_v458 = v466 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v467 : string = "format!(\"{:#?}\", $0)"
    let v468 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v467 
    let v469 : string = "fable_library_rust::String_::fromString($0)"
    let v470 : string = Fable.Core.RustInterop.emitRustExpr v468 v469 
    let _run_target_args'_v458 = v470 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v472 : string = $"%A{v12}"
    let _run_target_args'_v458 = v472 
    #endif
#if FABLE_COMPILER_PYTHON
    let v476 : string = $"%A{v12}"
    let _run_target_args'_v458 = v476 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v480 : string = $"%A{v12}"
    let _run_target_args'_v458 = v480 
    #endif
#else
    let v484 : string = $"%A{v12}"
    let _run_target_args'_v458 = v484 
    #endif
    let v487 : string = _run_target_args'_v458 
    let v497 : string = $"{v487}"
    let v505 : unit = ()
    let v506 : (unit -> unit) = closure7(v19, v497)
    let v507 : unit = (fun () -> v506 (); v505) ()
    let v514 : string = $"{v138}"
    let v522 : unit = ()
    let v523 : (unit -> unit) = closure7(v19, v514)
    let v524 : unit = (fun () -> v523 (); v522) ()
    let v532 : string = "environment_variables"
    let v533 : string = $"{v532}"
    let v541 : unit = ()
    let v542 : (unit -> unit) = closure7(v19, v533)
    let v543 : unit = (fun () -> v542 (); v541) ()
    let v550 : string = $"{v60}"
    let v558 : unit = ()
    let v559 : (unit -> unit) = closure7(v19, v550)
    let v560 : unit = (fun () -> v559 (); v558) ()
    let v567 : string = $"%A{v13}"
    let v571 : string = $"{v567}"
    let v579 : unit = ()
    let v580 : (unit -> unit) = closure7(v19, v571)
    let v581 : unit = (fun () -> v580 (); v579) ()
    let v588 : string = $"{v138}"
    let v596 : unit = ()
    let v597 : (unit -> unit) = closure7(v19, v588)
    let v598 : unit = (fun () -> v597 (); v596) ()
    let v606 : string = "on_line"
    let v607 : string = $"{v606}"
    let v615 : unit = ()
    let v616 : (unit -> unit) = closure7(v19, v607)
    let v617 : unit = (fun () -> v616 (); v615) ()
    let v624 : string = $"{v60}"
    let v632 : unit = ()
    let v633 : (unit -> unit) = closure7(v19, v624)
    let v634 : unit = (fun () -> v633 (); v632) ()
    (* run_target_args'
    let v644 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v645 : string = "format!(\"{:#?}\", $0)"
    let v646 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v645 
    let v647 : string = "fable_library_rust::String_::fromString($0)"
    let v648 : string = Fable.Core.RustInterop.emitRustExpr v646 v647 
    let _run_target_args'_v644 = v648 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v649 : string = "format!(\"{:#?}\", $0)"
    let v650 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v649 
    let v651 : string = "fable_library_rust::String_::fromString($0)"
    let v652 : string = Fable.Core.RustInterop.emitRustExpr v650 v651 
    let _run_target_args'_v644 = v652 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v653 : string = "format!(\"{:#?}\", $0)"
    let v654 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v653 
    let v655 : string = "fable_library_rust::String_::fromString($0)"
    let v656 : string = Fable.Core.RustInterop.emitRustExpr v654 v655 
    let _run_target_args'_v644 = v656 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v658 : string = $"%A{v14}"
    let _run_target_args'_v644 = v658 
    #endif
#if FABLE_COMPILER_PYTHON
    let v662 : string = $"%A{v14}"
    let _run_target_args'_v644 = v662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v666 : string = $"%A{v14}"
    let _run_target_args'_v644 = v666 
    #endif
#else
    let v670 : string = $"%A{v14}"
    let _run_target_args'_v644 = v670 
    #endif
    let v673 : string = _run_target_args'_v644 
    let v683 : string = $"{v673}"
    let v691 : unit = ()
    let v692 : (unit -> unit) = closure7(v19, v683)
    let v693 : unit = (fun () -> v692 (); v691) ()
    let v700 : string = $"{v138}"
    let v708 : unit = ()
    let v709 : (unit -> unit) = closure7(v19, v700)
    let v710 : unit = (fun () -> v709 (); v708) ()
    let v718 : string = "stdin"
    let v719 : string = $"{v718}"
    let v727 : unit = ()
    let v728 : (unit -> unit) = closure7(v19, v719)
    let v729 : unit = (fun () -> v728 (); v727) ()
    let v736 : string = $"{v60}"
    let v744 : unit = ()
    let v745 : (unit -> unit) = closure7(v19, v736)
    let v746 : unit = (fun () -> v745 (); v744) ()
    (* run_target_args'
    let v756 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v757 : string = "format!(\"{:#?}\", $0)"
    let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v757 
    let v759 : string = "fable_library_rust::String_::fromString($0)"
    let v760 : string = Fable.Core.RustInterop.emitRustExpr v758 v759 
    let _run_target_args'_v756 = v760 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v761 : string = "format!(\"{:#?}\", $0)"
    let v762 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v761 
    let v763 : string = "fable_library_rust::String_::fromString($0)"
    let v764 : string = Fable.Core.RustInterop.emitRustExpr v762 v763 
    let _run_target_args'_v756 = v764 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v765 : string = "format!(\"{:#?}\", $0)"
    let v766 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v765 
    let v767 : string = "fable_library_rust::String_::fromString($0)"
    let v768 : string = Fable.Core.RustInterop.emitRustExpr v766 v767 
    let _run_target_args'_v756 = v768 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v770 : string = $"%A{v15}"
    let _run_target_args'_v756 = v770 
    #endif
#if FABLE_COMPILER_PYTHON
    let v774 : string = $"%A{v15}"
    let _run_target_args'_v756 = v774 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v778 : string = $"%A{v15}"
    let _run_target_args'_v756 = v778 
    #endif
#else
    let v782 : string = $"%A{v15}"
    let _run_target_args'_v756 = v782 
    #endif
    let v785 : string = _run_target_args'_v756 
    let v795 : string = $"{v785}"
    let v803 : unit = ()
    let v804 : (unit -> unit) = closure7(v19, v795)
    let v805 : unit = (fun () -> v804 (); v803) ()
    let v812 : string = $"{v138}"
    let v820 : unit = ()
    let v821 : (unit -> unit) = closure7(v19, v812)
    let v822 : unit = (fun () -> v821 (); v820) ()
    let v830 : string = "trace"
    let v831 : string = $"{v830}"
    let v839 : unit = ()
    let v840 : (unit -> unit) = closure7(v19, v831)
    let v841 : unit = (fun () -> v840 (); v839) ()
    let v848 : string = $"{v60}"
    let v856 : unit = ()
    let v857 : (unit -> unit) = closure7(v19, v848)
    let v858 : unit = (fun () -> v857 (); v856) ()
    let v866 : string =
        if v16 then
            let v864 : string = "true"
            v864
        else
            let v865 : string = "false"
            v865
    let v868 : string = $"{v866}"
    let v876 : unit = ()
    let v877 : (unit -> unit) = closure7(v19, v868)
    let v878 : unit = (fun () -> v877 (); v876) ()
    let v885 : string = $"{v138}"
    let v893 : unit = ()
    let v894 : (unit -> unit) = closure7(v19, v885)
    let v895 : unit = (fun () -> v894 (); v893) ()
    let v903 : string = "working_directory"
    let v904 : string = $"{v903}"
    let v912 : unit = ()
    let v913 : (unit -> unit) = closure7(v19, v904)
    let v914 : unit = (fun () -> v913 (); v912) ()
    let v921 : string = $"{v60}"
    let v929 : unit = ()
    let v930 : (unit -> unit) = closure7(v19, v921)
    let v931 : unit = (fun () -> v930 (); v929) ()
    (* run_target_args'
    let v941 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v942 : string = "format!(\"{:#?}\", $0)"
    let v943 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v942 
    let v944 : string = "fable_library_rust::String_::fromString($0)"
    let v945 : string = Fable.Core.RustInterop.emitRustExpr v943 v944 
    let _run_target_args'_v941 = v945 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v946 : string = "format!(\"{:#?}\", $0)"
    let v947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v946 
    let v948 : string = "fable_library_rust::String_::fromString($0)"
    let v949 : string = Fable.Core.RustInterop.emitRustExpr v947 v948 
    let _run_target_args'_v941 = v949 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v950 : string = "format!(\"{:#?}\", $0)"
    let v951 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v950 
    let v952 : string = "fable_library_rust::String_::fromString($0)"
    let v953 : string = Fable.Core.RustInterop.emitRustExpr v951 v952 
    let _run_target_args'_v941 = v953 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v955 : string = $"%A{v17}"
    let _run_target_args'_v941 = v955 
    #endif
#if FABLE_COMPILER_PYTHON
    let v959 : string = $"%A{v17}"
    let _run_target_args'_v941 = v959 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v963 : string = $"%A{v17}"
    let _run_target_args'_v941 = v963 
    #endif
#else
    let v967 : string = $"%A{v17}"
    let _run_target_args'_v941 = v967 
    #endif
    let v970 : string = _run_target_args'_v941 
    let v980 : string = $"{v970}"
    let v988 : unit = ()
    let v989 : (unit -> unit) = closure7(v19, v980)
    let v990 : unit = (fun () -> v989 (); v988) ()
    let v998 : string = " }"
    let v999 : string = $"{v998}"
    let v1007 : unit = ()
    let v1008 : (unit -> unit) = closure7(v19, v999)
    let v1009 : unit = (fun () -> v1008 (); v1007) ()
    let v1016 : string = $"{v998}"
    let v1024 : unit = ()
    let v1025 : (unit -> unit) = closure7(v19, v1016)
    let v1026 : unit = (fun () -> v1025 (); v1024) ()
    let v1032 : string = v19.l0
    let v1033 : int64 = v0.l0
    let v1036 : string = " "
    let v1037 : string = v6 + v1036 
    let v1041 : string = v1037 + v7 
    let v1046 : string = " #"
    let v1047 : string = v1041 + v1046 
    let v1051 : (int64 -> string) = _.ToString()
    let v1052 : string = v1051 v1033
    let v1056 : string = v1047 + v1052 
    let v1060 : string = v1056 + v1036 
    let v1065 : string = "runtime.execute_with_options / child error"
    let v1066 : string = v1060 + v1065 
    let v1071 : string = " / "
    let v1072 : string = v1066 + v1071 
    let v1076 : string = v1072 + v1032 
    method16(v1076)
and closure44 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v10 : US0 = US0_4
    let v11 : bool = method7(v10)
    if v11 then
        let v26 : unit = ()
        let v27 : (unit -> unit) = closure2()
        let v28 : unit = (fun () -> v27 (); v26) ()
        let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
        let v67 : string = method8(v49, v50, v51, v52, v53, v54)
        let v68 : string = method76()
        let v70 : string = $"%A{v8}"
        let v73 : string = method120(v49, v50, v51, v52, v53, v54, v67, v68, v9, v7, v70, v0, v1, v2, v3, v4, v5, v6)
        method17(v73)
and method121 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure45 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method122 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure45()
and closure46 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method123 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and method124 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and closure47 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method125 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure47()
and closure48 () (v0 : std_string_String) : US29 =
    US29_0(v0)
and method126 () : (std_string_String -> US29) =
    closure48()
and closure49 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method127 () : (std_string_String -> US29) =
    closure49()
and method128 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "trace'"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v71 : string =
        if v8 then
            let v69 : string = "true"
            v69
        else
            let v70 : string = "false"
            v70
    let v73 : string = $"{v71}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "e"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    (* run_target_args'
    let v148 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "format!(\"{:#?}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v149 
    let v151 : string = "fable_library_rust::String_::fromString($0)"
    let v152 : string = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let _run_target_args'_v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : string = "format!(\"{:#?}\", $0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v153 
    let v155 : string = "fable_library_rust::String_::fromString($0)"
    let v156 : string = Fable.Core.RustInterop.emitRustExpr v154 v155 
    let _run_target_args'_v148 = v156 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v157 : string = "format!(\"{:#?}\", $0)"
    let v158 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v157 
    let v159 : string = "fable_library_rust::String_::fromString($0)"
    let v160 : string = Fable.Core.RustInterop.emitRustExpr v158 v159 
    let _run_target_args'_v148 = v160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v162 : string = $"%A{v9}"
    let _run_target_args'_v148 = v162 
    #endif
#if FABLE_COMPILER_PYTHON
    let v166 : string = $"%A{v9}"
    let _run_target_args'_v148 = v166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v170 : string = $"%A{v9}"
    let _run_target_args'_v148 = v170 
    #endif
#else
    let v174 : string = $"%A{v9}"
    let _run_target_args'_v148 = v174 
    #endif
    let v177 : string = _run_target_args'_v148 
    let v187 : string = $"{v177}"
    let v195 : unit = ()
    let v196 : (unit -> unit) = closure7(v11, v187)
    let v197 : unit = (fun () -> v196 (); v195) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v214 : unit = ()
    let v215 : (unit -> unit) = closure7(v11, v206)
    let v216 : unit = (fun () -> v215 (); v214) ()
    let v222 : string = v11.l0
    let v223 : int64 = v0.l0
    let v226 : string = " "
    let v227 : string = v6 + v226 
    let v231 : string = v227 + v7 
    let v236 : string = " #"
    let v237 : string = v231 + v236 
    let v241 : (int64 -> string) = _.ToString()
    let v242 : string = v241 v223
    let v246 : string = v237 + v242 
    let v250 : string = v246 + v226 
    let v255 : string = "runtime.stdio_line"
    let v256 : string = v250 + v255 
    let v261 : string = " / "
    let v262 : string = v256 + v261 
    let v266 : string = v262 + v222 
    method16(v266)
and closure50 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method128(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and method129 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = v10.l0
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v43 : string = v39 + v8 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v11 
    method16(v53)
and closure51 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method78()
        let v60 : bool = v0 = ""
        let v63 : string =
            if v60 then
                let v61 : string = ""
                v61
            else
                method129(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v63)
and closure52 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method130 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure52()
and method131 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure53 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US30 =
    US30_0(v0)
and method132 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) =
    closure53()
and method133 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure54 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US31 =
    US31_0(v0)
and method134 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) =
    closure54()
and method135 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure55 () (v0 : std_process_Output) : US32 =
    US32_0(v0)
and method136 () : (std_process_Output -> US32) =
    closure55()
and closure56 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and method137 () : (std_string_String -> US32) =
    closure56()
and method138 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method13()
    let v19 : Mut3 = {l0 = v18} : Mut3
    let v22 : string = "{ "
    let v23 : string = $"{v22}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v19, v23)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v41 : string = "error"
    let v42 : string = $"{v41}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v19, v42)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v60 : string = " = "
    let v61 : string = $"{v60}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v19, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    (* run_target_args'
    let v81 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v81 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "format!(\"{:#?}\", $0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v86 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let _run_target_args'_v81 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "format!(\"{:#?}\", $0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v90 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let _run_target_args'_v81 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : string = $"%A{v8}"
    let _run_target_args'_v81 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v99 : string = $"%A{v8}"
    let _run_target_args'_v81 = v99 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : string = $"%A{v8}"
    let _run_target_args'_v81 = v103 
    #endif
#else
    let v107 : string = $"%A{v8}"
    let _run_target_args'_v81 = v107 
    #endif
    let v110 : string = _run_target_args'_v81 
    let v120 : string = $"{v110}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v19, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v138 : string = "; "
    let v139 : string = $"{v138}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v19, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v157 : string = "file_name"
    let v158 : string = $"{v157}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v19, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v175 : string = $"{v60}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v19, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v9}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v19, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v209 : string = $"{v138}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v19, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v227 : string = "arguments"
    let v228 : string = $"{v227}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v19, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v245 : string = $"{v60}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v19, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v262 : string = $"{v10}"
    let v270 : unit = ()
    let v271 : (unit -> unit) = closure7(v19, v262)
    let v272 : unit = (fun () -> v271 (); v270) ()
    let v279 : string = $"{v138}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v19, v279)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v297 : string = "options"
    let v298 : string = $"{v297}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v19, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v315 : string = $"{v60}"
    let v323 : unit = ()
    let v324 : (unit -> unit) = closure7(v19, v315)
    let v325 : unit = (fun () -> v324 (); v323) ()
    let v332 : string = $"{v22}"
    let v340 : unit = ()
    let v341 : (unit -> unit) = closure7(v19, v332)
    let v342 : unit = (fun () -> v341 (); v340) ()
    let v350 : string = "command"
    let v351 : string = $"{v350}"
    let v359 : unit = ()
    let v360 : (unit -> unit) = closure7(v19, v351)
    let v361 : unit = (fun () -> v360 (); v359) ()
    let v368 : string = $"{v60}"
    let v376 : unit = ()
    let v377 : (unit -> unit) = closure7(v19, v368)
    let v378 : unit = (fun () -> v377 (); v376) ()
    let v385 : string = $"{v11}"
    let v393 : unit = ()
    let v394 : (unit -> unit) = closure7(v19, v385)
    let v395 : unit = (fun () -> v394 (); v393) ()
    let v402 : string = $"{v138}"
    let v410 : unit = ()
    let v411 : (unit -> unit) = closure7(v19, v402)
    let v412 : unit = (fun () -> v411 (); v410) ()
    let v420 : string = "cancellation_token"
    let v421 : string = $"{v420}"
    let v429 : unit = ()
    let v430 : (unit -> unit) = closure7(v19, v421)
    let v431 : unit = (fun () -> v430 (); v429) ()
    let v438 : string = $"{v60}"
    let v446 : unit = ()
    let v447 : (unit -> unit) = closure7(v19, v438)
    let v448 : unit = (fun () -> v447 (); v446) ()
    (* run_target_args'
    let v458 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v459 : string = "format!(\"{:#?}\", $0)"
    let v460 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v459 
    let v461 : string = "fable_library_rust::String_::fromString($0)"
    let v462 : string = Fable.Core.RustInterop.emitRustExpr v460 v461 
    let _run_target_args'_v458 = v462 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v463 : string = "format!(\"{:#?}\", $0)"
    let v464 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v463 
    let v465 : string = "fable_library_rust::String_::fromString($0)"
    let v466 : string = Fable.Core.RustInterop.emitRustExpr v464 v465 
    let _run_target_args'_v458 = v466 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v467 : string = "format!(\"{:#?}\", $0)"
    let v468 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v467 
    let v469 : string = "fable_library_rust::String_::fromString($0)"
    let v470 : string = Fable.Core.RustInterop.emitRustExpr v468 v469 
    let _run_target_args'_v458 = v470 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v472 : string = $"%A{v12}"
    let _run_target_args'_v458 = v472 
    #endif
#if FABLE_COMPILER_PYTHON
    let v476 : string = $"%A{v12}"
    let _run_target_args'_v458 = v476 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v480 : string = $"%A{v12}"
    let _run_target_args'_v458 = v480 
    #endif
#else
    let v484 : string = $"%A{v12}"
    let _run_target_args'_v458 = v484 
    #endif
    let v487 : string = _run_target_args'_v458 
    let v497 : string = $"{v487}"
    let v505 : unit = ()
    let v506 : (unit -> unit) = closure7(v19, v497)
    let v507 : unit = (fun () -> v506 (); v505) ()
    let v514 : string = $"{v138}"
    let v522 : unit = ()
    let v523 : (unit -> unit) = closure7(v19, v514)
    let v524 : unit = (fun () -> v523 (); v522) ()
    let v532 : string = "environment_variables"
    let v533 : string = $"{v532}"
    let v541 : unit = ()
    let v542 : (unit -> unit) = closure7(v19, v533)
    let v543 : unit = (fun () -> v542 (); v541) ()
    let v550 : string = $"{v60}"
    let v558 : unit = ()
    let v559 : (unit -> unit) = closure7(v19, v550)
    let v560 : unit = (fun () -> v559 (); v558) ()
    let v567 : string = $"%A{v13}"
    let v571 : string = $"{v567}"
    let v579 : unit = ()
    let v580 : (unit -> unit) = closure7(v19, v571)
    let v581 : unit = (fun () -> v580 (); v579) ()
    let v588 : string = $"{v138}"
    let v596 : unit = ()
    let v597 : (unit -> unit) = closure7(v19, v588)
    let v598 : unit = (fun () -> v597 (); v596) ()
    let v606 : string = "on_line"
    let v607 : string = $"{v606}"
    let v615 : unit = ()
    let v616 : (unit -> unit) = closure7(v19, v607)
    let v617 : unit = (fun () -> v616 (); v615) ()
    let v624 : string = $"{v60}"
    let v632 : unit = ()
    let v633 : (unit -> unit) = closure7(v19, v624)
    let v634 : unit = (fun () -> v633 (); v632) ()
    (* run_target_args'
    let v644 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v645 : string = "format!(\"{:#?}\", $0)"
    let v646 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v645 
    let v647 : string = "fable_library_rust::String_::fromString($0)"
    let v648 : string = Fable.Core.RustInterop.emitRustExpr v646 v647 
    let _run_target_args'_v644 = v648 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v649 : string = "format!(\"{:#?}\", $0)"
    let v650 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v649 
    let v651 : string = "fable_library_rust::String_::fromString($0)"
    let v652 : string = Fable.Core.RustInterop.emitRustExpr v650 v651 
    let _run_target_args'_v644 = v652 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v653 : string = "format!(\"{:#?}\", $0)"
    let v654 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v653 
    let v655 : string = "fable_library_rust::String_::fromString($0)"
    let v656 : string = Fable.Core.RustInterop.emitRustExpr v654 v655 
    let _run_target_args'_v644 = v656 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v658 : string = $"%A{v14}"
    let _run_target_args'_v644 = v658 
    #endif
#if FABLE_COMPILER_PYTHON
    let v662 : string = $"%A{v14}"
    let _run_target_args'_v644 = v662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v666 : string = $"%A{v14}"
    let _run_target_args'_v644 = v666 
    #endif
#else
    let v670 : string = $"%A{v14}"
    let _run_target_args'_v644 = v670 
    #endif
    let v673 : string = _run_target_args'_v644 
    let v683 : string = $"{v673}"
    let v691 : unit = ()
    let v692 : (unit -> unit) = closure7(v19, v683)
    let v693 : unit = (fun () -> v692 (); v691) ()
    let v700 : string = $"{v138}"
    let v708 : unit = ()
    let v709 : (unit -> unit) = closure7(v19, v700)
    let v710 : unit = (fun () -> v709 (); v708) ()
    let v718 : string = "stdin"
    let v719 : string = $"{v718}"
    let v727 : unit = ()
    let v728 : (unit -> unit) = closure7(v19, v719)
    let v729 : unit = (fun () -> v728 (); v727) ()
    let v736 : string = $"{v60}"
    let v744 : unit = ()
    let v745 : (unit -> unit) = closure7(v19, v736)
    let v746 : unit = (fun () -> v745 (); v744) ()
    (* run_target_args'
    let v756 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v757 : string = "format!(\"{:#?}\", $0)"
    let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v757 
    let v759 : string = "fable_library_rust::String_::fromString($0)"
    let v760 : string = Fable.Core.RustInterop.emitRustExpr v758 v759 
    let _run_target_args'_v756 = v760 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v761 : string = "format!(\"{:#?}\", $0)"
    let v762 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v761 
    let v763 : string = "fable_library_rust::String_::fromString($0)"
    let v764 : string = Fable.Core.RustInterop.emitRustExpr v762 v763 
    let _run_target_args'_v756 = v764 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v765 : string = "format!(\"{:#?}\", $0)"
    let v766 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v765 
    let v767 : string = "fable_library_rust::String_::fromString($0)"
    let v768 : string = Fable.Core.RustInterop.emitRustExpr v766 v767 
    let _run_target_args'_v756 = v768 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v770 : string = $"%A{v15}"
    let _run_target_args'_v756 = v770 
    #endif
#if FABLE_COMPILER_PYTHON
    let v774 : string = $"%A{v15}"
    let _run_target_args'_v756 = v774 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v778 : string = $"%A{v15}"
    let _run_target_args'_v756 = v778 
    #endif
#else
    let v782 : string = $"%A{v15}"
    let _run_target_args'_v756 = v782 
    #endif
    let v785 : string = _run_target_args'_v756 
    let v795 : string = $"{v785}"
    let v803 : unit = ()
    let v804 : (unit -> unit) = closure7(v19, v795)
    let v805 : unit = (fun () -> v804 (); v803) ()
    let v812 : string = $"{v138}"
    let v820 : unit = ()
    let v821 : (unit -> unit) = closure7(v19, v812)
    let v822 : unit = (fun () -> v821 (); v820) ()
    let v830 : string = "trace"
    let v831 : string = $"{v830}"
    let v839 : unit = ()
    let v840 : (unit -> unit) = closure7(v19, v831)
    let v841 : unit = (fun () -> v840 (); v839) ()
    let v848 : string = $"{v60}"
    let v856 : unit = ()
    let v857 : (unit -> unit) = closure7(v19, v848)
    let v858 : unit = (fun () -> v857 (); v856) ()
    let v866 : string =
        if v16 then
            let v864 : string = "true"
            v864
        else
            let v865 : string = "false"
            v865
    let v868 : string = $"{v866}"
    let v876 : unit = ()
    let v877 : (unit -> unit) = closure7(v19, v868)
    let v878 : unit = (fun () -> v877 (); v876) ()
    let v885 : string = $"{v138}"
    let v893 : unit = ()
    let v894 : (unit -> unit) = closure7(v19, v885)
    let v895 : unit = (fun () -> v894 (); v893) ()
    let v903 : string = "working_directory"
    let v904 : string = $"{v903}"
    let v912 : unit = ()
    let v913 : (unit -> unit) = closure7(v19, v904)
    let v914 : unit = (fun () -> v913 (); v912) ()
    let v921 : string = $"{v60}"
    let v929 : unit = ()
    let v930 : (unit -> unit) = closure7(v19, v921)
    let v931 : unit = (fun () -> v930 (); v929) ()
    (* run_target_args'
    let v941 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v942 : string = "format!(\"{:#?}\", $0)"
    let v943 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v942 
    let v944 : string = "fable_library_rust::String_::fromString($0)"
    let v945 : string = Fable.Core.RustInterop.emitRustExpr v943 v944 
    let _run_target_args'_v941 = v945 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v946 : string = "format!(\"{:#?}\", $0)"
    let v947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v946 
    let v948 : string = "fable_library_rust::String_::fromString($0)"
    let v949 : string = Fable.Core.RustInterop.emitRustExpr v947 v948 
    let _run_target_args'_v941 = v949 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v950 : string = "format!(\"{:#?}\", $0)"
    let v951 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v950 
    let v952 : string = "fable_library_rust::String_::fromString($0)"
    let v953 : string = Fable.Core.RustInterop.emitRustExpr v951 v952 
    let _run_target_args'_v941 = v953 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v955 : string = $"%A{v17}"
    let _run_target_args'_v941 = v955 
    #endif
#if FABLE_COMPILER_PYTHON
    let v959 : string = $"%A{v17}"
    let _run_target_args'_v941 = v959 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v963 : string = $"%A{v17}"
    let _run_target_args'_v941 = v963 
    #endif
#else
    let v967 : string = $"%A{v17}"
    let _run_target_args'_v941 = v967 
    #endif
    let v970 : string = _run_target_args'_v941 
    let v980 : string = $"{v970}"
    let v988 : unit = ()
    let v989 : (unit -> unit) = closure7(v19, v980)
    let v990 : unit = (fun () -> v989 (); v988) ()
    let v998 : string = " }"
    let v999 : string = $"{v998}"
    let v1007 : unit = ()
    let v1008 : (unit -> unit) = closure7(v19, v999)
    let v1009 : unit = (fun () -> v1008 (); v1007) ()
    let v1016 : string = $"{v998}"
    let v1024 : unit = ()
    let v1025 : (unit -> unit) = closure7(v19, v1016)
    let v1026 : unit = (fun () -> v1025 (); v1024) ()
    let v1032 : string = v19.l0
    let v1033 : int64 = v0.l0
    let v1036 : string = " "
    let v1037 : string = v6 + v1036 
    let v1041 : string = v1037 + v7 
    let v1046 : string = " #"
    let v1047 : string = v1041 + v1046 
    let v1051 : (int64 -> string) = _.ToString()
    let v1052 : string = v1051 v1033
    let v1056 : string = v1047 + v1052 
    let v1060 : string = v1056 + v1036 
    let v1065 : string = "runtime.execute_with_options / output error"
    let v1066 : string = v1060 + v1065 
    let v1071 : string = " / "
    let v1072 : string = v1066 + v1071 
    let v1076 : string = v1072 + v1032 
    method16(v1076)
and closure57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v10 : US0 = US0_4
    let v11 : bool = method7(v10)
    if v11 then
        let v26 : unit = ()
        let v27 : (unit -> unit) = closure2()
        let v28 : unit = (fun () -> v27 (); v26) ()
        let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
        let v67 : string = method8(v49, v50, v51, v52, v53, v54)
        let v68 : string = method76()
        let v70 : string = $"%A{v8}"
        let v73 : string = method138(v49, v50, v51, v52, v53, v54, v67, v68, v9, v7, v70, v0, v1, v2, v3, v4, v5, v6)
        method17(v73)
and closure58 () (v0 : int32) : US33 =
    US33_0(v0)
and method139 () : (int32 -> US33) =
    closure58()
and method140 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "std_trace_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "runtime.execute_with_options / result"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure59 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method78()
        let v61 : int32 = v1.Length
        let v62 : string = method140(v41, v42, v43, v44, v45, v46, v59, v60, v0, v61)
        method17(v62)
and method143 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method13()
    let v18 : Mut3 = {l0 = v17} : Mut3
    let v21 : string = "{ "
    let v22 : string = $"{v21}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v18, v22)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v40 : string = "file_name"
    let v41 : string = $"{v40}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v18, v41)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v59 : string = " = "
    let v60 : string = $"{v59}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v18, v60)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v77 : string = $"{v8}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v18, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v18, v96)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v114 : string = "arguments"
    let v115 : string = $"{v114}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v18, v115)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v132 : string = $"{v59}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v18, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v149 : string = $"%A{v9}"
    let v153 : string = $"{v149}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v18, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v170 : string = $"{v95}"
    let v178 : unit = ()
    let v179 : (unit -> unit) = closure7(v18, v170)
    let v180 : unit = (fun () -> v179 (); v178) ()
    let v188 : string = "options"
    let v189 : string = $"{v188}"
    let v197 : unit = ()
    let v198 : (unit -> unit) = closure7(v18, v189)
    let v199 : unit = (fun () -> v198 (); v197) ()
    let v206 : string = $"{v59}"
    let v214 : unit = ()
    let v215 : (unit -> unit) = closure7(v18, v206)
    let v216 : unit = (fun () -> v215 (); v214) ()
    let v223 : string = $"{v21}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v18, v223)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v241 : string = "command"
    let v242 : string = $"{v241}"
    let v250 : unit = ()
    let v251 : (unit -> unit) = closure7(v18, v242)
    let v252 : unit = (fun () -> v251 (); v250) ()
    let v259 : string = $"{v59}"
    let v267 : unit = ()
    let v268 : (unit -> unit) = closure7(v18, v259)
    let v269 : unit = (fun () -> v268 (); v267) ()
    let v276 : string = $"{v10}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v18, v276)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v293 : string = $"{v95}"
    let v301 : unit = ()
    let v302 : (unit -> unit) = closure7(v18, v293)
    let v303 : unit = (fun () -> v302 (); v301) ()
    let v311 : string = "cancellation_token"
    let v312 : string = $"{v311}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v18, v312)
    let v322 : unit = (fun () -> v321 (); v320) ()
    let v329 : string = $"{v59}"
    let v337 : unit = ()
    let v338 : (unit -> unit) = closure7(v18, v329)
    let v339 : unit = (fun () -> v338 (); v337) ()
    (* run_target_args'
    let v349 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v350 : string = "format!(\"{:#?}\", $0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v350 
    let v352 : string = "fable_library_rust::String_::fromString($0)"
    let v353 : string = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let _run_target_args'_v349 = v353 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v354 : string = "format!(\"{:#?}\", $0)"
    let v355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v354 
    let v356 : string = "fable_library_rust::String_::fromString($0)"
    let v357 : string = Fable.Core.RustInterop.emitRustExpr v355 v356 
    let _run_target_args'_v349 = v357 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v358 : string = "format!(\"{:#?}\", $0)"
    let v359 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v358 
    let v360 : string = "fable_library_rust::String_::fromString($0)"
    let v361 : string = Fable.Core.RustInterop.emitRustExpr v359 v360 
    let _run_target_args'_v349 = v361 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v363 : string = $"%A{v11}"
    let _run_target_args'_v349 = v363 
    #endif
#if FABLE_COMPILER_PYTHON
    let v367 : string = $"%A{v11}"
    let _run_target_args'_v349 = v367 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v371 : string = $"%A{v11}"
    let _run_target_args'_v349 = v371 
    #endif
#else
    let v375 : string = $"%A{v11}"
    let _run_target_args'_v349 = v375 
    #endif
    let v378 : string = _run_target_args'_v349 
    let v388 : string = $"{v378}"
    let v396 : unit = ()
    let v397 : (unit -> unit) = closure7(v18, v388)
    let v398 : unit = (fun () -> v397 (); v396) ()
    let v405 : string = $"{v95}"
    let v413 : unit = ()
    let v414 : (unit -> unit) = closure7(v18, v405)
    let v415 : unit = (fun () -> v414 (); v413) ()
    let v423 : string = "environment_variables"
    let v424 : string = $"{v423}"
    let v432 : unit = ()
    let v433 : (unit -> unit) = closure7(v18, v424)
    let v434 : unit = (fun () -> v433 (); v432) ()
    let v441 : string = $"{v59}"
    let v449 : unit = ()
    let v450 : (unit -> unit) = closure7(v18, v441)
    let v451 : unit = (fun () -> v450 (); v449) ()
    let v458 : string = $"%A{v12}"
    let v462 : string = $"{v458}"
    let v470 : unit = ()
    let v471 : (unit -> unit) = closure7(v18, v462)
    let v472 : unit = (fun () -> v471 (); v470) ()
    let v479 : string = $"{v95}"
    let v487 : unit = ()
    let v488 : (unit -> unit) = closure7(v18, v479)
    let v489 : unit = (fun () -> v488 (); v487) ()
    let v497 : string = "on_line"
    let v498 : string = $"{v497}"
    let v506 : unit = ()
    let v507 : (unit -> unit) = closure7(v18, v498)
    let v508 : unit = (fun () -> v507 (); v506) ()
    let v515 : string = $"{v59}"
    let v523 : unit = ()
    let v524 : (unit -> unit) = closure7(v18, v515)
    let v525 : unit = (fun () -> v524 (); v523) ()
    (* run_target_args'
    let v535 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v536 : string = "format!(\"{:#?}\", $0)"
    let v537 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v536 
    let v538 : string = "fable_library_rust::String_::fromString($0)"
    let v539 : string = Fable.Core.RustInterop.emitRustExpr v537 v538 
    let _run_target_args'_v535 = v539 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v540 : string = "format!(\"{:#?}\", $0)"
    let v541 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v540 
    let v542 : string = "fable_library_rust::String_::fromString($0)"
    let v543 : string = Fable.Core.RustInterop.emitRustExpr v541 v542 
    let _run_target_args'_v535 = v543 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v544 : string = "format!(\"{:#?}\", $0)"
    let v545 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v544 
    let v546 : string = "fable_library_rust::String_::fromString($0)"
    let v547 : string = Fable.Core.RustInterop.emitRustExpr v545 v546 
    let _run_target_args'_v535 = v547 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v549 : string = $"%A{v13}"
    let _run_target_args'_v535 = v549 
    #endif
#if FABLE_COMPILER_PYTHON
    let v553 : string = $"%A{v13}"
    let _run_target_args'_v535 = v553 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v557 : string = $"%A{v13}"
    let _run_target_args'_v535 = v557 
    #endif
#else
    let v561 : string = $"%A{v13}"
    let _run_target_args'_v535 = v561 
    #endif
    let v564 : string = _run_target_args'_v535 
    let v574 : string = $"{v564}"
    let v582 : unit = ()
    let v583 : (unit -> unit) = closure7(v18, v574)
    let v584 : unit = (fun () -> v583 (); v582) ()
    let v591 : string = $"{v95}"
    let v599 : unit = ()
    let v600 : (unit -> unit) = closure7(v18, v591)
    let v601 : unit = (fun () -> v600 (); v599) ()
    let v609 : string = "stdin"
    let v610 : string = $"{v609}"
    let v618 : unit = ()
    let v619 : (unit -> unit) = closure7(v18, v610)
    let v620 : unit = (fun () -> v619 (); v618) ()
    let v627 : string = $"{v59}"
    let v635 : unit = ()
    let v636 : (unit -> unit) = closure7(v18, v627)
    let v637 : unit = (fun () -> v636 (); v635) ()
    (* run_target_args'
    let v647 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v648 : string = "format!(\"{:#?}\", $0)"
    let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v648 
    let v650 : string = "fable_library_rust::String_::fromString($0)"
    let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
    let _run_target_args'_v647 = v651 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v652 : string = "format!(\"{:#?}\", $0)"
    let v653 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v652 
    let v654 : string = "fable_library_rust::String_::fromString($0)"
    let v655 : string = Fable.Core.RustInterop.emitRustExpr v653 v654 
    let _run_target_args'_v647 = v655 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v656 : string = "format!(\"{:#?}\", $0)"
    let v657 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v656 
    let v658 : string = "fable_library_rust::String_::fromString($0)"
    let v659 : string = Fable.Core.RustInterop.emitRustExpr v657 v658 
    let _run_target_args'_v647 = v659 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v661 : string = $"%A{v14}"
    let _run_target_args'_v647 = v661 
    #endif
#if FABLE_COMPILER_PYTHON
    let v665 : string = $"%A{v14}"
    let _run_target_args'_v647 = v665 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v669 : string = $"%A{v14}"
    let _run_target_args'_v647 = v669 
    #endif
#else
    let v673 : string = $"%A{v14}"
    let _run_target_args'_v647 = v673 
    #endif
    let v676 : string = _run_target_args'_v647 
    let v686 : string = $"{v676}"
    let v694 : unit = ()
    let v695 : (unit -> unit) = closure7(v18, v686)
    let v696 : unit = (fun () -> v695 (); v694) ()
    let v703 : string = $"{v95}"
    let v711 : unit = ()
    let v712 : (unit -> unit) = closure7(v18, v703)
    let v713 : unit = (fun () -> v712 (); v711) ()
    let v721 : string = "trace"
    let v722 : string = $"{v721}"
    let v730 : unit = ()
    let v731 : (unit -> unit) = closure7(v18, v722)
    let v732 : unit = (fun () -> v731 (); v730) ()
    let v739 : string = $"{v59}"
    let v747 : unit = ()
    let v748 : (unit -> unit) = closure7(v18, v739)
    let v749 : unit = (fun () -> v748 (); v747) ()
    let v757 : string =
        if v15 then
            let v755 : string = "true"
            v755
        else
            let v756 : string = "false"
            v756
    let v759 : string = $"{v757}"
    let v767 : unit = ()
    let v768 : (unit -> unit) = closure7(v18, v759)
    let v769 : unit = (fun () -> v768 (); v767) ()
    let v776 : string = $"{v95}"
    let v784 : unit = ()
    let v785 : (unit -> unit) = closure7(v18, v776)
    let v786 : unit = (fun () -> v785 (); v784) ()
    let v794 : string = "working_directory"
    let v795 : string = $"{v794}"
    let v803 : unit = ()
    let v804 : (unit -> unit) = closure7(v18, v795)
    let v805 : unit = (fun () -> v804 (); v803) ()
    let v812 : string = $"{v59}"
    let v820 : unit = ()
    let v821 : (unit -> unit) = closure7(v18, v812)
    let v822 : unit = (fun () -> v821 (); v820) ()
    (* run_target_args'
    let v832 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v833 : string = "format!(\"{:#?}\", $0)"
    let v834 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v833 
    let v835 : string = "fable_library_rust::String_::fromString($0)"
    let v836 : string = Fable.Core.RustInterop.emitRustExpr v834 v835 
    let _run_target_args'_v832 = v836 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v837 : string = "format!(\"{:#?}\", $0)"
    let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v837 
    let v839 : string = "fable_library_rust::String_::fromString($0)"
    let v840 : string = Fable.Core.RustInterop.emitRustExpr v838 v839 
    let _run_target_args'_v832 = v840 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v841 : string = "format!(\"{:#?}\", $0)"
    let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v841 
    let v843 : string = "fable_library_rust::String_::fromString($0)"
    let v844 : string = Fable.Core.RustInterop.emitRustExpr v842 v843 
    let _run_target_args'_v832 = v844 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v846 : string = $"%A{v16}"
    let _run_target_args'_v832 = v846 
    #endif
#if FABLE_COMPILER_PYTHON
    let v850 : string = $"%A{v16}"
    let _run_target_args'_v832 = v850 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v854 : string = $"%A{v16}"
    let _run_target_args'_v832 = v854 
    #endif
#else
    let v858 : string = $"%A{v16}"
    let _run_target_args'_v832 = v858 
    #endif
    let v861 : string = _run_target_args'_v832 
    let v871 : string = $"{v861}"
    let v879 : unit = ()
    let v880 : (unit -> unit) = closure7(v18, v871)
    let v881 : unit = (fun () -> v880 (); v879) ()
    let v889 : string = " }"
    let v890 : string = $"{v889}"
    let v898 : unit = ()
    let v899 : (unit -> unit) = closure7(v18, v890)
    let v900 : unit = (fun () -> v899 (); v898) ()
    let v907 : string = $"{v889}"
    let v915 : unit = ()
    let v916 : (unit -> unit) = closure7(v18, v907)
    let v917 : unit = (fun () -> v916 (); v915) ()
    let v923 : string = v18.l0
    let v924 : int64 = v0.l0
    let v927 : string = " "
    let v928 : string = v6 + v927 
    let v932 : string = v928 + v7 
    let v937 : string = " #"
    let v938 : string = v932 + v937 
    let v942 : (int64 -> string) = _.ToString()
    let v943 : string = v942 v924
    let v947 : string = v938 + v943 
    let v951 : string = v947 + v927 
    let v956 : string = "runtime.execute_with_options_async"
    let v957 : string = v951 + v956 
    let v962 : string = " / "
    let v963 : string = v957 + v962 
    let v967 : string = v963 + v923 
    method16(v967)
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v25 : unit = ()
        let v26 : (unit -> unit) = closure2()
        let v27 : unit = (fun () -> v26 (); v25) ()
        let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
        let v66 : string = method8(v48, v49, v50, v51, v52, v53)
        let v67 : string = method12()
        let v68 : string = method143(v48, v49, v50, v51, v52, v53, v66, v67, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method17(v68)
and method144 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method147 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure62 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US34 =
    US34_0(v0)
and method148 () : ((struct (int32 * string * bool) -> Async<unit>) -> US34) =
    closure62()
and method149 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure63 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method78()
        let v60 : bool = v0 = ""
        let v63 : string =
            if v60 then
                let v61 : string = ""
                v61
            else
                method129(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v63)
and method146 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v2424 : string = method147(v10)
            let v2426 : string = null |> unbox<string>
            let v2429 : bool = v2424 = v2426
            let v2430 : bool = v2429 <> true
            if v2430 then
                let v2433 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v2434 : US34 option = v3 |> Option.map v2433 
                let v2454 : US34 = US34_1
                let v2455 : US34 = v2434 |> Option.defaultValue v2454 
                match v2455 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v2459) -> (* Some *)
                    let v2460 : int32 = method149(v7)
                    let v2461 : Async<unit> = v2459 struct (v2460, v2424, v9)
                    do! v2461 
                    ()
                let v2464 : string =
                    if v9 then
                        let v2462 : string = $"! {v2424}"
                        v2462
                    else
                        let v2463 : string = $"> {v2424}"
                        v2463
                if v5 then
                    let v2528 : unit = ()
                    let v2529 : (unit -> unit) = closure63(v2464)
                    let v2530 : unit = (fun () -> v2529 (); v2528) ()
                    ()
                else
                    let v2595 : unit = ()
                    let v2596 : (unit -> unit) = closure10(v2464)
                    let v2597 : unit = (fun () -> v2596 (); v2595) ()
                    ()
                let v2601 : string =
                    if v9 then
                        let v2599 : string = "\u001b[7;4m"
                        v2599
                    else
                        let v2600 : string = ""
                        v2600
                let v2604 : string =
                    if v9 then
                        let v2602 : string = "\u001b[0m"
                        v2602
                    else
                        let v2603 : string = ""
                        v2603
                let v2605 : string = $"{v2601}{v2424}{v2604}"
                (* run_target_args'
                let v2606 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2607 : (string -> unit) = v8.Push
                v2607 v2605
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5000 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v5000 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5002 : unit = ()
    let _let'_v5002 =
        async {
            let v7397 : string = method147(v10)
            let v7399 : string = null |> unbox<string>
            let v7402 : bool = v7397 = v7399
            let v7403 : bool = v7402 <> true
            if v7403 then
                let v7406 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v7407 : US34 option = v3 |> Option.map v7406 
                let v7427 : US34 = US34_1
                let v7428 : US34 = v7407 |> Option.defaultValue v7427 
                match v7428 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v7432) -> (* Some *)
                    let v7433 : int32 = method149(v7)
                    let v7434 : Async<unit> = v7432 struct (v7433, v7397, v9)
                    do! v7434 
                    ()
                let v7437 : string =
                    if v9 then
                        let v7435 : string = $"! {v7397}"
                        v7435
                    else
                        let v7436 : string = $"> {v7397}"
                        v7436
                if v5 then
                    let v7501 : unit = ()
                    let v7502 : (unit -> unit) = closure63(v7437)
                    let v7503 : unit = (fun () -> v7502 (); v7501) ()
                    ()
                else
                    let v7568 : unit = ()
                    let v7569 : (unit -> unit) = closure10(v7437)
                    let v7570 : unit = (fun () -> v7569 (); v7568) ()
                    ()
                let v7574 : string =
                    if v9 then
                        let v7572 : string = "\u001b[7;4m"
                        v7572
                    else
                        let v7573 : string = ""
                        v7573
                let v7577 : string =
                    if v9 then
                        let v7575 : string = "\u001b[0m"
                        v7575
                    else
                        let v7576 : string = ""
                        v7576
                let v7578 : string = $"{v7574}{v7397}{v7577}"
                (* run_target_args'
                let v7579 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v7580 : (string -> unit) = v8.Push
                v7580 v7578
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9973 : Async<unit> = _let'_v5002 
    let _run_target_args'_v15 = v9973 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v9975 : unit = ()
    let _let'_v9975 =
        async {
            let v12370 : string = method147(v10)
            let v12372 : string = null |> unbox<string>
            let v12375 : bool = v12370 = v12372
            let v12376 : bool = v12375 <> true
            if v12376 then
                let v12379 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v12380 : US34 option = v3 |> Option.map v12379 
                let v12400 : US34 = US34_1
                let v12401 : US34 = v12380 |> Option.defaultValue v12400 
                match v12401 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v12405) -> (* Some *)
                    let v12406 : int32 = method149(v7)
                    let v12407 : Async<unit> = v12405 struct (v12406, v12370, v9)
                    do! v12407 
                    ()
                let v12410 : string =
                    if v9 then
                        let v12408 : string = $"! {v12370}"
                        v12408
                    else
                        let v12409 : string = $"> {v12370}"
                        v12409
                if v5 then
                    let v12474 : unit = ()
                    let v12475 : (unit -> unit) = closure63(v12410)
                    let v12476 : unit = (fun () -> v12475 (); v12474) ()
                    ()
                else
                    let v12541 : unit = ()
                    let v12542 : (unit -> unit) = closure10(v12410)
                    let v12543 : unit = (fun () -> v12542 (); v12541) ()
                    ()
                let v12547 : string =
                    if v9 then
                        let v12545 : string = "\u001b[7;4m"
                        v12545
                    else
                        let v12546 : string = ""
                        v12546
                let v12550 : string =
                    if v9 then
                        let v12548 : string = "\u001b[0m"
                        v12548
                    else
                        let v12549 : string = ""
                        v12549
                let v12551 : string = $"{v12547}{v12370}{v12550}"
                (* run_target_args'
                let v12552 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v12553 : (string -> unit) = v8.Push
                v12553 v12551
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v14946 : Async<unit> = _let'_v9975 
    let _run_target_args'_v15 = v14946 
    #endif
#else
    let v14948 : unit = ()
    let _let'_v14948 =
        async {
            let v17343 : string = method147(v10)
            let v17345 : string = null |> unbox<string>
            let v17348 : bool = v17343 = v17345
            let v17349 : bool = v17348 <> true
            if v17349 then
                let v17352 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v17353 : US34 option = v3 |> Option.map v17352 
                let v17373 : US34 = US34_1
                let v17374 : US34 = v17353 |> Option.defaultValue v17373 
                match v17374 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v17378) -> (* Some *)
                    let v17379 : int32 = method149(v7)
                    let v17380 : Async<unit> = v17378 struct (v17379, v17343, v9)
                    do! v17380 
                    ()
                let v17383 : string =
                    if v9 then
                        let v17381 : string = $"! {v17343}"
                        v17381
                    else
                        let v17382 : string = $"> {v17343}"
                        v17382
                if v5 then
                    let v17447 : unit = ()
                    let v17448 : (unit -> unit) = closure63(v17383)
                    let v17449 : unit = (fun () -> v17448 (); v17447) ()
                    ()
                else
                    let v17514 : unit = ()
                    let v17515 : (unit -> unit) = closure10(v17383)
                    let v17516 : unit = (fun () -> v17515 (); v17514) ()
                    ()
                let v17520 : string =
                    if v9 then
                        let v17518 : string = "\u001b[7;4m"
                        v17518
                    else
                        let v17519 : string = ""
                        v17519
                let v17523 : string =
                    if v9 then
                        let v17521 : string = "\u001b[0m"
                        v17521
                    else
                        let v17522 : string = ""
                        v17522
                let v17524 : string = $"{v17520}{v17343}{v17523}"
                (* run_target_args'
                let v17525 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v17526 : (string -> unit) = v8.Push
                v17526 v17524
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v19919 : Async<unit> = _let'_v14948 
    let _run_target_args'_v15 = v19919 
    #endif
    let v19920 : Async<unit> = _run_target_args'_v15 
    v19920
and method145 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method146(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method145(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure64 () (v0 : System.Threading.CancellationToken) : US35 =
    US35_0(v0)
and method150 () : (System.Threading.CancellationToken -> US35) =
    closure64()
and method151 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v598 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v600 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v600 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v604 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v604 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v608 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v608 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v612 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v612 
            #endif
#if FABLE_COMPILER_PYTHON
            let v616 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v616 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v620 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v620 
            #endif
#else
            let v623 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v623 = v623 
            let v624 : System.Threading.CancellationToken = v623 
            let v625 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v626 : (System.Threading.CancellationToken []) = [|v624; v625; v0|]
            let v627 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v628 : System.Threading.CancellationTokenSource = v627 v626
            let v629 : System.Threading.CancellationToken = v628.Token
            return v629 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1210 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v1210 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1212 : unit = ()
    let _let'_v1212 =
        async {
            (* run_target_args'
            let v1791 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1793 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1793 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1797 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1797 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1801 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1801 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1805 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1805 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1809 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1809 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1813 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1813 
            #endif
#else
            let v1816 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1816 = v1816 
            let v1817 : System.Threading.CancellationToken = v1816 
            let v1818 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1819 : (System.Threading.CancellationToken []) = [|v1817; v1818; v0|]
            let v1820 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1821 : System.Threading.CancellationTokenSource = v1820 v1819
            let v1822 : System.Threading.CancellationToken = v1821.Token
            return v1822 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2403 : Async<System.Threading.CancellationToken> = _let'_v1212 
    let _run_target_args'_v5 = v2403 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2405 : unit = ()
    let _let'_v2405 =
        async {
            (* run_target_args'
            let v2984 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2986 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2986 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2990 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2990 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2994 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2994 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2998 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2998 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3002 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3002 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3006 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3006 
            #endif
#else
            let v3009 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v3009 = v3009 
            let v3010 : System.Threading.CancellationToken = v3009 
            let v3011 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v3012 : (System.Threading.CancellationToken []) = [|v3010; v3011; v0|]
            let v3013 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v3014 : System.Threading.CancellationTokenSource = v3013 v3012
            let v3015 : System.Threading.CancellationToken = v3014.Token
            return v3015 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3596 : Async<System.Threading.CancellationToken> = _let'_v2405 
    let _run_target_args'_v5 = v3596 
    #endif
#else
    let v3598 : unit = ()
    let _let'_v3598 =
        async {
            (* run_target_args'
            let v4177 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4179 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4179 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4183 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4183 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4187 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4187 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4191 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4191 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4195 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4195 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4199 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4199 
            #endif
#else
            let v4202 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v4202 = v4202 
            let v4203 : System.Threading.CancellationToken = v4202 
            let v4204 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v4205 : (System.Threading.CancellationToken []) = [|v4203; v4204; v0|]
            let v4206 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v4207 : System.Threading.CancellationTokenSource = v4206 v4205
            let v4208 : System.Threading.CancellationToken = v4207.Token
            return v4208 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4789 : Async<System.Threading.CancellationToken> = _let'_v3598 
    let _run_target_args'_v5 = v4789 
    #endif
    let v4790 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v4790
and method152 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method153 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method152(v0)
    let v2 : bool = v1 = false
    if v2 then
        method153(v0)
and method155 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "ex"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    (* run_target_args'
    let v72 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v72 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v72 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "format!(\"{:#?}\", $0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _run_target_args'_v72 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : string = $"%A{v8}"
    let _run_target_args'_v72 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : string = $"%A{v8}"
    let _run_target_args'_v72 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v94 : string = $"%A{v8}"
    let _run_target_args'_v72 = v94 
    #endif
#else
    let v98 : string = $"%A{v8}"
    let _run_target_args'_v72 = v98 
    #endif
    let v101 : string = _run_target_args'_v72 
    let v111 : string = $"{v101}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v10, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = " }"
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v10, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v146 : string = v10.l0
    let v147 : int64 = v0.l0
    let v150 : string = " "
    let v151 : string = v6 + v150 
    let v155 : string = v151 + v7 
    let v160 : string = " #"
    let v161 : string = v155 + v160 
    let v165 : (int64 -> string) = _.ToString()
    let v166 : string = v165 v147
    let v170 : string = v161 + v166 
    let v174 : string = v170 + v150 
    let v179 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v180 : string = v174 + v179 
    let v185 : string = " / "
    let v186 : string = v180 + v185 
    let v190 : string = v186 + v146 
    method16(v190)
and closure66 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method40()
        let v60 : string = method155(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method154 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v11099 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v11101 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v11099 = v11101 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v11105 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v11099 = v11105 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v11109 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v11099 = v11109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v11113 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v11099 = v11113 
                #endif
#if FABLE_COMPILER_PYTHON
                let v11117 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v11099 = v11117 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v11121 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v11099 = v11121 
                #endif
#else
                let v11124 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v11099 = v11124 
                #endif
                let v11125 : System.Threading.Tasks.Task = _run_target_args'_v11099 
                (* run_target_args'
                let v11138 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v11140 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v11138 = v11140 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v11144 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v11138 = v11144 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v11148 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v11138 = v11148 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v11151 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v11152 : Async<unit> = v11151 v11125
                let _run_target_args'_v11138 = v11152 
                #endif
#if FABLE_COMPILER_PYTHON
                let v11153 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v11154 : Async<unit> = v11153 v11125
                let _run_target_args'_v11138 = v11154 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v11155 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v11156 : Async<unit> = v11155 v11125
                let _run_target_args'_v11138 = v11156 
                #endif
#else
                let v11157 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v11158 : Async<unit> = v11157 v11125
                let _run_target_args'_v11138 = v11158 
                #endif
                let v11159 : Async<unit> = _run_target_args'_v11138 
                do! v11159 
                (* run_target_args'
                let v11172 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v11174 : int32 = null |> unbox<int32>
                let _run_target_args'_v11172 = v11174 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v11178 : int32 = null |> unbox<int32>
                let _run_target_args'_v11172 = v11178 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v11182 : int32 = null |> unbox<int32>
                let _run_target_args'_v11172 = v11182 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v11186 : int32 = null |> unbox<int32>
                let _run_target_args'_v11172 = v11186 
                #endif
#if FABLE_COMPILER_PYTHON
                let v11190 : int32 = null |> unbox<int32>
                let _run_target_args'_v11172 = v11190 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v11194 : int32 = null |> unbox<int32>
                let _run_target_args'_v11172 = v11194 
                #endif
#else
                let v11197 : int32 = v0.ExitCode
                let _run_target_args'_v11172 = v11197 
                #endif
                let v11198 : int32 = _run_target_args'_v11172 
                return v11198 
                (* indent
                ()
            indent *)
            with ex ->
                let v11488 : exn = ex
                (* run_target_args'
                let v11493 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v11495 : string = $"%A{v11488}"
                let _run_target_args'_v11493 = v11495 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v11499 : string = $"%A{v11488}"
                let _run_target_args'_v11493 = v11499 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v11503 : string = $"%A{v11488}"
                let _run_target_args'_v11493 = v11503 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v11507 : string = $"%A{v11488}"
                let _run_target_args'_v11493 = v11507 
                #endif
#if FABLE_COMPILER_PYTHON
                let v11511 : string = $"%A{v11488}"
                let _run_target_args'_v11493 = v11511 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v11515 : string = $"%A{v11488}"
                let _run_target_args'_v11493 = v11515 
                #endif
#else
                let v11518 : string = $"{v11488.GetType ()}: {v11488.Message}"
                let _run_target_args'_v11493 = v11518 
                #endif
                let v11519 : string = _run_target_args'_v11493 
                (* run_target_args'
                let v11528 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v11529 : (string -> unit) = v1.Push
                v11529 v11519
                #endif
                // run_target_args' is_unit
                let v11531 : System.Threading.Tasks.TaskCanceledException = v11488 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v11594 : unit = ()
                let v11595 : (unit -> unit) = closure66(v11531)
                let v11596 : unit = (fun () -> v11595 (); v11594) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v22785 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v22785 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22787 : unit = ()
    let _let'_v22787 =
        async {
            try
                (* run_target_args'
                let v33865 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v33867 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v33865 = v33867 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v33871 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v33865 = v33871 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v33875 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v33865 = v33875 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v33879 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v33865 = v33879 
                #endif
#if FABLE_COMPILER_PYTHON
                let v33883 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v33865 = v33883 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v33887 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v33865 = v33887 
                #endif
#else
                let v33890 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v33865 = v33890 
                #endif
                let v33891 : System.Threading.Tasks.Task = _run_target_args'_v33865 
                (* run_target_args'
                let v33904 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v33906 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v33904 = v33906 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v33910 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v33904 = v33910 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v33914 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v33904 = v33914 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v33917 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v33918 : Async<unit> = v33917 v33891
                let _run_target_args'_v33904 = v33918 
                #endif
#if FABLE_COMPILER_PYTHON
                let v33919 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v33920 : Async<unit> = v33919 v33891
                let _run_target_args'_v33904 = v33920 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v33921 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v33922 : Async<unit> = v33921 v33891
                let _run_target_args'_v33904 = v33922 
                #endif
#else
                let v33923 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v33924 : Async<unit> = v33923 v33891
                let _run_target_args'_v33904 = v33924 
                #endif
                let v33925 : Async<unit> = _run_target_args'_v33904 
                do! v33925 
                (* run_target_args'
                let v33938 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v33940 : int32 = null |> unbox<int32>
                let _run_target_args'_v33938 = v33940 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v33944 : int32 = null |> unbox<int32>
                let _run_target_args'_v33938 = v33944 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v33948 : int32 = null |> unbox<int32>
                let _run_target_args'_v33938 = v33948 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v33952 : int32 = null |> unbox<int32>
                let _run_target_args'_v33938 = v33952 
                #endif
#if FABLE_COMPILER_PYTHON
                let v33956 : int32 = null |> unbox<int32>
                let _run_target_args'_v33938 = v33956 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v33960 : int32 = null |> unbox<int32>
                let _run_target_args'_v33938 = v33960 
                #endif
#else
                let v33963 : int32 = v0.ExitCode
                let _run_target_args'_v33938 = v33963 
                #endif
                let v33964 : int32 = _run_target_args'_v33938 
                return v33964 
                (* indent
                ()
            indent *)
            with ex ->
                let v34254 : exn = ex
                (* run_target_args'
                let v34259 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v34261 : string = $"%A{v34254}"
                let _run_target_args'_v34259 = v34261 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34265 : string = $"%A{v34254}"
                let _run_target_args'_v34259 = v34265 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v34269 : string = $"%A{v34254}"
                let _run_target_args'_v34259 = v34269 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v34273 : string = $"%A{v34254}"
                let _run_target_args'_v34259 = v34273 
                #endif
#if FABLE_COMPILER_PYTHON
                let v34277 : string = $"%A{v34254}"
                let _run_target_args'_v34259 = v34277 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v34281 : string = $"%A{v34254}"
                let _run_target_args'_v34259 = v34281 
                #endif
#else
                let v34284 : string = $"{v34254.GetType ()}: {v34254.Message}"
                let _run_target_args'_v34259 = v34284 
                #endif
                let v34285 : string = _run_target_args'_v34259 
                (* run_target_args'
                let v34294 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v34295 : (string -> unit) = v1.Push
                v34295 v34285
                #endif
                // run_target_args' is_unit
                let v34297 : System.Threading.Tasks.TaskCanceledException = v34254 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v34360 : unit = ()
                let v34361 : (unit -> unit) = closure66(v34297)
                let v34362 : unit = (fun () -> v34361 (); v34360) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v45551 : Async<int32> = _let'_v22787 
    let _run_target_args'_v7 = v45551 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45553 : unit = ()
    let _let'_v45553 =
        async {
            try
                (* run_target_args'
                let v56631 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v56633 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v56631 = v56633 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56637 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v56631 = v56637 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v56641 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v56631 = v56641 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v56645 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v56631 = v56645 
                #endif
#if FABLE_COMPILER_PYTHON
                let v56649 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v56631 = v56649 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v56653 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v56631 = v56653 
                #endif
#else
                let v56656 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v56631 = v56656 
                #endif
                let v56657 : System.Threading.Tasks.Task = _run_target_args'_v56631 
                (* run_target_args'
                let v56670 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v56672 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v56670 = v56672 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56676 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v56670 = v56676 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v56680 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v56670 = v56680 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v56683 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v56684 : Async<unit> = v56683 v56657
                let _run_target_args'_v56670 = v56684 
                #endif
#if FABLE_COMPILER_PYTHON
                let v56685 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v56686 : Async<unit> = v56685 v56657
                let _run_target_args'_v56670 = v56686 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v56687 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v56688 : Async<unit> = v56687 v56657
                let _run_target_args'_v56670 = v56688 
                #endif
#else
                let v56689 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v56690 : Async<unit> = v56689 v56657
                let _run_target_args'_v56670 = v56690 
                #endif
                let v56691 : Async<unit> = _run_target_args'_v56670 
                do! v56691 
                (* run_target_args'
                let v56704 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v56706 : int32 = null |> unbox<int32>
                let _run_target_args'_v56704 = v56706 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56710 : int32 = null |> unbox<int32>
                let _run_target_args'_v56704 = v56710 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v56714 : int32 = null |> unbox<int32>
                let _run_target_args'_v56704 = v56714 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v56718 : int32 = null |> unbox<int32>
                let _run_target_args'_v56704 = v56718 
                #endif
#if FABLE_COMPILER_PYTHON
                let v56722 : int32 = null |> unbox<int32>
                let _run_target_args'_v56704 = v56722 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v56726 : int32 = null |> unbox<int32>
                let _run_target_args'_v56704 = v56726 
                #endif
#else
                let v56729 : int32 = v0.ExitCode
                let _run_target_args'_v56704 = v56729 
                #endif
                let v56730 : int32 = _run_target_args'_v56704 
                return v56730 
                (* indent
                ()
            indent *)
            with ex ->
                let v57020 : exn = ex
                (* run_target_args'
                let v57025 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v57027 : string = $"%A{v57020}"
                let _run_target_args'_v57025 = v57027 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v57031 : string = $"%A{v57020}"
                let _run_target_args'_v57025 = v57031 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57035 : string = $"%A{v57020}"
                let _run_target_args'_v57025 = v57035 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v57039 : string = $"%A{v57020}"
                let _run_target_args'_v57025 = v57039 
                #endif
#if FABLE_COMPILER_PYTHON
                let v57043 : string = $"%A{v57020}"
                let _run_target_args'_v57025 = v57043 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v57047 : string = $"%A{v57020}"
                let _run_target_args'_v57025 = v57047 
                #endif
#else
                let v57050 : string = $"{v57020.GetType ()}: {v57020.Message}"
                let _run_target_args'_v57025 = v57050 
                #endif
                let v57051 : string = _run_target_args'_v57025 
                (* run_target_args'
                let v57060 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v57061 : (string -> unit) = v1.Push
                v57061 v57051
                #endif
                // run_target_args' is_unit
                let v57063 : System.Threading.Tasks.TaskCanceledException = v57020 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v57126 : unit = ()
                let v57127 : (unit -> unit) = closure66(v57063)
                let v57128 : unit = (fun () -> v57127 (); v57126) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v68317 : Async<int32> = _let'_v45553 
    let _run_target_args'_v7 = v68317 
    #endif
#else
    let v68319 : unit = ()
    let _let'_v68319 =
        async {
            try
                (* run_target_args'
                let v79397 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v79399 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v79397 = v79399 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v79403 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v79397 = v79403 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79407 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v79397 = v79407 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v79411 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v79397 = v79411 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79415 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v79397 = v79415 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v79419 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v79397 = v79419 
                #endif
#else
                let v79422 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v79397 = v79422 
                #endif
                let v79423 : System.Threading.Tasks.Task = _run_target_args'_v79397 
                (* run_target_args'
                let v79436 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v79438 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v79436 = v79438 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v79442 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v79436 = v79442 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79446 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v79436 = v79446 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v79449 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v79450 : Async<unit> = v79449 v79423
                let _run_target_args'_v79436 = v79450 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79451 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v79452 : Async<unit> = v79451 v79423
                let _run_target_args'_v79436 = v79452 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v79453 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v79454 : Async<unit> = v79453 v79423
                let _run_target_args'_v79436 = v79454 
                #endif
#else
                let v79455 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v79456 : Async<unit> = v79455 v79423
                let _run_target_args'_v79436 = v79456 
                #endif
                let v79457 : Async<unit> = _run_target_args'_v79436 
                do! v79457 
                (* run_target_args'
                let v79470 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v79472 : int32 = null |> unbox<int32>
                let _run_target_args'_v79470 = v79472 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v79476 : int32 = null |> unbox<int32>
                let _run_target_args'_v79470 = v79476 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79480 : int32 = null |> unbox<int32>
                let _run_target_args'_v79470 = v79480 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v79484 : int32 = null |> unbox<int32>
                let _run_target_args'_v79470 = v79484 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79488 : int32 = null |> unbox<int32>
                let _run_target_args'_v79470 = v79488 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v79492 : int32 = null |> unbox<int32>
                let _run_target_args'_v79470 = v79492 
                #endif
#else
                let v79495 : int32 = v0.ExitCode
                let _run_target_args'_v79470 = v79495 
                #endif
                let v79496 : int32 = _run_target_args'_v79470 
                return v79496 
                (* indent
                ()
            indent *)
            with ex ->
                let v79786 : exn = ex
                (* run_target_args'
                let v79791 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v79793 : string = $"%A{v79786}"
                let _run_target_args'_v79791 = v79793 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v79797 : string = $"%A{v79786}"
                let _run_target_args'_v79791 = v79797 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79801 : string = $"%A{v79786}"
                let _run_target_args'_v79791 = v79801 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v79805 : string = $"%A{v79786}"
                let _run_target_args'_v79791 = v79805 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79809 : string = $"%A{v79786}"
                let _run_target_args'_v79791 = v79809 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v79813 : string = $"%A{v79786}"
                let _run_target_args'_v79791 = v79813 
                #endif
#else
                let v79816 : string = $"{v79786.GetType ()}: {v79786.Message}"
                let _run_target_args'_v79791 = v79816 
                #endif
                let v79817 : string = _run_target_args'_v79791 
                (* run_target_args'
                let v79826 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v79827 : (string -> unit) = v1.Push
                v79827 v79817
                #endif
                // run_target_args' is_unit
                let v79829 : System.Threading.Tasks.TaskCanceledException = v79786 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v79892 : unit = ()
                let v79893 : (unit -> unit) = closure66(v79829)
                let v79894 : unit = (fun () -> v79893 (); v79892) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v91083 : Async<int32> = _let'_v68319 
    let _run_target_args'_v7 = v91083 
    #endif
    let v91084 : Async<int32> = _run_target_args'_v7 
    v91084
and method156 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method13()
    let v18 : Mut3 = {l0 = v17} : Mut3
    let v21 : string = "{ "
    let v22 : string = $"{v21}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v18, v22)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v40 : string = "exit_code"
    let v41 : string = $"{v40}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v18, v41)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v59 : string = " = "
    let v60 : string = $"{v59}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v18, v60)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v80 : string = $"{v8}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v18, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v98 : string = "; "
    let v99 : string = $"{v98}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v18, v99)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v117 : string = "output_length"
    let v118 : string = $"{v117}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v18, v118)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v135 : string = $"{v59}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v18, v135)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v155 : string = $"{v9}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v18, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v172 : string = $"{v98}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v18, v172)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v190 : string = "options"
    let v191 : string = $"{v190}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v18, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v59}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v18, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v225 : string = $"{v21}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v18, v225)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v243 : string = "command"
    let v244 : string = $"{v243}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v18, v244)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v261 : string = $"{v59}"
    let v269 : unit = ()
    let v270 : (unit -> unit) = closure7(v18, v261)
    let v271 : unit = (fun () -> v270 (); v269) ()
    let v278 : string = $"{v10}"
    let v286 : unit = ()
    let v287 : (unit -> unit) = closure7(v18, v278)
    let v288 : unit = (fun () -> v287 (); v286) ()
    let v295 : string = $"{v98}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v18, v295)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v313 : string = "cancellation_token"
    let v314 : string = $"{v313}"
    let v322 : unit = ()
    let v323 : (unit -> unit) = closure7(v18, v314)
    let v324 : unit = (fun () -> v323 (); v322) ()
    let v331 : string = $"{v59}"
    let v339 : unit = ()
    let v340 : (unit -> unit) = closure7(v18, v331)
    let v341 : unit = (fun () -> v340 (); v339) ()
    (* run_target_args'
    let v351 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v352 : string = "format!(\"{:#?}\", $0)"
    let v353 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v352 
    let v354 : string = "fable_library_rust::String_::fromString($0)"
    let v355 : string = Fable.Core.RustInterop.emitRustExpr v353 v354 
    let _run_target_args'_v351 = v355 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v356 : string = "format!(\"{:#?}\", $0)"
    let v357 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v356 
    let v358 : string = "fable_library_rust::String_::fromString($0)"
    let v359 : string = Fable.Core.RustInterop.emitRustExpr v357 v358 
    let _run_target_args'_v351 = v359 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v360 : string = "format!(\"{:#?}\", $0)"
    let v361 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v360 
    let v362 : string = "fable_library_rust::String_::fromString($0)"
    let v363 : string = Fable.Core.RustInterop.emitRustExpr v361 v362 
    let _run_target_args'_v351 = v363 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v365 : string = $"%A{v11}"
    let _run_target_args'_v351 = v365 
    #endif
#if FABLE_COMPILER_PYTHON
    let v369 : string = $"%A{v11}"
    let _run_target_args'_v351 = v369 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v373 : string = $"%A{v11}"
    let _run_target_args'_v351 = v373 
    #endif
#else
    let v377 : string = $"%A{v11}"
    let _run_target_args'_v351 = v377 
    #endif
    let v380 : string = _run_target_args'_v351 
    let v390 : string = $"{v380}"
    let v398 : unit = ()
    let v399 : (unit -> unit) = closure7(v18, v390)
    let v400 : unit = (fun () -> v399 (); v398) ()
    let v407 : string = $"{v98}"
    let v415 : unit = ()
    let v416 : (unit -> unit) = closure7(v18, v407)
    let v417 : unit = (fun () -> v416 (); v415) ()
    let v425 : string = "environment_variables"
    let v426 : string = $"{v425}"
    let v434 : unit = ()
    let v435 : (unit -> unit) = closure7(v18, v426)
    let v436 : unit = (fun () -> v435 (); v434) ()
    let v443 : string = $"{v59}"
    let v451 : unit = ()
    let v452 : (unit -> unit) = closure7(v18, v443)
    let v453 : unit = (fun () -> v452 (); v451) ()
    let v460 : string = $"%A{v12}"
    let v464 : string = $"{v460}"
    let v472 : unit = ()
    let v473 : (unit -> unit) = closure7(v18, v464)
    let v474 : unit = (fun () -> v473 (); v472) ()
    let v481 : string = $"{v98}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v18, v481)
    let v491 : unit = (fun () -> v490 (); v489) ()
    let v499 : string = "on_line"
    let v500 : string = $"{v499}"
    let v508 : unit = ()
    let v509 : (unit -> unit) = closure7(v18, v500)
    let v510 : unit = (fun () -> v509 (); v508) ()
    let v517 : string = $"{v59}"
    let v525 : unit = ()
    let v526 : (unit -> unit) = closure7(v18, v517)
    let v527 : unit = (fun () -> v526 (); v525) ()
    (* run_target_args'
    let v537 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v538 : string = "format!(\"{:#?}\", $0)"
    let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v538 
    let v540 : string = "fable_library_rust::String_::fromString($0)"
    let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
    let _run_target_args'_v537 = v541 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v542 : string = "format!(\"{:#?}\", $0)"
    let v543 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v542 
    let v544 : string = "fable_library_rust::String_::fromString($0)"
    let v545 : string = Fable.Core.RustInterop.emitRustExpr v543 v544 
    let _run_target_args'_v537 = v545 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v546 : string = "format!(\"{:#?}\", $0)"
    let v547 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v546 
    let v548 : string = "fable_library_rust::String_::fromString($0)"
    let v549 : string = Fable.Core.RustInterop.emitRustExpr v547 v548 
    let _run_target_args'_v537 = v549 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v551 : string = $"%A{v13}"
    let _run_target_args'_v537 = v551 
    #endif
#if FABLE_COMPILER_PYTHON
    let v555 : string = $"%A{v13}"
    let _run_target_args'_v537 = v555 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v559 : string = $"%A{v13}"
    let _run_target_args'_v537 = v559 
    #endif
#else
    let v563 : string = $"%A{v13}"
    let _run_target_args'_v537 = v563 
    #endif
    let v566 : string = _run_target_args'_v537 
    let v576 : string = $"{v566}"
    let v584 : unit = ()
    let v585 : (unit -> unit) = closure7(v18, v576)
    let v586 : unit = (fun () -> v585 (); v584) ()
    let v593 : string = $"{v98}"
    let v601 : unit = ()
    let v602 : (unit -> unit) = closure7(v18, v593)
    let v603 : unit = (fun () -> v602 (); v601) ()
    let v611 : string = "stdin"
    let v612 : string = $"{v611}"
    let v620 : unit = ()
    let v621 : (unit -> unit) = closure7(v18, v612)
    let v622 : unit = (fun () -> v621 (); v620) ()
    let v629 : string = $"{v59}"
    let v637 : unit = ()
    let v638 : (unit -> unit) = closure7(v18, v629)
    let v639 : unit = (fun () -> v638 (); v637) ()
    (* run_target_args'
    let v649 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v650 : string = "format!(\"{:#?}\", $0)"
    let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v650 
    let v652 : string = "fable_library_rust::String_::fromString($0)"
    let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
    let _run_target_args'_v649 = v653 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v654 : string = "format!(\"{:#?}\", $0)"
    let v655 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v654 
    let v656 : string = "fable_library_rust::String_::fromString($0)"
    let v657 : string = Fable.Core.RustInterop.emitRustExpr v655 v656 
    let _run_target_args'_v649 = v657 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v658 : string = "format!(\"{:#?}\", $0)"
    let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v658 
    let v660 : string = "fable_library_rust::String_::fromString($0)"
    let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
    let _run_target_args'_v649 = v661 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v663 : string = $"%A{v14}"
    let _run_target_args'_v649 = v663 
    #endif
#if FABLE_COMPILER_PYTHON
    let v667 : string = $"%A{v14}"
    let _run_target_args'_v649 = v667 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v671 : string = $"%A{v14}"
    let _run_target_args'_v649 = v671 
    #endif
#else
    let v675 : string = $"%A{v14}"
    let _run_target_args'_v649 = v675 
    #endif
    let v678 : string = _run_target_args'_v649 
    let v688 : string = $"{v678}"
    let v696 : unit = ()
    let v697 : (unit -> unit) = closure7(v18, v688)
    let v698 : unit = (fun () -> v697 (); v696) ()
    let v705 : string = $"{v98}"
    let v713 : unit = ()
    let v714 : (unit -> unit) = closure7(v18, v705)
    let v715 : unit = (fun () -> v714 (); v713) ()
    let v723 : string = "trace"
    let v724 : string = $"{v723}"
    let v732 : unit = ()
    let v733 : (unit -> unit) = closure7(v18, v724)
    let v734 : unit = (fun () -> v733 (); v732) ()
    let v741 : string = $"{v59}"
    let v749 : unit = ()
    let v750 : (unit -> unit) = closure7(v18, v741)
    let v751 : unit = (fun () -> v750 (); v749) ()
    let v759 : string =
        if v15 then
            let v757 : string = "true"
            v757
        else
            let v758 : string = "false"
            v758
    let v761 : string = $"{v759}"
    let v769 : unit = ()
    let v770 : (unit -> unit) = closure7(v18, v761)
    let v771 : unit = (fun () -> v770 (); v769) ()
    let v778 : string = $"{v98}"
    let v786 : unit = ()
    let v787 : (unit -> unit) = closure7(v18, v778)
    let v788 : unit = (fun () -> v787 (); v786) ()
    let v796 : string = "working_directory"
    let v797 : string = $"{v796}"
    let v805 : unit = ()
    let v806 : (unit -> unit) = closure7(v18, v797)
    let v807 : unit = (fun () -> v806 (); v805) ()
    let v814 : string = $"{v59}"
    let v822 : unit = ()
    let v823 : (unit -> unit) = closure7(v18, v814)
    let v824 : unit = (fun () -> v823 (); v822) ()
    (* run_target_args'
    let v834 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v835 : string = "format!(\"{:#?}\", $0)"
    let v836 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v835 
    let v837 : string = "fable_library_rust::String_::fromString($0)"
    let v838 : string = Fable.Core.RustInterop.emitRustExpr v836 v837 
    let _run_target_args'_v834 = v838 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v839 : string = "format!(\"{:#?}\", $0)"
    let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v839 
    let v841 : string = "fable_library_rust::String_::fromString($0)"
    let v842 : string = Fable.Core.RustInterop.emitRustExpr v840 v841 
    let _run_target_args'_v834 = v842 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v843 : string = "format!(\"{:#?}\", $0)"
    let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v843 
    let v845 : string = "fable_library_rust::String_::fromString($0)"
    let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
    let _run_target_args'_v834 = v846 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v848 : string = $"%A{v16}"
    let _run_target_args'_v834 = v848 
    #endif
#if FABLE_COMPILER_PYTHON
    let v852 : string = $"%A{v16}"
    let _run_target_args'_v834 = v852 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v856 : string = $"%A{v16}"
    let _run_target_args'_v834 = v856 
    #endif
#else
    let v860 : string = $"%A{v16}"
    let _run_target_args'_v834 = v860 
    #endif
    let v863 : string = _run_target_args'_v834 
    let v873 : string = $"{v863}"
    let v881 : unit = ()
    let v882 : (unit -> unit) = closure7(v18, v873)
    let v883 : unit = (fun () -> v882 (); v881) ()
    let v891 : string = " }"
    let v892 : string = $"{v891}"
    let v900 : unit = ()
    let v901 : (unit -> unit) = closure7(v18, v892)
    let v902 : unit = (fun () -> v901 (); v900) ()
    let v909 : string = $"{v891}"
    let v917 : unit = ()
    let v918 : (unit -> unit) = closure7(v18, v909)
    let v919 : unit = (fun () -> v918 (); v917) ()
    let v925 : string = v18.l0
    let v926 : int64 = v0.l0
    let v929 : string = " "
    let v930 : string = v6 + v929 
    let v934 : string = v930 + v7 
    let v939 : string = " #"
    let v940 : string = v934 + v939 
    let v944 : (int64 -> string) = _.ToString()
    let v945 : string = v944 v926
    let v949 : string = v940 + v945 
    let v953 : string = v949 + v929 
    let v958 : string = "runtime.execute_with_options_async"
    let v959 : string = v953 + v958 
    let v964 : string = " / "
    let v965 : string = v959 + v964 
    let v969 : string = v965 + v925 
    method16(v969)
and closure67 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v25 : unit = ()
        let v26 : (unit -> unit) = closure2()
        let v27 : unit = (fun () -> v26 (); v25) ()
        let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
        let v66 : string = method8(v48, v49, v50, v51, v52, v53)
        let v67 : string = method12()
        let v68 : int32 = v8.Length
        let v69 : string = method156(v48, v49, v50, v51, v52, v53, v66, v67, v7, v68, v0, v1, v2, v3, v4, v5, v6)
        method17(v69)
and method142 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v5938 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v5941 : int32, v5942 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5941, v5942) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v5949 : int32, v5950 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5949, v5950) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v5957 : int32, v5958 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5957, v5958) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v5965 : int32, v5966 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5965, v5966) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v5973 : int32, v5974 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5973, v5974) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v5981 : int32, v5982 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5981, v5982) 
            #endif
#else
            let v5987 : US17 = method93(v0)
            let struct (v5999 : string, v6000 : US5) =
                match v5987 with
                | US17_1(v5990) -> (* Error *)
                    let v5992 : string = $"resultm.get / Result value was Error: {v5990}"
                    failwith<struct (string * US5)> v5992
                | US17_0(v5988, v5989) -> (* Ok *)
                    struct (v5988, v5989)
            let v6003 : (string -> US5) = method6()
            let v6004 : US5 option = v6 |> Option.map v6003 
            let v6024 : US5 = US5_1
            let v6025 : US5 = v6004 |> Option.defaultValue v6024 
            let v6032 : string =
                match v6025 with
                | US5_1 -> (* None *)
                    let v6030 : string = ""
                    v6030
                | US5_0(v6029) -> (* Some *)
                    v6029
            let v6093 : unit = ()
            let v6094 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v6000, v5999)
            let v6095 : unit = (fun () -> v6094 (); v6093) ()
            let v6156 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v6160 : string =
                match v6000 with
                | US5_1 -> (* None *)
                    let v6158 : string = ""
                    v6158
                | US5_0(v6157) -> (* Some *)
                    v6157
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v6160,
              StandardOutputEncoding = v6156,
              WorkingDirectory = v6032,
              FileName = v5999,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v6161 : System.Diagnostics.ProcessStartInfo = start_info
            let v6162 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v6163 : int32 = v6162.Length
            let v6164 : Mut5 = {l0 = 0} : Mut5
            while method29(v6163, v6164) do
                let v6166 : int32 = v6164.l0
                let struct (v6167 : string, v6168 : string) = v6162.[int v6166]
                v6161.EnvironmentVariables.[v6167] <- v6168 
                let v6169 : int32 = v6166 + 1
                v6164.l0 <- v6169
                ()
            let v6170 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v6161)
            use v6170 = v6170 
            let v6171 : System.Diagnostics.Process = v6170 
            let v6172 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v6173 : System.Collections.Concurrent.ConcurrentStack<string> = v6172 ()
            let v6174 : bool = false
            let v6175 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v6171, v6173, v6174)
            v6171.OutputDataReceived.Add v6175 
            let v6176 : bool = true
            let v6177 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v6171, v6173, v6176)
            v6171.ErrorDataReceived.Add v6177 
            let v6178 : (unit -> bool) = v6171.Start
            let v6179 : bool = v6178 ()
            let v6180 : bool = v6179 = false
            if v6180 then
                let v6181 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v6181
            let v6182 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v6182 v6171
            let v6183 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v6183 v6171
            let v6186 : (System.Threading.CancellationToken -> US35) = method150()
            let v6187 : US35 option = v1 |> Option.map v6186 
            let v6207 : US35 = US35_1
            let v6208 : US35 = v6187 |> Option.defaultValue v6207 
            let v6215 : System.Threading.CancellationToken =
                match v6208 with
                | US35_1 -> (* None *)
                    let v6213 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v6213
                | US35_0(v6212) -> (* Some *)
                    v6212
            let v6216 : Async<System.Threading.CancellationToken> = method151(v6215)
            let! v6216 = v6216 
            let v6217 : System.Threading.CancellationToken = v6216 
            let v6218 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v6217.Register
            let v6219 : (unit -> unit) = closure65(v6171)
            let v6220 : System.Threading.CancellationTokenRegistration = v6218 v6219
            use v6220 = v6220 
            let v6221 : System.Threading.CancellationTokenRegistration = v6220 
            let v6222 : Async<int32> = method154(v6171, v6173, v6217)
            let! v6222 = v6222 
            let v6223 : int32 = v6222 
            let v6225 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v6226 : string seq = v6225 v6173
            let v6230 : (string seq -> string seq) = Seq.rev
            let v6231 : string seq = v6230 v6226
            let v6236 : string = method69()
            let v6237 : (string -> (string seq -> string)) = String.concat
            let v6238 : (string seq -> string) = v6237 v6236
            let v6239 : string = v6238 v6231
            let v6304 : unit = ()
            let v6305 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v6223, v6239)
            let v6306 : unit = (fun () -> v6305 (); v6304) ()
            return struct (v6223, v6239) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v12286 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v12286 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12288 : unit = ()
    let _let'_v12288 =
        async {
            (* run_target_args'
            let v18201 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v18204 : int32, v18205 : string) = null |> unbox<struct (int32 * string)>
            return struct (v18204, v18205) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v18212 : int32, v18213 : string) = null |> unbox<struct (int32 * string)>
            return struct (v18212, v18213) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v18220 : int32, v18221 : string) = null |> unbox<struct (int32 * string)>
            return struct (v18220, v18221) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v18228 : int32, v18229 : string) = null |> unbox<struct (int32 * string)>
            return struct (v18228, v18229) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v18236 : int32, v18237 : string) = null |> unbox<struct (int32 * string)>
            return struct (v18236, v18237) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v18244 : int32, v18245 : string) = null |> unbox<struct (int32 * string)>
            return struct (v18244, v18245) 
            #endif
#else
            let v18250 : US17 = method93(v0)
            let struct (v18262 : string, v18263 : US5) =
                match v18250 with
                | US17_1(v18253) -> (* Error *)
                    let v18255 : string = $"resultm.get / Result value was Error: {v18253}"
                    failwith<struct (string * US5)> v18255
                | US17_0(v18251, v18252) -> (* Ok *)
                    struct (v18251, v18252)
            let v18266 : (string -> US5) = method6()
            let v18267 : US5 option = v6 |> Option.map v18266 
            let v18287 : US5 = US5_1
            let v18288 : US5 = v18267 |> Option.defaultValue v18287 
            let v18295 : string =
                match v18288 with
                | US5_1 -> (* None *)
                    let v18293 : string = ""
                    v18293
                | US5_0(v18292) -> (* Some *)
                    v18292
            let v18356 : unit = ()
            let v18357 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v18263, v18262)
            let v18358 : unit = (fun () -> v18357 (); v18356) ()
            let v18419 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v18423 : string =
                match v18263 with
                | US5_1 -> (* None *)
                    let v18421 : string = ""
                    v18421
                | US5_0(v18420) -> (* Some *)
                    v18420
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v18423,
              StandardOutputEncoding = v18419,
              WorkingDirectory = v18295,
              FileName = v18262,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v18424 : System.Diagnostics.ProcessStartInfo = start_info
            let v18425 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v18426 : int32 = v18425.Length
            let v18427 : Mut5 = {l0 = 0} : Mut5
            while method29(v18426, v18427) do
                let v18429 : int32 = v18427.l0
                let struct (v18430 : string, v18431 : string) = v18425.[int v18429]
                v18424.EnvironmentVariables.[v18430] <- v18431 
                let v18432 : int32 = v18429 + 1
                v18427.l0 <- v18432
                ()
            let v18433 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v18424)
            use v18433 = v18433 
            let v18434 : System.Diagnostics.Process = v18433 
            let v18435 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v18436 : System.Collections.Concurrent.ConcurrentStack<string> = v18435 ()
            let v18437 : bool = false
            let v18438 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v18434, v18436, v18437)
            v18434.OutputDataReceived.Add v18438 
            let v18439 : bool = true
            let v18440 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v18434, v18436, v18439)
            v18434.ErrorDataReceived.Add v18440 
            let v18441 : (unit -> bool) = v18434.Start
            let v18442 : bool = v18441 ()
            let v18443 : bool = v18442 = false
            if v18443 then
                let v18444 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v18444
            let v18445 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v18445 v18434
            let v18446 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v18446 v18434
            let v18449 : (System.Threading.CancellationToken -> US35) = method150()
            let v18450 : US35 option = v1 |> Option.map v18449 
            let v18470 : US35 = US35_1
            let v18471 : US35 = v18450 |> Option.defaultValue v18470 
            let v18478 : System.Threading.CancellationToken =
                match v18471 with
                | US35_1 -> (* None *)
                    let v18476 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v18476
                | US35_0(v18475) -> (* Some *)
                    v18475
            let v18479 : Async<System.Threading.CancellationToken> = method151(v18478)
            let! v18479 = v18479 
            let v18480 : System.Threading.CancellationToken = v18479 
            let v18481 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v18480.Register
            let v18482 : (unit -> unit) = closure65(v18434)
            let v18483 : System.Threading.CancellationTokenRegistration = v18481 v18482
            use v18483 = v18483 
            let v18484 : System.Threading.CancellationTokenRegistration = v18483 
            let v18485 : Async<int32> = method154(v18434, v18436, v18480)
            let! v18485 = v18485 
            let v18486 : int32 = v18485 
            let v18488 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v18489 : string seq = v18488 v18436
            let v18493 : (string seq -> string seq) = Seq.rev
            let v18494 : string seq = v18493 v18489
            let v18499 : string = method69()
            let v18500 : (string -> (string seq -> string)) = String.concat
            let v18501 : (string seq -> string) = v18500 v18499
            let v18502 : string = v18501 v18494
            let v18567 : unit = ()
            let v18568 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v18486, v18502)
            let v18569 : unit = (fun () -> v18568 (); v18567) ()
            return struct (v18486, v18502) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v24549 : Async<struct (int32 * string)> = _let'_v12288 
    let _run_target_args'_v11 = v24549 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24551 : unit = ()
    let _let'_v24551 =
        async {
            (* run_target_args'
            let v30464 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v30467 : int32, v30468 : string) = null |> unbox<struct (int32 * string)>
            return struct (v30467, v30468) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v30475 : int32, v30476 : string) = null |> unbox<struct (int32 * string)>
            return struct (v30475, v30476) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v30483 : int32, v30484 : string) = null |> unbox<struct (int32 * string)>
            return struct (v30483, v30484) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v30491 : int32, v30492 : string) = null |> unbox<struct (int32 * string)>
            return struct (v30491, v30492) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v30499 : int32, v30500 : string) = null |> unbox<struct (int32 * string)>
            return struct (v30499, v30500) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v30507 : int32, v30508 : string) = null |> unbox<struct (int32 * string)>
            return struct (v30507, v30508) 
            #endif
#else
            let v30513 : US17 = method93(v0)
            let struct (v30525 : string, v30526 : US5) =
                match v30513 with
                | US17_1(v30516) -> (* Error *)
                    let v30518 : string = $"resultm.get / Result value was Error: {v30516}"
                    failwith<struct (string * US5)> v30518
                | US17_0(v30514, v30515) -> (* Ok *)
                    struct (v30514, v30515)
            let v30529 : (string -> US5) = method6()
            let v30530 : US5 option = v6 |> Option.map v30529 
            let v30550 : US5 = US5_1
            let v30551 : US5 = v30530 |> Option.defaultValue v30550 
            let v30558 : string =
                match v30551 with
                | US5_1 -> (* None *)
                    let v30556 : string = ""
                    v30556
                | US5_0(v30555) -> (* Some *)
                    v30555
            let v30619 : unit = ()
            let v30620 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v30526, v30525)
            let v30621 : unit = (fun () -> v30620 (); v30619) ()
            let v30682 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v30686 : string =
                match v30526 with
                | US5_1 -> (* None *)
                    let v30684 : string = ""
                    v30684
                | US5_0(v30683) -> (* Some *)
                    v30683
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v30686,
              StandardOutputEncoding = v30682,
              WorkingDirectory = v30558,
              FileName = v30525,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v30687 : System.Diagnostics.ProcessStartInfo = start_info
            let v30688 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v30689 : int32 = v30688.Length
            let v30690 : Mut5 = {l0 = 0} : Mut5
            while method29(v30689, v30690) do
                let v30692 : int32 = v30690.l0
                let struct (v30693 : string, v30694 : string) = v30688.[int v30692]
                v30687.EnvironmentVariables.[v30693] <- v30694 
                let v30695 : int32 = v30692 + 1
                v30690.l0 <- v30695
                ()
            let v30696 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v30687)
            use v30696 = v30696 
            let v30697 : System.Diagnostics.Process = v30696 
            let v30698 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v30699 : System.Collections.Concurrent.ConcurrentStack<string> = v30698 ()
            let v30700 : bool = false
            let v30701 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v30697, v30699, v30700)
            v30697.OutputDataReceived.Add v30701 
            let v30702 : bool = true
            let v30703 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v30697, v30699, v30702)
            v30697.ErrorDataReceived.Add v30703 
            let v30704 : (unit -> bool) = v30697.Start
            let v30705 : bool = v30704 ()
            let v30706 : bool = v30705 = false
            if v30706 then
                let v30707 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v30707
            let v30708 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v30708 v30697
            let v30709 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v30709 v30697
            let v30712 : (System.Threading.CancellationToken -> US35) = method150()
            let v30713 : US35 option = v1 |> Option.map v30712 
            let v30733 : US35 = US35_1
            let v30734 : US35 = v30713 |> Option.defaultValue v30733 
            let v30741 : System.Threading.CancellationToken =
                match v30734 with
                | US35_1 -> (* None *)
                    let v30739 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v30739
                | US35_0(v30738) -> (* Some *)
                    v30738
            let v30742 : Async<System.Threading.CancellationToken> = method151(v30741)
            let! v30742 = v30742 
            let v30743 : System.Threading.CancellationToken = v30742 
            let v30744 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v30743.Register
            let v30745 : (unit -> unit) = closure65(v30697)
            let v30746 : System.Threading.CancellationTokenRegistration = v30744 v30745
            use v30746 = v30746 
            let v30747 : System.Threading.CancellationTokenRegistration = v30746 
            let v30748 : Async<int32> = method154(v30697, v30699, v30743)
            let! v30748 = v30748 
            let v30749 : int32 = v30748 
            let v30751 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v30752 : string seq = v30751 v30699
            let v30756 : (string seq -> string seq) = Seq.rev
            let v30757 : string seq = v30756 v30752
            let v30762 : string = method69()
            let v30763 : (string -> (string seq -> string)) = String.concat
            let v30764 : (string seq -> string) = v30763 v30762
            let v30765 : string = v30764 v30757
            let v30830 : unit = ()
            let v30831 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v30749, v30765)
            let v30832 : unit = (fun () -> v30831 (); v30830) ()
            return struct (v30749, v30765) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v36812 : Async<struct (int32 * string)> = _let'_v24551 
    let _run_target_args'_v11 = v36812 
    #endif
#else
    let v36814 : unit = ()
    let _let'_v36814 =
        async {
            (* run_target_args'
            let v42727 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v42730 : int32, v42731 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42730, v42731) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v42738 : int32, v42739 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42738, v42739) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v42746 : int32, v42747 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42746, v42747) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v42754 : int32, v42755 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42754, v42755) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v42762 : int32, v42763 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42762, v42763) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v42770 : int32, v42771 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42770, v42771) 
            #endif
#else
            let v42776 : US17 = method93(v0)
            let struct (v42788 : string, v42789 : US5) =
                match v42776 with
                | US17_1(v42779) -> (* Error *)
                    let v42781 : string = $"resultm.get / Result value was Error: {v42779}"
                    failwith<struct (string * US5)> v42781
                | US17_0(v42777, v42778) -> (* Ok *)
                    struct (v42777, v42778)
            let v42792 : (string -> US5) = method6()
            let v42793 : US5 option = v6 |> Option.map v42792 
            let v42813 : US5 = US5_1
            let v42814 : US5 = v42793 |> Option.defaultValue v42813 
            let v42821 : string =
                match v42814 with
                | US5_1 -> (* None *)
                    let v42819 : string = ""
                    v42819
                | US5_0(v42818) -> (* Some *)
                    v42818
            let v42882 : unit = ()
            let v42883 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v42789, v42788)
            let v42884 : unit = (fun () -> v42883 (); v42882) ()
            let v42945 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v42949 : string =
                match v42789 with
                | US5_1 -> (* None *)
                    let v42947 : string = ""
                    v42947
                | US5_0(v42946) -> (* Some *)
                    v42946
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v42949,
              StandardOutputEncoding = v42945,
              WorkingDirectory = v42821,
              FileName = v42788,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v42950 : System.Diagnostics.ProcessStartInfo = start_info
            let v42951 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v42952 : int32 = v42951.Length
            let v42953 : Mut5 = {l0 = 0} : Mut5
            while method29(v42952, v42953) do
                let v42955 : int32 = v42953.l0
                let struct (v42956 : string, v42957 : string) = v42951.[int v42955]
                v42950.EnvironmentVariables.[v42956] <- v42957 
                let v42958 : int32 = v42955 + 1
                v42953.l0 <- v42958
                ()
            let v42959 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v42950)
            use v42959 = v42959 
            let v42960 : System.Diagnostics.Process = v42959 
            let v42961 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v42962 : System.Collections.Concurrent.ConcurrentStack<string> = v42961 ()
            let v42963 : bool = false
            let v42964 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v42960, v42962, v42963)
            v42960.OutputDataReceived.Add v42964 
            let v42965 : bool = true
            let v42966 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v42960, v42962, v42965)
            v42960.ErrorDataReceived.Add v42966 
            let v42967 : (unit -> bool) = v42960.Start
            let v42968 : bool = v42967 ()
            let v42969 : bool = v42968 = false
            if v42969 then
                let v42970 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v42970
            let v42971 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v42971 v42960
            let v42972 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v42972 v42960
            let v42975 : (System.Threading.CancellationToken -> US35) = method150()
            let v42976 : US35 option = v1 |> Option.map v42975 
            let v42996 : US35 = US35_1
            let v42997 : US35 = v42976 |> Option.defaultValue v42996 
            let v43004 : System.Threading.CancellationToken =
                match v42997 with
                | US35_1 -> (* None *)
                    let v43002 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v43002
                | US35_0(v43001) -> (* Some *)
                    v43001
            let v43005 : Async<System.Threading.CancellationToken> = method151(v43004)
            let! v43005 = v43005 
            let v43006 : System.Threading.CancellationToken = v43005 
            let v43007 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v43006.Register
            let v43008 : (unit -> unit) = closure65(v42960)
            let v43009 : System.Threading.CancellationTokenRegistration = v43007 v43008
            use v43009 = v43009 
            let v43010 : System.Threading.CancellationTokenRegistration = v43009 
            let v43011 : Async<int32> = method154(v42960, v42962, v43006)
            let! v43011 = v43011 
            let v43012 : int32 = v43011 
            let v43014 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v43015 : string seq = v43014 v42962
            let v43019 : (string seq -> string seq) = Seq.rev
            let v43020 : string seq = v43019 v43015
            let v43025 : string = method69()
            let v43026 : (string -> (string seq -> string)) = String.concat
            let v43027 : (string seq -> string) = v43026 v43025
            let v43028 : string = v43027 v43020
            let v43093 : unit = ()
            let v43094 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v43012, v43028)
            let v43095 : unit = (fun () -> v43094 (); v43093) ()
            return struct (v43012, v43028) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v49075 : Async<struct (int32 * string)> = _let'_v36814 
    let _run_target_args'_v11 = v49075 
    #endif
    let v49076 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v49076
and method141 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method142(v0, v1, v2, v3, v4, v5, v6)
and method91 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method92(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US17 = method93(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US17_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US17_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US25 = method106(v34)
    let v44 : (string []) =
        match v35 with
        | US25_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US25_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v91 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v92 : string = "String::from($0)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v92 
    let _run_target_args'_v91 = v93 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v94 : string = "String::from($0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v94 
    let _run_target_args'_v91 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "String::from($0)"
    let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v96 
    let _run_target_args'_v91 = v97 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v99 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v99 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v107 
    #endif
#else
    let v111 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v91 = v111 
    #endif
    let v114 : std_string_String = _run_target_args'_v91 
    let v123 : string = "true; $0 }).collect::<Vec<_>>()"
    let v124 : bool = Fable.Core.RustInterop.emitRustExpr v114 v123 
    let v125 : string = "_vec_map"
    let v126 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v125 
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure40(v0, v1, v2, v3, v4, v5, v6, v29, v126)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v259 : bool = true
    let mutable _capture_v259 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v260 : string = "std::process::Command::new(&*$0)"
    let v261 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v260 
    let v262 : string = "true; let mut v261 = v261"
    let v263 : bool = Fable.Core.RustInterop.emitRustExpr () v262 
    let v264 : string = "true; std::process::Command::args(&mut v261, &*$0)"
    let v265 : bool = Fable.Core.RustInterop.emitRustExpr v126 v264 
    let v266 : string = "$0"
    let v267 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v261 v266 
    let v268 : string = "std::process::Stdio::piped()"
    let v269 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v268 
    let v270 : string = "true; let mut v267 = v267"
    let v271 : bool = Fable.Core.RustInterop.emitRustExpr () v270 
    let v272 : string = "true; std::process::Command::stdout(&mut v267, std::process::Stdio::piped())"
    let v273 : bool = Fable.Core.RustInterop.emitRustExpr () v272 
    let v274 : string = "$0"
    let v275 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v267 v274 
    let v276 : string = "std::process::Stdio::piped()"
    let v277 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v276 
    let v278 : string = "true; let mut v275 = v275"
    let v279 : bool = Fable.Core.RustInterop.emitRustExpr () v278 
    let v280 : string = "true; std::process::Command::stderr(&mut v275, std::process::Stdio::piped())"
    let v281 : bool = Fable.Core.RustInterop.emitRustExpr () v280 
    let v282 : string = "$0"
    let v283 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v275 v282 
    let v284 : string = "std::process::Stdio::piped()"
    let v285 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v284 
    let v286 : string = "true; let mut v283 = v283"
    let v287 : bool = Fable.Core.RustInterop.emitRustExpr () v286 
    let v288 : string = "true; std::process::Command::stdin(&mut v283, std::process::Stdio::piped())"
    let v289 : bool = Fable.Core.RustInterop.emitRustExpr () v288 
    let v290 : string = "$0"
    let v291 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v283 v290 
    let v294 : (string -> US5) = method6()
    let v295 : US5 option = v6 |> Option.map v294 
    let v315 : US5 = US5_1
    let v316 : US5 = v295 |> Option.defaultValue v315 
    let v330 : std_process_Command =
        match v316 with
        | US5_1 -> (* None *)
            let v327 : string = $"v291"
            let v328 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v327 
            v328
        | US5_0(v320) -> (* Some *)
            let v321 : string = "true; let mut v291 = v291"
            let v322 : bool = Fable.Core.RustInterop.emitRustExpr () v321 
            let v323 : string = "true; std::process::Command::current_dir(&mut v291, &*$0)"
            let v324 : bool = Fable.Core.RustInterop.emitRustExpr v320 v323 
            let v325 : string = $"v291"
            let v326 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v325 
            v326
    let v331 : uint64 = System.Convert.ToUInt64 v2.Length
    let v332 : bool = v331 = 0UL
    let v352 : std_process_Command =
        if v332 then
            v330
        else
            let v333 : string = "$0.to_vec()"
            let v334 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v333 
            let v335 : string = "true; let _vec_fold_ = $0.into_iter().fold(v330, |acc, x| { //"
            let v336 : bool = Fable.Core.RustInterop.emitRustExpr v334 v335 
            let v337 : string = "acc"
            let v338 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v337 
            let v339 : string = "x"
            let struct (v340 : string, v341 : string) = Fable.Core.RustInterop.emitRustExpr () v339 
            let v342 : string = "true; let mut v338 = v338"
            let v343 : bool = Fable.Core.RustInterop.emitRustExpr () v342 
            let v344 : string = "true; std::process::Command::env(&mut v338, &*$0, &*$1)"
            let v345 : bool = Fable.Core.RustInterop.emitRustExpr struct (v340, v341) v344 
            let v346 : string = "$0"
            let v347 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v338 v346 
            let v348 : string = "true; $0 })"
            let v349 : bool = Fable.Core.RustInterop.emitRustExpr v347 v348 
            let v350 : string = "_vec_fold_"
            let v351 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v350 
            v351
    let v353 : string = "true; let mut v352 = v352"
    let v354 : bool = Fable.Core.RustInterop.emitRustExpr () v353 
    let v355 : string = "std::process::Command::spawn(&mut v352)"
    let v356 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v355 
    let v357 : (std_io_Error -> std_string_String) = method73()
    (* run_target_args'
    let v359 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v360 : string = "$0.map_err(|x| $1(x))"
    let v361 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v356, v357) v360 
    let _run_target_args'_v359 = v361 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v362 : string = "$0.map_err(|x| $1(x))"
    let v363 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v356, v357) v362 
    let _run_target_args'_v359 = v363 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v364 : string = "$0.map_err(|x| $1(x))"
    let v365 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v356, v357) v364 
    let _run_target_args'_v359 = v365 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v366 : Result<std_process_Child, std_string_String> = match v356 with Ok x -> Ok x | Error x -> Error (v357 x)
    let _run_target_args'_v359 = v366 
    #endif
#if FABLE_COMPILER_PYTHON
    let v367 : Result<std_process_Child, std_string_String> = match v356 with Ok x -> Ok x | Error x -> Error (v357 x)
    let _run_target_args'_v359 = v367 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v368 : Result<std_process_Child, std_string_String> = match v356 with Ok x -> Ok x | Error x -> Error (v357 x)
    let _run_target_args'_v359 = v368 
    #endif
#else
    let v369 : Result<std_process_Child, std_string_String> = match v356 with Ok x -> Ok x | Error x -> Error (v357 x)
    let _run_target_args'_v359 = v369 
    #endif
    let v370 : Result<std_process_Child, std_string_String> = _run_target_args'_v359 
    let v373 : (std_process_Child option -> std_process_Child option) = method117()
    let v374 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v375 : bool = Fable.Core.RustInterop.emitRustExpr v370 v374 
    let v376 : string = "x"
    let v377 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v376 
    let v379 : std_process_Child option = Some v377 
    let v382 : std_process_Child option = v373 v379
    let v383 : string = "std::sync::Mutex::new(v382)"
    let v384 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v383 
    let v385 : string = "std::sync::Arc::new(v384)"
    let v386 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v385 
    let v387 : string = "true; $0 })"
    let v388 : bool = Fable.Core.RustInterop.emitRustExpr v386 v387 
    let v389 : string = "_result_map_"
    let v390 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v389 
    let v391 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) = method118()
    let v392 : (std_string_String -> US27) = method119()
    let v393 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v394 : US27 = Fable.Core.RustInterop.emitRustExpr struct (v391, v392, v390) v393 
    let struct (v2210 : int32, v2211 : US7, v2212 : US28) =
        match v394 with
        | US27_1(v2073) -> (* Error *)
            let v2138 : unit = ()
            let v2139 : (unit -> unit) = closure44(v0, v1, v2, v3, v4, v5, v6, v29, v126, v2073)
            let v2140 : unit = (fun () -> v2139 (); v2138) ()
            let v2205 : US7 = US7_0(v2073)
            let v2206 : US28 = US28_1
            struct (-1, v2205, v2206)
        | US27_0(v395) -> (* Ok *)
            let v396 : string = "true; let _capture = (|| { //"
            let v397 : bool = Fable.Core.RustInterop.emitRustExpr () v396 
            let v398 : string = "$0"
            let v399 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v395 v398 
            let v400 : string = "v399.lock()"
            let v401 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v400 
            (* run_target_args'
            let v403 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v404 : string = "$0.unwrap()"
            let v405 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v401 v404 
            let _run_target_args'_v403 = v405 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v406 : string = "$0.unwrap()"
            let v407 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v401 v406 
            let _run_target_args'_v403 = v407 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v408 : string = "$0.unwrap()"
            let v409 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v401 v408 
            let _run_target_args'_v403 = v409 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v410 : std_sync_MutexGuard<std_process_Child option> = match v401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v403 = v410 
            #endif
#if FABLE_COMPILER_PYTHON
            let v411 : std_sync_MutexGuard<std_process_Child option> = match v401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v403 = v411 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v412 : std_sync_MutexGuard<std_process_Child option> = match v401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v403 = v412 
            #endif
#else
            let v413 : std_sync_MutexGuard<std_process_Child option> = match v401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v403 = v413 
            #endif
            let v414 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v403 
            let v417 : std_sync_MutexGuard<std_process_Child option> = method121(v414)
            let v418 : string = "true; let mut v417 = v417"
            let v419 : bool = Fable.Core.RustInterop.emitRustExpr () v418 
            let v420 : string = "&mut $0"
            let v421 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v417 v420 
            let v422 : string = "$0.as_mut()"
            let v423 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v421 v422 
            let v424 : string = "$0.unwrap()"
            let v425 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v423 v424 
            let v426 : string = "&mut $0.stdout"
            let v427 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v425 v426 
            let v428 : string = "Option::take($0)"
            let v429 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v427 v428 
            let v430 : string = "$0.unwrap()"
            let v431 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v429 v430 
            let v432 : string = "true; $0 })()"
            let v433 : bool = Fable.Core.RustInterop.emitRustExpr v431 v432 
            let v434 : string = "_capture"
            let v435 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v434 
            let v436 : string = "true; let _capture = (|| { //"
            let v437 : bool = Fable.Core.RustInterop.emitRustExpr () v436 
            let v438 : string = "$0"
            let v439 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v395 v438 
            let v440 : string = "v439.lock()"
            let v441 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v440 
            (* run_target_args'
            let v443 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v444 : string = "$0.unwrap()"
            let v445 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v441 v444 
            let _run_target_args'_v443 = v445 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v446 : string = "$0.unwrap()"
            let v447 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v441 v446 
            let _run_target_args'_v443 = v447 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v448 : string = "$0.unwrap()"
            let v449 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v441 v448 
            let _run_target_args'_v443 = v449 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v450 : std_sync_MutexGuard<std_process_Child option> = match v441 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v443 = v450 
            #endif
#if FABLE_COMPILER_PYTHON
            let v451 : std_sync_MutexGuard<std_process_Child option> = match v441 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v443 = v451 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v452 : std_sync_MutexGuard<std_process_Child option> = match v441 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v443 = v452 
            #endif
#else
            let v453 : std_sync_MutexGuard<std_process_Child option> = match v441 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v443 = v453 
            #endif
            let v454 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v443 
            let v457 : std_sync_MutexGuard<std_process_Child option> = method121(v454)
            let v458 : string = "true; let mut v457 = v457"
            let v459 : bool = Fable.Core.RustInterop.emitRustExpr () v458 
            let v460 : string = "&mut $0"
            let v461 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v457 v460 
            let v462 : string = "$0.as_mut()"
            let v463 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v461 v462 
            let v464 : string = "$0.unwrap()"
            let v465 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v463 v464 
            let v466 : string = "&mut $0.stderr"
            let v467 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v465 v466 
            let v468 : string = "Option::take($0)"
            let v469 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v467 v468 
            let v470 : string = "$0.unwrap()"
            let v471 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v469 v470 
            let v472 : string = "true; $0 })()"
            let v473 : bool = Fable.Core.RustInterop.emitRustExpr v471 v472 
            let v474 : string = "_capture"
            let v475 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v474 
            let v476 : string = "true; let _capture = (|| { //"
            let v477 : bool = Fable.Core.RustInterop.emitRustExpr () v476 
            let v478 : string = "$0"
            let v479 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v395 v478 
            let v480 : string = "v479.lock()"
            let v481 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v480 
            (* run_target_args'
            let v483 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v484 : string = "$0.unwrap()"
            let v485 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v481 v484 
            let _run_target_args'_v483 = v485 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v486 : string = "$0.unwrap()"
            let v487 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v481 v486 
            let _run_target_args'_v483 = v487 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v488 : string = "$0.unwrap()"
            let v489 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v481 v488 
            let _run_target_args'_v483 = v489 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v490 : std_sync_MutexGuard<std_process_Child option> = match v481 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v483 = v490 
            #endif
#if FABLE_COMPILER_PYTHON
            let v491 : std_sync_MutexGuard<std_process_Child option> = match v481 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v483 = v491 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v492 : std_sync_MutexGuard<std_process_Child option> = match v481 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v483 = v492 
            #endif
#else
            let v493 : std_sync_MutexGuard<std_process_Child option> = match v481 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v483 = v493 
            #endif
            let v494 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v483 
            let v497 : std_sync_MutexGuard<std_process_Child option> = method121(v494)
            let v498 : string = "true; let mut v497 = v497"
            let v499 : bool = Fable.Core.RustInterop.emitRustExpr () v498 
            let v500 : string = "&mut $0"
            let v501 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v497 v500 
            let v502 : string = "$0.as_mut()"
            let v503 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v501 v502 
            let v504 : string = "$0.unwrap()"
            let v505 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v503 v504 
            let v506 : string = "&mut $0.stdin"
            let v507 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v505 v506 
            let v508 : string = "Option::take($0)"
            let v509 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v507 v508 
            let v510 : string = "$0.unwrap()"
            let v511 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v509 v510 
            let v513 : std_process_ChildStdin option = Some v511 
            let v516 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method122()
            let v517 : std_process_ChildStdin option = v516 v513
            let v518 : string = "std::sync::Mutex::new(v517)"
            let v519 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v518 
            let v520 : string = "std::sync::Arc::new(v519)"
            let v521 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v520 
            let v522 : string = "true; $0 })()"
            let v523 : bool = Fable.Core.RustInterop.emitRustExpr v521 v522 
            let v524 : string = "_capture"
            let v525 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v524 
            let v526 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v527 : std_sync_mpsc_Sender<std_string_String>, v528 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v526 
            let v529 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method123()
            let v530 : std_sync_mpsc_Sender<std_string_String> = v529 v527
            let v531 : string = "std::sync::Mutex::new(v530)"
            let v532 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v531 
            let v533 : string = "std::sync::Arc::new(v532)"
            let v534 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v533 
            let v535 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method124()
            let v536 : std_sync_mpsc_Sender<std_string_String> = v535 v527
            let v537 : string = "std::sync::Mutex::new(v536)"
            let v538 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v537 
            let v539 : string = "std::sync::Arc::new(v538)"
            let v540 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v539 
            let v541 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method125()
            let v542 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v541 v528
            let v543 : string = "std::sync::Mutex::new(v542)"
            let v544 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v543 
            let v545 : string = "std::sync::Arc::new(v544)"
            let v546 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v545 
            let v547 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v548 : bool = Fable.Core.RustInterop.emitRustExpr () v547 
            let v549 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v550 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v435 v549 
            let v551 : string = "std::io::BufReader::new($0)"
            let v552 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v550 v551 
            let v553 : string = "std::io::BufRead::lines(v552)"
            let v554 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v553 
            let v555 : string = "true; let mut v554 = v554; let _iter_try_for_each = v554.try_for_each(|x| { //"
            let v556 : bool = Fable.Core.RustInterop.emitRustExpr () v555 
            let v557 : string = "x"
            let v558 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v557 
            let v559 : string = "$0.clone()"
            let v560 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v534 v559 
            let v561 : (std_io_Error -> std_string_String) = method73()
            (* run_target_args'
            let v563 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v564 : string = "$0.map_err(|x| $1(x))"
            let v565 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v558, v561) v564 
            let _run_target_args'_v563 = v565 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v566 : string = "$0.map_err(|x| $1(x))"
            let v567 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v558, v561) v566 
            let _run_target_args'_v563 = v567 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v568 : string = "$0.map_err(|x| $1(x))"
            let v569 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v558, v561) v568 
            let _run_target_args'_v563 = v569 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v570 : Result<std_string_String, std_string_String> = match v558 with Ok x -> Ok x | Error x -> Error (v561 x)
            let _run_target_args'_v563 = v570 
            #endif
#if FABLE_COMPILER_PYTHON
            let v571 : Result<std_string_String, std_string_String> = match v558 with Ok x -> Ok x | Error x -> Error (v561 x)
            let _run_target_args'_v563 = v571 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v572 : Result<std_string_String, std_string_String> = match v558 with Ok x -> Ok x | Error x -> Error (v561 x)
            let _run_target_args'_v563 = v572 
            #endif
#else
            let v573 : Result<std_string_String, std_string_String> = match v558 with Ok x -> Ok x | Error x -> Error (v561 x)
            let _run_target_args'_v563 = v573 
            #endif
            let v574 : Result<std_string_String, std_string_String> = _run_target_args'_v563 
            let v577 : (std_string_String -> US29) = method126()
            let v578 : (std_string_String -> US29) = method127()
            let v579 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v580 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v577, v578, v574) v579 
            let v978 : std_string_String =
                match v580 with
                | US29_1(v780) -> (* Error *)
                    let v841 : unit = ()
                    let v842 : (unit -> unit) = closure50(v5, v780)
                    let v843 : unit = (fun () -> v842 (); v841) ()
                    let v904 : string = $"\u001b[4;7m{v780}\u001b[0m"
                    (* run_target_args'
                    let v909 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v910 : string = "&*$0"
                    let v911 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v904 v910 
                    let _run_target_args'_v909 = v911 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v912 : string = "&*$0"
                    let v913 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v904 v912 
                    let _run_target_args'_v909 = v913 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v914 : string = "&*$0"
                    let v915 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v904 v914 
                    let _run_target_args'_v909 = v915 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v917 : Ref<Str> = v904 |> unbox<Ref<Str>>
                    let _run_target_args'_v909 = v917 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v921 : Ref<Str> = v904 |> unbox<Ref<Str>>
                    let _run_target_args'_v909 = v921 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v925 : Ref<Str> = v904 |> unbox<Ref<Str>>
                    let _run_target_args'_v909 = v925 
                    #endif
#else
                    let v929 : Ref<Str> = v904 |> unbox<Ref<Str>>
                    let _run_target_args'_v909 = v929 
                    #endif
                    let v932 : Ref<Str> = _run_target_args'_v909 
                    (* run_target_args'
                    let v945 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v946 : string = "String::from($0)"
                    let v947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v932 v946 
                    let _run_target_args'_v945 = v947 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v948 : string = "String::from($0)"
                    let v949 : std_string_String = Fable.Core.RustInterop.emitRustExpr v932 v948 
                    let _run_target_args'_v945 = v949 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v950 : string = "String::from($0)"
                    let v951 : std_string_String = Fable.Core.RustInterop.emitRustExpr v932 v950 
                    let _run_target_args'_v945 = v951 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v953 : std_string_String = v932 |> unbox<std_string_String>
                    let _run_target_args'_v945 = v953 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v957 : std_string_String = v932 |> unbox<std_string_String>
                    let _run_target_args'_v945 = v957 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v961 : std_string_String = v932 |> unbox<std_string_String>
                    let _run_target_args'_v945 = v961 
                    #endif
#else
                    let v965 : std_string_String = v932 |> unbox<std_string_String>
                    let _run_target_args'_v945 = v965 
                    #endif
                    let v968 : std_string_String = _run_target_args'_v945 
                    v968
                | US29_0(v581) -> (* Ok *)
                    let v582 : string = "fable_library_rust::String_::fromString($0)"
                    let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
                    let v584 : string = "encoding_rs::UTF_8"
                    let v585 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v584 
                    let v586 : string = "$0.encode(&*$1).0"
                    let v587 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v585, v583) v586 
                    let v588 : string = "$0.as_ref()"
                    let v589 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v587 v588 
                    let v590 : string = "std::str::from_utf8($0)"
                    let v591 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v589 v590 
                    (* run_target_args'
                    let v593 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v594 : string = "$0.unwrap()"
                    let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v591 v594 
                    let _run_target_args'_v593 = v595 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v596 : string = "$0.unwrap()"
                    let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v591 v596 
                    let _run_target_args'_v593 = v597 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v598 : string = "$0.unwrap()"
                    let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v591 v598 
                    let _run_target_args'_v593 = v599 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v600 : Ref<Str> = match v591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v593 = v600 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v601 : Ref<Str> = match v591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v593 = v601 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v602 : Ref<Str> = match v591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v593 = v602 
                    #endif
#else
                    let v603 : Ref<Str> = match v591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v593 = v603 
                    #endif
                    let v604 : Ref<Str> = _run_target_args'_v593 
                    (* run_target_args'
                    let v611 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v612 : string = "String::from($0)"
                    let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v604 v612 
                    let _run_target_args'_v611 = v613 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v614 : string = "String::from($0)"
                    let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr v604 v614 
                    let _run_target_args'_v611 = v615 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v616 : string = "String::from($0)"
                    let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr v604 v616 
                    let _run_target_args'_v611 = v617 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v619 : std_string_String = v604 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v619 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v623 : std_string_String = v604 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v623 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v627 : std_string_String = v604 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v627 
                    #endif
#else
                    let v631 : std_string_String = v604 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v631 
                    #endif
                    let v634 : std_string_String = _run_target_args'_v611 
                    let v643 : string = "fable_library_rust::String_::fromString($0)"
                    let v644 : string = Fable.Core.RustInterop.emitRustExpr v634 v643 
                    let v645 : string = $"> {v644}"
                    if v5 then
                        let v709 : unit = ()
                        let v710 : (unit -> unit) = closure51(v645)
                        let v711 : unit = (fun () -> v710 (); v709) ()
                        ()
                    else
                        let v776 : unit = ()
                        let v777 : (unit -> unit) = closure10(v645)
                        let v778 : unit = (fun () -> v777 (); v776) ()
                        ()
                    v634
            let v979 : string = "$0"
            let v980 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v560 v979 
            let v981 : string = "v980.lock()"
            let v982 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v981 
            (* run_target_args'
            let v984 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v985 : string = "$0.unwrap()"
            let v986 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v985 
            let _run_target_args'_v984 = v986 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v987 : string = "$0.unwrap()"
            let v988 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v987 
            let _run_target_args'_v984 = v988 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v989 : string = "$0.unwrap()"
            let v990 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v989 
            let _run_target_args'_v984 = v990 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v991 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v984 = v991 
            #endif
#if FABLE_COMPILER_PYTHON
            let v992 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v984 = v992 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v993 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v984 = v993 
            #endif
#else
            let v994 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v984 = v994 
            #endif
            let v995 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v984 
            let v998 : string = "&$0"
            let v999 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v995 v998 
            let v1000 : string = "$0.send($1)"
            let v1001 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v999, v978) v1000 
            let v1002 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method130()
            (* run_target_args'
            let v1004 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1005 : string = "$0.map_err(|x| $1(x))"
            let v1006 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1001, v1002) v1005 
            let _run_target_args'_v1004 = v1006 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1007 : string = "$0.map_err(|x| $1(x))"
            let v1008 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1001, v1002) v1007 
            let _run_target_args'_v1004 = v1008 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1009 : string = "$0.map_err(|x| $1(x))"
            let v1010 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1001, v1002) v1009 
            let _run_target_args'_v1004 = v1010 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1011 : Result<unit, std_string_String> = match v1001 with Ok x -> Ok x | Error x -> Error (v1002 x)
            let _run_target_args'_v1004 = v1011 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1012 : Result<unit, std_string_String> = match v1001 with Ok x -> Ok x | Error x -> Error (v1002 x)
            let _run_target_args'_v1004 = v1012 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1013 : Result<unit, std_string_String> = match v1001 with Ok x -> Ok x | Error x -> Error (v1002 x)
            let _run_target_args'_v1004 = v1013 
            #endif
#else
            let v1014 : Result<unit, std_string_String> = match v1001 with Ok x -> Ok x | Error x -> Error (v1002 x)
            let _run_target_args'_v1004 = v1014 
            #endif
            let v1015 : Result<unit, std_string_String> = _run_target_args'_v1004 
            let v1018 : string = "$0"
            let v1019 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1015 v1018 
            let v1020 : string = "true; $0 }); //"
            let v1021 : bool = Fable.Core.RustInterop.emitRustExpr v1019 v1020 
            let v1022 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1023 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1022 
            let v1024 : Result<unit, string> = method131(v1023)
            let v1025 : string = ""
            let v1026 : string = "}"
            let v1027 : string = v1025 + v1026 
            let x = v1024 //
            let v1028 : _ = x
            let v1029 : unit = ()
            (* run_target_args'
            let v1030 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1031 : string = $"true; let _fix_closure_v1029 = $0"
            let v1032 : bool = Fable.Core.RustInterop.emitRustExpr v1028 v1031 
            let _run_target_args'_v1030 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1033 : string = $"true; let _fix_closure_v1029 = $0"
            let v1034 : bool = Fable.Core.RustInterop.emitRustExpr v1028 v1033 
            let _run_target_args'_v1030 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1035 : string = $"true; let _fix_closure_v1029 = $0"
            let v1036 : bool = Fable.Core.RustInterop.emitRustExpr v1028 v1035 
            let _run_target_args'_v1030 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1030 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1030 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1030 = false 
            #endif
#else
            let _run_target_args'_v1030 = false 
            #endif
            let v1037 : bool = _run_target_args'_v1030 
            let v1038 : string = $"true; _fix_closure_v1029 " + v1027 + "); " + v1025 + " // rust.fix_closure'"
            let v1039 : bool = Fable.Core.RustInterop.emitRustExpr () v1038 
            let v1040 : string = "__spawn"
            let v1041 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1040 
            let v1042 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1043 : bool = Fable.Core.RustInterop.emitRustExpr () v1042 
            let v1044 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1045 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v475 v1044 
            let v1046 : string = "std::io::BufReader::new($0)"
            let v1047 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v1045 v1046 
            let v1048 : string = "std::io::BufRead::lines(v1047)"
            let v1049 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1048 
            let v1050 : string = "true; let mut v1049 = v1049; let _iter_try_for_each = v1049.try_for_each(|x| { //"
            let v1051 : bool = Fable.Core.RustInterop.emitRustExpr () v1050 
            let v1052 : string = "x"
            let v1053 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1052 
            let v1054 : string = "$0.clone()"
            let v1055 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v540 v1054 
            let v1056 : (std_io_Error -> std_string_String) = method73()
            (* run_target_args'
            let v1058 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1059 : string = "$0.map_err(|x| $1(x))"
            let v1060 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1053, v1056) v1059 
            let _run_target_args'_v1058 = v1060 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1061 : string = "$0.map_err(|x| $1(x))"
            let v1062 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1053, v1056) v1061 
            let _run_target_args'_v1058 = v1062 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1063 : string = "$0.map_err(|x| $1(x))"
            let v1064 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1053, v1056) v1063 
            let _run_target_args'_v1058 = v1064 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1065 : Result<std_string_String, std_string_String> = match v1053 with Ok x -> Ok x | Error x -> Error (v1056 x)
            let _run_target_args'_v1058 = v1065 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1066 : Result<std_string_String, std_string_String> = match v1053 with Ok x -> Ok x | Error x -> Error (v1056 x)
            let _run_target_args'_v1058 = v1066 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1067 : Result<std_string_String, std_string_String> = match v1053 with Ok x -> Ok x | Error x -> Error (v1056 x)
            let _run_target_args'_v1058 = v1067 
            #endif
#else
            let v1068 : Result<std_string_String, std_string_String> = match v1053 with Ok x -> Ok x | Error x -> Error (v1056 x)
            let _run_target_args'_v1058 = v1068 
            #endif
            let v1069 : Result<std_string_String, std_string_String> = _run_target_args'_v1058 
            let v1072 : (std_string_String -> US29) = method126()
            let v1073 : (std_string_String -> US29) = method127()
            let v1074 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1075 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v1072, v1073, v1069) v1074 
            let v1544 : std_string_String =
                match v1075 with
                | US29_1(v1346) -> (* Error *)
                    let v1407 : unit = ()
                    let v1408 : (unit -> unit) = closure50(v5, v1346)
                    let v1409 : unit = (fun () -> v1408 (); v1407) ()
                    let v1470 : string = $"\u001b[4;7m{v1346}\u001b[0m"
                    (* run_target_args'
                    let v1475 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1476 : string = "&*$0"
                    let v1477 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1470 v1476 
                    let _run_target_args'_v1475 = v1477 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1478 : string = "&*$0"
                    let v1479 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1470 v1478 
                    let _run_target_args'_v1475 = v1479 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1480 : string = "&*$0"
                    let v1481 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1470 v1480 
                    let _run_target_args'_v1475 = v1481 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1483 : Ref<Str> = v1470 |> unbox<Ref<Str>>
                    let _run_target_args'_v1475 = v1483 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1487 : Ref<Str> = v1470 |> unbox<Ref<Str>>
                    let _run_target_args'_v1475 = v1487 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1491 : Ref<Str> = v1470 |> unbox<Ref<Str>>
                    let _run_target_args'_v1475 = v1491 
                    #endif
#else
                    let v1495 : Ref<Str> = v1470 |> unbox<Ref<Str>>
                    let _run_target_args'_v1475 = v1495 
                    #endif
                    let v1498 : Ref<Str> = _run_target_args'_v1475 
                    (* run_target_args'
                    let v1511 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1512 : string = "String::from($0)"
                    let v1513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1498 v1512 
                    let _run_target_args'_v1511 = v1513 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1514 : string = "String::from($0)"
                    let v1515 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1498 v1514 
                    let _run_target_args'_v1511 = v1515 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1516 : string = "String::from($0)"
                    let v1517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1498 v1516 
                    let _run_target_args'_v1511 = v1517 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1519 : std_string_String = v1498 |> unbox<std_string_String>
                    let _run_target_args'_v1511 = v1519 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1523 : std_string_String = v1498 |> unbox<std_string_String>
                    let _run_target_args'_v1511 = v1523 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1527 : std_string_String = v1498 |> unbox<std_string_String>
                    let _run_target_args'_v1511 = v1527 
                    #endif
#else
                    let v1531 : std_string_String = v1498 |> unbox<std_string_String>
                    let _run_target_args'_v1511 = v1531 
                    #endif
                    let v1534 : std_string_String = _run_target_args'_v1511 
                    v1534
                | US29_0(v1076) -> (* Ok *)
                    let v1077 : string = "fable_library_rust::String_::fromString($0)"
                    let v1078 : string = Fable.Core.RustInterop.emitRustExpr v1076 v1077 
                    let v1079 : string = "encoding_rs::UTF_8"
                    let v1080 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1079 
                    let v1081 : string = "$0.encode(&*$1).0"
                    let v1082 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1080, v1078) v1081 
                    let v1083 : string = "$0.as_ref()"
                    let v1084 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1082 v1083 
                    let v1085 : string = "std::str::from_utf8($0)"
                    let v1086 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1084 v1085 
                    (* run_target_args'
                    let v1088 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1089 : string = "$0.unwrap()"
                    let v1090 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1086 v1089 
                    let _run_target_args'_v1088 = v1090 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1091 : string = "$0.unwrap()"
                    let v1092 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1086 v1091 
                    let _run_target_args'_v1088 = v1092 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1093 : string = "$0.unwrap()"
                    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1086 v1093 
                    let _run_target_args'_v1088 = v1094 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1095 : Ref<Str> = match v1086 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1088 = v1095 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1096 : Ref<Str> = match v1086 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1088 = v1096 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1097 : Ref<Str> = match v1086 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1088 = v1097 
                    #endif
#else
                    let v1098 : Ref<Str> = match v1086 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1088 = v1098 
                    #endif
                    let v1099 : Ref<Str> = _run_target_args'_v1088 
                    (* run_target_args'
                    let v1106 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1107 : string = "String::from($0)"
                    let v1108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1099 v1107 
                    let _run_target_args'_v1106 = v1108 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1109 : string = "String::from($0)"
                    let v1110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1099 v1109 
                    let _run_target_args'_v1106 = v1110 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1111 : string = "String::from($0)"
                    let v1112 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1099 v1111 
                    let _run_target_args'_v1106 = v1112 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1114 : std_string_String = v1099 |> unbox<std_string_String>
                    let _run_target_args'_v1106 = v1114 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1118 : std_string_String = v1099 |> unbox<std_string_String>
                    let _run_target_args'_v1106 = v1118 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1122 : std_string_String = v1099 |> unbox<std_string_String>
                    let _run_target_args'_v1106 = v1122 
                    #endif
#else
                    let v1126 : std_string_String = v1099 |> unbox<std_string_String>
                    let _run_target_args'_v1106 = v1126 
                    #endif
                    let v1129 : std_string_String = _run_target_args'_v1106 
                    let v1138 : string = "fable_library_rust::String_::fromString($0)"
                    let v1139 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1138 
                    let v1140 : string = $"! {v1139}"
                    if v5 then
                        let v1203 : unit = ()
                        let v1204 : (unit -> unit) = closure51(v1140)
                        let v1205 : unit = (fun () -> v1204 (); v1203) ()
                        ()
                    else
                        let v1269 : unit = ()
                        let v1270 : (unit -> unit) = closure10(v1140)
                        let v1271 : unit = (fun () -> v1270 (); v1269) ()
                        ()
                    let v1273 : string = $"\u001b[4;7m{v1129}\u001b[0m"
                    (* run_target_args'
                    let v1278 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1279 : string = "&*$0"
                    let v1280 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1273 v1279 
                    let _run_target_args'_v1278 = v1280 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1281 : string = "&*$0"
                    let v1282 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1273 v1281 
                    let _run_target_args'_v1278 = v1282 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1283 : string = "&*$0"
                    let v1284 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1273 v1283 
                    let _run_target_args'_v1278 = v1284 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1286 : Ref<Str> = v1273 |> unbox<Ref<Str>>
                    let _run_target_args'_v1278 = v1286 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1290 : Ref<Str> = v1273 |> unbox<Ref<Str>>
                    let _run_target_args'_v1278 = v1290 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1294 : Ref<Str> = v1273 |> unbox<Ref<Str>>
                    let _run_target_args'_v1278 = v1294 
                    #endif
#else
                    let v1298 : Ref<Str> = v1273 |> unbox<Ref<Str>>
                    let _run_target_args'_v1278 = v1298 
                    #endif
                    let v1301 : Ref<Str> = _run_target_args'_v1278 
                    (* run_target_args'
                    let v1314 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1315 : string = "String::from($0)"
                    let v1316 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1301 v1315 
                    let _run_target_args'_v1314 = v1316 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1317 : string = "String::from($0)"
                    let v1318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1301 v1317 
                    let _run_target_args'_v1314 = v1318 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1319 : string = "String::from($0)"
                    let v1320 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1301 v1319 
                    let _run_target_args'_v1314 = v1320 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1322 : std_string_String = v1301 |> unbox<std_string_String>
                    let _run_target_args'_v1314 = v1322 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1326 : std_string_String = v1301 |> unbox<std_string_String>
                    let _run_target_args'_v1314 = v1326 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1330 : std_string_String = v1301 |> unbox<std_string_String>
                    let _run_target_args'_v1314 = v1330 
                    #endif
#else
                    let v1334 : std_string_String = v1301 |> unbox<std_string_String>
                    let _run_target_args'_v1314 = v1334 
                    #endif
                    let v1337 : std_string_String = _run_target_args'_v1314 
                    v1337
            let v1545 : string = "$0"
            let v1546 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1055 v1545 
            let v1547 : string = "v1546.lock()"
            let v1548 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1547 
            (* run_target_args'
            let v1550 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1551 : string = "$0.unwrap()"
            let v1552 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1548 v1551 
            let _run_target_args'_v1550 = v1552 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1553 : string = "$0.unwrap()"
            let v1554 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1548 v1553 
            let _run_target_args'_v1550 = v1554 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1555 : string = "$0.unwrap()"
            let v1556 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1548 v1555 
            let _run_target_args'_v1550 = v1556 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1557 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1548 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1550 = v1557 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1558 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1548 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1550 = v1558 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1559 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1548 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1550 = v1559 
            #endif
#else
            let v1560 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1548 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1550 = v1560 
            #endif
            let v1561 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v1550 
            let v1564 : string = "&$0"
            let v1565 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1561 v1564 
            let v1566 : string = "$0.send($1)"
            let v1567 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v1565, v1544) v1566 
            let v1568 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method130()
            (* run_target_args'
            let v1570 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1571 : string = "$0.map_err(|x| $1(x))"
            let v1572 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1567, v1568) v1571 
            let _run_target_args'_v1570 = v1572 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1573 : string = "$0.map_err(|x| $1(x))"
            let v1574 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1567, v1568) v1573 
            let _run_target_args'_v1570 = v1574 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1575 : string = "$0.map_err(|x| $1(x))"
            let v1576 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1567, v1568) v1575 
            let _run_target_args'_v1570 = v1576 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1577 : Result<unit, std_string_String> = match v1567 with Ok x -> Ok x | Error x -> Error (v1568 x)
            let _run_target_args'_v1570 = v1577 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1578 : Result<unit, std_string_String> = match v1567 with Ok x -> Ok x | Error x -> Error (v1568 x)
            let _run_target_args'_v1570 = v1578 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1579 : Result<unit, std_string_String> = match v1567 with Ok x -> Ok x | Error x -> Error (v1568 x)
            let _run_target_args'_v1570 = v1579 
            #endif
#else
            let v1580 : Result<unit, std_string_String> = match v1567 with Ok x -> Ok x | Error x -> Error (v1568 x)
            let _run_target_args'_v1570 = v1580 
            #endif
            let v1581 : Result<unit, std_string_String> = _run_target_args'_v1570 
            let v1584 : string = "$0"
            let v1585 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1581 v1584 
            let v1586 : string = "true; $0 }); //"
            let v1587 : bool = Fable.Core.RustInterop.emitRustExpr v1585 v1586 
            let v1588 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1589 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1588 
            let v1590 : Result<unit, string> = method131(v1589)
            let v1591 : string = v1025 + v1026 
            let x = v1590 //
            let v1592 : _ = x
            let v1593 : unit = ()
            (* run_target_args'
            let v1594 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1595 : string = $"true; let _fix_closure_v1593 = $0"
            let v1596 : bool = Fable.Core.RustInterop.emitRustExpr v1592 v1595 
            let _run_target_args'_v1594 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1597 : string = $"true; let _fix_closure_v1593 = $0"
            let v1598 : bool = Fable.Core.RustInterop.emitRustExpr v1592 v1597 
            let _run_target_args'_v1594 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1599 : string = $"true; let _fix_closure_v1593 = $0"
            let v1600 : bool = Fable.Core.RustInterop.emitRustExpr v1592 v1599 
            let _run_target_args'_v1594 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1594 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1594 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1594 = false 
            #endif
#else
            let _run_target_args'_v1594 = false 
            #endif
            let v1601 : bool = _run_target_args'_v1594 
            let v1602 : string = $"true; _fix_closure_v1593 " + v1591 + "); " + v1025 + " // rust.fix_closure'"
            let v1603 : bool = Fable.Core.RustInterop.emitRustExpr () v1602 
            let v1604 : string = "__spawn"
            let v1605 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1604 
            let v1608 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) = method132()
            let v1609 : US30 option = v4 |> Option.map v1608 
            let v1629 : US30 = US30_1
            let v1630 : US30 = v1609 |> Option.defaultValue v1629 
            match v1630 with
            | US30_1 -> (* None *)
                ()
            | US30_0(v1634) -> (* Some *)
                let v1635 : string = "$0"
                let v1636 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v525 v1635 
                let v1637 : string = "v1636.lock()"
                let v1638 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1637 
                (* run_target_args'
                let v1640 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1641 : string = "$0.unwrap()"
                let v1642 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1638 v1641 
                let _run_target_args'_v1640 = v1642 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1643 : string = "$0.unwrap()"
                let v1644 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1638 v1643 
                let _run_target_args'_v1640 = v1644 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1645 : string = "$0.unwrap()"
                let v1646 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1638 v1645 
                let _run_target_args'_v1640 = v1646 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1647 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1640 = v1647 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1648 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1640 = v1648 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1649 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1640 = v1649 
                #endif
#else
                let v1650 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1640 = v1650 
                #endif
                let v1651 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1640 
                let v1654 : std_sync_MutexGuard<std_process_ChildStdin option> = method133(v1651)
                let v1655 : string = "true; let mut v1654 = v1654"
                let v1656 : bool = Fable.Core.RustInterop.emitRustExpr () v1655 
                let v1657 : string = "&mut $0"
                let v1658 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1654 v1657 
                let v1659 : string = "Option::take($0)"
                let v1660 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1658 v1659 
                let v1661 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1662 : bool = Fable.Core.RustInterop.emitRustExpr v1660 v1661 
                let v1663 : string = "x"
                let v1664 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1663 
                let v1665 : string = "std::sync::Mutex::new(v1664)"
                let v1666 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1665 
                let v1667 : string = "std::sync::Arc::new(v1666)"
                let v1668 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1667 
                let v1669 : string = "true; $0 })"
                let v1670 : bool = Fable.Core.RustInterop.emitRustExpr v1668 v1669 
                let v1671 : string = "_optionm_map_"
                let v1672 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1671 
                let v1675 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) = method134()
                let v1676 : US31 option = v1672 |> Option.map v1675 
                let v1696 : US31 = US31_1
                let v1697 : US31 = v1676 |> Option.defaultValue v1696 
                match v1697 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1701) -> (* Some *)
                    v1634 v1701
                    let v1702 : string = "$0"
                    let v1703 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1701 v1702 
                    let v1704 : string = "v1703.lock()"
                    let v1705 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1704 
                    (* run_target_args'
                    let v1707 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1708 : string = "$0.unwrap()"
                    let v1709 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1705 v1708 
                    let _run_target_args'_v1707 = v1709 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1710 : string = "$0.unwrap()"
                    let v1711 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1705 v1710 
                    let _run_target_args'_v1707 = v1711 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1712 : string = "$0.unwrap()"
                    let v1713 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1705 v1712 
                    let _run_target_args'_v1707 = v1713 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1714 : std_sync_MutexGuard<std_process_ChildStdin> = match v1705 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1707 = v1714 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1715 : std_sync_MutexGuard<std_process_ChildStdin> = match v1705 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1707 = v1715 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1716 : std_sync_MutexGuard<std_process_ChildStdin> = match v1705 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1707 = v1716 
                    #endif
#else
                    let v1717 : std_sync_MutexGuard<std_process_ChildStdin> = match v1705 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1707 = v1717 
                    #endif
                    let v1718 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1707 
                    let v1721 : std_sync_MutexGuard<std_process_ChildStdin> = method135(v1718)
                    let v1722 : string = "true; let mut v1721 = v1721"
                    let v1723 : bool = Fable.Core.RustInterop.emitRustExpr () v1722 
                    let v1724 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1725 : bool = Fable.Core.RustInterop.emitRustExpr v1721 v1724 
                    ()
            let v1726 : string = "$0"
            let v1727 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v395 v1726 
            let v1728 : string = "v1727.lock()"
            let v1729 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1728 
            (* run_target_args'
            let v1731 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1732 : string = "$0.unwrap()"
            let v1733 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1729 v1732 
            let _run_target_args'_v1731 = v1733 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1734 : string = "$0.unwrap()"
            let v1735 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1729 v1734 
            let _run_target_args'_v1731 = v1735 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1736 : string = "$0.unwrap()"
            let v1737 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1729 v1736 
            let _run_target_args'_v1731 = v1737 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1738 : std_sync_MutexGuard<std_process_Child option> = match v1729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1731 = v1738 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1739 : std_sync_MutexGuard<std_process_Child option> = match v1729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1731 = v1739 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1740 : std_sync_MutexGuard<std_process_Child option> = match v1729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1731 = v1740 
            #endif
#else
            let v1741 : std_sync_MutexGuard<std_process_Child option> = match v1729 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1731 = v1741 
            #endif
            let v1742 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1731 
            let v1745 : std_sync_MutexGuard<std_process_Child option> = method121(v1742)
            let v1746 : string = "true; let mut v1745 = v1745"
            let v1747 : bool = Fable.Core.RustInterop.emitRustExpr () v1746 
            let v1748 : string = "&mut $0"
            let v1749 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1745 v1748 
            let v1750 : string = "Option::take($0)"
            let v1751 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1749 v1750 
            let v1752 : string = "$0.unwrap()"
            let v1753 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1751 v1752 
            let v1754 : string = "$0.wait_with_output()"
            let v1755 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1753 v1754 
            let v1756 : (std_io_Error -> std_string_String) = method73()
            (* run_target_args'
            let v1758 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1759 : string = "$0.map_err(|x| $1(x))"
            let v1760 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1755, v1756) v1759 
            let _run_target_args'_v1758 = v1760 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1761 : string = "$0.map_err(|x| $1(x))"
            let v1762 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1755, v1756) v1761 
            let _run_target_args'_v1758 = v1762 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1763 : string = "$0.map_err(|x| $1(x))"
            let v1764 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1755, v1756) v1763 
            let _run_target_args'_v1758 = v1764 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1765 : Result<std_process_Output, std_string_String> = match v1755 with Ok x -> Ok x | Error x -> Error (v1756 x)
            let _run_target_args'_v1758 = v1765 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1766 : Result<std_process_Output, std_string_String> = match v1755 with Ok x -> Ok x | Error x -> Error (v1756 x)
            let _run_target_args'_v1758 = v1766 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1767 : Result<std_process_Output, std_string_String> = match v1755 with Ok x -> Ok x | Error x -> Error (v1756 x)
            let _run_target_args'_v1758 = v1767 
            #endif
#else
            let v1768 : Result<std_process_Output, std_string_String> = match v1755 with Ok x -> Ok x | Error x -> Error (v1756 x)
            let _run_target_args'_v1758 = v1768 
            #endif
            let v1769 : Result<std_process_Output, std_string_String> = _run_target_args'_v1758 
            let v1772 : string = "v1605"
            let v1773 : string = v1772 + v1025 
            let v1774 : string = v1773 + v1025 
            let v1775 : string = "v1041"
            let v1776 : string = ", "
            let v1777 : string = v1775 + v1776 
            let v1778 : string = v1777 + v1774 
            let v1779 : string = "vec![" + v1778 + "]"
            let v1780 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1779 
            let v1781 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1782 : bool = Fable.Core.RustInterop.emitRustExpr v1780 v1781 
            let v1783 : string = "x"
            let v1784 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1783 
            let v1785 : string = "std::thread::JoinHandle::join($0)"
            let v1786 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1784 v1785 
            (* run_target_args'
            let v1788 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1789 : string = "$0.unwrap()"
            let v1790 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1786 v1789 
            let _run_target_args'_v1788 = v1790 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1791 : string = "$0.unwrap()"
            let v1792 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1786 v1791 
            let _run_target_args'_v1788 = v1792 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1793 : string = "$0.unwrap()"
            let v1794 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1786 v1793 
            let _run_target_args'_v1788 = v1794 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1795 : Result<unit, string> = match v1786 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1788 = v1795 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1796 : Result<unit, string> = match v1786 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1788 = v1796 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1797 : Result<unit, string> = match v1786 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1788 = v1797 
            #endif
#else
            let v1798 : Result<unit, string> = match v1786 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1788 = v1798 
            #endif
            let v1799 : Result<unit, string> = _run_target_args'_v1788 
            (* run_target_args'
            let v1802 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1803 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1799 v1803 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1804 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1799 v1804 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1805 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1799 v1805 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1799 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1799 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1799 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1799 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1806 : string = $"true"
            let v1807 : bool = Fable.Core.RustInterop.emitRustExpr () v1806 
            let v1808 : string = "true; }}); { //"
            let v1809 : bool = Fable.Core.RustInterop.emitRustExpr () v1808 
            let v1810 : (std_process_Output -> US32) = method136()
            let v1811 : (std_string_String -> US32) = method137()
            let v1813 : US32 = match v1769 with Ok x -> v1810 x | Error x -> v1811 x
            match v1813 with
            | US32_1(v1933) -> (* Error *)
                let v1998 : unit = ()
                let v1999 : (unit -> unit) = closure57(v0, v1, v2, v3, v4, v5, v6, v29, v126, v1933)
                let v2000 : unit = (fun () -> v1999 (); v1998) ()
                let v2065 : US7 = US7_0(v1933)
                let v2066 : US28 = US28_1
                struct (-2, v2065, v2066)
            | US32_0(v1816) -> (* Ok *)
                let v1817 : string = "$0.status"
                let v1818 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1816 v1817 
                let v1819 : string = "$0.code()"
                let v1820 : int32 option = Fable.Core.RustInterop.emitRustExpr v1818 v1819 
                let v1823 : (int32 -> US33) = method139()
                let v1824 : US33 option = v1820 |> Option.map v1823 
                let v1844 : US33 = US33_1
                let v1845 : US33 = v1824 |> Option.defaultValue v1844 
                match v1845 with
                | US33_1 -> (* None *)
                    let v1852 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1857 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1858 : string = "&*$0"
                    let v1859 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1852 v1858 
                    let _run_target_args'_v1857 = v1859 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1860 : string = "&*$0"
                    let v1861 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1852 v1860 
                    let _run_target_args'_v1857 = v1861 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1862 : string = "&*$0"
                    let v1863 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1852 v1862 
                    let _run_target_args'_v1857 = v1863 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1865 : Ref<Str> = v1852 |> unbox<Ref<Str>>
                    let _run_target_args'_v1857 = v1865 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1869 : Ref<Str> = v1852 |> unbox<Ref<Str>>
                    let _run_target_args'_v1857 = v1869 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1873 : Ref<Str> = v1852 |> unbox<Ref<Str>>
                    let _run_target_args'_v1857 = v1873 
                    #endif
#else
                    let v1877 : Ref<Str> = v1852 |> unbox<Ref<Str>>
                    let _run_target_args'_v1857 = v1877 
                    #endif
                    let v1880 : Ref<Str> = _run_target_args'_v1857 
                    (* run_target_args'
                    let v1893 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1894 : string = "String::from($0)"
                    let v1895 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1880 v1894 
                    let _run_target_args'_v1893 = v1895 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1896 : string = "String::from($0)"
                    let v1897 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1880 v1896 
                    let _run_target_args'_v1893 = v1897 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1898 : string = "String::from($0)"
                    let v1899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1880 v1898 
                    let _run_target_args'_v1893 = v1899 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1901 : std_string_String = v1880 |> unbox<std_string_String>
                    let _run_target_args'_v1893 = v1901 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1905 : std_string_String = v1880 |> unbox<std_string_String>
                    let _run_target_args'_v1893 = v1905 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1909 : std_string_String = v1880 |> unbox<std_string_String>
                    let _run_target_args'_v1893 = v1909 
                    #endif
#else
                    let v1913 : std_string_String = v1880 |> unbox<std_string_String>
                    let _run_target_args'_v1893 = v1913 
                    #endif
                    let v1916 : std_string_String = _run_target_args'_v1893 
                    let v1925 : US7 = US7_0(v1916)
                    let v1926 : US28 = US28_0(v546)
                    struct (-1, v1925, v1926)
                | US33_0(v1849) -> (* Some *)
                    let v1850 : US7 = US7_1
                    let v1851 : US28 = US28_0(v546)
                    struct (v1849, v1850, v1851)
    let v2223 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v2212 with
        | US28_1 -> (* None *)
            let v2219 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v2219
        | US28_0(v2213) -> (* Some *)
            let v2215 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v2213 
            v2215
    let v2224 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v2225 : bool = Fable.Core.RustInterop.emitRustExpr v2223 v2224 
    let v2226 : string = "x"
    let v2227 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2226 
    let v2228 : string = "$0"
    let v2229 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v2227 v2228 
    let v2230 : string = "v2229.lock()"
    let v2231 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v2230 
    (* run_target_args'
    let v2233 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2234 : string = "$0.unwrap()"
    let v2235 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2231 v2234 
    let _run_target_args'_v2233 = v2235 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2236 : string = "$0.unwrap()"
    let v2237 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2231 v2236 
    let _run_target_args'_v2233 = v2237 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2238 : string = "$0.unwrap()"
    let v2239 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2231 v2238 
    let _run_target_args'_v2233 = v2239 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2240 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2233 = v2240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2241 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2233 = v2241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2242 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2233 = v2242 
    #endif
#else
    let v2243 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2233 = v2243 
    #endif
    let v2244 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v2233 
    let v2247 : string = "$0.iter()"
    let v2248 : _ = Fable.Core.RustInterop.emitRustExpr v2244 v2247 
    let v2249 : string = "$0.collect::<Vec<_>>()"
    let v2250 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2248 v2249 
    let v2251 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v2252 : bool = Fable.Core.RustInterop.emitRustExpr v2250 v2251 
    let v2253 : string = "x"
    let v2254 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2253 
    let v2255 : string = "fable_library_rust::String_::fromString($0)"
    let v2256 : string = Fable.Core.RustInterop.emitRustExpr v2254 v2255 
    let v2257 : string = "true; $0 }).collect::<Vec<_>>()"
    let v2258 : bool = Fable.Core.RustInterop.emitRustExpr v2256 v2257 
    let v2259 : string = "_vec_map"
    let v2260 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2259 
    let v2261 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v2262 : (string []) = Fable.Core.RustInterop.emitRustExpr v2260 v2261 
    let v2264 : string seq = v2262 |> Seq.ofArray
    let v2269 : string = method69()
    let v2270 : (string -> (string seq -> string)) = String.concat
    let v2271 : (string seq -> string) = v2270 v2269
    let v2272 : string = v2271 v2264
    let v2276 : string = "true; $0 })"
    let v2277 : bool = Fable.Core.RustInterop.emitRustExpr v2272 v2276 
    let v2278 : string = "_optionm_map_"
    let v2279 : string option = Fable.Core.RustInterop.emitRustExpr () v2278 
    let v2286 : US5 =
        match v2211 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v2280) -> (* Some *)
            let v2281 : string = "fable_library_rust::String_::fromString($0)"
            let v2282 : string = Fable.Core.RustInterop.emitRustExpr v2280 v2281 
            US5_0(v2282)
    let v2290 : string =
        match v2286 with
        | US5_1 -> (* None *)
            let v2288 : string = ""
            v2288
        | US5_0(v2287) -> (* Some *)
            v2287
    let v2292 : string = v2279 |> Option.defaultValue v2290 
    let v2356 : unit = ()
    let v2357 : (unit -> unit) = closure59(v2210, v2292)
    let v2358 : unit = (fun () -> v2357 (); v2356) ()
    let v2421 : (int32 * string) = v2210, v2292 
    v2421 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v259 <- Some x
    let v2424 : (int32 * string) = match _capture_v259 with Some x -> x | None -> failwith "base.capture / _capture_v259=None"
    let (a, b) = v2424 
    let v4592 : int32 = a
    let v4593 : string = b
    let _run_target_args'_v15 = struct (v4592, v4593) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v4600 : int32, v4601 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4600, v4601) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v4608 : int32, v4609 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4608, v4609) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v4616 : int32, v4617 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4616, v4617) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v4624 : int32, v4625 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4624, v4625) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v4632 : int32, v4633 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4632, v4633) 
    #endif
#else
    let v4638 : Async<struct (int32 * string)> = method141(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v4647 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4650 : int32, v4651 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4647 = struct (v4650, v4651) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v4658 : int32, v4659 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4647 = struct (v4658, v4659) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v4666 : int32, v4667 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4647 = struct (v4666, v4667) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v4674 : int32, v4675 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4647 = struct (v4674, v4675) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4680 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v4681 : int32, v4682 : string) = v4680 v4638
    let _run_target_args'_v4647 = struct (v4681, v4682) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4683 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v4684 : int32, v4685 : string) = v4683 v4638
    let _run_target_args'_v4647 = struct (v4684, v4685) 
    #endif
#else
    let v4686 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v4687 : int32, v4688 : string) = v4686 v4638
    let _run_target_args'_v4647 = struct (v4687, v4688) 
    #endif
    let struct (v4689 : int32, v4690 : string) = _run_target_args'_v4647 
    let _run_target_args'_v15 = struct (v4689, v4690) 
    #endif
    let struct (v4701 : int32, v4702 : string) = _run_target_args'_v15 
    struct (v4701, v4702)
and method157 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "run_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "new_code_path"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.process_gleam / check error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure68 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v19 : unit = ()
        let v20 : (unit -> unit) = closure2()
        let v21 : unit = (fun () -> v20 (); v19) ()
        let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
        let v60 : string = method8(v42, v43, v44, v45, v46, v47)
        let v61 : string = method76()
        let v62 : string = method157(v42, v43, v44, v45, v46, v47, v60, v61, v2, v1, v0)
        method17(v62)
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_gleam / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure69 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method158(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method159 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "run_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "new_code_path"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.process_gleam / esbuild error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v19 : unit = ()
        let v20 : (unit -> unit) = closure2()
        let v21 : unit = (fun () -> v20 (); v19) ()
        let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
        let v60 : string = method8(v42, v43, v44, v45, v46, v47)
        let v61 : string = method76()
        let v62 : string = method159(v42, v43, v44, v45, v46, v47, v60, v61, v2, v1, v0)
        method17(v62)
and method160 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "run_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "new_code_path"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.process_gleam / trunk error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure71 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v19 : unit = ()
        let v20 : (unit -> unit) = closure2()
        let v21 : unit = (fun () -> v20 (); v19) ()
        let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
        let v60 : string = method8(v42, v43, v44, v45, v46, v47)
        let v61 : string = method76()
        let v62 : string = method160(v42, v43, v44, v45, v46, v47, v60, v61, v2, v1, v0)
        method17(v62)
and closure72 () (v0 : string) : US5 =
    US5_0(v0)
and closure73 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method161 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v114 : string = $"{v104}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v132 : string = "; "
    let v133 : string = $"{v132}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v13, v133)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v151 : string = "run_result'"
    let v152 : string = $"{v151}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v13, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v169 : string = $"{v54}"
    let v177 : unit = ()
    let v178 : (unit -> unit) = closure7(v13, v169)
    let v179 : unit = (fun () -> v178 (); v177) ()
    (* run_target_args'
    let v189 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v189 = v193 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v189 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v189 = v201 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v203 : string = $"%A{v9}"
    let _run_target_args'_v189 = v203 
    #endif
#if FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v9}"
    let _run_target_args'_v189 = v207 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v9}"
    let _run_target_args'_v189 = v211 
    #endif
#else
    let v215 : string = $"%A{v9}"
    let _run_target_args'_v189 = v215 
    #endif
    let v218 : string = _run_target_args'_v189 
    let v228 : string = $"{v218}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v13, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v245 : string = $"{v132}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v13, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v263 : string = "new_code_path"
    let v264 : string = $"{v263}"
    let v272 : unit = ()
    let v273 : (unit -> unit) = closure7(v13, v264)
    let v274 : unit = (fun () -> v273 (); v272) ()
    let v281 : string = $"{v54}"
    let v289 : unit = ()
    let v290 : (unit -> unit) = closure7(v13, v281)
    let v291 : unit = (fun () -> v290 (); v289) ()
    let v298 : string = $"{v10}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v13, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v315 : string = $"{v132}"
    let v323 : unit = ()
    let v324 : (unit -> unit) = closure7(v13, v315)
    let v325 : unit = (fun () -> v324 (); v323) ()
    let v333 : string = "external_command"
    let v334 : string = $"{v333}"
    let v342 : unit = ()
    let v343 : (unit -> unit) = closure7(v13, v334)
    let v344 : unit = (fun () -> v343 (); v342) ()
    let v351 : string = $"{v54}"
    let v359 : unit = ()
    let v360 : (unit -> unit) = closure7(v13, v351)
    let v361 : unit = (fun () -> v360 (); v359) ()
    let v368 : string = $"{v11}"
    let v376 : unit = ()
    let v377 : (unit -> unit) = closure7(v13, v368)
    let v378 : unit = (fun () -> v377 (); v376) ()
    let v386 : string = " }"
    let v387 : string = $"{v386}"
    let v395 : unit = ()
    let v396 : (unit -> unit) = closure7(v13, v387)
    let v397 : unit = (fun () -> v396 (); v395) ()
    let v403 : string = v13.l0
    let v404 : int64 = v0.l0
    let v407 : string = " "
    let v408 : string = v6 + v407 
    let v412 : string = v408 + v7 
    let v417 : string = " #"
    let v418 : string = v412 + v417 
    let v422 : (int64 -> string) = _.ToString()
    let v423 : string = v422 v404
    let v427 : string = v418 + v423 
    let v431 : string = v427 + v407 
    let v436 : string = "spiral.process_gleam / Exception"
    let v437 : string = v431 + v436 
    let v442 : string = " / "
    let v443 : string = v437 + v442 
    let v447 : string = v443 + v403 
    method16(v447)
and closure75 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method161(v43, v44, v45, v46, v47, v48, v61, v62, v3, v2, v0, v1)
        method17(v63)
and closure74 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure75(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method162 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method162(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method163 () : string =
    let v0 : string = "py-path"
    v0
and method164 () : string =
    let v0 : string = "env"
    v0
and method165 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US38, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "env"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v72 : string = $"%A{v8}"
    let v76 : string = $"{v72}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v13, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v94 : string = "; "
    let v95 : string = $"{v94}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v13, v95)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v113 : string = "exit_code"
    let v114 : string = $"{v113}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v131 : string = $"{v54}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v13, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v151 : string = $"{v9}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v13, v151)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v168 : string = $"{v94}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v13, v168)
    let v178 : unit = (fun () -> v177 (); v176) ()
    let v186 : string = "run_result"
    let v187 : string = $"{v186}"
    let v195 : unit = ()
    let v196 : (unit -> unit) = closure7(v13, v187)
    let v197 : unit = (fun () -> v196 (); v195) ()
    let v204 : string = $"{v54}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v13, v204)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v221 : string = $"{v10}"
    let v229 : unit = ()
    let v230 : (unit -> unit) = closure7(v13, v221)
    let v231 : unit = (fun () -> v230 (); v229) ()
    let v238 : string = $"{v94}"
    let v246 : unit = ()
    let v247 : (unit -> unit) = closure7(v13, v238)
    let v248 : unit = (fun () -> v247 (); v246) ()
    let v256 : string = "new_code_path"
    let v257 : string = $"{v256}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v13, v257)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v274 : string = $"{v54}"
    let v282 : unit = ()
    let v283 : (unit -> unit) = closure7(v13, v274)
    let v284 : unit = (fun () -> v283 (); v282) ()
    let v291 : string = $"{v11}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v13, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v309 : string = " }"
    let v310 : string = $"{v309}"
    let v318 : unit = ()
    let v319 : (unit -> unit) = closure7(v13, v310)
    let v320 : unit = (fun () -> v319 (); v318) ()
    let v326 : string = v13.l0
    let v327 : int64 = v0.l0
    let v330 : string = " "
    let v331 : string = v6 + v330 
    let v335 : string = v331 + v7 
    let v340 : string = " #"
    let v341 : string = v335 + v340 
    let v345 : (int64 -> string) = _.ToString()
    let v346 : string = v345 v327
    let v350 : string = v341 + v346 
    let v354 : string = v350 + v330 
    let v359 : string = "spiral.process_cuda / env install error"
    let v360 : string = v354 + v359 
    let v365 : string = " / "
    let v366 : string = v360 + v365 
    let v370 : string = v366 + v326 
    method16(v370)
and closure77 (v0 : US38, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method165(v43, v44, v45, v46, v47, v48, v61, v62, v0, v3, v2, v1)
        method17(v63)
and closure78 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method166 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v114 : string = $"{v104}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v132 : string = "; "
    let v133 : string = $"{v132}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v13, v133)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v151 : string = "run_result"
    let v152 : string = $"{v151}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v13, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v169 : string = $"{v54}"
    let v177 : unit = ()
    let v178 : (unit -> unit) = closure7(v13, v169)
    let v179 : unit = (fun () -> v178 (); v177) ()
    let v186 : string = $"{v9}"
    let v194 : unit = ()
    let v195 : (unit -> unit) = closure7(v13, v186)
    let v196 : unit = (fun () -> v195 (); v194) ()
    let v203 : string = $"{v132}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v13, v203)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v221 : string = "new_code_path"
    let v222 : string = $"{v221}"
    let v230 : unit = ()
    let v231 : (unit -> unit) = closure7(v13, v222)
    let v232 : unit = (fun () -> v231 (); v230) ()
    let v239 : string = $"{v54}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v256 : string = $"{v10}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v13, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v132}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v13, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v291 : string = "external_command"
    let v292 : string = $"{v291}"
    let v300 : unit = ()
    let v301 : (unit -> unit) = closure7(v13, v292)
    let v302 : unit = (fun () -> v301 (); v300) ()
    let v309 : string = $"{v54}"
    let v317 : unit = ()
    let v318 : (unit -> unit) = closure7(v13, v309)
    let v319 : unit = (fun () -> v318 (); v317) ()
    let v326 : string = $"{v11}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v13, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v344 : string = " }"
    let v345 : string = $"{v344}"
    let v353 : unit = ()
    let v354 : (unit -> unit) = closure7(v13, v345)
    let v355 : unit = (fun () -> v354 (); v353) ()
    let v361 : string = v13.l0
    let v362 : int64 = v0.l0
    let v365 : string = " "
    let v366 : string = v6 + v365 
    let v370 : string = v366 + v7 
    let v375 : string = " #"
    let v376 : string = v370 + v375 
    let v380 : (int64 -> string) = _.ToString()
    let v381 : string = v380 v362
    let v385 : string = v376 + v381 
    let v389 : string = v385 + v365 
    let v394 : string = "spiral.process_cuda / Exception"
    let v395 : string = v389 + v394 
    let v400 : string = " / "
    let v401 : string = v395 + v400 
    let v405 : string = v401 + v361 
    method16(v405)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method166(v43, v44, v45, v46, v47, v48, v61, v62, v3, v1, v0, v2)
        method17(v63)
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method167 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_cuda / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method167(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method168 () : string =
    let v0 : string = "fs-path"
    v0
and method169 () : string =
    let v0 : string = "command"
    v0
and method170 () : string =
    let v0 : string = "path"
    v0
and method172 (v0 : string) : string =
    let v1 : string = method31()
    let v2 : string = method33(v1, v0)
    method63(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method172(v2)
and method171 () : (std_string_String -> string) =
    closure82()
and method173 () : string =
    let v0 : string = "retries"
    v0
and method174 () : string =
    let v0 : string = "working-directory"
    v0
and method176 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "repl_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "retry"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.run / repl error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method12()
        let v63 : string = $"{v1}/{v0}"
        let v64 : string = method176(v43, v44, v45, v46, v47, v48, v61, v62, v3, v2, v63)
        method17(v64)
and method175 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v8 : (struct (string * string) []) = [||]
    let v10 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v18 : string option = None
    let v21 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v22 : string = "TRACE_LEVEL"
    let v23 : string = "Verbose"
    let v24 : string = "AUTOMATION"
    let v25 : string = "True"
    let v26 : (struct (string * string) []) = [|struct (v22, v23); struct (v24, v25)|]
    let v37 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v33 : string option = None
            v33
        | US5_0(v27) -> (* Some *)
            let v29 : string option = Some v27 
            v29
    let v38 : bool = false
    let struct (v39 : int32, v40 : string) = method91(v21, v5, v26, v10, v14, v38, v37)
    let v41 : bool = v39 = 0
    let v43 : bool =
        if v41 then
            true
        else
            let v42 : bool = v3 >= v1
            v42
    if v43 then
        struct (v39, v40)
    else
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure83(v1, v3, v40, v39)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v169 : uint8 = v3 + 1uy
        method175(v0, v1, v2, v169)
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "jupyter_result_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "spiral.run / dib / jupyter nbconvert"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : int32 = v0.Length
        let v62 : string = method177(v41, v42, v43, v44, v45, v46, v59, v60, v1, v61)
        method17(v62)
and method178 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "pwsh_replace_html_result_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "spiral.run / dib / html cell ids"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : int32 = v0.Length
        let v62 : string = method178(v41, v42, v43, v44, v45, v46, v59, v60, v1, v61)
        method17(v62)
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "result_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "spiral.run / dib"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : int32 = v0.Length
        let v62 : string = method179(v41, v42, v43, v44, v45, v46, v59, v60, v1, v61)
        method17(v62)
and method180 () : string =
    let v0 : string = "cleanup"
    v0
and method181 () : string =
    let v0 : string = "wasm"
    v0
and method182 () : string =
    let v0 : string = "contract"
    v0
and method183 (v0 : US5, v1 : string, v2 : US42, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method33(v3, v4)
    let v6 : string = method33(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US42_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method33(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US41_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US41_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US41_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method33(v10, v42)
            method33(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method185 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method185(v0, v4, v2)
        let v6 : string = method33(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method186 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method186(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method184 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method72(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method33(v4, v7)
    let v9 : string = method42(v8)
    method70(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method185(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method114(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method186(v3, v35)
    let v37 : string list = []
    let v38 : string list = method114(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method33(v4, v58)
    let v60 : string = method42(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v65 : string = "\n"
    let v66 : string = v61 + v65 
    let v70 : string = v66 + v62 
    let v73 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v75 : string = v70 + v65 
    let v79 : string = v75 + v73 
    let v82 : string = $"    <LangVersion>preview</LangVersion>"
    let v84 : string = v79 + v65 
    let v88 : string = v84 + v82 
    let v91 : string = $"    <RollForward>Major</RollForward>"
    let v93 : string = v88 + v65 
    let v97 : string = v93 + v91 
    let v100 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v102 : string = v97 + v65 
    let v106 : string = v102 + v100 
    let v109 : string = $"    <PublishAot>false</PublishAot>"
    let v111 : string = v106 + v65 
    let v115 : string = v111 + v109 
    let v118 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v120 : string = v115 + v65 
    let v124 : string = v120 + v118 
    let v127 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v129 : string = v124 + v65 
    let v133 : string = v129 + v127 
    let v136 : string = $"    <SelfContained>true</SelfContained>"
    let v138 : string = v133 + v65 
    let v142 : string = v138 + v136 
    let v145 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v147 : string = v142 + v65 
    let v151 : string = v147 + v145 
    let v154 : string = $"    <OutputType>Exe</OutputType>"
    let v156 : string = v151 + v65 
    let v160 : string = v156 + v154 
    let v163 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v165 : string = v160 + v65 
    let v169 : string = v165 + v163 
    let v172 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v174 : string = v169 + v65 
    let v178 : string = v174 + v172 
    let v181 : string = $"</PropertyGroup>"
    let v183 : string = v178 + v65 
    let v187 : string = v183 + v181 
    let v190 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v192 : string = v187 + v65 
    let v196 : string = v192 + v190 
    let v199 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v201 : string = v196 + v65 
    let v205 : string = v201 + v199 
    let v208 : string = $"</PropertyGroup>"
    let v210 : string = v205 + v65 
    let v214 : string = v210 + v208 
    let v217 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v219 : string = v214 + v65 
    let v223 : string = v219 + v217 
    let v226 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v228 : string = v223 + v65 
    let v232 : string = v228 + v226 
    let v235 : string = $"</PropertyGroup>"
    let v237 : string = v232 + v65 
    let v241 : string = v237 + v235 
    let v244 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v246 : string = v241 + v65 
    let v250 : string = v246 + v244 
    let v253 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v255 : string = v250 + v65 
    let v259 : string = v255 + v253 
    let v262 : string = $"</PropertyGroup>"
    let v264 : string = v259 + v65 
    let v268 : string = v264 + v262 
    let v271 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v273 : string = v268 + v65 
    let v277 : string = v273 + v271 
    let v280 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v282 : string = v277 + v65 
    let v286 : string = v282 + v280 
    let v289 : string = $"</PropertyGroup>"
    let v291 : string = v286 + v65 
    let v295 : string = v291 + v289 
    let v298 : string = $"<ItemGroup>"
    let v300 : string = v295 + v65 
    let v304 : string = v300 + v298 
    let v307 : string = $"    {v32}"
    let v309 : string = v304 + v65 
    let v313 : string = v309 + v307 
    let v316 : string = $"    <Compile Include=\"{v9}\" />"
    let v318 : string = v313 + v65 
    let v322 : string = v318 + v316 
    let v325 : string = $"</ItemGroup>"
    let v327 : string = v322 + v65 
    let v331 : string = v327 + v325 
    let v334 : string = $"<ItemGroup>"
    let v336 : string = v331 + v65 
    let v340 : string = v336 + v334 
    let v343 : string = $"    {v55}"
    let v345 : string = v340 + v65 
    let v349 : string = v345 + v343 
    let v352 : string = $"</ItemGroup>"
    let v354 : string = v349 + v65 
    let v358 : string = v354 + v352 
    let v361 : string = $"</Project>"
    let v363 : string = v358 + v65 
    let v367 : string = v363 + v361 
    method70(v60, v367)
    v60
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US43 =
    US43_0(v0)
and method188 () : (chrono_DateTime<chrono_Utc> -> US43) =
    closure87()
and method189 () : string =
    let v0 : string = "hh:mm"
    v0
and method190 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method191 () : string =
    let v0 : string = "hhmm"
    v0
and method187 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v677 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v683 : System.DateTime = System.DateTime.UnixEpoch
    let v687 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v688 : System.DateTime = v687 v683
    let v692 : System.DateTimeKind = System.DateTimeKind.Local
    let v693 : System.DateTime = System.DateTime.SpecifyKind (v1, v692)
    let v697 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v698 : System.DateTime = v697 v693
    (* run_target_args'
    let v707 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v708 : (System.DateTime -> int64) = _.Ticks
    let v709 : int64 = v708 v698
    let _run_target_args'_v707 = v709 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v710 : (System.DateTime -> int64) = _.Ticks
    let v711 : int64 = v710 v698
    let _run_target_args'_v707 = v711 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v713 : int64 = null |> unbox<int64>
    let _run_target_args'_v707 = v713 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v716 : (System.DateTime -> int64) = _.Ticks
    let v717 : int64 = v716 v698
    let _run_target_args'_v707 = v717 
    #endif
#if FABLE_COMPILER_PYTHON
    let v718 : (System.DateTime -> int64) = _.Ticks
    let v719 : int64 = v718 v698
    let _run_target_args'_v707 = v719 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v720 : (System.DateTime -> int64) = _.Ticks
    let v721 : int64 = v720 v698
    let _run_target_args'_v707 = v721 
    #endif
#else
    let v722 : (System.DateTime -> int64) = _.Ticks
    let v723 : int64 = v722 v698
    let _run_target_args'_v707 = v723 
    #endif
    let v724 : int64 = _run_target_args'_v707 
    (* run_target_args'
    let v751 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v752 : (System.DateTime -> int64) = _.Ticks
    let v753 : int64 = v752 v688
    let _run_target_args'_v751 = v753 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v754 : (System.DateTime -> int64) = _.Ticks
    let v755 : int64 = v754 v688
    let _run_target_args'_v751 = v755 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v757 : int64 = null |> unbox<int64>
    let _run_target_args'_v751 = v757 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v760 : (System.DateTime -> int64) = _.Ticks
    let v761 : int64 = v760 v688
    let _run_target_args'_v751 = v761 
    #endif
#if FABLE_COMPILER_PYTHON
    let v762 : (System.DateTime -> int64) = _.Ticks
    let v763 : int64 = v762 v688
    let _run_target_args'_v751 = v763 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v764 : (System.DateTime -> int64) = _.Ticks
    let v765 : int64 = v764 v688
    let _run_target_args'_v751 = v765 
    #endif
#else
    let v766 : (System.DateTime -> int64) = _.Ticks
    let v767 : int64 = v766 v688
    let _run_target_args'_v751 = v767 
    #endif
    let v768 : int64 = _run_target_args'_v751 
    let v790 : int64 = v724 |> int64 
    let v794 : int64 = v768 |> int64 
    let v797 : int64 = v790 - v794
    let v798 : int64 = v797 / 10L
    let v799 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v800 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v798 v799 
    let v803 : (chrono_DateTime<chrono_Utc> -> US43) = method188()
    let v804 : US43 option = v800 |> Option.map v803 
    let v824 : US43 = US43_1
    let v825 : US43 = v804 |> Option.defaultValue v824 
    let v845 : US5 =
        match v825 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v829) -> (* Some *)
            let v830 : string = "$0.naive_utc()"
            let v831 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v829 v830 
            let v832 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v833 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v831 v832 
            let v834 : string = "%Y%m%d-%H%M-%S%f"
            let v835 : string = "r#\"" + v834 + "\"#"
            let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v835 
            let v837 : string = "$0.format($1).to_string()"
            let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v833, v836) v837 
            let v839 : string = "fable_library_rust::String_::fromString($0)"
            let v840 : string = Fable.Core.RustInterop.emitRustExpr v838 v839 
            let v841 : string = $"{v840.[0..17]}-{v840.[18..21]}-{v840.[22]}"
            US5_0(v841)
    let v849 : string =
        match v845 with
        | US5_1 -> (* None *)
            let v847 : string = ""
            v847
        | US5_0(v846) -> (* Some *)
            v846
    (* run_target_args'
    let v854 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v855 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v856 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v855 
    let _run_target_args'_v854 = v856 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v858 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v858 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v862 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v862 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v866 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v866 
    #endif
#if FABLE_COMPILER_PYTHON
    let v870 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v854 = v870 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v873 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v854 = v873 
    #endif
#else
    let v874 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v854 = v874 
    #endif
    let v875 : System.TimeZoneInfo = _run_target_args'_v854 
    (* run_target_args'
    let v891 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v898 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v899 : (System.DateTime -> int64) = _.Ticks
    let v900 : int64 = v899 v698
    let _run_target_args'_v898 = v900 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v901 : (System.DateTime -> int64) = _.Ticks
    let v902 : int64 = v901 v698
    let _run_target_args'_v898 = v902 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v904 : int64 = null |> unbox<int64>
    let _run_target_args'_v898 = v904 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v907 : (System.DateTime -> int64) = _.Ticks
    let v908 : int64 = v907 v698
    let _run_target_args'_v898 = v908 
    #endif
#if FABLE_COMPILER_PYTHON
    let v909 : (System.DateTime -> int64) = _.Ticks
    let v910 : int64 = v909 v698
    let _run_target_args'_v898 = v910 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v911 : (System.DateTime -> int64) = _.Ticks
    let v912 : int64 = v911 v698
    let _run_target_args'_v898 = v912 
    #endif
#else
    let v913 : (System.DateTime -> int64) = _.Ticks
    let v914 : int64 = v913 v698
    let _run_target_args'_v898 = v914 
    #endif
    let v915 : int64 = _run_target_args'_v898 
    let v936 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v937 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v698, v915) v936 
    let v939 : System.TimeSpan = v937 |> System.TimeSpan 
    let _run_target_args'_v891 = v939 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v948 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v949 : (System.DateTime -> int64) = _.Ticks
    let v950 : int64 = v949 v698
    let _run_target_args'_v948 = v950 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v951 : (System.DateTime -> int64) = _.Ticks
    let v952 : int64 = v951 v698
    let _run_target_args'_v948 = v952 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v954 : int64 = null |> unbox<int64>
    let _run_target_args'_v948 = v954 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v957 : (System.DateTime -> int64) = _.Ticks
    let v958 : int64 = v957 v698
    let _run_target_args'_v948 = v958 
    #endif
#if FABLE_COMPILER_PYTHON
    let v959 : (System.DateTime -> int64) = _.Ticks
    let v960 : int64 = v959 v698
    let _run_target_args'_v948 = v960 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v961 : (System.DateTime -> int64) = _.Ticks
    let v962 : int64 = v961 v698
    let _run_target_args'_v948 = v962 
    #endif
#else
    let v963 : (System.DateTime -> int64) = _.Ticks
    let v964 : int64 = v963 v698
    let _run_target_args'_v948 = v964 
    #endif
    let v965 : int64 = _run_target_args'_v948 
    let v986 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v987 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v698, v965) v986 
    let v989 : System.TimeSpan = v987 |> System.TimeSpan 
    let _run_target_args'_v891 = v989 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v993 : US3 = US3_2
    let v994 : US4 = US4_4(v993)
    let v995 : string = $"date_time.get_utc_offset / target: {v994}"
    let v996 : System.TimeSpan = failwith<System.TimeSpan> v995
    let _run_target_args'_v891 = v996 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1000 : US3 = US3_0
    let v1001 : US4 = US4_5(v1000)
    let v1002 : string = $"date_time.get_utc_offset / target: {v1001}"
    let v1003 : System.TimeSpan = failwith<System.TimeSpan> v1002
    let _run_target_args'_v891 = v1003 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1007 : US3 = US3_0
    let v1008 : US4 = US4_6(v1007)
    let v1009 : string = $"date_time.get_utc_offset / target: {v1008}"
    let v1010 : System.TimeSpan = failwith<System.TimeSpan> v1009
    let _run_target_args'_v891 = v1010 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1013 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1018 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1019 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1020 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1019 
    let _run_target_args'_v1018 = v1020 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1022 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1022 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1026 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1026 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1030 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1030 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1034 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1018 = v1034 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1037 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1018 = v1037 
    #endif
#else
    let v1038 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1018 = v1038 
    #endif
    let v1039 : System.TimeZoneInfo = _run_target_args'_v1018 
    let v1048 : (System.DateTime -> System.TimeSpan) = v1013 v1039
    let v1049 : System.TimeSpan = v1048 v698
    let _run_target_args'_v891 = v1049 
    #endif
#else
    let v1050 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1055 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1056 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1057 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1056 
    let _run_target_args'_v1055 = v1057 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1059 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1059 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1063 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1063 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1067 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1067 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1071 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1055 = v1071 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1074 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1055 = v1074 
    #endif
#else
    let v1075 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1055 = v1075 
    #endif
    let v1076 : System.TimeZoneInfo = _run_target_args'_v1055 
    let v1085 : (System.DateTime -> System.TimeSpan) = v1050 v1076
    let v1086 : System.TimeSpan = v1085 v698
    let _run_target_args'_v891 = v1086 
    #endif
    let v1087 : System.TimeSpan = _run_target_args'_v891 
    let v1103 : (System.TimeSpan -> int32) = _.Hours
    let v1104 : int32 = v1103 v1087
    let v1107 : bool = v1104 > 0
    let v1108 : uint8 =
        if v1107 then
            1uy
        else
            0uy
    let v1109 : string = method189()
    (* run_target_args'
    let v1169 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1170 : string = "$0.toString($1)"
    let v1171 : string = Fable.Core.RustInterop.emitRustExpr struct (v1087, v1109) v1170 
    let _run_target_args'_v1169 = v1171 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1172 : string = "$0.toString($1)"
    let v1173 : string = Fable.Core.RustInterop.emitRustExpr struct (v1087, v1109) v1172 
    let _run_target_args'_v1169 = v1173 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1174 : string = "$0.toString($1)"
    let v1175 : string = Fable.Core.RustInterop.emitRustExpr struct (v1087, v1109) v1174 
    let _run_target_args'_v1169 = v1175 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1176 : string = v1087.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1169 = v1176 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1177 : string = v1087.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1169 = v1177 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1179 : string = v1087.ToString v1109 
    let _run_target_args'_v1169 = v1179 
    #endif
#else
    let v1238 : string = v1087.ToString v1109 
    let _run_target_args'_v1169 = v1238 
    #endif
    let v1296 : string = _run_target_args'_v1169 
    let v1415 : string = $"{v1108}{v1296.[0..1]}{v1296.[3..4]}"
    let v1417 : (System.Guid -> string) = _.ToString()
    let v1418 : string = v1417 v0
    let v1421 : int32 = v849.Length
    let v1422 : int32 = v1415.Length
    let v1423 : int32 = v1421 + v1422
    let v1425 : (string -> int32) = String.length
    let v1426 : int32 = v1425 v1418
    let v1434 : int32 = v1423 |> int32 
    let v1447 : int32 = v1426 |> int32 
    let v1455 : int32 = v1447 - 1
    let v1457 : string = v1418.[int v1434..int v1455]
    let v1461 : string = $"{v849}{v1415}{v1457}"
    (* run_target_args'
    let v1466 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1468 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1468 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1472 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1472 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1476 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1466 = v1476 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1480 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1480 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1484 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1484 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1488 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1488 
    #endif
#else
    let v1492 : System.Guid = v1461 |> System.Guid 
    let _run_target_args'_v1466 = v1492 
    #endif
    let v1495 : System.Guid = _run_target_args'_v1466 
    let _run_target_args'_v677 = v1495 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1509 : System.DateTime = System.DateTime.UnixEpoch
    let v1513 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1514 : System.DateTime = v1513 v1509
    let v1518 : System.DateTimeKind = System.DateTimeKind.Local
    let v1519 : System.DateTime = System.DateTime.SpecifyKind (v1, v1518)
    let v1523 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1524 : System.DateTime = v1523 v1519
    (* run_target_args'
    let v1533 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1534 : (System.DateTime -> int64) = _.Ticks
    let v1535 : int64 = v1534 v1524
    let _run_target_args'_v1533 = v1535 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1536 : (System.DateTime -> int64) = _.Ticks
    let v1537 : int64 = v1536 v1524
    let _run_target_args'_v1533 = v1537 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1539 : int64 = null |> unbox<int64>
    let _run_target_args'_v1533 = v1539 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1542 : (System.DateTime -> int64) = _.Ticks
    let v1543 : int64 = v1542 v1524
    let _run_target_args'_v1533 = v1543 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1544 : (System.DateTime -> int64) = _.Ticks
    let v1545 : int64 = v1544 v1524
    let _run_target_args'_v1533 = v1545 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1546 : (System.DateTime -> int64) = _.Ticks
    let v1547 : int64 = v1546 v1524
    let _run_target_args'_v1533 = v1547 
    #endif
#else
    let v1548 : (System.DateTime -> int64) = _.Ticks
    let v1549 : int64 = v1548 v1524
    let _run_target_args'_v1533 = v1549 
    #endif
    let v1550 : int64 = _run_target_args'_v1533 
    (* run_target_args'
    let v1577 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1578 : (System.DateTime -> int64) = _.Ticks
    let v1579 : int64 = v1578 v1514
    let _run_target_args'_v1577 = v1579 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1580 : (System.DateTime -> int64) = _.Ticks
    let v1581 : int64 = v1580 v1514
    let _run_target_args'_v1577 = v1581 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1583 : int64 = null |> unbox<int64>
    let _run_target_args'_v1577 = v1583 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1586 : (System.DateTime -> int64) = _.Ticks
    let v1587 : int64 = v1586 v1514
    let _run_target_args'_v1577 = v1587 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1588 : (System.DateTime -> int64) = _.Ticks
    let v1589 : int64 = v1588 v1514
    let _run_target_args'_v1577 = v1589 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1590 : (System.DateTime -> int64) = _.Ticks
    let v1591 : int64 = v1590 v1514
    let _run_target_args'_v1577 = v1591 
    #endif
#else
    let v1592 : (System.DateTime -> int64) = _.Ticks
    let v1593 : int64 = v1592 v1514
    let _run_target_args'_v1577 = v1593 
    #endif
    let v1594 : int64 = _run_target_args'_v1577 
    let v1616 : int64 = v1550 |> int64 
    let v1620 : int64 = v1594 |> int64 
    let v1623 : int64 = v1616 - v1620
    let v1624 : int64 = v1623 / 10L
    let v1625 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1626 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1624 v1625 
    let v1629 : (chrono_DateTime<chrono_Utc> -> US43) = method188()
    let v1630 : US43 option = v1626 |> Option.map v1629 
    let v1650 : US43 = US43_1
    let v1651 : US43 = v1630 |> Option.defaultValue v1650 
    let v1671 : US5 =
        match v1651 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v1655) -> (* Some *)
            let v1656 : string = "$0.naive_utc()"
            let v1657 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1655 v1656 
            let v1658 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1659 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1657 v1658 
            let v1660 : string = "%Y%m%d-%H%M-%S%f"
            let v1661 : string = "r#\"" + v1660 + "\"#"
            let v1662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1661 
            let v1663 : string = "$0.format($1).to_string()"
            let v1664 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1659, v1662) v1663 
            let v1665 : string = "fable_library_rust::String_::fromString($0)"
            let v1666 : string = Fable.Core.RustInterop.emitRustExpr v1664 v1665 
            let v1667 : string = $"{v1666.[0..17]}-{v1666.[18..21]}-{v1666.[22]}"
            US5_0(v1667)
    let v1675 : string =
        match v1671 with
        | US5_1 -> (* None *)
            let v1673 : string = ""
            v1673
        | US5_0(v1672) -> (* Some *)
            v1672
    (* run_target_args'
    let v1680 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1681 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1682 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1681 
    let _run_target_args'_v1680 = v1682 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1684 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1684 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1688 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1692 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1692 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1696 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1680 = v1696 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1699 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1680 = v1699 
    #endif
#else
    let v1700 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1680 = v1700 
    #endif
    let v1701 : System.TimeZoneInfo = _run_target_args'_v1680 
    (* run_target_args'
    let v1717 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1724 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1725 : (System.DateTime -> int64) = _.Ticks
    let v1726 : int64 = v1725 v1524
    let _run_target_args'_v1724 = v1726 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1727 : (System.DateTime -> int64) = _.Ticks
    let v1728 : int64 = v1727 v1524
    let _run_target_args'_v1724 = v1728 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1730 : int64 = null |> unbox<int64>
    let _run_target_args'_v1724 = v1730 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1733 : (System.DateTime -> int64) = _.Ticks
    let v1734 : int64 = v1733 v1524
    let _run_target_args'_v1724 = v1734 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1735 : (System.DateTime -> int64) = _.Ticks
    let v1736 : int64 = v1735 v1524
    let _run_target_args'_v1724 = v1736 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1737 : (System.DateTime -> int64) = _.Ticks
    let v1738 : int64 = v1737 v1524
    let _run_target_args'_v1724 = v1738 
    #endif
#else
    let v1739 : (System.DateTime -> int64) = _.Ticks
    let v1740 : int64 = v1739 v1524
    let _run_target_args'_v1724 = v1740 
    #endif
    let v1741 : int64 = _run_target_args'_v1724 
    let v1762 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1763 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1524, v1741) v1762 
    let v1765 : System.TimeSpan = v1763 |> System.TimeSpan 
    let _run_target_args'_v1717 = v1765 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1774 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1775 : (System.DateTime -> int64) = _.Ticks
    let v1776 : int64 = v1775 v1524
    let _run_target_args'_v1774 = v1776 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1777 : (System.DateTime -> int64) = _.Ticks
    let v1778 : int64 = v1777 v1524
    let _run_target_args'_v1774 = v1778 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1780 : int64 = null |> unbox<int64>
    let _run_target_args'_v1774 = v1780 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1783 : (System.DateTime -> int64) = _.Ticks
    let v1784 : int64 = v1783 v1524
    let _run_target_args'_v1774 = v1784 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1785 : (System.DateTime -> int64) = _.Ticks
    let v1786 : int64 = v1785 v1524
    let _run_target_args'_v1774 = v1786 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1787 : (System.DateTime -> int64) = _.Ticks
    let v1788 : int64 = v1787 v1524
    let _run_target_args'_v1774 = v1788 
    #endif
#else
    let v1789 : (System.DateTime -> int64) = _.Ticks
    let v1790 : int64 = v1789 v1524
    let _run_target_args'_v1774 = v1790 
    #endif
    let v1791 : int64 = _run_target_args'_v1774 
    let v1812 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1813 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1524, v1791) v1812 
    let v1815 : System.TimeSpan = v1813 |> System.TimeSpan 
    let _run_target_args'_v1717 = v1815 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1819 : US3 = US3_2
    let v1820 : US4 = US4_4(v1819)
    let v1821 : string = $"date_time.get_utc_offset / target: {v1820}"
    let v1822 : System.TimeSpan = failwith<System.TimeSpan> v1821
    let _run_target_args'_v1717 = v1822 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1826 : US3 = US3_0
    let v1827 : US4 = US4_5(v1826)
    let v1828 : string = $"date_time.get_utc_offset / target: {v1827}"
    let v1829 : System.TimeSpan = failwith<System.TimeSpan> v1828
    let _run_target_args'_v1717 = v1829 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1833 : US3 = US3_0
    let v1834 : US4 = US4_6(v1833)
    let v1835 : string = $"date_time.get_utc_offset / target: {v1834}"
    let v1836 : System.TimeSpan = failwith<System.TimeSpan> v1835
    let _run_target_args'_v1717 = v1836 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1839 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1844 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1845 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1846 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1845 
    let _run_target_args'_v1844 = v1846 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1848 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1848 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1852 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1852 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1856 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1856 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1860 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1844 = v1860 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1863 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1844 = v1863 
    #endif
#else
    let v1864 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1844 = v1864 
    #endif
    let v1865 : System.TimeZoneInfo = _run_target_args'_v1844 
    let v1874 : (System.DateTime -> System.TimeSpan) = v1839 v1865
    let v1875 : System.TimeSpan = v1874 v1524
    let _run_target_args'_v1717 = v1875 
    #endif
#else
    let v1876 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1881 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1882 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1883 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1882 
    let _run_target_args'_v1881 = v1883 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1885 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1885 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1889 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1889 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1893 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1893 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1897 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1897 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1900 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1881 = v1900 
    #endif
#else
    let v1901 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1881 = v1901 
    #endif
    let v1902 : System.TimeZoneInfo = _run_target_args'_v1881 
    let v1911 : (System.DateTime -> System.TimeSpan) = v1876 v1902
    let v1912 : System.TimeSpan = v1911 v1524
    let _run_target_args'_v1717 = v1912 
    #endif
    let v1913 : System.TimeSpan = _run_target_args'_v1717 
    let v1929 : (System.TimeSpan -> int32) = _.Hours
    let v1930 : int32 = v1929 v1913
    let v1933 : bool = v1930 > 0
    let v1934 : uint8 =
        if v1933 then
            1uy
        else
            0uy
    let v1935 : string = method189()
    (* run_target_args'
    let v1995 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1996 : string = "$0.toString($1)"
    let v1997 : string = Fable.Core.RustInterop.emitRustExpr struct (v1913, v1935) v1996 
    let _run_target_args'_v1995 = v1997 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1998 : string = "$0.toString($1)"
    let v1999 : string = Fable.Core.RustInterop.emitRustExpr struct (v1913, v1935) v1998 
    let _run_target_args'_v1995 = v1999 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2000 : string = "$0.toString($1)"
    let v2001 : string = Fable.Core.RustInterop.emitRustExpr struct (v1913, v1935) v2000 
    let _run_target_args'_v1995 = v2001 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2002 : string = v1913.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1995 = v2002 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2003 : string = v1913.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1995 = v2003 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2005 : string = v1913.ToString v1935 
    let _run_target_args'_v1995 = v2005 
    #endif
#else
    let v2064 : string = v1913.ToString v1935 
    let _run_target_args'_v1995 = v2064 
    #endif
    let v2122 : string = _run_target_args'_v1995 
    let v2241 : string = $"{v1934}{v2122.[0..1]}{v2122.[3..4]}"
    let v2243 : (System.Guid -> string) = _.ToString()
    let v2244 : string = v2243 v0
    let v2247 : int32 = v1675.Length
    let v2248 : int32 = v2241.Length
    let v2249 : int32 = v2247 + v2248
    let v2251 : (string -> int32) = String.length
    let v2252 : int32 = v2251 v2244
    let v2260 : int32 = v2249 |> int32 
    let v2273 : int32 = v2252 |> int32 
    let v2281 : int32 = v2273 - 1
    let v2283 : string = v2244.[int v2260..int v2281]
    let v2287 : string = $"{v1675}{v2241}{v2283}"
    (* run_target_args'
    let v2292 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2294 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2294 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2298 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2298 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2302 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2292 = v2302 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2306 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2306 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2310 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2310 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2314 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2314 
    #endif
#else
    let v2318 : System.Guid = v2287 |> System.Guid 
    let _run_target_args'_v2292 = v2318 
    #endif
    let v2321 : System.Guid = _run_target_args'_v2292 
    let _run_target_args'_v677 = v2321 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2331 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v677 = v2331 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2334 : string = method190()
    let v2335 : bool = v2334 = ""
    let v2337 : string =
        if v2335 then
            let v2336 : string = "M-d-y hh:mm:ss tt"
            v2336
        else
            v2334
    let v2338 : (string -> string) = v1.ToString
    let v2339 : string = v2338 v2337
    (* run_target_args'
    let v2358 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2359 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2360 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2359 
    let _run_target_args'_v2358 = v2360 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2362 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2362 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2366 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2366 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2370 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2370 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2374 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2358 = v2374 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2377 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2358 = v2377 
    #endif
#else
    let v2378 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2358 = v2378 
    #endif
    let v2379 : System.TimeZoneInfo = _run_target_args'_v2358 
    (* run_target_args'
    let v2395 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2402 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2403 : (System.DateTime -> int64) = _.Ticks
    let v2404 : int64 = v2403 v1
    let _run_target_args'_v2402 = v2404 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2405 : (System.DateTime -> int64) = _.Ticks
    let v2406 : int64 = v2405 v1
    let _run_target_args'_v2402 = v2406 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2408 : int64 = null |> unbox<int64>
    let _run_target_args'_v2402 = v2408 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2411 : (System.DateTime -> int64) = _.Ticks
    let v2412 : int64 = v2411 v1
    let _run_target_args'_v2402 = v2412 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2413 : (System.DateTime -> int64) = _.Ticks
    let v2414 : int64 = v2413 v1
    let _run_target_args'_v2402 = v2414 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2415 : (System.DateTime -> int64) = _.Ticks
    let v2416 : int64 = v2415 v1
    let _run_target_args'_v2402 = v2416 
    #endif
#else
    let v2417 : (System.DateTime -> int64) = _.Ticks
    let v2418 : int64 = v2417 v1
    let _run_target_args'_v2402 = v2418 
    #endif
    let v2419 : int64 = _run_target_args'_v2402 
    let v2440 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2441 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2419) v2440 
    let v2443 : System.TimeSpan = v2441 |> System.TimeSpan 
    let _run_target_args'_v2395 = v2443 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2452 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2453 : (System.DateTime -> int64) = _.Ticks
    let v2454 : int64 = v2453 v1
    let _run_target_args'_v2452 = v2454 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2455 : (System.DateTime -> int64) = _.Ticks
    let v2456 : int64 = v2455 v1
    let _run_target_args'_v2452 = v2456 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2458 : int64 = null |> unbox<int64>
    let _run_target_args'_v2452 = v2458 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2461 : (System.DateTime -> int64) = _.Ticks
    let v2462 : int64 = v2461 v1
    let _run_target_args'_v2452 = v2462 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2463 : (System.DateTime -> int64) = _.Ticks
    let v2464 : int64 = v2463 v1
    let _run_target_args'_v2452 = v2464 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2465 : (System.DateTime -> int64) = _.Ticks
    let v2466 : int64 = v2465 v1
    let _run_target_args'_v2452 = v2466 
    #endif
#else
    let v2467 : (System.DateTime -> int64) = _.Ticks
    let v2468 : int64 = v2467 v1
    let _run_target_args'_v2452 = v2468 
    #endif
    let v2469 : int64 = _run_target_args'_v2452 
    let v2490 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2491 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2469) v2490 
    let v2493 : System.TimeSpan = v2491 |> System.TimeSpan 
    let _run_target_args'_v2395 = v2493 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2497 : US3 = US3_2
    let v2498 : US4 = US4_4(v2497)
    let v2499 : string = $"date_time.get_utc_offset / target: {v2498}"
    let v2500 : System.TimeSpan = failwith<System.TimeSpan> v2499
    let _run_target_args'_v2395 = v2500 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2504 : US3 = US3_0
    let v2505 : US4 = US4_5(v2504)
    let v2506 : string = $"date_time.get_utc_offset / target: {v2505}"
    let v2507 : System.TimeSpan = failwith<System.TimeSpan> v2506
    let _run_target_args'_v2395 = v2507 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2511 : US3 = US3_0
    let v2512 : US4 = US4_6(v2511)
    let v2513 : string = $"date_time.get_utc_offset / target: {v2512}"
    let v2514 : System.TimeSpan = failwith<System.TimeSpan> v2513
    let _run_target_args'_v2395 = v2514 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2517 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2522 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2523 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2524 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2523 
    let _run_target_args'_v2522 = v2524 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2526 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2526 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2530 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2530 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2534 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2534 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2538 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2522 = v2538 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2541 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2522 = v2541 
    #endif
#else
    let v2542 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2522 = v2542 
    #endif
    let v2543 : System.TimeZoneInfo = _run_target_args'_v2522 
    let v2552 : (System.DateTime -> System.TimeSpan) = v2517 v2543
    let v2553 : System.TimeSpan = v2552 v1
    let _run_target_args'_v2395 = v2553 
    #endif
#else
    let v2554 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2559 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2560 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2561 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2560 
    let _run_target_args'_v2559 = v2561 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2563 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2563 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2567 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2567 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2571 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2571 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2575 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2559 = v2575 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2578 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2559 = v2578 
    #endif
#else
    let v2579 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2559 = v2579 
    #endif
    let v2580 : System.TimeZoneInfo = _run_target_args'_v2559 
    let v2589 : (System.DateTime -> System.TimeSpan) = v2554 v2580
    let v2590 : System.TimeSpan = v2589 v1
    let _run_target_args'_v2395 = v2590 
    #endif
    let v2591 : System.TimeSpan = _run_target_args'_v2395 
    let v2607 : (System.TimeSpan -> int32) = _.Hours
    let v2608 : int32 = v2607 v2591
    let v2611 : bool = v2608 > 0
    let v2612 : uint8 =
        if v2611 then
            1uy
        else
            0uy
    let v2613 : string = method191()
    (* run_target_args'
    let v2673 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2674 : string = "$0.toString($1)"
    let v2675 : string = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2613) v2674 
    let _run_target_args'_v2673 = v2675 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2676 : string = "$0.toString($1)"
    let v2677 : string = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2613) v2676 
    let _run_target_args'_v2673 = v2677 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2678 : string = "$0.toString($1)"
    let v2679 : string = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2613) v2678 
    let _run_target_args'_v2673 = v2679 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2680 : string = v2591.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2673 = v2680 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2681 : string = v2591.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2673 = v2681 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2683 : string = v2591.ToString v2613 
    let _run_target_args'_v2673 = v2683 
    #endif
#else
    let v2742 : string = v2591.ToString v2613 
    let _run_target_args'_v2673 = v2742 
    #endif
    let v2800 : string = _run_target_args'_v2673 
    let v2919 : string = $"{v2612}{v2800}"
    let v2921 : (System.Guid -> string) = _.ToString()
    let v2922 : string = v2921 v0
    let v2925 : int32 = v2339.Length
    let v2926 : int32 = v2919.Length
    let v2927 : int32 = v2925 + v2926
    let v2929 : (string -> int32) = String.length
    let v2930 : int32 = v2929 v2922
    let v2938 : int32 = v2927 |> int32 
    let v2951 : int32 = v2930 |> int32 
    let v2959 : int32 = v2951 - 1
    let v2961 : string = v2922.[int v2938..int v2959]
    let v2965 : string = $"{v2339}{v2919}{v2961}"
    (* run_target_args'
    let v2970 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2972 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2972 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2976 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2976 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2980 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2970 = v2980 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2984 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2984 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2988 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2988 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2992 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2992 
    #endif
#else
    let v2996 : System.Guid = v2965 |> System.Guid 
    let _run_target_args'_v2970 = v2996 
    #endif
    let v2999 : System.Guid = _run_target_args'_v2970 
    let _run_target_args'_v677 = v2999 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3008 : string = method190()
    let v3009 : bool = v3008 = ""
    let v3011 : string =
        if v3009 then
            let v3010 : string = "M-d-y hh:mm:ss tt"
            v3010
        else
            v3008
    let v3012 : (string -> string) = v1.ToString
    let v3013 : string = v3012 v3011
    (* run_target_args'
    let v3032 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3033 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3034 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3033 
    let _run_target_args'_v3032 = v3034 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3036 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3036 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3040 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3040 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3044 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3044 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3048 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3032 = v3048 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3051 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3032 = v3051 
    #endif
#else
    let v3052 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3032 = v3052 
    #endif
    let v3053 : System.TimeZoneInfo = _run_target_args'_v3032 
    (* run_target_args'
    let v3069 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3076 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3077 : (System.DateTime -> int64) = _.Ticks
    let v3078 : int64 = v3077 v1
    let _run_target_args'_v3076 = v3078 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3079 : (System.DateTime -> int64) = _.Ticks
    let v3080 : int64 = v3079 v1
    let _run_target_args'_v3076 = v3080 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3082 : int64 = null |> unbox<int64>
    let _run_target_args'_v3076 = v3082 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3085 : (System.DateTime -> int64) = _.Ticks
    let v3086 : int64 = v3085 v1
    let _run_target_args'_v3076 = v3086 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3087 : (System.DateTime -> int64) = _.Ticks
    let v3088 : int64 = v3087 v1
    let _run_target_args'_v3076 = v3088 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3089 : (System.DateTime -> int64) = _.Ticks
    let v3090 : int64 = v3089 v1
    let _run_target_args'_v3076 = v3090 
    #endif
#else
    let v3091 : (System.DateTime -> int64) = _.Ticks
    let v3092 : int64 = v3091 v1
    let _run_target_args'_v3076 = v3092 
    #endif
    let v3093 : int64 = _run_target_args'_v3076 
    let v3114 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3115 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3093) v3114 
    let v3117 : System.TimeSpan = v3115 |> System.TimeSpan 
    let _run_target_args'_v3069 = v3117 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3126 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3127 : (System.DateTime -> int64) = _.Ticks
    let v3128 : int64 = v3127 v1
    let _run_target_args'_v3126 = v3128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3129 : (System.DateTime -> int64) = _.Ticks
    let v3130 : int64 = v3129 v1
    let _run_target_args'_v3126 = v3130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3132 : int64 = null |> unbox<int64>
    let _run_target_args'_v3126 = v3132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3135 : (System.DateTime -> int64) = _.Ticks
    let v3136 : int64 = v3135 v1
    let _run_target_args'_v3126 = v3136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3137 : (System.DateTime -> int64) = _.Ticks
    let v3138 : int64 = v3137 v1
    let _run_target_args'_v3126 = v3138 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3139 : (System.DateTime -> int64) = _.Ticks
    let v3140 : int64 = v3139 v1
    let _run_target_args'_v3126 = v3140 
    #endif
#else
    let v3141 : (System.DateTime -> int64) = _.Ticks
    let v3142 : int64 = v3141 v1
    let _run_target_args'_v3126 = v3142 
    #endif
    let v3143 : int64 = _run_target_args'_v3126 
    let v3164 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3165 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3143) v3164 
    let v3167 : System.TimeSpan = v3165 |> System.TimeSpan 
    let _run_target_args'_v3069 = v3167 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3171 : US3 = US3_2
    let v3172 : US4 = US4_4(v3171)
    let v3173 : string = $"date_time.get_utc_offset / target: {v3172}"
    let v3174 : System.TimeSpan = failwith<System.TimeSpan> v3173
    let _run_target_args'_v3069 = v3174 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3178 : US3 = US3_0
    let v3179 : US4 = US4_5(v3178)
    let v3180 : string = $"date_time.get_utc_offset / target: {v3179}"
    let v3181 : System.TimeSpan = failwith<System.TimeSpan> v3180
    let _run_target_args'_v3069 = v3181 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3185 : US3 = US3_0
    let v3186 : US4 = US4_6(v3185)
    let v3187 : string = $"date_time.get_utc_offset / target: {v3186}"
    let v3188 : System.TimeSpan = failwith<System.TimeSpan> v3187
    let _run_target_args'_v3069 = v3188 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3191 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3196 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3197 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3198 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3197 
    let _run_target_args'_v3196 = v3198 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3200 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3200 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3204 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3204 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3208 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3208 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3212 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3196 = v3212 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3215 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3196 = v3215 
    #endif
#else
    let v3216 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3196 = v3216 
    #endif
    let v3217 : System.TimeZoneInfo = _run_target_args'_v3196 
    let v3226 : (System.DateTime -> System.TimeSpan) = v3191 v3217
    let v3227 : System.TimeSpan = v3226 v1
    let _run_target_args'_v3069 = v3227 
    #endif
#else
    let v3228 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3233 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3234 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3235 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3234 
    let _run_target_args'_v3233 = v3235 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3237 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3237 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3241 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3241 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3245 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3245 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3249 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3233 = v3249 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3252 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3233 = v3252 
    #endif
#else
    let v3253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3233 = v3253 
    #endif
    let v3254 : System.TimeZoneInfo = _run_target_args'_v3233 
    let v3263 : (System.DateTime -> System.TimeSpan) = v3228 v3254
    let v3264 : System.TimeSpan = v3263 v1
    let _run_target_args'_v3069 = v3264 
    #endif
    let v3265 : System.TimeSpan = _run_target_args'_v3069 
    let v3281 : (System.TimeSpan -> int32) = _.Hours
    let v3282 : int32 = v3281 v3265
    let v3285 : bool = v3282 > 0
    let v3286 : uint8 =
        if v3285 then
            1uy
        else
            0uy
    let v3287 : string = method191()
    (* run_target_args'
    let v3347 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3348 : string = "$0.toString($1)"
    let v3349 : string = Fable.Core.RustInterop.emitRustExpr struct (v3265, v3287) v3348 
    let _run_target_args'_v3347 = v3349 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3350 : string = "$0.toString($1)"
    let v3351 : string = Fable.Core.RustInterop.emitRustExpr struct (v3265, v3287) v3350 
    let _run_target_args'_v3347 = v3351 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3352 : string = "$0.toString($1)"
    let v3353 : string = Fable.Core.RustInterop.emitRustExpr struct (v3265, v3287) v3352 
    let _run_target_args'_v3347 = v3353 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3354 : string = v3265.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3347 = v3354 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3355 : string = v3265.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3347 = v3355 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3357 : string = v3265.ToString v3287 
    let _run_target_args'_v3347 = v3357 
    #endif
#else
    let v3416 : string = v3265.ToString v3287 
    let _run_target_args'_v3347 = v3416 
    #endif
    let v3474 : string = _run_target_args'_v3347 
    let v3593 : string = $"{v3286}{v3474}"
    let v3595 : (System.Guid -> string) = _.ToString()
    let v3596 : string = v3595 v0
    let v3599 : int32 = v3013.Length
    let v3600 : int32 = v3593.Length
    let v3601 : int32 = v3599 + v3600
    let v3603 : (string -> int32) = String.length
    let v3604 : int32 = v3603 v3596
    let v3612 : int32 = v3601 |> int32 
    let v3625 : int32 = v3604 |> int32 
    let v3633 : int32 = v3625 - 1
    let v3635 : string = v3596.[int v3612..int v3633]
    let v3639 : string = $"{v3013}{v3593}{v3635}"
    (* run_target_args'
    let v3644 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3646 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3646 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3650 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3650 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3654 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3644 = v3654 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3658 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3658 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3662 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3666 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3666 
    #endif
#else
    let v3670 : System.Guid = v3639 |> System.Guid 
    let _run_target_args'_v3644 = v3670 
    #endif
    let v3673 : System.Guid = _run_target_args'_v3644 
    let _run_target_args'_v677 = v3673 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3682 : string = method190()
    let v3683 : bool = v3682 = ""
    let v3685 : string =
        if v3683 then
            let v3684 : string = "M-d-y hh:mm:ss tt"
            v3684
        else
            v3682
    let v3686 : (string -> string) = v1.ToString
    let v3687 : string = v3686 v3685
    (* run_target_args'
    let v3706 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3707 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3708 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3707 
    let _run_target_args'_v3706 = v3708 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3710 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3710 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3714 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3714 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3718 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3718 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3722 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3706 = v3722 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3725 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3706 = v3725 
    #endif
#else
    let v3726 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3706 = v3726 
    #endif
    let v3727 : System.TimeZoneInfo = _run_target_args'_v3706 
    (* run_target_args'
    let v3743 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3750 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3751 : (System.DateTime -> int64) = _.Ticks
    let v3752 : int64 = v3751 v1
    let _run_target_args'_v3750 = v3752 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3753 : (System.DateTime -> int64) = _.Ticks
    let v3754 : int64 = v3753 v1
    let _run_target_args'_v3750 = v3754 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3756 : int64 = null |> unbox<int64>
    let _run_target_args'_v3750 = v3756 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3759 : (System.DateTime -> int64) = _.Ticks
    let v3760 : int64 = v3759 v1
    let _run_target_args'_v3750 = v3760 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3761 : (System.DateTime -> int64) = _.Ticks
    let v3762 : int64 = v3761 v1
    let _run_target_args'_v3750 = v3762 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3763 : (System.DateTime -> int64) = _.Ticks
    let v3764 : int64 = v3763 v1
    let _run_target_args'_v3750 = v3764 
    #endif
#else
    let v3765 : (System.DateTime -> int64) = _.Ticks
    let v3766 : int64 = v3765 v1
    let _run_target_args'_v3750 = v3766 
    #endif
    let v3767 : int64 = _run_target_args'_v3750 
    let v3788 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3789 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3767) v3788 
    let v3791 : System.TimeSpan = v3789 |> System.TimeSpan 
    let _run_target_args'_v3743 = v3791 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3800 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3801 : (System.DateTime -> int64) = _.Ticks
    let v3802 : int64 = v3801 v1
    let _run_target_args'_v3800 = v3802 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3803 : (System.DateTime -> int64) = _.Ticks
    let v3804 : int64 = v3803 v1
    let _run_target_args'_v3800 = v3804 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3806 : int64 = null |> unbox<int64>
    let _run_target_args'_v3800 = v3806 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3809 : (System.DateTime -> int64) = _.Ticks
    let v3810 : int64 = v3809 v1
    let _run_target_args'_v3800 = v3810 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3811 : (System.DateTime -> int64) = _.Ticks
    let v3812 : int64 = v3811 v1
    let _run_target_args'_v3800 = v3812 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3813 : (System.DateTime -> int64) = _.Ticks
    let v3814 : int64 = v3813 v1
    let _run_target_args'_v3800 = v3814 
    #endif
#else
    let v3815 : (System.DateTime -> int64) = _.Ticks
    let v3816 : int64 = v3815 v1
    let _run_target_args'_v3800 = v3816 
    #endif
    let v3817 : int64 = _run_target_args'_v3800 
    let v3838 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3839 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3817) v3838 
    let v3841 : System.TimeSpan = v3839 |> System.TimeSpan 
    let _run_target_args'_v3743 = v3841 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3845 : US3 = US3_2
    let v3846 : US4 = US4_4(v3845)
    let v3847 : string = $"date_time.get_utc_offset / target: {v3846}"
    let v3848 : System.TimeSpan = failwith<System.TimeSpan> v3847
    let _run_target_args'_v3743 = v3848 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3852 : US3 = US3_0
    let v3853 : US4 = US4_5(v3852)
    let v3854 : string = $"date_time.get_utc_offset / target: {v3853}"
    let v3855 : System.TimeSpan = failwith<System.TimeSpan> v3854
    let _run_target_args'_v3743 = v3855 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3859 : US3 = US3_0
    let v3860 : US4 = US4_6(v3859)
    let v3861 : string = $"date_time.get_utc_offset / target: {v3860}"
    let v3862 : System.TimeSpan = failwith<System.TimeSpan> v3861
    let _run_target_args'_v3743 = v3862 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3865 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3870 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3871 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3872 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3871 
    let _run_target_args'_v3870 = v3872 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3874 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3874 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3878 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3878 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3882 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3882 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3886 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3870 = v3886 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3889 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3870 = v3889 
    #endif
#else
    let v3890 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3870 = v3890 
    #endif
    let v3891 : System.TimeZoneInfo = _run_target_args'_v3870 
    let v3900 : (System.DateTime -> System.TimeSpan) = v3865 v3891
    let v3901 : System.TimeSpan = v3900 v1
    let _run_target_args'_v3743 = v3901 
    #endif
#else
    let v3902 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3907 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3908 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3909 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3908 
    let _run_target_args'_v3907 = v3909 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3911 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3911 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3915 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3915 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3919 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3919 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3907 = v3923 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3926 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3907 = v3926 
    #endif
#else
    let v3927 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3907 = v3927 
    #endif
    let v3928 : System.TimeZoneInfo = _run_target_args'_v3907 
    let v3937 : (System.DateTime -> System.TimeSpan) = v3902 v3928
    let v3938 : System.TimeSpan = v3937 v1
    let _run_target_args'_v3743 = v3938 
    #endif
    let v3939 : System.TimeSpan = _run_target_args'_v3743 
    let v3955 : (System.TimeSpan -> int32) = _.Hours
    let v3956 : int32 = v3955 v3939
    let v3959 : bool = v3956 > 0
    let v3960 : uint8 =
        if v3959 then
            1uy
        else
            0uy
    let v3961 : string = method191()
    (* run_target_args'
    let v4021 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4022 : string = "$0.toString($1)"
    let v4023 : string = Fable.Core.RustInterop.emitRustExpr struct (v3939, v3961) v4022 
    let _run_target_args'_v4021 = v4023 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4024 : string = "$0.toString($1)"
    let v4025 : string = Fable.Core.RustInterop.emitRustExpr struct (v3939, v3961) v4024 
    let _run_target_args'_v4021 = v4025 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4026 : string = "$0.toString($1)"
    let v4027 : string = Fable.Core.RustInterop.emitRustExpr struct (v3939, v3961) v4026 
    let _run_target_args'_v4021 = v4027 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4028 : string = v3939.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4021 = v4028 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4029 : string = v3939.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4021 = v4029 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4031 : string = v3939.ToString v3961 
    let _run_target_args'_v4021 = v4031 
    #endif
#else
    let v4090 : string = v3939.ToString v3961 
    let _run_target_args'_v4021 = v4090 
    #endif
    let v4148 : string = _run_target_args'_v4021 
    let v4267 : string = $"{v3960}{v4148}"
    let v4269 : (System.Guid -> string) = _.ToString()
    let v4270 : string = v4269 v0
    let v4273 : int32 = v3687.Length
    let v4274 : int32 = v4267.Length
    let v4275 : int32 = v4273 + v4274
    let v4277 : (string -> int32) = String.length
    let v4278 : int32 = v4277 v4270
    let v4286 : int32 = v4275 |> int32 
    let v4299 : int32 = v4278 |> int32 
    let v4307 : int32 = v4299 - 1
    let v4309 : string = v4270.[int v4286..int v4307]
    let v4313 : string = $"{v3687}{v4267}{v4309}"
    (* run_target_args'
    let v4318 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4320 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4320 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4324 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4328 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4318 = v4328 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4332 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4332 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4336 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4336 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4340 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4340 
    #endif
#else
    let v4344 : System.Guid = v4313 |> System.Guid 
    let _run_target_args'_v4318 = v4344 
    #endif
    let v4347 : System.Guid = _run_target_args'_v4318 
    let _run_target_args'_v677 = v4347 
    #endif
#else
    let v4356 : string = method190()
    let v4357 : bool = v4356 = ""
    let v4359 : string =
        if v4357 then
            let v4358 : string = "M-d-y hh:mm:ss tt"
            v4358
        else
            v4356
    let v4360 : (string -> string) = v1.ToString
    let v4361 : string = v4360 v4359
    (* run_target_args'
    let v4380 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4381 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4382 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4381 
    let _run_target_args'_v4380 = v4382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4384 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4384 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4388 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4388 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4392 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4396 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4380 = v4396 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4399 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4380 = v4399 
    #endif
#else
    let v4400 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4380 = v4400 
    #endif
    let v4401 : System.TimeZoneInfo = _run_target_args'_v4380 
    (* run_target_args'
    let v4417 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v4424 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4425 : (System.DateTime -> int64) = _.Ticks
    let v4426 : int64 = v4425 v1
    let _run_target_args'_v4424 = v4426 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4427 : (System.DateTime -> int64) = _.Ticks
    let v4428 : int64 = v4427 v1
    let _run_target_args'_v4424 = v4428 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4430 : int64 = null |> unbox<int64>
    let _run_target_args'_v4424 = v4430 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4433 : (System.DateTime -> int64) = _.Ticks
    let v4434 : int64 = v4433 v1
    let _run_target_args'_v4424 = v4434 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4435 : (System.DateTime -> int64) = _.Ticks
    let v4436 : int64 = v4435 v1
    let _run_target_args'_v4424 = v4436 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4437 : (System.DateTime -> int64) = _.Ticks
    let v4438 : int64 = v4437 v1
    let _run_target_args'_v4424 = v4438 
    #endif
#else
    let v4439 : (System.DateTime -> int64) = _.Ticks
    let v4440 : int64 = v4439 v1
    let _run_target_args'_v4424 = v4440 
    #endif
    let v4441 : int64 = _run_target_args'_v4424 
    let v4462 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4463 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4441) v4462 
    let v4465 : System.TimeSpan = v4463 |> System.TimeSpan 
    let _run_target_args'_v4417 = v4465 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4474 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4475 : (System.DateTime -> int64) = _.Ticks
    let v4476 : int64 = v4475 v1
    let _run_target_args'_v4474 = v4476 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4477 : (System.DateTime -> int64) = _.Ticks
    let v4478 : int64 = v4477 v1
    let _run_target_args'_v4474 = v4478 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4480 : int64 = null |> unbox<int64>
    let _run_target_args'_v4474 = v4480 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4483 : (System.DateTime -> int64) = _.Ticks
    let v4484 : int64 = v4483 v1
    let _run_target_args'_v4474 = v4484 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4485 : (System.DateTime -> int64) = _.Ticks
    let v4486 : int64 = v4485 v1
    let _run_target_args'_v4474 = v4486 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4487 : (System.DateTime -> int64) = _.Ticks
    let v4488 : int64 = v4487 v1
    let _run_target_args'_v4474 = v4488 
    #endif
#else
    let v4489 : (System.DateTime -> int64) = _.Ticks
    let v4490 : int64 = v4489 v1
    let _run_target_args'_v4474 = v4490 
    #endif
    let v4491 : int64 = _run_target_args'_v4474 
    let v4512 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4513 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4491) v4512 
    let v4515 : System.TimeSpan = v4513 |> System.TimeSpan 
    let _run_target_args'_v4417 = v4515 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4519 : US3 = US3_2
    let v4520 : US4 = US4_4(v4519)
    let v4521 : string = $"date_time.get_utc_offset / target: {v4520}"
    let v4522 : System.TimeSpan = failwith<System.TimeSpan> v4521
    let _run_target_args'_v4417 = v4522 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4526 : US3 = US3_0
    let v4527 : US4 = US4_5(v4526)
    let v4528 : string = $"date_time.get_utc_offset / target: {v4527}"
    let v4529 : System.TimeSpan = failwith<System.TimeSpan> v4528
    let _run_target_args'_v4417 = v4529 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4533 : US3 = US3_0
    let v4534 : US4 = US4_6(v4533)
    let v4535 : string = $"date_time.get_utc_offset / target: {v4534}"
    let v4536 : System.TimeSpan = failwith<System.TimeSpan> v4535
    let _run_target_args'_v4417 = v4536 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4539 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4544 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4545 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4546 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4545 
    let _run_target_args'_v4544 = v4546 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4548 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4548 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4552 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4552 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4556 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4556 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4560 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4544 = v4560 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4563 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4544 = v4563 
    #endif
#else
    let v4564 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4544 = v4564 
    #endif
    let v4565 : System.TimeZoneInfo = _run_target_args'_v4544 
    let v4574 : (System.DateTime -> System.TimeSpan) = v4539 v4565
    let v4575 : System.TimeSpan = v4574 v1
    let _run_target_args'_v4417 = v4575 
    #endif
#else
    let v4576 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4581 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4582 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4583 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4582 
    let _run_target_args'_v4581 = v4583 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4585 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4585 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4589 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4589 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4597 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4581 = v4597 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4600 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4581 = v4600 
    #endif
#else
    let v4601 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4581 = v4601 
    #endif
    let v4602 : System.TimeZoneInfo = _run_target_args'_v4581 
    let v4611 : (System.DateTime -> System.TimeSpan) = v4576 v4602
    let v4612 : System.TimeSpan = v4611 v1
    let _run_target_args'_v4417 = v4612 
    #endif
    let v4613 : System.TimeSpan = _run_target_args'_v4417 
    let v4629 : (System.TimeSpan -> int32) = _.Hours
    let v4630 : int32 = v4629 v4613
    let v4633 : bool = v4630 > 0
    let v4634 : uint8 =
        if v4633 then
            1uy
        else
            0uy
    let v4635 : string = method191()
    (* run_target_args'
    let v4695 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4696 : string = "$0.toString($1)"
    let v4697 : string = Fable.Core.RustInterop.emitRustExpr struct (v4613, v4635) v4696 
    let _run_target_args'_v4695 = v4697 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4698 : string = "$0.toString($1)"
    let v4699 : string = Fable.Core.RustInterop.emitRustExpr struct (v4613, v4635) v4698 
    let _run_target_args'_v4695 = v4699 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4700 : string = "$0.toString($1)"
    let v4701 : string = Fable.Core.RustInterop.emitRustExpr struct (v4613, v4635) v4700 
    let _run_target_args'_v4695 = v4701 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4702 : string = v4613.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4695 = v4702 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4703 : string = v4613.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4695 = v4703 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4705 : string = v4613.ToString v4635 
    let _run_target_args'_v4695 = v4705 
    #endif
#else
    let v4764 : string = v4613.ToString v4635 
    let _run_target_args'_v4695 = v4764 
    #endif
    let v4822 : string = _run_target_args'_v4695 
    let v4941 : string = $"{v4634}{v4822}"
    let v4943 : (System.Guid -> string) = _.ToString()
    let v4944 : string = v4943 v0
    let v4947 : int32 = v4361.Length
    let v4948 : int32 = v4941.Length
    let v4949 : int32 = v4947 + v4948
    let v4951 : (string -> int32) = String.length
    let v4952 : int32 = v4951 v4944
    let v4960 : int32 = v4949 |> int32 
    let v4973 : int32 = v4952 |> int32 
    let v4981 : int32 = v4973 - 1
    let v4983 : string = v4944.[int v4960..int v4981]
    let v4987 : string = $"{v4361}{v4941}{v4983}"
    (* run_target_args'
    let v4992 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4994 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v4994 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4998 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v4998 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5002 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4992 = v5002 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5006 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5006 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5010 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5010 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5014 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5014 
    #endif
#else
    let v5018 : System.Guid = v4987 |> System.Guid 
    let _run_target_args'_v4992 = v5018 
    #endif
    let v5021 : System.Guid = _run_target_args'_v4992 
    let _run_target_args'_v677 = v5021 
    #endif
    let v5030 : System.Guid = _run_target_args'_v677 
    v5030
and method192 (v0 : string, v1 : string) : unit =
    let v2 : bool = method36(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method72(v0)
        ()
    let v5 : string option = method38(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method36(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method72(v9)
        ()
    let v15 : bool = method36(v1)
    let v25 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method43(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v25 then
        let v26 : bool = true
        method81(v26, v1)
    let v27 : bool = method36(v1)
    let v28 : bool = v27 = false
    if v28 then
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v31 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v30 
        let v32 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v33 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v32 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v34 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method194 () : string =
    let v0 : string = "("
    v0
and method195 () : string =
    let v0 : string = " "
    v0
and method198 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "is_error"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v73 : string =
        if v8 then
            let v71 : string = "true"
            v71
        else
            let v72 : string = "false"
            v72
    let v75 : string = $"{v73}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "retry"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "result"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v220 : string = $"{v10}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v13, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v238 : string = ", "
    let v239 : string = $"{v238}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v256 : string = $"{v11}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v13, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v274 : string = " }"
    let v275 : string = $"{v274}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v13, v275)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v291 : string = v13.l0
    let v292 : int64 = v0.l0
    let v295 : string = " "
    let v296 : string = v6 + v295 
    let v300 : string = v296 + v7 
    let v305 : string = " #"
    let v306 : string = v300 + v305 
    let v310 : (int64 -> string) = _.ToString()
    let v311 : string = v310 v292
    let v315 : string = v306 + v311 
    let v319 : string = v315 + v295 
    let v324 : string = "common.retry_fn' / loop"
    let v325 : string = v319 + v324 
    let v330 : string = " / "
    let v331 : string = v325 + v330 
    let v335 : string = v331 + v291 
    method16(v335)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure2()
        let v23 : unit = (fun () -> v22 (); v21) ()
        let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
        let v62 : string = method8(v44, v45, v46, v47, v48, v49)
        let v63 : string = method12()
        let v64 : string = $"{v1}/{v0}"
        let v65 : string = method198(v44, v45, v46, v47, v48, v49, v62, v63, v4, v64, v2, v3)
        method17(v65)
and method197 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method91(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US44 =
        if v11 then
            US44_0(v9, v10)
        else
            US44_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US44_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US44_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v89 : unit = ()
        let v90 : (unit -> unit) = closure88(v0, v8, v23, v24, v22)
        let v91 : unit = (fun () -> v90 (); v89) ()
        let v153 : uint8 = v8 + 1uy
        method197(v0, v1, v2, v3, v4, v5, v6, v7, v153)
and method196 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method197(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method193 (v0 : US39, v1 : string, v2 : string, v3 : string, v4 : US13) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    (* run_target_args'
    let v23 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "cfg!(windows)"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let _run_target_args'_v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "cfg!(windows)"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let _run_target_args'_v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "cfg!(windows)"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let _run_target_args'_v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : US3 = US3_0
    let v31 : US4 = US4_5(v30)
    let v32 : string = $"platform.is_windows / target: {v31}"
    let v33 : bool = failwith<bool> v32
    let _run_target_args'_v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : US3 = US3_0
    let v35 : US4 = US4_6(v34)
    let v36 : string = $"platform.is_windows / target: {v35}"
    let v37 : bool = failwith<bool> v36
    let _run_target_args'_v23 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v39 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v40 : bool = v39 v38
    let _run_target_args'_v23 = v40 
    #endif
#else
    let v41 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v42 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v43 : bool = v42 v41
    let _run_target_args'_v23 = v43 
    #endif
    let v44 : bool = _run_target_args'_v23 
    let v55 : string =
        if v44 then
            let v53 : string = "_WINDOWS"
            v53
        else
            let v54 : string = "_LINUX"
            v54
    let v56 : string = $" --define {v55}"
    let v268 : string =
        match v0 with
        | US39_1 -> (* None *)
            let v266 : string = ""
            v266
        | US39_0(v57) -> (* Some *)
            let v59 : string = Unchecked.defaultof<_>
            let v63 : string = Unchecked.defaultof<_>
            let v68 : bool =
                match v57 with
                | US40_0(v66) -> (* Wasm *)
                    let v67 : bool = v59 = v66
                    v67
                | _ ->
                    false
            let v157 : US5 =
                if v68 then
                    let v69 : string = "Wasm"
                    US5_0(v69)
                else
                    (* run_target_args'
                    let v73 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v74 : string = method194()
                    let _run_target_args'_v73 = v74 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : string = method194()
                    let _run_target_args'_v73 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : string = method194()
                    let _run_target_args'_v73 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v77 : string = method195()
                    let _run_target_args'_v73 = v77 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v78 : string = method195()
                    let _run_target_args'_v73 = v78 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v79 : string = method195()
                    let _run_target_args'_v73 = v79 
                    #endif
#else
                    let v80 : string = method195()
                    let _run_target_args'_v73 = v80 
                    #endif
                    let v81 : string = _run_target_args'_v73 
                    let v85 : string = method13()
                    let v86 : Mut3 = {l0 = v85} : Mut3
                    let v89 : US40 = US40_0(v59)
                    let v90 : string = $"%A{v89}"
                    let v95 : string = $"{v90}"
                    let v103 : unit = ()
                    let v104 : (unit -> unit) = closure7(v86, v95)
                    let v105 : unit = (fun () -> v104 (); v103) ()
                    let v111 : string = v86.l0
                    let v118 : (string []) = v111.Split v81 
                    let v122 : string = v118.[int 0]
                    let v125 : string = method13()
                    let v126 : Mut3 = {l0 = v125} : Mut3
                    let v128 : string = $"%A{v57}"
                    let v132 : string = $"{v128}"
                    let v140 : unit = ()
                    let v141 : (unit -> unit) = closure7(v126, v132)
                    let v142 : unit = (fun () -> v141 (); v140) ()
                    let v148 : string = v126.l0
                    let v150 : bool = v148.StartsWith (v122, false, null)
                    if v150 then
                        let v153 : string = "Wasm"
                        US5_0(v153)
                    else
                        US5_1
            let v258 : US5 =
                match v157 with
                | US5_1 -> (* None *)
                    let v162 : bool =
                        match v57 with
                        | US40_1(v160) -> (* Contract *)
                            let v161 : bool = v63 = v160
                            v161
                        | _ ->
                            false
                    let v251 : US5 =
                        if v162 then
                            let v163 : string = "Contract"
                            US5_0(v163)
                        else
                            (* run_target_args'
                            let v167 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v168 : string = method194()
                            let _run_target_args'_v167 = v168 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v169 : string = method194()
                            let _run_target_args'_v167 = v169 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v170 : string = method194()
                            let _run_target_args'_v167 = v170 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v171 : string = method195()
                            let _run_target_args'_v167 = v171 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v172 : string = method195()
                            let _run_target_args'_v167 = v172 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v173 : string = method195()
                            let _run_target_args'_v167 = v173 
                            #endif
#else
                            let v174 : string = method195()
                            let _run_target_args'_v167 = v174 
                            #endif
                            let v175 : string = _run_target_args'_v167 
                            let v179 : string = method13()
                            let v180 : Mut3 = {l0 = v179} : Mut3
                            let v183 : US40 = US40_1(v63)
                            let v184 : string = $"%A{v183}"
                            let v189 : string = $"{v184}"
                            let v197 : unit = ()
                            let v198 : (unit -> unit) = closure7(v180, v189)
                            let v199 : unit = (fun () -> v198 (); v197) ()
                            let v205 : string = v180.l0
                            let v212 : (string []) = v205.Split v175 
                            let v216 : string = v212.[int 0]
                            let v219 : string = method13()
                            let v220 : Mut3 = {l0 = v219} : Mut3
                            let v222 : string = $"%A{v57}"
                            let v226 : string = $"{v222}"
                            let v234 : unit = ()
                            let v235 : (unit -> unit) = closure7(v220, v226)
                            let v236 : unit = (fun () -> v235 (); v234) ()
                            let v242 : string = v220.l0
                            let v244 : bool = v242.StartsWith (v216, false, null)
                            if v244 then
                                let v247 : string = "Contract"
                                US5_0(v247)
                            else
                                US5_1
                    match v251 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v252) -> (* Some *)
                        US5_0(v252)
                | US5_0(v158) -> (* Some *)
                    US5_0(v158)
            let v262 : string =
                match v258 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v259) -> (* Some *)
                    v259
            let v263 : (unit -> string) = v262.ToUpper
            let v264 : string = v263 ()
            let v265 : string = $" --define {v264}"
            v265
    let v269 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v56}{v268}"
    let v281 : Result<string, string> =
        match v4 with
        | US13_1(v275) -> (* Error *)
            let v277 : Result<string, string> = Error v275 
            v277
        | US13_0(v270) -> (* Ok *)
            let v272 : Result<string, string> = Ok v270 
            v272
    (* run_target_args'
    let v283 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v284 : string = "$0.ok()"
    let v285 : string option = Fable.Core.RustInterop.emitRustExpr v281 v284 
    let _run_target_args'_v283 = v285 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v286 : string = "$0.ok()"
    let v287 : string option = Fable.Core.RustInterop.emitRustExpr v281 v286 
    let _run_target_args'_v283 = v287 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v288 : string = "$0.ok()"
    let v289 : string option = Fable.Core.RustInterop.emitRustExpr v281 v288 
    let _run_target_args'_v283 = v289 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v290 : string option = match v281 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v283 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v291 : string option = match v281 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v283 = v291 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v292 : string option = match v281 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v283 = v292 
    #endif
#else
    let v293 : string option = match v281 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v283 = v293 
    #endif
    let v294 : string option = _run_target_args'_v283 
    let v297 : uint8 = 3uy
    let v298 : bool = true
    method196(v297, v269, v6, v9, v11, v15, v298, v294)
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "dotnet_fable_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_rust / dotnet fable error"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method199(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method200 () : (std_string_String -> bool) =
    closure90()
and method201 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method202 () : string =
    let v0 : string = "("
    v0
and method203 () : string =
    let v0 : string = "("
    v0
and method205 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v50 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v58 
    #endif
#else
    let v62 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v62 
    #endif
    let v65 : std_string_String = _run_target_args'_v42 
    let v74 : string = "true; let _capture_move = (move || { //"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "Box::new($0)"
    let v77 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v65 v76 
    let v78 : string = "Box::leak($0)"
    let v79 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "$0"
    let v81 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let v82 : string = $"$0.captures_iter(v79)"
    let v83 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "true; let _regex_captures : Vec<_> = v83.map(|x| { //"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = $"x"
    let v87 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "Box::new($0)"
    let v89 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "Box::leak($0)"
    let v91 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = $"$0.capture_names()"
    let v93 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v92 
    let v94 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v93.map(|x| { //"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "x.unwrap_or(\"\").to_string().into()"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr () v96 
    let v98 : string = "$0.clone()"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = $"v91.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v103 : (string * string) = v99, v101 
    let v106 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v107 : bool = Fable.Core.RustInterop.emitRustExpr v103 v106 
    let v108 : string = "_regex_captures"
    let v109 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "true; $0 }).collect::<Vec<_>>()"
    let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "_regex_captures"
    let v113 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = "true; $0 })()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = "_capture_move"
    let v117 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v116 
    v117
and closure91 () (v0 : std_collections_HashMap<string, string>) : US45 =
    US45_0(v0)
and method206 () : (std_collections_HashMap<string, string> -> US45) =
    closure91()
and method207 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method12()
        let v63 : string = $"{v0}/{3uy}"
        let v64 : string = method198(v43, v44, v45, v46, v47, v48, v61, v62, v3, v63, v1, v2)
        method17(v64)
and method204 (v0 : US13, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v7 : (struct (string * string) []) = [||]
    let v9 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v13 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v17 : string option = None
    let v20 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v32 : Result<string, string> =
        match v0 with
        | US13_1(v26) -> (* Error *)
            let v28 : Result<string, string> = Error v26 
            v28
        | US13_0(v21) -> (* Ok *)
            let v23 : Result<string, string> = Ok v21 
            v23
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.ok()"
    let v36 : string option = Fable.Core.RustInterop.emitRustExpr v32 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.ok()"
    let v38 : string option = Fable.Core.RustInterop.emitRustExpr v32 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.ok()"
    let v40 : string option = Fable.Core.RustInterop.emitRustExpr v32 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : string option = _run_target_args'_v34 
    let v48 : bool = true
    let struct (v49 : int32, v50 : string) = method91(v20, v4, v7, v9, v13, v48, v45)
    let v53 : string = "failed to load manifest for workspace member"
    let v54 : bool = v50.Contains v53 
    let v57 : bool = v54 = false
    let v274 : US44 =
        if v57 then
            let v58 : bool = v49 = 0
            if v58 then
                US44_0(v49, v50)
            else
                US44_1(v49, v50)
        else
            let v62 : string = $"regex::Regex::new(&$0)"
            let v63 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v64 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v63 v62 
            (* run_target_args'
            let v66 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v67 : string = "$0.unwrap()"
            let v68 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v67 
            let _run_target_args'_v66 = v68 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v69 : string = "$0.unwrap()"
            let v70 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v69 
            let _run_target_args'_v66 = v70 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v71 : string = "$0.unwrap()"
            let v72 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v71 
            let _run_target_args'_v66 = v72 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v73 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v73 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v75 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v75 
            #endif
#else
            let v76 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v76 
            #endif
            let v77 : regex_Regex = _run_target_args'_v66 
            let v80 : Vec<std_collections_HashMap<string, string>> = method205(v50, v77)
            let v81 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v82 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v80 v81 
            let v83 : std_collections_HashMap<string, string> option = v82 |> Array.tryItem 0 
            let v86 : (std_collections_HashMap<string, string> -> US45) = method206()
            let v87 : US45 option = v83 |> Option.map v86 
            let v107 : US45 = US45_1
            let v108 : US45 = v87 |> Option.defaultValue v107 
            let v147 : US46 =
                match v108 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v112) -> (* Some *)
                    let v113 : string = method207()
                    let v114 : string = "std::collections::HashMap::get(&$0, &v113).map(|x| x).cloned()"
                    let v115 : string option = Fable.Core.RustInterop.emitRustExpr v112 v114 
                    let v118 : (string -> US5) = method6()
                    let v119 : US5 option = v115 |> Option.map v118 
                    let v139 : US5 = US5_1
                    let v140 : US5 = v119 |> Option.defaultValue v139 
                    US46_0(v140)
            let v154 : US5 =
                match v147 with
                | US46_0(v148) -> (* Some *)
                    match v148 with
                    | US5_0(v149) -> (* Some *)
                        US5_0(v149)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v154 with
            | US5_1 -> (* None *)
                US44_1(v49, v50)
            | US5_0(v156) -> (* Some *)
                let v157 : bool = method35(v156)
                let v158 : bool = v157 = false
                if v158 then
                    let v159 : string option = method38(v156)
                    let v162 : string = ""
                    let v163 : string = v159 |> Option.defaultValue v162 
                    let v166 : System.IDisposable = method72(v163)
                    (* run_target_args'
                    let v173 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v174 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v174 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v175 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v175 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v177 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v173 = v177 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v180 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v180 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v182 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v182 
                    #endif
#else
                    let v183 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v183 
                    #endif
                    let v184 : System.DateTime = _run_target_args'_v173 
                    let v190 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v191 : System.Guid = v190 ()
                    let v194 : System.Guid = method187(v191, v184)
                    let v196 : (System.Guid -> string) = _.ToString()
                    let v197 : string = v196 v194
                    let v200 : string = $"[package]"
                    let v201 : string = $"name = \"spiral_{v197}\""
                    let v204 : string = "\n"
                    let v205 : string = v200 + v204 
                    let v209 : string = v205 + v201 
                    let v212 : string = $"version = \"0.0.1\""
                    let v214 : string = v209 + v204 
                    let v218 : string = v214 + v212 
                    let v221 : string = $"edition = \"2021\""
                    let v223 : string = v218 + v204 
                    let v227 : string = v223 + v221 
                    let v230 : string = $""
                    let v232 : string = v227 + v204 
                    let v236 : string = v232 + v230 
                    let v239 : string = $"[[bin]]"
                    let v241 : string = v236 + v204 
                    let v245 : string = v241 + v239 
                    let v248 : string = $"name = \"spiral_{v197}\""
                    let v250 : string = v245 + v204 
                    let v254 : string = v250 + v248 
                    let v257 : string = $"path = \"spiral.rs\""
                    let v259 : string = v254 + v204 
                    let v263 : string = v259 + v257 
                    (* run_target_args'
                    let v266 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v267 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v156, v263) v267 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v156, v263)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v268 : bool = v49 = 0
                if v268 then
                    US44_0(v49, v50)
                else
                    US44_1(v49, v50)
    let struct (v282 : bool, v283 : int32, v284 : string) =
        match v274 with
        | US44_1(v277, v278) -> (* Error *)
            struct (true, v277, v278)
        | US44_0(v275, v276) -> (* Ok *)
            struct (false, v275, v276)
    let v285 : bool = v282 = false
    let v287 : bool =
        if v285 then
            true
        else
            let v286 : bool = v2 >= 3uy
            v286
    if v287 then
        struct (v283, v284)
    else
        let v349 : unit = ()
        let v350 : (unit -> unit) = closure92(v2, v283, v284, v282)
        let v351 : unit = (fun () -> v350 (); v349) ()
        let v413 : uint8 = v2 + 1uy
        method204(v0, v1, v413)
and method208 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "cargo_fmt_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_rust / cargo fmt error"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method208(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and method209 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method210 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method13()
    let v14 : Mut3 = {l0 = v13} : Mut3
    let v17 : string = "{ "
    let v18 : string = $"{v17}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v14, v18)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v36 : string = "exit_code"
    let v37 : string = $"{v36}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v14, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v55 : string = " = "
    let v56 : string = $"{v55}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v14, v56)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v76 : string = $"{v8}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v14, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v94 : string = "; "
    let v95 : string = $"{v94}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v14, v95)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v14, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v131 : string = $"{v55}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v14, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v14, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v165 : string = $"{v94}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v14, v165)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v183 : string = "external_command"
    let v184 : string = $"{v183}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v14, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v201 : string = $"{v55}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v14, v201)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v218 : string = $"{v10}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v14, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v235 : string = $"{v94}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v14, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v253 : string = "cleanup"
    let v254 : string = $"{v253}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v14, v254)
    let v264 : unit = (fun () -> v263 (); v262) ()
    let v271 : string = $"{v55}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v14, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v289 : string =
        if v11 then
            let v287 : string = "true"
            v287
        else
            let v288 : string = "false"
            v288
    let v291 : string = $"{v289}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v14, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v308 : string = $"{v94}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v14, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v326 : string = "cargo_result"
    let v327 : string = $"{v326}"
    let v335 : unit = ()
    let v336 : (unit -> unit) = closure7(v14, v327)
    let v337 : unit = (fun () -> v336 (); v335) ()
    let v344 : string = $"{v55}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v14, v344)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v361 : string = $"{v12}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v14, v361)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v379 : string = " }"
    let v380 : string = $"{v379}"
    let v388 : unit = ()
    let v389 : (unit -> unit) = closure7(v14, v380)
    let v390 : unit = (fun () -> v389 (); v388) ()
    let v396 : string = v14.l0
    let v397 : int64 = v0.l0
    let v400 : string = " "
    let v401 : string = v6 + v400 
    let v405 : string = v401 + v7 
    let v410 : string = " #"
    let v411 : string = v405 + v410 
    let v415 : (int64 -> string) = _.ToString()
    let v416 : string = v415 v397
    let v420 : string = v411 + v416 
    let v424 : string = v420 + v400 
    let v429 : string = "spiral.process_rust / error"
    let v430 : string = v424 + v429 
    let v435 : string = " / "
    let v436 : string = v430 + v435 
    let v440 : string = v436 + v396 
    method16(v440)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure2()
        let v23 : unit = (fun () -> v22 (); v21) ()
        let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
        let v62 : string = method8(v44, v45, v46, v47, v48, v49)
        let v63 : string = method76()
        let v64 : string = method210(v44, v45, v46, v47, v48, v49, v62, v63, v3, v1, v4, v0, v2)
        method17(v64)
and closure99 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v12 : (string -> bool) = closure99()
    let v13 : (string []) = v9 |> Array.skipWhile v12 
    let v14 : (string []) = v13 |> Array.skip 2 
    let v16 : string seq = v14 |> Seq.ofArray
    let v20 : string = method69()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method211 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v114 : string = $"{v104}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v132 : string = "; "
    let v133 : string = $"{v132}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v13, v133)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v151 : string = "new_code_path"
    let v152 : string = $"{v151}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v13, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v169 : string = $"{v54}"
    let v177 : unit = ()
    let v178 : (unit -> unit) = closure7(v13, v169)
    let v179 : unit = (fun () -> v178 (); v177) ()
    let v186 : string = $"{v9}"
    let v194 : unit = ()
    let v195 : (unit -> unit) = closure7(v13, v186)
    let v196 : unit = (fun () -> v195 (); v194) ()
    let v203 : string = $"{v132}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v13, v203)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v221 : string = "external_command"
    let v222 : string = $"{v221}"
    let v230 : unit = ()
    let v231 : (unit -> unit) = closure7(v13, v222)
    let v232 : unit = (fun () -> v231 (); v230) ()
    let v239 : string = $"{v54}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v256 : string = $"{v10}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v13, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v132}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v13, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v291 : string = "cargo_result"
    let v292 : string = $"{v291}"
    let v300 : unit = ()
    let v301 : (unit -> unit) = closure7(v13, v292)
    let v302 : unit = (fun () -> v301 (); v300) ()
    let v309 : string = $"{v54}"
    let v317 : unit = ()
    let v318 : (unit -> unit) = closure7(v13, v309)
    let v319 : unit = (fun () -> v318 (); v317) ()
    let v326 : string = $"{v11}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v13, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v344 : string = " }"
    let v345 : string = $"{v344}"
    let v353 : unit = ()
    let v354 : (unit -> unit) = closure7(v13, v345)
    let v355 : unit = (fun () -> v354 (); v353) ()
    let v361 : string = v13.l0
    let v362 : int64 = v0.l0
    let v365 : string = " "
    let v366 : string = v6 + v365 
    let v370 : string = v366 + v7 
    let v375 : string = " #"
    let v376 : string = v370 + v375 
    let v380 : (int64 -> string) = _.ToString()
    let v381 : string = v380 v362
    let v385 : string = v376 + v381 
    let v389 : string = v385 + v365 
    let v394 : string = "spiral.process_rust / Exception"
    let v395 : string = v389 + v394 
    let v400 : string = " / "
    let v401 : string = v395 + v400 
    let v405 : string = v401 + v361 
    method16(v405)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method211(v43, v44, v45, v46, v47, v48, v61, v62, v3, v0, v2, v1)
        method17(v63)
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method212 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method13()
    let v14 : Mut3 = {l0 = v13} : Mut3
    let v17 : string = "{ "
    let v18 : string = $"{v17}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v14, v18)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v36 : string = "exit_code"
    let v37 : string = $"{v36}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v14, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v55 : string = " = "
    let v56 : string = $"{v55}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v14, v56)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v76 : string = $"{v8}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v14, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v94 : string = "; "
    let v95 : string = $"{v94}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v14, v95)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v14, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v131 : string = $"{v55}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v14, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v14, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v165 : string = $"{v94}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v14, v165)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v183 : string = "cargo_result"
    let v184 : string = $"{v183}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v14, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v201 : string = $"{v55}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v14, v201)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v218 : string = $"{v10}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v14, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v235 : string = $"{v94}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v14, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v253 : string = "cleanup"
    let v254 : string = $"{v253}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v14, v254)
    let v264 : unit = (fun () -> v263 (); v262) ()
    let v271 : string = $"{v55}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v14, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v289 : string =
        if v11 then
            let v287 : string = "true"
            v287
        else
            let v288 : string = "false"
            v288
    let v291 : string = $"{v289}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v14, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v308 : string = $"{v94}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v14, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v326 : string = "spiral_wasm_result"
    let v327 : string = $"{v326}"
    let v335 : unit = ()
    let v336 : (unit -> unit) = closure7(v14, v327)
    let v337 : unit = (fun () -> v336 (); v335) ()
    let v344 : string = $"{v55}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v14, v344)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v361 : string = $"{v12}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v14, v361)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v379 : string = " }"
    let v380 : string = $"{v379}"
    let v388 : unit = ()
    let v389 : (unit -> unit) = closure7(v14, v380)
    let v390 : unit = (fun () -> v389 (); v388) ()
    let v396 : string = v14.l0
    let v397 : int64 = v0.l0
    let v400 : string = " "
    let v401 : string = v6 + v400 
    let v405 : string = v401 + v7 
    let v410 : string = " #"
    let v411 : string = v405 + v410 
    let v415 : (int64 -> string) = _.ToString()
    let v416 : string = v415 v397
    let v420 : string = v411 + v416 
    let v424 : string = v420 + v400 
    let v429 : string = "spiral.process_rust / wasm error"
    let v430 : string = v424 + v429 
    let v435 : string = " / "
    let v436 : string = v430 + v435 
    let v440 : string = v436 + v396 
    method16(v440)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure2()
        let v23 : unit = (fun () -> v22 (); v21) ()
        let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
        let v62 : string = method8(v44, v45, v46, v47, v48, v49)
        let v63 : string = method76()
        let v64 : string = $"\n{v3}"
        let v65 : string = method212(v44, v45, v46, v47, v48, v49, v62, v63, v4, v1, v2, v0, v64)
        method17(v65)
and method213 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method13()
    let v15 : Mut3 = {l0 = v14} : Mut3
    let v18 : string = "{ "
    let v19 : string = $"{v18}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v15, v19)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v37 : string = "exit_code"
    let v38 : string = $"{v37}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v15, v38)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v56 : string = " = "
    let v57 : string = $"{v56}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v15, v57)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v77 : string = $"{v8}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v15, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v15, v96)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v114 : string = "new_code_path"
    let v115 : string = $"{v114}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v15, v115)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v132 : string = $"{v56}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v15, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v149 : string = $"{v9}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v15, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v95}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v15, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v184 : string = "wasm_path"
    let v185 : string = $"{v184}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v15, v185)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v202 : string = $"{v56}"
    let v210 : unit = ()
    let v211 : (unit -> unit) = closure7(v15, v202)
    let v212 : unit = (fun () -> v211 (); v210) ()
    let v219 : string = $"{v10}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v15, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v236 : string = $"{v95}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v15, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v254 : string = "command"
    let v255 : string = $"{v254}"
    let v263 : unit = ()
    let v264 : (unit -> unit) = closure7(v15, v255)
    let v265 : unit = (fun () -> v264 (); v263) ()
    let v272 : string = $"{v56}"
    let v280 : unit = ()
    let v281 : (unit -> unit) = closure7(v15, v272)
    let v282 : unit = (fun () -> v281 (); v280) ()
    let v289 : string = $"{v11}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v15, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v306 : string = $"{v95}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v15, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v324 : string = "cleanup"
    let v325 : string = $"{v324}"
    let v333 : unit = ()
    let v334 : (unit -> unit) = closure7(v15, v325)
    let v335 : unit = (fun () -> v334 (); v333) ()
    let v342 : string = $"{v56}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v15, v342)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v360 : string =
        if v12 then
            let v358 : string = "true"
            v358
        else
            let v359 : string = "false"
            v359
    let v362 : string = $"{v360}"
    let v370 : unit = ()
    let v371 : (unit -> unit) = closure7(v15, v362)
    let v372 : unit = (fun () -> v371 (); v370) ()
    let v379 : string = $"{v95}"
    let v387 : unit = ()
    let v388 : (unit -> unit) = closure7(v15, v379)
    let v389 : unit = (fun () -> v388 (); v387) ()
    let v397 : string = "cargo_result"
    let v398 : string = $"{v397}"
    let v406 : unit = ()
    let v407 : (unit -> unit) = closure7(v15, v398)
    let v408 : unit = (fun () -> v407 (); v406) ()
    let v415 : string = $"{v56}"
    let v423 : unit = ()
    let v424 : (unit -> unit) = closure7(v15, v415)
    let v425 : unit = (fun () -> v424 (); v423) ()
    let v432 : string = $"{v13}"
    let v440 : unit = ()
    let v441 : (unit -> unit) = closure7(v15, v432)
    let v442 : unit = (fun () -> v441 (); v440) ()
    let v450 : string = " }"
    let v451 : string = $"{v450}"
    let v459 : unit = ()
    let v460 : (unit -> unit) = closure7(v15, v451)
    let v461 : unit = (fun () -> v460 (); v459) ()
    let v467 : string = v15.l0
    let v468 : int64 = v0.l0
    let v471 : string = " "
    let v472 : string = v6 + v471 
    let v476 : string = v472 + v7 
    let v481 : string = " #"
    let v482 : string = v476 + v481 
    let v486 : (int64 -> string) = _.ToString()
    let v487 : string = v486 v468
    let v491 : string = v482 + v487 
    let v495 : string = v491 + v471 
    let v500 : string = "spiral.process_rust / cargo error"
    let v501 : string = v495 + v500 
    let v506 : string = " / "
    let v507 : string = v501 + v506 
    let v511 : string = v507 + v467 
    method16(v511)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v22 : unit = ()
        let v23 : (unit -> unit) = closure2()
        let v24 : unit = (fun () -> v23 (); v22) ()
        let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : Mut4, v50 : int64 option) = TraceState.trace_state.Value
        let v63 : string = method8(v45, v46, v47, v48, v49, v50)
        let v64 : string = method76()
        let v65 : string = $"\n{v2}"
        let v66 : string = method213(v45, v46, v47, v48, v49, v50, v63, v64, v3, v1, v4, v5, v0, v65)
        method17(v66)
and method214 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : string = method13()
    let v20 : Mut3 = {l0 = v19} : Mut3
    let v23 : string = "{ "
    let v24 : string = $"{v23}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v20, v24)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v42 : string = "new_code_path"
    let v43 : string = $"{v42}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v20, v43)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v61 : string = " = "
    let v62 : string = $"{v61}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v20, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v79 : string = $"{v8}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v20, v79)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v97 : string = "; "
    let v98 : string = $"{v97}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v20, v98)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v116 : string = "cleanup"
    let v117 : string = $"{v116}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v20, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v61}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v20, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v157 : UH5 = UH5_0
    let v158 : UH5 = UH5_1(v17, v18, v157)
    let v159 : UH5 = UH5_1(v15, v16, v158)
    let v160 : UH5 = UH5_1(v13, v14, v159)
    let v161 : UH5 = UH5_1(v11, v12, v160)
    let v162 : UH5 = UH5_1(v9, v10, v161)
    let v163 : string = $"%A{v162}"
    let v173 : string = $"{v163}"
    let v181 : unit = ()
    let v182 : (unit -> unit) = closure7(v20, v173)
    let v183 : unit = (fun () -> v182 (); v181) ()
    let v191 : string = " }"
    let v192 : string = $"{v191}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v20, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v208 : string = v20.l0
    let v209 : int64 = v0.l0
    let v212 : string = " "
    let v213 : string = v6 + v212 
    let v217 : string = v213 + v7 
    let v222 : string = " #"
    let v223 : string = v217 + v222 
    let v227 : (int64 -> string) = _.ToString()
    let v228 : string = v227 v209
    let v232 : string = v223 + v228 
    let v236 : string = v232 + v212 
    let v241 : string = "spiral.process_rust / cleanup"
    let v242 : string = v236 + v241 
    let v247 : string = " / "
    let v248 : string = v242 + v247 
    let v252 : string = v248 + v208 
    method16(v252)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v27 : unit = ()
        let v28 : (unit -> unit) = closure2()
        let v29 : unit = (fun () -> v28 (); v27) ()
        let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
        let v68 : string = method8(v50, v51, v52, v53, v54, v55)
        let v69 : string = method78()
        let v70 : string = method214(v50, v51, v52, v53, v54, v55, v68, v69, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method17(v70)
and closure105 () () : US47 =
    US47_0
and method216 () : (unit -> US47) =
    closure105()
and closure106 () (v0 : string) : US47 =
    US47_1(v0)
and method217 () : (string -> US47) =
    closure106()
and method218 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "error'"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "file_system.file_delete"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure107 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method76()
        let v60 : string = method218(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method215 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method45()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US47) = method216()
        let v24 : (string -> US47) = method217()
        let v26 : US47 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US47_1(v29) -> (* Error *)
            let v90 : unit = ()
            let v91 : (unit -> unit) = closure107(v29)
            let v92 : unit = (fun () -> v91 (); v90) ()
            ()
        | US47_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v153 : (string -> unit) = System.IO.File.Delete
        v153 v1
        #endif
        // run_target_args' is_unit
        method215(v3)
    | UH5_0 -> (* Nil *)
        ()
and method219 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US48 =
    US48_0(v0)
and method220 () : (std_fs_FileType -> US48) =
    closure109()
and closure110 () (v0 : std_string_String) : US48 =
    US48_1(v0)
and method221 () : (std_string_String -> US48) =
    closure110()
and method222 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v201 : string = null |> unbox<string>
    let _run_target_args'_v5 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v209 : string = null |> unbox<string>
    let _run_target_args'_v5 = v209 
    #endif
#if FABLE_COMPILER_PYTHON
    let v213 : string = null |> unbox<string>
    let _run_target_args'_v5 = v213 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : (string -> string) = System.IO.Path.GetDirectoryName
    let v217 : string = v216 v0
    let _run_target_args'_v5 = v217 
    #endif
#else
    let v218 : (string -> string) = System.IO.Path.GetDirectoryName
    let v219 : string = v218 v0
    let _run_target_args'_v5 = v219 
    #endif
    let v220 : string = _run_target_args'_v5 
    v220
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method73()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US48) = method220()
    let v37 : (std_string_String -> US48) = method221()
    let v39 : US48 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v296 : US49 =
        match v39 with
        | US48_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US49_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v89 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v90 : string = "format!(\"{}\", $0)"
                let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v90 
                let _run_target_args'_v89 = v91 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v92 : string = "format!(\"{}\", $0)"
                let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v92 
                let _run_target_args'_v89 = v93 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94 : string = "format!(\"{}\", $0)"
                let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v94 
                let _run_target_args'_v89 = v95 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v97 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v97 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v105 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v105 
                #endif
#else
                let v109 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v109 
                #endif
                let v112 : std_string_String = _run_target_args'_v89 
                let v121 : string = "fable_library_rust::String_::fromString($0)"
                let v122 : string = Fable.Core.RustInterop.emitRustExpr v112 v121 
                let v123 : string = method222(v122)
                let v125 : bool = v123.StartsWith (v0, false, null)
                let v128 : bool = v125 = false
                if v128 then
                    US49_1
                else
                    let v130 : string option = method38(v122)
                    let v133 : (string -> US5) = method6()
                    let v134 : US5 option = v130 |> Option.map v133 
                    let v154 : US5 = US5_1
                    let v155 : US5 = v134 |> Option.defaultValue v154 
                    match v155 with
                    | US5_0(v159) -> (* Some *)
                        let v161 : bool = v159.Contains v0 
                        let v164 : bool = v161 = false
                        if v164 then
                            US49_2
                        else
                            US49_1
                    | _ ->
                        US49_1
        | _ ->
            let v172 : string = "async_walkdir::DirEntry::path(&$0)"
            let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v172 
            (* run_target_args'
            let v178 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v179 : string = "$0.display()"
            let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
            let _run_target_args'_v178 = v180 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v181 : string = "$0.display()"
            let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
            let _run_target_args'_v178 = v182 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
            let _run_target_args'_v178 = v184 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v186 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v186 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v194 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v194 
            #endif
#else
            let v198 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v198 
            #endif
            let v201 : std_path_Display = _run_target_args'_v178 
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "format!(\"{}\", $0)"
            let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "format!(\"{}\", $0)"
            let v218 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "format!(\"{}\", $0)"
            let v220 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : std_string_String = _run_target_args'_v214 
            let v246 : string = "fable_library_rust::String_::fromString($0)"
            let v247 : string = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = method222(v247)
            let v250 : bool = v248.StartsWith (v0, false, null)
            let v253 : bool = v250 = false
            if v253 then
                US49_1
            else
                let v255 : string option = method38(v247)
                let v258 : (string -> US5) = method6()
                let v259 : US5 option = v255 |> Option.map v258 
                let v279 : US5 = US5_1
                let v280 : US5 = v259 |> Option.defaultValue v279 
                match v280 with
                | US5_0(v284) -> (* Some *)
                    let v286 : bool = v284.Contains v0 
                    let v289 : bool = v286 = false
                    if v289 then
                        US49_2
                    else
                        US49_1
                | _ ->
                    US49_1
    let v297 : string = ""
    let v298 : string = "}"
    let v299 : string = v297 + v298 
    let x = v296 //
    let v300 : _ = x
    let v301 : unit = ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = $"true; let _fix_closure_v301 = $0"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v300 v303 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : string = $"true; let _fix_closure_v301 = $0"
    let v306 : bool = Fable.Core.RustInterop.emitRustExpr v300 v305 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v307 : string = $"true; let _fix_closure_v301 = $0"
    let v308 : bool = Fable.Core.RustInterop.emitRustExpr v300 v307 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v302 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#else
    let _run_target_args'_v302 = false 
    #endif
    let v309 : bool = _run_target_args'_v302 
    let v310 : string = $"true; _fix_closure_v301 " + v299 + "); " + v297 + " // rust.fix_closure'"
    let v311 : bool = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "__future_init"
    let v313 : _ = Fable.Core.RustInterop.emitRustExpr () v312 
    let v314 : string = "v313"
    let v315 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US49>>, Send<Dyn<std_future_Future<US49>>>>>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "v315.await"
    let v317 : US49 = Fable.Core.RustInterop.emitRustExpr () v316 
    let v326 : async_walkdir_Filtering =
        match v317 with
        | US49_2 -> (* Continue *)
            let v322 : string = "async_walkdir::Filtering::Continue"
            let v323 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v322 
            v323
        | US49_0 -> (* Ignore *)
            let v318 : string = "async_walkdir::Filtering::Ignore"
            let v319 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v318 
            v319
        | US49_1 -> (* IgnoreDir *)
            let v320 : string = "async_walkdir::Filtering::IgnoreDir"
            let v321 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v320 
            v321
    let v327 : string = v297 + v298 
    let x = v326 //
    let v328 : _ = x
    let v329 : unit = ()
    (* run_target_args'
    let v330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v331 : string = $"true; let _fix_closure_v329 = $0"
    let v332 : bool = Fable.Core.RustInterop.emitRustExpr v328 v331 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = $"true; let _fix_closure_v329 = $0"
    let v334 : bool = Fable.Core.RustInterop.emitRustExpr v328 v333 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v335 : string = $"true; let _fix_closure_v329 = $0"
    let v336 : bool = Fable.Core.RustInterop.emitRustExpr v328 v335 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v330 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#else
    let _run_target_args'_v330 = false 
    #endif
    let v337 : bool = _run_target_args'_v330 
    let v338 : string = $"true; _fix_closure_v329 " + v327 + "); " + v297 + " // rust.fix_closure'"
    let v339 : bool = Fable.Core.RustInterop.emitRustExpr () v338 
    let v340 : string = "__future_init"
    let v341 : _ = Fable.Core.RustInterop.emitRustExpr () v340 
    let v342 : string = "v341"
    let v343 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v342 
    v343
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method224 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US50 =
    US50_0(v0)
and method225 () : (async_walkdir_DirEntry -> US50) =
    closure113()
and closure114 () (v0 : std_string_String) : US50 =
    US50_1(v0)
and method226 () : (std_string_String -> US50) =
    closure114()
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "error"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    (* run_target_args'
    let v72 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v72 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v72 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "format!(\"{:#?}\", $0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _run_target_args'_v72 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : string = $"%A{v8}"
    let _run_target_args'_v72 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : string = $"%A{v8}"
    let _run_target_args'_v72 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v94 : string = $"%A{v8}"
    let _run_target_args'_v72 = v94 
    #endif
#else
    let v98 : string = $"%A{v8}"
    let _run_target_args'_v72 = v98 
    #endif
    let v101 : string = _run_target_args'_v72 
    let v111 : string = $"{v101}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v10, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = " }"
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v10, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v146 : string = v10.l0
    let v147 : int64 = v0.l0
    let v150 : string = " "
    let v151 : string = v6 + v150 
    let v155 : string = v151 + v7 
    let v160 : string = " #"
    let v161 : string = v155 + v160 
    let v165 : (int64 -> string) = _.ToString()
    let v166 : string = v165 v147
    let v170 : string = v161 + v166 
    let v174 : string = v170 + v150 
    let v179 : string = "spiral.process_typescript / stream_filter_map"
    let v180 : string = v174 + v179 
    let v185 : string = " / "
    let v186 : string = v180 + v185 
    let v190 : string = v186 + v146 
    method16(v190)
and closure115 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method76()
        let v60 : string = method227(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method224()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US50) = method225()
    let v19 : (std_string_String -> US50) = method226()
    let v21 : US50 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v325 : US51 =
        match v21 with
        | US50_1(v199) -> (* Error *)
            let v260 : unit = ()
            let v261 : (unit -> unit) = closure115(v199)
            let v262 : unit = (fun () -> v261 (); v260) ()
            US51_1
        | US50_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v67 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v68 : string = "format!(\"{}\", $0)"
            let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v68 
            let _run_target_args'_v67 = v69 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v70 : string = "format!(\"{}\", $0)"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v70 
            let _run_target_args'_v67 = v71 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v72 : string = "format!(\"{}\", $0)"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v72 
            let _run_target_args'_v67 = v73 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v75 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v75 
            #endif
#if FABLE_COMPILER_PYTHON
            let v79 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v79 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v83 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v83 
            #endif
#else
            let v87 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v87 
            #endif
            let v90 : std_string_String = _run_target_args'_v67 
            let v99 : string = "fable_library_rust::String_::fromString($0)"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v90 v99 
            let v101 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v102 : string = $"regex::Regex::new(&$0)"
            let v103 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v101 v102 
            (* run_target_args'
            let v105 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "$0.unwrap()"
            let v107 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v106 
            let _run_target_args'_v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "$0.unwrap()"
            let v109 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v108 
            let _run_target_args'_v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "$0.unwrap()"
            let v111 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v110 
            let _run_target_args'_v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v114 
            #endif
#else
            let v115 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v115 
            #endif
            let v116 : regex_Regex = _run_target_args'_v105 
            let v119 : Vec<std_collections_HashMap<string, string>> = method205(v100, v116)
            let v120 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v121 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v119 v120 
            let v122 : std_collections_HashMap<string, string> option = v121 |> Array.tryItem 0 
            let v125 : (std_collections_HashMap<string, string> -> US45) = method206()
            let v126 : US45 option = v122 |> Option.map v125 
            let v146 : US45 = US45_1
            let v147 : US45 = v126 |> Option.defaultValue v146 
            let v186 : US46 =
                match v147 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v151) -> (* Some *)
                    let v152 : string = method207()
                    let v153 : string = "std::collections::HashMap::get(&$0, &v152).map(|x| x).cloned()"
                    let v154 : string option = Fable.Core.RustInterop.emitRustExpr v151 v153 
                    let v157 : (string -> US5) = method6()
                    let v158 : US5 option = v154 |> Option.map v157 
                    let v178 : US5 = US5_1
                    let v179 : US5 = v158 |> Option.defaultValue v178 
                    US46_0(v179)
            let v193 : US5 =
                match v186 with
                | US46_0(v187) -> (* Some *)
                    match v187 with
                    | US5_0(v188) -> (* Some *)
                        US5_0(v188)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v193 with
            | US5_1 -> (* None *)
                US51_1
            | US5_0(v194) -> (* Some *)
                US51_0(v100, v194)
    match v325 with
    | US51_1 -> (* None *)
        let v333 : struct (string * string) option = None
        v333
    | US51_0(v326, v327) -> (* Some *)
        let v329 : struct (string * string) option = Some struct (v326, v327) 
        v329
and method223 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US51 =
    US51_0(v0, v1)
and method228 () : (struct (string * string) -> US51) =
    closure117()
and method229 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US51) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "version"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"%A{v8}"
    let v73 : string = $"{v69}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v10, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = " }"
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v108 : string = v10.l0
    let v109 : int64 = v0.l0
    let v112 : string = " "
    let v113 : string = v6 + v112 
    let v117 : string = v113 + v7 
    let v122 : string = " #"
    let v123 : string = v117 + v122 
    let v127 : (int64 -> string) = _.ToString()
    let v128 : string = v127 v109
    let v132 : string = v123 + v128 
    let v136 : string = v132 + v112 
    let v141 : string = "spiral.process_typescript"
    let v142 : string = v136 + v141 
    let v147 : string = " / "
    let v148 : string = v142 + v147 
    let v152 : string = v148 + v108 
    method16(v152)
and closure118 (v0 : US51) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method229(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method230 (v0 : string, v1 : string, v2 : US51) : unit =
    match v2 with
    | US51_1 -> (* None *)
        let v13 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v13
    | US51_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method33(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method33(v0, v8)
        method192(v7, v9)
        let v10 : string = "fable_modules"
        let v11 : string = method33(v7, v10)
        let v12 : bool = true
        method81(v12, v11)
and method231 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "dotnet_fable_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_typescript"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method231(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and method232 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "new_code_path"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "spiral.process_typescript"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure120 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method232(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method233 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method233(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method234 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method234(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method235 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v114 : string = $"{v104}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v132 : string = "; "
    let v133 : string = $"{v132}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v13, v133)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v151 : string = "new_code_path"
    let v152 : string = $"{v151}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v13, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v169 : string = $"{v54}"
    let v177 : unit = ()
    let v178 : (unit -> unit) = closure7(v13, v169)
    let v179 : unit = (fun () -> v178 (); v177) ()
    let v186 : string = $"{v9}"
    let v194 : unit = ()
    let v195 : (unit -> unit) = closure7(v13, v186)
    let v196 : unit = (fun () -> v195 (); v194) ()
    let v203 : string = $"{v132}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v13, v203)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v221 : string = "external_command"
    let v222 : string = $"{v221}"
    let v230 : unit = ()
    let v231 : (unit -> unit) = closure7(v13, v222)
    let v232 : unit = (fun () -> v231 (); v230) ()
    let v239 : string = $"{v54}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v256 : string = $"{v10}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v13, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v132}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v13, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v291 : string = "run_result"
    let v292 : string = $"{v291}"
    let v300 : unit = ()
    let v301 : (unit -> unit) = closure7(v13, v292)
    let v302 : unit = (fun () -> v301 (); v300) ()
    let v309 : string = $"{v54}"
    let v317 : unit = ()
    let v318 : (unit -> unit) = closure7(v13, v309)
    let v319 : unit = (fun () -> v318 (); v317) ()
    let v326 : string = $"{v11}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v13, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v344 : string = " }"
    let v345 : string = $"{v344}"
    let v353 : unit = ()
    let v354 : (unit -> unit) = closure7(v13, v345)
    let v355 : unit = (fun () -> v354 (); v353) ()
    let v361 : string = v13.l0
    let v362 : int64 = v0.l0
    let v365 : string = " "
    let v366 : string = v6 + v365 
    let v370 : string = v366 + v7 
    let v375 : string = " #"
    let v376 : string = v370 + v375 
    let v380 : (int64 -> string) = _.ToString()
    let v381 : string = v380 v362
    let v385 : string = v376 + v381 
    let v389 : string = v385 + v365 
    let v394 : string = "spiral.process_typescript / Exception"
    let v395 : string = v389 + v394 
    let v400 : string = " / "
    let v401 : string = v395 + v400 
    let v405 : string = v401 + v361 
    method16(v405)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method235(v43, v44, v45, v46, v47, v48, v61, v62, v3, v0, v2, v1)
        method17(v63)
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method236 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_typescript / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method236(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method237 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "dotnet_fable_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_python"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method237(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and method238 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "new_code_path"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "spiral.process_python"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure126 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method238(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and closure127 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method239 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v114 : string = $"{v104}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v132 : string = "; "
    let v133 : string = $"{v132}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v13, v133)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v151 : string = "new_code_path"
    let v152 : string = $"{v151}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v13, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v169 : string = $"{v54}"
    let v177 : unit = ()
    let v178 : (unit -> unit) = closure7(v13, v169)
    let v179 : unit = (fun () -> v178 (); v177) ()
    let v186 : string = $"{v9}"
    let v194 : unit = ()
    let v195 : (unit -> unit) = closure7(v13, v186)
    let v196 : unit = (fun () -> v195 (); v194) ()
    let v203 : string = $"{v132}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v13, v203)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v221 : string = "external_command"
    let v222 : string = $"{v221}"
    let v230 : unit = ()
    let v231 : (unit -> unit) = closure7(v13, v222)
    let v232 : unit = (fun () -> v231 (); v230) ()
    let v239 : string = $"{v54}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v256 : string = $"{v10}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v13, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v132}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v13, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v291 : string = "run_result"
    let v292 : string = $"{v291}"
    let v300 : unit = ()
    let v301 : (unit -> unit) = closure7(v13, v292)
    let v302 : unit = (fun () -> v301 (); v300) ()
    let v309 : string = $"{v54}"
    let v317 : unit = ()
    let v318 : (unit -> unit) = closure7(v13, v309)
    let v319 : unit = (fun () -> v318 (); v317) ()
    let v326 : string = $"{v11}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v13, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v344 : string = " }"
    let v345 : string = $"{v344}"
    let v353 : unit = ()
    let v354 : (unit -> unit) = closure7(v13, v345)
    let v355 : unit = (fun () -> v354 (); v353) ()
    let v361 : string = v13.l0
    let v362 : int64 = v0.l0
    let v365 : string = " "
    let v366 : string = v6 + v365 
    let v370 : string = v366 + v7 
    let v375 : string = " #"
    let v376 : string = v370 + v375 
    let v380 : (int64 -> string) = _.ToString()
    let v381 : string = v380 v362
    let v385 : string = v376 + v381 
    let v389 : string = v385 + v365 
    let v394 : string = "spiral.process_python / Exception"
    let v395 : string = v389 + v394 
    let v400 : string = " / "
    let v401 : string = v395 + v400 
    let v405 : string = v401 + v361 
    method16(v405)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method239(v43, v44, v45, v46, v47, v48, v61, v62, v3, v0, v2, v1)
        method17(v63)
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_python / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method240(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method241 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "subcommand"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v78 : string = "format!(\"{:#?}\", $0)"
    let v79 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v78 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let _run_target_args'_v73 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v73 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : string = $"%A{v8}"
    let _run_target_args'_v73 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = $"%A{v8}"
    let _run_target_args'_v73 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : string = $"%A{v8}"
    let _run_target_args'_v73 = v95 
    #endif
#else
    let v99 : string = $"%A{v8}"
    let _run_target_args'_v73 = v99 
    #endif
    let v102 : string = _run_target_args'_v73 
    let v112 : string = $"{v102}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v11, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v130 : string = "; "
    let v131 : string = $"{v130}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v11, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v149 : string = "arg_matches"
    let v150 : string = $"{v149}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v11, v150)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v167 : string = $"{v52}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    (* run_target_args'
    let v187 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v188 : string = "format!(\"{:#?}\", $0)"
    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v188 
    let v190 : string = "fable_library_rust::String_::fromString($0)"
    let v191 : string = Fable.Core.RustInterop.emitRustExpr v189 v190 
    let _run_target_args'_v187 = v191 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v192 : string = "format!(\"{:#?}\", $0)"
    let v193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v192 
    let v194 : string = "fable_library_rust::String_::fromString($0)"
    let v195 : string = Fable.Core.RustInterop.emitRustExpr v193 v194 
    let _run_target_args'_v187 = v195 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v196 : string = "format!(\"{:#?}\", $0)"
    let v197 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v196 
    let v198 : string = "fable_library_rust::String_::fromString($0)"
    let v199 : string = Fable.Core.RustInterop.emitRustExpr v197 v198 
    let _run_target_args'_v187 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : string = $"%A{v9}"
    let _run_target_args'_v187 = v201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v205 : string = $"%A{v9}"
    let _run_target_args'_v187 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v209 : string = $"%A{v9}"
    let _run_target_args'_v187 = v209 
    #endif
#else
    let v213 : string = $"%A{v9}"
    let _run_target_args'_v187 = v213 
    #endif
    let v216 : string = _run_target_args'_v187 
    let v226 : string = $"{v216}"
    let v234 : unit = ()
    let v235 : (unit -> unit) = closure7(v11, v226)
    let v236 : unit = (fun () -> v235 (); v234) ()
    let v244 : string = " }"
    let v245 : string = $"{v244}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v11, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v261 : string = v11.l0
    let v262 : int64 = v0.l0
    let v265 : string = " "
    let v266 : string = v6 + v265 
    let v270 : string = v266 + v7 
    let v275 : string = " #"
    let v276 : string = v270 + v275 
    let v280 : (int64 -> string) = _.ToString()
    let v281 : string = v280 v262
    let v285 : string = v276 + v281 
    let v289 : string = v285 + v265 
    let v294 : string = "spiral.run / invalid subcommand"
    let v295 : string = v289 + v294 
    let v300 : string = " / "
    let v301 : string = v295 + v300 
    let v305 : string = v301 + v261 
    method16(v305)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : string = method241(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v28 v37 
    v38
and method242 () : (serde_json_Error -> string) =
    closure132()
and method18 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US6) = method19()
    let v14 : US6 option = v10 |> Option.map v13 
    let v35 : US6 = US6_1
    let v36 : US6 = v14 |> Option.defaultValue v35 
    let v10443 : (struct (string * string) []) =
        match v36 with
        | US6_0(v40, v41) -> (* Some *)
            let v42 : string = "fable_library_rust::String_::fromString($0)"
            let v43 : string = Fable.Core.RustInterop.emitRustExpr v40 v42 
            let v44 : bool = v43 = "gleam"
            if v44 then
                let v45 : string = method20()
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "&*$0"
                let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "&*$0"
                let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "&*$0"
                let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : Ref<Str> = _run_target_args'_v50 
                let v82 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v83 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v73) v82 
                let v86 : (std_string_String -> US7) = method21()
                let v87 : US7 option = v83 |> Option.map v86 
                let v107 : US7 = US7_1
                let v108 : US7 = v87 |> Option.defaultValue v107 
                let v115 : std_string_String =
                    match v108 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v112) -> (* Some *)
                        v112
                let v116 : string = "fable_library_rust::String_::fromString($0)"
                let v117 : string = Fable.Core.RustInterop.emitRustExpr v115 v116 
                let v118 : string = method22()
                (* run_target_args'
                let v123 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v124 : string = "&*$0"
                let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                let _run_target_args'_v123 = v125 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v126 : string = "&*$0"
                let v127 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v126 
                let _run_target_args'_v123 = v127 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v128 : string = "&*$0"
                let v129 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v128 
                let _run_target_args'_v123 = v129 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v131 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v131 
                #endif
#if FABLE_COMPILER_PYTHON
                let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v135 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v139 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v139 
                #endif
#else
                let v143 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v143 
                #endif
                let v146 : Ref<Str> = _run_target_args'_v123 
                let v155 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v156 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v146) v155 
                let v159 : (std_string_String -> US7) = method21()
                let v160 : US7 option = v156 |> Option.map v159 
                let v180 : US7 = US7_1
                let v181 : US7 = v160 |> Option.defaultValue v180 
                let v242 : US8 =
                    match v181 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v185) -> (* Some *)
                        let v186 : string = "fable_library_rust::String_::fromString($0)"
                        let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
                        
                        
                        
                        
                        let v190 : string = "JavaScript"
                        let v191 : (unit -> string) = v190.ToLower
                        let v192 : string = v191 ()
                        let v197 : string = "Erlang"
                        let v198 : (unit -> string) = v197.ToLower
                        let v199 : string = v198 ()
                        let v202 : bool = "Erlang" = v187
                        let v206 : US9 =
                            if v202 then
                                let v203 : US10 = US10_0
                                US9_0(v203)
                            else
                                US9_1
                        let v238 : US9 =
                            match v206 with
                            | US9_1 -> (* None *)
                                let v209 : bool = "JavaScript" = v187
                                let v213 : US9 =
                                    if v209 then
                                        let v210 : US10 = US10_1
                                        US9_0(v210)
                                    else
                                        US9_1
                                match v213 with
                                | US9_1 -> (* None *)
                                    let v216 : bool = v199 = v187
                                    let v220 : US9 =
                                        if v216 then
                                            let v217 : US10 = US10_0
                                            US9_0(v217)
                                        else
                                            US9_1
                                    match v220 with
                                    | US9_1 -> (* None *)
                                        let v223 : bool = v192 = v187
                                        let v227 : US9 =
                                            if v223 then
                                                let v224 : US10 = US10_1
                                                US9_0(v224)
                                            else
                                                US9_1
                                        match v227 with
                                        | US9_1 -> (* None *)
                                            US9_1
                                        | US9_0(v228) -> (* Some *)
                                            US9_0(v228)
                                    | US9_0(v221) -> (* Some *)
                                        US9_0(v221)
                                | US9_0(v214) -> (* Some *)
                                    US9_0(v214)
                            | US9_0(v207) -> (* Some *)
                                US9_0(v207)
                        US8_0(v238)
                let v249 : US9 =
                    match v242 with
                    | US8_0(v243) -> (* Some *)
                        match v243 with
                        | US9_0(v244) -> (* Some *)
                            US9_0(v244)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v253 : US10 =
                    match v249 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v250) -> (* Some *)
                        v250
                let v254 : string = method23()
                (* run_target_args'
                let v259 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v260 : string = "&*$0"
                let v261 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _run_target_args'_v259 = v261 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v262 : string = "&*$0"
                let v263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v262 
                let _run_target_args'_v259 = v263 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v264 : string = "&*$0"
                let v265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v264 
                let _run_target_args'_v259 = v265 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v267 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v267 
                #endif
#if FABLE_COMPILER_PYTHON
                let v271 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v271 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v275 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v275 
                #endif
#else
                let v279 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v279 
                #endif
                let v282 : Ref<Str> = _run_target_args'_v259 
                let v291 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v292 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v282) v291 
                let v295 : (Vec<std_string_String> -> US11) = method24()
                let v296 : US11 option = v292 |> Option.map v295 
                let v316 : US11 = US11_1
                let v317 : US11 = v296 |> Option.defaultValue v316 
                let v321 : (std_string_String []) = [||]
                let v322 : string = "$0.to_vec()"
                let v323 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v321 v322 
                let v326 : Vec<std_string_String> =
                    match v317 with
                    | US11_1 -> (* None *)
                        v323
                    | US11_0(v324) -> (* Some *)
                        v324
                (* run_target_args'
                let v331 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v336 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v337 : string = "std::fs::read(&*$0)"
                let v338 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v117 v337 
                (* run_target_args'
                let v340 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v341 : string = "$0.unwrap()"
                let v342 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v341 
                let _run_target_args'_v340 = v342 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v343 : string = "$0.unwrap()"
                let v344 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v343 
                let _run_target_args'_v340 = v344 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v345 : string = "$0.unwrap()"
                let v346 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v345 
                let _run_target_args'_v340 = v346 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v347 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v347 
                #endif
#if FABLE_COMPILER_PYTHON
                let v348 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v348 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v349 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v349 
                #endif
#else
                let v350 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v350 
                #endif
                let v351 : Vec<uint8> = _run_target_args'_v340 
                let _run_target_args'_v336 = v351 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v359 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v363 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v363 
                #endif
#if FABLE_COMPILER_PYTHON
                let v367 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v367 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v371 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v371 
                #endif
#else
                let v374 : (uint8 []) = v117 |> System.IO.File.ReadAllBytes
                let v375 : string = "$0.to_vec()"
                let v376 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                let _run_target_args'_v336 = v376 
                #endif
                let v377 : Vec<uint8> = _run_target_args'_v336 
                let v386 : Vec<uint8> = method25(v377)
                let v387 : string = "std::string::String::from_utf8($0)"
                let v388 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v386 v387 
                (* run_target_args'
                let v390 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v391 : string = "$0.unwrap()"
                let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v391 
                let _run_target_args'_v390 = v392 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v393 : string = "$0.unwrap()"
                let v394 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v393 
                let _run_target_args'_v390 = v394 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v395 : string = "$0.unwrap()"
                let v396 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v395 
                let _run_target_args'_v390 = v396 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v397 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v397 
                #endif
#if FABLE_COMPILER_PYTHON
                let v398 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v398 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v399 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v399 
                #endif
#else
                let v400 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v400 
                #endif
                let v401 : std_string_String = _run_target_args'_v390 
                let v404 : string = "fable_library_rust::String_::fromString($0)"
                let v405 : string = Fable.Core.RustInterop.emitRustExpr v401 v404 
                let _run_target_args'_v331 = v405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v407 : string = null |> unbox<string>
                let _run_target_args'_v331 = v407 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v411 : string = null |> unbox<string>
                let _run_target_args'_v331 = v411 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v415 : string = null |> unbox<string>
                let _run_target_args'_v331 = v415 
                #endif
#if FABLE_COMPILER_PYTHON
                let v419 : string = null |> unbox<string>
                let _run_target_args'_v331 = v419 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v423 : string = null |> unbox<string>
                let _run_target_args'_v331 = v423 
                #endif
#else
                let v426 : string = v117 |> System.IO.File.ReadAllText
                let _run_target_args'_v331 = v426 
                #endif
                let v427 : string = _run_target_args'_v331 
                let v436 : string = method13()
                let v437 : Mut3 = {l0 = v436} : Mut3
                let v440 : string = "{ "
                let v441 : string = $"{v440}"
                let v449 : unit = ()
                let v450 : (unit -> unit) = closure7(v437, v441)
                let v451 : unit = (fun () -> v450 (); v449) ()
                let v459 : string = "extension"
                let v460 : string = $"{v459}"
                let v468 : unit = ()
                let v469 : (unit -> unit) = closure7(v437, v460)
                let v470 : unit = (fun () -> v469 (); v468) ()
                let v478 : string = " = "
                let v479 : string = $"{v478}"
                let v487 : unit = ()
                let v488 : (unit -> unit) = closure7(v437, v479)
                let v489 : unit = (fun () -> v488 (); v487) ()
                let v497 : string = "gleam"
                let v498 : string = $"{v497}"
                let v506 : unit = ()
                let v507 : (unit -> unit) = closure7(v437, v498)
                let v508 : unit = (fun () -> v507 (); v506) ()
                let v516 : string = "; "
                let v517 : string = $"{v516}"
                let v525 : unit = ()
                let v526 : (unit -> unit) = closure7(v437, v517)
                let v527 : unit = (fun () -> v526 (); v525) ()
                let v535 : string = "new_code"
                let v536 : string = $"{v535}"
                let v544 : unit = ()
                let v545 : (unit -> unit) = closure7(v437, v536)
                let v546 : unit = (fun () -> v545 (); v544) ()
                let v553 : string = $"{v478}"
                let v561 : unit = ()
                let v562 : (unit -> unit) = closure7(v437, v553)
                let v563 : unit = (fun () -> v562 (); v561) ()
                let v570 : string = $"{v427}"
                let v578 : unit = ()
                let v579 : (unit -> unit) = closure7(v437, v570)
                let v580 : unit = (fun () -> v579 (); v578) ()
                let v588 : string = " }"
                let v589 : string = $"{v588}"
                let v597 : unit = ()
                let v598 : (unit -> unit) = closure7(v437, v589)
                let v599 : unit = (fun () -> v598 (); v597) ()
                let v605 : string = v437.l0
                let v606 : string = method26(v605)
                let v607 : string = method31()
                let v608 : US5 = method32(v607)
                let v614 : US5 =
                    match v608 with
                    | US5_1 -> (* None *)
                        let v611 : string = __SOURCE_DIRECTORY__
                        method32(v611)
                    | US5_0(v609) -> (* Some *)
                        US5_0(v609)
                let v620 : US5 =
                    match v614 with
                    | US5_1 -> (* None *)
                        let v617 : string = "/workspaces"
                        method32(v617)
                    | US5_0(v615) -> (* Some *)
                        US5_0(v615)
                let v624 : string =
                    match v620 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v621) -> (* Some *)
                        v621
                let v625 : string = method50(v624)
                let v626 : bool = "deps" = v625
                let v637 : string =
                    if v626 then
                        let v627 : string option = method38(v624)
                        let v629 : string = v627 |> Option.get
                        let v632 : US5 = method32(v629)
                        match v632 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v633) -> (* Some *)
                            v633
                    else
                        v624
                let v638 : string = "polyglot"
                let v639 : string = method33(v637, v638)
                let v640 : string = method31()
                let v642 : (unit -> string) = v640.ToLower
                let v643 : string = v642 ()
                let v647 : (unit -> string) = v639.ToLower
                let v648 : string = v647 ()
                let v652 : bool = v643.StartsWith (v648, false, null)
                let v657 : US13 =
                    if v652 then
                        US13_1(v648)
                    else
                        US13_0(v648)
                let v669 : Result<string, string> =
                    match v657 with
                    | US13_1(v663) -> (* Error *)
                        let v665 : Result<string, string> = Error v663 
                        v665
                    | US13_0(v658) -> (* Ok *)
                        let v660 : Result<string, string> = Ok v658 
                        v660
                let v670 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v671 : bool = Fable.Core.RustInterop.emitRustExpr v669 v670 
                let v672 : string = "x"
                let v673 : string = Fable.Core.RustInterop.emitRustExpr () v672 
                let v674 : string = "true; $0 })"
                let v675 : bool = Fable.Core.RustInterop.emitRustExpr v673 v674 
                let v676 : string = "_result_unwrap_or_else"
                let v677 : string = Fable.Core.RustInterop.emitRustExpr () v676 
                let v678 : string = method63(v677)
                let v679 : string option = method38(v117)
                let v682 : string = ""
                let v683 : string = v679 |> Option.defaultValue v682 
                let v686 : string = method63(v683)
                let v687 : string = ".."
                let v688 : string = method33(v686, v687)
                let v689 : string = method63(v688)
                let v690 : string = "gleam.toml"
                let v691 : string = method33(v689, v690)
                let v692 : string = "gleam_stdlib=\"0.57.0\""
                let v693 : string = "gleam_time=\">=1.0.0 and <2.0.0\""
                let v694 : string = "gleam_erlang=\">=0.34.0 and <1.0.0\""
                let v695 : string = "envoy=\">=1.0.0 and <2.0.0\""
                let v696 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v697 : (string []) = [|v692; v693; v694; v695; v696|]
                let v698 : string = "$0.to_vec()"
                let v699 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v697 v698 
                let v700 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v701 : bool = Fable.Core.RustInterop.emitRustExpr v699 v700 
                let v702 : string = "x"
                let v703 : string = Fable.Core.RustInterop.emitRustExpr () v702 
                (* run_target_args'
                let v708 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v709 : string = "&*$0"
                let v710 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v703 v709 
                let _run_target_args'_v708 = v710 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v711 : string = "&*$0"
                let v712 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v703 v711 
                let _run_target_args'_v708 = v712 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v713 : string = "&*$0"
                let v714 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v703 v713 
                let _run_target_args'_v708 = v714 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v716 : Ref<Str> = v703 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v716 
                #endif
#if FABLE_COMPILER_PYTHON
                let v720 : Ref<Str> = v703 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v720 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v724 : Ref<Str> = v703 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v724 
                #endif
#else
                let v728 : Ref<Str> = v703 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v728 
                #endif
                let v731 : Ref<Str> = _run_target_args'_v708 
                (* run_target_args'
                let v744 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v745 : string = "String::from($0)"
                let v746 : std_string_String = Fable.Core.RustInterop.emitRustExpr v731 v745 
                let _run_target_args'_v744 = v746 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v747 : string = "String::from($0)"
                let v748 : std_string_String = Fable.Core.RustInterop.emitRustExpr v731 v747 
                let _run_target_args'_v744 = v748 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v749 : string = "String::from($0)"
                let v750 : std_string_String = Fable.Core.RustInterop.emitRustExpr v731 v749 
                let _run_target_args'_v744 = v750 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v752 : std_string_String = v731 |> unbox<std_string_String>
                let _run_target_args'_v744 = v752 
                #endif
#if FABLE_COMPILER_PYTHON
                let v756 : std_string_String = v731 |> unbox<std_string_String>
                let _run_target_args'_v744 = v756 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v760 : std_string_String = v731 |> unbox<std_string_String>
                let _run_target_args'_v744 = v760 
                #endif
#else
                let v764 : std_string_String = v731 |> unbox<std_string_String>
                let _run_target_args'_v744 = v764 
                #endif
                let v767 : std_string_String = _run_target_args'_v744 
                let v776 : string = "true; $0 }).collect::<Vec<_>>()"
                let v777 : bool = Fable.Core.RustInterop.emitRustExpr v767 v776 
                let v778 : string = "_vec_map"
                let v779 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v778 
                let v780 : Vec<std_string_String> = method67(v326)
                let v781 : Vec<std_string_String> = method68(v779)
                let v782 : string = "true; let mut v781 = v781"
                let v783 : bool = Fable.Core.RustInterop.emitRustExpr () v782 
                let v784 : string = "true; v781.extend(v780)"
                let v785 : bool = Fable.Core.RustInterop.emitRustExpr () v784 
                let v786 : string = "v781"
                let v787 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v786 
                let v788 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v789 : bool = Fable.Core.RustInterop.emitRustExpr v787 v788 
                let v790 : string = "x"
                let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
                let v792 : string = "fable_library_rust::String_::fromString($0)"
                let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
                let v796 : string = "="
                let v797 : bool = v793.Contains v796 
                let v812 : string =
                    if v797 then
                        v793
                    else
                        let v802 : string = "]"
                        let v803 : bool = v793.EndsWith (v802, false, null)
                        if v803 then
                            let v806 : string = $"={{version='*',features=["
                            let v807 : string = "["
                            let v808 : string = v793.Replace (v807, v806)
                            let v809 : string = $"{v808}}}"
                            v809
                        else
                            let v810 : string = $"{v793}='*'"
                            v810
                let v813 : string = "true; $0 }).collect::<Vec<_>>()"
                let v814 : bool = Fable.Core.RustInterop.emitRustExpr v812 v813 
                let v815 : string = "_vec_map"
                let v816 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v815 
                let v817 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v818 : (string []) = Fable.Core.RustInterop.emitRustExpr v816 v817 
                let v823 : unit = ()
                let _let'_v823 =
                    seq {
                        for i = 0 to v818.Length - 1 do yield v818.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v826 : string seq = _let'_v823 
                let v834 : string = method69()
                let v835 : (string -> (string seq -> string)) = String.concat
                let v836 : (string seq -> string) = v835 v834
                let v837 : string = v836 v826
                
                
                let v841 : bool =
                    match v253 with
                    | US10_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v845 : US5 =
                    if v841 then
                        let v842 : string = "Erlang"
                        US5_0(v842)
                    else
                        US5_1
                let v859 : US5 =
                    match v845 with
                    | US5_1 -> (* None *)
                        let v848 : bool =
                            match v253 with
                            | US10_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v852 : US5 =
                            if v848 then
                                let v849 : string = "JavaScript"
                                US5_0(v849)
                            else
                                US5_1
                        match v852 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v853) -> (* Some *)
                            US5_0(v853)
                    | US5_0(v846) -> (* Some *)
                        US5_0(v846)
                let v863 : string =
                    match v859 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v860) -> (* Some *)
                        v860
                let v865 : (unit -> string) = v863.ToLower
                let v866 : string = v865 ()
                let v871 : string = "_real"
                let v872 : bool = v117.Contains v871 
                let v877 : string =
                    if v872 then
                        let v875 : string = "main_real"
                        v875
                    else
                        let v876 : string = "main"
                        v876
                let v878 : string = $"name = \"{v877}\""
                let v879 : string = $"target = \"{v866}\""
                let v882 : string = "\n"
                let v883 : string = v878 + v882 
                let v887 : string = v883 + v879 
                let v890 : string = $""
                let v892 : string = v887 + v882 
                let v896 : string = v892 + v890 
                let v899 : string = $"[dependencies]"
                let v901 : string = v896 + v882 
                let v905 : string = v901 + v899 
                let v908 : string = $"{v837}"
                let v910 : string = v905 + v882 
                let v914 : string = v910 + v908 
                method70(v691, v914)
                let v918 : System.Threading.CancellationToken option = None
                let v921 : (struct (string * string) []) = [||]
                let v923 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v927 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v931 : string option = None
                let v934 : string = $"gleam check"
                let v936 : string option = Some v689 
                let v939 : bool = true
                let struct (v940 : int32, v941 : string) = method91(v934, v918, v921, v923, v927, v939, v936)
                let v943 : bool = v940 <> 0 
                let struct (v2213 : US5, v2214 : US5, v2215 : US5, v2216 : US5) =
                    if v943 then
                        let v1006 : unit = ()
                        let v1007 : (unit -> unit) = closure68(v117, v941, v940)
                        let v1008 : unit = (fun () -> v1007 (); v1006) ()
                        let v1069 : US5 = US5_0(v497)
                        let v1070 : US5 = US5_1
                        let v1071 : US5 = US5_1
                        let v1072 : US5 = US5_1
                        struct (v1069, v1070, v1071, v1072)
                    else
                        let v1073 : bool =
                            match v253 with
                            | US10_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v1076 : string =
                            if v1073 then
                                let v1074 : string = $"gleam run --no-print-progress \"{v117}\""
                                v1074
                            else
                                let v1075 : string = $"gleam build --no-print-progress"
                                v1075
                        let v1077 : string = "TRACE_LEVEL"
                        let v1078 : string = "GLEAM_LOG"
                        let v1079 : string = "GLEAM_LOG_NOCOLOUR"
                        let v1080 : (struct (string * string) []) = [|struct (v1077, v682); struct (v1078, v682); struct (v1079, v682)|]
                        let v1082 : System.Threading.CancellationToken option = None
                        let v1085 : (struct (string * string) []) = [||]
                        let v1087 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1091 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1095 : string option = None
                        let v1099 : string option = Some v689 
                        let v1102 : bool = true
                        let struct (v1103 : int32, v1104 : string) = method91(v1076, v1082, v1080, v1087, v1091, v1102, v1099)
                        let v1105 : int32 = v1080.Length
                        let v1106 : (string []) = Array.zeroCreate<string> (v1105)
                        let v1107 : Mut5 = {l0 = 0} : Mut5
                        while method29(v1105, v1107) do
                            let v1109 : int32 = v1107.l0
                            let struct (v1110 : string, v1111 : string) = v1080.[int v1109]
                            let v1112 : string = $"$env:{v1110}=''{v1111}''"
                            v1106.[int v1109] <- v1112
                            let v1113 : int32 = v1109 + 1
                            v1107.l0 <- v1113
                            ()
                        let v1115 : string seq = v1106 |> Seq.ofArray
                        let v1120 : (string -> (string seq -> string)) = String.concat
                        let v1121 : string = ";"
                        let v1122 : (string seq -> string) = v1120 v1121
                        let v1123 : string = v1122 v1115
                        let v1126 : string = $"pwsh -c '{v1123}; {v1076}'"
                        let v1128 : bool = v1103 <> 0 
                        let struct (v2209 : US5, v2210 : US5, v2211 : US5, v2212 : US5) =
                            if v1128 then
                                let v1191 : unit = ()
                                let v1192 : (unit -> unit) = closure69(v117, v1104, v1103, v1126)
                                let v1193 : unit = (fun () -> v1192 (); v1191) ()
                                let v1254 : US5 = US5_0(v497)
                                let v1255 : US5 = US5_1
                                let v1256 : US5 = US5_1
                                let v1257 : US5 = US5_1
                                struct (v1254, v1255, v1256, v1257)
                            else
                                let v1258 : bool =
                                    match v253 with
                                    | US10_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v2110 : string =
                                    if v1258 then
                                        v1104
                                    else
                                        let v1259 : string = $"{v689}/build/dev/javascript/main/main.mjs"
                                        (* run_target_args'
                                        let v1264 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v1269 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1270 : string = "std::fs::read(&*$0)"
                                        let v1271 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1259 v1270 
                                        (* run_target_args'
                                        let v1273 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1274 : string = "$0.unwrap()"
                                        let v1275 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1271 v1274 
                                        let _run_target_args'_v1273 = v1275 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1276 : string = "$0.unwrap()"
                                        let v1277 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1271 v1276 
                                        let _run_target_args'_v1273 = v1277 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1278 : string = "$0.unwrap()"
                                        let v1279 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1271 v1278 
                                        let _run_target_args'_v1273 = v1279 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1280 : Vec<uint8> = match v1271 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1273 = v1280 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1281 : Vec<uint8> = match v1271 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1273 = v1281 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1282 : Vec<uint8> = match v1271 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1273 = v1282 
                                        #endif
#else
                                        let v1283 : Vec<uint8> = match v1271 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1273 = v1283 
                                        #endif
                                        let v1284 : Vec<uint8> = _run_target_args'_v1273 
                                        let _run_target_args'_v1269 = v1284 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1288 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1269 = v1288 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1292 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1269 = v1292 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1296 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1269 = v1296 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1300 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1269 = v1300 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1304 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1269 = v1304 
                                        #endif
#else
                                        let v1307 : (uint8 []) = v1259 |> System.IO.File.ReadAllBytes
                                        let v1308 : string = "$0.to_vec()"
                                        let v1309 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1307 v1308 
                                        let _run_target_args'_v1269 = v1309 
                                        #endif
                                        let v1310 : Vec<uint8> = _run_target_args'_v1269 
                                        let v1319 : Vec<uint8> = method25(v1310)
                                        let v1320 : string = "std::string::String::from_utf8($0)"
                                        let v1321 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1319 v1320 
                                        (* run_target_args'
                                        let v1323 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1324 : string = "$0.unwrap()"
                                        let v1325 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1321 v1324 
                                        let _run_target_args'_v1323 = v1325 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1326 : string = "$0.unwrap()"
                                        let v1327 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1321 v1326 
                                        let _run_target_args'_v1323 = v1327 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1328 : string = "$0.unwrap()"
                                        let v1329 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1321 v1328 
                                        let _run_target_args'_v1323 = v1329 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1330 : std_string_String = match v1321 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1323 = v1330 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1331 : std_string_String = match v1321 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1323 = v1331 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1332 : std_string_String = match v1321 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1323 = v1332 
                                        #endif
#else
                                        let v1333 : std_string_String = match v1321 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1323 = v1333 
                                        #endif
                                        let v1334 : std_string_String = _run_target_args'_v1323 
                                        let v1337 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1338 : string = Fable.Core.RustInterop.emitRustExpr v1334 v1337 
                                        let _run_target_args'_v1264 = v1338 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1340 : string = null |> unbox<string>
                                        let _run_target_args'_v1264 = v1340 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1344 : string = null |> unbox<string>
                                        let _run_target_args'_v1264 = v1344 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1348 : string = null |> unbox<string>
                                        let _run_target_args'_v1264 = v1348 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1352 : string = null |> unbox<string>
                                        let _run_target_args'_v1264 = v1352 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1356 : string = null |> unbox<string>
                                        let _run_target_args'_v1264 = v1356 
                                        #endif
#else
                                        let v1359 : string = v1259 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v1264 = v1359 
                                        #endif
                                        let v1360 : string = _run_target_args'_v1264 
                                        let v1369 : string = $"#app_"
                                        let v1370 : string = $"#app_{v606}"
                                        let v1371 : string = v1360.Replace (v1369, v1370)
                                        let v1374 : string = "main()"
                                        let v1375 : bool = v1371.EndsWith (v1374, false, null)
                                        let v1378 : bool = v1375 = false
                                        if v1378 then
                                            let v1379 : string = $"{v1371}
main()"
                                            method70(v1259, v1379)
                                        let v1381 : System.Threading.CancellationToken option = None
                                        let v1384 : (struct (string * string) []) = [||]
                                        let v1386 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v1390 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v1394 : string option = None
                                        let v1397 : string = $"bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir={v686} {v1259}"
                                        let v1398 : string = "PATH"
                                        let v1399 : string = method3(v1398)
                                        let v1400 : bool = v1399 = ""
                                        let v1438 : US5 =
                                            if v1400 then
                                                US5_1
                                            else
                                                (* run_target_args'
                                                let v1403 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1404 : string = "cfg!(windows)"
                                                let v1405 : bool = Fable.Core.RustInterop.emitRustExpr () v1404 
                                                let _run_target_args'_v1403 = v1405 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1406 : string = "cfg!(windows)"
                                                let v1407 : bool = Fable.Core.RustInterop.emitRustExpr () v1406 
                                                let _run_target_args'_v1403 = v1407 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1408 : string = "cfg!(windows)"
                                                let v1409 : bool = Fable.Core.RustInterop.emitRustExpr () v1408 
                                                let _run_target_args'_v1403 = v1409 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1410 : US3 = US3_0
                                                let v1411 : US4 = US4_5(v1410)
                                                let v1412 : string = $"platform.is_windows / target: {v1411}"
                                                let v1413 : bool = failwith<bool> v1412
                                                let _run_target_args'_v1403 = v1413 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1414 : US3 = US3_0
                                                let v1415 : US4 = US4_6(v1414)
                                                let v1416 : string = $"platform.is_windows / target: {v1415}"
                                                let v1417 : bool = failwith<bool> v1416
                                                let _run_target_args'_v1403 = v1417 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1418 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v1419 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v1420 : bool = v1419 v1418
                                                let _run_target_args'_v1403 = v1420 
                                                #endif
#else
                                                let v1421 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v1422 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v1423 : bool = v1422 v1421
                                                let _run_target_args'_v1403 = v1423 
                                                #endif
                                                let v1424 : bool = _run_target_args'_v1403 
                                                let v1434 : string =
                                                    if v1424 then
                                                        v1121
                                                    else
                                                        let v1433 : string = ":"
                                                        v1433
                                                let v1435 : string = "~/.bun/bin"
                                                let v1436 : string = $"{v1435}{v1434}{v1399}"
                                                US5_0(v1436)
                                        let v1443 : (struct (string * string) []) =
                                            match v1438 with
                                            | US5_1 -> (* None *)
                                                [||]
                                            | US5_0(v1439) -> (* Some *)
                                                [|struct (v1398, v1439)|]
                                        let v1445 : string option = Some v689 
                                        let v1448 : bool = true
                                        let struct (v1449 : int32, v1450 : string) = method91(v1397, v1381, v1443, v1386, v1390, v1448, v1445)
                                        let v1452 : bool = v1449 <> 0 
                                        if v1452 then
                                            let v1515 : unit = ()
                                            let v1516 : (unit -> unit) = closure70(v117, v1450, v1449)
                                            let v1517 : unit = (fun () -> v1516 (); v1515) ()
                                            v682
                                        else
                                            let v1578 : string = $"<!DOCTYPE html>"
                                            let v1579 : string = $"<html lang=\"en\">"
                                            let v1581 : string = v1578 + v882 
                                            let v1585 : string = v1581 + v1579 
                                            let v1588 : string = $"  <head>"
                                            let v1590 : string = v1585 + v882 
                                            let v1594 : string = v1590 + v1588 
                                            let v1597 : string = $"    <meta charset=\"UTF-8\" />"
                                            let v1599 : string = v1594 + v882 
                                            let v1603 : string = v1599 + v1597 
                                            let v1606 : string = $"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />"
                                            let v1608 : string = v1603 + v882 
                                            let v1612 : string = v1608 + v1606 
                                            let v1615 : string = $"    <link"
                                            let v1617 : string = v1612 + v882 
                                            let v1621 : string = v1617 + v1615 
                                            let v1624 : string = $"      data-trunk"
                                            let v1626 : string = v1621 + v882 
                                            let v1630 : string = v1626 + v1624 
                                            let v1633 : string = $"      rel=\"inline\""
                                            let v1635 : string = v1630 + v882 
                                            let v1639 : string = v1635 + v1633 
                                            let v1642 : string = $"      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\""
                                            let v1644 : string = v1639 + v882 
                                            let v1648 : string = v1644 + v1642 
                                            let v1651 : string = $"    />"
                                            let v1653 : string = v1648 + v882 
                                            let v1657 : string = v1653 + v1651 
                                            let v1660 : string = $"    <link"
                                            let v1662 : string = v1657 + v882 
                                            let v1666 : string = v1662 + v1660 
                                            let v1669 : string = $"      data-trunk"
                                            let v1671 : string = v1666 + v882 
                                            let v1675 : string = v1671 + v1669 
                                            let v1678 : string = $"      rel=\"inline\""
                                            let v1680 : string = v1675 + v882 
                                            let v1684 : string = v1680 + v1678 
                                            let v1687 : string = $"      type=\"module\""
                                            let v1689 : string = v1684 + v882 
                                            let v1693 : string = v1689 + v1687 
                                            let v1696 : string = $"      href=\"main.js\""
                                            let v1698 : string = v1693 + v882 
                                            let v1702 : string = v1698 + v1696 
                                            let v1705 : string = $"    />"
                                            let v1707 : string = v1702 + v882 
                                            let v1711 : string = v1707 + v1705 
                                            let v1714 : string = $"  </head>"
                                            let v1716 : string = v1711 + v882 
                                            let v1720 : string = v1716 + v1714 
                                            let v1723 : string = $"  <body>"
                                            let v1725 : string = v1720 + v882 
                                            let v1729 : string = v1725 + v1723 
                                            let v1732 : string = $"    <div id=\"app_{v606}\"></div>"
                                            let v1734 : string = v1729 + v882 
                                            let v1738 : string = v1734 + v1732 
                                            let v1741 : string = $"  </body>"
                                            let v1743 : string = v1738 + v882 
                                            let v1747 : string = v1743 + v1741 
                                            let v1750 : string = $"</html>"
                                            let v1752 : string = v1747 + v882 
                                            let v1756 : string = v1752 + v1750 
                                            let v1759 : string = $"{v686}/index.html"
                                            method70(v1759, v1756)
                                            let v1760 : string = $"{v686}/spiral_{v606}.rs"
                                            method70(v1760, v682)
                                            let v1761 : string = $"[package]"
                                            let v1762 : string = $"name = \"spiral_{v606}\""
                                            let v1764 : string = v1761 + v882 
                                            let v1768 : string = v1764 + v1762 
                                            let v1771 : string = $""
                                            let v1773 : string = v1768 + v882 
                                            let v1777 : string = v1773 + v1771 
                                            let v1780 : string = $"[workspace]"
                                            let v1782 : string = v1777 + v882 
                                            let v1786 : string = v1782 + v1780 
                                            let v1789 : string = $""
                                            let v1791 : string = v1786 + v882 
                                            let v1795 : string = v1791 + v1789 
                                            let v1798 : string = $"[lib]"
                                            let v1800 : string = v1795 + v882 
                                            let v1804 : string = v1800 + v1798 
                                            let v1807 : string = $"crate-type = [\"cdylib\", \"rlib\"]"
                                            let v1809 : string = v1804 + v882 
                                            let v1813 : string = v1809 + v1807 
                                            let v1816 : string = $"path = \"spiral_{v606}.rs\""
                                            let v1818 : string = v1813 + v882 
                                            let v1822 : string = v1818 + v1816 
                                            let v1825 : string = $""
                                            let v1827 : string = v1822 + v882 
                                            let v1831 : string = v1827 + v1825 
                                            let v1834 : string = $"[dependencies]"
                                            let v1836 : string = v1831 + v882 
                                            let v1840 : string = v1836 + v1834 
                                            let v1843 : string = $"{v686}/Cargo.toml"
                                            method70(v1843, v1840)
                                            let v1845 : System.Threading.CancellationToken option = None
                                            let v1848 : (struct (string * string) []) = [||]
                                            let v1850 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v1854 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v1858 : string option = None
                                            let v1861 : string = $"trunk build --release --minify --dist={v686} --public-url=./ --no-sri"
                                            let v1862 : string = "TRUNK_TOOLS_WASM_BINDGEN"
                                            let v1863 : string = "0.2.93"
                                            let v1864 : (struct (string * string) []) = [|struct (v1862, v1863)|]
                                            let v1866 : string option = Some v686 
                                            let v1869 : bool = true
                                            let struct (v1870 : int32, v1871 : string) = method91(v1861, v1845, v1864, v1850, v1854, v1869, v1866)
                                            let v1873 : bool = v1870 <> 0 
                                            if v1873 then
                                                let v1936 : unit = ()
                                                let v1937 : (unit -> unit) = closure71(v117, v1871, v1870)
                                                let v1938 : unit = (fun () -> v1937 (); v1936) ()
                                                v682
                                            else
                                                (* run_target_args'
                                                let v2003 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v2008 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2009 : string = "std::fs::read(&*$0)"
                                                let v2010 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1759 v2009 
                                                (* run_target_args'
                                                let v2012 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2013 : string = "$0.unwrap()"
                                                let v2014 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2010 v2013 
                                                let _run_target_args'_v2012 = v2014 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2015 : string = "$0.unwrap()"
                                                let v2016 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2010 v2015 
                                                let _run_target_args'_v2012 = v2016 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2017 : string = "$0.unwrap()"
                                                let v2018 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2010 v2017 
                                                let _run_target_args'_v2012 = v2018 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2019 : Vec<uint8> = match v2010 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2012 = v2019 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2020 : Vec<uint8> = match v2010 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2012 = v2020 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2021 : Vec<uint8> = match v2010 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2012 = v2021 
                                                #endif
#else
                                                let v2022 : Vec<uint8> = match v2010 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2012 = v2022 
                                                #endif
                                                let v2023 : Vec<uint8> = _run_target_args'_v2012 
                                                let _run_target_args'_v2008 = v2023 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2027 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v2008 = v2027 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2031 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v2008 = v2031 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2035 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v2008 = v2035 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2039 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v2008 = v2039 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2043 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v2008 = v2043 
                                                #endif
#else
                                                let v2046 : (uint8 []) = v1759 |> System.IO.File.ReadAllBytes
                                                let v2047 : string = "$0.to_vec()"
                                                let v2048 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2046 v2047 
                                                let _run_target_args'_v2008 = v2048 
                                                #endif
                                                let v2049 : Vec<uint8> = _run_target_args'_v2008 
                                                let v2058 : Vec<uint8> = method25(v2049)
                                                let v2059 : string = "std::string::String::from_utf8($0)"
                                                let v2060 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2058 v2059 
                                                (* run_target_args'
                                                let v2062 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2063 : string = "$0.unwrap()"
                                                let v2064 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2060 v2063 
                                                let _run_target_args'_v2062 = v2064 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2065 : string = "$0.unwrap()"
                                                let v2066 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2060 v2065 
                                                let _run_target_args'_v2062 = v2066 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2067 : string = "$0.unwrap()"
                                                let v2068 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2060 v2067 
                                                let _run_target_args'_v2062 = v2068 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2069 : std_string_String = match v2060 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2062 = v2069 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2070 : std_string_String = match v2060 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2062 = v2070 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2071 : std_string_String = match v2060 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2062 = v2071 
                                                #endif
#else
                                                let v2072 : std_string_String = match v2060 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2062 = v2072 
                                                #endif
                                                let v2073 : std_string_String = _run_target_args'_v2062 
                                                let v2076 : string = "fable_library_rust::String_::fromString($0)"
                                                let v2077 : string = Fable.Core.RustInterop.emitRustExpr v2073 v2076 
                                                let _run_target_args'_v2003 = v2077 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2079 : string = null |> unbox<string>
                                                let _run_target_args'_v2003 = v2079 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2083 : string = null |> unbox<string>
                                                let _run_target_args'_v2003 = v2083 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2087 : string = null |> unbox<string>
                                                let _run_target_args'_v2003 = v2087 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2091 : string = null |> unbox<string>
                                                let _run_target_args'_v2003 = v2091 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2095 : string = null |> unbox<string>
                                                let _run_target_args'_v2003 = v2095 
                                                #endif
#else
                                                let v2098 : string = v1759 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v2003 = v2098 
                                                #endif
                                                let v2099 : string = _run_target_args'_v2003 
                                                v2099
                                (* run_target_args'
                                let v2115 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2116 : string = "&*$0"
                                let v2117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2110 v2116 
                                let _run_target_args'_v2115 = v2117 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2118 : string = "&*$0"
                                let v2119 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2110 v2118 
                                let _run_target_args'_v2115 = v2119 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2120 : string = "&*$0"
                                let v2121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2110 v2120 
                                let _run_target_args'_v2115 = v2121 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2123 : Ref<Str> = v2110 |> unbox<Ref<Str>>
                                let _run_target_args'_v2115 = v2123 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2127 : Ref<Str> = v2110 |> unbox<Ref<Str>>
                                let _run_target_args'_v2115 = v2127 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2131 : Ref<Str> = v2110 |> unbox<Ref<Str>>
                                let _run_target_args'_v2115 = v2131 
                                #endif
#else
                                let v2135 : Ref<Str> = v2110 |> unbox<Ref<Str>>
                                let _run_target_args'_v2115 = v2135 
                                #endif
                                let v2138 : Ref<Str> = _run_target_args'_v2115 
                                (* run_target_args'
                                let v2151 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2152 : string = "String::from($0)"
                                let v2153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2138 v2152 
                                let _run_target_args'_v2151 = v2153 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2154 : string = "String::from($0)"
                                let v2155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2138 v2154 
                                let _run_target_args'_v2151 = v2155 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2156 : string = "String::from($0)"
                                let v2157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2138 v2156 
                                let _run_target_args'_v2151 = v2157 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2159 : std_string_String = v2138 |> unbox<std_string_String>
                                let _run_target_args'_v2151 = v2159 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2163 : std_string_String = v2138 |> unbox<std_string_String>
                                let _run_target_args'_v2151 = v2163 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2167 : std_string_String = v2138 |> unbox<std_string_String>
                                let _run_target_args'_v2151 = v2167 
                                #endif
#else
                                let v2171 : std_string_String = v2138 |> unbox<std_string_String>
                                let _run_target_args'_v2151 = v2171 
                                #endif
                                let v2174 : std_string_String = _run_target_args'_v2151 
                                let v2183 : (string -> US5) = closure72()
                                let v2184 : (unit -> string) = closure73(v2110)
                                let v2185 : (exn -> US5) = closure74(v117, v1126, v2174)
                                let v2187 : US5 = US5_1
                                let result = ref v2187
                                try
                                    result.Value <- v2184 () |> v2183 
                                with ex ->
                                    result.Value <- v2185 ex 
                                let v2188 : US5 = result.Value
                                let v2202 : string option =
                                    match v2188 with
                                    | US5_1 -> (* None *)
                                        let v2198 : string option = None
                                        v2198
                                    | US5_0(v2192) -> (* Some *)
                                        let v2194 : string option = Some v2192 
                                        v2194
                                let v2203 : string = "$0.unwrap()"
                                let v2204 : string = Fable.Core.RustInterop.emitRustExpr v2202 v2203 
                                let v2205 : US5 = US5_0(v497)
                                let v2206 : US5 = US5_0(v427)
                                let v2207 : US5 = US5_0(v117)
                                let v2208 : US5 = US5_0(v2204)
                                struct (v2205, v2206, v2207, v2208)
                        struct (v2209, v2210, v2211, v2212)
                let v2219 : string =
                    match v2213 with
                    | US5_1 -> (* None *)
                        v682
                    | US5_0(v2217) -> (* Some *)
                        v2217
                let v2222 : string =
                    match v2214 with
                    | US5_1 -> (* None *)
                        v682
                    | US5_0(v2220) -> (* Some *)
                        v2220
                let v2223 : string = "code"
                let v2226 : string =
                    match v2216 with
                    | US5_1 -> (* None *)
                        v682
                    | US5_0(v2224) -> (* Some *)
                        v2224
                let v2227 : string = "output"
                let v2228 : (struct (string * string) []) = [|struct (v459, v2219); struct (v2223, v2222); struct (v2227, v2226)|]
                let v2229 : string = "$0.to_vec()"
                let v2230 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2228 v2229 
                let v2231 : unit = ()
                let v2232 : string = $"true; let _func1_from_v2231 = Func1::from(move |value| {{ //"
                let v2233 : bool = Fable.Core.RustInterop.emitRustExpr () v2232 
                let v2234 : string = $"value"
                let struct (v2235 : string, v2236 : string) = Fable.Core.RustInterop.emitRustExpr () v2234 
                (* run_target_args'
                let v2241 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2242 : string = "&*$0"
                let v2243 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2235 v2242 
                let _run_target_args'_v2241 = v2243 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2244 : string = "&*$0"
                let v2245 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2235 v2244 
                let _run_target_args'_v2241 = v2245 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2246 : string = "&*$0"
                let v2247 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2235 v2246 
                let _run_target_args'_v2241 = v2247 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2249 : Ref<Str> = v2235 |> unbox<Ref<Str>>
                let _run_target_args'_v2241 = v2249 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2253 : Ref<Str> = v2235 |> unbox<Ref<Str>>
                let _run_target_args'_v2241 = v2253 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2257 : Ref<Str> = v2235 |> unbox<Ref<Str>>
                let _run_target_args'_v2241 = v2257 
                #endif
#else
                let v2261 : Ref<Str> = v2235 |> unbox<Ref<Str>>
                let _run_target_args'_v2241 = v2261 
                #endif
                let v2264 : Ref<Str> = _run_target_args'_v2241 
                (* run_target_args'
                let v2277 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2278 : string = "String::from($0)"
                let v2279 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2264 v2278 
                let _run_target_args'_v2277 = v2279 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2280 : string = "String::from($0)"
                let v2281 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2264 v2280 
                let _run_target_args'_v2277 = v2281 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2282 : string = "String::from($0)"
                let v2283 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2264 v2282 
                let _run_target_args'_v2277 = v2283 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2285 : std_string_String = v2264 |> unbox<std_string_String>
                let _run_target_args'_v2277 = v2285 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2289 : std_string_String = v2264 |> unbox<std_string_String>
                let _run_target_args'_v2277 = v2289 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2293 : std_string_String = v2264 |> unbox<std_string_String>
                let _run_target_args'_v2277 = v2293 
                #endif
#else
                let v2297 : std_string_String = v2264 |> unbox<std_string_String>
                let _run_target_args'_v2277 = v2297 
                #endif
                let v2300 : std_string_String = _run_target_args'_v2277 
                (* run_target_args'
                let v2313 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2314 : string = "&*$0"
                let v2315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2236 v2314 
                let _run_target_args'_v2313 = v2315 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2316 : string = "&*$0"
                let v2317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2236 v2316 
                let _run_target_args'_v2313 = v2317 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2318 : string = "&*$0"
                let v2319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2236 v2318 
                let _run_target_args'_v2313 = v2319 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2321 : Ref<Str> = v2236 |> unbox<Ref<Str>>
                let _run_target_args'_v2313 = v2321 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2325 : Ref<Str> = v2236 |> unbox<Ref<Str>>
                let _run_target_args'_v2313 = v2325 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2329 : Ref<Str> = v2236 |> unbox<Ref<Str>>
                let _run_target_args'_v2313 = v2329 
                #endif
#else
                let v2333 : Ref<Str> = v2236 |> unbox<Ref<Str>>
                let _run_target_args'_v2313 = v2333 
                #endif
                let v2336 : Ref<Str> = _run_target_args'_v2313 
                (* run_target_args'
                let v2349 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2350 : string = "String::from($0)"
                let v2351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2336 v2350 
                let _run_target_args'_v2349 = v2351 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2352 : string = "String::from($0)"
                let v2353 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2336 v2352 
                let _run_target_args'_v2349 = v2353 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2354 : string = "String::from($0)"
                let v2355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2336 v2354 
                let _run_target_args'_v2349 = v2355 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2357 : std_string_String = v2336 |> unbox<std_string_String>
                let _run_target_args'_v2349 = v2357 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2361 : std_string_String = v2336 |> unbox<std_string_String>
                let _run_target_args'_v2349 = v2361 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2365 : std_string_String = v2336 |> unbox<std_string_String>
                let _run_target_args'_v2349 = v2365 
                #endif
#else
                let v2369 : std_string_String = v2336 |> unbox<std_string_String>
                let _run_target_args'_v2349 = v2369 
                #endif
                let v2372 : std_string_String = _run_target_args'_v2349 
                let v2382 : (std_string_String * std_string_String) = v2300, v2372 
                let func1_from_result = v2382 //
                let v2385 : _ = func1_from_result
                let v2386 : string = $"true; $0 /*"
                let v2387 : bool = Fable.Core.RustInterop.emitRustExpr v2385 v2386 
                let v2388 : string = $"*/ }}); //"
                let v2389 : bool = Fable.Core.RustInterop.emitRustExpr () v2388 
                let v2390 : string = $"_func1_from_v2231"
                let v2391 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v2390 
                let v2392 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v2393 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v2391)
                let v2394 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2230, v2393) v2392 
                let v2395 : string = "std::collections::BTreeMap::from_iter(v2394.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v2396 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2395 
                let v2397 : string = "serde_json::to_string(&v2396)"
                let v2398 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v2397 
                (* run_target_args'
                let v2400 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2401 : string = "$0.unwrap()"
                let v2402 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2398 v2401 
                let _run_target_args'_v2400 = v2402 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2403 : string = "$0.unwrap()"
                let v2404 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2398 v2403 
                let _run_target_args'_v2400 = v2404 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2405 : string = "$0.unwrap()"
                let v2406 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2398 v2405 
                let _run_target_args'_v2400 = v2406 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2407 : std_string_String = match v2398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2400 = v2407 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2408 : std_string_String = match v2398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2400 = v2408 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2409 : std_string_String = match v2398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2400 = v2409 
                #endif
#else
                let v2410 : std_string_String = match v2398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2400 = v2410 
                #endif
                let v2411 : std_string_String = _run_target_args'_v2400 
                let v2414 : string = "fable_library_rust::String_::fromString($0)"
                let v2415 : string = Fable.Core.RustInterop.emitRustExpr v2411 v2414 
                let v2416 : string = "command_result"
                [|struct (v2416, v2415)|]
            else
                let v2418 : string = "fable_library_rust::String_::fromString($0)"
                let v2419 : string = Fable.Core.RustInterop.emitRustExpr v40 v2418 
                let v2420 : bool = v2419 = "cuda"
                if v2420 then
                    let v2421 : string = method163()
                    (* run_target_args'
                    let v2426 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2427 : string = "&*$0"
                    let v2428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2421 v2427 
                    let _run_target_args'_v2426 = v2428 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2429 : string = "&*$0"
                    let v2430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2421 v2429 
                    let _run_target_args'_v2426 = v2430 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2431 : string = "&*$0"
                    let v2432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2421 v2431 
                    let _run_target_args'_v2426 = v2432 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2434 : Ref<Str> = v2421 |> unbox<Ref<Str>>
                    let _run_target_args'_v2426 = v2434 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2438 : Ref<Str> = v2421 |> unbox<Ref<Str>>
                    let _run_target_args'_v2426 = v2438 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2442 : Ref<Str> = v2421 |> unbox<Ref<Str>>
                    let _run_target_args'_v2426 = v2442 
                    #endif
#else
                    let v2446 : Ref<Str> = v2421 |> unbox<Ref<Str>>
                    let _run_target_args'_v2426 = v2446 
                    #endif
                    let v2449 : Ref<Str> = _run_target_args'_v2426 
                    let v2458 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v2459 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2449) v2458 
                    let v2462 : (std_string_String -> US7) = method21()
                    let v2463 : US7 option = v2459 |> Option.map v2462 
                    let v2483 : US7 = US7_1
                    let v2484 : US7 = v2463 |> Option.defaultValue v2483 
                    let v2491 : std_string_String =
                        match v2484 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v2488) -> (* Some *)
                            v2488
                    let v2492 : string = "fable_library_rust::String_::fromString($0)"
                    let v2493 : string = Fable.Core.RustInterop.emitRustExpr v2491 v2492 
                    let v2494 : string = method164()
                    (* run_target_args'
                    let v2499 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2500 : string = "&*$0"
                    let v2501 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2494 v2500 
                    let _run_target_args'_v2499 = v2501 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2502 : string = "&*$0"
                    let v2503 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2494 v2502 
                    let _run_target_args'_v2499 = v2503 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2504 : string = "&*$0"
                    let v2505 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2494 v2504 
                    let _run_target_args'_v2499 = v2505 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2507 : Ref<Str> = v2494 |> unbox<Ref<Str>>
                    let _run_target_args'_v2499 = v2507 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2511 : Ref<Str> = v2494 |> unbox<Ref<Str>>
                    let _run_target_args'_v2499 = v2511 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2515 : Ref<Str> = v2494 |> unbox<Ref<Str>>
                    let _run_target_args'_v2499 = v2515 
                    #endif
#else
                    let v2519 : Ref<Str> = v2494 |> unbox<Ref<Str>>
                    let _run_target_args'_v2499 = v2519 
                    #endif
                    let v2522 : Ref<Str> = _run_target_args'_v2499 
                    let v2531 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v2532 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2522) v2531 
                    let v2535 : (std_string_String -> US7) = method21()
                    let v2536 : US7 option = v2532 |> Option.map v2535 
                    let v2556 : US7 = US7_1
                    let v2557 : US7 = v2536 |> Option.defaultValue v2556 
                    let v2618 : US36 =
                        match v2557 with
                        | US7_1 -> (* None *)
                            US36_1
                        | US7_0(v2561) -> (* Some *)
                            let v2562 : string = "fable_library_rust::String_::fromString($0)"
                            let v2563 : string = Fable.Core.RustInterop.emitRustExpr v2561 v2562 
                            
                            
                            
                            
                            let v2566 : string = "Poetry"
                            let v2567 : (unit -> string) = v2566.ToLower
                            let v2568 : string = v2567 ()
                            let v2573 : string = "Pip"
                            let v2574 : (unit -> string) = v2573.ToLower
                            let v2575 : string = v2574 ()
                            let v2578 : bool = "Pip" = v2563
                            let v2582 : US37 =
                                if v2578 then
                                    let v2579 : US38 = US38_0
                                    US37_0(v2579)
                                else
                                    US37_1
                            let v2614 : US37 =
                                match v2582 with
                                | US37_1 -> (* None *)
                                    let v2585 : bool = "Poetry" = v2563
                                    let v2589 : US37 =
                                        if v2585 then
                                            let v2586 : US38 = US38_1
                                            US37_0(v2586)
                                        else
                                            US37_1
                                    match v2589 with
                                    | US37_1 -> (* None *)
                                        let v2592 : bool = v2575 = v2563
                                        let v2596 : US37 =
                                            if v2592 then
                                                let v2593 : US38 = US38_0
                                                US37_0(v2593)
                                            else
                                                US37_1
                                        match v2596 with
                                        | US37_1 -> (* None *)
                                            let v2599 : bool = v2568 = v2563
                                            let v2603 : US37 =
                                                if v2599 then
                                                    let v2600 : US38 = US38_1
                                                    US37_0(v2600)
                                                else
                                                    US37_1
                                            match v2603 with
                                            | US37_1 -> (* None *)
                                                US37_1
                                            | US37_0(v2604) -> (* Some *)
                                                US37_0(v2604)
                                        | US37_0(v2597) -> (* Some *)
                                            US37_0(v2597)
                                    | US37_0(v2590) -> (* Some *)
                                        US37_0(v2590)
                                | US37_0(v2583) -> (* Some *)
                                    US37_0(v2583)
                            US36_0(v2614)
                    let v2625 : US37 =
                        match v2618 with
                        | US36_0(v2619) -> (* Some *)
                            match v2619 with
                            | US37_0(v2620) -> (* Some *)
                                US37_0(v2620)
                            | _ ->
                                US37_1
                        | _ ->
                            US37_1
                    let v2629 : US38 =
                        match v2625 with
                        | US37_1 -> (* None *)
                            US38_0
                        | US37_0(v2626) -> (* Some *)
                            v2626
                    let v2630 : string = method23()
                    (* run_target_args'
                    let v2635 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2636 : string = "&*$0"
                    let v2637 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2630 v2636 
                    let _run_target_args'_v2635 = v2637 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2638 : string = "&*$0"
                    let v2639 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2630 v2638 
                    let _run_target_args'_v2635 = v2639 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2640 : string = "&*$0"
                    let v2641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2630 v2640 
                    let _run_target_args'_v2635 = v2641 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2643 : Ref<Str> = v2630 |> unbox<Ref<Str>>
                    let _run_target_args'_v2635 = v2643 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2647 : Ref<Str> = v2630 |> unbox<Ref<Str>>
                    let _run_target_args'_v2635 = v2647 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2651 : Ref<Str> = v2630 |> unbox<Ref<Str>>
                    let _run_target_args'_v2635 = v2651 
                    #endif
#else
                    let v2655 : Ref<Str> = v2630 |> unbox<Ref<Str>>
                    let _run_target_args'_v2635 = v2655 
                    #endif
                    let v2658 : Ref<Str> = _run_target_args'_v2635 
                    let v2667 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v2668 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2658) v2667 
                    let v2671 : (Vec<std_string_String> -> US11) = method24()
                    let v2672 : US11 option = v2668 |> Option.map v2671 
                    let v2692 : US11 = US11_1
                    let v2693 : US11 = v2672 |> Option.defaultValue v2692 
                    let v2697 : (std_string_String []) = [||]
                    let v2698 : string = "$0.to_vec()"
                    let v2699 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2697 v2698 
                    let v2702 : Vec<std_string_String> =
                        match v2693 with
                        | US11_1 -> (* None *)
                            v2699
                        | US11_0(v2700) -> (* Some *)
                            v2700
                    (* run_target_args'
                    let v2707 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v2712 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2713 : string = "std::fs::read(&*$0)"
                    let v2714 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2493 v2713 
                    (* run_target_args'
                    let v2716 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2717 : string = "$0.unwrap()"
                    let v2718 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2714 v2717 
                    let _run_target_args'_v2716 = v2718 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2719 : string = "$0.unwrap()"
                    let v2720 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2714 v2719 
                    let _run_target_args'_v2716 = v2720 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2721 : string = "$0.unwrap()"
                    let v2722 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2714 v2721 
                    let _run_target_args'_v2716 = v2722 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2723 : Vec<uint8> = match v2714 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2716 = v2723 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2724 : Vec<uint8> = match v2714 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2716 = v2724 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2725 : Vec<uint8> = match v2714 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2716 = v2725 
                    #endif
#else
                    let v2726 : Vec<uint8> = match v2714 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2716 = v2726 
                    #endif
                    let v2727 : Vec<uint8> = _run_target_args'_v2716 
                    let _run_target_args'_v2712 = v2727 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2731 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2712 = v2731 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2735 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2712 = v2735 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2739 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2712 = v2739 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2743 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2712 = v2743 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2747 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2712 = v2747 
                    #endif
#else
                    let v2750 : (uint8 []) = v2493 |> System.IO.File.ReadAllBytes
                    let v2751 : string = "$0.to_vec()"
                    let v2752 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2750 v2751 
                    let _run_target_args'_v2712 = v2752 
                    #endif
                    let v2753 : Vec<uint8> = _run_target_args'_v2712 
                    let v2762 : Vec<uint8> = method25(v2753)
                    let v2763 : string = "std::string::String::from_utf8($0)"
                    let v2764 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2762 v2763 
                    (* run_target_args'
                    let v2766 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2767 : string = "$0.unwrap()"
                    let v2768 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2764 v2767 
                    let _run_target_args'_v2766 = v2768 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2769 : string = "$0.unwrap()"
                    let v2770 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2764 v2769 
                    let _run_target_args'_v2766 = v2770 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2771 : string = "$0.unwrap()"
                    let v2772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2764 v2771 
                    let _run_target_args'_v2766 = v2772 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2773 : std_string_String = match v2764 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2766 = v2773 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2774 : std_string_String = match v2764 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2766 = v2774 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2775 : std_string_String = match v2764 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2766 = v2775 
                    #endif
#else
                    let v2776 : std_string_String = match v2764 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2766 = v2776 
                    #endif
                    let v2777 : std_string_String = _run_target_args'_v2766 
                    let v2780 : string = "fable_library_rust::String_::fromString($0)"
                    let v2781 : string = Fable.Core.RustInterop.emitRustExpr v2777 v2780 
                    let _run_target_args'_v2707 = v2781 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2783 : string = null |> unbox<string>
                    let _run_target_args'_v2707 = v2783 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2787 : string = null |> unbox<string>
                    let _run_target_args'_v2707 = v2787 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2791 : string = null |> unbox<string>
                    let _run_target_args'_v2707 = v2791 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2795 : string = null |> unbox<string>
                    let _run_target_args'_v2707 = v2795 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2799 : string = null |> unbox<string>
                    let _run_target_args'_v2707 = v2799 
                    #endif
#else
                    let v2802 : string = v2493 |> System.IO.File.ReadAllText
                    let _run_target_args'_v2707 = v2802 
                    #endif
                    let v2803 : string = _run_target_args'_v2707 
                    let v2812 : string = method31()
                    let v2813 : US5 = method32(v2812)
                    let v2819 : US5 =
                        match v2813 with
                        | US5_1 -> (* None *)
                            let v2816 : string = __SOURCE_DIRECTORY__
                            method32(v2816)
                        | US5_0(v2814) -> (* Some *)
                            US5_0(v2814)
                    let v2825 : US5 =
                        match v2819 with
                        | US5_1 -> (* None *)
                            let v2822 : string = "/workspaces"
                            method32(v2822)
                        | US5_0(v2820) -> (* Some *)
                            US5_0(v2820)
                    let v2829 : string =
                        match v2825 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v2826) -> (* Some *)
                            v2826
                    let v2830 : string = method50(v2829)
                    let v2831 : bool = "deps" = v2830
                    let v2842 : string =
                        if v2831 then
                            let v2832 : string option = method38(v2829)
                            let v2834 : string = v2832 |> Option.get
                            let v2837 : US5 = method32(v2834)
                            match v2837 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v2838) -> (* Some *)
                                v2838
                        else
                            v2829
                    let v2843 : string = "polyglot"
                    let v2844 : string = method33(v2842, v2843)
                    let v2845 : string = method31()
                    let v2847 : (unit -> string) = v2845.ToLower
                    let v2848 : string = v2847 ()
                    let v2852 : (unit -> string) = v2844.ToLower
                    let v2853 : string = v2852 ()
                    let v2857 : bool = v2848.StartsWith (v2853, false, null)
                    let v2862 : US13 =
                        if v2857 then
                            US13_1(v2853)
                        else
                            US13_0(v2853)
                    let v2874 : Result<string, string> =
                        match v2862 with
                        | US13_1(v2868) -> (* Error *)
                            let v2870 : Result<string, string> = Error v2868 
                            v2870
                        | US13_0(v2863) -> (* Ok *)
                            let v2865 : Result<string, string> = Ok v2863 
                            v2865
                    let v2875 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v2876 : bool = Fable.Core.RustInterop.emitRustExpr v2874 v2875 
                    let v2877 : string = "x"
                    let v2878 : string = Fable.Core.RustInterop.emitRustExpr () v2877 
                    let v2879 : string = "true; $0 })"
                    let v2880 : bool = Fable.Core.RustInterop.emitRustExpr v2878 v2879 
                    let v2881 : string = "_result_unwrap_or_else"
                    let v2882 : string = Fable.Core.RustInterop.emitRustExpr () v2881 
                    let v2883 : string option = method38(v2493)
                    let v2886 : string = ""
                    let v2887 : string = v2883 |> Option.defaultValue v2886 
                    let v2895 : string =
                        match v2629 with
                        | US38_0 -> (* Pip *)
                            let v2890 : string = "requirements.txt"
                            method33(v2887, v2890)
                        | US38_1 -> (* Poetry *)
                            let v2892 : string = "pyproject.toml"
                            method33(v2887, v2892)
                    let v2896 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v2897 : bool = Fable.Core.RustInterop.emitRustExpr v2702 v2896 
                    let v2898 : string = "x"
                    let v2899 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2898 
                    let v2900 : string = "fable_library_rust::String_::fromString($0)"
                    let v2901 : string = Fable.Core.RustInterop.emitRustExpr v2899 v2900 
                    let v2904 : string = "="
                    let v2905 : bool = v2901.Contains v2904 
                    let v2920 : string =
                        if v2905 then
                            v2901
                        else
                            let v2910 : string = "]"
                            let v2911 : bool = v2901.EndsWith (v2910, false, null)
                            if v2911 then
                                let v2914 : string = $"={{version='*',features=["
                                let v2915 : string = "["
                                let v2916 : string = v2901.Replace (v2915, v2914)
                                let v2917 : string = $"{v2916}}}"
                                v2917
                            else
                                let v2918 : string = $"{v2901}='*'"
                                v2918
                    let v2921 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v2922 : bool = Fable.Core.RustInterop.emitRustExpr v2920 v2921 
                    let v2923 : string = "_vec_map"
                    let v2924 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2923 
                    let v2925 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v2926 : (string []) = Fable.Core.RustInterop.emitRustExpr v2924 v2925 
                    let v2931 : unit = ()
                    let _let'_v2931 =
                        seq {
                            for i = 0 to v2926.Length - 1 do yield v2926.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v2934 : string seq = _let'_v2931 
                    let v2942 : string = method69()
                    let v2943 : (string -> (string seq -> string)) = String.concat
                    let v2944 : (string seq -> string) = v2943 v2942
                    let v2945 : string = v2944 v2934
                    let v2949 : bool = v2945 = ""
                    let struct (v3091 : int32, v3092 : string) =
                        if v2949 then
                            struct (0, v2886)
                        else
                            let v3062 : string =
                                match v2629 with
                                | US38_0 -> (* Pip *)
                                    v2945
                                | US38_1 -> (* Poetry *)
                                    let v2950 : string = $"[tool.poetry]"
                                    let v2951 : string = $"name = \"test\""
                                    let v2954 : string = "\n"
                                    let v2955 : string = v2950 + v2954 
                                    let v2959 : string = v2955 + v2951 
                                    let v2962 : string = $"version = \"0.0.1\""
                                    let v2964 : string = v2959 + v2954 
                                    let v2968 : string = v2964 + v2962 
                                    let v2971 : string = $"description = \"\""
                                    let v2973 : string = v2968 + v2954 
                                    let v2977 : string = v2973 + v2971 
                                    let v2980 : string = $"authors = []"
                                    let v2982 : string = v2977 + v2954 
                                    let v2986 : string = v2982 + v2980 
                                    let v2989 : string = $""
                                    let v2991 : string = v2986 + v2954 
                                    let v2995 : string = v2991 + v2989 
                                    let v2998 : string = $"[tool.poetry.dependencies]"
                                    let v3000 : string = v2995 + v2954 
                                    let v3004 : string = v3000 + v2998 
                                    let v3007 : string = $"python=\"~3.12\""
                                    let v3009 : string = v3004 + v2954 
                                    let v3013 : string = v3009 + v3007 
                                    let v3016 : string = $"{v2945}"
                                    let v3018 : string = v3013 + v2954 
                                    let v3022 : string = v3018 + v3016 
                                    let v3025 : string = $""
                                    let v3027 : string = v3022 + v2954 
                                    let v3031 : string = v3027 + v3025 
                                    let v3034 : string = $"[build-system]"
                                    let v3036 : string = v3031 + v2954 
                                    let v3040 : string = v3036 + v3034 
                                    let v3043 : string = $"requires = [\"poetry-core\"]"
                                    let v3045 : string = v3040 + v2954 
                                    let v3049 : string = v3045 + v3043 
                                    let v3052 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v3054 : string = v3049 + v2954 
                                    let v3058 : string = v3054 + v3052 
                                    v3058
                            method70(v2895, v3062)
                            let v3064 : System.Threading.CancellationToken option = None
                            let v3067 : (struct (string * string) []) = [||]
                            let v3069 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v3073 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v3077 : string option = None
                            let v3083 : string =
                                match v2629 with
                                | US38_0 -> (* Pip *)
                                    let v3080 : string = $"pip install -r requirements.txt"
                                    v3080
                                | US38_1 -> (* Poetry *)
                                    let v3081 : string = $"poetry install"
                                    v3081
                            let v3085 : string option = Some v2887 
                            let v3088 : bool = true
                            method91(v3083, v3064, v3067, v3069, v3073, v3088, v3085)
                    let v3094 : bool = v3091 <> 0 
                    let struct (v3445 : US5, v3446 : US5, v3447 : US5, v3448 : US5) =
                        if v3094 then
                            let v3157 : unit = ()
                            let v3158 : (unit -> unit) = closure77(v2629, v2493, v3092, v3091)
                            let v3159 : unit = (fun () -> v3158 (); v3157) ()
                            let v3220 : string = "py"
                            let v3221 : US5 = US5_0(v3220)
                            let v3222 : US5 = US5_1
                            let v3223 : US5 = US5_1
                            let v3224 : US5 = US5_1
                            struct (v3221, v3222, v3223, v3224)
                        else
                            let v3228 : string =
                                match v2629 with
                                | US38_0 -> (* Pip *)
                                    let v3225 : string = $"python \"{v2493}\""
                                    v3225
                                | US38_1 -> (* Poetry *)
                                    let v3226 : string = $"poetry run python \"{v2493}\""
                                    v3226
                            let v3229 : string = "TRACE_LEVEL"
                            let v3230 : string = "Verbose"
                            let v3231 : (struct (string * string) []) = [|struct (v3229, v3230)|]
                            let v3233 : System.Threading.CancellationToken option = None
                            let v3236 : (struct (string * string) []) = [||]
                            let v3238 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v3242 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v3246 : string option = None
                            let v3250 : string option = Some v2887 
                            let v3253 : bool = true
                            let struct (v3254 : int32, v3255 : string) = method91(v3228, v3233, v3231, v3238, v3242, v3253, v3250)
                            let v3256 : int32 = v3231.Length
                            let v3257 : (string []) = Array.zeroCreate<string> (v3256)
                            let v3258 : Mut5 = {l0 = 0} : Mut5
                            while method29(v3256, v3258) do
                                let v3260 : int32 = v3258.l0
                                let struct (v3261 : string, v3262 : string) = v3231.[int v3260]
                                let v3263 : string = $"$env:{v3261}=''{v3262}''"
                                v3257.[int v3260] <- v3263
                                let v3264 : int32 = v3260 + 1
                                v3258.l0 <- v3264
                                ()
                            let v3266 : string seq = v3257 |> Seq.ofArray
                            let v3271 : (string -> (string seq -> string)) = String.concat
                            let v3272 : string = ";"
                            let v3273 : (string seq -> string) = v3271 v3272
                            let v3274 : string = v3273 v3266
                            let v3277 : string = $"pwsh -c '{v3274}; {v3228}'"
                            let v3278 : bool = v3254 = 0
                            let v3285 : bool =
                                if v3278 then
                                    true
                                else
                                    let v3281 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v3282 : bool = v3255.Contains v3281 
                                    v3282
                            let struct (v3441 : US5, v3442 : US5, v3443 : US5, v3444 : US5) =
                                if v3285 then
                                    let v3286 : (string -> US5) = closure72()
                                    let v3287 : (unit -> string) = closure78(v3255)
                                    let v3288 : (exn -> US5) = closure79(v2493, v3255, v3277)
                                    let v3290 : US5 = US5_1
                                    let result = ref v3290
                                    try
                                        result.Value <- v3287 () |> v3286 
                                    with ex ->
                                        result.Value <- v3288 ex 
                                    let v3291 : US5 = result.Value
                                    let v3305 : string option =
                                        match v3291 with
                                        | US5_1 -> (* None *)
                                            let v3301 : string option = None
                                            v3301
                                        | US5_0(v3295) -> (* Some *)
                                            let v3297 : string option = Some v3295 
                                            v3297
                                    let v3306 : string = "$0.unwrap()"
                                    let v3307 : string = Fable.Core.RustInterop.emitRustExpr v3305 v3306 
                                    let v3308 : string = "py"
                                    let v3309 : US5 = US5_0(v3308)
                                    let v3310 : US5 = US5_0(v2803)
                                    let v3311 : US5 = US5_0(v2493)
                                    let v3312 : US5 = US5_0(v3307)
                                    struct (v3309, v3310, v3311, v3312)
                                else
                                    let v3373 : unit = ()
                                    let v3374 : (unit -> unit) = closure81(v2493, v3255, v3254, v3277)
                                    let v3375 : unit = (fun () -> v3374 (); v3373) ()
                                    let v3436 : string = "py"
                                    let v3437 : US5 = US5_0(v3436)
                                    let v3438 : US5 = US5_1
                                    let v3439 : US5 = US5_1
                                    let v3440 : US5 = US5_1
                                    struct (v3437, v3438, v3439, v3440)
                            struct (v3441, v3442, v3443, v3444)
                    let v3451 : string =
                        match v3445 with
                        | US5_1 -> (* None *)
                            v2886
                        | US5_0(v3449) -> (* Some *)
                            v3449
                    let v3452 : string = "extension"
                    let v3455 : string =
                        match v3446 with
                        | US5_1 -> (* None *)
                            v2886
                        | US5_0(v3453) -> (* Some *)
                            v3453
                    let v3456 : string = "code"
                    let v3459 : string =
                        match v3448 with
                        | US5_1 -> (* None *)
                            v2886
                        | US5_0(v3457) -> (* Some *)
                            v3457
                    let v3460 : string = "output"
                    let v3461 : (struct (string * string) []) = [|struct (v3452, v3451); struct (v3456, v3455); struct (v3460, v3459)|]
                    let v3462 : string = "$0.to_vec()"
                    let v3463 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3461 v3462 
                    let v3464 : unit = ()
                    let v3465 : string = $"true; let _func1_from_v3464 = Func1::from(move |value| {{ //"
                    let v3466 : bool = Fable.Core.RustInterop.emitRustExpr () v3465 
                    let v3467 : string = $"value"
                    let struct (v3468 : string, v3469 : string) = Fable.Core.RustInterop.emitRustExpr () v3467 
                    (* run_target_args'
                    let v3474 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3475 : string = "&*$0"
                    let v3476 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3468 v3475 
                    let _run_target_args'_v3474 = v3476 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3477 : string = "&*$0"
                    let v3478 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3468 v3477 
                    let _run_target_args'_v3474 = v3478 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3479 : string = "&*$0"
                    let v3480 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3468 v3479 
                    let _run_target_args'_v3474 = v3480 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3482 : Ref<Str> = v3468 |> unbox<Ref<Str>>
                    let _run_target_args'_v3474 = v3482 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3486 : Ref<Str> = v3468 |> unbox<Ref<Str>>
                    let _run_target_args'_v3474 = v3486 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3490 : Ref<Str> = v3468 |> unbox<Ref<Str>>
                    let _run_target_args'_v3474 = v3490 
                    #endif
#else
                    let v3494 : Ref<Str> = v3468 |> unbox<Ref<Str>>
                    let _run_target_args'_v3474 = v3494 
                    #endif
                    let v3497 : Ref<Str> = _run_target_args'_v3474 
                    (* run_target_args'
                    let v3510 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3511 : string = "String::from($0)"
                    let v3512 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3497 v3511 
                    let _run_target_args'_v3510 = v3512 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3513 : string = "String::from($0)"
                    let v3514 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3497 v3513 
                    let _run_target_args'_v3510 = v3514 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3515 : string = "String::from($0)"
                    let v3516 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3497 v3515 
                    let _run_target_args'_v3510 = v3516 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3518 : std_string_String = v3497 |> unbox<std_string_String>
                    let _run_target_args'_v3510 = v3518 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3522 : std_string_String = v3497 |> unbox<std_string_String>
                    let _run_target_args'_v3510 = v3522 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3526 : std_string_String = v3497 |> unbox<std_string_String>
                    let _run_target_args'_v3510 = v3526 
                    #endif
#else
                    let v3530 : std_string_String = v3497 |> unbox<std_string_String>
                    let _run_target_args'_v3510 = v3530 
                    #endif
                    let v3533 : std_string_String = _run_target_args'_v3510 
                    (* run_target_args'
                    let v3546 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3547 : string = "&*$0"
                    let v3548 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3469 v3547 
                    let _run_target_args'_v3546 = v3548 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3549 : string = "&*$0"
                    let v3550 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3469 v3549 
                    let _run_target_args'_v3546 = v3550 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3551 : string = "&*$0"
                    let v3552 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3469 v3551 
                    let _run_target_args'_v3546 = v3552 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3554 : Ref<Str> = v3469 |> unbox<Ref<Str>>
                    let _run_target_args'_v3546 = v3554 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3558 : Ref<Str> = v3469 |> unbox<Ref<Str>>
                    let _run_target_args'_v3546 = v3558 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3562 : Ref<Str> = v3469 |> unbox<Ref<Str>>
                    let _run_target_args'_v3546 = v3562 
                    #endif
#else
                    let v3566 : Ref<Str> = v3469 |> unbox<Ref<Str>>
                    let _run_target_args'_v3546 = v3566 
                    #endif
                    let v3569 : Ref<Str> = _run_target_args'_v3546 
                    (* run_target_args'
                    let v3582 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3583 : string = "String::from($0)"
                    let v3584 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3569 v3583 
                    let _run_target_args'_v3582 = v3584 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3585 : string = "String::from($0)"
                    let v3586 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3569 v3585 
                    let _run_target_args'_v3582 = v3586 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3587 : string = "String::from($0)"
                    let v3588 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3569 v3587 
                    let _run_target_args'_v3582 = v3588 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3590 : std_string_String = v3569 |> unbox<std_string_String>
                    let _run_target_args'_v3582 = v3590 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3594 : std_string_String = v3569 |> unbox<std_string_String>
                    let _run_target_args'_v3582 = v3594 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3598 : std_string_String = v3569 |> unbox<std_string_String>
                    let _run_target_args'_v3582 = v3598 
                    #endif
#else
                    let v3602 : std_string_String = v3569 |> unbox<std_string_String>
                    let _run_target_args'_v3582 = v3602 
                    #endif
                    let v3605 : std_string_String = _run_target_args'_v3582 
                    let v3615 : (std_string_String * std_string_String) = v3533, v3605 
                    let func1_from_result = v3615 //
                    let v3618 : _ = func1_from_result
                    let v3619 : string = $"true; $0 /*"
                    let v3620 : bool = Fable.Core.RustInterop.emitRustExpr v3618 v3619 
                    let v3621 : string = $"*/ }}); //"
                    let v3622 : bool = Fable.Core.RustInterop.emitRustExpr () v3621 
                    let v3623 : string = $"_func1_from_v3464"
                    let v3624 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v3623 
                    let v3625 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v3626 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v3624)
                    let v3627 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v3463, v3626) v3625 
                    let v3628 : string = "std::collections::BTreeMap::from_iter(v3627.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v3629 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3628 
                    let v3630 : string = "serde_json::to_string(&v3629)"
                    let v3631 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v3630 
                    (* run_target_args'
                    let v3633 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3634 : string = "$0.unwrap()"
                    let v3635 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3631 v3634 
                    let _run_target_args'_v3633 = v3635 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3636 : string = "$0.unwrap()"
                    let v3637 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3631 v3636 
                    let _run_target_args'_v3633 = v3637 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3638 : string = "$0.unwrap()"
                    let v3639 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3631 v3638 
                    let _run_target_args'_v3633 = v3639 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3640 : std_string_String = match v3631 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3633 = v3640 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3641 : std_string_String = match v3631 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3633 = v3641 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3642 : std_string_String = match v3631 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3633 = v3642 
                    #endif
#else
                    let v3643 : std_string_String = match v3631 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3633 = v3643 
                    #endif
                    let v3644 : std_string_String = _run_target_args'_v3633 
                    let v3647 : string = "fable_library_rust::String_::fromString($0)"
                    let v3648 : string = Fable.Core.RustInterop.emitRustExpr v3644 v3647 
                    let v3649 : string = "command_result"
                    [|struct (v3649, v3648)|]
                else
                    let v3651 : string = "fable_library_rust::String_::fromString($0)"
                    let v3652 : string = Fable.Core.RustInterop.emitRustExpr v40 v3651 
                    let v3653 : bool = v3652 = "fable"
                    if v3653 then
                        let v3654 : string = method168()
                        (* run_target_args'
                        let v3659 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3660 : string = "&*$0"
                        let v3661 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3654 v3660 
                        let _run_target_args'_v3659 = v3661 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3662 : string = "&*$0"
                        let v3663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3654 v3662 
                        let _run_target_args'_v3659 = v3663 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3664 : string = "&*$0"
                        let v3665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3654 v3664 
                        let _run_target_args'_v3659 = v3665 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3667 : Ref<Str> = v3654 |> unbox<Ref<Str>>
                        let _run_target_args'_v3659 = v3667 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3671 : Ref<Str> = v3654 |> unbox<Ref<Str>>
                        let _run_target_args'_v3659 = v3671 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3675 : Ref<Str> = v3654 |> unbox<Ref<Str>>
                        let _run_target_args'_v3659 = v3675 
                        #endif
#else
                        let v3679 : Ref<Str> = v3654 |> unbox<Ref<Str>>
                        let _run_target_args'_v3659 = v3679 
                        #endif
                        let v3682 : Ref<Str> = _run_target_args'_v3659 
                        let v3691 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v3692 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3682) v3691 
                        let v3695 : (std_string_String -> US7) = method21()
                        let v3696 : US7 option = v3692 |> Option.map v3695 
                        let v3716 : US7 = US7_1
                        let v3717 : US7 = v3696 |> Option.defaultValue v3716 
                        let v3724 : std_string_String =
                            match v3717 with
                            | US7_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US7_0(v3721) -> (* Some *)
                                v3721
                        let v3725 : string = "fable_library_rust::String_::fromString($0)"
                        let v3726 : string = Fable.Core.RustInterop.emitRustExpr v3724 v3725 
                        let v3727 : string = method169()
                        (* run_target_args'
                        let v3732 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3733 : string = "&*$0"
                        let v3734 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3727 v3733 
                        let _run_target_args'_v3732 = v3734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3735 : string = "&*$0"
                        let v3736 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3727 v3735 
                        let _run_target_args'_v3732 = v3736 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3737 : string = "&*$0"
                        let v3738 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3727 v3737 
                        let _run_target_args'_v3732 = v3738 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3740 : Ref<Str> = v3727 |> unbox<Ref<Str>>
                        let _run_target_args'_v3732 = v3740 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3744 : Ref<Str> = v3727 |> unbox<Ref<Str>>
                        let _run_target_args'_v3732 = v3744 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3748 : Ref<Str> = v3727 |> unbox<Ref<Str>>
                        let _run_target_args'_v3732 = v3748 
                        #endif
#else
                        let v3752 : Ref<Str> = v3727 |> unbox<Ref<Str>>
                        let _run_target_args'_v3732 = v3752 
                        #endif
                        let v3755 : Ref<Str> = _run_target_args'_v3732 
                        let v3764 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v3765 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3755) v3764 
                        let v3768 : (std_string_String -> US7) = method21()
                        let v3769 : US7 option = v3765 |> Option.map v3768 
                        let v3789 : US7 = US7_1
                        let v3790 : US7 = v3769 |> Option.defaultValue v3789 
                        let v3800 : US5 =
                            match v3790 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v3794) -> (* Some *)
                                let v3795 : string = "fable_library_rust::String_::fromString($0)"
                                let v3796 : string = Fable.Core.RustInterop.emitRustExpr v3794 v3795 
                                US5_0(v3796)
                        let v3918 : string =
                            match v3800 with
                            | US5_1 -> (* None *)
                                let v3916 : string = "{}"
                                v3916
                            | US5_0(v3801) -> (* Some *)
                                let v3802 : clap_Command = method0()
                                let v3803 : string = $"_ {v3801} --fs-path \"{v3726}\""
                                let v3804 : US25 = method106(v3803)
                                let v3813 : (string []) =
                                    match v3804 with
                                    | US25_1(v3806) -> (* Error *)
                                        let v3808 : string = $"resultm.get / Result value was Error: {v3806}"
                                        failwith<(string [])> v3808
                                    | US25_0(v3805) -> (* Ok *)
                                        v3805
                                let v3814 : string = "$0.to_vec()"
                                let v3815 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v3813 v3814 
                                let v3816 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v3817 : bool = Fable.Core.RustInterop.emitRustExpr v3815 v3816 
                                let v3818 : string = "x"
                                let v3819 : string = Fable.Core.RustInterop.emitRustExpr () v3818 
                                (* run_target_args'
                                let v3824 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3825 : string = "&*$0"
                                let v3826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3819 v3825 
                                let _run_target_args'_v3824 = v3826 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3827 : string = "&*$0"
                                let v3828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3819 v3827 
                                let _run_target_args'_v3824 = v3828 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3829 : string = "&*$0"
                                let v3830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3819 v3829 
                                let _run_target_args'_v3824 = v3830 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3832 : Ref<Str> = v3819 |> unbox<Ref<Str>>
                                let _run_target_args'_v3824 = v3832 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3836 : Ref<Str> = v3819 |> unbox<Ref<Str>>
                                let _run_target_args'_v3824 = v3836 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3840 : Ref<Str> = v3819 |> unbox<Ref<Str>>
                                let _run_target_args'_v3824 = v3840 
                                #endif
#else
                                let v3844 : Ref<Str> = v3819 |> unbox<Ref<Str>>
                                let _run_target_args'_v3824 = v3844 
                                #endif
                                let v3847 : Ref<Str> = _run_target_args'_v3824 
                                (* run_target_args'
                                let v3860 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3861 : string = "String::from($0)"
                                let v3862 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3847 v3861 
                                let _run_target_args'_v3860 = v3862 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3863 : string = "String::from($0)"
                                let v3864 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3847 v3863 
                                let _run_target_args'_v3860 = v3864 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3865 : string = "String::from($0)"
                                let v3866 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3847 v3865 
                                let _run_target_args'_v3860 = v3866 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3868 : std_string_String = v3847 |> unbox<std_string_String>
                                let _run_target_args'_v3860 = v3868 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3872 : std_string_String = v3847 |> unbox<std_string_String>
                                let _run_target_args'_v3860 = v3872 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3876 : std_string_String = v3847 |> unbox<std_string_String>
                                let _run_target_args'_v3860 = v3876 
                                #endif
#else
                                let v3880 : std_string_String = v3847 |> unbox<std_string_String>
                                let _run_target_args'_v3860 = v3880 
                                #endif
                                let v3883 : std_string_String = _run_target_args'_v3860 
                                let v3892 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v3893 : bool = Fable.Core.RustInterop.emitRustExpr v3883 v3892 
                                let v3894 : string = "_vec_map"
                                let v3895 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3894 
                                let v3896 : string = "clap::Command::get_matches_from($0, v3895)"
                                let v3897 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v3802 v3896 
                                let v3898 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v0, v3897)
                                let v3899 : string = "v3898.await"
                                let v3900 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v3899 
                                (* run_target_args'
                                let v3902 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3903 : string = "$0.unwrap()"
                                let v3904 : string = Fable.Core.RustInterop.emitRustExpr v3900 v3903 
                                let _run_target_args'_v3902 = v3904 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3905 : string = "$0.unwrap()"
                                let v3906 : string = Fable.Core.RustInterop.emitRustExpr v3900 v3905 
                                let _run_target_args'_v3902 = v3906 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3907 : string = "$0.unwrap()"
                                let v3908 : string = Fable.Core.RustInterop.emitRustExpr v3900 v3907 
                                let _run_target_args'_v3902 = v3908 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3909 : string = match v3900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3902 = v3909 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3910 : string = match v3900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3902 = v3910 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3911 : string = match v3900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3902 = v3911 
                                #endif
#else
                                let v3912 : string = match v3900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3902 = v3912 
                                #endif
                                let v3913 : string = _run_target_args'_v3902 
                                v3913
                        let v3919 : string = "command_result"
                        [|struct (v3919, v3918)|]
                    else
                        let v3921 : string = "fable_library_rust::String_::fromString($0)"
                        let v3922 : string = Fable.Core.RustInterop.emitRustExpr v40 v3921 
                        let v3923 : bool = v3922 = "dib"
                        if v3923 then
                            let v3924 : string = method170()
                            (* run_target_args'
                            let v3929 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3930 : string = "&*$0"
                            let v3931 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3924 v3930 
                            let _run_target_args'_v3929 = v3931 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3932 : string = "&*$0"
                            let v3933 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3924 v3932 
                            let _run_target_args'_v3929 = v3933 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3934 : string = "&*$0"
                            let v3935 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3924 v3934 
                            let _run_target_args'_v3929 = v3935 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3937 : Ref<Str> = v3924 |> unbox<Ref<Str>>
                            let _run_target_args'_v3929 = v3937 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3941 : Ref<Str> = v3924 |> unbox<Ref<Str>>
                            let _run_target_args'_v3929 = v3941 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3945 : Ref<Str> = v3924 |> unbox<Ref<Str>>
                            let _run_target_args'_v3929 = v3945 
                            #endif
#else
                            let v3949 : Ref<Str> = v3924 |> unbox<Ref<Str>>
                            let _run_target_args'_v3929 = v3949 
                            #endif
                            let v3952 : Ref<Str> = _run_target_args'_v3929 
                            let v3961 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v3962 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3952) v3961 
                            let v3965 : (std_string_String -> string) = method171()
                            let v3966 : string option = v3962 |> Option.map v3965 
                            let v3986 : string = "$0.unwrap()"
                            let v3987 : string = Fable.Core.RustInterop.emitRustExpr v3966 v3986 
                            let v3988 : string = method173()
                            (* run_target_args'
                            let v3993 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3994 : string = "&*$0"
                            let v3995 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3988 v3994 
                            let _run_target_args'_v3993 = v3995 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3996 : string = "&*$0"
                            let v3997 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3988 v3996 
                            let _run_target_args'_v3993 = v3997 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3998 : string = "&*$0"
                            let v3999 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3988 v3998 
                            let _run_target_args'_v3993 = v3999 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v4001 : Ref<Str> = v3988 |> unbox<Ref<Str>>
                            let _run_target_args'_v3993 = v4001 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v4005 : Ref<Str> = v3988 |> unbox<Ref<Str>>
                            let _run_target_args'_v3993 = v4005 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v4009 : Ref<Str> = v3988 |> unbox<Ref<Str>>
                            let _run_target_args'_v3993 = v4009 
                            #endif
#else
                            let v4013 : Ref<Str> = v3988 |> unbox<Ref<Str>>
                            let _run_target_args'_v3993 = v4013 
                            #endif
                            let v4016 : Ref<Str> = _run_target_args'_v3993 
                            let v4025 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v4026 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4016) v4025 
                            let v4028 : uint8 = v4026 |> Option.defaultValue 1uy 
                            let v4031 : string = method174()
                            (* run_target_args'
                            let v4036 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v4037 : string = "&*$0"
                            let v4038 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4031 v4037 
                            let _run_target_args'_v4036 = v4038 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v4039 : string = "&*$0"
                            let v4040 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4031 v4039 
                            let _run_target_args'_v4036 = v4040 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v4041 : string = "&*$0"
                            let v4042 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4031 v4041 
                            let _run_target_args'_v4036 = v4042 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v4044 : Ref<Str> = v4031 |> unbox<Ref<Str>>
                            let _run_target_args'_v4036 = v4044 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v4048 : Ref<Str> = v4031 |> unbox<Ref<Str>>
                            let _run_target_args'_v4036 = v4048 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v4052 : Ref<Str> = v4031 |> unbox<Ref<Str>>
                            let _run_target_args'_v4036 = v4052 
                            #endif
#else
                            let v4056 : Ref<Str> = v4031 |> unbox<Ref<Str>>
                            let _run_target_args'_v4036 = v4056 
                            #endif
                            let v4059 : Ref<Str> = _run_target_args'_v4036 
                            let v4068 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v4069 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4059) v4068 
                            let v4072 : (std_string_String -> US7) = method21()
                            let v4073 : US7 option = v4069 |> Option.map v4072 
                            let v4093 : US7 = US7_1
                            let v4094 : US7 = v4073 |> Option.defaultValue v4093 
                            let v4104 : US5 =
                                match v4094 with
                                | US7_1 -> (* None *)
                                    US5_1
                                | US7_0(v4098) -> (* Some *)
                                    let v4099 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4100 : string = Fable.Core.RustInterop.emitRustExpr v4098 v4099 
                                    US5_0(v4100)
                            let v4105 : uint8 = 1uy
                            let struct (v4106 : int32, v4107 : string) = method175(v4104, v4028, v3987, v4105)
                            let v4109 : bool = v4106 <> 0 
                            let struct (v4648 : int32, v4649 : string) =
                                if v4109 then
                                    struct (v4106, v4107)
                                else
                                    let v4113 : System.Threading.CancellationToken option = None
                                    let v4116 : (struct (string * string) []) = [||]
                                    let v4118 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v4122 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v4126 : string option = None
                                    let v4129 : string = $"jupyter nbconvert \"{v3987}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v4130 : bool = true
                                    let struct (v4131 : int32, v4132 : string) = method91(v4129, v4113, v4116, v4118, v4122, v4130, v4126)
                                    let v4194 : unit = ()
                                    let v4195 : (unit -> unit) = closure84(v4132, v4131)
                                    let v4196 : unit = (fun () -> v4195 (); v4194) ()
                                    let v4259 : bool = v4131 <> 0 
                                    if v4259 then
                                        let v4262 : string = $"repl_result: {v4107}

jupyter_result: {v4132}"
                                        struct (v4131, v4262)
                                    else
                                        let v4263 : string = "'"
                                        let v4264 : string = "''"
                                        let v4265 : string = v3987.Replace (v4263, v4264)
                                        let v4267 : System.Threading.CancellationToken option = None
                                        let v4270 : (struct (string * string) []) = [||]
                                        let v4272 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v4276 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v4280 : string option = None
                                        let v4283 : string = $"pwsh -c \"$counter = 1; $path = '{v4265}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v4284 : bool = true
                                        let struct (v4285 : int32, v4286 : string) = method91(v4283, v4267, v4270, v4272, v4276, v4284, v4280)
                                        let v4348 : unit = ()
                                        let v4349 : (unit -> unit) = closure85(v4286, v4285)
                                        let v4350 : unit = (fun () -> v4349 (); v4348) ()
                                        let v4412 : string = $"{v3987}.html"
                                        (* run_target_args'
                                        let v4417 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v4422 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4423 : string = "std::fs::read(&*$0)"
                                        let v4424 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4412 v4423 
                                        (* run_target_args'
                                        let v4426 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4427 : string = "$0.unwrap()"
                                        let v4428 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4424 v4427 
                                        let _run_target_args'_v4426 = v4428 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4429 : string = "$0.unwrap()"
                                        let v4430 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4424 v4429 
                                        let _run_target_args'_v4426 = v4430 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4431 : string = "$0.unwrap()"
                                        let v4432 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4424 v4431 
                                        let _run_target_args'_v4426 = v4432 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4433 : Vec<uint8> = match v4424 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4426 = v4433 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4434 : Vec<uint8> = match v4424 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4426 = v4434 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4435 : Vec<uint8> = match v4424 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4426 = v4435 
                                        #endif
#else
                                        let v4436 : Vec<uint8> = match v4424 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4426 = v4436 
                                        #endif
                                        let v4437 : Vec<uint8> = _run_target_args'_v4426 
                                        let _run_target_args'_v4422 = v4437 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4441 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4422 = v4441 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4445 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4422 = v4445 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4449 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4422 = v4449 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4453 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4422 = v4453 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4457 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4422 = v4457 
                                        #endif
#else
                                        let v4460 : (uint8 []) = v4412 |> System.IO.File.ReadAllBytes
                                        let v4461 : string = "$0.to_vec()"
                                        let v4462 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4460 v4461 
                                        let _run_target_args'_v4422 = v4462 
                                        #endif
                                        let v4463 : Vec<uint8> = _run_target_args'_v4422 
                                        let v4472 : Vec<uint8> = method25(v4463)
                                        let v4473 : string = "std::string::String::from_utf8($0)"
                                        let v4474 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4472 v4473 
                                        (* run_target_args'
                                        let v4476 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4477 : string = "$0.unwrap()"
                                        let v4478 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4474 v4477 
                                        let _run_target_args'_v4476 = v4478 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4479 : string = "$0.unwrap()"
                                        let v4480 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4474 v4479 
                                        let _run_target_args'_v4476 = v4480 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4481 : string = "$0.unwrap()"
                                        let v4482 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4474 v4481 
                                        let _run_target_args'_v4476 = v4482 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4483 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4476 = v4483 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4484 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4476 = v4484 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4485 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4476 = v4485 
                                        #endif
#else
                                        let v4486 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4476 = v4486 
                                        #endif
                                        let v4487 : std_string_String = _run_target_args'_v4476 
                                        let v4490 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4491 : string = Fable.Core.RustInterop.emitRustExpr v4487 v4490 
                                        let _run_target_args'_v4417 = v4491 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4493 : string = null |> unbox<string>
                                        let _run_target_args'_v4417 = v4493 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4497 : string = null |> unbox<string>
                                        let _run_target_args'_v4417 = v4497 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4501 : string = null |> unbox<string>
                                        let _run_target_args'_v4417 = v4501 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4505 : string = null |> unbox<string>
                                        let _run_target_args'_v4417 = v4505 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4509 : string = null |> unbox<string>
                                        let _run_target_args'_v4417 = v4509 
                                        #endif
#else
                                        let v4512 : string = v4412 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v4417 = v4512 
                                        #endif
                                        let v4513 : string = _run_target_args'_v4417 
                                        let v4522 : string = "\r\n"
                                        let v4523 : string = "\n"
                                        let v4524 : string = v4513.Replace (v4522, v4523)
                                        let v4525 : string = $"{v3987}.html"
                                        (* run_target_args'
                                        let v4526 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4527 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v4525, v4524) v4527 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v4525, v4524)
                                        #endif
                                        // run_target_args' is_unit
                                        let v4528 : string = $"{v3987}.ipynb"
                                        (* run_target_args'
                                        let v4533 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v4538 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4539 : string = "std::fs::read(&*$0)"
                                        let v4540 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4528 v4539 
                                        (* run_target_args'
                                        let v4542 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4543 : string = "$0.unwrap()"
                                        let v4544 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4540 v4543 
                                        let _run_target_args'_v4542 = v4544 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4545 : string = "$0.unwrap()"
                                        let v4546 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4540 v4545 
                                        let _run_target_args'_v4542 = v4546 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4547 : string = "$0.unwrap()"
                                        let v4548 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4540 v4547 
                                        let _run_target_args'_v4542 = v4548 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4549 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4542 = v4549 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4550 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4542 = v4550 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4551 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4542 = v4551 
                                        #endif
#else
                                        let v4552 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4542 = v4552 
                                        #endif
                                        let v4553 : Vec<uint8> = _run_target_args'_v4542 
                                        let _run_target_args'_v4538 = v4553 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4557 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4538 = v4557 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4561 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4538 = v4561 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4565 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4538 = v4565 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4569 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4538 = v4569 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4573 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4538 = v4573 
                                        #endif
#else
                                        let v4576 : (uint8 []) = v4528 |> System.IO.File.ReadAllBytes
                                        let v4577 : string = "$0.to_vec()"
                                        let v4578 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4576 v4577 
                                        let _run_target_args'_v4538 = v4578 
                                        #endif
                                        let v4579 : Vec<uint8> = _run_target_args'_v4538 
                                        let v4588 : Vec<uint8> = method25(v4579)
                                        let v4589 : string = "std::string::String::from_utf8($0)"
                                        let v4590 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4588 v4589 
                                        (* run_target_args'
                                        let v4592 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4593 : string = "$0.unwrap()"
                                        let v4594 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4590 v4593 
                                        let _run_target_args'_v4592 = v4594 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4595 : string = "$0.unwrap()"
                                        let v4596 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4590 v4595 
                                        let _run_target_args'_v4592 = v4596 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4597 : string = "$0.unwrap()"
                                        let v4598 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4590 v4597 
                                        let _run_target_args'_v4592 = v4598 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4599 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4592 = v4599 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4600 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4592 = v4600 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4601 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4592 = v4601 
                                        #endif
#else
                                        let v4602 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4592 = v4602 
                                        #endif
                                        let v4603 : std_string_String = _run_target_args'_v4592 
                                        let v4606 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4607 : string = Fable.Core.RustInterop.emitRustExpr v4603 v4606 
                                        let _run_target_args'_v4533 = v4607 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4609 : string = null |> unbox<string>
                                        let _run_target_args'_v4533 = v4609 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4613 : string = null |> unbox<string>
                                        let _run_target_args'_v4533 = v4613 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4617 : string = null |> unbox<string>
                                        let _run_target_args'_v4533 = v4617 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4621 : string = null |> unbox<string>
                                        let _run_target_args'_v4533 = v4621 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4625 : string = null |> unbox<string>
                                        let _run_target_args'_v4533 = v4625 
                                        #endif
#else
                                        let v4628 : string = v4528 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v4533 = v4628 
                                        #endif
                                        let v4629 : string = _run_target_args'_v4533 
                                        let v4638 : string = v4629.Replace (v4522, v4523)
                                        let v4639 : string = "\\r\\n"
                                        let v4640 : string = "\\n"
                                        let v4641 : string = v4638.Replace (v4639, v4640)
                                        let v4642 : string = $"{v3987}.ipynb"
                                        (* run_target_args'
                                        let v4643 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4644 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v4642, v4641) v4644 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v4642, v4641)
                                        #endif
                                        // run_target_args' is_unit
                                        let v4645 : string = $"repl_result: {v4107}

jupyter_result: {v4132}

pwsh_replace_html_result: {v4286}"
                                        struct (v4285, v4645)
                            let v4711 : unit = ()
                            let v4712 : (unit -> unit) = closure86(v4649, v4648)
                            let v4713 : unit = (fun () -> v4712 (); v4711) ()
                            let v4776 : bool = v4648 <> 0 
                            if v4776 then
                                let v4779 : string = $"spiral.run / dib / exit_code: {v4648} / result: {v4649}"
                                failwith<unit> v4779
                            let v4780 : string = "stdio"
                            [|struct (v4780, v4649)|]
                        else
                            let v4782 : string = "fable_library_rust::String_::fromString($0)"
                            let v4783 : string = Fable.Core.RustInterop.emitRustExpr v40 v4782 
                            let v4784 : bool = v4783 = "rust"
                            let struct (v10408 : US5, v10409 : US5, v10410 : US5, v10411 : US5) =
                                if v4784 then
                                    let v4785 : string = method168()
                                    (* run_target_args'
                                    let v4790 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4791 : string = "&*$0"
                                    let v4792 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4785 v4791 
                                    let _run_target_args'_v4790 = v4792 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4793 : string = "&*$0"
                                    let v4794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4785 v4793 
                                    let _run_target_args'_v4790 = v4794 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4795 : string = "&*$0"
                                    let v4796 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4785 v4795 
                                    let _run_target_args'_v4790 = v4796 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4798 : Ref<Str> = v4785 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4790 = v4798 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4802 : Ref<Str> = v4785 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4790 = v4802 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4806 : Ref<Str> = v4785 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4790 = v4806 
                                    #endif
#else
                                    let v4810 : Ref<Str> = v4785 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4790 = v4810 
                                    #endif
                                    let v4813 : Ref<Str> = _run_target_args'_v4790 
                                    let v4822 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v4823 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4813) v4822 
                                    let v4826 : (std_string_String -> US7) = method21()
                                    let v4827 : US7 option = v4823 |> Option.map v4826 
                                    let v4847 : US7 = US7_1
                                    let v4848 : US7 = v4827 |> Option.defaultValue v4847 
                                    let v4855 : std_string_String =
                                        match v4848 with
                                        | US7_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US7_0(v4852) -> (* Some *)
                                            v4852
                                    let v4856 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4857 : string = Fable.Core.RustInterop.emitRustExpr v4855 v4856 
                                    let v4858 : string = method23()
                                    (* run_target_args'
                                    let v4863 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4864 : string = "&*$0"
                                    let v4865 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4858 v4864 
                                    let _run_target_args'_v4863 = v4865 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4866 : string = "&*$0"
                                    let v4867 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4858 v4866 
                                    let _run_target_args'_v4863 = v4867 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4868 : string = "&*$0"
                                    let v4869 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4858 v4868 
                                    let _run_target_args'_v4863 = v4869 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4871 : Ref<Str> = v4858 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4863 = v4871 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4875 : Ref<Str> = v4858 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4863 = v4875 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4879 : Ref<Str> = v4858 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4863 = v4879 
                                    #endif
#else
                                    let v4883 : Ref<Str> = v4858 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4863 = v4883 
                                    #endif
                                    let v4886 : Ref<Str> = _run_target_args'_v4863 
                                    let v4895 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v4896 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4886) v4895 
                                    let v4899 : (Vec<std_string_String> -> US11) = method24()
                                    let v4900 : US11 option = v4896 |> Option.map v4899 
                                    let v4920 : US11 = US11_1
                                    let v4921 : US11 = v4900 |> Option.defaultValue v4920 
                                    let v4925 : (std_string_String []) = [||]
                                    let v4926 : string = "$0.to_vec()"
                                    let v4927 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4925 v4926 
                                    let v4930 : Vec<std_string_String> =
                                        match v4921 with
                                        | US11_1 -> (* None *)
                                            v4927
                                        | US11_0(v4928) -> (* Some *)
                                            v4928
                                    let v4931 : string = method180()
                                    (* run_target_args'
                                    let v4936 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4937 : string = "&*$0"
                                    let v4938 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4931 v4937 
                                    let _run_target_args'_v4936 = v4938 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4939 : string = "&*$0"
                                    let v4940 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4931 v4939 
                                    let _run_target_args'_v4936 = v4940 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4941 : string = "&*$0"
                                    let v4942 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4931 v4941 
                                    let _run_target_args'_v4936 = v4942 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4944 : Ref<Str> = v4931 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4936 = v4944 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4948 : Ref<Str> = v4931 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4936 = v4948 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4952 : Ref<Str> = v4931 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4936 = v4952 
                                    #endif
#else
                                    let v4956 : Ref<Str> = v4931 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4936 = v4956 
                                    #endif
                                    let v4959 : Ref<Str> = _run_target_args'_v4936 
                                    let v4968 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v4969 : bool = Fable.Core.RustInterop.emitRustExpr struct (v41, v4959) v4968 
                                    let v4970 : string = method181()
                                    (* run_target_args'
                                    let v4975 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4976 : string = "&*$0"
                                    let v4977 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4970 v4976 
                                    let _run_target_args'_v4975 = v4977 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4978 : string = "&*$0"
                                    let v4979 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4970 v4978 
                                    let _run_target_args'_v4975 = v4979 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4980 : string = "&*$0"
                                    let v4981 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4970 v4980 
                                    let _run_target_args'_v4975 = v4981 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4983 : Ref<Str> = v4970 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4975 = v4983 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4987 : Ref<Str> = v4970 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4975 = v4987 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4991 : Ref<Str> = v4970 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4975 = v4991 
                                    #endif
#else
                                    let v4995 : Ref<Str> = v4970 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4975 = v4995 
                                    #endif
                                    let v4998 : Ref<Str> = _run_target_args'_v4975 
                                    let v5007 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v5008 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4998) v5007 
                                    let v5011 : (std_string_String -> US7) = method21()
                                    let v5012 : US7 option = v5008 |> Option.map v5011 
                                    let v5032 : US7 = US7_1
                                    let v5033 : US7 = v5012 |> Option.defaultValue v5032 
                                    let v5043 : US5 =
                                        match v5033 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v5037) -> (* Some *)
                                            let v5038 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5039 : string = Fable.Core.RustInterop.emitRustExpr v5037 v5038 
                                            US5_0(v5039)
                                    let v5044 : string = method182()
                                    (* run_target_args'
                                    let v5049 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5050 : string = "&*$0"
                                    let v5051 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5044 v5050 
                                    let _run_target_args'_v5049 = v5051 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5052 : string = "&*$0"
                                    let v5053 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5044 v5052 
                                    let _run_target_args'_v5049 = v5053 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5054 : string = "&*$0"
                                    let v5055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5044 v5054 
                                    let _run_target_args'_v5049 = v5055 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5057 : Ref<Str> = v5044 |> unbox<Ref<Str>>
                                    let _run_target_args'_v5049 = v5057 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5061 : Ref<Str> = v5044 |> unbox<Ref<Str>>
                                    let _run_target_args'_v5049 = v5061 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5065 : Ref<Str> = v5044 |> unbox<Ref<Str>>
                                    let _run_target_args'_v5049 = v5065 
                                    #endif
#else
                                    let v5069 : Ref<Str> = v5044 |> unbox<Ref<Str>>
                                    let _run_target_args'_v5049 = v5069 
                                    #endif
                                    let v5072 : Ref<Str> = _run_target_args'_v5049 
                                    let v5081 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v5082 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v5072) v5081 
                                    let v5085 : (std_string_String -> US7) = method21()
                                    let v5086 : US7 option = v5082 |> Option.map v5085 
                                    let v5106 : US7 = US7_1
                                    let v5107 : US7 = v5086 |> Option.defaultValue v5106 
                                    let v5117 : US5 =
                                        match v5107 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v5111) -> (* Some *)
                                            let v5112 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5113 : string = Fable.Core.RustInterop.emitRustExpr v5111 v5112 
                                            US5_0(v5113)
                                    let v5126 : US39 =
                                        match v5043 with
                                        | US5_0(v5118) -> (* Some *)
                                            let v5119 : US40 = US40_0(v5118)
                                            US39_0(v5119)
                                        | _ ->
                                            match v5117 with
                                            | US5_0(v5121) -> (* Some *)
                                                let v5122 : US40 = US40_1(v5121)
                                                US39_0(v5122)
                                            | _ ->
                                                US39_1
                                    (* run_target_args'
                                    let v5131 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v5136 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5137 : string = "std::fs::read(&*$0)"
                                    let v5138 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4857 v5137 
                                    (* run_target_args'
                                    let v5140 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5141 : string = "$0.unwrap()"
                                    let v5142 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5138 v5141 
                                    let _run_target_args'_v5140 = v5142 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5143 : string = "$0.unwrap()"
                                    let v5144 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5138 v5143 
                                    let _run_target_args'_v5140 = v5144 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5145 : string = "$0.unwrap()"
                                    let v5146 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5138 v5145 
                                    let _run_target_args'_v5140 = v5146 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5147 : Vec<uint8> = match v5138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5140 = v5147 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5148 : Vec<uint8> = match v5138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5140 = v5148 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5149 : Vec<uint8> = match v5138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5140 = v5149 
                                    #endif
#else
                                    let v5150 : Vec<uint8> = match v5138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5140 = v5150 
                                    #endif
                                    let v5151 : Vec<uint8> = _run_target_args'_v5140 
                                    let _run_target_args'_v5136 = v5151 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5155 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5136 = v5155 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5159 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5136 = v5159 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5163 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5136 = v5163 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5167 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5136 = v5167 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5171 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5136 = v5171 
                                    #endif
#else
                                    let v5174 : (uint8 []) = v4857 |> System.IO.File.ReadAllBytes
                                    let v5175 : string = "$0.to_vec()"
                                    let v5176 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5174 v5175 
                                    let _run_target_args'_v5136 = v5176 
                                    #endif
                                    let v5177 : Vec<uint8> = _run_target_args'_v5136 
                                    let v5186 : Vec<uint8> = method25(v5177)
                                    let v5187 : string = "std::string::String::from_utf8($0)"
                                    let v5188 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5186 v5187 
                                    (* run_target_args'
                                    let v5190 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5191 : string = "$0.unwrap()"
                                    let v5192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5188 v5191 
                                    let _run_target_args'_v5190 = v5192 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5193 : string = "$0.unwrap()"
                                    let v5194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5188 v5193 
                                    let _run_target_args'_v5190 = v5194 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5195 : string = "$0.unwrap()"
                                    let v5196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5188 v5195 
                                    let _run_target_args'_v5190 = v5196 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5197 : std_string_String = match v5188 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5190 = v5197 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5198 : std_string_String = match v5188 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5190 = v5198 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5199 : std_string_String = match v5188 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5190 = v5199 
                                    #endif
#else
                                    let v5200 : std_string_String = match v5188 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5190 = v5200 
                                    #endif
                                    let v5201 : std_string_String = _run_target_args'_v5190 
                                    let v5204 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5205 : string = Fable.Core.RustInterop.emitRustExpr v5201 v5204 
                                    let _run_target_args'_v5131 = v5205 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5207 : string = null |> unbox<string>
                                    let _run_target_args'_v5131 = v5207 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5211 : string = null |> unbox<string>
                                    let _run_target_args'_v5131 = v5211 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5215 : string = null |> unbox<string>
                                    let _run_target_args'_v5131 = v5215 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5219 : string = null |> unbox<string>
                                    let _run_target_args'_v5131 = v5219 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5223 : string = null |> unbox<string>
                                    let _run_target_args'_v5131 = v5223 
                                    #endif
#else
                                    let v5226 : string = v4857 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v5131 = v5226 
                                    #endif
                                    let v5227 : string = _run_target_args'_v5131 
                                    let v5236 : string = method13()
                                    let v5237 : Mut3 = {l0 = v5236} : Mut3
                                    let v5240 : string = "{ "
                                    let v5241 : string = $"{v5240}"
                                    let v5249 : unit = ()
                                    let v5250 : (unit -> unit) = closure7(v5237, v5241)
                                    let v5251 : unit = (fun () -> v5250 (); v5249) ()
                                    let v5259 : string = "extension"
                                    let v5260 : string = $"{v5259}"
                                    let v5268 : unit = ()
                                    let v5269 : (unit -> unit) = closure7(v5237, v5260)
                                    let v5270 : unit = (fun () -> v5269 (); v5268) ()
                                    let v5278 : string = " = "
                                    let v5279 : string = $"{v5278}"
                                    let v5287 : unit = ()
                                    let v5288 : (unit -> unit) = closure7(v5237, v5279)
                                    let v5289 : unit = (fun () -> v5288 (); v5287) ()
                                    let v5297 : string = "rs"
                                    let v5298 : string = $"{v5297}"
                                    let v5306 : unit = ()
                                    let v5307 : (unit -> unit) = closure7(v5237, v5298)
                                    let v5308 : unit = (fun () -> v5307 (); v5306) ()
                                    let v5316 : string = "; "
                                    let v5317 : string = $"{v5316}"
                                    let v5325 : unit = ()
                                    let v5326 : (unit -> unit) = closure7(v5237, v5317)
                                    let v5327 : unit = (fun () -> v5326 (); v5325) ()
                                    let v5335 : string = "code"
                                    let v5336 : string = $"{v5335}"
                                    let v5344 : unit = ()
                                    let v5345 : (unit -> unit) = closure7(v5237, v5336)
                                    let v5346 : unit = (fun () -> v5345 (); v5344) ()
                                    let v5353 : string = $"{v5278}"
                                    let v5361 : unit = ()
                                    let v5362 : (unit -> unit) = closure7(v5237, v5353)
                                    let v5363 : unit = (fun () -> v5362 (); v5361) ()
                                    let v5370 : string = $"{v5227}"
                                    let v5378 : unit = ()
                                    let v5379 : (unit -> unit) = closure7(v5237, v5370)
                                    let v5380 : unit = (fun () -> v5379 (); v5378) ()
                                    let v5387 : string = $"{v5316}"
                                    let v5395 : unit = ()
                                    let v5396 : (unit -> unit) = closure7(v5237, v5387)
                                    let v5397 : unit = (fun () -> v5396 (); v5395) ()
                                    let v5405 : string = "runtime"
                                    let v5406 : string = $"{v5405}"
                                    let v5414 : unit = ()
                                    let v5415 : (unit -> unit) = closure7(v5237, v5406)
                                    let v5416 : unit = (fun () -> v5415 (); v5414) ()
                                    let v5423 : string = $"{v5278}"
                                    let v5431 : unit = ()
                                    let v5432 : (unit -> unit) = closure7(v5237, v5423)
                                    let v5433 : unit = (fun () -> v5432 (); v5431) ()
                                    let v5440 : string = $"%A{v5126}"
                                    let v5444 : string = $"{v5440}"
                                    let v5452 : unit = ()
                                    let v5453 : (unit -> unit) = closure7(v5237, v5444)
                                    let v5454 : unit = (fun () -> v5453 (); v5452) ()
                                    let v5462 : string = " }"
                                    let v5463 : string = $"{v5462}"
                                    let v5471 : unit = ()
                                    let v5472 : (unit -> unit) = closure7(v5237, v5463)
                                    let v5473 : unit = (fun () -> v5472 (); v5471) ()
                                    let v5479 : string = v5237.l0
                                    let v5480 : string = method26(v5479)
                                    let v5481 : string = method31()
                                    let v5482 : US5 = method32(v5481)
                                    let v5488 : US5 =
                                        match v5482 with
                                        | US5_1 -> (* None *)
                                            let v5485 : string = __SOURCE_DIRECTORY__
                                            method32(v5485)
                                        | US5_0(v5483) -> (* Some *)
                                            US5_0(v5483)
                                    let v5494 : US5 =
                                        match v5488 with
                                        | US5_1 -> (* None *)
                                            let v5491 : string = "/workspaces"
                                            method32(v5491)
                                        | US5_0(v5489) -> (* Some *)
                                            US5_0(v5489)
                                    let v5498 : string =
                                        match v5494 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v5495) -> (* Some *)
                                            v5495
                                    let v5499 : string = method50(v5498)
                                    let v5500 : bool = "deps" = v5499
                                    let v5511 : string =
                                        if v5500 then
                                            let v5501 : string option = method38(v5498)
                                            let v5503 : string = v5501 |> Option.get
                                            let v5506 : US5 = method32(v5503)
                                            match v5506 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v5507) -> (* Some *)
                                                v5507
                                        else
                                            v5498
                                    let v5512 : string = "polyglot"
                                    let v5513 : string = method33(v5511, v5512)
                                    let v5514 : string = method31()
                                    let v5516 : (unit -> string) = v5514.ToLower
                                    let v5517 : string = v5516 ()
                                    let v5521 : (unit -> string) = v5513.ToLower
                                    let v5522 : string = v5521 ()
                                    let v5526 : bool = v5517.StartsWith (v5522, false, null)
                                    let v5531 : US13 =
                                        if v5526 then
                                            US13_1(v5522)
                                        else
                                            US13_0(v5522)
                                    let v5543 : Result<string, string> =
                                        match v5531 with
                                        | US13_1(v5537) -> (* Error *)
                                            let v5539 : Result<string, string> = Error v5537 
                                            v5539
                                        | US13_0(v5532) -> (* Ok *)
                                            let v5534 : Result<string, string> = Ok v5532 
                                            v5534
                                    let v5544 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v5545 : bool = Fable.Core.RustInterop.emitRustExpr v5543 v5544 
                                    let v5546 : string = "x"
                                    let v5547 : string = Fable.Core.RustInterop.emitRustExpr () v5546 
                                    let v5548 : string = "true; $0 })"
                                    let v5549 : bool = Fable.Core.RustInterop.emitRustExpr v5547 v5548 
                                    let v5550 : string = "_result_unwrap_or_else"
                                    let v5551 : string = Fable.Core.RustInterop.emitRustExpr () v5550 
                                    let v5552 : string = "spiral"
                                    let v5553 : US41 = US41_0
                                    let v5554 : US42 = US42_0(v5553)
                                    let v5555 : US5 = US5_0(v5480)
                                    let v5556 : string = method183(v5555, v5552, v5554, v5551)
                                    let v5557 : string = "Fable.Core"
                                    let v5558 : string = "4.3.0"
                                    let v5559 : UH4 = UH4_0
                                    let v5560 : UH4 = UH4_1(v5557, v5558, v5559)
                                    let v5561 : UH2 = UH2_0
                                    let v5562 : string = method184(v5227, v5552, v5561, v5560, v5556, v5551)
                                    let v5563 : string = "../../.."
                                    let v5564 : string = method33(v5556, v5563)
                                    let v5565 : string = "Cargo.toml"
                                    let v5566 : string = method33(v5564, v5565)
                                    let v5567 : bool = method35(v5566)
                                    let v5568 : bool = v5567 = false
                                    if v5568 then
                                        (* run_target_args'
                                        let v5575 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5576 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5575 = v5576 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v5577 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5575 = v5577 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v5579 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v5575 = v5579 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v5582 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5575 = v5582 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v5583 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5575 = v5583 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v5584 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5575 = v5584 
                                        #endif
#else
                                        let v5585 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5575 = v5585 
                                        #endif
                                        let v5586 : System.DateTime = _run_target_args'_v5575 
                                        let v5592 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v5593 : System.Guid = v5592 ()
                                        let v5596 : System.Guid = method187(v5593, v5586)
                                        let v5598 : (System.Guid -> string) = _.ToString()
                                        let v5599 : string = v5598 v5596
                                        let v5602 : string = $"[package]"
                                        let v5603 : string = $"name = \"spiral_{v5599}\""
                                        let v5606 : string = "\n"
                                        let v5607 : string = v5602 + v5606 
                                        let v5611 : string = v5607 + v5603 
                                        let v5614 : string = $"version = \"0.0.1\""
                                        let v5616 : string = v5611 + v5606 
                                        let v5620 : string = v5616 + v5614 
                                        let v5623 : string = $"edition = \"2021\""
                                        let v5625 : string = v5620 + v5606 
                                        let v5629 : string = v5625 + v5623 
                                        let v5632 : string = $""
                                        let v5634 : string = v5629 + v5606 
                                        let v5638 : string = v5634 + v5632 
                                        let v5641 : string = $"[[bin]]"
                                        let v5643 : string = v5638 + v5606 
                                        let v5647 : string = v5643 + v5641 
                                        let v5650 : string = $"name = \"spiral_{v5599}\""
                                        let v5652 : string = v5647 + v5606 
                                        let v5656 : string = v5652 + v5650 
                                        let v5659 : string = $"path = \"spiral.rs\""
                                        let v5661 : string = v5656 + v5606 
                                        let v5665 : string = v5661 + v5659 
                                        (* run_target_args'
                                        let v5668 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5669 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v5566, v5665) v5669 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v5566, v5665)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v5670 : string = method33(v5556, v5565)
                                    let v5671 : bool = method35(v5670)
                                    let v5672 : bool = v5671 = false
                                    if v5672 then
                                        (* run_target_args'
                                        let v5679 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5680 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5679 = v5680 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v5681 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5679 = v5681 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v5683 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v5679 = v5683 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v5686 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5679 = v5686 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v5687 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5679 = v5687 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v5688 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5679 = v5688 
                                        #endif
#else
                                        let v5689 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5679 = v5689 
                                        #endif
                                        let v5690 : System.DateTime = _run_target_args'_v5679 
                                        let v5696 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v5697 : System.Guid = v5696 ()
                                        let v5700 : System.Guid = method187(v5697, v5690)
                                        let v5702 : (System.Guid -> string) = _.ToString()
                                        let v5703 : string = v5702 v5700
                                        let v5706 : string = $"[package]"
                                        let v5707 : string = $"name = \"spiral_{v5703}\""
                                        let v5710 : string = "\n"
                                        let v5711 : string = v5706 + v5710 
                                        let v5715 : string = v5711 + v5707 
                                        let v5718 : string = $"version = \"0.0.1\""
                                        let v5720 : string = v5715 + v5710 
                                        let v5724 : string = v5720 + v5718 
                                        let v5727 : string = $"edition = \"2021\""
                                        let v5729 : string = v5724 + v5710 
                                        let v5733 : string = v5729 + v5727 
                                        let v5736 : string = $""
                                        let v5738 : string = v5733 + v5710 
                                        let v5742 : string = v5738 + v5736 
                                        let v5745 : string = $"[[bin]]"
                                        let v5747 : string = v5742 + v5710 
                                        let v5751 : string = v5747 + v5745 
                                        let v5754 : string = $"name = \"spiral_{v5703}\""
                                        let v5756 : string = v5751 + v5710 
                                        let v5760 : string = v5756 + v5754 
                                        let v5763 : string = $"path = \"spiral.rs\""
                                        let v5765 : string = v5760 + v5710 
                                        let v5769 : string = v5765 + v5763 
                                        (* run_target_args'
                                        let v5772 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5773 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v5670, v5769) v5773 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v5670, v5769)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v5774 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v5775 : string = method33(v5551, v5774)
                                    let v5776 : string = "fable_modules/fable-library-rust"
                                    let v5777 : string = method33(v5556, v5776)
                                    method192(v5775, v5777)
                                    let struct (v5778 : int32, v5779 : string) = method193(v5126, v5556, v5297, v5562, v5531)
                                    let v5781 : bool = v5778 <> 0 
                                    let struct (v7972 : US5, v7973 : US5, v7974 : US5, v7975 : US5) =
                                        if v5781 then
                                            let v5844 : unit = ()
                                            let v5845 : (unit -> unit) = closure89(v5779, v5778)
                                            let v5846 : unit = (fun () -> v5845 (); v5844) ()
                                            let v5907 : US5 = US5_0(v5297)
                                            let v5908 : US5 = US5_1
                                            let v5909 : US5 = US5_1
                                            let v5910 : US5 = US5_0(v5779)
                                            struct (v5907, v5908, v5909, v5910)
                                        else
                                            let v5911 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v6017 : Vec<std_string_String> =
                                                if v5911 then
                                                    v4930
                                                else
                                                    let v5912 : (std_string_String -> bool) = method200()
                                                    let v5913 : Vec<std_string_String> = method201(v4930)
                                                    let v5914 : string = "v5913.into_iter().filter(|x| v5912(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v5915 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v5914 
                                                    let v5916 : string = "$0.len()"
                                                    let v5917 : unativeint = Fable.Core.RustInterop.emitRustExpr v5915 v5916 
                                                    let v5923 : int32 = v5917 |> int32 
                                                    let v5931 : bool = v5923 > 0
                                                    if v5931 then
                                                        v4930
                                                    else
                                                        let v5932 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v5937 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v5938 : string = "&*$0"
                                                        let v5939 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5932 v5938 
                                                        let _run_target_args'_v5937 = v5939 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v5940 : string = "&*$0"
                                                        let v5941 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5932 v5940 
                                                        let _run_target_args'_v5937 = v5941 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v5942 : string = "&*$0"
                                                        let v5943 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5932 v5942 
                                                        let _run_target_args'_v5937 = v5943 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v5945 : Ref<Str> = v5932 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5937 = v5945 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v5949 : Ref<Str> = v5932 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5937 = v5949 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v5953 : Ref<Str> = v5932 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5937 = v5953 
                                                        #endif
#else
                                                        let v5957 : Ref<Str> = v5932 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5937 = v5957 
                                                        #endif
                                                        let v5960 : Ref<Str> = _run_target_args'_v5937 
                                                        (* run_target_args'
                                                        let v5973 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v5974 : string = "String::from($0)"
                                                        let v5975 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5960 v5974 
                                                        let _run_target_args'_v5973 = v5975 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v5976 : string = "String::from($0)"
                                                        let v5977 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5960 v5976 
                                                        let _run_target_args'_v5973 = v5977 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v5978 : string = "String::from($0)"
                                                        let v5979 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5960 v5978 
                                                        let _run_target_args'_v5973 = v5979 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v5981 : std_string_String = v5960 |> unbox<std_string_String>
                                                        let _run_target_args'_v5973 = v5981 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v5985 : std_string_String = v5960 |> unbox<std_string_String>
                                                        let _run_target_args'_v5973 = v5985 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v5989 : std_string_String = v5960 |> unbox<std_string_String>
                                                        let _run_target_args'_v5973 = v5989 
                                                        #endif
#else
                                                        let v5993 : std_string_String = v5960 |> unbox<std_string_String>
                                                        let _run_target_args'_v5973 = v5993 
                                                        #endif
                                                        let v5996 : std_string_String = _run_target_args'_v5973 
                                                        let v6005 : (std_string_String []) = [|v5996|]
                                                        let v6006 : string = "$0.to_vec()"
                                                        let v6007 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6005 v6006 
                                                        let v6008 : Vec<std_string_String> = method67(v6007)
                                                        let v6009 : Vec<std_string_String> = method68(v4930)
                                                        let v6010 : string = "true; let mut v6009 = v6009"
                                                        let v6011 : bool = Fable.Core.RustInterop.emitRustExpr () v6010 
                                                        let v6012 : string = "true; v6009.extend(v6008)"
                                                        let v6013 : bool = Fable.Core.RustInterop.emitRustExpr () v6012 
                                                        let v6014 : string = "v6009"
                                                        let v6015 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6014 
                                                        v6015
                                            let v6018 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v6019 : bool = Fable.Core.RustInterop.emitRustExpr v6017 v6018 
                                            let v6020 : string = "x"
                                            let v6021 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6020 
                                            let v6022 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6023 : string = Fable.Core.RustInterop.emitRustExpr v6021 v6022 
                                            let v6026 : string = "="
                                            let v6027 : bool = v6023.Contains v6026 
                                            let v6042 : string =
                                                if v6027 then
                                                    v6023
                                                else
                                                    let v6032 : string = "]"
                                                    let v6033 : bool = v6023.EndsWith (v6032, false, null)
                                                    if v6033 then
                                                        let v6036 : string = $"={{version='*',features=["
                                                        let v6037 : string = "["
                                                        let v6038 : string = v6023.Replace (v6037, v6036)
                                                        let v6039 : string = $"{v6038}}}"
                                                        v6039
                                                    else
                                                        let v6040 : string = $"{v6023}='*'"
                                                        v6040
                                            let v6043 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v6044 : bool = Fable.Core.RustInterop.emitRustExpr v6042 v6043 
                                            let v6045 : string = "_vec_map"
                                            let v6046 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6045 
                                            let v6047 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v6048 : (string []) = Fable.Core.RustInterop.emitRustExpr v6046 v6047 
                                            let v6053 : unit = ()
                                            let _let'_v6053 =
                                                seq {
                                                    for i = 0 to v6048.Length - 1 do yield v6048.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v6056 : string seq = _let'_v6053 
                                            let v6064 : string = method69()
                                            let v6065 : (string -> (string seq -> string)) = String.concat
                                            let v6066 : (string seq -> string) = v6065 v6064
                                            let v6067 : string = v6066 v6056
                                            let v6071 : string = $"{v5552}.{v5297}"
                                            let v6072 : string = method33(v5556, v6071)
                                            (* run_target_args'
                                            let v6077 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v6082 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6083 : string = "std::fs::read(&*$0)"
                                            let v6084 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6072 v6083 
                                            (* run_target_args'
                                            let v6086 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6087 : string = "$0.unwrap()"
                                            let v6088 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6084 v6087 
                                            let _run_target_args'_v6086 = v6088 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6089 : string = "$0.unwrap()"
                                            let v6090 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6084 v6089 
                                            let _run_target_args'_v6086 = v6090 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6091 : string = "$0.unwrap()"
                                            let v6092 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6084 v6091 
                                            let _run_target_args'_v6086 = v6092 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6093 : Vec<uint8> = match v6084 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6086 = v6093 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6094 : Vec<uint8> = match v6084 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6086 = v6094 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6095 : Vec<uint8> = match v6084 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6086 = v6095 
                                            #endif
#else
                                            let v6096 : Vec<uint8> = match v6084 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6086 = v6096 
                                            #endif
                                            let v6097 : Vec<uint8> = _run_target_args'_v6086 
                                            let _run_target_args'_v6082 = v6097 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6101 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6082 = v6101 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6105 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6082 = v6105 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6109 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6082 = v6109 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6113 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6082 = v6113 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6117 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6082 = v6117 
                                            #endif
#else
                                            let v6120 : (uint8 []) = v6072 |> System.IO.File.ReadAllBytes
                                            let v6121 : string = "$0.to_vec()"
                                            let v6122 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6120 v6121 
                                            let _run_target_args'_v6082 = v6122 
                                            #endif
                                            let v6123 : Vec<uint8> = _run_target_args'_v6082 
                                            let v6132 : Vec<uint8> = method25(v6123)
                                            let v6133 : string = "std::string::String::from_utf8($0)"
                                            let v6134 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6132 v6133 
                                            (* run_target_args'
                                            let v6136 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6137 : string = "$0.unwrap()"
                                            let v6138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6134 v6137 
                                            let _run_target_args'_v6136 = v6138 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6139 : string = "$0.unwrap()"
                                            let v6140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6134 v6139 
                                            let _run_target_args'_v6136 = v6140 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6141 : string = "$0.unwrap()"
                                            let v6142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6134 v6141 
                                            let _run_target_args'_v6136 = v6142 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6143 : std_string_String = match v6134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6136 = v6143 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6144 : std_string_String = match v6134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6136 = v6144 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6145 : std_string_String = match v6134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6136 = v6145 
                                            #endif
#else
                                            let v6146 : std_string_String = match v6134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6136 = v6146 
                                            #endif
                                            let v6147 : std_string_String = _run_target_args'_v6136 
                                            let v6150 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6151 : string = Fable.Core.RustInterop.emitRustExpr v6147 v6150 
                                            let _run_target_args'_v6077 = v6151 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6153 : string = null |> unbox<string>
                                            let _run_target_args'_v6077 = v6153 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6157 : string = null |> unbox<string>
                                            let _run_target_args'_v6077 = v6157 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6161 : string = null |> unbox<string>
                                            let _run_target_args'_v6077 = v6161 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6165 : string = null |> unbox<string>
                                            let _run_target_args'_v6077 = v6165 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6169 : string = null |> unbox<string>
                                            let _run_target_args'_v6077 = v6169 
                                            #endif
#else
                                            let v6172 : string = v6072 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v6077 = v6172 
                                            #endif
                                            let v6173 : string = _run_target_args'_v6077 
                                            let v6182 : string = method202()
                                            let v6185 : string = "on_startup!"
                                            let v6186 : string = v6185 + v6182 
                                            let v6189 : string = method203()
                                            let v6192 : string = " method0"
                                            let v6193 : string = v6192 + v6189 
                                            let v6197 : bool = v6173.Contains v6186 
                                            let v6205 : bool =
                                                if v6197 then
                                                    let v6201 : bool = v6173.Contains v6193 
                                                    let v6204 : bool = v6201 = false
                                                    v6204
                                                else
                                                    false
                                            let v6206 : string = $"cargo-features = [\"edition2024\"]"
                                            let v6207 : string = $""
                                            let v6210 : string = "\n"
                                            let v6211 : string = v6206 + v6210 
                                            let v6215 : string = v6211 + v6207 
                                            let v6218 : string = $"[package]"
                                            let v6220 : string = v6215 + v6210 
                                            let v6224 : string = v6220 + v6218 
                                            let v6227 : string = $"name = \"spiral_{v5480}\""
                                            let v6229 : string = v6224 + v6210 
                                            let v6233 : string = v6229 + v6227 
                                            let v6236 : string = $"version = \"0.0.1\""
                                            let v6238 : string = v6233 + v6210 
                                            let v6242 : string = v6238 + v6236 
                                            let v6245 : string = $"edition = \"2024\""
                                            let v6247 : string = v6242 + v6210 
                                            let v6251 : string = v6247 + v6245 
                                            let v6254 : string = $""
                                            let v6256 : string = v6251 + v6210 
                                            let v6260 : string = v6256 + v6254 
                                            let v6263 : string = $"[dependencies]"
                                            let v6265 : string = v6260 + v6210 
                                            let v6269 : string = v6265 + v6263 
                                            let v6274 : US39 = US39_1
                                            let v6275 : bool = v5126 <> v6274 
                                            let v6293 : string =
                                                if v6275 then
                                                    let v6279 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v6279
                                                else
                                                    let v6280 : string = $"fable_library_rust = {{"
                                                    let v6281 : string = $" workspace = true,"
                                                    let v6282 : string = v6280 + v6281 
                                                    let v6283 : string = $" features = ["
                                                    let v6284 : string = v6282 + v6283 
                                                    let v6287 : string =
                                                        if v6205 then
                                                            let v6285 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v6285
                                                        else
                                                            let v6286 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v6286
                                                    let v6288 : string = v6284 + v6287 
                                                    let v6289 : string = $"]"
                                                    let v6290 : string = v6288 + v6289 
                                                    let v6291 : string = $"}}"
                                                    let v6292 : string = v6290 + v6291 
                                                    v6292
                                            let v6295 : string = v6269 + v6210 
                                            let v6299 : string = v6295 + v6293 
                                            let v6302 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v6304 : string = v6299 + v6210 
                                            let v6308 : string = v6304 + v6302 
                                            let v6311 : string = $"{v6067}"
                                            let v6313 : string = v6308 + v6210 
                                            let v6317 : string = v6313 + v6311 
                                            let v6320 : string = $""
                                            let v6322 : string = v6317 + v6210 
                                            let v6326 : string = v6322 + v6320 
                                            let v6329 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v6350 : string =
                                                if v6329 then
                                                    let v6330 : string = $"[[bin]]"
                                                    let v6331 : string = $"name = \"spiral_{v5480}\""
                                                    let v6333 : string = v6330 + v6210 
                                                    let v6337 : string = v6333 + v6331 
                                                    v6337
                                                else
                                                    let v6340 : string = $"[lib]"
                                                    let v6341 : string = $"crate-type = [\"cdylib\"]"
                                                    let v6343 : string = v6340 + v6210 
                                                    let v6347 : string = v6343 + v6341 
                                                    v6347
                                            let v6352 : string = v6326 + v6210 
                                            let v6356 : string = v6352 + v6350 
                                            let v6359 : string = $"path = \"spiral.rs\""
                                            let v6361 : string = v6356 + v6210 
                                            let v6365 : string = v6361 + v6359 
                                            let v6368 : string = method42(v5551)
                                            let v6369 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v6370 : string = $""
                                            let v6372 : string = v6369 + v6210 
                                            let v6376 : string = v6372 + v6370 
                                            let v6379 : string = $"[workspace]"
                                            let v6381 : string = v6376 + v6210 
                                            let v6385 : string = v6381 + v6379 
                                            let v6388 : string = $"resolver = \"2\""
                                            let v6390 : string = v6385 + v6210 
                                            let v6394 : string = v6390 + v6388 
                                            let v6397 : string = $"members = [\"packages/Rust/*\"]"
                                            let v6399 : string = v6394 + v6210 
                                            let v6403 : string = v6399 + v6397 
                                            let v6406 : string = $""
                                            let v6408 : string = v6403 + v6210 
                                            let v6412 : string = v6408 + v6406 
                                            let v6415 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v6417 : string = v6412 + v6210 
                                            let v6421 : string = v6417 + v6415 
                                            let v6424 : string = $"path = \"{v6368}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v6426 : string = v6421 + v6210 
                                            let v6430 : string = v6426 + v6424 
                                            let v6433 : string = $"default-features = false"
                                            let v6435 : string = v6430 + v6210 
                                            let v6439 : string = v6435 + v6433 
                                            let v6442 : string = $"features = []"
                                            let v6444 : string = v6439 + v6210 
                                            let v6448 : string = v6444 + v6442 
                                            let v6451 : string = $""
                                            let v6453 : string = v6448 + v6210 
                                            let v6457 : string = v6453 + v6451 
                                            let v6460 : string = $"[workspace.dependencies]"
                                            let v6462 : string = v6457 + v6210 
                                            let v6466 : string = v6462 + v6460 
                                            let v6469 : string = $"inline_colorization = \"~0.1\""
                                            let v6471 : string = v6466 + v6210 
                                            let v6475 : string = v6471 + v6469 
                                            let v6478 : string = $""
                                            let v6480 : string = v6475 + v6210 
                                            let v6484 : string = v6480 + v6478 
                                            let v6487 : string = $"[profile.release]"
                                            let v6489 : string = v6484 + v6210 
                                            let v6493 : string = v6489 + v6487 
                                            let v6496 : string = $"codegen-units = 1"
                                            let v6498 : string = v6493 + v6210 
                                            let v6502 : string = v6498 + v6496 
                                            let v6505 : string = $"opt-level = \"z\""
                                            let v6507 : string = v6502 + v6210 
                                            let v6511 : string = v6507 + v6505 
                                            let v6514 : string = $"lto = true"
                                            let v6516 : string = v6511 + v6210 
                                            let v6520 : string = v6516 + v6514 
                                            let v6523 : string = $"debug = false"
                                            let v6525 : string = v6520 + v6210 
                                            let v6529 : string = v6525 + v6523 
                                            let v6532 : string = $"panic = \"abort\""
                                            let v6534 : string = v6529 + v6210 
                                            let v6538 : string = v6534 + v6532 
                                            let v6541 : string = $"overflow-checks = true"
                                            let v6543 : string = v6538 + v6210 
                                            let v6547 : string = v6543 + v6541 
                                            let v6550 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v6552 : string = v6547 + v6210 
                                            let v6556 : string = v6552 + v6550 
                                            method70(v5670, v6365)
                                            method70(v5566, v6556)
                                            let v6559 : string = "src/Range.rs"
                                            let v6560 : string = method33(v5777, v6559)
                                            let v6561 : bool = method35(v6560)
                                            if v6561 then
                                                (* run_target_args'
                                                let v6566 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v6571 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6572 : string = "std::fs::read(&*$0)"
                                                let v6573 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6560 v6572 
                                                (* run_target_args'
                                                let v6575 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6576 : string = "$0.unwrap()"
                                                let v6577 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6573 v6576 
                                                let _run_target_args'_v6575 = v6577 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6578 : string = "$0.unwrap()"
                                                let v6579 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6573 v6578 
                                                let _run_target_args'_v6575 = v6579 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6580 : string = "$0.unwrap()"
                                                let v6581 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6573 v6580 
                                                let _run_target_args'_v6575 = v6581 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6582 : Vec<uint8> = match v6573 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6575 = v6582 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6583 : Vec<uint8> = match v6573 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6575 = v6583 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6584 : Vec<uint8> = match v6573 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6575 = v6584 
                                                #endif
#else
                                                let v6585 : Vec<uint8> = match v6573 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6575 = v6585 
                                                #endif
                                                let v6586 : Vec<uint8> = _run_target_args'_v6575 
                                                let _run_target_args'_v6571 = v6586 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6590 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6571 = v6590 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6594 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6571 = v6594 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6598 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6571 = v6598 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6602 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6571 = v6602 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6606 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6571 = v6606 
                                                #endif
#else
                                                let v6609 : (uint8 []) = v6560 |> System.IO.File.ReadAllBytes
                                                let v6610 : string = "$0.to_vec()"
                                                let v6611 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6609 v6610 
                                                let _run_target_args'_v6571 = v6611 
                                                #endif
                                                let v6612 : Vec<uint8> = _run_target_args'_v6571 
                                                let v6621 : Vec<uint8> = method25(v6612)
                                                let v6622 : string = "std::string::String::from_utf8($0)"
                                                let v6623 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6621 v6622 
                                                (* run_target_args'
                                                let v6625 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6626 : string = "$0.unwrap()"
                                                let v6627 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6623 v6626 
                                                let _run_target_args'_v6625 = v6627 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6628 : string = "$0.unwrap()"
                                                let v6629 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6623 v6628 
                                                let _run_target_args'_v6625 = v6629 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6630 : string = "$0.unwrap()"
                                                let v6631 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6623 v6630 
                                                let _run_target_args'_v6625 = v6631 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6632 : std_string_String = match v6623 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6625 = v6632 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6633 : std_string_String = match v6623 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6625 = v6633 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6634 : std_string_String = match v6623 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6625 = v6634 
                                                #endif
#else
                                                let v6635 : std_string_String = match v6623 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6625 = v6635 
                                                #endif
                                                let v6636 : std_string_String = _run_target_args'_v6625 
                                                let v6639 : string = "fable_library_rust::String_::fromString($0)"
                                                let v6640 : string = Fable.Core.RustInterop.emitRustExpr v6636 v6639 
                                                let _run_target_args'_v6566 = v6640 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6642 : string = null |> unbox<string>
                                                let _run_target_args'_v6566 = v6642 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6646 : string = null |> unbox<string>
                                                let _run_target_args'_v6566 = v6646 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6650 : string = null |> unbox<string>
                                                let _run_target_args'_v6566 = v6650 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6654 : string = null |> unbox<string>
                                                let _run_target_args'_v6566 = v6654 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6658 : string = null |> unbox<string>
                                                let _run_target_args'_v6566 = v6658 
                                                #endif
#else
                                                let v6661 : string = v6560 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v6566 = v6661 
                                                #endif
                                                let v6662 : string = _run_target_args'_v6566 
                                                let v6671 : string = "use crate::String_::fromCharCode;"
                                                let v6672 : string = "use crate::String_::fromChar;"
                                                let v6673 : string = v6662.Replace (v6671, v6672)
                                                let v6674 : string = "fromCharCode(c)"
                                                let v6675 : string = "std::char::from_u32(c).unwrap()"
                                                let v6676 : string = v6673.Replace (v6674, v6675)
                                                method70(v6560, v6676)
                                            let v6677 : uint8 = 1uy
                                            let struct (v6678 : int32, v6679 : string) = method204(v5531, v5670, v6677)
                                            let v6681 : bool = v6678 <> 0 
                                            if v6681 then
                                                let v6744 : unit = ()
                                                let v6745 : (unit -> unit) = closure93(v6679, v6678)
                                                let v6746 : unit = (fun () -> v6745 (); v6744) ()
                                                ()
                                            (* run_target_args'
                                            let v6811 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v6816 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6817 : string = "std::fs::read(&*$0)"
                                            let v6818 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6072 v6817 
                                            (* run_target_args'
                                            let v6820 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6821 : string = "$0.unwrap()"
                                            let v6822 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6818 v6821 
                                            let _run_target_args'_v6820 = v6822 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6823 : string = "$0.unwrap()"
                                            let v6824 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6818 v6823 
                                            let _run_target_args'_v6820 = v6824 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6825 : string = "$0.unwrap()"
                                            let v6826 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6818 v6825 
                                            let _run_target_args'_v6820 = v6826 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6827 : Vec<uint8> = match v6818 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6820 = v6827 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6828 : Vec<uint8> = match v6818 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6820 = v6828 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6829 : Vec<uint8> = match v6818 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6820 = v6829 
                                            #endif
#else
                                            let v6830 : Vec<uint8> = match v6818 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6820 = v6830 
                                            #endif
                                            let v6831 : Vec<uint8> = _run_target_args'_v6820 
                                            let _run_target_args'_v6816 = v6831 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6835 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6816 = v6835 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6839 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6816 = v6839 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6843 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6816 = v6843 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6847 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6816 = v6847 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6851 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6816 = v6851 
                                            #endif
#else
                                            let v6854 : (uint8 []) = v6072 |> System.IO.File.ReadAllBytes
                                            let v6855 : string = "$0.to_vec()"
                                            let v6856 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6854 v6855 
                                            let _run_target_args'_v6816 = v6856 
                                            #endif
                                            let v6857 : Vec<uint8> = _run_target_args'_v6816 
                                            let v6866 : Vec<uint8> = method25(v6857)
                                            let v6867 : string = "std::string::String::from_utf8($0)"
                                            let v6868 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6866 v6867 
                                            (* run_target_args'
                                            let v6870 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6871 : string = "$0.unwrap()"
                                            let v6872 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6868 v6871 
                                            let _run_target_args'_v6870 = v6872 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6873 : string = "$0.unwrap()"
                                            let v6874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6868 v6873 
                                            let _run_target_args'_v6870 = v6874 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6875 : string = "$0.unwrap()"
                                            let v6876 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6868 v6875 
                                            let _run_target_args'_v6870 = v6876 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6877 : std_string_String = match v6868 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6870 = v6877 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6878 : std_string_String = match v6868 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6870 = v6878 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6879 : std_string_String = match v6868 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6870 = v6879 
                                            #endif
#else
                                            let v6880 : std_string_String = match v6868 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6870 = v6880 
                                            #endif
                                            let v6881 : std_string_String = _run_target_args'_v6870 
                                            let v6884 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6885 : string = Fable.Core.RustInterop.emitRustExpr v6881 v6884 
                                            let _run_target_args'_v6811 = v6885 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6887 : string = null |> unbox<string>
                                            let _run_target_args'_v6811 = v6887 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6891 : string = null |> unbox<string>
                                            let _run_target_args'_v6811 = v6891 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6895 : string = null |> unbox<string>
                                            let _run_target_args'_v6811 = v6895 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6899 : string = null |> unbox<string>
                                            let _run_target_args'_v6811 = v6899 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6903 : string = null |> unbox<string>
                                            let _run_target_args'_v6811 = v6903 
                                            #endif
#else
                                            let v6906 : string = v6072 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v6811 = v6906 
                                            #endif
                                            let v6907 : string = _run_target_args'_v6811 
                                            let v6916 : string = method209()
                                            let v6919 : string = "pub fn main() -> Result<(), String> "
                                            let v6920 : string = v6919 + v6916 
                                            let v6923 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v7016 : string =
                                                if v6923 then
                                                    let v6924 : string = ""
                                                    v6924
                                                else
                                                    let v6925 : string = $"#[near_sdk::near_bindgen]"
                                                    let v6926 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v6928 : string = v6925 + v6210 
                                                    let v6932 : string = v6928 + v6926 
                                                    let v6935 : string = $"pub struct MainState {{"
                                                    let v6937 : string = v6932 + v6210 
                                                    let v6941 : string = v6937 + v6935 
                                                    let v6944 : string = $"}}"
                                                    let v6946 : string = v6941 + v6210 
                                                    let v6950 : string = v6946 + v6944 
                                                    let v6953 : string = $""
                                                    let v6955 : string = v6950 + v6210 
                                                    let v6959 : string = v6955 + v6953 
                                                    let v6962 : string = $"#[near_sdk::near_bindgen]"
                                                    let v6964 : string = v6959 + v6210 
                                                    let v6968 : string = v6964 + v6962 
                                                    let v6971 : string = $"impl MainState {{"
                                                    let v6973 : string = v6968 + v6210 
                                                    let v6977 : string = v6973 + v6971 
                                                    let v6980 : string = $"    pub fn state_main() {{"
                                                    let v6982 : string = v6977 + v6210 
                                                    let v6986 : string = v6982 + v6980 
                                                    let v6989 : string = $"        Spiral::method0();"
                                                    let v6991 : string = v6986 + v6210 
                                                    let v6995 : string = v6991 + v6989 
                                                    let v6998 : string = $"    }}"
                                                    let v7000 : string = v6995 + v6210 
                                                    let v7004 : string = v7000 + v6998 
                                                    let v7007 : string = $"}}"
                                                    let v7009 : string = v7004 + v6210 
                                                    let v7013 : string = v7009 + v7007 
                                                    v7013
                                            let v7017 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v7028 : bool =
                                                if v7017 then
                                                    let v7020 : string = "Spiral::method0()"
                                                    let v7021 : string = v6186 + v7020 
                                                    let v7025 : bool = v6907.Contains v7021 
                                                    v7025
                                                else
                                                    false
                                            let v7031 : string =
                                                if v7028 then
                                                    let v7029 : string = $"{v6920} Ok(Spiral::method0()) }}"
                                                    v7029
                                                else
                                                    let v7030 : string = $"{v6920} Ok(()) }}"
                                                    v7030
                                            let v7033 : string = v7016 + v6210 
                                            let v7037 : string = v7033 + v7031 
                                            let v7041 : bool = v6907.Contains v6920 
                                            let v7044 : string = $"{v6907}\n\n{v7037}\n"
                                            let v7237 : string =
                                                if v7041 then
                                                    v6907
                                                else
                                                    let v7048 : bool =
                                                        match v5126 with
                                                        | US39_0(v7045) -> (* Some *)
                                                            match v7045 with
                                                            | US40_1(v7046) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v7049 : string = "\";\".into()"
                                                    let v7050 : string = Fable.Core.RustInterop.emitRustExpr () v7049 
                                                    let v7053 : string = "),)"
                                                    let v7054 : string = v7053 + v7050 
                                                    let v7057 : string = "));"
                                                    let v7058 : string = v7044.Replace (v7054, v7057)
                                                    let v7059 : string = "\";\".into()"
                                                    let v7060 : string = Fable.Core.RustInterop.emitRustExpr () v7059 
                                                    let v7063 : string = "},)"
                                                    let v7064 : string = v7063 + v7060 
                                                    let v7067 : string = "});"
                                                    let v7068 : string = v7058.Replace (v7064, v7067)
                                                    let v7069 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v7070 : string = " defaultOf::<()>();"
                                                    let v7071 : string = method60(v7069, v7070, v7068)
                                                    let v7072 : string = "\\s\\sgetZero\\(\\);"
                                                    let v7073 : string = " getZero::<()>();"
                                                    let v7074 : string = method60(v7072, v7073, v7071)
                                                    let v7075 : string = "\"t\".into()"
                                                    let v7076 : string = Fable.Core.RustInterop.emitRustExpr () v7075 
                                                    let v7079 : string = "(&e.get_Curren"
                                                    let v7080 : string = v7079 + v7076 
                                                    let v7083 : string = "(e.get_Current"
                                                    let v7084 : string = v7074.Replace (v7080, v7083)
                                                    let v7085 : string = "\"::<()>()\".into()"
                                                    let v7086 : string = Fable.Core.RustInterop.emitRustExpr () v7085 
                                                    let v7089 : string = "getNull"
                                                    let v7090 : string = v7089 + v7086 
                                                    let v7093 : string = "fable_library_rust::Native_::getZero()"
                                                    let v7094 : string = v7084.Replace (v7090, v7093)
                                                    let v7095 : string = $"\")\".into()"
                                                    let v7096 : string = Fable.Core.RustInterop.emitRustExpr () v7095 
                                                    let v7099 : string = "null::<()>("
                                                    let v7100 : string = v7099 + v7096 
                                                    let v7103 : string = v7094.Replace (v7100, v7093)
                                                    let v7104 : string = "null::<\\(\\)>\\(\\)"
                                                    let v7105 : string = method60(v7104, v7093, v7103)
                                                    let v7106 : string = "\\(null::<\\(\\)>\\(\\)"
                                                    let v7107 : string = "(null()"
                                                    let v7108 : string = method60(v7106, v7107, v7105)
                                                    let v7109 : string = " null::<\\(\\)>\\(\\)"
                                                    let v7110 : string = " null()"
                                                    let v7111 : string = method60(v7109, v7110, v7108)
                                                    let v7112 : string = "unbox::<bool>\\(null\\(\\)"
                                                    let v7113 : string = "false"
                                                    let v7114 : string = method60(v7112, v7113, v7111)
                                                    let v7115 : string = "unbox::<string>\\(null\\(\\)"
                                                    let v7116 : string = method60(v7115, v7093, v7114)
                                                    let v7117 : string = "unbox::<i32>\\(null\\(\\)"
                                                    let v7118 : string = "0"
                                                    let v7119 : string = method60(v7117, v7118, v7116)
                                                    let v7120 : string = "unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"
                                                    let v7121 : string = method60(v7120, v7118, v7119)
                                                    let v7122 : string = "null\\(\\)"
                                                    let v7123 : string = method60(v7122, v7093, v7121)
                                                    let v7124 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v7125 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v7126 : string = method60(v7124, v7125, v7123)
                                                    let v7127 : string = " gen:"
                                                    let v7128 : string = " f:"
                                                    let v7129 : string = v7126.Replace (v7127, v7128)
                                                    let v7130 : string = "\\(gen\\("
                                                    let v7131 : string = "(f("
                                                    let v7132 : string = method60(v7130, v7131, v7129)
                                                    let v7133 : string = "\\(gen,"
                                                    let v7134 : string = "(f,"
                                                    let v7135 : string = method60(v7133, v7134, v7132)
                                                    let v7136 : string = " gen "
                                                    let v7137 : string = " f "
                                                    let v7138 : string = v7135.Replace (v7136, v7137)
                                                    let v7139 : string = "::Slice'_"
                                                    let v7140 : string = "::Slice__"
                                                    let v7141 : string = v7138.Replace (v7139, v7140)
                                                    let v7142 : string = " Slice'_"
                                                    let v7143 : string = " Slice__"
                                                    let v7144 : string = v7141.Replace (v7142, v7143)
                                                    let v7145 : string = "\",\".into()"
                                                    let v7146 : string = Fable.Core.RustInterop.emitRustExpr () v7145 
                                                    let v7149 : string = "defaultOf()"
                                                    let v7150 : string = v7149 + v7146 
                                                    let v7153 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v7154 : string = v7144.Replace (v7150, v7153)
                                                    let v7155 : string = "\"__.\".into()"
                                                    let v7156 : string = Fable.Core.RustInterop.emitRustExpr () v7155 
                                                    let v7159 : string = "__self"
                                                    let v7160 : string = v7159 + v7156 
                                                    let v7163 : string = "self."
                                                    let v7164 : string = v7154.Replace (v7160, v7163)
                                                    let v7165 : string = "\"_.\".into()"
                                                    let v7166 : string = Fable.Core.RustInterop.emitRustExpr () v7165 
                                                    let v7169 : string = "_self"
                                                    let v7170 : string = v7169 + v7166 
                                                    let v7173 : string = v7164.Replace (v7170, v7163)
                                                    let v7174 : string = "\"h\".into()"
                                                    let v7175 : string = Fable.Core.RustInterop.emitRustExpr () v7174 
                                                    let v7178 : string = "get_or_insert_wit"
                                                    let v7179 : string = v7178 + v7175 
                                                    let v7182 : string = "get_or_init"
                                                    let v7183 : string = v7173.Replace (v7179, v7182)
                                                    let v7184 : string = "\";\".into()"
                                                    let v7185 : string = Fable.Core.RustInterop.emitRustExpr () v7184 
                                                    let v7188 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v7189 : string = v7188 + v7185 
                                                    let v7192 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v7193 : string = v7183.Replace (v7189, v7192)
                                                    let v7194 : string = "\";\".into()"
                                                    let v7195 : string = Fable.Core.RustInterop.emitRustExpr () v7194 
                                                    let v7198 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v7199 : string = v7198 + v7195 
                                                    let v7202 : string = "type TimeZoneInfo = i64;"
                                                    let v7203 : string = v7193.Replace (v7199, v7202)
                                                    let v7204 : string = "\";\".into()"
                                                    let v7205 : string = Fable.Core.RustInterop.emitRustExpr () v7204 
                                                    let v7208 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v7209 : string = v7208 + v7205 
                                                    let v7212 : string = "type TaskCanceledException = ();"
                                                    let v7213 : string = v7203.Replace (v7209, v7212)
                                                    let v7222 : (string -> string) =
                                                        if v6205 then
                                                            closure94()
                                                        else
                                                            let v7217 : string = "// "
                                                            let v7218 : string = v7217 + v6186 
                                                            closure95(v6186, v7218)
                                                    let v7223 : string = v7222 v7213
                                                    let v7224 : bool = v7048 = false
                                                    let v7235 : (string -> string) =
                                                        if v7224 then
                                                            closure94()
                                                        else
                                                            let v7229 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v7230 : string = ";"
                                                            let v7231 : string = v7229 + v7230 
                                                            closure96(v7231)
                                                    v7235 v7223
                                            let v7238 : bool = v7041 = false
                                            if v7238 then
                                                method70(v6072, v7237)
                                            let v7239 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v7240 : bool = v7239 <> true
                                            let v7243 : string =
                                                if v7240 then
                                                    let v7241 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v5670}\""
                                                    v7241
                                                else
                                                    let v7242 : string = $"cargo run --manifest-path \"{v5670}\""
                                                    v7242
                                            let v7244 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v7245 : bool = v7244 <> true
                                            let v7256 : (struct (string * string) []) =
                                                if v7245 then
                                                    [||]
                                                else
                                                    let v7247 : string = "TRACE_LEVEL"
                                                    let v7248 : string = "Verbose"
                                                    let v7249 : string = "RUSTC_WRAPPER"
                                                    let v7250 : string = "sccache"
                                                    let v7251 : string = "RUST_BACKTRACE"
                                                    let v7252 : string = "full"
                                                    let v7253 : string = "RUSTFLAGS"
                                                    let v7254 : string = "-C prefer-dynamic"
                                                    [|struct (v7247, v7248); struct (v7249, v7250); struct (v7251, v7252); struct (v7253, v7254)|]
                                            let v7258 : System.Threading.CancellationToken option = None
                                            let v7261 : (struct (string * string) []) = [||]
                                            let v7263 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v7267 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v7271 : string option = None
                                            let v7285 : Result<string, string> =
                                                match v5531 with
                                                | US13_1(v7279) -> (* Error *)
                                                    let v7281 : Result<string, string> = Error v7279 
                                                    v7281
                                                | US13_0(v7274) -> (* Ok *)
                                                    let v7276 : Result<string, string> = Ok v7274 
                                                    v7276
                                            (* run_target_args'
                                            let v7287 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7288 : string = "$0.ok()"
                                            let v7289 : string option = Fable.Core.RustInterop.emitRustExpr v7285 v7288 
                                            let _run_target_args'_v7287 = v7289 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7290 : string = "$0.ok()"
                                            let v7291 : string option = Fable.Core.RustInterop.emitRustExpr v7285 v7290 
                                            let _run_target_args'_v7287 = v7291 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7292 : string = "$0.ok()"
                                            let v7293 : string option = Fable.Core.RustInterop.emitRustExpr v7285 v7292 
                                            let _run_target_args'_v7287 = v7293 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7294 : string option = match v7285 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7287 = v7294 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7295 : string option = match v7285 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7287 = v7295 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v7296 : string option = match v7285 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7287 = v7296 
                                            #endif
#else
                                            let v7297 : string option = match v7285 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7287 = v7297 
                                            #endif
                                            let v7298 : string option = _run_target_args'_v7287 
                                            let v7301 : bool = true
                                            let struct (v7302 : int32, v7303 : string) = method91(v7243, v7258, v7256, v7263, v7267, v7301, v7298)
                                            let v7304 : bool =
                                                match v5126 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v7808 : US5, v7809 : US5, v7810 : US5, v7811 : US5) =
                                                if v7304 then
                                                    let v7305 : int32 = v7256.Length
                                                    let v7306 : (string []) = Array.zeroCreate<string> (v7305)
                                                    let v7307 : Mut5 = {l0 = 0} : Mut5
                                                    while method29(v7305, v7307) do
                                                        let v7309 : int32 = v7307.l0
                                                        let struct (v7310 : string, v7311 : string) = v7256.[int v7309]
                                                        let v7312 : string = $"$env:{v7310}=''{v7311}''"
                                                        v7306.[int v7309] <- v7312
                                                        let v7313 : int32 = v7309 + 1
                                                        v7307.l0 <- v7313
                                                        ()
                                                    let v7315 : string seq = v7306 |> Seq.ofArray
                                                    let v7320 : (string -> (string seq -> string)) = String.concat
                                                    let v7321 : string = ";"
                                                    let v7322 : (string seq -> string) = v7320 v7321
                                                    let v7323 : string = v7322 v7315
                                                    let v7326 : (string []) = [|v7323; v7243|]
                                                    let v7328 : string seq = v7326 |> Seq.ofArray
                                                    let v7332 : (string -> (string seq -> string)) = String.concat
                                                    let v7333 : (string seq -> string) = v7332 v7321
                                                    let v7334 : string = v7333 v7328
                                                    let v7337 : string = $"pwsh -c '{v7334}'"
                                                    let v7339 : bool = v7302 <> 0 
                                                    let struct (v7495 : US5, v7496 : US5, v7497 : US5, v7498 : US5) =
                                                        if v7339 then
                                                            let v7402 : unit = ()
                                                            let v7403 : (unit -> unit) = closure97(v4969, v6072, v7303, v7302, v7337)
                                                            let v7404 : unit = (fun () -> v7403 (); v7402) ()
                                                            let v7465 : US5 = US5_0(v5297)
                                                            let v7466 : US5 = US5_1
                                                            let v7467 : US5 = US5_1
                                                            let v7468 : US5 = US5_1
                                                            struct (v7465, v7466, v7467, v7468)
                                                        else
                                                            let v7469 : (string -> US5) = closure72()
                                                            let v7470 : (unit -> string) = closure98(v7303)
                                                            let v7471 : (exn -> US5) = closure100(v6072, v7303, v7337)
                                                            let v7473 : US5 = US5_1
                                                            let result = ref v7473
                                                            try
                                                                result.Value <- v7470 () |> v7469 
                                                            with ex ->
                                                                result.Value <- v7471 ex 
                                                            let v7474 : US5 = result.Value
                                                            let v7488 : string option =
                                                                match v7474 with
                                                                | US5_1 -> (* None *)
                                                                    let v7484 : string option = None
                                                                    v7484
                                                                | US5_0(v7478) -> (* Some *)
                                                                    let v7480 : string option = Some v7478 
                                                                    v7480
                                                            let v7489 : string = "$0.unwrap()"
                                                            let v7490 : string = Fable.Core.RustInterop.emitRustExpr v7488 v7489 
                                                            let v7491 : US5 = US5_0(v5297)
                                                            let v7492 : US5 = US5_0(v7237)
                                                            let v7493 : US5 = US5_0(v6072)
                                                            let v7494 : US5 = US5_0(v7490)
                                                            struct (v7491, v7492, v7493, v7494)
                                                    struct (v7495, v7496, v7497, v7498)
                                                else
                                                    let v7499 : string = $"target/spiral/{v5552}/target/wasm32-unknown-unknown/release/spiral_{v5480}.wasm"
                                                    let v7506 : string =
                                                        match v5126 with
                                                        | US39_0(v7500) -> (* Some *)
                                                            match v7500 with
                                                            | US40_1(v7502) -> (* Contract *)
                                                                v7502
                                                            | US40_0(v7501) -> (* Wasm *)
                                                                v7501
                                                        | _ ->
                                                            let v7505 : string = ""
                                                            v7505
                                                    let v7507 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v7499} -t debug {v7506}'"
                                                    let v7508 : string = "AUTOMATION"
                                                    let v7509 : string = method3(v7508)
                                                    let v7510 : string = "scripts/invoke-block.ps1"
                                                    let v7511 : string = $"pwsh -c \"pwsh {v7510} {v7507} -Linux -EnvironmentVariables AUTOMATION={v7509}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v7512 : bool = v7302 = 0
                                                    let struct (v7804 : US5, v7805 : US5, v7806 : US5, v7807 : US5) =
                                                        if v7512 then
                                                            let v7514 : System.Threading.CancellationToken option = None
                                                            let v7517 : (struct (string * string) []) = [||]
                                                            let v7519 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v7523 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v7527 : string option = None
                                                            let v7531 : string option = Some v5551 
                                                            let v7534 : bool = true
                                                            let struct (v7535 : int32, v7536 : string) = method91(v7511, v7514, v7517, v7519, v7523, v7534, v7531)
                                                            let v7537 : bool = v7535 = 0
                                                            let struct (v7671 : US5, v7672 : US5, v7673 : US5, v7674 : US5) =
                                                                if v7537 then
                                                                    let v7538 : US5 = US5_0(v5297)
                                                                    let v7539 : US5 = US5_0(v7237)
                                                                    let v7540 : US5 = US5_0(v6072)
                                                                    let v7541 : US5 = US5_0(v7536)
                                                                    struct (v7538, v7539, v7540, v7541)
                                                                else
                                                                    let v7603 : unit = ()
                                                                    let v7604 : (unit -> unit) = closure102(v4969, v6072, v7303, v7536, v7535)
                                                                    let v7605 : unit = (fun () -> v7604 (); v7603) ()
                                                                    let v7667 : US5 = US5_0(v5297)
                                                                    let v7668 : US5 = US5_1
                                                                    let v7669 : US5 = US5_1
                                                                    let v7670 : US5 = US5_1
                                                                    struct (v7667, v7668, v7669, v7670)
                                                            struct (v7671, v7672, v7673, v7674)
                                                        else
                                                            let v7736 : unit = ()
                                                            let v7737 : (unit -> unit) = closure103(v4969, v6072, v7303, v7302, v7499, v7511)
                                                            let v7738 : unit = (fun () -> v7737 (); v7736) ()
                                                            let v7800 : US5 = US5_0(v5297)
                                                            let v7801 : US5 = US5_1
                                                            let v7802 : US5 = US5_1
                                                            let v7803 : US5 = US5_1
                                                            struct (v7800, v7801, v7802, v7803)
                                                    struct (v7804, v7805, v7806, v7807)
                                            if v4969 then
                                                let v7812 : bool =
                                                    match v5126 with
                                                    | US39_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v7813 : bool = v7812 <> true
                                                let v7816 : string =
                                                    if v7813 then
                                                        let v7814 : string = "wasm32-unknown-unknown/release"
                                                        v7814
                                                    else
                                                        let v7815 : string = "debug"
                                                        v7815
                                                let v7817 : string = ""
                                                let v7818 : string = $"target/{v7816}/spiral_{v5480}{v7817}"
                                                let v7819 : string = method33(v5564, v7818)
                                                let v7820 : string = ".wasm"
                                                let v7821 : string = $"target/{v7816}/spiral_{v5480}{v7820}"
                                                let v7822 : string = method33(v5564, v7821)
                                                let v7823 : string = ".pdb"
                                                let v7824 : string = $"target/{v7816}/spiral_{v5480}{v7823}"
                                                let v7825 : string = method33(v5564, v7824)
                                                let v7826 : string = ".exe"
                                                let v7827 : string = $"target/{v7816}/spiral_{v5480}{v7826}"
                                                let v7828 : string = method33(v5564, v7827)
                                                let v7829 : string = ".d"
                                                let v7830 : string = $"target/{v7816}/spiral_{v5480}{v7829}"
                                                let v7831 : string = method33(v5564, v7830)
                                                let v7832 : bool = method35(v7819)
                                                let v7833 : bool = method35(v7822)
                                                let v7834 : bool = method35(v7825)
                                                let v7835 : bool = method35(v7828)
                                                let v7836 : bool = method35(v7831)
                                                let v7897 : unit = ()
                                                let v7898 : (unit -> unit) = closure104(v6072, v7831, v7836, v7828, v7835, v7825, v7834, v7822, v7833, v7819, v7832)
                                                let v7899 : unit = (fun () -> v7898 (); v7897) ()
                                                let v7963 : UH5 =
                                                    if v7832 then
                                                        let v7960 : UH5 = UH5_0
                                                        UH5_1(v7819, v7832, v7960)
                                                    else
                                                        UH5_0
                                                let v7965 : UH5 =
                                                    if v7833 then
                                                        UH5_1(v7822, v7833, v7963)
                                                    else
                                                        v7963
                                                let v7967 : UH5 =
                                                    if v7834 then
                                                        UH5_1(v7825, v7834, v7965)
                                                    else
                                                        v7965
                                                let v7969 : UH5 =
                                                    if v7835 then
                                                        UH5_1(v7828, v7835, v7967)
                                                    else
                                                        v7967
                                                let v7971 : UH5 =
                                                    if v7836 then
                                                        UH5_1(v7831, v7836, v7969)
                                                    else
                                                        v7969
                                                method215(v7971)
                                            struct (v7808, v7809, v7810, v7811)
                                    struct (v7972, v7973, v7974, v7975)
                                else
                                    let v7976 : string = "fable_library_rust::String_::fromString($0)"
                                    let v7977 : string = Fable.Core.RustInterop.emitRustExpr v40 v7976 
                                    let v7978 : bool = v7977 = "typescript"
                                    let struct (v10404 : US5, v10405 : US5, v10406 : US5, v10407 : US5) =
                                        if v7978 then
                                            let v7979 : string = method168()
                                            (* run_target_args'
                                            let v7984 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7985 : string = "&*$0"
                                            let v7986 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7979 v7985 
                                            let _run_target_args'_v7984 = v7986 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7987 : string = "&*$0"
                                            let v7988 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7979 v7987 
                                            let _run_target_args'_v7984 = v7988 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7989 : string = "&*$0"
                                            let v7990 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7979 v7989 
                                            let _run_target_args'_v7984 = v7990 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7992 : Ref<Str> = v7979 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7984 = v7992 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7996 : Ref<Str> = v7979 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7984 = v7996 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8000 : Ref<Str> = v7979 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7984 = v8000 
                                            #endif
#else
                                            let v8004 : Ref<Str> = v7979 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7984 = v8004 
                                            #endif
                                            let v8007 : Ref<Str> = _run_target_args'_v7984 
                                            let v8016 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v8017 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v8007) v8016 
                                            let v8020 : (std_string_String -> US7) = method21()
                                            let v8021 : US7 option = v8017 |> Option.map v8020 
                                            let v8041 : US7 = US7_1
                                            let v8042 : US7 = v8021 |> Option.defaultValue v8041 
                                            let v8049 : std_string_String =
                                                match v8042 with
                                                | US7_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US7_0(v8046) -> (* Some *)
                                                    v8046
                                            let v8050 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8051 : string = Fable.Core.RustInterop.emitRustExpr v8049 v8050 
                                            let v8052 : string = method23()
                                            (* run_target_args'
                                            let v8057 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8058 : string = "&*$0"
                                            let v8059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8052 v8058 
                                            let _run_target_args'_v8057 = v8059 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8060 : string = "&*$0"
                                            let v8061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8052 v8060 
                                            let _run_target_args'_v8057 = v8061 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8062 : string = "&*$0"
                                            let v8063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8052 v8062 
                                            let _run_target_args'_v8057 = v8063 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8065 : Ref<Str> = v8052 |> unbox<Ref<Str>>
                                            let _run_target_args'_v8057 = v8065 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8069 : Ref<Str> = v8052 |> unbox<Ref<Str>>
                                            let _run_target_args'_v8057 = v8069 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8073 : Ref<Str> = v8052 |> unbox<Ref<Str>>
                                            let _run_target_args'_v8057 = v8073 
                                            #endif
#else
                                            let v8077 : Ref<Str> = v8052 |> unbox<Ref<Str>>
                                            let _run_target_args'_v8057 = v8077 
                                            #endif
                                            let v8080 : Ref<Str> = _run_target_args'_v8057 
                                            let v8089 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v8090 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v8080) v8089 
                                            let v8093 : (Vec<std_string_String> -> US11) = method24()
                                            let v8094 : US11 option = v8090 |> Option.map v8093 
                                            let v8114 : US11 = US11_1
                                            let v8115 : US11 = v8094 |> Option.defaultValue v8114 
                                            let v8119 : (std_string_String []) = [||]
                                            let v8120 : string = "$0.to_vec()"
                                            let v8121 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v8119 v8120 
                                            let v8124 : Vec<std_string_String> =
                                                match v8115 with
                                                | US11_1 -> (* None *)
                                                    v8121
                                                | US11_0(v8122) -> (* Some *)
                                                    v8122
                                            (* run_target_args'
                                            let v8129 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v8134 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8135 : string = "std::fs::read(&*$0)"
                                            let v8136 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8051 v8135 
                                            (* run_target_args'
                                            let v8138 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8139 : string = "$0.unwrap()"
                                            let v8140 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8136 v8139 
                                            let _run_target_args'_v8138 = v8140 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8141 : string = "$0.unwrap()"
                                            let v8142 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8136 v8141 
                                            let _run_target_args'_v8138 = v8142 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8143 : string = "$0.unwrap()"
                                            let v8144 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8136 v8143 
                                            let _run_target_args'_v8138 = v8144 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8145 : Vec<uint8> = match v8136 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8138 = v8145 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8146 : Vec<uint8> = match v8136 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8138 = v8146 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8147 : Vec<uint8> = match v8136 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8138 = v8147 
                                            #endif
#else
                                            let v8148 : Vec<uint8> = match v8136 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8138 = v8148 
                                            #endif
                                            let v8149 : Vec<uint8> = _run_target_args'_v8138 
                                            let _run_target_args'_v8134 = v8149 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8153 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v8134 = v8153 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8157 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v8134 = v8157 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8161 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v8134 = v8161 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8165 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v8134 = v8165 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8169 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v8134 = v8169 
                                            #endif
#else
                                            let v8172 : (uint8 []) = v8051 |> System.IO.File.ReadAllBytes
                                            let v8173 : string = "$0.to_vec()"
                                            let v8174 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8172 v8173 
                                            let _run_target_args'_v8134 = v8174 
                                            #endif
                                            let v8175 : Vec<uint8> = _run_target_args'_v8134 
                                            let v8184 : Vec<uint8> = method25(v8175)
                                            let v8185 : string = "std::string::String::from_utf8($0)"
                                            let v8186 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8184 v8185 
                                            (* run_target_args'
                                            let v8188 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8189 : string = "$0.unwrap()"
                                            let v8190 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8186 v8189 
                                            let _run_target_args'_v8188 = v8190 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8191 : string = "$0.unwrap()"
                                            let v8192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8186 v8191 
                                            let _run_target_args'_v8188 = v8192 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8193 : string = "$0.unwrap()"
                                            let v8194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8186 v8193 
                                            let _run_target_args'_v8188 = v8194 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8195 : std_string_String = match v8186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8188 = v8195 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8196 : std_string_String = match v8186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8188 = v8196 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8197 : std_string_String = match v8186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8188 = v8197 
                                            #endif
#else
                                            let v8198 : std_string_String = match v8186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8188 = v8198 
                                            #endif
                                            let v8199 : std_string_String = _run_target_args'_v8188 
                                            let v8202 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8203 : string = Fable.Core.RustInterop.emitRustExpr v8199 v8202 
                                            let _run_target_args'_v8129 = v8203 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8205 : string = null |> unbox<string>
                                            let _run_target_args'_v8129 = v8205 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8209 : string = null |> unbox<string>
                                            let _run_target_args'_v8129 = v8209 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8213 : string = null |> unbox<string>
                                            let _run_target_args'_v8129 = v8213 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8217 : string = null |> unbox<string>
                                            let _run_target_args'_v8129 = v8217 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8221 : string = null |> unbox<string>
                                            let _run_target_args'_v8129 = v8221 
                                            #endif
#else
                                            let v8224 : string = v8051 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v8129 = v8224 
                                            #endif
                                            let v8225 : string = _run_target_args'_v8129 
                                            let v8236 : string = "ts"
                                            let v8237 : string = $"%A{struct (v8236, v8225)}"
                                            let v8240 : string = method26(v8237)
                                            let v8241 : string = method31()
                                            let v8242 : US5 = method32(v8241)
                                            let v8248 : US5 =
                                                match v8242 with
                                                | US5_1 -> (* None *)
                                                    let v8245 : string = __SOURCE_DIRECTORY__
                                                    method32(v8245)
                                                | US5_0(v8243) -> (* Some *)
                                                    US5_0(v8243)
                                            let v8254 : US5 =
                                                match v8248 with
                                                | US5_1 -> (* None *)
                                                    let v8251 : string = "/workspaces"
                                                    method32(v8251)
                                                | US5_0(v8249) -> (* Some *)
                                                    US5_0(v8249)
                                            let v8258 : string =
                                                match v8254 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v8255) -> (* Some *)
                                                    v8255
                                            let v8259 : string = method50(v8258)
                                            let v8260 : bool = "deps" = v8259
                                            let v8271 : string =
                                                if v8260 then
                                                    let v8261 : string option = method38(v8258)
                                                    let v8263 : string = v8261 |> Option.get
                                                    let v8266 : US5 = method32(v8263)
                                                    match v8266 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v8267) -> (* Some *)
                                                        v8267
                                                else
                                                    v8258
                                            let v8272 : string = "polyglot"
                                            let v8273 : string = method33(v8271, v8272)
                                            let v8274 : string = method31()
                                            let v8276 : (unit -> string) = v8274.ToLower
                                            let v8277 : string = v8276 ()
                                            let v8281 : (unit -> string) = v8273.ToLower
                                            let v8282 : string = v8281 ()
                                            let v8286 : bool = v8277.StartsWith (v8282, false, null)
                                            let v8291 : US13 =
                                                if v8286 then
                                                    US13_1(v8282)
                                                else
                                                    US13_0(v8282)
                                            let v8303 : Result<string, string> =
                                                match v8291 with
                                                | US13_1(v8297) -> (* Error *)
                                                    let v8299 : Result<string, string> = Error v8297 
                                                    v8299
                                                | US13_0(v8292) -> (* Ok *)
                                                    let v8294 : Result<string, string> = Ok v8292 
                                                    v8294
                                            let v8304 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v8305 : bool = Fable.Core.RustInterop.emitRustExpr v8303 v8304 
                                            let v8306 : string = "x"
                                            let v8307 : string = Fable.Core.RustInterop.emitRustExpr () v8306 
                                            let v8308 : string = "true; $0 })"
                                            let v8309 : bool = Fable.Core.RustInterop.emitRustExpr v8307 v8308 
                                            let v8310 : string = "_result_unwrap_or_else"
                                            let v8311 : string = Fable.Core.RustInterop.emitRustExpr () v8310 
                                            let v8312 : string = "spiral"
                                            let v8313 : US41 = US41_1
                                            let v8314 : US42 = US42_0(v8313)
                                            let v8315 : US5 = US5_0(v8240)
                                            let v8316 : string = method183(v8315, v8312, v8314, v8311)
                                            let v8317 : string = "Fable.Core"
                                            let v8318 : string = "4.3.0"
                                            let v8319 : UH4 = UH4_0
                                            let v8320 : UH4 = UH4_1(v8317, v8318, v8319)
                                            let v8321 : UH2 = UH2_0
                                            let v8322 : string = method184(v8225, v8312, v8321, v8320, v8316, v8311)
                                            let v8323 : string = "lib/typescript/fable/fable_modules"
                                            let v8324 : string = method33(v8311, v8323)
                                            let v8325 : string = $"fable-library-{v8236}"
                                            let v8326 : string = method219(v8325)
                                            let v8327 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v8328 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v8324 v8327 
                                            let v8329 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v8330 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v8325)
                                            let v8331 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v8328, v8330) v8329 
                                            let v8332 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method223(v8326)
                                            let v8333 : string = "futures::stream::StreamExt::filter_map(v8331, |x| async { v8332(x) })"
                                            let v8334 : _ = Fable.Core.RustInterop.emitRustExpr () v8333 
                                            let v8335 : string = "Box::pin(futures::stream::StreamExt::collect(v8334))"
                                            let v8336 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v8335 
                                            let v8337 : string = "v8336.await"
                                            let v8338 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v8337 
                                            let v8339 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v8340 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v8338 v8339 
                                            let v8341 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v8342 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v8343 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v8340, v8342) v8341 
                                            let v8344 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v8345 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v8343 v8344 
                                            let v8346 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v8347 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v8345 v8346 
                                            let v8348 : struct (string * string) option = v8347 |> Array.tryItem 0 
                                            let v8351 : (struct (string * string) -> US51) = method228()
                                            let v8352 : US51 option = v8348 |> Option.map v8351 
                                            let v8373 : US51 = US51_1
                                            let v8374 : US51 = v8352 |> Option.defaultValue v8373 
                                            let v8438 : unit = ()
                                            let v8439 : (unit -> unit) = closure118(v8374)
                                            let v8440 : unit = (fun () -> v8439 (); v8438) ()
                                            method230(v8316, v8324, v8374)
                                            let v8501 : US39 = US39_1
                                            let struct (v8502 : int32, v8503 : string) = method193(v8501, v8316, v8236, v8322, v8291)
                                            method230(v8316, v8324, v8374)
                                            let v8505 : bool = v8502 <> 0 
                                            let struct (v9233 : US5, v9234 : US5, v9235 : US5, v9236 : US5) =
                                                if v8505 then
                                                    let v8568 : unit = ()
                                                    let v8569 : (unit -> unit) = closure119(v8503, v8502)
                                                    let v8570 : unit = (fun () -> v8569 (); v8568) ()
                                                    let v8631 : US5 = US5_0(v8236)
                                                    let v8632 : US5 = US5_1
                                                    let v8633 : US5 = US5_1
                                                    let v8634 : US5 = US5_0(v8503)
                                                    struct (v8631, v8632, v8633, v8634)
                                                else
                                                    let v8635 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v8636 : bool = Fable.Core.RustInterop.emitRustExpr v8124 v8635 
                                                    let v8637 : string = "x"
                                                    let v8638 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8637 
                                                    let v8639 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v8640 : string = Fable.Core.RustInterop.emitRustExpr v8638 v8639 
                                                    let v8643 : string = "="
                                                    let v8644 : bool = v8640.Contains v8643 
                                                    let v8648 : string =
                                                        if v8644 then
                                                            v8640
                                                        else
                                                            let v8647 : string = $"\"{v8640}\":\"*\""
                                                            v8647
                                                    let v8649 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v8650 : bool = Fable.Core.RustInterop.emitRustExpr v8648 v8649 
                                                    let v8651 : string = "_vec_map"
                                                    let v8652 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v8651 
                                                    let v8653 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v8654 : (string []) = Fable.Core.RustInterop.emitRustExpr v8652 v8653 
                                                    let v8659 : unit = ()
                                                    let _let'_v8659 =
                                                        seq {
                                                            for i = 0 to v8654.Length - 1 do yield v8654.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v8662 : string seq = _let'_v8659 
                                                    let v8670 : (string -> (string seq -> string)) = String.concat
                                                    let v8671 : string = ",\n"
                                                    let v8672 : (string seq -> string) = v8670 v8671
                                                    let v8673 : string = v8672 v8662
                                                    let v8676 : string = $"{{"
                                                    let v8677 : string = $"  \"name\": \"spiral_{v8240}\","
                                                    let v8678 : string = v8676 + v8677 
                                                    let v8679 : string = $"  \"dependencies\": {{"
                                                    let v8680 : string = v8678 + v8679 
                                                    let v8681 : string = v8680 + v8673 
                                                    let v8682 : string = $"  }},"
                                                    let v8683 : string = v8681 + v8682 
                                                    let v8684 : string = $"    \"devDependencies\": {{"
                                                    let v8685 : string = v8683 + v8684 
                                                    let v8686 : string = $"  }},"
                                                    let v8687 : string = v8685 + v8686 
                                                    let v8688 : string = $"}}"
                                                    let v8689 : string = v8687 + v8688 
                                                    let v8690 : string = "package.json"
                                                    let v8691 : string = method33(v8316, v8690)
                                                    let v8692 : string = "../.."
                                                    let v8693 : string = method33(v8316, v8692)
                                                    let v8694 : string = method33(v8693, v8690)
                                                    method70(v8691, v8689)
                                                    let v8695 : string = ""
                                                    method70(v8694, v8695)
                                                    let v8696 : string = $"{v8312}.{v8236}"
                                                    let v8697 : string = method33(v8316, v8696)
                                                    let v8758 : unit = ()
                                                    let v8759 : (unit -> unit) = closure120(v8697)
                                                    let v8760 : unit = (fun () -> v8759 (); v8758) ()
                                                    (* run_target_args'
                                                    let v8825 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v8830 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8831 : string = "std::fs::read(&*$0)"
                                                    let v8832 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8697 v8831 
                                                    (* run_target_args'
                                                    let v8834 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8835 : string = "$0.unwrap()"
                                                    let v8836 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8832 v8835 
                                                    let _run_target_args'_v8834 = v8836 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8837 : string = "$0.unwrap()"
                                                    let v8838 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8832 v8837 
                                                    let _run_target_args'_v8834 = v8838 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8839 : string = "$0.unwrap()"
                                                    let v8840 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8832 v8839 
                                                    let _run_target_args'_v8834 = v8840 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8841 : Vec<uint8> = match v8832 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8834 = v8841 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8842 : Vec<uint8> = match v8832 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8834 = v8842 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8843 : Vec<uint8> = match v8832 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8834 = v8843 
                                                    #endif
#else
                                                    let v8844 : Vec<uint8> = match v8832 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8834 = v8844 
                                                    #endif
                                                    let v8845 : Vec<uint8> = _run_target_args'_v8834 
                                                    let _run_target_args'_v8830 = v8845 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8849 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8830 = v8849 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8853 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8830 = v8853 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8857 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8830 = v8857 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8861 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8830 = v8861 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8865 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8830 = v8865 
                                                    #endif
#else
                                                    let v8868 : (uint8 []) = v8697 |> System.IO.File.ReadAllBytes
                                                    let v8869 : string = "$0.to_vec()"
                                                    let v8870 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8868 v8869 
                                                    let _run_target_args'_v8830 = v8870 
                                                    #endif
                                                    let v8871 : Vec<uint8> = _run_target_args'_v8830 
                                                    let v8880 : Vec<uint8> = method25(v8871)
                                                    let v8881 : string = "std::string::String::from_utf8($0)"
                                                    let v8882 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8880 v8881 
                                                    (* run_target_args'
                                                    let v8884 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8885 : string = "$0.unwrap()"
                                                    let v8886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8882 v8885 
                                                    let _run_target_args'_v8884 = v8886 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8887 : string = "$0.unwrap()"
                                                    let v8888 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8882 v8887 
                                                    let _run_target_args'_v8884 = v8888 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8889 : string = "$0.unwrap()"
                                                    let v8890 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8882 v8889 
                                                    let _run_target_args'_v8884 = v8890 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8891 : std_string_String = match v8882 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8884 = v8891 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8892 : std_string_String = match v8882 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8884 = v8892 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8893 : std_string_String = match v8882 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8884 = v8893 
                                                    #endif
#else
                                                    let v8894 : std_string_String = match v8882 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8884 = v8894 
                                                    #endif
                                                    let v8895 : std_string_String = _run_target_args'_v8884 
                                                    let v8898 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v8899 : string = Fable.Core.RustInterop.emitRustExpr v8895 v8898 
                                                    let _run_target_args'_v8825 = v8899 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8901 : string = null |> unbox<string>
                                                    let _run_target_args'_v8825 = v8901 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8905 : string = null |> unbox<string>
                                                    let _run_target_args'_v8825 = v8905 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8909 : string = null |> unbox<string>
                                                    let _run_target_args'_v8825 = v8909 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8913 : string = null |> unbox<string>
                                                    let _run_target_args'_v8825 = v8913 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8917 : string = null |> unbox<string>
                                                    let _run_target_args'_v8825 = v8917 
                                                    #endif
#else
                                                    let v8920 : string = v8697 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v8825 = v8920 
                                                    #endif
                                                    let v8921 : string = _run_target_args'_v8825 
                                                    let v8932 : string = "// spiral.process_typescript"
                                                    let v8933 : bool = v8921.Contains v8932 
                                                    let v8942 : string =
                                                        if v8933 then
                                                            v8921
                                                        else
                                                            let v8936 : string = $"\"./fable_modules/fable-library-ts.{v8374}/"
                                                            let v8937 : string = $"\"{v8311}/lib/typescript/fable/fable_modules/fable-library-ts.{v8374}/"
                                                            let v8938 : string = v8921.Replace (v8936, v8937)
                                                            let v8939 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v8940 : string = " defaultOf::<()>();"
                                                            method60(v8939, v8940, v8938)
                                                    let v8943 : bool = v8933 = false
                                                    if v8943 then
                                                        let v8944 : string = $"{v8942}\n\n{v8932}\n"
                                                        method70(v8697, v8944)
                                                    let v8945 : string = $"bun --bun run \"{v8697}\""
                                                    let v8946 : string = "PATH"
                                                    let v8947 : string = method3(v8946)
                                                    let v8948 : bool = v8947 = ""
                                                    let v8987 : US5 =
                                                        if v8948 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v8951 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v8952 : string = "cfg!(windows)"
                                                            let v8953 : bool = Fable.Core.RustInterop.emitRustExpr () v8952 
                                                            let _run_target_args'_v8951 = v8953 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v8954 : string = "cfg!(windows)"
                                                            let v8955 : bool = Fable.Core.RustInterop.emitRustExpr () v8954 
                                                            let _run_target_args'_v8951 = v8955 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v8956 : string = "cfg!(windows)"
                                                            let v8957 : bool = Fable.Core.RustInterop.emitRustExpr () v8956 
                                                            let _run_target_args'_v8951 = v8957 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v8958 : US3 = US3_0
                                                            let v8959 : US4 = US4_5(v8958)
                                                            let v8960 : string = $"platform.is_windows / target: {v8959}"
                                                            let v8961 : bool = failwith<bool> v8960
                                                            let _run_target_args'_v8951 = v8961 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v8962 : US3 = US3_0
                                                            let v8963 : US4 = US4_6(v8962)
                                                            let v8964 : string = $"platform.is_windows / target: {v8963}"
                                                            let v8965 : bool = failwith<bool> v8964
                                                            let _run_target_args'_v8951 = v8965 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v8966 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v8967 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v8968 : bool = v8967 v8966
                                                            let _run_target_args'_v8951 = v8968 
                                                            #endif
#else
                                                            let v8969 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v8970 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v8971 : bool = v8970 v8969
                                                            let _run_target_args'_v8951 = v8971 
                                                            #endif
                                                            let v8972 : bool = _run_target_args'_v8951 
                                                            let v8983 : string =
                                                                if v8972 then
                                                                    let v8981 : string = ";"
                                                                    v8981
                                                                else
                                                                    let v8982 : string = ":"
                                                                    v8982
                                                            let v8984 : string = "~/.bun/bin"
                                                            let v8985 : string = $"{v8984}{v8983}{v8947}"
                                                            US5_0(v8985)
                                                    let v8993 : UH4 =
                                                        match v8987 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v8988) -> (* Some *)
                                                            let v8989 : UH4 = UH4_0
                                                            UH4_1(v8946, v8988, v8989)
                                                    let v8994 : string = "TRACE_LEVEL"
                                                    let v8995 : string = "Verbose"
                                                    let v8996 : UH4 = UH4_0
                                                    let v8997 : UH4 = UH4_1(v8994, v8995, v8996)
                                                    let v8998 : UH4 = method233(v8993, v8997)
                                                    let v8999 : struct (string * string) list = []
                                                    let v9000 : struct (string * string) list = method234(v8998, v8999)
                                                    let v9002 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v9003 : (struct (string * string) []) = v9002 v9000
                                                    let v9007 : System.Threading.CancellationToken option = None
                                                    let v9010 : (struct (string * string) []) = [||]
                                                    let v9012 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v9016 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v9020 : string option = None
                                                    let v9034 : Result<string, string> =
                                                        match v8291 with
                                                        | US13_1(v9028) -> (* Error *)
                                                            let v9030 : Result<string, string> = Error v9028 
                                                            v9030
                                                        | US13_0(v9023) -> (* Ok *)
                                                            let v9025 : Result<string, string> = Ok v9023 
                                                            v9025
                                                    (* run_target_args'
                                                    let v9036 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9037 : string = "$0.ok()"
                                                    let v9038 : string option = Fable.Core.RustInterop.emitRustExpr v9034 v9037 
                                                    let _run_target_args'_v9036 = v9038 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9039 : string = "$0.ok()"
                                                    let v9040 : string option = Fable.Core.RustInterop.emitRustExpr v9034 v9039 
                                                    let _run_target_args'_v9036 = v9040 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9041 : string = "$0.ok()"
                                                    let v9042 : string option = Fable.Core.RustInterop.emitRustExpr v9034 v9041 
                                                    let _run_target_args'_v9036 = v9042 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9043 : string option = match v9034 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v9036 = v9043 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9044 : string option = match v9034 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v9036 = v9044 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9045 : string option = match v9034 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v9036 = v9045 
                                                    #endif
#else
                                                    let v9046 : string option = match v9034 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v9036 = v9046 
                                                    #endif
                                                    let v9047 : string option = _run_target_args'_v9036 
                                                    let v9050 : bool = true
                                                    let struct (v9051 : int32, v9052 : string) = method91(v8945, v9007, v9003, v9012, v9016, v9050, v9047)
                                                    let v9053 : int32 = v9003.Length
                                                    let v9054 : (string []) = Array.zeroCreate<string> (v9053)
                                                    let v9055 : Mut5 = {l0 = 0} : Mut5
                                                    while method29(v9053, v9055) do
                                                        let v9057 : int32 = v9055.l0
                                                        let struct (v9058 : string, v9059 : string) = v9003.[int v9057]
                                                        let v9060 : string = $"$env:{v9058}=''{v9059}''"
                                                        v9054.[int v9057] <- v9060
                                                        let v9061 : int32 = v9057 + 1
                                                        v9055.l0 <- v9061
                                                        ()
                                                    let v9063 : string seq = v9054 |> Seq.ofArray
                                                    let v9068 : (string -> (string seq -> string)) = String.concat
                                                    let v9069 : string = ";"
                                                    let v9070 : (string seq -> string) = v9068 v9069
                                                    let v9071 : string = v9070 v9063
                                                    let v9074 : string = $"pwsh -c '{v9071}; {v8945}'"
                                                    let v9075 : bool = v9051 = 0
                                                    let struct (v9229 : US5, v9230 : US5, v9231 : US5, v9232 : US5) =
                                                        if v9075 then
                                                            let v9076 : (string -> US5) = closure72()
                                                            let v9077 : (unit -> string) = closure121(v9052)
                                                            let v9078 : (exn -> US5) = closure122(v8697, v9052, v9074)
                                                            let v9080 : US5 = US5_1
                                                            let result = ref v9080
                                                            try
                                                                result.Value <- v9077 () |> v9076 
                                                            with ex ->
                                                                result.Value <- v9078 ex 
                                                            let v9081 : US5 = result.Value
                                                            let v9095 : string option =
                                                                match v9081 with
                                                                | US5_1 -> (* None *)
                                                                    let v9091 : string option = None
                                                                    v9091
                                                                | US5_0(v9085) -> (* Some *)
                                                                    let v9087 : string option = Some v9085 
                                                                    v9087
                                                            let v9096 : string = "$0.unwrap()"
                                                            let v9097 : string = Fable.Core.RustInterop.emitRustExpr v9095 v9096 
                                                            let v9098 : US5 = US5_0(v8236)
                                                            let v9099 : US5 = US5_0(v8942)
                                                            let v9100 : US5 = US5_0(v8697)
                                                            let v9101 : US5 = US5_0(v9097)
                                                            struct (v9098, v9099, v9100, v9101)
                                                        else
                                                            let v9162 : unit = ()
                                                            let v9163 : (unit -> unit) = closure124(v8697, v9052, v9051, v9074)
                                                            let v9164 : unit = (fun () -> v9163 (); v9162) ()
                                                            let v9225 : US5 = US5_0(v8236)
                                                            let v9226 : US5 = US5_1
                                                            let v9227 : US5 = US5_1
                                                            let v9228 : US5 = US5_1
                                                            struct (v9225, v9226, v9227, v9228)
                                                    struct (v9229, v9230, v9231, v9232)
                                            struct (v9233, v9234, v9235, v9236)
                                        else
                                            let v9237 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9238 : string = Fable.Core.RustInterop.emitRustExpr v40 v9237 
                                            let v9239 : bool = v9238 = "python"
                                            let struct (v10400 : US5, v10401 : US5, v10402 : US5, v10403 : US5) =
                                                if v9239 then
                                                    let v9240 : string = method168()
                                                    (* run_target_args'
                                                    let v9245 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9246 : string = "&*$0"
                                                    let v9247 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9240 v9246 
                                                    let _run_target_args'_v9245 = v9247 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9248 : string = "&*$0"
                                                    let v9249 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9240 v9248 
                                                    let _run_target_args'_v9245 = v9249 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9250 : string = "&*$0"
                                                    let v9251 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9240 v9250 
                                                    let _run_target_args'_v9245 = v9251 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9253 : Ref<Str> = v9240 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9245 = v9253 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9257 : Ref<Str> = v9240 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9245 = v9257 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9261 : Ref<Str> = v9240 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9245 = v9261 
                                                    #endif
#else
                                                    let v9265 : Ref<Str> = v9240 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9245 = v9265 
                                                    #endif
                                                    let v9268 : Ref<Str> = _run_target_args'_v9245 
                                                    let v9277 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v9278 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9268) v9277 
                                                    let v9281 : (std_string_String -> US7) = method21()
                                                    let v9282 : US7 option = v9278 |> Option.map v9281 
                                                    let v9302 : US7 = US7_1
                                                    let v9303 : US7 = v9282 |> Option.defaultValue v9302 
                                                    let v9310 : std_string_String =
                                                        match v9303 with
                                                        | US7_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US7_0(v9307) -> (* Some *)
                                                            v9307
                                                    let v9311 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v9312 : string = Fable.Core.RustInterop.emitRustExpr v9310 v9311 
                                                    let v9313 : string = method23()
                                                    (* run_target_args'
                                                    let v9318 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9319 : string = "&*$0"
                                                    let v9320 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9313 v9319 
                                                    let _run_target_args'_v9318 = v9320 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9321 : string = "&*$0"
                                                    let v9322 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9313 v9321 
                                                    let _run_target_args'_v9318 = v9322 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9323 : string = "&*$0"
                                                    let v9324 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9313 v9323 
                                                    let _run_target_args'_v9318 = v9324 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9326 : Ref<Str> = v9313 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9318 = v9326 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9330 : Ref<Str> = v9313 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9318 = v9330 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9334 : Ref<Str> = v9313 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9318 = v9334 
                                                    #endif
#else
                                                    let v9338 : Ref<Str> = v9313 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9318 = v9338 
                                                    #endif
                                                    let v9341 : Ref<Str> = _run_target_args'_v9318 
                                                    let v9350 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v9351 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9341) v9350 
                                                    let v9354 : (Vec<std_string_String> -> US11) = method24()
                                                    let v9355 : US11 option = v9351 |> Option.map v9354 
                                                    let v9375 : US11 = US11_1
                                                    let v9376 : US11 = v9355 |> Option.defaultValue v9375 
                                                    let v9380 : (std_string_String []) = [||]
                                                    let v9381 : string = "$0.to_vec()"
                                                    let v9382 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v9380 v9381 
                                                    let v9385 : Vec<std_string_String> =
                                                        match v9376 with
                                                        | US11_1 -> (* None *)
                                                            v9382
                                                        | US11_0(v9383) -> (* Some *)
                                                            v9383
                                                    let v9386 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v9391 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v9396 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9397 : string = "std::fs::read(&*$0)"
                                                    let v9398 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9312 v9397 
                                                    (* run_target_args'
                                                    let v9400 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9401 : string = "$0.unwrap()"
                                                    let v9402 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9398 v9401 
                                                    let _run_target_args'_v9400 = v9402 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9403 : string = "$0.unwrap()"
                                                    let v9404 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9398 v9403 
                                                    let _run_target_args'_v9400 = v9404 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9405 : string = "$0.unwrap()"
                                                    let v9406 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9398 v9405 
                                                    let _run_target_args'_v9400 = v9406 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9407 : Vec<uint8> = match v9398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9400 = v9407 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9408 : Vec<uint8> = match v9398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9400 = v9408 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9409 : Vec<uint8> = match v9398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9400 = v9409 
                                                    #endif
#else
                                                    let v9410 : Vec<uint8> = match v9398 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9400 = v9410 
                                                    #endif
                                                    let v9411 : Vec<uint8> = _run_target_args'_v9400 
                                                    let _run_target_args'_v9396 = v9411 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9415 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9396 = v9415 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9419 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9396 = v9419 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9423 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9396 = v9423 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9427 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9396 = v9427 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9431 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9396 = v9431 
                                                    #endif
#else
                                                    let v9434 : (uint8 []) = v9312 |> System.IO.File.ReadAllBytes
                                                    let v9435 : string = "$0.to_vec()"
                                                    let v9436 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9434 v9435 
                                                    let _run_target_args'_v9396 = v9436 
                                                    #endif
                                                    let v9437 : Vec<uint8> = _run_target_args'_v9396 
                                                    let v9446 : Vec<uint8> = method25(v9437)
                                                    let v9447 : string = "std::string::String::from_utf8($0)"
                                                    let v9448 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9446 v9447 
                                                    (* run_target_args'
                                                    let v9450 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9451 : string = "$0.unwrap()"
                                                    let v9452 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9448 v9451 
                                                    let _run_target_args'_v9450 = v9452 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9453 : string = "$0.unwrap()"
                                                    let v9454 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9448 v9453 
                                                    let _run_target_args'_v9450 = v9454 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9455 : string = "$0.unwrap()"
                                                    let v9456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9448 v9455 
                                                    let _run_target_args'_v9450 = v9456 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9457 : std_string_String = match v9448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9450 = v9457 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9458 : std_string_String = match v9448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9450 = v9458 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9459 : std_string_String = match v9448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9450 = v9459 
                                                    #endif
#else
                                                    let v9460 : std_string_String = match v9448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9450 = v9460 
                                                    #endif
                                                    let v9461 : std_string_String = _run_target_args'_v9450 
                                                    let v9464 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v9465 : string = Fable.Core.RustInterop.emitRustExpr v9461 v9464 
                                                    let _run_target_args'_v9391 = v9465 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9467 : string = null |> unbox<string>
                                                    let _run_target_args'_v9391 = v9467 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9471 : string = null |> unbox<string>
                                                    let _run_target_args'_v9391 = v9471 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9475 : string = null |> unbox<string>
                                                    let _run_target_args'_v9391 = v9475 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9479 : string = null |> unbox<string>
                                                    let _run_target_args'_v9391 = v9479 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9483 : string = null |> unbox<string>
                                                    let _run_target_args'_v9391 = v9483 
                                                    #endif
#else
                                                    let v9486 : string = v9312 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v9391 = v9486 
                                                    #endif
                                                    let v9487 : string = _run_target_args'_v9391 
                                                    let v9498 : string = "py"
                                                    let v9499 : string = $"%A{struct (v9498, v9487)}"
                                                    let v9502 : string = method26(v9499)
                                                    let v9503 : string = method31()
                                                    let v9504 : US5 = method32(v9503)
                                                    let v9510 : US5 =
                                                        match v9504 with
                                                        | US5_1 -> (* None *)
                                                            let v9507 : string = __SOURCE_DIRECTORY__
                                                            method32(v9507)
                                                        | US5_0(v9505) -> (* Some *)
                                                            US5_0(v9505)
                                                    let v9516 : US5 =
                                                        match v9510 with
                                                        | US5_1 -> (* None *)
                                                            let v9513 : string = "/workspaces"
                                                            method32(v9513)
                                                        | US5_0(v9511) -> (* Some *)
                                                            US5_0(v9511)
                                                    let v9520 : string =
                                                        match v9516 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v9517) -> (* Some *)
                                                            v9517
                                                    let v9521 : string = method50(v9520)
                                                    let v9522 : bool = "deps" = v9521
                                                    let v9533 : string =
                                                        if v9522 then
                                                            let v9523 : string option = method38(v9520)
                                                            let v9525 : string = v9523 |> Option.get
                                                            let v9528 : US5 = method32(v9525)
                                                            match v9528 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v9529) -> (* Some *)
                                                                v9529
                                                        else
                                                            v9520
                                                    let v9534 : string = "polyglot"
                                                    let v9535 : string = method33(v9533, v9534)
                                                    let v9536 : string = method31()
                                                    let v9538 : (unit -> string) = v9536.ToLower
                                                    let v9539 : string = v9538 ()
                                                    let v9543 : (unit -> string) = v9535.ToLower
                                                    let v9544 : string = v9543 ()
                                                    let v9548 : bool = v9539.StartsWith (v9544, false, null)
                                                    let v9553 : US13 =
                                                        if v9548 then
                                                            US13_1(v9544)
                                                        else
                                                            US13_0(v9544)
                                                    let v9565 : Result<string, string> =
                                                        match v9553 with
                                                        | US13_1(v9559) -> (* Error *)
                                                            let v9561 : Result<string, string> = Error v9559 
                                                            v9561
                                                        | US13_0(v9554) -> (* Ok *)
                                                            let v9556 : Result<string, string> = Ok v9554 
                                                            v9556
                                                    let v9566 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v9567 : bool = Fable.Core.RustInterop.emitRustExpr v9565 v9566 
                                                    let v9568 : string = "x"
                                                    let v9569 : string = Fable.Core.RustInterop.emitRustExpr () v9568 
                                                    let v9570 : string = "true; $0 })"
                                                    let v9571 : bool = Fable.Core.RustInterop.emitRustExpr v9569 v9570 
                                                    let v9572 : string = "_result_unwrap_or_else"
                                                    let v9573 : string = Fable.Core.RustInterop.emitRustExpr () v9572 
                                                    let v9574 : string = "spiral"
                                                    let v9575 : US41 = US41_2
                                                    let v9576 : US42 = US42_0(v9575)
                                                    let v9577 : US5 = US5_0(v9502)
                                                    let v9578 : string = method183(v9577, v9574, v9576, v9573)
                                                    let v9579 : string = "Fable.Core"
                                                    let v9580 : string = "4.3.0"
                                                    let v9581 : UH4 = UH4_0
                                                    let v9582 : UH4 = UH4_1(v9579, v9580, v9581)
                                                    let v9583 : UH2 = UH2_0
                                                    let v9584 : string = method184(v9487, v9574, v9583, v9582, v9578, v9573)
                                                    let v9585 : string = "lib/python/fable/fable_modules"
                                                    let v9586 : string = method33(v9573, v9585)
                                                    let v9587 : string = $"fable_library"
                                                    let v9588 : string = method33(v9586, v9587)
                                                    let v9589 : string = $"fable_modules/fable_library"
                                                    let v9590 : string = method33(v9578, v9589)
                                                    method192(v9588, v9590)
                                                    let v9591 : US39 = US39_1
                                                    let struct (v9592 : int32, v9593 : string) = method193(v9591, v9578, v9498, v9584, v9553)
                                                    let v9595 : bool = v9592 <> 0 
                                                    let struct (v10269 : US5, v10270 : US5, v10271 : US5, v10272 : US5) =
                                                        if v9595 then
                                                            let v9658 : unit = ()
                                                            let v9659 : (unit -> unit) = closure125(v9593, v9592)
                                                            let v9660 : unit = (fun () -> v9659 (); v9658) ()
                                                            let v9721 : US5 = US5_0(v9498)
                                                            let v9722 : US5 = US5_1
                                                            let v9723 : US5 = US5_1
                                                            let v9724 : US5 = US5_0(v9593)
                                                            struct (v9721, v9722, v9723, v9724)
                                                        else
                                                            let v9725 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v9726 : bool = Fable.Core.RustInterop.emitRustExpr v9385 v9725 
                                                            let v9727 : string = "x"
                                                            let v9728 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9727 
                                                            let v9729 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9730 : string = Fable.Core.RustInterop.emitRustExpr v9728 v9729 
                                                            let v9733 : string = "="
                                                            let v9734 : bool = v9730.Contains v9733 
                                                            let v9738 : string =
                                                                if v9734 then
                                                                    v9730
                                                                else
                                                                    let v9737 : string = $"\"{v9730}\":\"*\""
                                                                    v9737
                                                            let v9739 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v9740 : bool = Fable.Core.RustInterop.emitRustExpr v9738 v9739 
                                                            let v9741 : string = "_vec_map"
                                                            let v9742 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v9741 
                                                            let v9743 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v9744 : (string []) = Fable.Core.RustInterop.emitRustExpr v9742 v9743 
                                                            let v9749 : unit = ()
                                                            let _let'_v9749 =
                                                                seq {
                                                                    for i = 0 to v9744.Length - 1 do yield v9744.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v9752 : string seq = _let'_v9749 
                                                            let v9760 : (string -> (string seq -> string)) = String.concat
                                                            let v9761 : string = ",\n"
                                                            let v9762 : (string seq -> string) = v9760 v9761
                                                            let v9763 : string = v9762 v9752
                                                            let v9766 : string = $"{{"
                                                            let v9767 : string = $"  \"name\": \"spiral_{v9502}\","
                                                            let v9768 : string = v9766 + v9767 
                                                            let v9769 : string = $"  \"dependencies\": {{"
                                                            let v9770 : string = v9768 + v9769 
                                                            let v9771 : string = v9770 + v9763 
                                                            let v9772 : string = $"  }},"
                                                            let v9773 : string = v9771 + v9772 
                                                            let v9774 : string = $"    \"devDependencies\": {{"
                                                            let v9775 : string = v9773 + v9774 
                                                            let v9776 : string = $"  }},"
                                                            let v9777 : string = v9775 + v9776 
                                                            let v9778 : string = $"}}"
                                                            let v9779 : string = v9777 + v9778 
                                                            let v9780 : string = "package.json"
                                                            let v9781 : string = method33(v9578, v9780)
                                                            let v9782 : string = "../.."
                                                            let v9783 : string = method33(v9578, v9782)
                                                            let v9784 : string = method33(v9783, v9780)
                                                            method70(v9781, v9779)
                                                            let v9785 : string = ""
                                                            method70(v9784, v9785)
                                                            let v9786 : string = $"{v9574}.{v9498}"
                                                            let v9787 : string = method33(v9578, v9786)
                                                            let v9848 : unit = ()
                                                            let v9849 : (unit -> unit) = closure126(v9787)
                                                            let v9850 : unit = (fun () -> v9849 (); v9848) ()
                                                            (* run_target_args'
                                                            let v9915 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v9920 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9921 : string = "std::fs::read(&*$0)"
                                                            let v9922 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9787 v9921 
                                                            (* run_target_args'
                                                            let v9924 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9925 : string = "$0.unwrap()"
                                                            let v9926 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9922 v9925 
                                                            let _run_target_args'_v9924 = v9926 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9927 : string = "$0.unwrap()"
                                                            let v9928 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9922 v9927 
                                                            let _run_target_args'_v9924 = v9928 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9929 : string = "$0.unwrap()"
                                                            let v9930 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9922 v9929 
                                                            let _run_target_args'_v9924 = v9930 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9931 : Vec<uint8> = match v9922 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9924 = v9931 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9932 : Vec<uint8> = match v9922 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9924 = v9932 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9933 : Vec<uint8> = match v9922 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9924 = v9933 
                                                            #endif
#else
                                                            let v9934 : Vec<uint8> = match v9922 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9924 = v9934 
                                                            #endif
                                                            let v9935 : Vec<uint8> = _run_target_args'_v9924 
                                                            let _run_target_args'_v9920 = v9935 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9939 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9920 = v9939 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9943 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9920 = v9943 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9947 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9920 = v9947 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9951 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9920 = v9951 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9955 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9920 = v9955 
                                                            #endif
#else
                                                            let v9958 : (uint8 []) = v9787 |> System.IO.File.ReadAllBytes
                                                            let v9959 : string = "$0.to_vec()"
                                                            let v9960 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9958 v9959 
                                                            let _run_target_args'_v9920 = v9960 
                                                            #endif
                                                            let v9961 : Vec<uint8> = _run_target_args'_v9920 
                                                            let v9970 : Vec<uint8> = method25(v9961)
                                                            let v9971 : string = "std::string::String::from_utf8($0)"
                                                            let v9972 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9970 v9971 
                                                            (* run_target_args'
                                                            let v9974 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9975 : string = "$0.unwrap()"
                                                            let v9976 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9972 v9975 
                                                            let _run_target_args'_v9974 = v9976 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9977 : string = "$0.unwrap()"
                                                            let v9978 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9972 v9977 
                                                            let _run_target_args'_v9974 = v9978 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9979 : string = "$0.unwrap()"
                                                            let v9980 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9972 v9979 
                                                            let _run_target_args'_v9974 = v9980 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9981 : std_string_String = match v9972 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9974 = v9981 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9982 : std_string_String = match v9972 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9974 = v9982 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9983 : std_string_String = match v9972 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9974 = v9983 
                                                            #endif
#else
                                                            let v9984 : std_string_String = match v9972 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9974 = v9984 
                                                            #endif
                                                            let v9985 : std_string_String = _run_target_args'_v9974 
                                                            let v9988 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9989 : string = Fable.Core.RustInterop.emitRustExpr v9985 v9988 
                                                            let _run_target_args'_v9915 = v9989 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9991 : string = null |> unbox<string>
                                                            let _run_target_args'_v9915 = v9991 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9995 : string = null |> unbox<string>
                                                            let _run_target_args'_v9915 = v9995 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9999 : string = null |> unbox<string>
                                                            let _run_target_args'_v9915 = v9999 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v10003 : string = null |> unbox<string>
                                                            let _run_target_args'_v9915 = v10003 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v10007 : string = null |> unbox<string>
                                                            let _run_target_args'_v9915 = v10007 
                                                            #endif
#else
                                                            let v10010 : string = v9787 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v9915 = v10010 
                                                            #endif
                                                            let v10011 : string = _run_target_args'_v9915 
                                                            let v10022 : string = "# spiral.process_python"
                                                            let v10023 : bool = v10011.Contains v10022 
                                                            let v10035 : string =
                                                                if v10023 then
                                                                    v10011
                                                                else
                                                                    let v10026 : string = "\";\".into()"
                                                                    let v10027 : string = Fable.Core.RustInterop.emitRustExpr () v10026 
                                                                    let v10028 : string = "),)"
                                                                    let v10029 : string = v10028 + v10027 
                                                                    let v10030 : string = "));"
                                                                    let v10031 : string = v10011.Replace (v10029, v10030)
                                                                    let v10032 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v10033 : string = " defaultOf::<()>();"
                                                                    method60(v10032, v10033, v10031)
                                                            let v10036 : bool = v10023 = false
                                                            if v10036 then
                                                                let v10037 : string = $"{v10035}\n\n{v10022}\n"
                                                                method70(v9787, v10037)
                                                            let v10038 : string = $"python \"{v9787}\""
                                                            let v10039 : string = "TRACE_LEVEL"
                                                            let v10040 : string = "Verbose"
                                                            let v10041 : (struct (string * string) []) = [|struct (v10039, v10040)|]
                                                            let v10043 : System.Threading.CancellationToken option = None
                                                            let v10046 : (struct (string * string) []) = [||]
                                                            let v10048 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v10052 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v10056 : string option = None
                                                            let v10070 : Result<string, string> =
                                                                match v9553 with
                                                                | US13_1(v10064) -> (* Error *)
                                                                    let v10066 : Result<string, string> = Error v10064 
                                                                    v10066
                                                                | US13_0(v10059) -> (* Ok *)
                                                                    let v10061 : Result<string, string> = Ok v10059 
                                                                    v10061
                                                            (* run_target_args'
                                                            let v10072 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v10073 : string = "$0.ok()"
                                                            let v10074 : string option = Fable.Core.RustInterop.emitRustExpr v10070 v10073 
                                                            let _run_target_args'_v10072 = v10074 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v10075 : string = "$0.ok()"
                                                            let v10076 : string option = Fable.Core.RustInterop.emitRustExpr v10070 v10075 
                                                            let _run_target_args'_v10072 = v10076 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v10077 : string = "$0.ok()"
                                                            let v10078 : string option = Fable.Core.RustInterop.emitRustExpr v10070 v10077 
                                                            let _run_target_args'_v10072 = v10078 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v10079 : string option = match v10070 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v10072 = v10079 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v10080 : string option = match v10070 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v10072 = v10080 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v10081 : string option = match v10070 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v10072 = v10081 
                                                            #endif
#else
                                                            let v10082 : string option = match v10070 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v10072 = v10082 
                                                            #endif
                                                            let v10083 : string option = _run_target_args'_v10072 
                                                            let v10086 : bool = true
                                                            let struct (v10087 : int32, v10088 : string) = method91(v10038, v10043, v10041, v10048, v10052, v10086, v10083)
                                                            let v10089 : int32 = v10041.Length
                                                            let v10090 : (string []) = Array.zeroCreate<string> (v10089)
                                                            let v10091 : Mut5 = {l0 = 0} : Mut5
                                                            while method29(v10089, v10091) do
                                                                let v10093 : int32 = v10091.l0
                                                                let struct (v10094 : string, v10095 : string) = v10041.[int v10093]
                                                                let v10096 : string = $"$env:{v10094}=''{v10095}''"
                                                                v10090.[int v10093] <- v10096
                                                                let v10097 : int32 = v10093 + 1
                                                                v10091.l0 <- v10097
                                                                ()
                                                            let v10099 : string seq = v10090 |> Seq.ofArray
                                                            let v10104 : (string -> (string seq -> string)) = String.concat
                                                            let v10105 : string = ";"
                                                            let v10106 : (string seq -> string) = v10104 v10105
                                                            let v10107 : string = v10106 v10099
                                                            let v10110 : string = $"pwsh -c '{v10107}; {v10038}'"
                                                            let v10111 : bool = v10087 = 0
                                                            let struct (v10265 : US5, v10266 : US5, v10267 : US5, v10268 : US5) =
                                                                if v10111 then
                                                                    let v10112 : (string -> US5) = closure72()
                                                                    let v10113 : (unit -> string) = closure127(v10088)
                                                                    let v10114 : (exn -> US5) = closure128(v9787, v10088, v10110)
                                                                    let v10116 : US5 = US5_1
                                                                    let result = ref v10116
                                                                    try
                                                                        result.Value <- v10113 () |> v10112 
                                                                    with ex ->
                                                                        result.Value <- v10114 ex 
                                                                    let v10117 : US5 = result.Value
                                                                    let v10131 : string option =
                                                                        match v10117 with
                                                                        | US5_1 -> (* None *)
                                                                            let v10127 : string option = None
                                                                            v10127
                                                                        | US5_0(v10121) -> (* Some *)
                                                                            let v10123 : string option = Some v10121 
                                                                            v10123
                                                                    let v10132 : string = "$0.unwrap()"
                                                                    let v10133 : string = Fable.Core.RustInterop.emitRustExpr v10131 v10132 
                                                                    let v10134 : US5 = US5_0(v9498)
                                                                    let v10135 : US5 = US5_0(v10035)
                                                                    let v10136 : US5 = US5_0(v9787)
                                                                    let v10137 : US5 = US5_0(v10133)
                                                                    struct (v10134, v10135, v10136, v10137)
                                                                else
                                                                    let v10198 : unit = ()
                                                                    let v10199 : (unit -> unit) = closure130(v9787, v10088, v10087, v10110)
                                                                    let v10200 : unit = (fun () -> v10199 (); v10198) ()
                                                                    let v10261 : US5 = US5_0(v9498)
                                                                    let v10262 : US5 = US5_1
                                                                    let v10263 : US5 = US5_1
                                                                    let v10264 : US5 = US5_1
                                                                    struct (v10261, v10262, v10263, v10264)
                                                            struct (v10265, v10266, v10267, v10268)
                                                    struct (v10269, v10270, v10271, v10272)
                                                else
                                                    let v10333 : unit = ()
                                                    let v10334 : (unit -> unit) = closure131(v41, v40)
                                                    let v10335 : unit = (fun () -> v10334 (); v10333) ()
                                                    let v10396 : US5 = US5_1
                                                    let v10397 : US5 = US5_1
                                                    let v10398 : US5 = US5_1
                                                    let v10399 : US5 = US5_1
                                                    struct (v10396, v10397, v10398, v10399)
                                            struct (v10400, v10401, v10402, v10403)
                                    struct (v10404, v10405, v10406, v10407)
                            let v10415 : string =
                                match v10408 with
                                | US5_1 -> (* None *)
                                    let v10413 : string = ""
                                    v10413
                                | US5_0(v10412) -> (* Some *)
                                    v10412
                            let v10416 : string = "extension"
                            let v10420 : string =
                                match v10409 with
                                | US5_1 -> (* None *)
                                    let v10418 : string = ""
                                    v10418
                                | US5_0(v10417) -> (* Some *)
                                    v10417
                            let v10421 : string = "code"
                            let v10425 : string =
                                match v10410 with
                                | US5_1 -> (* None *)
                                    let v10423 : string = ""
                                    v10423
                                | US5_0(v10422) -> (* Some *)
                                    v10422
                            let v10426 : string = "code_path"
                            let v10430 : string =
                                match v10411 with
                                | US5_1 -> (* None *)
                                    let v10428 : string = ""
                                    v10428
                                | US5_0(v10427) -> (* Some *)
                                    v10427
                            let v10431 : string = "output"
                            [|struct (v10416, v10415); struct (v10421, v10420); struct (v10426, v10425); struct (v10431, v10430)|]
        | _ ->
            let v10437 : string = "extension"
            let v10438 : string = ""
            let v10439 : string = "code"
            let v10440 : string = "code_path"
            let v10441 : string = "output"
            [|struct (v10437, v10438); struct (v10439, v10438); struct (v10440, v10438); struct (v10441, v10438)|]
    let v10444 : string = "$0.to_vec()"
    let v10445 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v10443 v10444 
    let v10446 : unit = ()
    let v10447 : string = $"true; let _func1_from_v10446 = Func1::from(move |value| {{ //"
    let v10448 : bool = Fable.Core.RustInterop.emitRustExpr () v10447 
    let v10449 : string = $"value"
    let struct (v10450 : string, v10451 : string) = Fable.Core.RustInterop.emitRustExpr () v10449 
    (* run_target_args'
    let v10456 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10457 : string = "&*$0"
    let v10458 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10450 v10457 
    let _run_target_args'_v10456 = v10458 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10459 : string = "&*$0"
    let v10460 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10450 v10459 
    let _run_target_args'_v10456 = v10460 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10461 : string = "&*$0"
    let v10462 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10450 v10461 
    let _run_target_args'_v10456 = v10462 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10464 : Ref<Str> = v10450 |> unbox<Ref<Str>>
    let _run_target_args'_v10456 = v10464 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10468 : Ref<Str> = v10450 |> unbox<Ref<Str>>
    let _run_target_args'_v10456 = v10468 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10472 : Ref<Str> = v10450 |> unbox<Ref<Str>>
    let _run_target_args'_v10456 = v10472 
    #endif
#else
    let v10476 : Ref<Str> = v10450 |> unbox<Ref<Str>>
    let _run_target_args'_v10456 = v10476 
    #endif
    let v10479 : Ref<Str> = _run_target_args'_v10456 
    (* run_target_args'
    let v10492 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10493 : string = "String::from($0)"
    let v10494 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10479 v10493 
    let _run_target_args'_v10492 = v10494 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10495 : string = "String::from($0)"
    let v10496 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10479 v10495 
    let _run_target_args'_v10492 = v10496 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10497 : string = "String::from($0)"
    let v10498 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10479 v10497 
    let _run_target_args'_v10492 = v10498 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10500 : std_string_String = v10479 |> unbox<std_string_String>
    let _run_target_args'_v10492 = v10500 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10504 : std_string_String = v10479 |> unbox<std_string_String>
    let _run_target_args'_v10492 = v10504 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10508 : std_string_String = v10479 |> unbox<std_string_String>
    let _run_target_args'_v10492 = v10508 
    #endif
#else
    let v10512 : std_string_String = v10479 |> unbox<std_string_String>
    let _run_target_args'_v10492 = v10512 
    #endif
    let v10515 : std_string_String = _run_target_args'_v10492 
    (* run_target_args'
    let v10528 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10529 : string = "&*$0"
    let v10530 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10451 v10529 
    let _run_target_args'_v10528 = v10530 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10531 : string = "&*$0"
    let v10532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10451 v10531 
    let _run_target_args'_v10528 = v10532 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10533 : string = "&*$0"
    let v10534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10451 v10533 
    let _run_target_args'_v10528 = v10534 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10536 : Ref<Str> = v10451 |> unbox<Ref<Str>>
    let _run_target_args'_v10528 = v10536 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10540 : Ref<Str> = v10451 |> unbox<Ref<Str>>
    let _run_target_args'_v10528 = v10540 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10544 : Ref<Str> = v10451 |> unbox<Ref<Str>>
    let _run_target_args'_v10528 = v10544 
    #endif
#else
    let v10548 : Ref<Str> = v10451 |> unbox<Ref<Str>>
    let _run_target_args'_v10528 = v10548 
    #endif
    let v10551 : Ref<Str> = _run_target_args'_v10528 
    (* run_target_args'
    let v10564 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10565 : string = "String::from($0)"
    let v10566 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10551 v10565 
    let _run_target_args'_v10564 = v10566 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10567 : string = "String::from($0)"
    let v10568 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10551 v10567 
    let _run_target_args'_v10564 = v10568 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10569 : string = "String::from($0)"
    let v10570 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10551 v10569 
    let _run_target_args'_v10564 = v10570 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10572 : std_string_String = v10551 |> unbox<std_string_String>
    let _run_target_args'_v10564 = v10572 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10576 : std_string_String = v10551 |> unbox<std_string_String>
    let _run_target_args'_v10564 = v10576 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10580 : std_string_String = v10551 |> unbox<std_string_String>
    let _run_target_args'_v10564 = v10580 
    #endif
#else
    let v10584 : std_string_String = v10551 |> unbox<std_string_String>
    let _run_target_args'_v10564 = v10584 
    #endif
    let v10587 : std_string_String = _run_target_args'_v10564 
    let v10597 : (std_string_String * std_string_String) = v10515, v10587 
    let func1_from_result = v10597 //
    let v10600 : _ = func1_from_result
    let v10601 : string = $"true; $0 /*"
    let v10602 : bool = Fable.Core.RustInterop.emitRustExpr v10600 v10601 
    let v10603 : string = $"*/ }}); //"
    let v10604 : bool = Fable.Core.RustInterop.emitRustExpr () v10603 
    let v10605 : string = $"_func1_from_v10446"
    let v10606 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v10605 
    let v10607 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v10608 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v10606)
    let v10609 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v10445, v10608) v10607 
    let v10610 : string = "std::collections::BTreeMap::from_iter(v10609.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v10611 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10610 
    let v10612 : string = "serde_json::to_string(&v10611)"
    let v10613 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v10612 
    let v10614 : (serde_json_Error -> string) = method242()
    (* run_target_args'
    let v10616 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10617 : string = "$0.map_err(|x| $1(x))"
    let v10618 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v10613, v10614) v10617 
    let _run_target_args'_v10616 = v10618 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10619 : string = "$0.map_err(|x| $1(x))"
    let v10620 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v10613, v10614) v10619 
    let _run_target_args'_v10616 = v10620 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10621 : string = "$0.map_err(|x| $1(x))"
    let v10622 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v10613, v10614) v10621 
    let _run_target_args'_v10616 = v10622 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10623 : Result<std_string_String, string> = match v10613 with Ok x -> Ok x | Error x -> Error (v10614 x)
    let _run_target_args'_v10616 = v10623 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10624 : Result<std_string_String, string> = match v10613 with Ok x -> Ok x | Error x -> Error (v10614 x)
    let _run_target_args'_v10616 = v10624 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10625 : Result<std_string_String, string> = match v10613 with Ok x -> Ok x | Error x -> Error (v10614 x)
    let _run_target_args'_v10616 = v10625 
    #endif
#else
    let v10626 : Result<std_string_String, string> = match v10613 with Ok x -> Ok x | Error x -> Error (v10614 x)
    let _run_target_args'_v10616 = v10626 
    #endif
    let v10627 : Result<std_string_String, string> = _run_target_args'_v10616 
    let v10630 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v10631 : bool = Fable.Core.RustInterop.emitRustExpr v10627 v10630 
    let v10632 : string = "x"
    let v10633 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10632 
    let v10634 : string = "fable_library_rust::String_::fromString($0)"
    let v10635 : string = Fable.Core.RustInterop.emitRustExpr v10633 v10634 
    let v10636 : string = "true; $0 })"
    let v10637 : bool = Fable.Core.RustInterop.emitRustExpr v10635 v10636 
    let v10638 : string = "_result_map_"
    let v10639 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v10638 
    let v10640 : string = ""
    let v10641 : string = "}"
    let v10642 : string = v10640 + v10641 
    let x = v10639 //
    let v10643 : _ = x
    let v10644 : unit = ()
    (* run_target_args'
    let v10645 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10646 : string = $"true; let _fix_closure_v10644 = $0"
    let v10647 : bool = Fable.Core.RustInterop.emitRustExpr v10643 v10646 
    let _run_target_args'_v10645 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10648 : string = $"true; let _fix_closure_v10644 = $0"
    let v10649 : bool = Fable.Core.RustInterop.emitRustExpr v10643 v10648 
    let _run_target_args'_v10645 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10650 : string = $"true; let _fix_closure_v10644 = $0"
    let v10651 : bool = Fable.Core.RustInterop.emitRustExpr v10643 v10650 
    let _run_target_args'_v10645 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v10645 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v10645 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v10645 = false 
    #endif
#else
    let _run_target_args'_v10645 = false 
    #endif
    let v10652 : bool = _run_target_args'_v10645 
    let v10653 : string = $"true; _fix_closure_v10644 " + v10642 + "); " + v10640 + " // rust.fix_closure'"
    let v10654 : bool = Fable.Core.RustInterop.emitRustExpr () v10653 
    let v10655 : string = "__future_init"
    let v10656 : _ = Fable.Core.RustInterop.emitRustExpr () v10655 
    let v10657 : string = "v10656"
    let v10658 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v10657 
    v10658
and closure1 () (v0 : (string [])) : int32 =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v38 : Mut0, v39 : Mut1, v40 : Mut2, v41 : Mut3, v42 : Mut4, v43 : int64 option) = TraceState.trace_state.Value
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure5(v0)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v177 : clap_Command = method0()
    let v178 : string = "clap::Command::get_matches($0)"
    let v179 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let v180 : US0 = v42.l0
    let v181 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v180, v179)
    let v182 : string = "futures::executor::block_on($0)"
    let v183 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v181 v182 
    (* run_target_args'
    let v185 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v186 : string = "$0.unwrap()"
    let v187 : string = Fable.Core.RustInterop.emitRustExpr v183 v186 
    let _run_target_args'_v185 = v187 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v188 : string = "$0.unwrap()"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v183 v188 
    let _run_target_args'_v185 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v190 : string = "$0.unwrap()"
    let v191 : string = Fable.Core.RustInterop.emitRustExpr v183 v190 
    let _run_target_args'_v185 = v191 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v192 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v192 
    #endif
#if FABLE_COMPILER_PYTHON
    let v193 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v193 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v194 
    #endif
#else
    let v195 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v195 
    #endif
    let v196 : string = _run_target_args'_v185 
    let v199 : US0 = v42.l0
    let v200 : bool =
        match v199 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v200 then
        let v202 : unit = ()
        let v203 : (unit -> unit) = closure10(v196)
        let v204 : unit = (fun () -> v203 (); v202) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
