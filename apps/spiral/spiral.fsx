#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US12 =
    | US12_0
    | US12_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : string
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_path_PathBuf
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US16 =
    | US16_0
    | US16_1 of f1_0 : std_string_String
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : US5
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US18_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) * UH1
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : char
    | US20_1
and [<Struct>] US21 =
    | US21_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : US20 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : (string [])
    | US25_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US26 =
    | US26_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US26_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH3
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US27_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_string_String
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_process_Output
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : int32
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : System.Threading.CancellationToken
    | US35_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : string
    | US40_1 of f1_0 : string
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US41 =
    | US41_0
    | US41_1
    | US41_2
and [<Struct>] US42 =
    | US42_0 of f0_0 : US41
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US43_1
and [<Struct>] US44 =
    | US44_0 of f0_0 : int32 * f0_1 : string
    | US44_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_collections_HashMap<string, string>
    | US45_1
and [<Struct>] US46 =
    | US46_0 of f0_0 : US5
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US47 =
    | US47_0
    | US47_1 of f1_0 : string
and [<Struct>] US48 =
    | US48_0 of f0_0 : std_fs_FileType
    | US48_1 of f1_0 : std_string_String
and [<Struct>] US49 =
    | US49_0
    | US49_1
    | US49_2
and [<Struct>] US50 =
    | US50_0 of f0_0 : async_walkdir_DirEntry
    | US50_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : string * f0_1 : string
    | US51_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v84 : (string list -> (string [])) = List.toArray
    let v85 : (string []) = v84 v80
    let v88 : string = "$0.to_vec()"
    let v89 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v85 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    (* run_target_args'
    let v131 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v132 : string = "String::from($0)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v132 
    let _run_target_args'_v131 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string = "String::from($0)"
    let v135 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v134 
    let _run_target_args'_v131 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "String::from($0)"
    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v136 
    let _run_target_args'_v131 = v137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v143 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v147 
    #endif
#else
    let v151 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v151 
    #endif
    let v154 : std_string_String = _run_target_args'_v131 
    let v160 : string = "Box::new($0)"
    let v161 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v154 v160 
    let v162 : string = "Box::leak($0)"
    let v163 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v161 v162 
    let v164 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v165 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "true; $0 }).collect::<Vec<_>>()"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : string = "_vec_map"
    let v169 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v168 
    let v170 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v171 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let v172 : string = "$0.value_parser($1)"
    let v173 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v171) v172 
    let v174 : string = "clap::Command::arg($0, $1)"
    let v175 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v173) v174 
    let v176 : string = "NAME"
    let v177 : string = "r#\"" + v176 + "\"#"
    let v178 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v177 
    let v179 : string = "VERSION"
    let v180 : string = "r#\"" + v179 + "\"#"
    let v181 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v180 
    let v182 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v178; v181|]
    let v184 : unativeint = 1 |> unativeint 
    let v188 : unativeint = 0 |> unativeint 
    let v192 : unativeint = 0 |> unativeint 
    let v196 : bool = v188 = v192 
    let v204 : clap_builder_ValueRange =
        if v196 then
            let v199 : string = "clap::builder::ValueRange::new($0..)"
            let v200 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v184 v199 
            v200
        else
            let v201 : string = ""
            let v202 : string = "clap::builder::ValueRange::new($0.." + v201 + "$1)"
            let v203 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v184, v188) v202 
            v203
    let v205 : string = "deps"
    let v206 : string = "r#\"" + v205 + "\"#"
    let v207 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v206 
    let v208 : string = "clap::Arg::new($0)"
    let v209 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let v210 : string = "$0.short($1)"
    let v211 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v209, 'd') v210 
    let v212 : string = "r#\"" + v205 + "\"#"
    let v213 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v212 
    let v214 : string = "$0.long($1)"
    let v215 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v211, v213) v214 
    let v216 : string = "$0.to_vec()"
    let v217 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v182 v216 
    let v218 : string = "$0.value_names($1)"
    let v219 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v215, v217) v218 
    let v220 : string = "$0.num_args($1)"
    let v221 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v219, v204) v220 
    let v222 : string = "clap::ArgAction::Append"
    let v223 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v222 
    let v224 : string = "$0.action($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v221, v223) v224 
    let v226 : string = "clap::Command::arg($0, $1)"
    let v227 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v175, v225) v226 
    let v228 : string = "clap::Command::subcommand($0, v227)"
    let v229 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v228 
    let v230 : string = "cuda"
    let v231 : string = "r#\"" + v230 + "\"#"
    let v232 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v231 
    let v233 : string = "clap::Command::new($0)"
    let v234 : clap_Command = Fable.Core.RustInterop.emitRustExpr v232 v233 
    let v235 : string = "py-path"
    let v236 : string = "r#\"" + v235 + "\"#"
    let v237 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v236 
    let v238 : string = "clap::Arg::new($0)"
    let v239 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v237 v238 
    let v240 : string = "$0.short($1)"
    let v241 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v239, 'p') v240 
    let v242 : string = "r#\"" + v235 + "\"#"
    let v243 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v242 
    let v244 : string = "$0.long($1)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v241, v243) v244 
    let v246 : string = "$0.required($1)"
    let v247 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, true) v246 
    let v248 : string = "clap::Command::arg($0, $1)"
    let v249 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v234, v247) v248 
    let v250 : string = "env"
    let v251 : string = "r#\"" + v250 + "\"#"
    let v252 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "clap::Arg::new($0)"
    let v254 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "$0.short($1)"
    let v256 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v254, 'e') v255 
    let v257 : string = "r#\"" + v250 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "$0.long($1)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v256, v258) v259 
    
    
    let v263 : string = "Poetry"
    let v264 : (unit -> string) = v263.ToLower
    let v265 : string = v264 ()
    let v270 : string = "Pip"
    let v271 : (unit -> string) = v270.ToLower
    let v272 : string = v271 ()
    let v275 : string list = []
    let v277 : string list = v265 :: v275 
    let v281 : string list = v272 :: v277 
    let v285 : (string list -> (string [])) = List.toArray
    let v286 : (string []) = v285 v281
    let v289 : string = "$0.to_vec()"
    let v290 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v286 v289 
    let v291 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
    let v293 : string = "x"
    let v294 : string = Fable.Core.RustInterop.emitRustExpr () v293 
    (* run_target_args'
    let v299 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v300 : string = "&*$0"
    let v301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v300 
    let _run_target_args'_v299 = v301 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v302 : string = "&*$0"
    let v303 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v302 
    let _run_target_args'_v299 = v303 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v304 : string = "&*$0"
    let v305 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v304 
    let _run_target_args'_v299 = v305 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v307 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v307 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v311 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v315 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v315 
    #endif
#else
    let v319 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v319 
    #endif
    let v322 : Ref<Str> = _run_target_args'_v299 
    (* run_target_args'
    let v332 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v333 : string = "String::from($0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v333 
    let _run_target_args'_v332 = v334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v335 : string = "String::from($0)"
    let v336 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v335 
    let _run_target_args'_v332 = v336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : string = "String::from($0)"
    let v338 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v337 
    let _run_target_args'_v332 = v338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v340 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v340 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v348 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v348 
    #endif
#else
    let v352 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v352 
    #endif
    let v355 : std_string_String = _run_target_args'_v332 
    let v361 : string = "Box::new($0)"
    let v362 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v355 v361 
    let v363 : string = "Box::leak($0)"
    let v364 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v362 v363 
    let v365 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v366 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v364 v365 
    let v367 : string = "true; $0 }).collect::<Vec<_>>()"
    let v368 : bool = Fable.Core.RustInterop.emitRustExpr v366 v367 
    let v369 : string = "_vec_map"
    let v370 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v369 
    let v371 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v372 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v370 v371 
    let v373 : string = "$0.value_parser($1)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, v372) v373 
    let v375 : string = "clap::Command::arg($0, $1)"
    let v376 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v249, v374) v375 
    let v377 : string = "r#\"" + v176 + "\"#"
    let v378 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "r#\"" + v179 + "\"#"
    let v380 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v379 
    let v381 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v378; v380|]
    let v383 : unativeint = 1 |> unativeint 
    let v387 : unativeint = 0 |> unativeint 
    let v391 : unativeint = 0 |> unativeint 
    let v395 : bool = v387 = v391 
    let v403 : clap_builder_ValueRange =
        if v395 then
            let v398 : string = "clap::builder::ValueRange::new($0..)"
            let v399 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v383 v398 
            v399
        else
            let v400 : string = ""
            let v401 : string = "clap::builder::ValueRange::new($0.." + v400 + "$1)"
            let v402 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v383, v387) v401 
            v402
    let v404 : string = "r#\"" + v205 + "\"#"
    let v405 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v404 
    let v406 : string = "clap::Arg::new($0)"
    let v407 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v405 v406 
    let v408 : string = "$0.short($1)"
    let v409 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v407, 'd') v408 
    let v410 : string = "r#\"" + v205 + "\"#"
    let v411 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v410 
    let v412 : string = "$0.long($1)"
    let v413 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v409, v411) v412 
    let v414 : string = "$0.to_vec()"
    let v415 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v381 v414 
    let v416 : string = "$0.value_names($1)"
    let v417 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v413, v415) v416 
    let v418 : string = "$0.num_args($1)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v417, v403) v418 
    let v420 : string = "clap::ArgAction::Append"
    let v421 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "$0.action($1)"
    let v423 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, v421) v422 
    let v424 : string = "clap::Command::arg($0, $1)"
    let v425 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v376, v423) v424 
    let v426 : string = "clap::Command::subcommand($0, v425)"
    let v427 : clap_Command = Fable.Core.RustInterop.emitRustExpr v229 v426 
    let v428 : string = "fable"
    let v429 : string = "r#\"" + v428 + "\"#"
    let v430 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v429 
    let v431 : string = "clap::Command::new($0)"
    let v432 : clap_Command = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let v433 : string = "fs-path"
    let v434 : string = "r#\"" + v433 + "\"#"
    let v435 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v434 
    let v436 : string = "clap::Arg::new($0)"
    let v437 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v435 v436 
    let v438 : string = "$0.short($1)"
    let v439 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v437, 'f') v438 
    let v440 : string = "r#\"" + v433 + "\"#"
    let v441 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v440 
    let v442 : string = "$0.long($1)"
    let v443 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v439, v441) v442 
    let v444 : string = "$0.required($1)"
    let v445 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v443, true) v444 
    let v446 : string = "clap::Command::arg($0, $1)"
    let v447 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v432, v445) v446 
    let v448 : string = "r#\"" + v0 + "\"#"
    let v449 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v448 
    let v450 : string = "clap::Arg::new($0)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v449 v450 
    let v452 : string = "$0.short($1)"
    let v453 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, 'c') v452 
    let v454 : string = "r#\"" + v0 + "\"#"
    let v455 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v454 
    let v456 : string = "$0.long($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v453, v455) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v447, v457) v458 
    let v460 : string = "clap::Command::subcommand($0, v459)"
    let v461 : clap_Command = Fable.Core.RustInterop.emitRustExpr v427 v460 
    let v462 : string = "rust"
    let v463 : string = "r#\"" + v462 + "\"#"
    let v464 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v463 
    let v465 : string = "clap::Command::new($0)"
    let v466 : clap_Command = Fable.Core.RustInterop.emitRustExpr v464 v465 
    let v467 : string = "r#\"" + v433 + "\"#"
    let v468 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v467 
    let v469 : string = "clap::Arg::new($0)"
    let v470 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v468 v469 
    let v471 : string = "$0.short($1)"
    let v472 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v470, 'f') v471 
    let v473 : string = "r#\"" + v433 + "\"#"
    let v474 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v473 
    let v475 : string = "$0.long($1)"
    let v476 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v472, v474) v475 
    let v477 : string = "$0.required($1)"
    let v478 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v476, true) v477 
    let v479 : string = "clap::Command::arg($0, $1)"
    let v480 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v466, v478) v479 
    let v481 : string = "r#\"" + v176 + "\"#"
    let v482 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v481 
    let v483 : string = "r#\"" + v179 + "\"#"
    let v484 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v483 
    let v485 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v482; v484|]
    let v487 : unativeint = 1 |> unativeint 
    let v491 : unativeint = 0 |> unativeint 
    let v495 : unativeint = 0 |> unativeint 
    let v499 : bool = v491 = v495 
    let v507 : clap_builder_ValueRange =
        if v499 then
            let v502 : string = "clap::builder::ValueRange::new($0..)"
            let v503 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v487 v502 
            v503
        else
            let v504 : string = ""
            let v505 : string = "clap::builder::ValueRange::new($0.." + v504 + "$1)"
            let v506 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v487, v491) v505 
            v506
    let v508 : string = "r#\"" + v205 + "\"#"
    let v509 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v508 
    let v510 : string = "clap::Arg::new($0)"
    let v511 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let v512 : string = "$0.short($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v511, 'd') v512 
    let v514 : string = "r#\"" + v205 + "\"#"
    let v515 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v514 
    let v516 : string = "$0.long($1)"
    let v517 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v515) v516 
    let v518 : string = "$0.to_vec()"
    let v519 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v485 v518 
    let v520 : string = "$0.value_names($1)"
    let v521 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v517, v519) v520 
    let v522 : string = "$0.num_args($1)"
    let v523 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v521, v507) v522 
    let v524 : string = "clap::ArgAction::Append"
    let v525 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v524 
    let v526 : string = "$0.action($1)"
    let v527 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v523, v525) v526 
    let v528 : string = "clap::Command::arg($0, $1)"
    let v529 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v480, v527) v528 
    let v531 : unativeint = 0 |> unativeint 
    let v535 : unativeint = 1 |> unativeint 
    let v539 : unativeint = 0 |> unativeint 
    let v543 : bool = v535 = v539 
    let v551 : clap_builder_ValueRange =
        if v543 then
            let v546 : string = "clap::builder::ValueRange::new($0..)"
            let v547 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v531 v546 
            v547
        else
            let v548 : string = "="
            let v549 : string = "clap::builder::ValueRange::new($0.." + v548 + "$1)"
            let v550 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v531, v535) v549 
            v550
    let v552 : string = "wasm"
    let v553 : string = "r#\"" + v552 + "\"#"
    let v554 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v553 
    let v555 : string = "clap::Arg::new($0)"
    let v556 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v554 v555 
    let v557 : string = "$0.short($1)"
    let v558 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v556, 'w') v557 
    let v559 : string = "r#\"" + v552 + "\"#"
    let v560 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v559 
    let v561 : string = "$0.long($1)"
    let v562 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v558, v560) v561 
    let v563 : string = "$0.num_args($1)"
    let v564 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v562, v551) v563 
    let v565 : string = "$0.require_equals($1)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v564, true) v565 
    let v567 : string = ""
    let v568 : string = "r#\"" + v567 + "\"#"
    let v569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v568 
    let v570 : string = "$0.default_missing_value($1)"
    let v571 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v566, v569) v570 
    let v572 : string = "clap::Command::arg($0, $1)"
    let v573 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v529, v571) v572 
    let v575 : unativeint = 0 |> unativeint 
    let v579 : unativeint = 1 |> unativeint 
    let v583 : unativeint = 0 |> unativeint 
    let v587 : bool = v579 = v583 
    let v595 : clap_builder_ValueRange =
        if v587 then
            let v590 : string = "clap::builder::ValueRange::new($0..)"
            let v591 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v575 v590 
            v591
        else
            let v592 : string = "="
            let v593 : string = "clap::builder::ValueRange::new($0.." + v592 + "$1)"
            let v594 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v575, v579) v593 
            v594
    let v596 : string = "contract"
    let v597 : string = "r#\"" + v596 + "\"#"
    let v598 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v597 
    let v599 : string = "clap::Arg::new($0)"
    let v600 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v598 v599 
    let v601 : string = "$0.short($1)"
    let v602 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v600, 'c') v601 
    let v603 : string = "r#\"" + v596 + "\"#"
    let v604 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v603 
    let v605 : string = "$0.long($1)"
    let v606 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v602, v604) v605 
    let v607 : string = "$0.num_args($1)"
    let v608 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v606, v595) v607 
    let v609 : string = "$0.require_equals($1)"
    let v610 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v608, true) v609 
    let v611 : string = "r#\"" + v567 + "\"#"
    let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
    let v613 : string = "$0.default_missing_value($1)"
    let v614 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v610, v612) v613 
    let v615 : string = "clap::Command::arg($0, $1)"
    let v616 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v573, v614) v615 
    let v617 : string = "cleanup"
    let v618 : string = "r#\"" + v617 + "\"#"
    let v619 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v618 
    let v620 : string = "clap::Arg::new($0)"
    let v621 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v619 v620 
    let v622 : string = "$0.short($1)"
    let v623 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v621, 'l') v622 
    let v624 : string = "r#\"" + v617 + "\"#"
    let v625 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v624 
    let v626 : string = "$0.long($1)"
    let v627 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v623, v625) v626 
    let v628 : string = "true"
    let v629 : string = "r#\"" + v628 + "\"#"
    let v630 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = "$0.default_value($1)"
    let v632 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v627, v630) v631 
    let v633 : string = "clap::ArgAction::SetFalse"
    let v634 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v633 
    let v635 : string = "$0.action($1)"
    let v636 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v632, v634) v635 
    let v637 : string = "clap::Command::arg($0, $1)"
    let v638 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v616, v636) v637 
    let v639 : string = "clap::Command::subcommand($0, v638)"
    let v640 : clap_Command = Fable.Core.RustInterop.emitRustExpr v461 v639 
    let v641 : string = "typescript"
    let v642 : string = "r#\"" + v641 + "\"#"
    let v643 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v642 
    let v644 : string = "clap::Command::new($0)"
    let v645 : clap_Command = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let v646 : string = "r#\"" + v433 + "\"#"
    let v647 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v646 
    let v648 : string = "clap::Arg::new($0)"
    let v649 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let v650 : string = "$0.short($1)"
    let v651 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v649, 'f') v650 
    let v652 : string = "r#\"" + v433 + "\"#"
    let v653 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v652 
    let v654 : string = "$0.long($1)"
    let v655 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v651, v653) v654 
    let v656 : string = "$0.required($1)"
    let v657 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v655, true) v656 
    let v658 : string = "clap::Command::arg($0, $1)"
    let v659 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v645, v657) v658 
    let v660 : string = "r#\"" + v176 + "\"#"
    let v661 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v660 
    let v662 : string = "r#\"" + v179 + "\"#"
    let v663 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v662 
    let v664 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v661; v663|]
    let v666 : unativeint = 1 |> unativeint 
    let v670 : unativeint = 0 |> unativeint 
    let v674 : unativeint = 0 |> unativeint 
    let v678 : bool = v670 = v674 
    let v685 : clap_builder_ValueRange =
        if v678 then
            let v681 : string = "clap::builder::ValueRange::new($0..)"
            let v682 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v666 v681 
            v682
        else
            let v683 : string = "clap::builder::ValueRange::new($0.." + v567 + "$1)"
            let v684 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v666, v670) v683 
            v684
    let v686 : string = "r#\"" + v205 + "\"#"
    let v687 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v686 
    let v688 : string = "clap::Arg::new($0)"
    let v689 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v687 v688 
    let v690 : string = "$0.short($1)"
    let v691 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v689, 'd') v690 
    let v692 : string = "r#\"" + v205 + "\"#"
    let v693 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v692 
    let v694 : string = "$0.long($1)"
    let v695 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v691, v693) v694 
    let v696 : string = "$0.to_vec()"
    let v697 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v664 v696 
    let v698 : string = "$0.value_names($1)"
    let v699 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v695, v697) v698 
    let v700 : string = "$0.num_args($1)"
    let v701 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v699, v685) v700 
    let v702 : string = "clap::ArgAction::Append"
    let v703 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v702 
    let v704 : string = "$0.action($1)"
    let v705 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v701, v703) v704 
    let v706 : string = "clap::Command::arg($0, $1)"
    let v707 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v659, v705) v706 
    let v708 : string = "clap::Command::subcommand($0, v707)"
    let v709 : clap_Command = Fable.Core.RustInterop.emitRustExpr v640 v708 
    let v710 : string = "python"
    let v711 : string = "r#\"" + v710 + "\"#"
    let v712 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v711 
    let v713 : string = "clap::Command::new($0)"
    let v714 : clap_Command = Fable.Core.RustInterop.emitRustExpr v712 v713 
    let v715 : string = "r#\"" + v433 + "\"#"
    let v716 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v715 
    let v717 : string = "clap::Arg::new($0)"
    let v718 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v716 v717 
    let v719 : string = "$0.short($1)"
    let v720 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v718, 'f') v719 
    let v721 : string = "r#\"" + v433 + "\"#"
    let v722 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v721 
    let v723 : string = "$0.long($1)"
    let v724 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v720, v722) v723 
    let v725 : string = "$0.required($1)"
    let v726 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v724, true) v725 
    let v727 : string = "clap::Command::arg($0, $1)"
    let v728 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v714, v726) v727 
    let v729 : string = "r#\"" + v176 + "\"#"
    let v730 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v729 
    let v731 : string = "r#\"" + v179 + "\"#"
    let v732 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v731 
    let v733 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v730; v732|]
    let v735 : unativeint = 1 |> unativeint 
    let v739 : unativeint = 0 |> unativeint 
    let v743 : unativeint = 0 |> unativeint 
    let v747 : bool = v739 = v743 
    let v754 : clap_builder_ValueRange =
        if v747 then
            let v750 : string = "clap::builder::ValueRange::new($0..)"
            let v751 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v735 v750 
            v751
        else
            let v752 : string = "clap::builder::ValueRange::new($0.." + v567 + "$1)"
            let v753 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v735, v739) v752 
            v753
    let v755 : string = "r#\"" + v205 + "\"#"
    let v756 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v755 
    let v757 : string = "clap::Arg::new($0)"
    let v758 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v756 v757 
    let v759 : string = "$0.short($1)"
    let v760 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v758, 'd') v759 
    let v761 : string = "r#\"" + v205 + "\"#"
    let v762 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v761 
    let v763 : string = "$0.long($1)"
    let v764 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v760, v762) v763 
    let v765 : string = "$0.to_vec()"
    let v766 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v733 v765 
    let v767 : string = "$0.value_names($1)"
    let v768 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v764, v766) v767 
    let v769 : string = "$0.num_args($1)"
    let v770 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v768, v754) v769 
    let v771 : string = "clap::ArgAction::Append"
    let v772 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v771 
    let v773 : string = "$0.action($1)"
    let v774 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v770, v772) v773 
    let v775 : string = "clap::Command::arg($0, $1)"
    let v776 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v728, v774) v775 
    let v777 : string = "clap::Command::subcommand($0, v776)"
    let v778 : clap_Command = Fable.Core.RustInterop.emitRustExpr v709 v777 
    let v779 : string = "dib"
    let v780 : string = "r#\"" + v779 + "\"#"
    let v781 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v780 
    let v782 : string = "clap::Command::new($0)"
    let v783 : clap_Command = Fable.Core.RustInterop.emitRustExpr v781 v782 
    let v784 : string = "path"
    let v785 : string = "r#\"" + v784 + "\"#"
    let v786 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v785 
    let v787 : string = "clap::Arg::new($0)"
    let v788 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v786 v787 
    let v789 : string = "$0.short($1)"
    let v790 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v788, 'p') v789 
    let v791 : string = "r#\"" + v784 + "\"#"
    let v792 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v791 
    let v793 : string = "$0.long($1)"
    let v794 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v790, v792) v793 
    let v795 : string = "$0.required($1)"
    let v796 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v794, true) v795 
    let v797 : string = "clap::Command::arg($0, $1)"
    let v798 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v783, v796) v797 
    let v799 : string = "u8"
    let v800 : string = "clap::value_parser!(" + v799 + ").into()"
    let v801 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v800 
    let v802 : string = "retries"
    let v803 : string = "r#\"" + v802 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "clap::Arg::new($0)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v804 v805 
    let v807 : string = "$0.short($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, 'r') v807 
    let v809 : string = "r#\"" + v802 + "\"#"
    let v810 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v809 
    let v811 : string = "$0.long($1)"
    let v812 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v808, v810) v811 
    let v813 : string = "$0.value_parser($1)"
    let v814 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v812, v801) v813 
    let v815 : string = "clap::Command::arg($0, $1)"
    let v816 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v798, v814) v815 
    let v817 : string = "working-directory"
    let v818 : string = "r#\"" + v817 + "\"#"
    let v819 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v818 
    let v820 : string = "clap::Arg::new($0)"
    let v821 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v819 v820 
    let v822 : string = "$0.short($1)"
    let v823 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v821, 'w') v822 
    let v824 : string = "r#\"" + v817 + "\"#"
    let v825 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v824 
    let v826 : string = "$0.long($1)"
    let v827 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v823, v825) v826 
    let v828 : string = "clap::Command::arg($0, $1)"
    let v829 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v816, v827) v828 
    let v830 : string = "clap::Command::subcommand($0, v829)"
    let v831 : clap_Command = Fable.Core.RustInterop.emitRustExpr v778 v830 
    v831
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method4(v0)
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result_map_"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method5()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    let _run_target_args'_v2 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : US3 = US3_1
    let v20 : US4 = US4_3(v19)
    let v21 : string = $"env.get_environment_variable / target: {v20} / var: {v0}"
    let v22 : string = failwith<string> v21
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : US3 = US3_2
    let v24 : US4 = US4_3(v23)
    let v25 : string = $"env.get_environment_variable / target: {v24} / var: {v0}"
    let v26 : string = failwith<string> v25
    let _run_target_args'_v2 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : string = "process.env[$0] ?? \"\""
    let v28 : string = Fable.Core.JsInterop.emitJsExpr v0 v27 
    let _run_target_args'_v2 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string = "os"
    let v31 : IOsEnviron = Fable.Core.PyInterop.importAll v30 
    let v32 : string = "v31.environ"
    let v33 : obj = Fable.Core.PyInterop.emitPyExpr () v32 
    let v37 : string = "v33.get($0)"
    let v38 : string = Fable.Core.PyInterop.emitPyExpr v0 v37 
    let mutable _v38 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v42 : (string -> string option) = Option.ofObj
    let v43 : string option = v42 v38
    v43 
    #else
    Some v38 
    #endif
    |> fun x -> _v38 <- Some x
    let v44 : string option = match _v38 with Some x -> x | None -> failwith "optionm'.of_obj / _v38=None"
    let v49 : (string -> US5) = method6()
    let v50 : US5 option = v44 |> Option.map v49 
    let v70 : US5 = US5_1
    let v71 : US5 = v50 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US5_1 -> (* None *)
            let v76 : string = ""
            v76
        | US5_0(v75) -> (* Some *)
            v75
    let _run_target_args'_v2 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : US3 = US3_1
    let v80 : US4 = US4_1(v79)
    let v81 : string = $"env.get_environment_variable / target: {v80} / var: {v0}"
    let v82 : string = failwith<string> v81
    let _run_target_args'_v2 = v82 
    #endif
#else
    let v83 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v84 : string = v83 v0
    let mutable _v84 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v86 : (string -> string option) = Option.ofObj
    let v87 : string option = v86 v84
    v87 
    #else
    Some v84 
    #endif
    |> fun x -> _v84 <- Some x
    let v88 : string option = match _v84 with Some x -> x | None -> failwith "optionm'.of_obj / _v84=None"
    let v93 : (string -> US5) = method6()
    let v94 : US5 option = v88 |> Option.map v93 
    let v114 : US5 = US5_1
    let v115 : US5 = v94 |> Option.defaultValue v114 
    let v122 : string =
        match v115 with
        | US5_1 -> (* None *)
            let v120 : string = ""
            v120
        | US5_0(v119) -> (* Some *)
            v119
    let _run_target_args'_v2 = v122 
    #endif
    let v123 : string = _run_target_args'_v2 
    v123
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v209 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v143 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v144 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v145 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v147 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v143 = v147 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v150 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v151 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v152 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v152 
            #endif
#else
            let v153 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v153 
            #endif
            let v154 : System.DateTime = _run_target_args'_v143 
            (* run_target_args'
            let v165 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v166 : (System.DateTime -> int64) = _.Ticks
            let v167 : int64 = v166 v154
            let _run_target_args'_v165 = v167 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v168 : (System.DateTime -> int64) = _.Ticks
            let v169 : int64 = v168 v154
            let _run_target_args'_v165 = v169 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : int64 = null |> unbox<int64>
            let _run_target_args'_v165 = v171 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : (System.DateTime -> int64) = _.Ticks
            let v175 : int64 = v174 v154
            let _run_target_args'_v165 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : (System.DateTime -> int64) = _.Ticks
            let v177 : int64 = v176 v154
            let _run_target_args'_v165 = v177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : (System.DateTime -> int64) = _.Ticks
            let v179 : int64 = v178 v154
            let _run_target_args'_v165 = v179 
            #endif
#else
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v154
            let _run_target_args'_v165 = v181 
            #endif
            let v182 : int64 = _run_target_args'_v165 
            let v203 : int64 = v182 |> int64 
            US2_0(v203)
    struct (v127, v209)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v13 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v51 
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "String::from($0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "String::from($0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "String::from($0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v65 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v65 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v73 
    #endif
#else
    let v77 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v77 
    #endif
    let v80 : std_string_String = _run_target_args'_v57 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _run_target_args'_v13 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v89 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v88 
    (* run_target_args'
    let v94 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v95 
    let _run_target_args'_v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v97 
    let _run_target_args'_v94 = v98 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v99 
    let _run_target_args'_v94 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v110 
    #endif
#else
    let v114 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v114 
    #endif
    let v117 : std_string_String = _run_target_args'_v94 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v117 v123 
    let _run_target_args'_v13 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v126 : string = null |> unbox<string>
    let _run_target_args'_v13 = v126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : string = null |> unbox<string>
    let _run_target_args'_v13 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v134 : string = null |> unbox<string>
    let _run_target_args'_v13 = v134 
    #endif
#else
    let v138 : string = null |> unbox<string>
    let _run_target_args'_v13 = v138 
    #endif
    let v141 : string = _run_target_args'_v13 
    let v149 : string = "True"
    let v150 : bool = v141 <> v149 
    let v162 : US2 =
        if v150 then
            US2_1
        else
            let v154 : string = $"near_sdk::env::block_timestamp()"
            let v155 : uint64 = Fable.Core.RustInterop.emitRustExpr () v154 
            let v157 : (uint64 -> int64) = int64
            let v158 : int64 = v157 v155
            US2_0(v158)
    let v163 : US1 = US1_1
    let _run_target_args'_v3 = struct (v163, v162) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v164 : US1, v165 : US2) = method2()
    let _run_target_args'_v3 = struct (v164, v165) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v166 : US1, v167 : US2) = method2()
    let _run_target_args'_v3 = struct (v166, v167) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v168 : US1, v169 : US2) = method2()
    let _run_target_args'_v3 = struct (v168, v169) 
    #endif
#else
    let struct (v170 : US1, v171 : US2) = method2()
    let _run_target_args'_v3 = struct (v170, v171) 
    #endif
    let struct (v172 : US1, v173 : US2) = _run_target_args'_v3 
    let v178 : Mut0 = {l0 = 1L} : Mut0
    let v179 : (string -> unit) = closure4()
    let v180 : Mut1 = {l0 = v179} : Mut1
    let v181 : Mut2 = {l0 = true} : Mut2
    let v182 : string = ""
    let v183 : Mut3 = {l0 = v182} : Mut3
    let v186 : US0 =
        match v172 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v184) -> (* Some *)
            v184
    let v187 : Mut4 = {l0 = v186} : Mut4
    let v198 : int64 option =
        match v173 with
        | US2_1 -> (* None *)
            let v194 : int64 option = None
            v194
        | US2_0(v188) -> (* Some *)
            let v190 : int64 option = Some v188 
            v190
    struct (v178, v180, v181, v183, v187, v198)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and method7 (v0 : US0) : bool =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v38 : Mut0, v39 : Mut1, v40 : Mut2, v41 : Mut3, v42 : Mut4, v43 : int64 option) = TraceState.trace_state.Value
    let v56 : US0 = v42.l0
    let v57 : bool = v40.l0
    let v58 : bool = v57 = false
    if v58 then
        false
    else
        let v59 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v60 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v56
        let v61 : bool = v59 >= v60
        v61
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v187 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v190 : (int64 -> US2) = method9()
    let v191 : US2 option = v5 |> Option.map v190 
    let v211 : US2 = US2_1
    let v212 : US2 = v191 |> Option.defaultValue v211 
    let v344 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v327 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v328 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v327 = v328 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v329 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v327 = v329 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v331 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v327 = v331 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v334 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v327 = v334 
            #endif
#if FABLE_COMPILER_PYTHON
            let v335 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v327 = v335 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v336 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v327 = v336 
            #endif
#else
            let v337 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v327 = v337 
            #endif
            let v338 : System.DateTime = _run_target_args'_v327 
            v338
        | US2_0(v216) -> (* Some *)
            (* run_target_args'
            let v223 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v224 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v223 = v224 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v225 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v223 = v225 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v227 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v223 = v227 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v230 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v223 = v230 
            #endif
#if FABLE_COMPILER_PYTHON
            let v231 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v223 = v231 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v223 = v232 
            #endif
#else
            let v233 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v223 = v233 
            #endif
            let v234 : System.DateTime = _run_target_args'_v223 
            (* run_target_args'
            let v245 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v246 : (System.DateTime -> int64) = _.Ticks
            let v247 : int64 = v246 v234
            let _run_target_args'_v245 = v247 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v248 : (System.DateTime -> int64) = _.Ticks
            let v249 : int64 = v248 v234
            let _run_target_args'_v245 = v249 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v251 : int64 = null |> unbox<int64>
            let _run_target_args'_v245 = v251 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v254 : (System.DateTime -> int64) = _.Ticks
            let v255 : int64 = v254 v234
            let _run_target_args'_v245 = v255 
            #endif
#if FABLE_COMPILER_PYTHON
            let v256 : (System.DateTime -> int64) = _.Ticks
            let v257 : int64 = v256 v234
            let _run_target_args'_v245 = v257 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v258 : (System.DateTime -> int64) = _.Ticks
            let v259 : int64 = v258 v234
            let _run_target_args'_v245 = v259 
            #endif
#else
            let v260 : (System.DateTime -> int64) = _.Ticks
            let v261 : int64 = v260 v234
            let _run_target_args'_v245 = v261 
            #endif
            let v262 : int64 = _run_target_args'_v245 
            let v283 : int64 = v262 |> int64 
            let v286 : int64 = v283 - v216
            let v292 : System.TimeSpan = v286 |> System.TimeSpan 
            let v298 : (System.TimeSpan -> int32) = _.Hours
            let v299 : int32 = v298 v292
            let v303 : (System.TimeSpan -> int32) = _.Minutes
            let v304 : int32 = v303 v292
            let v308 : (System.TimeSpan -> int32) = _.Seconds
            let v309 : int32 = v308 v292
            let v313 : (System.TimeSpan -> int32) = _.Milliseconds
            let v314 : int32 = v313 v292
            let v318 : System.DateTime = System.DateTime (1, 1, 1, v299, v304, v309, v314)
            v318
    let v346 : string = method10()
    let v350 : bool = v346 = ""
    let v352 : string =
        if v350 then
            let v351 : string = "M-d-y hh:mm:ss tt"
            v351
        else
            v346
    let v353 : (string -> string) = v344.ToString
    let v354 : string = v353 v352
    let _run_target_args'_v187 = v354 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v371 : (int64 -> US2) = method9()
    let v372 : US2 option = v5 |> Option.map v371 
    let v392 : US2 = US2_1
    let v393 : US2 = v372 |> Option.defaultValue v392 
    let v525 : System.DateTime =
        match v393 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v508 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v509 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v508 = v509 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v510 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v508 = v510 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v512 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v508 = v512 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v515 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v508 = v515 
            #endif
#if FABLE_COMPILER_PYTHON
            let v516 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v508 = v516 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v517 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v508 = v517 
            #endif
#else
            let v518 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v508 = v518 
            #endif
            let v519 : System.DateTime = _run_target_args'_v508 
            v519
        | US2_0(v397) -> (* Some *)
            (* run_target_args'
            let v404 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v405 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v404 = v405 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v406 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v404 = v406 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v408 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v404 = v408 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v411 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v404 = v411 
            #endif
#if FABLE_COMPILER_PYTHON
            let v412 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v404 = v412 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v413 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v404 = v413 
            #endif
#else
            let v414 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v404 = v414 
            #endif
            let v415 : System.DateTime = _run_target_args'_v404 
            (* run_target_args'
            let v426 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v427 : (System.DateTime -> int64) = _.Ticks
            let v428 : int64 = v427 v415
            let _run_target_args'_v426 = v428 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v429 : (System.DateTime -> int64) = _.Ticks
            let v430 : int64 = v429 v415
            let _run_target_args'_v426 = v430 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v432 : int64 = null |> unbox<int64>
            let _run_target_args'_v426 = v432 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v435 : (System.DateTime -> int64) = _.Ticks
            let v436 : int64 = v435 v415
            let _run_target_args'_v426 = v436 
            #endif
#if FABLE_COMPILER_PYTHON
            let v437 : (System.DateTime -> int64) = _.Ticks
            let v438 : int64 = v437 v415
            let _run_target_args'_v426 = v438 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v439 : (System.DateTime -> int64) = _.Ticks
            let v440 : int64 = v439 v415
            let _run_target_args'_v426 = v440 
            #endif
#else
            let v441 : (System.DateTime -> int64) = _.Ticks
            let v442 : int64 = v441 v415
            let _run_target_args'_v426 = v442 
            #endif
            let v443 : int64 = _run_target_args'_v426 
            let v464 : int64 = v443 |> int64 
            let v467 : int64 = v464 - v397
            let v473 : System.TimeSpan = v467 |> System.TimeSpan 
            let v479 : (System.TimeSpan -> int32) = _.Hours
            let v480 : int32 = v479 v473
            let v484 : (System.TimeSpan -> int32) = _.Minutes
            let v485 : int32 = v484 v473
            let v489 : (System.TimeSpan -> int32) = _.Seconds
            let v490 : int32 = v489 v473
            let v494 : (System.TimeSpan -> int32) = _.Milliseconds
            let v495 : int32 = v494 v473
            let v499 : System.DateTime = System.DateTime (1, 1, 1, v480, v485, v490, v495)
            v499
    let v527 : string = method10()
    let v531 : bool = v527 = ""
    let v533 : string =
        if v531 then
            let v532 : string = "M-d-y hh:mm:ss tt"
            v532
        else
            v527
    let v534 : (string -> string) = v525.ToString
    let v535 : string = v534 v533
    let _run_target_args'_v187 = v535 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v550 : string = $"near_sdk::env::block_timestamp()"
    let v551 : uint64 = Fable.Core.RustInterop.emitRustExpr () v550 
    let v554 : (int64 -> US2) = method9()
    let v555 : US2 option = v5 |> Option.map v554 
    let v575 : US2 = US2_1
    let v576 : US2 = v555 |> Option.defaultValue v575 
    let v588 : uint64 =
        match v576 with
        | US2_1 -> (* None *)
            v551
        | US2_0(v580) -> (* Some *)
            let v582 : (int64 -> uint64) = uint64
            let v583 : uint64 = v582 v580
            let v586 : uint64 = v551 - v583
            v586
    let v589 : uint64 = v588 / 1000000000UL
    let v590 : uint64 = v589 % 60UL
    let v591 : uint64 = v589 / 60UL
    let v592 : uint64 = v591 % 60UL
    let v593 : uint64 = v589 / 3600UL
    let v594 : uint64 = v593 % 24UL
    let v595 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v594, v592, v590) v595 
    let v597 : string = "fable_library_rust::String_::fromString($0)"
    let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
    let _run_target_args'_v187 = v598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v601 : (int64 -> US2) = method9()
    let v602 : US2 option = v5 |> Option.map v601 
    let v622 : US2 = US2_1
    let v623 : US2 = v602 |> Option.defaultValue v622 
    let v755 : System.DateTime =
        match v623 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v738 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v739 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v738 = v739 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v740 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v738 = v740 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v742 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v738 = v742 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v745 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v738 = v745 
            #endif
#if FABLE_COMPILER_PYTHON
            let v746 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v738 = v746 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v747 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v738 = v747 
            #endif
#else
            let v748 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v738 = v748 
            #endif
            let v749 : System.DateTime = _run_target_args'_v738 
            v749
        | US2_0(v627) -> (* Some *)
            (* run_target_args'
            let v634 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v635 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v634 = v635 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v636 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v634 = v636 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v638 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v634 = v638 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v641 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v634 = v641 
            #endif
#if FABLE_COMPILER_PYTHON
            let v642 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v634 = v642 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v643 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v634 = v643 
            #endif
#else
            let v644 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v634 = v644 
            #endif
            let v645 : System.DateTime = _run_target_args'_v634 
            (* run_target_args'
            let v656 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v657 : (System.DateTime -> int64) = _.Ticks
            let v658 : int64 = v657 v645
            let _run_target_args'_v656 = v658 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v659 : (System.DateTime -> int64) = _.Ticks
            let v660 : int64 = v659 v645
            let _run_target_args'_v656 = v660 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v662 : int64 = null |> unbox<int64>
            let _run_target_args'_v656 = v662 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v665 : (System.DateTime -> int64) = _.Ticks
            let v666 : int64 = v665 v645
            let _run_target_args'_v656 = v666 
            #endif
#if FABLE_COMPILER_PYTHON
            let v667 : (System.DateTime -> int64) = _.Ticks
            let v668 : int64 = v667 v645
            let _run_target_args'_v656 = v668 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v669 : (System.DateTime -> int64) = _.Ticks
            let v670 : int64 = v669 v645
            let _run_target_args'_v656 = v670 
            #endif
#else
            let v671 : (System.DateTime -> int64) = _.Ticks
            let v672 : int64 = v671 v645
            let _run_target_args'_v656 = v672 
            #endif
            let v673 : int64 = _run_target_args'_v656 
            let v694 : int64 = v673 |> int64 
            let v697 : int64 = v694 - v627
            let v703 : System.TimeSpan = v697 |> System.TimeSpan 
            let v709 : (System.TimeSpan -> int32) = _.Hours
            let v710 : int32 = v709 v703
            let v714 : (System.TimeSpan -> int32) = _.Minutes
            let v715 : int32 = v714 v703
            let v719 : (System.TimeSpan -> int32) = _.Seconds
            let v720 : int32 = v719 v703
            let v724 : (System.TimeSpan -> int32) = _.Milliseconds
            let v725 : int32 = v724 v703
            let v729 : System.DateTime = System.DateTime (1, 1, 1, v710, v715, v720, v725)
            v729
    let v757 : string = method11()
    let v761 : bool = v757 = ""
    let v763 : string =
        if v761 then
            let v762 : string = "M-d-y hh:mm:ss tt"
            v762
        else
            v757
    let v764 : (string -> string) = v755.ToString
    let v765 : string = v764 v763
    let _run_target_args'_v187 = v765 
    #endif
#if FABLE_COMPILER_PYTHON
    let v782 : (int64 -> US2) = method9()
    let v783 : US2 option = v5 |> Option.map v782 
    let v803 : US2 = US2_1
    let v804 : US2 = v783 |> Option.defaultValue v803 
    let v936 : System.DateTime =
        match v804 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v919 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v920 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v919 = v920 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v921 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v919 = v921 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v923 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v919 = v923 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v926 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v919 = v926 
            #endif
#if FABLE_COMPILER_PYTHON
            let v927 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v919 = v927 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v928 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v919 = v928 
            #endif
#else
            let v929 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v919 = v929 
            #endif
            let v930 : System.DateTime = _run_target_args'_v919 
            v930
        | US2_0(v808) -> (* Some *)
            (* run_target_args'
            let v815 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v816 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v815 = v816 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v817 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v815 = v817 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v819 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v815 = v819 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v822 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v815 = v822 
            #endif
#if FABLE_COMPILER_PYTHON
            let v823 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v815 = v823 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v824 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v815 = v824 
            #endif
#else
            let v825 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v815 = v825 
            #endif
            let v826 : System.DateTime = _run_target_args'_v815 
            (* run_target_args'
            let v837 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v838 : (System.DateTime -> int64) = _.Ticks
            let v839 : int64 = v838 v826
            let _run_target_args'_v837 = v839 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v840 : (System.DateTime -> int64) = _.Ticks
            let v841 : int64 = v840 v826
            let _run_target_args'_v837 = v841 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v843 : int64 = null |> unbox<int64>
            let _run_target_args'_v837 = v843 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v846 : (System.DateTime -> int64) = _.Ticks
            let v847 : int64 = v846 v826
            let _run_target_args'_v837 = v847 
            #endif
#if FABLE_COMPILER_PYTHON
            let v848 : (System.DateTime -> int64) = _.Ticks
            let v849 : int64 = v848 v826
            let _run_target_args'_v837 = v849 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v850 : (System.DateTime -> int64) = _.Ticks
            let v851 : int64 = v850 v826
            let _run_target_args'_v837 = v851 
            #endif
#else
            let v852 : (System.DateTime -> int64) = _.Ticks
            let v853 : int64 = v852 v826
            let _run_target_args'_v837 = v853 
            #endif
            let v854 : int64 = _run_target_args'_v837 
            let v875 : int64 = v854 |> int64 
            let v878 : int64 = v875 - v808
            let v884 : System.TimeSpan = v878 |> System.TimeSpan 
            let v890 : (System.TimeSpan -> int32) = _.Hours
            let v891 : int32 = v890 v884
            let v895 : (System.TimeSpan -> int32) = _.Minutes
            let v896 : int32 = v895 v884
            let v900 : (System.TimeSpan -> int32) = _.Seconds
            let v901 : int32 = v900 v884
            let v905 : (System.TimeSpan -> int32) = _.Milliseconds
            let v906 : int32 = v905 v884
            let v910 : System.DateTime = System.DateTime (1, 1, 1, v891, v896, v901, v906)
            v910
    let v938 : string = method11()
    let v942 : bool = v938 = ""
    let v944 : string =
        if v942 then
            let v943 : string = "M-d-y hh:mm:ss tt"
            v943
        else
            v938
    let v945 : (string -> string) = v936.ToString
    let v946 : string = v945 v944
    let _run_target_args'_v187 = v946 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v963 : (int64 -> US2) = method9()
    let v964 : US2 option = v5 |> Option.map v963 
    let v984 : US2 = US2_1
    let v985 : US2 = v964 |> Option.defaultValue v984 
    let v1117 : System.DateTime =
        match v985 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1100 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1101 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1100 = v1101 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1102 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1100 = v1102 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1104 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1100 = v1104 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1107 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1100 = v1107 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1108 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1100 = v1108 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1109 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1100 = v1109 
            #endif
#else
            let v1110 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1100 = v1110 
            #endif
            let v1111 : System.DateTime = _run_target_args'_v1100 
            v1111
        | US2_0(v989) -> (* Some *)
            (* run_target_args'
            let v996 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v997 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v996 = v997 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v998 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v996 = v998 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1000 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v996 = v1000 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1003 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v996 = v1003 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1004 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v996 = v1004 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1005 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v996 = v1005 
            #endif
#else
            let v1006 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v996 = v1006 
            #endif
            let v1007 : System.DateTime = _run_target_args'_v996 
            (* run_target_args'
            let v1018 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1019 : (System.DateTime -> int64) = _.Ticks
            let v1020 : int64 = v1019 v1007
            let _run_target_args'_v1018 = v1020 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1021 : (System.DateTime -> int64) = _.Ticks
            let v1022 : int64 = v1021 v1007
            let _run_target_args'_v1018 = v1022 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1024 : int64 = null |> unbox<int64>
            let _run_target_args'_v1018 = v1024 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1027 : (System.DateTime -> int64) = _.Ticks
            let v1028 : int64 = v1027 v1007
            let _run_target_args'_v1018 = v1028 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1029 : (System.DateTime -> int64) = _.Ticks
            let v1030 : int64 = v1029 v1007
            let _run_target_args'_v1018 = v1030 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1031 : (System.DateTime -> int64) = _.Ticks
            let v1032 : int64 = v1031 v1007
            let _run_target_args'_v1018 = v1032 
            #endif
#else
            let v1033 : (System.DateTime -> int64) = _.Ticks
            let v1034 : int64 = v1033 v1007
            let _run_target_args'_v1018 = v1034 
            #endif
            let v1035 : int64 = _run_target_args'_v1018 
            let v1056 : int64 = v1035 |> int64 
            let v1059 : int64 = v1056 - v989
            let v1065 : System.TimeSpan = v1059 |> System.TimeSpan 
            let v1071 : (System.TimeSpan -> int32) = _.Hours
            let v1072 : int32 = v1071 v1065
            let v1076 : (System.TimeSpan -> int32) = _.Minutes
            let v1077 : int32 = v1076 v1065
            let v1081 : (System.TimeSpan -> int32) = _.Seconds
            let v1082 : int32 = v1081 v1065
            let v1086 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1087 : int32 = v1086 v1065
            let v1091 : System.DateTime = System.DateTime (1, 1, 1, v1072, v1077, v1082, v1087)
            v1091
    let v1119 : string = method11()
    let v1123 : bool = v1119 = ""
    let v1125 : string =
        if v1123 then
            let v1124 : string = "M-d-y hh:mm:ss tt"
            v1124
        else
            v1119
    let v1126 : (string -> string) = v1117.ToString
    let v1127 : string = v1126 v1125
    let _run_target_args'_v187 = v1127 
    #endif
#else
    let v1144 : (int64 -> US2) = method9()
    let v1145 : US2 option = v5 |> Option.map v1144 
    let v1165 : US2 = US2_1
    let v1166 : US2 = v1145 |> Option.defaultValue v1165 
    let v1298 : System.DateTime =
        match v1166 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1281 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1282 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1281 = v1282 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1283 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1281 = v1283 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1285 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1281 = v1285 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1288 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1281 = v1288 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1289 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1281 = v1289 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1290 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1281 = v1290 
            #endif
#else
            let v1291 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1281 = v1291 
            #endif
            let v1292 : System.DateTime = _run_target_args'_v1281 
            v1292
        | US2_0(v1170) -> (* Some *)
            (* run_target_args'
            let v1177 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1178 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1177 = v1178 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1179 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1177 = v1179 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1181 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1177 = v1181 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1184 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1177 = v1184 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1185 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1177 = v1185 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1186 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1177 = v1186 
            #endif
#else
            let v1187 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1177 = v1187 
            #endif
            let v1188 : System.DateTime = _run_target_args'_v1177 
            (* run_target_args'
            let v1199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1200 : (System.DateTime -> int64) = _.Ticks
            let v1201 : int64 = v1200 v1188
            let _run_target_args'_v1199 = v1201 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1202 : (System.DateTime -> int64) = _.Ticks
            let v1203 : int64 = v1202 v1188
            let _run_target_args'_v1199 = v1203 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1205 : int64 = null |> unbox<int64>
            let _run_target_args'_v1199 = v1205 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1208 : (System.DateTime -> int64) = _.Ticks
            let v1209 : int64 = v1208 v1188
            let _run_target_args'_v1199 = v1209 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1210 : (System.DateTime -> int64) = _.Ticks
            let v1211 : int64 = v1210 v1188
            let _run_target_args'_v1199 = v1211 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1212 : (System.DateTime -> int64) = _.Ticks
            let v1213 : int64 = v1212 v1188
            let _run_target_args'_v1199 = v1213 
            #endif
#else
            let v1214 : (System.DateTime -> int64) = _.Ticks
            let v1215 : int64 = v1214 v1188
            let _run_target_args'_v1199 = v1215 
            #endif
            let v1216 : int64 = _run_target_args'_v1199 
            let v1237 : int64 = v1216 |> int64 
            let v1240 : int64 = v1237 - v1170
            let v1246 : System.TimeSpan = v1240 |> System.TimeSpan 
            let v1252 : (System.TimeSpan -> int32) = _.Hours
            let v1253 : int32 = v1252 v1246
            let v1257 : (System.TimeSpan -> int32) = _.Minutes
            let v1258 : int32 = v1257 v1246
            let v1262 : (System.TimeSpan -> int32) = _.Seconds
            let v1263 : int32 = v1262 v1246
            let v1267 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1268 : int32 = v1267 v1246
            let v1272 : System.DateTime = System.DateTime (1, 1, 1, v1253, v1258, v1263, v1268)
            v1272
    let v1300 : string = method11()
    let v1304 : bool = v1300 = ""
    let v1306 : string =
        if v1304 then
            let v1305 : string = "M-d-y hh:mm:ss tt"
            v1305
        else
            v1300
    let v1307 : (string -> string) = v1298.ToString
    let v1308 : string = v1307 v1306
    let _run_target_args'_v187 = v1308 
    #endif
    let v1323 : string = _run_target_args'_v187 
    v1323
and method13 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v4 : string = v2 + v1 
    v0.l0 <- v4
    ()
and method14 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v2 : string = "Debug"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_bright_blue"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v83 : string = "inline_colorization::color_reset"
    let v84 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v84) v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v47 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "inline_colorization::color_bright_blue"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    (* run_target_args'
    let v95 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "&*$0"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v96 
    let _run_target_args'_v95 = v97 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v98 : string = "&*$0"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v98 
    let _run_target_args'_v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v100 
    let _run_target_args'_v95 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v107 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v111 
    #endif
#else
    let v115 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v95 
    let v124 : string = "inline_colorization::color_reset"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v124 
    let v126 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v90, v118, v125) v126 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let _run_target_args'_v47 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "inline_colorization::color_bright_blue"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    (* run_target_args'
    let v136 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v137 : string = "&*$0"
    let v138 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v137 
    let _run_target_args'_v136 = v138 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : string = "&*$0"
    let v140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v139 
    let _run_target_args'_v136 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = "&*$0"
    let v142 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v141 
    let _run_target_args'_v136 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v152 
    #endif
#else
    let v156 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v156 
    #endif
    let v159 : Ref<Str> = _run_target_args'_v136 
    let v165 : string = "inline_colorization::color_reset"
    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v131, v159, v166) v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _run_target_args'_v47 = v170 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v172 : string = "\u001b[94m"
    let v176 : string = method14()
    let v180 : string = v172 + v30 
    let v184 : string = v180 + v176 
    let _run_target_args'_v47 = v184 
    #endif
#if FABLE_COMPILER_PYTHON
    let v188 : string = "\u001b[94m"
    let v192 : string = method14()
    let v196 : string = v188 + v30 
    let v200 : string = v196 + v192 
    let _run_target_args'_v47 = v200 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : string = "\u001b[94m"
    let v208 : string = method14()
    let v212 : string = v204 + v30 
    let v216 : string = v212 + v208 
    let _run_target_args'_v47 = v216 
    #endif
#else
    let v220 : string = "\u001b[94m"
    let v224 : string = method14()
    let v228 : string = v220 + v30 
    let v232 : string = v228 + v224 
    let _run_target_args'_v47 = v232 
    #endif
    let v235 : string = _run_target_args'_v47 
    v235
and method16 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v40 : char list = []
    let v42 : char list = '/' :: v40 
    let v46 : char list = ' ' :: v42 
    let v51 : (char list -> (char [])) = List.toArray
    let v52 : (char []) = v51 v46
    let v55 : string = v8.TrimEnd v52 
    v55
and method15 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "args"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"%A{v8}"
    let v73 : string = $"{v69}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v10, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = " }"
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v108 : string = v10.l0
    let v109 : int64 = v0.l0
    let v112 : string = " "
    let v113 : string = v6 + v112 
    let v117 : string = v113 + v7 
    let v122 : string = " #"
    let v123 : string = v117 + v122 
    let v127 : (int64 -> string) = _.ToString()
    let v128 : string = v127 v109
    let v132 : string = v123 + v128 
    let v136 : string = v132 + v112 
    let v141 : string = "spiral.main"
    let v142 : string = v136 + v141 
    let v147 : string = " / "
    let v148 : string = v142 + v147 
    let v152 : string = v148 + v108 
    method16(v152)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure10(v0)
    let v4 : unit = (fun () -> v3 (); v2) ()
    ()
and method17 (v0 : string) : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v38 : Mut0, v39 : Mut1, v40 : Mut2, v41 : Mut3, v42 : Mut4, v43 : int64 option) = TraceState.trace_state.Value
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure8(v38)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v63 : (string -> unit) = closure9()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v65 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v66 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = v41.l0
    let v68 : bool = v67 = ""
    let v83 : string =
        if v68 then
            v0
        else
            let v69 : bool = v0 = ""
            if v69 then
                let v70 : string = v41.l0
                v70
            else
                let v71 : string = v41.l0
                let v74 : string = "\n"
                let v75 : string = v71 + v74 
                let v79 : string = v75 + v0 
                v79
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "&*$0"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "&*$0"
    let v92 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "&*$0"
    let v94 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : Ref<Str> = _run_target_args'_v88 
    let v117 : string = $"$0.chars()"
    let v118 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let v119 : string = "$0"
    let v120 : _ = Fable.Core.RustInterop.emitRustExpr v118 v119 
    let v121 : string = "$0.collect::<Vec<_>>()"
    let v122 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v120 v121 
    let v123 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v124 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let v125 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v126 : bool = Fable.Core.RustInterop.emitRustExpr v124 v125 
    let v127 : string = "x"
    let v128 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v127 
    let v129 : string = "String::from_iter($0)"
    let v130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : string = "true; $0 }).collect::<Vec<_>>()"
    let v132 : bool = Fable.Core.RustInterop.emitRustExpr v130 v131 
    let v133 : string = "_vec_map"
    let v134 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v133 
    let v135 : string = "$0.len()"
    let v136 : unativeint = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let v142 : int32 = v136 |> int32 
    let v152 : string = ""
    let v153 : bool = v0 <> v152 
    let v157 : bool =
        if v153 then
            let v156 : bool = v142 <= 1
            v156
        else
            false
    if v157 then
        v41.l0 <- v83
        ()
    else
        v41.l0 <- v152
        let v158 : string = "true; $0.into_iter().for_each(|x| { //"
        let v159 : bool = Fable.Core.RustInterop.emitRustExpr v134 v158 
        let v160 : string = "x"
        let v161 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v160 
        let v162 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v163 : bool = Fable.Core.RustInterop.emitRustExpr v161 v162 
        let v164 : string = $"true"
        let v165 : bool = Fable.Core.RustInterop.emitRustExpr () v164 
        let v166 : string = "true; }); //"
        let v167 : bool = Fable.Core.RustInterop.emitRustExpr () v166 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v63 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v63 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v63 v0
    #endif
#else
    v63 v0
    #endif
    // run_target_args' is_unit
    let v168 : (string -> unit) = v39.l0
    v168 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method15(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method19 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method20 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method21 () : (std_string_String -> US7) =
    closure13()
and method22 () : string =
    let v0 : string = "target"
    v0
and method23 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method24 () : (Vec<std_string_String> -> US11) =
    closure14()
and method25 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method27 () : string =
    let v0 : string = ""
    v0
and method28 (v0 : string) : string =
    v0
and method29 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method30 () : string =
    let v0 : string = ""
    v0
and method26 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method27()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method28(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method29(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method30()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method28(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method31 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v59 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "format!(\"{}\", $0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v60 
    let _run_target_args'_v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "format!(\"{}\", $0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v62 
    let _run_target_args'_v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "format!(\"{}\", $0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v64 
    let _run_target_args'_v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v75 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v75 
    #endif
#else
    let v79 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v79 
    #endif
    let v82 : std_string_String = _run_target_args'_v59 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _run_target_args'_v4 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = null |> unbox<string>
    let _run_target_args'_v4 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = null |> unbox<string>
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = "fs"
    let v99 : IFs = Fable.Core.JsInterop.importAll v98 
    let v100 : string = "fs.realpathSync('.')"
    let v101 : string = Fable.Core.JsInterop.emitJsExpr () v100 
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : string = null |> unbox<string>
    let _run_target_args'_v4 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = null |> unbox<string>
    let _run_target_args'_v4 = v107 
    #endif
#else
    let v110 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v111 : string = v110 ()
    let _run_target_args'_v4 = v111 
    #endif
    let v112 : string = _run_target_args'_v4 
    v112
and method33 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v44 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v45 
    let _run_target_args'_v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v47 
    let _run_target_args'_v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v49 
    let _run_target_args'_v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v60 
    #endif
#else
    let v64 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v64 
    #endif
    let v67 : std_string_String = _run_target_args'_v44 
    (* run_target_args'
    let v77 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v78 
    let _run_target_args'_v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "std::path::PathBuf::from($0)"
    let v81 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v80 
    let _run_target_args'_v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "std::path::PathBuf::from($0)"
    let v83 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v82 
    let _run_target_args'_v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v93 
    #endif
#else
    let v97 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v97 
    #endif
    let v100 : std_path_PathBuf = _run_target_args'_v77 
    (* run_target_args'
    let v110 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v111 
    let _run_target_args'_v110 = v112 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v113 
    let _run_target_args'_v110 = v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : string = "&*$0"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v115 
    let _run_target_args'_v110 = v116 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v122 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v122 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v126 
    #endif
#else
    let v130 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v130 
    #endif
    let v133 : Ref<Str> = _run_target_args'_v110 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "String::from($0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v144 
    let _run_target_args'_v143 = v145 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = "String::from($0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v146 
    let _run_target_args'_v143 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "String::from($0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v148 
    let _run_target_args'_v143 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v159 
    #endif
#else
    let v163 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v163 
    #endif
    let v166 : std_string_String = _run_target_args'_v143 
    let v172 : string = "$0.join($1)"
    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v100, v166) v172 
    (* run_target_args'
    let v178 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v179 : string = "$0.display()"
    let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
    let _run_target_args'_v178 = v180 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v181 : string = "$0.display()"
    let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
    let _run_target_args'_v178 = v182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v183 : string = "$0.display()"
    let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
    let _run_target_args'_v178 = v184 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v186 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v186 
    #endif
#if FABLE_COMPILER_PYTHON
    let v190 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v190 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v194 
    #endif
#else
    let v198 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v198 
    #endif
    let v201 : std_path_Display = _run_target_args'_v178 
    (* run_target_args'
    let v211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v212 : string = "format!(\"{}\", $0)"
    let v213 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v212 
    let _run_target_args'_v211 = v213 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v214 : string = "format!(\"{}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v214 
    let _run_target_args'_v211 = v215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v216 : string = "format!(\"{}\", $0)"
    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v216 
    let _run_target_args'_v211 = v217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v219 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v219 
    #endif
#if FABLE_COMPILER_PYTHON
    let v223 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v223 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v227 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v227 
    #endif
#else
    let v231 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v231 
    #endif
    let v234 : std_string_String = _run_target_args'_v211 
    let v240 : string = "fable_library_rust::String_::fromString($0)"
    let v241 : string = Fable.Core.RustInterop.emitRustExpr v234 v240 
    let _run_target_args'_v6 = v241 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v242 : US3 = US3_1
    let v243 : US4 = US4_3(v242)
    let v244 : string = $"file_system.(</>) / target: {v243} / a: {v0} / b: {v1}"
    let v245 : string = failwith<string> v244
    let _run_target_args'_v6 = v245 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v247 : string = null |> unbox<string>
    let _run_target_args'_v6 = v247 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v250 : string = "path"
    let v251 : IPathJoin = Fable.Core.JsInterop.importAll v250 
    let v252 : string = "v251.join($0, $1)"
    let v253 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v252 
    let _run_target_args'_v6 = v253 
    #endif
#if FABLE_COMPILER_PYTHON
    let v254 : US3 = US3_0
    let v255 : US4 = US4_5(v254)
    let v256 : string = $"file_system.(</>) / target: {v255} / a: {v0} / b: {v1}"
    let v257 : string = failwith<string> v256
    let _run_target_args'_v6 = v257 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v258 : US3 = US3_1
    let v259 : US4 = US4_1(v258)
    let v260 : string = $"file_system.(</>) / target: {v259} / a: {v0} / b: {v1}"
    let v261 : string = failwith<string> v260
    let _run_target_args'_v6 = v261 
    #endif
#else
    let v262 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v262 
    #endif
    let v263 : string = _run_target_args'_v6 
    v263
and method35 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_file()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.File.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure15 () (v0 : string) : bool =
    method35(v0)
and method36 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_dir()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.Directory.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure16 () (v0 : string) : bool =
    method36(v0)
and method38 (v0 : string) : string option =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v106 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v109 
    (* run_target_args'
    let v115 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : string = "$0.display()"
    let v117 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v110 v116 
    let _run_target_args'_v115 = v117 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v118 : string = "$0.display()"
    let v119 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v110 v118 
    let _run_target_args'_v115 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v120 : string = "$0.display()"
    let v121 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v110 v120 
    let _run_target_args'_v115 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v131 
    #endif
#else
    let v135 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v135 
    #endif
    let v138 : std_path_Display = _run_target_args'_v115 
    (* run_target_args'
    let v148 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "format!(\"{}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v149 
    let _run_target_args'_v148 = v150 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v151 : string = "format!(\"{}\", $0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v151 
    let _run_target_args'_v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v153 : string = "format!(\"{}\", $0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v153 
    let _run_target_args'_v148 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v160 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v160 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v164 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v164 
    #endif
#else
    let v168 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v168 
    #endif
    let v171 : std_string_String = _run_target_args'_v148 
    let v177 : string = "fable_library_rust::String_::fromString($0)"
    let v178 : string = Fable.Core.RustInterop.emitRustExpr v171 v177 
    let v179 : string = "true; $0 })"
    let v180 : bool = Fable.Core.RustInterop.emitRustExpr v178 v179 
    let v181 : string = "_optionm_map_"
    let v182 : string option = Fable.Core.RustInterop.emitRustExpr () v181 
    let _run_target_args'_v5 = v182 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string option = None
    let _run_target_args'_v5 = v184 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v188 : string option = None
    let _run_target_args'_v5 = v188 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : string = "path"
    let v192 : IPathDirname = Fable.Core.JsInterop.importAll v191 
    let v193 : string = "v192.dirname($0)"
    let v194 : string = Fable.Core.JsInterop.emitJsExpr v0 v193 
    let v195 : bool = v194 = v0
    let v198 : US5 =
        if v195 then
            US5_1
        else
            US5_0(v194)
    let v209 : string option =
        match v198 with
        | US5_1 -> (* None *)
            let v205 : string option = None
            v205
        | US5_0(v199) -> (* Some *)
            let v201 : string option = Some v199 
            v201
    let _run_target_args'_v5 = v209 
    #endif
#if FABLE_COMPILER_PYTHON
    let v211 : string option = None
    let _run_target_args'_v5 = v211 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v215 : string option = None
    let _run_target_args'_v5 = v215 
    #endif
#else
    let v218 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v219 : System_IO_DirectoryInfo = v218 v0
    let v221 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v225 : bool = v219 = v221 
    let v267 : US5 =
        if v225 then
            US5_1
        else
            (* run_target_args'
            let v233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v235 : string = null |> unbox<string>
            let _run_target_args'_v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v239 : string = null |> unbox<string>
            let _run_target_args'_v233 = v239 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v243 : string = null |> unbox<string>
            let _run_target_args'_v233 = v243 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v247 : string = null |> unbox<string>
            let _run_target_args'_v233 = v247 
            #endif
#if FABLE_COMPILER_PYTHON
            let v251 : string = null |> unbox<string>
            let _run_target_args'_v233 = v251 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v255 : string = null |> unbox<string>
            let _run_target_args'_v233 = v255 
            #endif
#else
            let v258 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v259 : string = v258 v219
            let _run_target_args'_v233 = v259 
            #endif
            let v260 : string = _run_target_args'_v233 
            US5_0(v260)
    let v278 : string option =
        match v267 with
        | US5_1 -> (* None *)
            let v274 : string option = None
            v274
        | US5_0(v268) -> (* Some *)
            let v270 : string option = Some v268 
            v270
    let _run_target_args'_v5 = v278 
    #endif
    let v279 : string option = _run_target_args'_v5 
    v279
and method39 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US13 =
    let v5 : string = method33(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US13_0(v4)
    else
        let v8 : string option = method38(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v32 : US5 = US5_1
        let v33 : US5 = v12 |> Option.defaultValue v32 
        match v33 with
        | US5_1 -> (* None *)
            let v39 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v40 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v41 : string = v39 + v40 
            US13_1(v41)
        | US5_0(v37) -> (* Some *)
            method39(v0, v1, v2, v3, v37)
and method37 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US13 =
    let v4 : string = method33(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US13_0(v1)
    else
        let v7 : string option = method38(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v31 : US5 = US5_1
        let v32 : US5 = v11 |> Option.defaultValue v31 
        match v32 with
        | US5_1 -> (* None *)
            let v38 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v39 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v40 : string = v38 + v39 
            US13_1(v40)
        | US5_0(v36) -> (* Some *)
            method39(v0, v1, v2, v3, v36)
and method34 (v0 : US12, v1 : string, v2 : string) : US13 =
    let v3 : bool =
        match v0 with
        | US12_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method37(v1, v2, v3, v6)
and method40 () : string =
    
    
    
    
    
    let v2 : string = "Warning"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_yellow"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v83 : string = "inline_colorization::color_reset"
    let v84 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v84) v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v47 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "inline_colorization::color_yellow"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    (* run_target_args'
    let v95 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "&*$0"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v96 
    let _run_target_args'_v95 = v97 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v98 : string = "&*$0"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v98 
    let _run_target_args'_v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v100 
    let _run_target_args'_v95 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v107 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v111 
    #endif
#else
    let v115 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v95 
    let v124 : string = "inline_colorization::color_reset"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v124 
    let v126 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v90, v118, v125) v126 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let _run_target_args'_v47 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "inline_colorization::color_yellow"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    (* run_target_args'
    let v136 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v137 : string = "&*$0"
    let v138 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v137 
    let _run_target_args'_v136 = v138 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : string = "&*$0"
    let v140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v139 
    let _run_target_args'_v136 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = "&*$0"
    let v142 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v141 
    let _run_target_args'_v136 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v152 
    #endif
#else
    let v156 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v156 
    #endif
    let v159 : Ref<Str> = _run_target_args'_v136 
    let v165 : string = "inline_colorization::color_reset"
    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v131, v159, v166) v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _run_target_args'_v47 = v170 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v172 : string = "\u001b[93m"
    let v176 : string = method14()
    let v180 : string = v172 + v30 
    let v184 : string = v180 + v176 
    let _run_target_args'_v47 = v184 
    #endif
#if FABLE_COMPILER_PYTHON
    let v188 : string = "\u001b[93m"
    let v192 : string = method14()
    let v196 : string = v188 + v30 
    let v200 : string = v196 + v192 
    let _run_target_args'_v47 = v200 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : string = "\u001b[93m"
    let v208 : string = method14()
    let v212 : string = v204 + v30 
    let v216 : string = v212 + v208 
    let _run_target_args'_v47 = v216 
    #endif
#else
    let v220 : string = "\u001b[93m"
    let v224 : string = method14()
    let v228 : string = v220 + v30 
    let v232 : string = v228 + v224 
    let _run_target_args'_v47 = v232 
    #endif
    let v235 : string = _run_target_args'_v47 
    v235
and method41 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "dir"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "error"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v9}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v11, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v177 : string = v11.l0
    let v178 : int64 = v0.l0
    let v181 : string = " "
    let v182 : string = v6 + v181 
    let v186 : string = v182 + v7 
    let v191 : string = " #"
    let v192 : string = v186 + v191 
    let v196 : (int64 -> string) = _.ToString()
    let v197 : string = v196 v178
    let v201 : string = v192 + v197 
    let v205 : string = v201 + v181 
    let v210 : string = "file_system.get_workspace_root"
    let v211 : string = v205 + v210 
    let v216 : string = " / "
    let v217 : string = v211 + v216 
    let v221 : string = v217 + v177 
    method16(v221)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method40()
        let v61 : string = method41(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and closure18 () (v0 : std_io_Error) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v43 : string = $"{v36}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v43)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v59 : string = v2.l0
    v59
and method45 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US14 =
    US14_0(v0)
and method46 () : (std_path_PathBuf -> US14) =
    closure19()
and closure20 () (v0 : string) : US14 =
    US14_1(v0)
and method47 () : (string -> US14) =
    closure20()
and method50 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v179 : US5 = US5_1
    let v180 : US5 = v159 |> Option.defaultValue v179 
    let v187 : string =
        match v180 with
        | US5_1 -> (* None *)
            let v185 : string = ""
            v185
        | US5_0(v184) -> (* Some *)
            v184
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v188 : US3 = US3_1
    let v189 : US4 = US4_3(v188)
    let v190 : string = $"file_system.get_file_name / target: {v189} / path: {v0}"
    let v191 : string = failwith<string> v190
    let _run_target_args'_v5 = v191 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = null |> unbox<string>
    let _run_target_args'_v5 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v196 : string = "path"
    let v197 : IPathBasename = Fable.Core.JsInterop.importAll v196 
    let v198 : string = "v197.basename($0)"
    let v199 : string = Fable.Core.JsInterop.emitJsExpr v0 v198 
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_PYTHON
    let v200 : US3 = US3_0
    let v201 : US4 = US4_5(v200)
    let v202 : string = $"file_system.get_file_name / target: {v201} / path: {v0}"
    let v203 : string = failwith<string> v202
    let _run_target_args'_v5 = v203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : US3 = US3_1
    let v205 : US4 = US4_1(v204)
    let v206 : string = $"file_system.get_file_name / target: {v205} / path: {v0}"
    let v207 : string = failwith<string> v206
    let _run_target_args'_v5 = v207 
    #endif
#else
    let v208 : (string -> string) = System.IO.Path.GetFileName
    let v209 : string = v208 v0
    let _run_target_args'_v5 = v209 
    #endif
    let v210 : string = _run_target_args'_v5 
    v210
and method49 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method50(v4)
    let v6 : string option = method38(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method13()
    let v36 : Mut3 = {l0 = v35} : Mut3
    let v38 : string = $"{v3}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v36, v38)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v54 : string = v36.l0
    let v55 : bool = v2 >= 11uy
    if v55 then
        let v56 : string = $"file_system.read_link / "
        let v57 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v58 : string = v56 + v57 
        (* run_target_args'
        let v63 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v64 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v65 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v58 v64 
        let _run_target_args'_v63 = v65 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v66 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v67 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v58 v66 
        let _run_target_args'_v63 = v67 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v68 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v69 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v58 v68 
        let _run_target_args'_v63 = v69 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v71 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v71 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v75 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v79 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v79 
        #endif
#else
        let v83 : std_io_Error = v58 |> unbox<std_io_Error>
        let _run_target_args'_v63 = v83 
        #endif
        let v86 : std_io_Error = _run_target_args'_v63 
        (* run_target_args'
        let v93 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v94 : string = "Err($0)"
        let v95 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v94 
        let _run_target_args'_v93 = v95 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v96 : string = "Err($0)"
        let v97 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v96 
        let _run_target_args'_v93 = v97 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v98 : string = "Err($0)"
        let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v98 
        let _run_target_args'_v93 = v99 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v100 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v93 = v100 
        #endif
#if FABLE_COMPILER_PYTHON
        let v101 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v93 = v101 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v102 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v93 = v102 
        #endif
#else
        let v103 : Result<std_path_PathBuf, std_io_Error> = v86 |> Error
        let _run_target_args'_v93 = v103 
        #endif
        let v104 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v93 
        v104
    else
        match v31 with
        | US5_0(v107) -> (* Some *)
            let v110 : string = ""
            let v111 : bool = v4 <> v110 
            if v111 then
                let v114 : uint8 = v2 + 1uy
                let v115 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v114
                let v116 : Result<std_path_PathBuf, std_io_Error> = v115 v107
                let v117 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v119 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v120 : string = "$0.map_err(|x| $1(x))"
                let v121 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v116, v117) v120 
                let _run_target_args'_v119 = v121 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v122 : string = "$0.map_err(|x| $1(x))"
                let v123 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v116, v117) v122 
                let _run_target_args'_v119 = v123 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v124 : string = "$0.map_err(|x| $1(x))"
                let v125 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v116, v117) v124 
                let _run_target_args'_v119 = v125 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v126 : Result<std_path_PathBuf, string> = match v116 with Ok x -> Ok x | Error x -> Error (v117 x)
                let _run_target_args'_v119 = v126 
                #endif
#if FABLE_COMPILER_PYTHON
                let v127 : Result<std_path_PathBuf, string> = match v116 with Ok x -> Ok x | Error x -> Error (v117 x)
                let _run_target_args'_v119 = v127 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v128 : Result<std_path_PathBuf, string> = match v116 with Ok x -> Ok x | Error x -> Error (v117 x)
                let _run_target_args'_v119 = v128 
                #endif
#else
                let v129 : Result<std_path_PathBuf, string> = match v116 with Ok x -> Ok x | Error x -> Error (v117 x)
                let _run_target_args'_v119 = v129 
                #endif
                let v130 : Result<std_path_PathBuf, string> = _run_target_args'_v119 
                let v133 : (std_path_PathBuf -> US14) = method46()
                let v134 : (string -> US14) = method47()
                let v136 : US14 = match v130 with Ok x -> v133 x | Error x -> v134 x
                match v136 with
                | US14_1(v292) -> (* Error *)
                    let v293 : string = $"file_system.read_link / "
                    let v294 : string = $"error': {v292} / error: {v54} / name: {v5}"
                    let v295 : string = v293 + v294 
                    (* run_target_args'
                    let v300 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v301 
                    let _run_target_args'_v300 = v302 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v303 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v304 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v303 
                    let _run_target_args'_v300 = v304 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v305 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v306 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v305 
                    let _run_target_args'_v300 = v306 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v308 : std_io_Error = v295 |> unbox<std_io_Error>
                    let _run_target_args'_v300 = v308 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v295 |> unbox<std_io_Error>
                    let _run_target_args'_v300 = v312 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v316 : std_io_Error = v295 |> unbox<std_io_Error>
                    let _run_target_args'_v300 = v316 
                    #endif
#else
                    let v320 : std_io_Error = v295 |> unbox<std_io_Error>
                    let _run_target_args'_v300 = v320 
                    #endif
                    let v323 : std_io_Error = _run_target_args'_v300 
                    (* run_target_args'
                    let v330 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v323 v331 
                    let _run_target_args'_v330 = v332 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v323 v333 
                    let _run_target_args'_v330 = v334 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v335 : string = "Err($0)"
                    let v336 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v323 v335 
                    let _run_target_args'_v330 = v336 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v323 |> Error
                    let _run_target_args'_v330 = v337 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v323 |> Error
                    let _run_target_args'_v330 = v338 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v323 |> Error
                    let _run_target_args'_v330 = v339 
                    #endif
#else
                    let v340 : Result<std_path_PathBuf, std_io_Error> = v323 |> Error
                    let _run_target_args'_v330 = v340 
                    #endif
                    let v341 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v330 
                    v341
                | US14_0(v139) -> (* Ok *)
                    (* run_target_args'
                    let v144 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v145 : string = "$0.display()"
                    let v146 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v139 v145 
                    let _run_target_args'_v144 = v146 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v147 : string = "$0.display()"
                    let v148 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v139 v147 
                    let _run_target_args'_v144 = v148 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v149 : string = "$0.display()"
                    let v150 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v139 v149 
                    let _run_target_args'_v144 = v150 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v152 : std_path_Display = v139 |> unbox<std_path_Display>
                    let _run_target_args'_v144 = v152 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v156 : std_path_Display = v139 |> unbox<std_path_Display>
                    let _run_target_args'_v144 = v156 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v160 : std_path_Display = v139 |> unbox<std_path_Display>
                    let _run_target_args'_v144 = v160 
                    #endif
#else
                    let v164 : std_path_Display = v139 |> unbox<std_path_Display>
                    let _run_target_args'_v144 = v164 
                    #endif
                    let v167 : std_path_Display = _run_target_args'_v144 
                    let v174 : string = v167 |> string 
                    let v177 : string = method33(v174, v5)
                    (* run_target_args'
                    let v182 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v183 : string = "&*$0"
                    let v184 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v177 v183 
                    let _run_target_args'_v182 = v184 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v185 : string = "&*$0"
                    let v186 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v177 v185 
                    let _run_target_args'_v182 = v186 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v187 : string = "&*$0"
                    let v188 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v177 v187 
                    let _run_target_args'_v182 = v188 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Ref<Str> = v177 |> unbox<Ref<Str>>
                    let _run_target_args'_v182 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v194 : Ref<Str> = v177 |> unbox<Ref<Str>>
                    let _run_target_args'_v182 = v194 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v198 : Ref<Str> = v177 |> unbox<Ref<Str>>
                    let _run_target_args'_v182 = v198 
                    #endif
#else
                    let v202 : Ref<Str> = v177 |> unbox<Ref<Str>>
                    let _run_target_args'_v182 = v202 
                    #endif
                    let v205 : Ref<Str> = _run_target_args'_v182 
                    (* run_target_args'
                    let v215 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v216 : string = "String::from($0)"
                    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v205 v216 
                    let _run_target_args'_v215 = v217 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v218 : string = "String::from($0)"
                    let v219 : std_string_String = Fable.Core.RustInterop.emitRustExpr v205 v218 
                    let _run_target_args'_v215 = v219 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v220 : string = "String::from($0)"
                    let v221 : std_string_String = Fable.Core.RustInterop.emitRustExpr v205 v220 
                    let _run_target_args'_v215 = v221 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v223 : std_string_String = v205 |> unbox<std_string_String>
                    let _run_target_args'_v215 = v223 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v227 : std_string_String = v205 |> unbox<std_string_String>
                    let _run_target_args'_v215 = v227 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v231 : std_string_String = v205 |> unbox<std_string_String>
                    let _run_target_args'_v215 = v231 
                    #endif
#else
                    let v235 : std_string_String = v205 |> unbox<std_string_String>
                    let _run_target_args'_v215 = v235 
                    #endif
                    let v238 : std_string_String = _run_target_args'_v215 
                    (* run_target_args'
                    let v248 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v249 : string = "std::path::PathBuf::from($0)"
                    let v250 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v238 v249 
                    let _run_target_args'_v248 = v250 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v251 : string = "std::path::PathBuf::from($0)"
                    let v252 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v238 v251 
                    let _run_target_args'_v248 = v252 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v253 : string = "std::path::PathBuf::from($0)"
                    let v254 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v238 v253 
                    let _run_target_args'_v248 = v254 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v256 : std_path_PathBuf = v238 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v248 = v256 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v260 : std_path_PathBuf = v238 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v248 = v260 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v264 : std_path_PathBuf = v238 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v248 = v264 
                    #endif
#else
                    let v268 : std_path_PathBuf = v238 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v248 = v268 
                    #endif
                    let v271 : std_path_PathBuf = _run_target_args'_v248 
                    (* run_target_args'
                    let v278 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v271 v279 
                    let _run_target_args'_v278 = v280 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v281 : string = "Ok($0)"
                    let v282 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v271 v281 
                    let _run_target_args'_v278 = v282 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v283 : string = "Ok($0)"
                    let v284 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v271 v283 
                    let _run_target_args'_v278 = v284 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v285 : Result<std_path_PathBuf, std_io_Error> = v271 |> Ok
                    let _run_target_args'_v278 = v285 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v286 : Result<std_path_PathBuf, std_io_Error> = v271 |> Ok
                    let _run_target_args'_v278 = v286 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v287 : Result<std_path_PathBuf, std_io_Error> = v271 |> Ok
                    let _run_target_args'_v278 = v287 
                    #endif
#else
                    let v288 : Result<std_path_PathBuf, std_io_Error> = v271 |> Ok
                    let _run_target_args'_v278 = v288 
                    #endif
                    let v289 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v278 
                    v289
            else
                let v346 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v347 : string = $"path: {v0} / error: {v54} / path': {v4} / name: {v5}"
                let v348 : string = v346 + v347 
                (* run_target_args'
                let v353 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v348 v354 
                let _run_target_args'_v353 = v355 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v348 v356 
                let _run_target_args'_v353 = v357 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v358 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v359 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v348 v358 
                let _run_target_args'_v353 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v361 : std_io_Error = v348 |> unbox<std_io_Error>
                let _run_target_args'_v353 = v361 
                #endif
#if FABLE_COMPILER_PYTHON
                let v365 : std_io_Error = v348 |> unbox<std_io_Error>
                let _run_target_args'_v353 = v365 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v369 : std_io_Error = v348 |> unbox<std_io_Error>
                let _run_target_args'_v353 = v369 
                #endif
#else
                let v373 : std_io_Error = v348 |> unbox<std_io_Error>
                let _run_target_args'_v353 = v373 
                #endif
                let v376 : std_io_Error = _run_target_args'_v353 
                (* run_target_args'
                let v383 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v384 : string = "Err($0)"
                let v385 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v376 v384 
                let _run_target_args'_v383 = v385 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v376 v386 
                let _run_target_args'_v383 = v387 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v376 v388 
                let _run_target_args'_v383 = v389 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v390 : Result<std_path_PathBuf, std_io_Error> = v376 |> Error
                let _run_target_args'_v383 = v390 
                #endif
#if FABLE_COMPILER_PYTHON
                let v391 : Result<std_path_PathBuf, std_io_Error> = v376 |> Error
                let _run_target_args'_v383 = v391 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v376 |> Error
                let _run_target_args'_v383 = v392 
                #endif
#else
                let v393 : Result<std_path_PathBuf, std_io_Error> = v376 |> Error
                let _run_target_args'_v383 = v393 
                #endif
                let v394 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v383 
                v394
        | _ ->
            let v398 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v399 : string = $"path: {v0} / error: {v54} / path': {v4} / name: {v5}"
            let v400 : string = v398 + v399 
            (* run_target_args'
            let v405 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v406 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v407 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v400 v406 
            let _run_target_args'_v405 = v407 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v400 v408 
            let _run_target_args'_v405 = v409 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v400 v410 
            let _run_target_args'_v405 = v411 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v413 : std_io_Error = v400 |> unbox<std_io_Error>
            let _run_target_args'_v405 = v413 
            #endif
#if FABLE_COMPILER_PYTHON
            let v417 : std_io_Error = v400 |> unbox<std_io_Error>
            let _run_target_args'_v405 = v417 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v421 : std_io_Error = v400 |> unbox<std_io_Error>
            let _run_target_args'_v405 = v421 
            #endif
#else
            let v425 : std_io_Error = v400 |> unbox<std_io_Error>
            let _run_target_args'_v405 = v425 
            #endif
            let v428 : std_io_Error = _run_target_args'_v405 
            (* run_target_args'
            let v435 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v436 : string = "Err($0)"
            let v437 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v428 v436 
            let _run_target_args'_v435 = v437 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v438 : string = "Err($0)"
            let v439 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v428 v438 
            let _run_target_args'_v435 = v439 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v428 v440 
            let _run_target_args'_v435 = v441 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v442 : Result<std_path_PathBuf, std_io_Error> = v428 |> Error
            let _run_target_args'_v435 = v442 
            #endif
#if FABLE_COMPILER_PYTHON
            let v443 : Result<std_path_PathBuf, std_io_Error> = v428 |> Error
            let _run_target_args'_v435 = v443 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v444 : Result<std_path_PathBuf, std_io_Error> = v428 |> Error
            let _run_target_args'_v435 = v444 
            #endif
#else
            let v445 : Result<std_path_PathBuf, std_io_Error> = v428 |> Error
            let _run_target_args'_v435 = v445 
            #endif
            let v446 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v435 
            v446
and method48 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US14) = method46()
    let v27 : (string -> US14) = method47()
    let v29 : US14 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US14_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method49(v0, v49, v1, v48, v2)
        | US14_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US14) = method46()
    let v72 : (string -> US14) = method47()
    let v74 : US14 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US14_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method49(v0, v94, v1, v93, v2)
        | US14_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US14) = method46()
    let v117 : (string -> US14) = method47()
    let v119 : US14 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US14_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method49(v0, v139, v1, v138, v2)
        | US14_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method48(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method51 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method50(v0)
    let v5 : string option = method38(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method13()
    let v35 : Mut3 = {l0 = v34} : Mut3
    let v37 : string = $"{v3}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v35, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v53 : string = v35.l0
    let v54 : bool = v2 >= 11uy
    if v54 then
        let v55 : string = $"file_system.read_link / "
        let v56 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v57 : string = v55 + v56 
        (* run_target_args'
        let v62 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v63 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v64 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v57 v63 
        let _run_target_args'_v62 = v64 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v65 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v66 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v57 v65 
        let _run_target_args'_v62 = v66 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v67 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v68 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v57 v67 
        let _run_target_args'_v62 = v68 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v70 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v70 
        #endif
#if FABLE_COMPILER_PYTHON
        let v74 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v74 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v78 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v78 
        #endif
#else
        let v82 : std_io_Error = v57 |> unbox<std_io_Error>
        let _run_target_args'_v62 = v82 
        #endif
        let v85 : std_io_Error = _run_target_args'_v62 
        (* run_target_args'
        let v92 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v93 : string = "Err($0)"
        let v94 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v93 
        let _run_target_args'_v92 = v94 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v95 : string = "Err($0)"
        let v96 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v95 
        let _run_target_args'_v92 = v96 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = "Err($0)"
        let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v97 
        let _run_target_args'_v92 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v99 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v92 = v99 
        #endif
#if FABLE_COMPILER_PYTHON
        let v100 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v92 = v100 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v101 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v92 = v101 
        #endif
#else
        let v102 : Result<std_path_PathBuf, std_io_Error> = v85 |> Error
        let _run_target_args'_v92 = v102 
        #endif
        let v103 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v92 
        v103
    else
        match v30 with
        | US5_0(v106) -> (* Some *)
            let v109 : string = ""
            let v110 : bool = v0 <> v109 
            if v110 then
                let v113 : uint8 = v2 + 1uy
                let v114 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v113
                let v115 : Result<std_path_PathBuf, std_io_Error> = v114 v106
                let v116 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v119 : string = "$0.map_err(|x| $1(x))"
                let v120 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v115, v116) v119 
                let _run_target_args'_v118 = v120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v121 : string = "$0.map_err(|x| $1(x))"
                let v122 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v115, v116) v121 
                let _run_target_args'_v118 = v122 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v123 : string = "$0.map_err(|x| $1(x))"
                let v124 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v115, v116) v123 
                let _run_target_args'_v118 = v124 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v125 : Result<std_path_PathBuf, string> = match v115 with Ok x -> Ok x | Error x -> Error (v116 x)
                let _run_target_args'_v118 = v125 
                #endif
#if FABLE_COMPILER_PYTHON
                let v126 : Result<std_path_PathBuf, string> = match v115 with Ok x -> Ok x | Error x -> Error (v116 x)
                let _run_target_args'_v118 = v126 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v127 : Result<std_path_PathBuf, string> = match v115 with Ok x -> Ok x | Error x -> Error (v116 x)
                let _run_target_args'_v118 = v127 
                #endif
#else
                let v128 : Result<std_path_PathBuf, string> = match v115 with Ok x -> Ok x | Error x -> Error (v116 x)
                let _run_target_args'_v118 = v128 
                #endif
                let v129 : Result<std_path_PathBuf, string> = _run_target_args'_v118 
                let v132 : (std_path_PathBuf -> US14) = method46()
                let v133 : (string -> US14) = method47()
                let v135 : US14 = match v129 with Ok x -> v132 x | Error x -> v133 x
                match v135 with
                | US14_1(v291) -> (* Error *)
                    let v292 : string = $"file_system.read_link / "
                    let v293 : string = $"error': {v291} / error: {v53} / name: {v4}"
                    let v294 : string = v292 + v293 
                    (* run_target_args'
                    let v299 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v294 v300 
                    let _run_target_args'_v299 = v301 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v302 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v303 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v294 v302 
                    let _run_target_args'_v299 = v303 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v304 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v305 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v294 v304 
                    let _run_target_args'_v299 = v305 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v307 : std_io_Error = v294 |> unbox<std_io_Error>
                    let _run_target_args'_v299 = v307 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v294 |> unbox<std_io_Error>
                    let _run_target_args'_v299 = v311 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v315 : std_io_Error = v294 |> unbox<std_io_Error>
                    let _run_target_args'_v299 = v315 
                    #endif
#else
                    let v319 : std_io_Error = v294 |> unbox<std_io_Error>
                    let _run_target_args'_v299 = v319 
                    #endif
                    let v322 : std_io_Error = _run_target_args'_v299 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v322 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v322 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v322 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v322 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v322 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v322 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v322 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US14_0(v138) -> (* Ok *)
                    (* run_target_args'
                    let v143 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v144 : string = "$0.display()"
                    let v145 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v138 v144 
                    let _run_target_args'_v143 = v145 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v146 : string = "$0.display()"
                    let v147 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v138 v146 
                    let _run_target_args'_v143 = v147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v148 : string = "$0.display()"
                    let v149 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v138 v148 
                    let _run_target_args'_v143 = v149 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v151 : std_path_Display = v138 |> unbox<std_path_Display>
                    let _run_target_args'_v143 = v151 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v155 : std_path_Display = v138 |> unbox<std_path_Display>
                    let _run_target_args'_v143 = v155 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v159 : std_path_Display = v138 |> unbox<std_path_Display>
                    let _run_target_args'_v143 = v159 
                    #endif
#else
                    let v163 : std_path_Display = v138 |> unbox<std_path_Display>
                    let _run_target_args'_v143 = v163 
                    #endif
                    let v166 : std_path_Display = _run_target_args'_v143 
                    let v173 : string = v166 |> string 
                    let v176 : string = method33(v173, v4)
                    (* run_target_args'
                    let v181 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v182 : string = "&*$0"
                    let v183 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v176 v182 
                    let _run_target_args'_v181 = v183 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v184 : string = "&*$0"
                    let v185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v176 v184 
                    let _run_target_args'_v181 = v185 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v186 : string = "&*$0"
                    let v187 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v176 v186 
                    let _run_target_args'_v181 = v187 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v189 : Ref<Str> = v176 |> unbox<Ref<Str>>
                    let _run_target_args'_v181 = v189 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v193 : Ref<Str> = v176 |> unbox<Ref<Str>>
                    let _run_target_args'_v181 = v193 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v197 : Ref<Str> = v176 |> unbox<Ref<Str>>
                    let _run_target_args'_v181 = v197 
                    #endif
#else
                    let v201 : Ref<Str> = v176 |> unbox<Ref<Str>>
                    let _run_target_args'_v181 = v201 
                    #endif
                    let v204 : Ref<Str> = _run_target_args'_v181 
                    (* run_target_args'
                    let v214 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v215 : string = "String::from($0)"
                    let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr v204 v215 
                    let _run_target_args'_v214 = v216 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v217 : string = "String::from($0)"
                    let v218 : std_string_String = Fable.Core.RustInterop.emitRustExpr v204 v217 
                    let _run_target_args'_v214 = v218 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v219 : string = "String::from($0)"
                    let v220 : std_string_String = Fable.Core.RustInterop.emitRustExpr v204 v219 
                    let _run_target_args'_v214 = v220 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v222 : std_string_String = v204 |> unbox<std_string_String>
                    let _run_target_args'_v214 = v222 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v226 : std_string_String = v204 |> unbox<std_string_String>
                    let _run_target_args'_v214 = v226 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v230 : std_string_String = v204 |> unbox<std_string_String>
                    let _run_target_args'_v214 = v230 
                    #endif
#else
                    let v234 : std_string_String = v204 |> unbox<std_string_String>
                    let _run_target_args'_v214 = v234 
                    #endif
                    let v237 : std_string_String = _run_target_args'_v214 
                    (* run_target_args'
                    let v247 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v248 : string = "std::path::PathBuf::from($0)"
                    let v249 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v237 v248 
                    let _run_target_args'_v247 = v249 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v250 : string = "std::path::PathBuf::from($0)"
                    let v251 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v237 v250 
                    let _run_target_args'_v247 = v251 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v252 : string = "std::path::PathBuf::from($0)"
                    let v253 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v237 v252 
                    let _run_target_args'_v247 = v253 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v255 : std_path_PathBuf = v237 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v247 = v255 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v259 : std_path_PathBuf = v237 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v247 = v259 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v263 : std_path_PathBuf = v237 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v247 = v263 
                    #endif
#else
                    let v267 : std_path_PathBuf = v237 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v247 = v267 
                    #endif
                    let v270 : std_path_PathBuf = _run_target_args'_v247 
                    (* run_target_args'
                    let v277 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v270 v278 
                    let _run_target_args'_v277 = v279 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v280 : string = "Ok($0)"
                    let v281 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v270 v280 
                    let _run_target_args'_v277 = v281 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v282 : string = "Ok($0)"
                    let v283 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v270 v282 
                    let _run_target_args'_v277 = v283 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v270 |> Ok
                    let _run_target_args'_v277 = v284 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v285 : Result<std_path_PathBuf, std_io_Error> = v270 |> Ok
                    let _run_target_args'_v277 = v285 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v286 : Result<std_path_PathBuf, std_io_Error> = v270 |> Ok
                    let _run_target_args'_v277 = v286 
                    #endif
#else
                    let v287 : Result<std_path_PathBuf, std_io_Error> = v270 |> Ok
                    let _run_target_args'_v277 = v287 
                    #endif
                    let v288 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v277 
                    v288
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v53} / path': {v0} / name: {v4}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v382 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v383 : string = "Err($0)"
                let v384 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v383 
                let _run_target_args'_v382 = v384 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v385 
                let _run_target_args'_v382 = v386 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v387 
                let _run_target_args'_v382 = v388 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v389 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v382 = v389 
                #endif
#if FABLE_COMPILER_PYTHON
                let v390 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v382 = v390 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v391 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v382 = v391 
                #endif
#else
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v382 = v392 
                #endif
                let v393 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v382 
                v393
        | _ ->
            let v397 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v398 : string = $"path: {v0} / error: {v53} / path': {v0} / name: {v4}"
            let v399 : string = v397 + v398 
            (* run_target_args'
            let v404 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v405 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v406 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v399 v405 
            let _run_target_args'_v404 = v406 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v399 v407 
            let _run_target_args'_v404 = v408 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v399 v409 
            let _run_target_args'_v404 = v410 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v412 : std_io_Error = v399 |> unbox<std_io_Error>
            let _run_target_args'_v404 = v412 
            #endif
#if FABLE_COMPILER_PYTHON
            let v416 : std_io_Error = v399 |> unbox<std_io_Error>
            let _run_target_args'_v404 = v416 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v420 : std_io_Error = v399 |> unbox<std_io_Error>
            let _run_target_args'_v404 = v420 
            #endif
#else
            let v424 : std_io_Error = v399 |> unbox<std_io_Error>
            let _run_target_args'_v404 = v424 
            #endif
            let v427 : std_io_Error = _run_target_args'_v404 
            (* run_target_args'
            let v434 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v435 : string = "Err($0)"
            let v436 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v427 v435 
            let _run_target_args'_v434 = v436 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v437 : string = "Err($0)"
            let v438 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v427 v437 
            let _run_target_args'_v434 = v438 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v439 : string = "Err($0)"
            let v440 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v427 v439 
            let _run_target_args'_v434 = v440 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v441 : Result<std_path_PathBuf, std_io_Error> = v427 |> Error
            let _run_target_args'_v434 = v441 
            #endif
#if FABLE_COMPILER_PYTHON
            let v442 : Result<std_path_PathBuf, std_io_Error> = v427 |> Error
            let _run_target_args'_v434 = v442 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v443 : Result<std_path_PathBuf, std_io_Error> = v427 |> Error
            let _run_target_args'_v434 = v443 
            #endif
#else
            let v444 : Result<std_path_PathBuf, std_io_Error> = v427 |> Error
            let _run_target_args'_v434 = v444 
            #endif
            let v445 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v434 
            v445
and method44 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US14) = method46()
    let v26 : (string -> US14) = method47()
    let v28 : US14 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US14_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v48, v1, v47)
        | US14_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US14) = method46()
    let v71 : (string -> US14) = method47()
    let v73 : US14 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US14_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v93, v1, v92)
        | US14_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method45()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US14) = method46()
    let v116 : (string -> US14) = method47()
    let v118 : US14 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US14_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v138, v1, v137)
        | US14_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method53 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method54 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method55 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method57 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method50(v4)
    let v6 : string option = method38(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method13()
    let v36 : Mut3 = {l0 = v35} : Mut3
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v41 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "format!(\"{:#?}\", $0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v41 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : string = $"%A{v3}"
    let _run_target_args'_v41 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v3}"
    let _run_target_args'_v41 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : string = $"%A{v3}"
    let _run_target_args'_v41 = v63 
    #endif
#else
    let v67 : string = $"%A{v3}"
    let _run_target_args'_v41 = v67 
    #endif
    let v70 : string = _run_target_args'_v41 
    let v77 : string = $"{v70}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v36, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v93 : string = v36.l0
    let v94 : bool = v2 >= 11uy
    if v94 then
        let v95 : string = $"file_system.read_link / "
        let v96 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v97 : string = v95 + v96 
        (* run_target_args'
        let v102 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v103 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v104 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v97 v103 
        let _run_target_args'_v102 = v104 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v105 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v106 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v97 v105 
        let _run_target_args'_v102 = v106 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v107 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v108 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v97 v107 
        let _run_target_args'_v102 = v108 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v110 : std_io_Error = v97 |> unbox<std_io_Error>
        let _run_target_args'_v102 = v110 
        #endif
#if FABLE_COMPILER_PYTHON
        let v114 : std_io_Error = v97 |> unbox<std_io_Error>
        let _run_target_args'_v102 = v114 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v118 : std_io_Error = v97 |> unbox<std_io_Error>
        let _run_target_args'_v102 = v118 
        #endif
#else
        let v122 : std_io_Error = v97 |> unbox<std_io_Error>
        let _run_target_args'_v102 = v122 
        #endif
        let v125 : std_io_Error = _run_target_args'_v102 
        (* run_target_args'
        let v132 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v133 : string = "Err($0)"
        let v134 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v125 v133 
        let _run_target_args'_v132 = v134 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v135 : string = "Err($0)"
        let v136 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v125 v135 
        let _run_target_args'_v132 = v136 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v137 : string = "Err($0)"
        let v138 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v125 v137 
        let _run_target_args'_v132 = v138 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v139 : Result<std_path_PathBuf, std_io_Error> = v125 |> Error
        let _run_target_args'_v132 = v139 
        #endif
#if FABLE_COMPILER_PYTHON
        let v140 : Result<std_path_PathBuf, std_io_Error> = v125 |> Error
        let _run_target_args'_v132 = v140 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v141 : Result<std_path_PathBuf, std_io_Error> = v125 |> Error
        let _run_target_args'_v132 = v141 
        #endif
#else
        let v142 : Result<std_path_PathBuf, std_io_Error> = v125 |> Error
        let _run_target_args'_v132 = v142 
        #endif
        let v143 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v132 
        v143
    else
        match v31 with
        | US5_0(v146) -> (* Some *)
            let v149 : string = ""
            let v150 : bool = v4 <> v149 
            if v150 then
                let v153 : uint8 = v2 + 1uy
                let v154 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v153
                let v155 : Result<std_path_PathBuf, std_io_Error> = v154 v146
                let v156 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v158 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v159 : string = "$0.map_err(|x| $1(x))"
                let v160 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v155, v156) v159 
                let _run_target_args'_v158 = v160 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v161 : string = "$0.map_err(|x| $1(x))"
                let v162 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v155, v156) v161 
                let _run_target_args'_v158 = v162 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v163 : string = "$0.map_err(|x| $1(x))"
                let v164 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v155, v156) v163 
                let _run_target_args'_v158 = v164 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v165 : Result<std_path_PathBuf, string> = match v155 with Ok x -> Ok x | Error x -> Error (v156 x)
                let _run_target_args'_v158 = v165 
                #endif
#if FABLE_COMPILER_PYTHON
                let v166 : Result<std_path_PathBuf, string> = match v155 with Ok x -> Ok x | Error x -> Error (v156 x)
                let _run_target_args'_v158 = v166 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v167 : Result<std_path_PathBuf, string> = match v155 with Ok x -> Ok x | Error x -> Error (v156 x)
                let _run_target_args'_v158 = v167 
                #endif
#else
                let v168 : Result<std_path_PathBuf, string> = match v155 with Ok x -> Ok x | Error x -> Error (v156 x)
                let _run_target_args'_v158 = v168 
                #endif
                let v169 : Result<std_path_PathBuf, string> = _run_target_args'_v158 
                let v172 : (std_path_PathBuf -> US14) = method46()
                let v173 : (string -> US14) = method47()
                let v175 : US14 = match v169 with Ok x -> v172 x | Error x -> v173 x
                match v175 with
                | US14_1(v331) -> (* Error *)
                    let v332 : string = $"file_system.read_link / "
                    let v333 : string = $"error': {v331} / error: {v93} / name: {v5}"
                    let v334 : string = v332 + v333 
                    (* run_target_args'
                    let v339 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v340 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v341 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v334 v340 
                    let _run_target_args'_v339 = v341 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v342 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v343 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v334 v342 
                    let _run_target_args'_v339 = v343 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v344 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v345 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v334 v344 
                    let _run_target_args'_v339 = v345 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v347 : std_io_Error = v334 |> unbox<std_io_Error>
                    let _run_target_args'_v339 = v347 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v351 : std_io_Error = v334 |> unbox<std_io_Error>
                    let _run_target_args'_v339 = v351 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v355 : std_io_Error = v334 |> unbox<std_io_Error>
                    let _run_target_args'_v339 = v355 
                    #endif
#else
                    let v359 : std_io_Error = v334 |> unbox<std_io_Error>
                    let _run_target_args'_v339 = v359 
                    #endif
                    let v362 : std_io_Error = _run_target_args'_v339 
                    (* run_target_args'
                    let v369 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v370 : string = "Err($0)"
                    let v371 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v362 v370 
                    let _run_target_args'_v369 = v371 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v372 : string = "Err($0)"
                    let v373 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v362 v372 
                    let _run_target_args'_v369 = v373 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v374 : string = "Err($0)"
                    let v375 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v362 v374 
                    let _run_target_args'_v369 = v375 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v376 : Result<std_path_PathBuf, std_io_Error> = v362 |> Error
                    let _run_target_args'_v369 = v376 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v377 : Result<std_path_PathBuf, std_io_Error> = v362 |> Error
                    let _run_target_args'_v369 = v377 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v378 : Result<std_path_PathBuf, std_io_Error> = v362 |> Error
                    let _run_target_args'_v369 = v378 
                    #endif
#else
                    let v379 : Result<std_path_PathBuf, std_io_Error> = v362 |> Error
                    let _run_target_args'_v369 = v379 
                    #endif
                    let v380 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v369 
                    v380
                | US14_0(v178) -> (* Ok *)
                    (* run_target_args'
                    let v183 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.display()"
                    let v185 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v178 v184 
                    let _run_target_args'_v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.display()"
                    let v187 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v178 v186 
                    let _run_target_args'_v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.display()"
                    let v189 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v178 v188 
                    let _run_target_args'_v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v191 : std_path_Display = v178 |> unbox<std_path_Display>
                    let _run_target_args'_v183 = v191 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v195 : std_path_Display = v178 |> unbox<std_path_Display>
                    let _run_target_args'_v183 = v195 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v199 : std_path_Display = v178 |> unbox<std_path_Display>
                    let _run_target_args'_v183 = v199 
                    #endif
#else
                    let v203 : std_path_Display = v178 |> unbox<std_path_Display>
                    let _run_target_args'_v183 = v203 
                    #endif
                    let v206 : std_path_Display = _run_target_args'_v183 
                    let v213 : string = v206 |> string 
                    let v216 : string = method33(v213, v5)
                    (* run_target_args'
                    let v221 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v222 : string = "&*$0"
                    let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v216 v222 
                    let _run_target_args'_v221 = v223 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v224 : string = "&*$0"
                    let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v216 v224 
                    let _run_target_args'_v221 = v225 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v226 : string = "&*$0"
                    let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v216 v226 
                    let _run_target_args'_v221 = v227 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v229 : Ref<Str> = v216 |> unbox<Ref<Str>>
                    let _run_target_args'_v221 = v229 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v233 : Ref<Str> = v216 |> unbox<Ref<Str>>
                    let _run_target_args'_v221 = v233 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v237 : Ref<Str> = v216 |> unbox<Ref<Str>>
                    let _run_target_args'_v221 = v237 
                    #endif
#else
                    let v241 : Ref<Str> = v216 |> unbox<Ref<Str>>
                    let _run_target_args'_v221 = v241 
                    #endif
                    let v244 : Ref<Str> = _run_target_args'_v221 
                    (* run_target_args'
                    let v254 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v255 : string = "String::from($0)"
                    let v256 : std_string_String = Fable.Core.RustInterop.emitRustExpr v244 v255 
                    let _run_target_args'_v254 = v256 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v257 : string = "String::from($0)"
                    let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v244 v257 
                    let _run_target_args'_v254 = v258 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v259 : string = "String::from($0)"
                    let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v244 v259 
                    let _run_target_args'_v254 = v260 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v262 : std_string_String = v244 |> unbox<std_string_String>
                    let _run_target_args'_v254 = v262 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v266 : std_string_String = v244 |> unbox<std_string_String>
                    let _run_target_args'_v254 = v266 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v270 : std_string_String = v244 |> unbox<std_string_String>
                    let _run_target_args'_v254 = v270 
                    #endif
#else
                    let v274 : std_string_String = v244 |> unbox<std_string_String>
                    let _run_target_args'_v254 = v274 
                    #endif
                    let v277 : std_string_String = _run_target_args'_v254 
                    (* run_target_args'
                    let v287 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v288 : string = "std::path::PathBuf::from($0)"
                    let v289 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v277 v288 
                    let _run_target_args'_v287 = v289 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v290 : string = "std::path::PathBuf::from($0)"
                    let v291 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v277 v290 
                    let _run_target_args'_v287 = v291 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v292 : string = "std::path::PathBuf::from($0)"
                    let v293 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v277 v292 
                    let _run_target_args'_v287 = v293 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v295 : std_path_PathBuf = v277 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v287 = v295 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v299 : std_path_PathBuf = v277 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v287 = v299 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v303 : std_path_PathBuf = v277 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v287 = v303 
                    #endif
#else
                    let v307 : std_path_PathBuf = v277 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v287 = v307 
                    #endif
                    let v310 : std_path_PathBuf = _run_target_args'_v287 
                    (* run_target_args'
                    let v317 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v318 : string = "Ok($0)"
                    let v319 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v310 v318 
                    let _run_target_args'_v317 = v319 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v320 : string = "Ok($0)"
                    let v321 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v310 v320 
                    let _run_target_args'_v317 = v321 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v322 : string = "Ok($0)"
                    let v323 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v310 v322 
                    let _run_target_args'_v317 = v323 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v324 : Result<std_path_PathBuf, std_io_Error> = v310 |> Ok
                    let _run_target_args'_v317 = v324 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v325 : Result<std_path_PathBuf, std_io_Error> = v310 |> Ok
                    let _run_target_args'_v317 = v325 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v326 : Result<std_path_PathBuf, std_io_Error> = v310 |> Ok
                    let _run_target_args'_v317 = v326 
                    #endif
#else
                    let v327 : Result<std_path_PathBuf, std_io_Error> = v310 |> Ok
                    let _run_target_args'_v317 = v327 
                    #endif
                    let v328 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v317 
                    v328
            else
                let v385 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v386 : string = $"path: {v0} / error: {v93} / path': {v4} / name: {v5}"
                let v387 : string = v385 + v386 
                (* run_target_args'
                let v392 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v393 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v394 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v387 v393 
                let _run_target_args'_v392 = v394 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v395 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v396 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v387 v395 
                let _run_target_args'_v392 = v396 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v397 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v398 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v387 v397 
                let _run_target_args'_v392 = v398 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v400 : std_io_Error = v387 |> unbox<std_io_Error>
                let _run_target_args'_v392 = v400 
                #endif
#if FABLE_COMPILER_PYTHON
                let v404 : std_io_Error = v387 |> unbox<std_io_Error>
                let _run_target_args'_v392 = v404 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v408 : std_io_Error = v387 |> unbox<std_io_Error>
                let _run_target_args'_v392 = v408 
                #endif
#else
                let v412 : std_io_Error = v387 |> unbox<std_io_Error>
                let _run_target_args'_v392 = v412 
                #endif
                let v415 : std_io_Error = _run_target_args'_v392 
                (* run_target_args'
                let v422 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v423 : string = "Err($0)"
                let v424 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v415 v423 
                let _run_target_args'_v422 = v424 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v425 : string = "Err($0)"
                let v426 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v415 v425 
                let _run_target_args'_v422 = v426 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v427 : string = "Err($0)"
                let v428 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v415 v427 
                let _run_target_args'_v422 = v428 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v429 : Result<std_path_PathBuf, std_io_Error> = v415 |> Error
                let _run_target_args'_v422 = v429 
                #endif
#if FABLE_COMPILER_PYTHON
                let v430 : Result<std_path_PathBuf, std_io_Error> = v415 |> Error
                let _run_target_args'_v422 = v430 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v431 : Result<std_path_PathBuf, std_io_Error> = v415 |> Error
                let _run_target_args'_v422 = v431 
                #endif
#else
                let v432 : Result<std_path_PathBuf, std_io_Error> = v415 |> Error
                let _run_target_args'_v422 = v432 
                #endif
                let v433 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v422 
                v433
        | _ ->
            let v437 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v438 : string = $"path: {v0} / error: {v93} / path': {v4} / name: {v5}"
            let v439 : string = v437 + v438 
            (* run_target_args'
            let v444 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v445 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v446 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v439 v445 
            let _run_target_args'_v444 = v446 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v447 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v448 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v439 v447 
            let _run_target_args'_v444 = v448 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v449 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v450 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v439 v449 
            let _run_target_args'_v444 = v450 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v452 : std_io_Error = v439 |> unbox<std_io_Error>
            let _run_target_args'_v444 = v452 
            #endif
#if FABLE_COMPILER_PYTHON
            let v456 : std_io_Error = v439 |> unbox<std_io_Error>
            let _run_target_args'_v444 = v456 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v460 : std_io_Error = v439 |> unbox<std_io_Error>
            let _run_target_args'_v444 = v460 
            #endif
#else
            let v464 : std_io_Error = v439 |> unbox<std_io_Error>
            let _run_target_args'_v444 = v464 
            #endif
            let v467 : std_io_Error = _run_target_args'_v444 
            (* run_target_args'
            let v474 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v475 : string = "Err($0)"
            let v476 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v467 v475 
            let _run_target_args'_v474 = v476 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v477 : string = "Err($0)"
            let v478 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v467 v477 
            let _run_target_args'_v474 = v478 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v479 : string = "Err($0)"
            let v480 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v467 v479 
            let _run_target_args'_v474 = v480 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v481 : Result<std_path_PathBuf, std_io_Error> = v467 |> Error
            let _run_target_args'_v474 = v481 
            #endif
#if FABLE_COMPILER_PYTHON
            let v482 : Result<std_path_PathBuf, std_io_Error> = v467 |> Error
            let _run_target_args'_v474 = v482 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v483 : Result<std_path_PathBuf, std_io_Error> = v467 |> Error
            let _run_target_args'_v474 = v483 
            #endif
#else
            let v484 : Result<std_path_PathBuf, std_io_Error> = v467 |> Error
            let _run_target_args'_v474 = v484 
            #endif
            let v485 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v474 
            v485
and method56 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v42 : System.IO.FileAttributes = method53(v36)
    let v43 : System.IO.FileAttributes = method54()
    let v44 : bool = method55(v43, v42)
    if v44 then
        (* run_target_args'
        let v49 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v51 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v59 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v63 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v63 
        #endif
#if FABLE_COMPILER_PYTHON
        let v67 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v67 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v71 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v71 
        #endif
#else
        let v75 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v49 = v75 
        #endif
        let v78 : System_IO_FileInfo = _run_target_args'_v49 
        (* run_target_args'
        let v88 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v90 : string = null |> unbox<string>
        let _run_target_args'_v88 = v90 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v94 : string = null |> unbox<string>
        let _run_target_args'_v88 = v94 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v98 : string = null |> unbox<string>
        let _run_target_args'_v88 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v102 : string = null |> unbox<string>
        let _run_target_args'_v88 = v102 
        #endif
#if FABLE_COMPILER_PYTHON
        let v106 : string = null |> unbox<string>
        let _run_target_args'_v88 = v106 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v110 : string = null |> unbox<string>
        let _run_target_args'_v88 = v110 
        #endif
#else
        let v113 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v114 : string = v113 v78
        let _run_target_args'_v88 = v114 
        #endif
        let v115 : string = _run_target_args'_v88 
        let v122 : std_path_PathBuf = v115 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v126 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v127 : string = "Ok($0)"
        let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
        let _run_target_args'_v126 = v128 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v129 : string = "Ok($0)"
        let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
        let _run_target_args'_v126 = v130 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v131 : string = "Ok($0)"
        let v132 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v131 
        let _run_target_args'_v126 = v132 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v133 
        #endif
#if FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v134 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v135 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v135 
        #endif
#else
        let v136 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v136 
        #endif
        let v137 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v126 
        v137
    else
        let v140 : string = $"file_system.read_link / Fsharp / "
        let v141 : string = $"The file or directory is not a reparse point. / "
        let v142 : string = v140 + v141 
        let v143 : string = $"path: {v0} / result: {v44} / path': {v2} / n: {v1}"
        let v144 : string = v142 + v143 
        (* run_target_args'
        let v149 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v150 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v151 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v150 
        let _run_target_args'_v149 = v151 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v152 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v153 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v152 
        let _run_target_args'_v149 = v153 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v154 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v155 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v154 
        let _run_target_args'_v149 = v155 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v157 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v157 
        #endif
#if FABLE_COMPILER_PYTHON
        let v161 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v161 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v165 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v165 
        #endif
#else
        let v169 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v169 
        #endif
        let v172 : std_io_Error = _run_target_args'_v149 
        let v178 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method57(v0, v178, v1, v172, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method56(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method58 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method50(v0)
    let v5 : string option = method38(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method13()
    let v35 : Mut3 = {l0 = v34} : Mut3
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v3}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v3}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v3}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v3}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v35, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v92 : string = v35.l0
    let v93 : bool = v2 >= 11uy
    if v93 then
        let v94 : string = $"file_system.read_link / "
        let v95 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v96 : string = v94 + v95 
        (* run_target_args'
        let v101 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v103 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v96 v102 
        let _run_target_args'_v101 = v103 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v104 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v105 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v96 v104 
        let _run_target_args'_v101 = v105 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v106 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v107 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v96 v106 
        let _run_target_args'_v101 = v107 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v109 : std_io_Error = v96 |> unbox<std_io_Error>
        let _run_target_args'_v101 = v109 
        #endif
#if FABLE_COMPILER_PYTHON
        let v113 : std_io_Error = v96 |> unbox<std_io_Error>
        let _run_target_args'_v101 = v113 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v117 : std_io_Error = v96 |> unbox<std_io_Error>
        let _run_target_args'_v101 = v117 
        #endif
#else
        let v121 : std_io_Error = v96 |> unbox<std_io_Error>
        let _run_target_args'_v101 = v121 
        #endif
        let v124 : std_io_Error = _run_target_args'_v101 
        (* run_target_args'
        let v131 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v132 : string = "Err($0)"
        let v133 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v124 v132 
        let _run_target_args'_v131 = v133 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v134 : string = "Err($0)"
        let v135 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v124 v134 
        let _run_target_args'_v131 = v135 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v136 : string = "Err($0)"
        let v137 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v124 v136 
        let _run_target_args'_v131 = v137 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v138 : Result<std_path_PathBuf, std_io_Error> = v124 |> Error
        let _run_target_args'_v131 = v138 
        #endif
#if FABLE_COMPILER_PYTHON
        let v139 : Result<std_path_PathBuf, std_io_Error> = v124 |> Error
        let _run_target_args'_v131 = v139 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v140 : Result<std_path_PathBuf, std_io_Error> = v124 |> Error
        let _run_target_args'_v131 = v140 
        #endif
#else
        let v141 : Result<std_path_PathBuf, std_io_Error> = v124 |> Error
        let _run_target_args'_v131 = v141 
        #endif
        let v142 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v131 
        v142
    else
        match v30 with
        | US5_0(v145) -> (* Some *)
            let v148 : string = ""
            let v149 : bool = v0 <> v148 
            if v149 then
                let v152 : uint8 = v2 + 1uy
                let v153 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v152
                let v154 : Result<std_path_PathBuf, std_io_Error> = v153 v145
                let v155 : (std_io_Error -> string) = method45()
                (* run_target_args'
                let v157 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v158 : string = "$0.map_err(|x| $1(x))"
                let v159 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v154, v155) v158 
                let _run_target_args'_v157 = v159 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v160 : string = "$0.map_err(|x| $1(x))"
                let v161 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v154, v155) v160 
                let _run_target_args'_v157 = v161 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v162 : string = "$0.map_err(|x| $1(x))"
                let v163 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v154, v155) v162 
                let _run_target_args'_v157 = v163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v164 : Result<std_path_PathBuf, string> = match v154 with Ok x -> Ok x | Error x -> Error (v155 x)
                let _run_target_args'_v157 = v164 
                #endif
#if FABLE_COMPILER_PYTHON
                let v165 : Result<std_path_PathBuf, string> = match v154 with Ok x -> Ok x | Error x -> Error (v155 x)
                let _run_target_args'_v157 = v165 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v166 : Result<std_path_PathBuf, string> = match v154 with Ok x -> Ok x | Error x -> Error (v155 x)
                let _run_target_args'_v157 = v166 
                #endif
#else
                let v167 : Result<std_path_PathBuf, string> = match v154 with Ok x -> Ok x | Error x -> Error (v155 x)
                let _run_target_args'_v157 = v167 
                #endif
                let v168 : Result<std_path_PathBuf, string> = _run_target_args'_v157 
                let v171 : (std_path_PathBuf -> US14) = method46()
                let v172 : (string -> US14) = method47()
                let v174 : US14 = match v168 with Ok x -> v171 x | Error x -> v172 x
                match v174 with
                | US14_1(v330) -> (* Error *)
                    let v331 : string = $"file_system.read_link / "
                    let v332 : string = $"error': {v330} / error: {v92} / name: {v4}"
                    let v333 : string = v331 + v332 
                    (* run_target_args'
                    let v338 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v339 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v340 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v333 v339 
                    let _run_target_args'_v338 = v340 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v341 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v342 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v333 v341 
                    let _run_target_args'_v338 = v342 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v343 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v344 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v333 v343 
                    let _run_target_args'_v338 = v344 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v346 : std_io_Error = v333 |> unbox<std_io_Error>
                    let _run_target_args'_v338 = v346 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v350 : std_io_Error = v333 |> unbox<std_io_Error>
                    let _run_target_args'_v338 = v350 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v354 : std_io_Error = v333 |> unbox<std_io_Error>
                    let _run_target_args'_v338 = v354 
                    #endif
#else
                    let v358 : std_io_Error = v333 |> unbox<std_io_Error>
                    let _run_target_args'_v338 = v358 
                    #endif
                    let v361 : std_io_Error = _run_target_args'_v338 
                    (* run_target_args'
                    let v368 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v369 : string = "Err($0)"
                    let v370 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v361 v369 
                    let _run_target_args'_v368 = v370 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v371 : string = "Err($0)"
                    let v372 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v361 v371 
                    let _run_target_args'_v368 = v372 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v373 : string = "Err($0)"
                    let v374 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v361 v373 
                    let _run_target_args'_v368 = v374 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v375 : Result<std_path_PathBuf, std_io_Error> = v361 |> Error
                    let _run_target_args'_v368 = v375 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v376 : Result<std_path_PathBuf, std_io_Error> = v361 |> Error
                    let _run_target_args'_v368 = v376 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v377 : Result<std_path_PathBuf, std_io_Error> = v361 |> Error
                    let _run_target_args'_v368 = v377 
                    #endif
#else
                    let v378 : Result<std_path_PathBuf, std_io_Error> = v361 |> Error
                    let _run_target_args'_v368 = v378 
                    #endif
                    let v379 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v368 
                    v379
                | US14_0(v177) -> (* Ok *)
                    (* run_target_args'
                    let v182 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v183 : string = "$0.display()"
                    let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v177 v183 
                    let _run_target_args'_v182 = v184 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v185 : string = "$0.display()"
                    let v186 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v177 v185 
                    let _run_target_args'_v182 = v186 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v187 : string = "$0.display()"
                    let v188 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v177 v187 
                    let _run_target_args'_v182 = v188 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : std_path_Display = v177 |> unbox<std_path_Display>
                    let _run_target_args'_v182 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v194 : std_path_Display = v177 |> unbox<std_path_Display>
                    let _run_target_args'_v182 = v194 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v198 : std_path_Display = v177 |> unbox<std_path_Display>
                    let _run_target_args'_v182 = v198 
                    #endif
#else
                    let v202 : std_path_Display = v177 |> unbox<std_path_Display>
                    let _run_target_args'_v182 = v202 
                    #endif
                    let v205 : std_path_Display = _run_target_args'_v182 
                    let v212 : string = v205 |> string 
                    let v215 : string = method33(v212, v4)
                    (* run_target_args'
                    let v220 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v221 : string = "&*$0"
                    let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v221 
                    let _run_target_args'_v220 = v222 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v223 : string = "&*$0"
                    let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v223 
                    let _run_target_args'_v220 = v224 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v225 : string = "&*$0"
                    let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v225 
                    let _run_target_args'_v220 = v226 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v228 : Ref<Str> = v215 |> unbox<Ref<Str>>
                    let _run_target_args'_v220 = v228 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v232 : Ref<Str> = v215 |> unbox<Ref<Str>>
                    let _run_target_args'_v220 = v232 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v236 : Ref<Str> = v215 |> unbox<Ref<Str>>
                    let _run_target_args'_v220 = v236 
                    #endif
#else
                    let v240 : Ref<Str> = v215 |> unbox<Ref<Str>>
                    let _run_target_args'_v220 = v240 
                    #endif
                    let v243 : Ref<Str> = _run_target_args'_v220 
                    (* run_target_args'
                    let v253 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "String::from($0)"
                    let v255 : std_string_String = Fable.Core.RustInterop.emitRustExpr v243 v254 
                    let _run_target_args'_v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "String::from($0)"
                    let v257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v243 v256 
                    let _run_target_args'_v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "String::from($0)"
                    let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v243 v258 
                    let _run_target_args'_v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v261 : std_string_String = v243 |> unbox<std_string_String>
                    let _run_target_args'_v253 = v261 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v265 : std_string_String = v243 |> unbox<std_string_String>
                    let _run_target_args'_v253 = v265 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v269 : std_string_String = v243 |> unbox<std_string_String>
                    let _run_target_args'_v253 = v269 
                    #endif
#else
                    let v273 : std_string_String = v243 |> unbox<std_string_String>
                    let _run_target_args'_v253 = v273 
                    #endif
                    let v276 : std_string_String = _run_target_args'_v253 
                    (* run_target_args'
                    let v286 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v287 : string = "std::path::PathBuf::from($0)"
                    let v288 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v276 v287 
                    let _run_target_args'_v286 = v288 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v289 : string = "std::path::PathBuf::from($0)"
                    let v290 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v276 v289 
                    let _run_target_args'_v286 = v290 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v291 : string = "std::path::PathBuf::from($0)"
                    let v292 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v276 v291 
                    let _run_target_args'_v286 = v292 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v294 : std_path_PathBuf = v276 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v286 = v294 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v298 : std_path_PathBuf = v276 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v286 = v298 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v302 : std_path_PathBuf = v276 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v286 = v302 
                    #endif
#else
                    let v306 : std_path_PathBuf = v276 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v286 = v306 
                    #endif
                    let v309 : std_path_PathBuf = _run_target_args'_v286 
                    (* run_target_args'
                    let v316 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v317 : string = "Ok($0)"
                    let v318 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v309 v317 
                    let _run_target_args'_v316 = v318 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v319 : string = "Ok($0)"
                    let v320 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v309 v319 
                    let _run_target_args'_v316 = v320 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v321 : string = "Ok($0)"
                    let v322 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v309 v321 
                    let _run_target_args'_v316 = v322 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v323 : Result<std_path_PathBuf, std_io_Error> = v309 |> Ok
                    let _run_target_args'_v316 = v323 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v324 : Result<std_path_PathBuf, std_io_Error> = v309 |> Ok
                    let _run_target_args'_v316 = v324 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v325 : Result<std_path_PathBuf, std_io_Error> = v309 |> Ok
                    let _run_target_args'_v316 = v325 
                    #endif
#else
                    let v326 : Result<std_path_PathBuf, std_io_Error> = v309 |> Ok
                    let _run_target_args'_v316 = v326 
                    #endif
                    let v327 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v316 
                    v327
            else
                let v384 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v385 : string = $"path: {v0} / error: {v92} / path': {v0} / name: {v4}"
                let v386 : string = v384 + v385 
                (* run_target_args'
                let v391 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v392 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v393 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v386 v392 
                let _run_target_args'_v391 = v393 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v394 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v395 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v386 v394 
                let _run_target_args'_v391 = v395 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v396 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v397 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v386 v396 
                let _run_target_args'_v391 = v397 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v399 : std_io_Error = v386 |> unbox<std_io_Error>
                let _run_target_args'_v391 = v399 
                #endif
#if FABLE_COMPILER_PYTHON
                let v403 : std_io_Error = v386 |> unbox<std_io_Error>
                let _run_target_args'_v391 = v403 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v407 : std_io_Error = v386 |> unbox<std_io_Error>
                let _run_target_args'_v391 = v407 
                #endif
#else
                let v411 : std_io_Error = v386 |> unbox<std_io_Error>
                let _run_target_args'_v391 = v411 
                #endif
                let v414 : std_io_Error = _run_target_args'_v391 
                (* run_target_args'
                let v421 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v422 : string = "Err($0)"
                let v423 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v414 v422 
                let _run_target_args'_v421 = v423 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v424 : string = "Err($0)"
                let v425 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v414 v424 
                let _run_target_args'_v421 = v425 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v426 : string = "Err($0)"
                let v427 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v414 v426 
                let _run_target_args'_v421 = v427 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v428 : Result<std_path_PathBuf, std_io_Error> = v414 |> Error
                let _run_target_args'_v421 = v428 
                #endif
#if FABLE_COMPILER_PYTHON
                let v429 : Result<std_path_PathBuf, std_io_Error> = v414 |> Error
                let _run_target_args'_v421 = v429 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v430 : Result<std_path_PathBuf, std_io_Error> = v414 |> Error
                let _run_target_args'_v421 = v430 
                #endif
#else
                let v431 : Result<std_path_PathBuf, std_io_Error> = v414 |> Error
                let _run_target_args'_v421 = v431 
                #endif
                let v432 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v421 
                v432
        | _ ->
            let v436 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v437 : string = $"path: {v0} / error: {v92} / path': {v0} / name: {v4}"
            let v438 : string = v436 + v437 
            (* run_target_args'
            let v443 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v444 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v445 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v438 v444 
            let _run_target_args'_v443 = v445 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v446 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v447 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v438 v446 
            let _run_target_args'_v443 = v447 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v448 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v449 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v438 v448 
            let _run_target_args'_v443 = v449 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v451 : std_io_Error = v438 |> unbox<std_io_Error>
            let _run_target_args'_v443 = v451 
            #endif
#if FABLE_COMPILER_PYTHON
            let v455 : std_io_Error = v438 |> unbox<std_io_Error>
            let _run_target_args'_v443 = v455 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v459 : std_io_Error = v438 |> unbox<std_io_Error>
            let _run_target_args'_v443 = v459 
            #endif
#else
            let v463 : std_io_Error = v438 |> unbox<std_io_Error>
            let _run_target_args'_v443 = v463 
            #endif
            let v466 : std_io_Error = _run_target_args'_v443 
            (* run_target_args'
            let v473 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v474 : string = "Err($0)"
            let v475 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v466 v474 
            let _run_target_args'_v473 = v475 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v476 : string = "Err($0)"
            let v477 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v466 v476 
            let _run_target_args'_v473 = v477 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v478 : string = "Err($0)"
            let v479 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v466 v478 
            let _run_target_args'_v473 = v479 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v480 : Result<std_path_PathBuf, std_io_Error> = v466 |> Error
            let _run_target_args'_v473 = v480 
            #endif
#if FABLE_COMPILER_PYTHON
            let v481 : Result<std_path_PathBuf, std_io_Error> = v466 |> Error
            let _run_target_args'_v473 = v481 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v482 : Result<std_path_PathBuf, std_io_Error> = v466 |> Error
            let _run_target_args'_v473 = v482 
            #endif
#else
            let v483 : Result<std_path_PathBuf, std_io_Error> = v466 |> Error
            let _run_target_args'_v473 = v483 
            #endif
            let v484 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v473 
            v484
and method52 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v41 : System.IO.FileAttributes = method53(v35)
    let v42 : System.IO.FileAttributes = method54()
    let v43 : bool = method55(v42, v41)
    if v43 then
        (* run_target_args'
        let v48 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v50 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v62 
        #endif
#if FABLE_COMPILER_PYTHON
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v66 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v70 
        #endif
#else
        let v74 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v48 = v74 
        #endif
        let v77 : System_IO_FileInfo = _run_target_args'_v48 
        (* run_target_args'
        let v87 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v89 : string = null |> unbox<string>
        let _run_target_args'_v87 = v89 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v93 : string = null |> unbox<string>
        let _run_target_args'_v87 = v93 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = null |> unbox<string>
        let _run_target_args'_v87 = v97 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v101 : string = null |> unbox<string>
        let _run_target_args'_v87 = v101 
        #endif
#if FABLE_COMPILER_PYTHON
        let v105 : string = null |> unbox<string>
        let _run_target_args'_v87 = v105 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v109 : string = null |> unbox<string>
        let _run_target_args'_v87 = v109 
        #endif
#else
        let v112 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v113 : string = v112 v77
        let _run_target_args'_v87 = v113 
        #endif
        let v114 : string = _run_target_args'_v87 
        let v121 : std_path_PathBuf = v114 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v125 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v126 : string = "Ok($0)"
        let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
        let _run_target_args'_v125 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "Ok($0)"
        let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
        let _run_target_args'_v125 = v129 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v130 : string = "Ok($0)"
        let v131 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v130 
        let _run_target_args'_v125 = v131 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v132 
        #endif
#if FABLE_COMPILER_PYTHON
        let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v133 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v134 
        #endif
#else
        let v135 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v135 
        #endif
        let v136 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v125 
        v136
    else
        let v139 : string = $"file_system.read_link / Fsharp / "
        let v140 : string = $"The file or directory is not a reparse point. / "
        let v141 : string = v139 + v140 
        let v142 : string = $"path: {v0} / result: {v43} / path': {v0} / n: {v1}"
        let v143 : string = v141 + v142 
        (* run_target_args'
        let v148 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v149 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v150 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v149 
        let _run_target_args'_v148 = v150 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v151 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v152 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v151 
        let _run_target_args'_v148 = v152 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v153 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v154 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v153 
        let _run_target_args'_v148 = v154 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v156 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v156 
        #endif
#if FABLE_COMPILER_PYTHON
        let v160 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v160 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v164 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v164 
        #endif
#else
        let v168 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v168 
        #endif
        let v171 : std_io_Error = _run_target_args'_v148 
        let v177 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method58(v0, v177, v1, v171)
and method43 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method36(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method44(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method36(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method44(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method36(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method44(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method59 () : (std_path_PathBuf -> US15) =
    closure25()
and method61 (v0 : string) : string =
    v0
and method62 () : string =
    let v0 : string = ""
    v0
and method60 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method61(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method62()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method62()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method62()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method62()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method62()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method42 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method43(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US15) = method59()
        let v22 : US15 option = v16 |> Option.map v21 
        let v42 : US15 = US15_1
        let v43 : US15 = v22 |> Option.defaultValue v42 
        let v86 : string =
            match v43 with
            | US15_1 -> (* None *)
                v0
            | US15_0(v47) -> (* Some *)
                (* run_target_args'
                let v52 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v53 
                let _run_target_args'_v52 = v54 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v55 
                let _run_target_args'_v52 = v56 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57 : string = "$0.display()"
                let v58 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v57 
                let _run_target_args'_v52 = v58 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v60 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v60 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v64 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v68 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v68 
                #endif
#else
                let v72 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v72 
                #endif
                let v75 : std_path_Display = _run_target_args'_v52 
                let v82 : string = v75 |> string 
                v82
        let v87 : bool = v86 = ""
        let v88 : string =
            if v87 then
                v0
            else
                v86
        let v89 : string = "^\\\\\\\\\\?\\\\"
        let v90 : string = ""
        let v91 : string = method60(v89, v90, v88)
        let v92 : int32 = v91.Length
        let v93 : bool = v92 < 2
        if v93 then
            v0
        else
            let v94 : string = $"{v91.[0] |> string |> _.ToLower()}{v91.[1..]}"
            let v95 : string = "\\"
            let v96 : string = "/"
            let v97 : string = v94.Replace (v95, v96)
            v97
and method32 (v0 : string) : US5 =
    let v1 : US12 = US12_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method33(v2, v3)
    let v5 : US13 = method34(v1, v4, v0)
    match v5 with
    | US13_1(v9) -> (* Error *)
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure17(v0, v9)
        let v72 : unit = (fun () -> v71 (); v70) ()
        US5_1
    | US13_0(v6) -> (* Ok *)
        let v7 : string = method42(v6)
        US5_0(v7)
and method65 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method66 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method64 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : bool = v106 = false
    let v297 : string =
        if v107 then
            let v108 : string = method31()
            let v109 : string = method33(v108, v0)
            let v110 : string = method42(v109)
            let v118 : string = "/"
            let v119 : (string []) = v110.Split v118 
            let v122 : (string []) = [||]
            let v123 : int32 = v119.Length
            let v124 : Mut6 = {l0 = 0; l1 = 0; l2 = v122} : Mut6
            while method65(v123, v124) do
                let v126 : int32 = v124.l0
                let v127 : int32 =  -v126
                let v128 : int32 = v127 + v123
                let v129 : int32 = v128 - 1
                let struct (v130 : int32, v131 : (string [])) = v124.l1, v124.l2
                let v132 : string = v119.[int v129]
                let v133 : bool = ".." = v132
                let struct (v179 : int32, v180 : (string [])) =
                    if v133 then
                        let v134 : int32 = v130 + 1
                        struct (v134, v131)
                    else
                        let v135 : bool = "." = v132
                        if v135 then
                            struct (v130, v131)
                        else
                            let v136 : bool = 0 = v130
                            if v136 then
                                let v139 : string = ":"
                                let v140 : bool = v132.EndsWith (v139, false, null)
                                if v140 then
                                    let v143 : string = $"{v108.[0]}:"
                                    let v144 : (string []) = [|v143|]
                                    let v145 : int32 = v144.Length
                                    let v146 : int32 = v131.Length
                                    let v147 : int32 = v145 + v146
                                    let v148 : (string []) = Array.zeroCreate<string> (v147)
                                    let v149 : Mut5 = {l0 = 0} : Mut5
                                    while method29(v147, v149) do
                                        let v151 : int32 = v149.l0
                                        let v152 : bool = v151 < v145
                                        let v156 : string =
                                            if v152 then
                                                let v153 : string = v144.[int v151]
                                                v153
                                            else
                                                let v154 : int32 = v151 - v145
                                                let v155 : string = v131.[int v154]
                                                v155
                                        v148.[int v151] <- v156
                                        let v157 : int32 = v151 + 1
                                        v149.l0 <- v157
                                        ()
                                    struct (0, v148)
                                else
                                    let v158 : (string []) = [|v132|]
                                    let v159 : int32 = v158.Length
                                    let v160 : int32 = v131.Length
                                    let v161 : int32 = v159 + v160
                                    let v162 : (string []) = Array.zeroCreate<string> (v161)
                                    let v163 : Mut5 = {l0 = 0} : Mut5
                                    while method29(v161, v163) do
                                        let v165 : int32 = v163.l0
                                        let v166 : bool = v165 < v159
                                        let v170 : string =
                                            if v166 then
                                                let v167 : string = v158.[int v165]
                                                v167
                                            else
                                                let v168 : int32 = v165 - v159
                                                let v169 : string = v131.[int v168]
                                                v169
                                        v162.[int v165] <- v170
                                        let v171 : int32 = v165 + 1
                                        v163.l0 <- v171
                                        ()
                                    struct (0, v162)
                            else
                                let v174 : int32 = v130 - 1
                                struct (v174, v131)
                let v181 : int32 = v126 + 1
                v124.l0 <- v181
                v124.l1 <- v179
                v124.l2 <- v180
                ()
            let struct (v182 : int32, v183 : (string [])) = v124.l1, v124.l2
            let v188 : unit = ()
            let _let'_v188 =
                seq {
                    for i = 0 to v183.Length - 1 do yield v183.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v191 : string seq = _let'_v188 
            let v197 : char = method66()
            let v199 : (char -> string) = _.ToString()
            let v200 : string = v199 v197
            let v204 : bool = v200 = "\n"
            let v206 : string =
                if v204 then
                    method28(v200)
                else
                    v200
            let v207 : (string -> (string seq -> string)) = String.concat
            let v208 : (string seq -> string) = v207 v206
            v208 v191
        else
            let v212 : string = "std::fs::canonicalize(&*$0)"
            let v213 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v212 
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "$0.unwrap()"
            let v217 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "$0.unwrap()"
            let v219 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "$0.unwrap()"
            let v221 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v223 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v223 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v224 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v224 
            #endif
#else
            let v225 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v225 
            #endif
            let v226 : std_path_PathBuf = _run_target_args'_v215 
            (* run_target_args'
            let v233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : string = "$0.display()"
            let v235 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v234 
            let _run_target_args'_v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v236 : string = "$0.display()"
            let v237 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v236 
            let _run_target_args'_v233 = v237 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v238 : string = "$0.display()"
            let v239 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v238 
            let _run_target_args'_v233 = v239 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v241 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v241 
            #endif
#if FABLE_COMPILER_PYTHON
            let v245 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v245 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v249 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v249 
            #endif
#else
            let v253 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v253 
            #endif
            let v256 : std_path_Display = _run_target_args'_v233 
            (* run_target_args'
            let v266 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v267 : string = "format!(\"{}\", $0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v267 
            let _run_target_args'_v266 = v268 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v269 : string = "format!(\"{}\", $0)"
            let v270 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v269 
            let _run_target_args'_v266 = v270 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v271 : string = "format!(\"{}\", $0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v271 
            let _run_target_args'_v266 = v272 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v274 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v274 
            #endif
#if FABLE_COMPILER_PYTHON
            let v278 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v278 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v282 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v282 
            #endif
#else
            let v286 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v286 
            #endif
            let v289 : std_string_String = _run_target_args'_v266 
            let v295 : string = "fable_library_rust::String_::fromString($0)"
            let v296 : string = Fable.Core.RustInterop.emitRustExpr v289 v295 
            v296
    let _run_target_args'_v5 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v299 : string = null |> unbox<string>
    let _run_target_args'_v5 = v299 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v303 : string = null |> unbox<string>
    let _run_target_args'_v5 = v303 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v307 : string = null |> unbox<string>
    let _run_target_args'_v5 = v307 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string = null |> unbox<string>
    let _run_target_args'_v5 = v311 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v315 : string = null |> unbox<string>
    let _run_target_args'_v5 = v315 
    #endif
#else
    let v318 : (string -> string) = System.IO.Path.GetFullPath
    let v319 : string = v318 v0
    let _run_target_args'_v5 = v319 
    #endif
    let v320 : string = _run_target_args'_v5 
    v320
and method63 (v0 : string) : string =
    let v1 : string = method64(v0)
    method42(v1)
and method67 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method68 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method69 () : string =
    let v0 : string = "\n"
    v0
and method71 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method35(v0)
    let v8 : bool = v7 = false
    let v113 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v65 : Vec<uint8> = method25(v59)
            let v66 : string = "std::string::String::from_utf8($0)"
            let v67 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v65 v66 
            (* run_target_args'
            let v69 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v70 : string = "$0.unwrap()"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v70 
            let _run_target_args'_v69 = v71 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v72 
            let _run_target_args'_v69 = v73 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v74 : string = "$0.unwrap()"
            let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v74 
            let _run_target_args'_v69 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v76 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v76 
            #endif
#if FABLE_COMPILER_PYTHON
            let v77 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v77 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v78 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v78 
            #endif
#else
            let v79 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v79 
            #endif
            let v80 : std_string_String = _run_target_args'_v69 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v80 v83 
            let _run_target_args'_v13 = v84 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v86 : string = null |> unbox<string>
            let _run_target_args'_v13 = v86 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v90 : string = null |> unbox<string>
            let _run_target_args'_v13 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v94 : string = null |> unbox<string>
            let _run_target_args'_v13 = v94 
            #endif
#if FABLE_COMPILER_PYTHON
            let v98 : string = null |> unbox<string>
            let _run_target_args'_v13 = v98 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v102 : string = null |> unbox<string>
            let _run_target_args'_v13 = v102 
            #endif
#else
            let v105 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v105 
            #endif
            let v106 : string = _run_target_args'_v13 
            let v112 : bool = v1 = v106
            v112
    let _run_target_args'_v6 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v119 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v131 
    #endif
#else
    let v135 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v135 
    #endif
    let v138 : bool = _run_target_args'_v6 
    v138
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method73 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US16 =
    US16_0
and method74 () : (unit -> US16) =
    closure27()
and closure28 () (v0 : std_string_String) : US16 =
    US16_1(v0)
and method75 () : (std_string_String -> US16) =
    closure28()
and method76 () : string =
    
    
    
    
    
    let v2 : string = "Critical"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_bright_red"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v83 : string = "inline_colorization::color_reset"
    let v84 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v84) v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v47 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "inline_colorization::color_bright_red"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    (* run_target_args'
    let v95 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "&*$0"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v96 
    let _run_target_args'_v95 = v97 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v98 : string = "&*$0"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v98 
    let _run_target_args'_v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v100 
    let _run_target_args'_v95 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v107 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v111 
    #endif
#else
    let v115 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v95 
    let v124 : string = "inline_colorization::color_reset"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v124 
    let v126 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v90, v118, v125) v126 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let _run_target_args'_v47 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "inline_colorization::color_bright_red"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    (* run_target_args'
    let v136 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v137 : string = "&*$0"
    let v138 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v137 
    let _run_target_args'_v136 = v138 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : string = "&*$0"
    let v140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v139 
    let _run_target_args'_v136 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = "&*$0"
    let v142 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v141 
    let _run_target_args'_v136 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v152 
    #endif
#else
    let v156 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v156 
    #endif
    let v159 : Ref<Str> = _run_target_args'_v136 
    let v165 : string = "inline_colorization::color_reset"
    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v131, v159, v166) v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _run_target_args'_v47 = v170 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v172 : string = "\u001b[91m"
    let v176 : string = method14()
    let v180 : string = v172 + v30 
    let v184 : string = v180 + v176 
    let _run_target_args'_v47 = v184 
    #endif
#if FABLE_COMPILER_PYTHON
    let v188 : string = "\u001b[91m"
    let v192 : string = method14()
    let v196 : string = v188 + v30 
    let v200 : string = v196 + v192 
    let _run_target_args'_v47 = v200 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : string = "\u001b[91m"
    let v208 : string = method14()
    let v212 : string = v204 + v30 
    let v216 : string = v212 + v208 
    let _run_target_args'_v47 = v216 
    #endif
#else
    let v220 : string = "\u001b[91m"
    let v224 : string = method14()
    let v228 : string = v220 + v30 
    let v232 : string = v228 + v224 
    let _run_target_args'_v47 = v232 
    #endif
    let v235 : string = _run_target_args'_v47 
    v235
and method77 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "dir"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "error"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    (* run_target_args'
    let v145 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v146 : string = "format!(\"{:#?}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v146 
    let v148 : string = "fable_library_rust::String_::fromString($0)"
    let v149 : string = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let _run_target_args'_v145 = v149 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v150 : string = "format!(\"{:#?}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v150 
    let v152 : string = "fable_library_rust::String_::fromString($0)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let _run_target_args'_v145 = v153 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v154 : string = "format!(\"{:#?}\", $0)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v145 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = $"%A{v9}"
    let _run_target_args'_v145 = v159 
    #endif
#if FABLE_COMPILER_PYTHON
    let v163 : string = $"%A{v9}"
    let _run_target_args'_v145 = v163 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v167 : string = $"%A{v9}"
    let _run_target_args'_v145 = v167 
    #endif
#else
    let v171 : string = $"%A{v9}"
    let _run_target_args'_v145 = v171 
    #endif
    let v174 : string = _run_target_args'_v145 
    let v181 : string = $"{v174}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v11, v181)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v11, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v216 : string = v11.l0
    let v217 : int64 = v0.l0
    let v220 : string = " "
    let v221 : string = v6 + v220 
    let v225 : string = v221 + v7 
    let v230 : string = " #"
    let v231 : string = v225 + v230 
    let v235 : (int64 -> string) = _.ToString()
    let v236 : string = v235 v217
    let v240 : string = v231 + v236 
    let v244 : string = v240 + v220 
    let v249 : string = "file_system.create_dir"
    let v250 : string = v244 + v249 
    let v255 : string = " / "
    let v256 : string = v250 + v255 
    let v260 : string = v256 + v216 
    method16(v260)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method77(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and method78 () : string =
    
    
    
    
    
    let v2 : string = "Verbose"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13()
    let v9 : Mut3 = {l0 = v8} : Mut3
    let v14 : string = $"{v7}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v9, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v30 : string = v9.l0
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "inline_colorization::color_bright_black"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
#else
    let v74 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v74 
    #endif
    let v77 : Ref<Str> = _run_target_args'_v54 
    let v83 : string = "inline_colorization::color_reset"
    let v84 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v49, v77, v84) v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v47 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "inline_colorization::color_bright_black"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    (* run_target_args'
    let v95 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "&*$0"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v96 
    let _run_target_args'_v95 = v97 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v98 : string = "&*$0"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v98 
    let _run_target_args'_v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v100 
    let _run_target_args'_v95 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v107 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v111 
    #endif
#else
    let v115 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v95 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v95 
    let v124 : string = "inline_colorization::color_reset"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v124 
    let v126 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v90, v118, v125) v126 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let _run_target_args'_v47 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "inline_colorization::color_bright_black"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    (* run_target_args'
    let v136 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v137 : string = "&*$0"
    let v138 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v137 
    let _run_target_args'_v136 = v138 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : string = "&*$0"
    let v140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v139 
    let _run_target_args'_v136 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = "&*$0"
    let v142 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v141 
    let _run_target_args'_v136 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v152 
    #endif
#else
    let v156 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _run_target_args'_v136 = v156 
    #endif
    let v159 : Ref<Str> = _run_target_args'_v136 
    let v165 : string = "inline_colorization::color_reset"
    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v131, v159, v166) v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _run_target_args'_v47 = v170 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v172 : string = "\u001b[90m"
    let v176 : string = method14()
    let v180 : string = v172 + v30 
    let v184 : string = v180 + v176 
    let _run_target_args'_v47 = v184 
    #endif
#if FABLE_COMPILER_PYTHON
    let v188 : string = "\u001b[90m"
    let v192 : string = method14()
    let v196 : string = v188 + v30 
    let v200 : string = v196 + v192 
    let _run_target_args'_v47 = v200 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : string = "\u001b[90m"
    let v208 : string = method14()
    let v212 : string = v204 + v30 
    let v216 : string = v212 + v208 
    let _run_target_args'_v47 = v216 
    #endif
#else
    let v220 : string = "\u001b[90m"
    let v224 : string = method14()
    let v228 : string = v220 + v30 
    let v232 : string = v228 + v224 
    let _run_target_args'_v47 = v232 
    #endif
    let v235 : string = _run_target_args'_v47 
    v235
and method79 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "dir"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "file_system.create_dir"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method78()
        let v60 : string = method79(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method81 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method36(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method81(v1, v0)
and method80 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method82 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method83 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method84 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "dir"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "result"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v9}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v11, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v177 : string = v11.l0
    let v178 : int64 = v0.l0
    let v181 : string = " "
    let v182 : string = v6 + v181 
    let v186 : string = v182 + v7 
    let v191 : string = " #"
    let v192 : string = v186 + v191 
    let v196 : (int64 -> string) = _.ToString()
    let v197 : string = v196 v178
    let v201 : string = v192 + v197 
    let v205 : string = v201 + v181 
    let v210 : string = "file_system.create_dir"
    let v211 : string = v205 + v210 
    let v216 : string = " / "
    let v217 : string = v211 + v216 
    let v221 : string = v217 + v177 
    method16(v221)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : string = method84(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and method89 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "ex"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v8}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "path"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v9}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v11, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v177 : string = v11.l0
    let v178 : int64 = v0.l0
    let v181 : string = " "
    let v182 : string = v6 + v181 
    let v186 : string = v182 + v7 
    let v191 : string = " #"
    let v192 : string = v186 + v191 
    let v196 : (int64 -> string) = _.ToString()
    let v197 : string = v196 v178
    let v201 : string = v192 + v197 
    let v205 : string = v201 + v181 
    let v210 : string = "file_system.delete_directory_async"
    let v211 : string = v205 + v210 
    let v216 : string = " / "
    let v217 : string = v211 + v216 
    let v221 : string = v217 + v177 
    method16(v221)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        (* run_target_args'
        let v65 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v67 : string = $"%A{v1}"
        let _run_target_args'_v65 = v67 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = $"%A{v1}"
        let _run_target_args'_v65 = v71 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v75 : string = $"%A{v1}"
        let _run_target_args'_v65 = v75 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v79 : string = $"%A{v1}"
        let _run_target_args'_v65 = v79 
        #endif
#if FABLE_COMPILER_PYTHON
        let v83 : string = $"%A{v1}"
        let _run_target_args'_v65 = v83 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v87 : string = $"%A{v1}"
        let _run_target_args'_v65 = v87 
        #endif
#else
        let v90 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v65 = v90 
        #endif
        let v91 : string = _run_target_args'_v65 
        let v97 : string = method50(v0)
        let v98 : string = method89(v41, v42, v43, v44, v45, v46, v59, v60, v91, v97)
        method17(v98)
and method88 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v8851 : bool = true
                method81(v8851, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v9077 : exn = ex
                let v9078 : int64 = v1 % 100L
                let v9079 : bool = v9078 = 0L
                if v9079 then
                    let v9177 : unit = ()
                    let v9178 : (unit -> unit) = closure34(v0, v9077)
                    let v9179 : unit = (fun () -> v9178 (); v9177) ()
                    ()
                (* run_target_args'
                let v9281 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9282 : (int32 -> Async<unit>) = Async.Sleep
                let v9283 : Async<unit> = v9282 10
                let _run_target_args'_v9281 = v9283 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9284 : (int32 -> Async<unit>) = Async.Sleep
                let v9285 : Async<unit> = v9284 10
                let _run_target_args'_v9281 = v9285 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9286 : (int32 -> Async<unit>) = Async.Sleep
                let v9287 : Async<unit> = v9286 10
                let _run_target_args'_v9281 = v9287 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9288 : (int32 -> Async<unit>) = Async.Sleep
                let v9289 : Async<unit> = v9288 10
                let _run_target_args'_v9281 = v9289 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9290 : (int32 -> Async<unit>) = Async.Sleep
                let v9291 : Async<unit> = v9290 10
                let _run_target_args'_v9281 = v9291 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9292 : (int32 -> Async<unit>) = Async.Sleep
                let v9293 : Async<unit> = v9292 10
                let _run_target_args'_v9281 = v9293 
                #endif
#else
                let v9294 : (int32 -> Async<unit>) = Async.Sleep
                let v9295 : Async<unit> = v9294 10
                let _run_target_args'_v9281 = v9295 
                #endif
                let v9296 : Async<unit> = _run_target_args'_v9281 
                do! v9296 
                let v9299 : int64 = v1 + 1L
                let v9300 : Async<int64> = method87(v0, v9299)
                return! v9300 
                (* indent
                ()
            indent *)
            (* try_unit
            let v9526 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v18356 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v18356 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18358 : unit = ()
    let _let'_v18358 =
        async {
            try
                let v27189 : bool = true
                method81(v27189, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v27415 : exn = ex
                let v27416 : int64 = v1 % 100L
                let v27417 : bool = v27416 = 0L
                if v27417 then
                    let v27515 : unit = ()
                    let v27516 : (unit -> unit) = closure34(v0, v27415)
                    let v27517 : unit = (fun () -> v27516 (); v27515) ()
                    ()
                (* run_target_args'
                let v27619 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v27620 : (int32 -> Async<unit>) = Async.Sleep
                let v27621 : Async<unit> = v27620 10
                let _run_target_args'_v27619 = v27621 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v27622 : (int32 -> Async<unit>) = Async.Sleep
                let v27623 : Async<unit> = v27622 10
                let _run_target_args'_v27619 = v27623 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v27624 : (int32 -> Async<unit>) = Async.Sleep
                let v27625 : Async<unit> = v27624 10
                let _run_target_args'_v27619 = v27625 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v27626 : (int32 -> Async<unit>) = Async.Sleep
                let v27627 : Async<unit> = v27626 10
                let _run_target_args'_v27619 = v27627 
                #endif
#if FABLE_COMPILER_PYTHON
                let v27628 : (int32 -> Async<unit>) = Async.Sleep
                let v27629 : Async<unit> = v27628 10
                let _run_target_args'_v27619 = v27629 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v27630 : (int32 -> Async<unit>) = Async.Sleep
                let v27631 : Async<unit> = v27630 10
                let _run_target_args'_v27619 = v27631 
                #endif
#else
                let v27632 : (int32 -> Async<unit>) = Async.Sleep
                let v27633 : Async<unit> = v27632 10
                let _run_target_args'_v27619 = v27633 
                #endif
                let v27634 : Async<unit> = _run_target_args'_v27619 
                do! v27634 
                let v27637 : int64 = v1 + 1L
                let v27638 : Async<int64> = method87(v0, v27637)
                return! v27638 
                (* indent
                ()
            indent *)
            (* try_unit
            let v27864 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v36694 : Async<int64> = _let'_v18358 
    let _run_target_args'_v6 = v36694 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36696 : unit = ()
    let _let'_v36696 =
        async {
            try
                let v45527 : bool = true
                method81(v45527, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v45753 : exn = ex
                let v45754 : int64 = v1 % 100L
                let v45755 : bool = v45754 = 0L
                if v45755 then
                    let v45853 : unit = ()
                    let v45854 : (unit -> unit) = closure34(v0, v45753)
                    let v45855 : unit = (fun () -> v45854 (); v45853) ()
                    ()
                (* run_target_args'
                let v45957 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v45958 : (int32 -> Async<unit>) = Async.Sleep
                let v45959 : Async<unit> = v45958 10
                let _run_target_args'_v45957 = v45959 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v45960 : (int32 -> Async<unit>) = Async.Sleep
                let v45961 : Async<unit> = v45960 10
                let _run_target_args'_v45957 = v45961 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v45962 : (int32 -> Async<unit>) = Async.Sleep
                let v45963 : Async<unit> = v45962 10
                let _run_target_args'_v45957 = v45963 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v45964 : (int32 -> Async<unit>) = Async.Sleep
                let v45965 : Async<unit> = v45964 10
                let _run_target_args'_v45957 = v45965 
                #endif
#if FABLE_COMPILER_PYTHON
                let v45966 : (int32 -> Async<unit>) = Async.Sleep
                let v45967 : Async<unit> = v45966 10
                let _run_target_args'_v45957 = v45967 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v45968 : (int32 -> Async<unit>) = Async.Sleep
                let v45969 : Async<unit> = v45968 10
                let _run_target_args'_v45957 = v45969 
                #endif
#else
                let v45970 : (int32 -> Async<unit>) = Async.Sleep
                let v45971 : Async<unit> = v45970 10
                let _run_target_args'_v45957 = v45971 
                #endif
                let v45972 : Async<unit> = _run_target_args'_v45957 
                do! v45972 
                let v45975 : int64 = v1 + 1L
                let v45976 : Async<int64> = method87(v0, v45975)
                return! v45976 
                (* indent
                ()
            indent *)
            (* try_unit
            let v46202 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v55032 : Async<int64> = _let'_v36696 
    let _run_target_args'_v6 = v55032 
    #endif
#else
    let v55034 : unit = ()
    let _let'_v55034 =
        async {
            try
                let v63865 : bool = true
                method81(v63865, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v64091 : exn = ex
                let v64092 : int64 = v1 % 100L
                let v64093 : bool = v64092 = 0L
                if v64093 then
                    let v64191 : unit = ()
                    let v64192 : (unit -> unit) = closure34(v0, v64091)
                    let v64193 : unit = (fun () -> v64192 (); v64191) ()
                    ()
                (* run_target_args'
                let v64295 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v64296 : (int32 -> Async<unit>) = Async.Sleep
                let v64297 : Async<unit> = v64296 10
                let _run_target_args'_v64295 = v64297 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v64298 : (int32 -> Async<unit>) = Async.Sleep
                let v64299 : Async<unit> = v64298 10
                let _run_target_args'_v64295 = v64299 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v64300 : (int32 -> Async<unit>) = Async.Sleep
                let v64301 : Async<unit> = v64300 10
                let _run_target_args'_v64295 = v64301 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v64302 : (int32 -> Async<unit>) = Async.Sleep
                let v64303 : Async<unit> = v64302 10
                let _run_target_args'_v64295 = v64303 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64304 : (int32 -> Async<unit>) = Async.Sleep
                let v64305 : Async<unit> = v64304 10
                let _run_target_args'_v64295 = v64305 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v64306 : (int32 -> Async<unit>) = Async.Sleep
                let v64307 : Async<unit> = v64306 10
                let _run_target_args'_v64295 = v64307 
                #endif
#else
                let v64308 : (int32 -> Async<unit>) = Async.Sleep
                let v64309 : Async<unit> = v64308 10
                let _run_target_args'_v64295 = v64309 
                #endif
                let v64310 : Async<unit> = _run_target_args'_v64295 
                do! v64310 
                let v64313 : int64 = v1 + 1L
                let v64314 : Async<int64> = method87(v0, v64313)
                return! v64314 
                (* indent
                ()
            indent *)
            (* try_unit
            let v64540 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v73370 : Async<int64> = _let'_v55034 
    let _run_target_args'_v6 = v73370 
    #endif
    let v73371 : Async<int64> = _run_target_args'_v6 
    v73371
and method87 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method88(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method86 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method87(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method86(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : (Async<unit> -> unit) = Async.RunSynchronously
    v34 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : (Async<unit> -> unit) = Async.RunSynchronously
    v35 v27
    #endif
#else
    let v36 : (Async<unit> -> unit) = Async.RunSynchronously
    v36 v27
    #endif
    // run_target_args' is_unit
    ()
and method85 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method90 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method72 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v228 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v229 : string = "std::fs::create_dir_all(&*$0)"
    let v230 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v229 
    let v231 : (std_io_Error -> std_string_String) = method73()
    (* run_target_args'
    let v233 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v234 : string = "$0.map_err(|x| $1(x))"
    let v235 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v230, v231) v234 
    let _run_target_args'_v233 = v235 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v236 : string = "$0.map_err(|x| $1(x))"
    let v237 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v230, v231) v236 
    let _run_target_args'_v233 = v237 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v238 : string = "$0.map_err(|x| $1(x))"
    let v239 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v230, v231) v238 
    let _run_target_args'_v233 = v239 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v240 : Result<unit, std_string_String> = match v230 with Ok x -> Ok x | Error x -> Error (v231 x)
    let _run_target_args'_v233 = v240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v241 : Result<unit, std_string_String> = match v230 with Ok x -> Ok x | Error x -> Error (v231 x)
    let _run_target_args'_v233 = v241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v242 : Result<unit, std_string_String> = match v230 with Ok x -> Ok x | Error x -> Error (v231 x)
    let _run_target_args'_v233 = v242 
    #endif
#else
    let v243 : Result<unit, std_string_String> = match v230 with Ok x -> Ok x | Error x -> Error (v231 x)
    let _run_target_args'_v233 = v243 
    #endif
    let v244 : Result<unit, std_string_String> = _run_target_args'_v233 
    let v247 : (unit -> US16) = method74()
    let v248 : (std_string_String -> US16) = method75()
    let v250 : US16 = match v244 with Ok () -> v247 () | Error x -> v248 x
    match v250 with
    | US16_1(v376) -> (* Error *)
        let v437 : unit = ()
        let v438 : (unit -> unit) = closure29(v0, v376)
        let v439 : unit = (fun () -> v438 (); v437) ()
        ()
    | US16_0 -> (* Ok *)
        let v313 : unit = ()
        let v314 : (unit -> unit) = closure30(v0)
        let v315 : unit = (fun () -> v314 (); v313) ()
        ()
    (* run_target_args'
    let v504 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v505 : (unit -> unit) = method80(v0)
    let v506 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v505 "$0()" )
    let _run_target_args'_v504 = v506 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v507 : (unit -> unit) = method80(v0)
    let v508 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v507 "$0()" )
    let _run_target_args'_v504 = v508 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v509 : (unit -> unit) = method80(v0)
    let v510 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v509 "$0()" )
    let _run_target_args'_v504 = v510 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v511 : (unit -> unit) = method82(v0)
    let v512 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v511 () }
    let _run_target_args'_v504 = v512 
    #endif
#if FABLE_COMPILER_PYTHON
    let v513 : (unit -> unit) = method82(v0)
    let v514 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v513 () }
    let _run_target_args'_v504 = v514 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v515 : (unit -> unit) = method82(v0)
    let v516 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v515 () }
    let _run_target_args'_v504 = v516 
    #endif
#else
    let v517 : (unit -> unit) = method82(v0)
    let v518 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v517 () }
    let _run_target_args'_v504 = v518 
    #endif
    let v519 : System.IDisposable = _run_target_args'_v504 
    let _run_target_args'_v228 = v519 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v524 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v228 = v524 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v528 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v228 = v528 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v531 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v536 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v538 : bool = null |> unbox<bool>
    let _run_target_args'_v536 = v538 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v542 : bool = null |> unbox<bool>
    let _run_target_args'_v536 = v542 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v546 : bool = null |> unbox<bool>
    let _run_target_args'_v536 = v546 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v550 : bool = null |> unbox<bool>
    let _run_target_args'_v536 = v550 
    #endif
#if FABLE_COMPILER_PYTHON
    let v554 : bool = null |> unbox<bool>
    let _run_target_args'_v536 = v554 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v558 : bool = null |> unbox<bool>
    let _run_target_args'_v536 = v558 
    #endif
#else
    let v561 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v562 : bool = v561 v531
    let _run_target_args'_v536 = v562 
    #endif
    let v563 : bool = _run_target_args'_v536 
    let v569 : bool = v563 = false
    if v569 then
        (* run_target_args'
        let v574 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v574 = v576 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v580 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v574 = v580 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v584 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v574 = v584 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v588 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v574 = v588 
        #endif
#if FABLE_COMPILER_PYTHON
        let v592 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v574 = v592 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v596 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v574 = v596 
        #endif
#else
        let v599 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v600 : System.DateTime = v599 v531
        let _run_target_args'_v574 = v600 
        #endif
        let v601 : System.DateTime = _run_target_args'_v574 
        let v607 : _ = {| Exists = v563; CreationTime = v601 |}
        let v609 : string = $"%A{v607}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure32(v0, v609)
        let v674 : unit = (fun () -> v673 (); v672) ()
        ()
    (* run_target_args'
    let v739 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v740 : (unit -> unit) = method85(v0)
    let v741 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v740 "$0()" )
    let _run_target_args'_v739 = v741 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v742 : (unit -> unit) = method85(v0)
    let v743 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v742 "$0()" )
    let _run_target_args'_v739 = v743 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v744 : (unit -> unit) = method85(v0)
    let v745 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v744 "$0()" )
    let _run_target_args'_v739 = v745 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v746 : (unit -> unit) = method90(v0)
    let v747 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v746 () }
    let _run_target_args'_v739 = v747 
    #endif
#if FABLE_COMPILER_PYTHON
    let v748 : (unit -> unit) = method90(v0)
    let v749 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v748 () }
    let _run_target_args'_v739 = v749 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v750 : (unit -> unit) = method90(v0)
    let v751 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v750 () }
    let _run_target_args'_v739 = v751 
    #endif
#else
    let v752 : (unit -> unit) = method90(v0)
    let v753 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v752 () }
    let _run_target_args'_v739 = v753 
    #endif
    let v754 : System.IDisposable = _run_target_args'_v739 
    let _run_target_args'_v228 = v754 
    #endif
#if FABLE_COMPILER_PYTHON
    let v758 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v763 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v765 : bool = null |> unbox<bool>
    let _run_target_args'_v763 = v765 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v769 : bool = null |> unbox<bool>
    let _run_target_args'_v763 = v769 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v773 : bool = null |> unbox<bool>
    let _run_target_args'_v763 = v773 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v777 : bool = null |> unbox<bool>
    let _run_target_args'_v763 = v777 
    #endif
#if FABLE_COMPILER_PYTHON
    let v781 : bool = null |> unbox<bool>
    let _run_target_args'_v763 = v781 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v785 : bool = null |> unbox<bool>
    let _run_target_args'_v763 = v785 
    #endif
#else
    let v788 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v789 : bool = v788 v758
    let _run_target_args'_v763 = v789 
    #endif
    let v790 : bool = _run_target_args'_v763 
    let v796 : bool = v790 = false
    if v796 then
        (* run_target_args'
        let v801 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v801 = v803 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v807 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v801 = v807 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v811 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v801 = v811 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v815 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v801 = v815 
        #endif
#if FABLE_COMPILER_PYTHON
        let v819 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v801 = v819 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v823 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v801 = v823 
        #endif
#else
        let v826 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v827 : System.DateTime = v826 v758
        let _run_target_args'_v801 = v827 
        #endif
        let v828 : System.DateTime = _run_target_args'_v801 
        let v834 : _ = {| Exists = v790; CreationTime = v828 |}
        let v836 : string = $"%A{v834}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure32(v0, v836)
        let v901 : unit = (fun () -> v900 (); v899) ()
        ()
    (* run_target_args'
    let v966 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v967 : (unit -> unit) = method85(v0)
    let v968 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v967 "$0()" )
    let _run_target_args'_v966 = v968 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v969 : (unit -> unit) = method85(v0)
    let v970 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v969 "$0()" )
    let _run_target_args'_v966 = v970 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v971 : (unit -> unit) = method85(v0)
    let v972 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v971 "$0()" )
    let _run_target_args'_v966 = v972 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v973 : (unit -> unit) = method90(v0)
    let v974 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v973 () }
    let _run_target_args'_v966 = v974 
    #endif
#if FABLE_COMPILER_PYTHON
    let v975 : (unit -> unit) = method90(v0)
    let v976 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v975 () }
    let _run_target_args'_v966 = v976 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v977 : (unit -> unit) = method90(v0)
    let v978 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v977 () }
    let _run_target_args'_v966 = v978 
    #endif
#else
    let v979 : (unit -> unit) = method90(v0)
    let v980 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v979 () }
    let _run_target_args'_v966 = v980 
    #endif
    let v981 : System.IDisposable = _run_target_args'_v966 
    let _run_target_args'_v228 = v981 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v985 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v990 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v992 : bool = null |> unbox<bool>
    let _run_target_args'_v990 = v992 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v996 : bool = null |> unbox<bool>
    let _run_target_args'_v990 = v996 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1000 : bool = null |> unbox<bool>
    let _run_target_args'_v990 = v1000 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1004 : bool = null |> unbox<bool>
    let _run_target_args'_v990 = v1004 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1008 : bool = null |> unbox<bool>
    let _run_target_args'_v990 = v1008 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1012 : bool = null |> unbox<bool>
    let _run_target_args'_v990 = v1012 
    #endif
#else
    let v1015 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v1016 : bool = v1015 v985
    let _run_target_args'_v990 = v1016 
    #endif
    let v1017 : bool = _run_target_args'_v990 
    let v1023 : bool = v1017 = false
    if v1023 then
        (* run_target_args'
        let v1028 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1030 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1028 = v1030 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1034 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1028 = v1034 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1038 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1028 = v1038 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1042 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1028 = v1042 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1046 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1028 = v1046 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v1050 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1028 = v1050 
        #endif
#else
        let v1053 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v1054 : System.DateTime = v1053 v985
        let _run_target_args'_v1028 = v1054 
        #endif
        let v1055 : System.DateTime = _run_target_args'_v1028 
        let v1061 : _ = {| Exists = v1017; CreationTime = v1055 |}
        let v1063 : string = $"%A{v1061}"
        let v1126 : unit = ()
        let v1127 : (unit -> unit) = closure32(v0, v1063)
        let v1128 : unit = (fun () -> v1127 (); v1126) ()
        ()
    (* run_target_args'
    let v1193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1194 : (unit -> unit) = method85(v0)
    let v1195 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1194 "$0()" )
    let _run_target_args'_v1193 = v1195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1196 : (unit -> unit) = method85(v0)
    let v1197 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1196 "$0()" )
    let _run_target_args'_v1193 = v1197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1198 : (unit -> unit) = method85(v0)
    let v1199 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1198 "$0()" )
    let _run_target_args'_v1193 = v1199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1200 : (unit -> unit) = method90(v0)
    let v1201 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1200 () }
    let _run_target_args'_v1193 = v1201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1202 : (unit -> unit) = method90(v0)
    let v1203 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1202 () }
    let _run_target_args'_v1193 = v1203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1204 : (unit -> unit) = method90(v0)
    let v1205 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1204 () }
    let _run_target_args'_v1193 = v1205 
    #endif
#else
    let v1206 : (unit -> unit) = method90(v0)
    let v1207 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1206 () }
    let _run_target_args'_v1193 = v1207 
    #endif
    let v1208 : System.IDisposable = _run_target_args'_v1193 
    let _run_target_args'_v228 = v1208 
    #endif
#else
    let v1212 : System_IO_DirectoryInfo = method83(v0)
    (* run_target_args'
    let v1217 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1219 : bool = null |> unbox<bool>
    let _run_target_args'_v1217 = v1219 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1223 : bool = null |> unbox<bool>
    let _run_target_args'_v1217 = v1223 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1227 : bool = null |> unbox<bool>
    let _run_target_args'_v1217 = v1227 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1231 : bool = null |> unbox<bool>
    let _run_target_args'_v1217 = v1231 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1235 : bool = null |> unbox<bool>
    let _run_target_args'_v1217 = v1235 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1239 : bool = null |> unbox<bool>
    let _run_target_args'_v1217 = v1239 
    #endif
#else
    let v1242 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v1243 : bool = v1242 v1212
    let _run_target_args'_v1217 = v1243 
    #endif
    let v1244 : bool = _run_target_args'_v1217 
    let v1250 : bool = v1244 = false
    if v1250 then
        (* run_target_args'
        let v1255 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1257 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1255 = v1257 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1261 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1255 = v1261 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1265 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1255 = v1265 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1269 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1255 = v1269 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1273 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1255 = v1273 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v1277 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v1255 = v1277 
        #endif
#else
        let v1280 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v1281 : System.DateTime = v1280 v1212
        let _run_target_args'_v1255 = v1281 
        #endif
        let v1282 : System.DateTime = _run_target_args'_v1255 
        let v1288 : _ = {| Exists = v1244; CreationTime = v1282 |}
        let v1290 : string = $"%A{v1288}"
        let v1353 : unit = ()
        let v1354 : (unit -> unit) = closure32(v0, v1290)
        let v1355 : unit = (fun () -> v1354 (); v1353) ()
        ()
    (* run_target_args'
    let v1420 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1421 : (unit -> unit) = method85(v0)
    let v1422 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1421 "$0()" )
    let _run_target_args'_v1420 = v1422 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1423 : (unit -> unit) = method85(v0)
    let v1424 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1423 "$0()" )
    let _run_target_args'_v1420 = v1424 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1425 : (unit -> unit) = method85(v0)
    let v1426 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1425 "$0()" )
    let _run_target_args'_v1420 = v1426 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1427 : (unit -> unit) = method90(v0)
    let v1428 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1427 () }
    let _run_target_args'_v1420 = v1428 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1429 : (unit -> unit) = method90(v0)
    let v1430 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1429 () }
    let _run_target_args'_v1420 = v1430 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1431 : (unit -> unit) = method90(v0)
    let v1432 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1431 () }
    let _run_target_args'_v1420 = v1432 
    #endif
#else
    let v1433 : (unit -> unit) = method90(v0)
    let v1434 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1433 () }
    let _run_target_args'_v1420 = v1434 
    #endif
    let v1435 : System.IDisposable = _run_target_args'_v1420 
    let _run_target_args'_v228 = v1435 
    #endif
    let v1439 : System.IDisposable = _run_target_args'_v228 
    v1439
and method70 (v0 : string, v1 : string) : unit =
    let v2 : bool = method71(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method38(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method36(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method72(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method92 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method94 () : string =
    let v0 : string = ""
    v0
and method95 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method95(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method96 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method96(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure36 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method97(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method97 (v0 : int32, v1 : int32) : (string -> string) =
    closure36(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method95(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method97(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method95(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method97(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and method98 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US18 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US18 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US18_1(v13) -> (* Error *)
            method98(v0, v1, v6)
        | US18_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US18_1(v3)
and method99 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US20_1
        let v15 : char =
            match v11 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method99(v0, v17)
and method100 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v98 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method99(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int64 = System.Convert.ToInt64 v68.Length
                let v72 : int64 = 0L
                let v73 : UH0 = method95(v71, v68, v72)
                let struct (v74 : System.Text.StringBuilder, v75 : int32, v76 : int32) = method96(v73, v2, v3, v4)
                US18_0(v25, v62, v74, v75, v76)
            else
                let v78 : char list = []
                let v80 : char list = ''' :: v78 
                let v84 : char list = '"' :: v80 
                let v88 : (char list -> (char [])) = List.toArray
                let v89 : (char []) = v88 v84
                let v93 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v89} / s: %A{struct (v2, v3, v4)}"
                US18_1(v93)
    let v110 : US18 =
        match v98 with
        | US18_1(v107) -> (* Error *)
            US18_1(v107)
        | US18_0(v99, v100, v101, v102, v103) -> (* Ok *)
            let v104 : bool = '\\' = v99
            let v105 : char =
                if v104 then
                    '/'
                else
                    v99
            US18_0(v105, v100, v101, v102, v103)
    match v110 with
    | US18_1(v127) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v111, v112, v113, v114, v115) -> (* Ok *)
        let v117 : (char -> string) = _.ToString()
        let v118 : string = v117 v111
        let v121 : string = v0 + v118 
        method100(v121, v112, v113, v114, v115)
and method101 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US18 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US18 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US18_1(v15) -> (* Error *)
            method101(v0, v1, v2, v3, v8)
        | US18_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US18_1(v5)
and method102 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method102(v0, v21)
and method103 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method102(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method95(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method96(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = ' ' :: v82 
                let v88 : char list = ''' :: v84 
                let v92 : char list = '"' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v118 : US18 =
        match v106 with
        | US18_1(v115) -> (* Error *)
            US18_1(v115)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v112 : bool = '\\' = v107
            let v113 : char =
                if v112 then
                    '/'
                else
                    v107
            US18_0(v113, v108, v109, v110, v111)
    match v118 with
    | US18_1(v135) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v119, v120, v121, v122, v123) -> (* Ok *)
        let v125 : (char -> string) = _.ToString()
        let v126 : string = v125 v119
        let v129 : string = v0 + v126 
        method103(v129, v120, v121, v122, v123)
and method104 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method104(v0, v6)
        else
            v1
and method105 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US18 =
        if v5 then
            let v12 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US18_1(v12)
        else
            let v16 : char = v1.[int 0]
            let v18 : (string -> int32) = String.length
            let v19 : int32 = v18 v1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v19 |> int32 
            let v48 : int32 = v40 - 1
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v16
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method95(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method96(v61, v2, v3, v4)
            US18_0(v16, v50, v62, v63, v64)
    match v66 with
    | US18_1(v83) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v77 : string = v0 + v74 
        method105(v77, v68, v69, v70, v71)
and method93 (v0 : string) : US17 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method94()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure37()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US18 = method98(v10, v16, v23)
    let v197 : US19 =
        match v24 with
        | US18_1(v194) -> (* Error *)
            US19_1(v194)
        | US18_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v123 : US18 =
                if v30 then
                    let v31 : char list = []
                    let v33 : char list = ''' :: v31 
                    let v37 : char list = '"' :: v33 
                    let v41 : (char list -> (char [])) = List.toArray
                    let v42 : (char []) = v41 v37
                    let v46 : string = $"parsing.none_of / unexpected end of input / chars: %A{v42} / s: %A{struct (v27, v28, v29)}"
                    US18_1(v46)
                else
                    let v50 : char = v26.[int 0]
                    let v51 : int64 = 0L
                    let v52 : bool = method99(v50, v51)
                    let v53 : bool = v52 = false
                    if v53 then
                        let v55 : (string -> int32) = String.length
                        let v56 : int32 = v55 v26
                        let v64 : int32 = 1 |> int32 
                        let v77 : int32 = v56 |> int32 
                        let v85 : int32 = v77 - 1
                        let v87 : string = v26.[int v64..int v85]
                        let v92 : (char -> string) = _.ToString()
                        let v93 : string = v92 v50
                        let v96 : int64 = System.Convert.ToInt64 v93.Length
                        let v97 : int64 = 0L
                        let v98 : UH0 = method95(v96, v93, v97)
                        let struct (v99 : System.Text.StringBuilder, v100 : int32, v101 : int32) = method96(v98, v27, v28, v29)
                        US18_0(v50, v87, v99, v100, v101)
                    else
                        let v103 : char list = []
                        let v105 : char list = ''' :: v103 
                        let v109 : char list = '"' :: v105 
                        let v113 : (char list -> (char [])) = List.toArray
                        let v114 : (char []) = v113 v109
                        let v118 : string = $"parsing.none_of / unexpected char: '{v50}' / chars: %A{v114} / s: %A{struct (v27, v28, v29)}"
                        US18_1(v118)
            let v135 : US18 =
                match v123 with
                | US18_1(v132) -> (* Error *)
                    US18_1(v132)
                | US18_0(v124, v125, v126, v127, v128) -> (* Ok *)
                    let v129 : bool = '\\' = v124
                    let v130 : char =
                        if v129 then
                            '/'
                        else
                            v124
                    US18_0(v130, v125, v126, v127, v128)
            let v155 : US19 =
                match v135 with
                | US18_1(v152) -> (* Error *)
                    US19_1(v152)
                | US18_0(v136, v137, v138, v139, v140) -> (* Ok *)
                    let v142 : (char -> string) = _.ToString()
                    let v143 : string = v142 v136
                    let struct (v146 : string, v147 : string, v148 : System.Text.StringBuilder, v149 : int32, v150 : int32) = method100(v143, v137, v138, v139, v140)
                    US19_0(v146, v147, v148, v149, v150)
            let v165 : US19 =
                match v155 with
                | US19_1(v162) -> (* Error *)
                    US19_0(v9, v26, v27, v28, v29)
                | US19_0(v156, v157, v158, v159, v160) -> (* Ok *)
                    US19_0(v156, v157, v158, v159, v160)
            match v165 with
            | US19_1(v189) -> (* Error *)
                let v190 : string = "parsing.between / expected content"
                US19_1(v190)
            | US19_0(v166, v167, v168, v169, v170) -> (* Ok *)
                let v171 : UH1 = UH1_0
                let v172 : UH1 = UH1_1(v20, v171)
                let v173 : UH1 = UH1_1(v19, v172)
                let v174 : US18 = method101(v167, v168, v169, v170, v173)
                match v174 with
                | US18_1(v181) -> (* Error *)
                    let v183 : string = $"parsing.between / expected closing delimiter / e: %A{v181} / input: %A{struct (v10, v16, 1, 1)} / rest1: %A{struct (v26, v27, v28, v29)} / rest2: %A{struct (v167, v168, v169, v170)}"
                    US19_1(v183)
                | US18_0(v175, v176, v177, v178, v179) -> (* Ok *)
                    US19_0(v166, v176, v177, v178, v179)
    let v416 : US19 =
        match v197 with
        | US19_1(v203) -> (* Error *)
            let v204 : bool = "" = v10
            let v307 : US18 =
                if v204 then
                    let v205 : char list = []
                    let v207 : char list = ' ' :: v205 
                    let v211 : char list = ''' :: v207 
                    let v215 : char list = '"' :: v211 
                    let v219 : (char list -> (char [])) = List.toArray
                    let v220 : (char []) = v219 v215
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v220} / s: %A{struct (v16, 1, 1)}"
                    US18_1(v224)
                else
                    let v228 : char = v10.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method102(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v233 : (string -> int32) = String.length
                        let v234 : int32 = v233 v10
                        let v242 : int32 = 1 |> int32 
                        let v255 : int32 = v234 |> int32 
                        let v263 : int32 = v255 - 1
                        let v265 : string = v10.[int v242..int v263]
                        let v270 : (char -> string) = _.ToString()
                        let v271 : string = v270 v228
                        let v274 : int64 = System.Convert.ToInt64 v271.Length
                        let v275 : int64 = 0L
                        let v276 : UH0 = method95(v274, v271, v275)
                        let v277 : int32 = 1
                        let v278 : int32 = 1
                        let struct (v279 : System.Text.StringBuilder, v280 : int32, v281 : int32) = method96(v276, v16, v277, v278)
                        US18_0(v228, v265, v279, v280, v281)
                    else
                        let v283 : char list = []
                        let v285 : char list = ' ' :: v283 
                        let v289 : char list = ''' :: v285 
                        let v293 : char list = '"' :: v289 
                        let v297 : (char list -> (char [])) = List.toArray
                        let v298 : (char []) = v297 v293
                        let v302 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v298} / s: %A{struct (v16, 1, 1)}"
                        US18_1(v302)
            let v319 : US18 =
                match v307 with
                | US18_1(v316) -> (* Error *)
                    US18_1(v316)
                | US18_0(v308, v309, v310, v311, v312) -> (* Ok *)
                    let v313 : bool = '\\' = v308
                    let v314 : char =
                        if v313 then
                            '/'
                        else
                            v308
                    US18_0(v314, v309, v310, v311, v312)
            let v339 : US19 =
                match v319 with
                | US18_1(v336) -> (* Error *)
                    US19_1(v336)
                | US18_0(v320, v321, v322, v323, v324) -> (* Ok *)
                    let v326 : (char -> string) = _.ToString()
                    let v327 : string = v326 v320
                    let struct (v330 : string, v331 : string, v332 : System.Text.StringBuilder, v333 : int32, v334 : int32) = method103(v327, v321, v322, v323, v324)
                    US19_0(v330, v331, v332, v333, v334)
            match v339 with
            | US19_1(v345) -> (* Error *)
                let v346 : int32 = v10.Length
                let v347 : bool = v346 = 0
                let v354 : US21 =
                    if v347 then
                        US21_0(v10, v16, 1, 1)
                    else
                        let v350 : string = $"parsing.eof / expected end of input / input: %A{v10}"
                        US21_1(v350)
                let v363 : US19 =
                    match v354 with
                    | US21_1(v360) -> (* Error *)
                        US19_1(v360)
                    | US21_0(v355, v356, v357, v358) -> (* Ok *)
                        US19_0(v9, v355, v356, v357, v358)
                match v363 with
                | US19_1(v409) -> (* Error *)
                    US19_1(v409)
                | US19_0(v364, v365, v366, v367, v368) -> (* Ok *)
                    let v369 : int32 = 0
                    let v370 : int32 = method104(v365, v369)
                    let v372 : (string -> int32) = String.length
                    let v373 : int32 = v372 v365
                    let v381 : int32 = v370 |> int32 
                    let v394 : int32 = v373 |> int32 
                    let v402 : int32 = v394 - 1
                    let v404 : string = v365.[int v381..int v402]
                    US19_0(v364, v404, v366, v367, v368)
            | US19_0(v340, v341, v342, v343, v344) -> (* Ok *)
                v339
        | US19_0(v198, v199, v200, v201, v202) -> (* Ok *)
            v197
    let v671 : US22 =
        match v416 with
        | US19_1(v668) -> (* Error *)
            US22_1(v668)
        | US19_0(v417, v418, v419, v420, v421) -> (* Ok *)
            let v422 : bool = "" = v418
            let v542 : US18 =
                if v422 then
                    let v424 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v419, v420, v421)}"
                    US18_1(v424)
                else
                    let v428 : char = v418.[int 0]
                    let v429 : bool = v428 = ' '
                    if v429 then
                        let v431 : (string -> int32) = String.length
                        let v432 : int32 = v431 v418
                        let v440 : int32 = 1 |> int32 
                        let v453 : int32 = v432 |> int32 
                        let v461 : int32 = v453 - 1
                        let v463 : string = v418.[int v440..int v461]
                        let v468 : (char -> string) = _.ToString()
                        let v469 : string = v468 v428
                        let v472 : int64 = System.Convert.ToInt64 v469.Length
                        let v473 : int64 = 0L
                        let v474 : UH0 = method95(v472, v469, v473)
                        let struct (v475 : System.Text.StringBuilder, v476 : int32, v477 : int32) = method96(v474, v419, v420, v421)
                        US18_0(v428, v463, v475, v476, v477)
                    else
                        let v480 : string = "\n"
                        let v481 : int32 = v418.IndexOf v480 
                        let v484 : int32 = v481 - 1
                        let v485 : bool = -2 = v484
                        let v493 : int32 =
                            if v485 then
                                let v487 : (string -> int32) = String.length
                                let v488 : int32 = v487 v418
                                let v491 : int32 = v488 + 1
                                v491
                            else
                                let v492 : int32 = v484 + 1
                                v492
                        let v499 : int32 = 0 |> int32 
                        let v512 : int32 = v493 |> int32 
                        let v520 : int32 = v512 - 1
                        let v522 : string = v418.[int v499..int v520]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v420} / col: {v421}
{v419}{v522}"
                        let v530 : int32 = v421 - 1
                        let v531 : int32 = 0
                        let v532 : (string -> string) = method97(v530, v531)
                        let v533 : string = v532 v9
                        let v534 : string = "^"
                        let v535 : string = v533 + v534 
                        let v537 : string = $"{v527}
{v535}
"
                        US18_1(v537)
            let v554 : US23 =
                match v542 with
                | US18_1(v550) -> (* Error *)
                    let v551 : US20 = US20_1
                    US23_0(v551, v418, v419, v420, v421)
                | US18_0(v543, v544, v545, v546, v547) -> (* Ok *)
                    let v548 : US20 = US20_0(v543)
                    US23_0(v548, v544, v545, v546, v547)
            let v645 : US19 =
                match v554 with
                | US23_1(v642) -> (* Error *)
                    US19_1(v642)
                | US23_0(v555, v556, v557, v558, v559) -> (* Ok *)
                    let v560 : bool = "" = v556
                    let v621 : US18 =
                        if v560 then
                            let v567 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v557, v558, v559)}"
                            US18_1(v567)
                        else
                            let v571 : char = v556.[int 0]
                            let v573 : (string -> int32) = String.length
                            let v574 : int32 = v573 v556
                            let v582 : int32 = 1 |> int32 
                            let v595 : int32 = v574 |> int32 
                            let v603 : int32 = v595 - 1
                            let v605 : string = v556.[int v582..int v603]
                            let v610 : (char -> string) = _.ToString()
                            let v611 : string = v610 v571
                            let v614 : int64 = System.Convert.ToInt64 v611.Length
                            let v615 : int64 = 0L
                            let v616 : UH0 = method95(v614, v611, v615)
                            let struct (v617 : System.Text.StringBuilder, v618 : int32, v619 : int32) = method96(v616, v557, v558, v559)
                            US18_0(v571, v605, v617, v618, v619)
                    match v621 with
                    | US18_1(v638) -> (* Error *)
                        US19_1(v638)
                    | US18_0(v622, v623, v624, v625, v626) -> (* Ok *)
                        let v628 : (char -> string) = _.ToString()
                        let v629 : string = v628 v622
                        let struct (v632 : string, v633 : string, v634 : System.Text.StringBuilder, v635 : int32, v636 : int32) = method105(v629, v623, v624, v625, v626)
                        US19_0(v632, v633, v634, v635, v636)
            let v657 : US24 =
                match v645 with
                | US19_1(v653) -> (* Error *)
                    let v654 : US5 = US5_1
                    US24_0(v654, v418, v419, v420, v421)
                | US19_0(v646, v647, v648, v649, v650) -> (* Ok *)
                    let v651 : US5 = US5_0(v646)
                    US24_0(v651, v647, v648, v649, v650)
            match v657 with
            | US24_1(v664) -> (* Error *)
                US22_1(v664)
            | US24_0(v658, v659, v660, v661, v662) -> (* Ok *)
                US22_0(v417, v658, v659, v660, v661, v662)
    match v671 with
    | US22_1(v679) -> (* Error *)
        US17_1(v679)
    | US22_0(v672, v673, v674, v675, v676, v677) -> (* Ok *)
        US17_0(v672, v673)
and method108 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US20_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US20_1
        let v23 : char =
            match v19 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method108(v0, v25)
and method109 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method108(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method95(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method96(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    match v114 with
    | US18_1(v131) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v121 : (char -> string) = _.ToString()
        let v122 : string = v121 v115
        let v125 : string = v0 + v122 
        method109(v125, v116, v117, v118, v119)
and method111 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method111(v0, v21)
and closure38 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method95(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method97(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method95(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method96(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '\\'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method95(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method96(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method97(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method95(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method96(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '`'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and method112 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US19 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method112(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method113 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method113(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method110 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method111(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method95(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method96(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    let v135 : US19 =
        match v121 with
        | US19_1(v127) -> (* Error *)
            let v128 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
            let v129 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
            let v130 : UH3 = UH3_0
            let v131 : UH3 = UH3_1(v129, v130)
            let v132 : UH3 = UH3_1(v128, v131)
            method112(v1, v2, v3, v4, v132)
        | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
            v121
    match v135 with
    | US19_1(v143) -> (* Error *)
        let v144 : UH2 = UH2_0
        let v145 : UH2 = method113(v0, v144)
        US26_0(v145, v1, v2, v3, v4)
    | US19_0(v136, v137, v138, v139, v140) -> (* Ok *)
        let v141 : UH2 = UH2_1(v136, v0)
        method110(v141, v137, v138, v139, v140)
and method114 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method114(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method115 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method111(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method95(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method96(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    match v121 with
    | US19_1(v129) -> (* Error *)
        let v130 : UH2 = UH2_0
        let v131 : UH2 = method113(v0, v130)
        US26_0(v131, v1, v2, v3, v4)
    | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : UH2 = UH2_1(v122, v0)
        method115(v127, v123, v124, v125, v126)
and method107 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method108(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method95(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method96(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    let v134 : US19 =
        match v114 with
        | US18_1(v131) -> (* Error *)
            US19_1(v131)
        | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v115
            let struct (v125 : string, v126 : string, v127 : System.Text.StringBuilder, v128 : int32, v129 : int32) = method109(v122, v116, v117, v118, v119)
            US19_0(v125, v126, v127, v128, v129)
    let v522 : US19 =
        match v134 with
        | US19_1(v140) -> (* Error *)
            let v261 : US18 =
                if v5 then
                    let v142 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US18_1(v142)
                else
                    let v146 : char = v1.[int 0]
                    let v147 : bool = v146 = '"'
                    if v147 then
                        let v149 : (string -> int32) = String.length
                        let v150 : int32 = v149 v1
                        let v158 : int32 = 1 |> int32 
                        let v171 : int32 = v150 |> int32 
                        let v179 : int32 = v171 - 1
                        let v181 : string = v1.[int v158..int v179]
                        let v186 : (char -> string) = _.ToString()
                        let v187 : string = v186 v146
                        let v190 : int64 = System.Convert.ToInt64 v187.Length
                        let v191 : int64 = 0L
                        let v192 : UH0 = method95(v190, v187, v191)
                        let struct (v193 : System.Text.StringBuilder, v194 : int32, v195 : int32) = method96(v192, v2, v3, v4)
                        US18_0(v146, v181, v193, v194, v195)
                    else
                        let v198 : string = "\n"
                        let v199 : int32 = v1.IndexOf v198 
                        let v202 : int32 = v199 - 1
                        let v203 : bool = -2 = v202
                        let v211 : int32 =
                            if v203 then
                                let v205 : (string -> int32) = String.length
                                let v206 : int32 = v205 v1
                                let v209 : int32 = v206 + 1
                                v209
                            else
                                let v210 : int32 = v202 + 1
                                v210
                        let v217 : int32 = 0 |> int32 
                        let v230 : int32 = v211 |> int32 
                        let v238 : int32 = v230 - 1
                        let v240 : string = v1.[int v217..int v238]
                        let v245 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v240}"
                        let v248 : int32 = v4 - 1
                        let v249 : int32 = 0
                        let v250 : (string -> string) = method97(v248, v249)
                        let v251 : string = ""
                        let v252 : string = v250 v251
                        let v253 : string = "^"
                        let v254 : string = v252 + v253 
                        let v256 : string = $"{v245}
{v254}
"
                        US18_1(v256)
            let v451 : US19 =
                match v261 with
                | US18_1(v448) -> (* Error *)
                    US19_1(v448)
                | US18_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US26 = method110(v267, v263, v264, v265, v266)
                    let v301 : US19 =
                        match v268 with
                        | US26_1(v298) -> (* Error *)
                            US19_1(v298)
                        | US26_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method114(v269, v274)
                            let v280 : unit = ()
                            let _let'_v280 =
                                seq {
                                    yield! v275 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v283 : string seq = _let'_v280 
                            let v291 : (string -> (string seq -> string)) = String.concat
                            let v292 : string = ""
                            let v293 : (string seq -> string) = v291 v292
                            let v294 : string = v293 v283
                            US19_0(v294, v270, v271, v272, v273)
                    match v301 with
                    | US19_1(v443) -> (* Error *)
                        let v444 : string = "parsing.between / expected content"
                        US19_1(v444)
                    | US19_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v428 : US18 =
                            if v307 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v304, v305, v306)}"
                                US18_1(v309)
                            else
                                let v313 : char = v303.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v316 : (string -> int32) = String.length
                                    let v317 : int32 = v316 v303
                                    let v325 : int32 = 1 |> int32 
                                    let v338 : int32 = v317 |> int32 
                                    let v346 : int32 = v338 - 1
                                    let v348 : string = v303.[int v325..int v346]
                                    let v353 : (char -> string) = _.ToString()
                                    let v354 : string = v353 v313
                                    let v357 : int64 = System.Convert.ToInt64 v354.Length
                                    let v358 : int64 = 0L
                                    let v359 : UH0 = method95(v357, v354, v358)
                                    let struct (v360 : System.Text.StringBuilder, v361 : int32, v362 : int32) = method96(v359, v304, v305, v306)
                                    US18_0(v313, v348, v360, v361, v362)
                                else
                                    let v365 : string = "\n"
                                    let v366 : int32 = v303.IndexOf v365 
                                    let v369 : int32 = v366 - 1
                                    let v370 : bool = -2 = v369
                                    let v378 : int32 =
                                        if v370 then
                                            let v372 : (string -> int32) = String.length
                                            let v373 : int32 = v372 v303
                                            let v376 : int32 = v373 + 1
                                            v376
                                        else
                                            let v377 : int32 = v369 + 1
                                            v377
                                    let v384 : int32 = 0 |> int32 
                                    let v397 : int32 = v378 |> int32 
                                    let v405 : int32 = v397 - 1
                                    let v407 : string = v303.[int v384..int v405]
                                    let v412 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v407}"
                                    let v415 : int32 = v306 - 1
                                    let v416 : int32 = 0
                                    let v417 : (string -> string) = method97(v415, v416)
                                    let v418 : string = ""
                                    let v419 : string = v417 v418
                                    let v420 : string = "^"
                                    let v421 : string = v419 + v420 
                                    let v423 : string = $"{v412}
{v421}
"
                                    US18_1(v423)
                        match v428 with
                        | US18_1(v435) -> (* Error *)
                            let v437 : string = $"parsing.between / expected closing delimiter / e: %A{v435} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US19_1(v437)
                        | US18_0(v429, v430, v431, v432, v433) -> (* Ok *)
                            US19_0(v302, v430, v431, v432, v433)
            match v451 with
            | US19_1(v457) -> (* Error *)
                let v458 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
                let v459 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
                let v460 : UH3 = UH3_0
                let v461 : UH3 = UH3_1(v459, v460)
                let v462 : UH3 = UH3_1(v458, v461)
                let v463 : US19 = method112(v1, v2, v3, v4, v462)
                let v474 : US19 =
                    match v463 with
                    | US19_1(v471) -> (* Error *)
                        US19_1(v471)
                    | US19_0(v464, v465, v466, v467, v468) -> (* Ok *)
                        let v469 : string = ""
                        US19_0(v469, v465, v466, v467, v468)
                let v485 : US26 =
                    match v474 with
                    | US19_1(v482) -> (* Error *)
                        US26_1(v482)
                    | US19_0(v475, v476, v477, v478, v479) -> (* Ok *)
                        let v480 : UH2 = UH2_0
                        method115(v480, v476, v477, v478, v479)
                match v485 with
                | US26_1(v515) -> (* Error *)
                    US19_1(v515)
                | US26_0(v486, v487, v488, v489, v490) -> (* Ok *)
                    let v491 : string list = []
                    let v492 : string list = method114(v486, v491)
                    let v497 : unit = ()
                    let _let'_v497 =
                        seq {
                            yield! v492 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v500 : string seq = _let'_v497 
                    let v508 : (string -> (string seq -> string)) = String.concat
                    let v509 : string = ""
                    let v510 : (string seq -> string) = v508 v509
                    let v511 : string = v510 v500
                    US19_0(v511, v487, v488, v489, v490)
            | US19_0(v452, v453, v454, v455, v456) -> (* Ok *)
                v451
        | US19_0(v135, v136, v137, v138, v139) -> (* Ok *)
            v134
    match v522 with
    | US19_1(v585) -> (* Error *)
        let v586 : UH2 = UH2_0
        let v587 : UH2 = method113(v0, v586)
        US26_0(v587, v1, v2, v3, v4)
    | US19_0(v523, v524, v525, v526, v527) -> (* Ok *)
        let v528 : int32 = 0
        let v529 : int32 = method104(v524, v528)
        let v530 : bool = 0 = v529
        let v571 : US21 =
            if v530 then
                let v531 : string = "parsing.spaces1 / expected at least one space"
                US21_1(v531)
            else
                let v534 : (string -> int32) = String.length
                let v535 : int32 = v534 v524
                let v543 : int32 = v529 |> int32 
                let v556 : int32 = v535 |> int32 
                let v564 : int32 = v556 - 1
                let v566 : string = v524.[int v543..int v564]
                US21_0(v566, v525, v526, v527)
        match v571 with
        | US21_1(v578) -> (* Error *)
            let v579 : UH2 = UH2_0
            let v580 : UH2 = UH2_1(v523, v579)
            let v581 : UH2 = method113(v0, v580)
            US26_0(v581, v524, v525, v526, v527)
        | US21_0(v572, v573, v574, v575) -> (* Ok *)
            let v576 : UH2 = UH2_1(v523, v0)
            method107(v576, v572, v573, v574, v575)
and method106 (v0 : string) : US25 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method94()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US26 = method107(v19, v10, v16, v20, v21)
    match v22 with
    | US26_1(v36) -> (* Error *)
        US25_1(v36)
    | US26_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method114(v23, v28)
        let v31 : (string list -> (string [])) = List.toArray
        let v32 : (string []) = v31 v29
        US25_0(v32)
and method116 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method13()
    let v18 : Mut3 = {l0 = v17} : Mut3
    let v21 : string = "{ "
    let v22 : string = $"{v21}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v18, v22)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v40 : string = "file_name"
    let v41 : string = $"{v40}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v18, v41)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v59 : string = " = "
    let v60 : string = $"{v59}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v18, v60)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v77 : string = $"{v8}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v18, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v18, v96)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v114 : string = "arguments"
    let v115 : string = $"{v114}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v18, v115)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v132 : string = $"{v59}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v18, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v149 : string = $"{v9}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v18, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v95}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v18, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v184 : string = "options"
    let v185 : string = $"{v184}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v18, v185)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v202 : string = $"{v59}"
    let v210 : unit = ()
    let v211 : (unit -> unit) = closure7(v18, v202)
    let v212 : unit = (fun () -> v211 (); v210) ()
    let v219 : string = $"{v21}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v18, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v237 : string = "command"
    let v238 : string = $"{v237}"
    let v246 : unit = ()
    let v247 : (unit -> unit) = closure7(v18, v238)
    let v248 : unit = (fun () -> v247 (); v246) ()
    let v255 : string = $"{v59}"
    let v263 : unit = ()
    let v264 : (unit -> unit) = closure7(v18, v255)
    let v265 : unit = (fun () -> v264 (); v263) ()
    let v272 : string = $"{v10}"
    let v280 : unit = ()
    let v281 : (unit -> unit) = closure7(v18, v272)
    let v282 : unit = (fun () -> v281 (); v280) ()
    let v289 : string = $"{v95}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v18, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v307 : string = "cancellation_token"
    let v308 : string = $"{v307}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v18, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v325 : string = $"{v59}"
    let v333 : unit = ()
    let v334 : (unit -> unit) = closure7(v18, v325)
    let v335 : unit = (fun () -> v334 (); v333) ()
    (* run_target_args'
    let v345 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v346 : string = "format!(\"{:#?}\", $0)"
    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v346 
    let v348 : string = "fable_library_rust::String_::fromString($0)"
    let v349 : string = Fable.Core.RustInterop.emitRustExpr v347 v348 
    let _run_target_args'_v345 = v349 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v350 : string = "format!(\"{:#?}\", $0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v350 
    let v352 : string = "fable_library_rust::String_::fromString($0)"
    let v353 : string = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let _run_target_args'_v345 = v353 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v354 : string = "format!(\"{:#?}\", $0)"
    let v355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v354 
    let v356 : string = "fable_library_rust::String_::fromString($0)"
    let v357 : string = Fable.Core.RustInterop.emitRustExpr v355 v356 
    let _run_target_args'_v345 = v357 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v359 : string = $"%A{v11}"
    let _run_target_args'_v345 = v359 
    #endif
#if FABLE_COMPILER_PYTHON
    let v363 : string = $"%A{v11}"
    let _run_target_args'_v345 = v363 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v367 : string = $"%A{v11}"
    let _run_target_args'_v345 = v367 
    #endif
#else
    let v371 : string = $"%A{v11}"
    let _run_target_args'_v345 = v371 
    #endif
    let v374 : string = _run_target_args'_v345 
    let v381 : string = $"{v374}"
    let v389 : unit = ()
    let v390 : (unit -> unit) = closure7(v18, v381)
    let v391 : unit = (fun () -> v390 (); v389) ()
    let v398 : string = $"{v95}"
    let v406 : unit = ()
    let v407 : (unit -> unit) = closure7(v18, v398)
    let v408 : unit = (fun () -> v407 (); v406) ()
    let v416 : string = "environment_variables"
    let v417 : string = $"{v416}"
    let v425 : unit = ()
    let v426 : (unit -> unit) = closure7(v18, v417)
    let v427 : unit = (fun () -> v426 (); v425) ()
    let v434 : string = $"{v59}"
    let v442 : unit = ()
    let v443 : (unit -> unit) = closure7(v18, v434)
    let v444 : unit = (fun () -> v443 (); v442) ()
    let v451 : string = $"%A{v12}"
    let v455 : string = $"{v451}"
    let v463 : unit = ()
    let v464 : (unit -> unit) = closure7(v18, v455)
    let v465 : unit = (fun () -> v464 (); v463) ()
    let v472 : string = $"{v95}"
    let v480 : unit = ()
    let v481 : (unit -> unit) = closure7(v18, v472)
    let v482 : unit = (fun () -> v481 (); v480) ()
    let v490 : string = "on_line"
    let v491 : string = $"{v490}"
    let v499 : unit = ()
    let v500 : (unit -> unit) = closure7(v18, v491)
    let v501 : unit = (fun () -> v500 (); v499) ()
    let v508 : string = $"{v59}"
    let v516 : unit = ()
    let v517 : (unit -> unit) = closure7(v18, v508)
    let v518 : unit = (fun () -> v517 (); v516) ()
    (* run_target_args'
    let v528 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v529 : string = "format!(\"{:#?}\", $0)"
    let v530 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v529 
    let v531 : string = "fable_library_rust::String_::fromString($0)"
    let v532 : string = Fable.Core.RustInterop.emitRustExpr v530 v531 
    let _run_target_args'_v528 = v532 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v533 : string = "format!(\"{:#?}\", $0)"
    let v534 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v533 
    let v535 : string = "fable_library_rust::String_::fromString($0)"
    let v536 : string = Fable.Core.RustInterop.emitRustExpr v534 v535 
    let _run_target_args'_v528 = v536 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v537 : string = "format!(\"{:#?}\", $0)"
    let v538 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v537 
    let v539 : string = "fable_library_rust::String_::fromString($0)"
    let v540 : string = Fable.Core.RustInterop.emitRustExpr v538 v539 
    let _run_target_args'_v528 = v540 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v542 : string = $"%A{v13}"
    let _run_target_args'_v528 = v542 
    #endif
#if FABLE_COMPILER_PYTHON
    let v546 : string = $"%A{v13}"
    let _run_target_args'_v528 = v546 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v550 : string = $"%A{v13}"
    let _run_target_args'_v528 = v550 
    #endif
#else
    let v554 : string = $"%A{v13}"
    let _run_target_args'_v528 = v554 
    #endif
    let v557 : string = _run_target_args'_v528 
    let v564 : string = $"{v557}"
    let v572 : unit = ()
    let v573 : (unit -> unit) = closure7(v18, v564)
    let v574 : unit = (fun () -> v573 (); v572) ()
    let v581 : string = $"{v95}"
    let v589 : unit = ()
    let v590 : (unit -> unit) = closure7(v18, v581)
    let v591 : unit = (fun () -> v590 (); v589) ()
    let v599 : string = "stdin"
    let v600 : string = $"{v599}"
    let v608 : unit = ()
    let v609 : (unit -> unit) = closure7(v18, v600)
    let v610 : unit = (fun () -> v609 (); v608) ()
    let v617 : string = $"{v59}"
    let v625 : unit = ()
    let v626 : (unit -> unit) = closure7(v18, v617)
    let v627 : unit = (fun () -> v626 (); v625) ()
    (* run_target_args'
    let v637 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v638 : string = "format!(\"{:#?}\", $0)"
    let v639 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v638 
    let v640 : string = "fable_library_rust::String_::fromString($0)"
    let v641 : string = Fable.Core.RustInterop.emitRustExpr v639 v640 
    let _run_target_args'_v637 = v641 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v642 : string = "format!(\"{:#?}\", $0)"
    let v643 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v642 
    let v644 : string = "fable_library_rust::String_::fromString($0)"
    let v645 : string = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let _run_target_args'_v637 = v645 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v646 : string = "format!(\"{:#?}\", $0)"
    let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v646 
    let v648 : string = "fable_library_rust::String_::fromString($0)"
    let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let _run_target_args'_v637 = v649 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v651 : string = $"%A{v14}"
    let _run_target_args'_v637 = v651 
    #endif
#if FABLE_COMPILER_PYTHON
    let v655 : string = $"%A{v14}"
    let _run_target_args'_v637 = v655 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v659 : string = $"%A{v14}"
    let _run_target_args'_v637 = v659 
    #endif
#else
    let v663 : string = $"%A{v14}"
    let _run_target_args'_v637 = v663 
    #endif
    let v666 : string = _run_target_args'_v637 
    let v673 : string = $"{v666}"
    let v681 : unit = ()
    let v682 : (unit -> unit) = closure7(v18, v673)
    let v683 : unit = (fun () -> v682 (); v681) ()
    let v690 : string = $"{v95}"
    let v698 : unit = ()
    let v699 : (unit -> unit) = closure7(v18, v690)
    let v700 : unit = (fun () -> v699 (); v698) ()
    let v708 : string = "trace"
    let v709 : string = $"{v708}"
    let v717 : unit = ()
    let v718 : (unit -> unit) = closure7(v18, v709)
    let v719 : unit = (fun () -> v718 (); v717) ()
    let v726 : string = $"{v59}"
    let v734 : unit = ()
    let v735 : (unit -> unit) = closure7(v18, v726)
    let v736 : unit = (fun () -> v735 (); v734) ()
    let v744 : string =
        if v15 then
            let v742 : string = "true"
            v742
        else
            let v743 : string = "false"
            v743
    let v746 : string = $"{v744}"
    let v754 : unit = ()
    let v755 : (unit -> unit) = closure7(v18, v746)
    let v756 : unit = (fun () -> v755 (); v754) ()
    let v763 : string = $"{v95}"
    let v771 : unit = ()
    let v772 : (unit -> unit) = closure7(v18, v763)
    let v773 : unit = (fun () -> v772 (); v771) ()
    let v781 : string = "working_directory"
    let v782 : string = $"{v781}"
    let v790 : unit = ()
    let v791 : (unit -> unit) = closure7(v18, v782)
    let v792 : unit = (fun () -> v791 (); v790) ()
    let v799 : string = $"{v59}"
    let v807 : unit = ()
    let v808 : (unit -> unit) = closure7(v18, v799)
    let v809 : unit = (fun () -> v808 (); v807) ()
    (* run_target_args'
    let v819 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v820 : string = "format!(\"{:#?}\", $0)"
    let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v820 
    let v822 : string = "fable_library_rust::String_::fromString($0)"
    let v823 : string = Fable.Core.RustInterop.emitRustExpr v821 v822 
    let _run_target_args'_v819 = v823 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v824 : string = "format!(\"{:#?}\", $0)"
    let v825 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v824 
    let v826 : string = "fable_library_rust::String_::fromString($0)"
    let v827 : string = Fable.Core.RustInterop.emitRustExpr v825 v826 
    let _run_target_args'_v819 = v827 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v828 : string = "format!(\"{:#?}\", $0)"
    let v829 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v828 
    let v830 : string = "fable_library_rust::String_::fromString($0)"
    let v831 : string = Fable.Core.RustInterop.emitRustExpr v829 v830 
    let _run_target_args'_v819 = v831 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v833 : string = $"%A{v16}"
    let _run_target_args'_v819 = v833 
    #endif
#if FABLE_COMPILER_PYTHON
    let v837 : string = $"%A{v16}"
    let _run_target_args'_v819 = v837 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v841 : string = $"%A{v16}"
    let _run_target_args'_v819 = v841 
    #endif
#else
    let v845 : string = $"%A{v16}"
    let _run_target_args'_v819 = v845 
    #endif
    let v848 : string = _run_target_args'_v819 
    let v855 : string = $"{v848}"
    let v863 : unit = ()
    let v864 : (unit -> unit) = closure7(v18, v855)
    let v865 : unit = (fun () -> v864 (); v863) ()
    let v873 : string = " }"
    let v874 : string = $"{v873}"
    let v882 : unit = ()
    let v883 : (unit -> unit) = closure7(v18, v874)
    let v884 : unit = (fun () -> v883 (); v882) ()
    let v891 : string = $"{v873}"
    let v899 : unit = ()
    let v900 : (unit -> unit) = closure7(v18, v891)
    let v901 : unit = (fun () -> v900 (); v899) ()
    let v907 : string = v18.l0
    let v908 : int64 = v0.l0
    let v911 : string = " "
    let v912 : string = v6 + v911 
    let v916 : string = v912 + v7 
    let v921 : string = " #"
    let v922 : string = v916 + v921 
    let v926 : (int64 -> string) = _.ToString()
    let v927 : string = v926 v908
    let v931 : string = v922 + v927 
    let v935 : string = v931 + v911 
    let v940 : string = "runtime.execute_with_options"
    let v941 : string = v935 + v940 
    let v946 : string = " / "
    let v947 : string = v941 + v946 
    let v951 : string = v947 + v907 
    method16(v951)
and closure40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v25 : unit = ()
        let v26 : (unit -> unit) = closure2()
        let v27 : unit = (fun () -> v26 (); v25) ()
        let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
        let v66 : string = method8(v48, v49, v50, v51, v52, v53)
        let v67 : string = method12()
        let v69 : string = $"%A{v8}"
        let v72 : string = method116(v48, v49, v50, v51, v52, v53, v66, v67, v7, v69, v0, v1, v2, v3, v4, v5, v6)
        method17(v72)
and closure41 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method117 () : (std_process_Child option -> std_process_Child option) =
    closure41()
and closure42 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US27 =
    US27_0(v0)
and method118 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) =
    closure42()
and closure43 () (v0 : std_string_String) : US27 =
    US27_1(v0)
and method119 () : (std_string_String -> US27) =
    closure43()
and method120 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method13()
    let v19 : Mut3 = {l0 = v18} : Mut3
    let v22 : string = "{ "
    let v23 : string = $"{v22}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v19, v23)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v41 : string = "error"
    let v42 : string = $"{v41}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v19, v42)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v60 : string = " = "
    let v61 : string = $"{v60}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v19, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    (* run_target_args'
    let v81 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v81 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "format!(\"{:#?}\", $0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v86 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let _run_target_args'_v81 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "format!(\"{:#?}\", $0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v90 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let _run_target_args'_v81 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : string = $"%A{v8}"
    let _run_target_args'_v81 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v99 : string = $"%A{v8}"
    let _run_target_args'_v81 = v99 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : string = $"%A{v8}"
    let _run_target_args'_v81 = v103 
    #endif
#else
    let v107 : string = $"%A{v8}"
    let _run_target_args'_v81 = v107 
    #endif
    let v110 : string = _run_target_args'_v81 
    let v117 : string = $"{v110}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v19, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v135 : string = "; "
    let v136 : string = $"{v135}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v19, v136)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v154 : string = "file_name"
    let v155 : string = $"{v154}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v19, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v172 : string = $"{v60}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v19, v172)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v189 : string = $"{v9}"
    let v197 : unit = ()
    let v198 : (unit -> unit) = closure7(v19, v189)
    let v199 : unit = (fun () -> v198 (); v197) ()
    let v206 : string = $"{v135}"
    let v214 : unit = ()
    let v215 : (unit -> unit) = closure7(v19, v206)
    let v216 : unit = (fun () -> v215 (); v214) ()
    let v224 : string = "arguments"
    let v225 : string = $"{v224}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v19, v225)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v242 : string = $"{v60}"
    let v250 : unit = ()
    let v251 : (unit -> unit) = closure7(v19, v242)
    let v252 : unit = (fun () -> v251 (); v250) ()
    let v259 : string = $"{v10}"
    let v267 : unit = ()
    let v268 : (unit -> unit) = closure7(v19, v259)
    let v269 : unit = (fun () -> v268 (); v267) ()
    let v276 : string = $"{v135}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v19, v276)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v294 : string = "options"
    let v295 : string = $"{v294}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v19, v295)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v312 : string = $"{v60}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v19, v312)
    let v322 : unit = (fun () -> v321 (); v320) ()
    let v329 : string = $"{v22}"
    let v337 : unit = ()
    let v338 : (unit -> unit) = closure7(v19, v329)
    let v339 : unit = (fun () -> v338 (); v337) ()
    let v347 : string = "command"
    let v348 : string = $"{v347}"
    let v356 : unit = ()
    let v357 : (unit -> unit) = closure7(v19, v348)
    let v358 : unit = (fun () -> v357 (); v356) ()
    let v365 : string = $"{v60}"
    let v373 : unit = ()
    let v374 : (unit -> unit) = closure7(v19, v365)
    let v375 : unit = (fun () -> v374 (); v373) ()
    let v382 : string = $"{v11}"
    let v390 : unit = ()
    let v391 : (unit -> unit) = closure7(v19, v382)
    let v392 : unit = (fun () -> v391 (); v390) ()
    let v399 : string = $"{v135}"
    let v407 : unit = ()
    let v408 : (unit -> unit) = closure7(v19, v399)
    let v409 : unit = (fun () -> v408 (); v407) ()
    let v417 : string = "cancellation_token"
    let v418 : string = $"{v417}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v19, v418)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v435 : string = $"{v60}"
    let v443 : unit = ()
    let v444 : (unit -> unit) = closure7(v19, v435)
    let v445 : unit = (fun () -> v444 (); v443) ()
    (* run_target_args'
    let v455 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v456 : string = "format!(\"{:#?}\", $0)"
    let v457 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v456 
    let v458 : string = "fable_library_rust::String_::fromString($0)"
    let v459 : string = Fable.Core.RustInterop.emitRustExpr v457 v458 
    let _run_target_args'_v455 = v459 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v460 : string = "format!(\"{:#?}\", $0)"
    let v461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v460 
    let v462 : string = "fable_library_rust::String_::fromString($0)"
    let v463 : string = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let _run_target_args'_v455 = v463 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v464 : string = "format!(\"{:#?}\", $0)"
    let v465 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v464 
    let v466 : string = "fable_library_rust::String_::fromString($0)"
    let v467 : string = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let _run_target_args'_v455 = v467 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v469 : string = $"%A{v12}"
    let _run_target_args'_v455 = v469 
    #endif
#if FABLE_COMPILER_PYTHON
    let v473 : string = $"%A{v12}"
    let _run_target_args'_v455 = v473 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v477 : string = $"%A{v12}"
    let _run_target_args'_v455 = v477 
    #endif
#else
    let v481 : string = $"%A{v12}"
    let _run_target_args'_v455 = v481 
    #endif
    let v484 : string = _run_target_args'_v455 
    let v491 : string = $"{v484}"
    let v499 : unit = ()
    let v500 : (unit -> unit) = closure7(v19, v491)
    let v501 : unit = (fun () -> v500 (); v499) ()
    let v508 : string = $"{v135}"
    let v516 : unit = ()
    let v517 : (unit -> unit) = closure7(v19, v508)
    let v518 : unit = (fun () -> v517 (); v516) ()
    let v526 : string = "environment_variables"
    let v527 : string = $"{v526}"
    let v535 : unit = ()
    let v536 : (unit -> unit) = closure7(v19, v527)
    let v537 : unit = (fun () -> v536 (); v535) ()
    let v544 : string = $"{v60}"
    let v552 : unit = ()
    let v553 : (unit -> unit) = closure7(v19, v544)
    let v554 : unit = (fun () -> v553 (); v552) ()
    let v561 : string = $"%A{v13}"
    let v565 : string = $"{v561}"
    let v573 : unit = ()
    let v574 : (unit -> unit) = closure7(v19, v565)
    let v575 : unit = (fun () -> v574 (); v573) ()
    let v582 : string = $"{v135}"
    let v590 : unit = ()
    let v591 : (unit -> unit) = closure7(v19, v582)
    let v592 : unit = (fun () -> v591 (); v590) ()
    let v600 : string = "on_line"
    let v601 : string = $"{v600}"
    let v609 : unit = ()
    let v610 : (unit -> unit) = closure7(v19, v601)
    let v611 : unit = (fun () -> v610 (); v609) ()
    let v618 : string = $"{v60}"
    let v626 : unit = ()
    let v627 : (unit -> unit) = closure7(v19, v618)
    let v628 : unit = (fun () -> v627 (); v626) ()
    (* run_target_args'
    let v638 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v639 : string = "format!(\"{:#?}\", $0)"
    let v640 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v639 
    let v641 : string = "fable_library_rust::String_::fromString($0)"
    let v642 : string = Fable.Core.RustInterop.emitRustExpr v640 v641 
    let _run_target_args'_v638 = v642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v643 : string = "format!(\"{:#?}\", $0)"
    let v644 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v643 
    let v645 : string = "fable_library_rust::String_::fromString($0)"
    let v646 : string = Fable.Core.RustInterop.emitRustExpr v644 v645 
    let _run_target_args'_v638 = v646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v647 : string = "format!(\"{:#?}\", $0)"
    let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v647 
    let v649 : string = "fable_library_rust::String_::fromString($0)"
    let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
    let _run_target_args'_v638 = v650 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v652 : string = $"%A{v14}"
    let _run_target_args'_v638 = v652 
    #endif
#if FABLE_COMPILER_PYTHON
    let v656 : string = $"%A{v14}"
    let _run_target_args'_v638 = v656 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v660 : string = $"%A{v14}"
    let _run_target_args'_v638 = v660 
    #endif
#else
    let v664 : string = $"%A{v14}"
    let _run_target_args'_v638 = v664 
    #endif
    let v667 : string = _run_target_args'_v638 
    let v674 : string = $"{v667}"
    let v682 : unit = ()
    let v683 : (unit -> unit) = closure7(v19, v674)
    let v684 : unit = (fun () -> v683 (); v682) ()
    let v691 : string = $"{v135}"
    let v699 : unit = ()
    let v700 : (unit -> unit) = closure7(v19, v691)
    let v701 : unit = (fun () -> v700 (); v699) ()
    let v709 : string = "stdin"
    let v710 : string = $"{v709}"
    let v718 : unit = ()
    let v719 : (unit -> unit) = closure7(v19, v710)
    let v720 : unit = (fun () -> v719 (); v718) ()
    let v727 : string = $"{v60}"
    let v735 : unit = ()
    let v736 : (unit -> unit) = closure7(v19, v727)
    let v737 : unit = (fun () -> v736 (); v735) ()
    (* run_target_args'
    let v747 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v748 : string = "format!(\"{:#?}\", $0)"
    let v749 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v748 
    let v750 : string = "fable_library_rust::String_::fromString($0)"
    let v751 : string = Fable.Core.RustInterop.emitRustExpr v749 v750 
    let _run_target_args'_v747 = v751 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v752 : string = "format!(\"{:#?}\", $0)"
    let v753 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v752 
    let v754 : string = "fable_library_rust::String_::fromString($0)"
    let v755 : string = Fable.Core.RustInterop.emitRustExpr v753 v754 
    let _run_target_args'_v747 = v755 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v756 : string = "format!(\"{:#?}\", $0)"
    let v757 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v756 
    let v758 : string = "fable_library_rust::String_::fromString($0)"
    let v759 : string = Fable.Core.RustInterop.emitRustExpr v757 v758 
    let _run_target_args'_v747 = v759 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v761 : string = $"%A{v15}"
    let _run_target_args'_v747 = v761 
    #endif
#if FABLE_COMPILER_PYTHON
    let v765 : string = $"%A{v15}"
    let _run_target_args'_v747 = v765 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v769 : string = $"%A{v15}"
    let _run_target_args'_v747 = v769 
    #endif
#else
    let v773 : string = $"%A{v15}"
    let _run_target_args'_v747 = v773 
    #endif
    let v776 : string = _run_target_args'_v747 
    let v783 : string = $"{v776}"
    let v791 : unit = ()
    let v792 : (unit -> unit) = closure7(v19, v783)
    let v793 : unit = (fun () -> v792 (); v791) ()
    let v800 : string = $"{v135}"
    let v808 : unit = ()
    let v809 : (unit -> unit) = closure7(v19, v800)
    let v810 : unit = (fun () -> v809 (); v808) ()
    let v818 : string = "trace"
    let v819 : string = $"{v818}"
    let v827 : unit = ()
    let v828 : (unit -> unit) = closure7(v19, v819)
    let v829 : unit = (fun () -> v828 (); v827) ()
    let v836 : string = $"{v60}"
    let v844 : unit = ()
    let v845 : (unit -> unit) = closure7(v19, v836)
    let v846 : unit = (fun () -> v845 (); v844) ()
    let v854 : string =
        if v16 then
            let v852 : string = "true"
            v852
        else
            let v853 : string = "false"
            v853
    let v856 : string = $"{v854}"
    let v864 : unit = ()
    let v865 : (unit -> unit) = closure7(v19, v856)
    let v866 : unit = (fun () -> v865 (); v864) ()
    let v873 : string = $"{v135}"
    let v881 : unit = ()
    let v882 : (unit -> unit) = closure7(v19, v873)
    let v883 : unit = (fun () -> v882 (); v881) ()
    let v891 : string = "working_directory"
    let v892 : string = $"{v891}"
    let v900 : unit = ()
    let v901 : (unit -> unit) = closure7(v19, v892)
    let v902 : unit = (fun () -> v901 (); v900) ()
    let v909 : string = $"{v60}"
    let v917 : unit = ()
    let v918 : (unit -> unit) = closure7(v19, v909)
    let v919 : unit = (fun () -> v918 (); v917) ()
    (* run_target_args'
    let v929 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v930 : string = "format!(\"{:#?}\", $0)"
    let v931 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v930 
    let v932 : string = "fable_library_rust::String_::fromString($0)"
    let v933 : string = Fable.Core.RustInterop.emitRustExpr v931 v932 
    let _run_target_args'_v929 = v933 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v934 : string = "format!(\"{:#?}\", $0)"
    let v935 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v934 
    let v936 : string = "fable_library_rust::String_::fromString($0)"
    let v937 : string = Fable.Core.RustInterop.emitRustExpr v935 v936 
    let _run_target_args'_v929 = v937 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v938 : string = "format!(\"{:#?}\", $0)"
    let v939 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v938 
    let v940 : string = "fable_library_rust::String_::fromString($0)"
    let v941 : string = Fable.Core.RustInterop.emitRustExpr v939 v940 
    let _run_target_args'_v929 = v941 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v943 : string = $"%A{v17}"
    let _run_target_args'_v929 = v943 
    #endif
#if FABLE_COMPILER_PYTHON
    let v947 : string = $"%A{v17}"
    let _run_target_args'_v929 = v947 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v951 : string = $"%A{v17}"
    let _run_target_args'_v929 = v951 
    #endif
#else
    let v955 : string = $"%A{v17}"
    let _run_target_args'_v929 = v955 
    #endif
    let v958 : string = _run_target_args'_v929 
    let v965 : string = $"{v958}"
    let v973 : unit = ()
    let v974 : (unit -> unit) = closure7(v19, v965)
    let v975 : unit = (fun () -> v974 (); v973) ()
    let v983 : string = " }"
    let v984 : string = $"{v983}"
    let v992 : unit = ()
    let v993 : (unit -> unit) = closure7(v19, v984)
    let v994 : unit = (fun () -> v993 (); v992) ()
    let v1001 : string = $"{v983}"
    let v1009 : unit = ()
    let v1010 : (unit -> unit) = closure7(v19, v1001)
    let v1011 : unit = (fun () -> v1010 (); v1009) ()
    let v1017 : string = v19.l0
    let v1018 : int64 = v0.l0
    let v1021 : string = " "
    let v1022 : string = v6 + v1021 
    let v1026 : string = v1022 + v7 
    let v1031 : string = " #"
    let v1032 : string = v1026 + v1031 
    let v1036 : (int64 -> string) = _.ToString()
    let v1037 : string = v1036 v1018
    let v1041 : string = v1032 + v1037 
    let v1045 : string = v1041 + v1021 
    let v1050 : string = "runtime.execute_with_options / child error"
    let v1051 : string = v1045 + v1050 
    let v1056 : string = " / "
    let v1057 : string = v1051 + v1056 
    let v1061 : string = v1057 + v1017 
    method16(v1061)
and closure44 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v10 : US0 = US0_4
    let v11 : bool = method7(v10)
    if v11 then
        let v26 : unit = ()
        let v27 : (unit -> unit) = closure2()
        let v28 : unit = (fun () -> v27 (); v26) ()
        let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
        let v67 : string = method8(v49, v50, v51, v52, v53, v54)
        let v68 : string = method76()
        let v70 : string = $"%A{v8}"
        let v73 : string = method120(v49, v50, v51, v52, v53, v54, v67, v68, v9, v7, v70, v0, v1, v2, v3, v4, v5, v6)
        method17(v73)
and method121 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure45 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method122 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure45()
and closure46 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method123 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and method124 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and closure47 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method125 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure47()
and closure48 () (v0 : std_string_String) : US29 =
    US29_0(v0)
and method126 () : (std_string_String -> US29) =
    closure48()
and closure49 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method127 () : (std_string_String -> US29) =
    closure49()
and method128 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "trace'"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v71 : string =
        if v8 then
            let v69 : string = "true"
            v69
        else
            let v70 : string = "false"
            v70
    let v73 : string = $"{v71}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "e"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    (* run_target_args'
    let v148 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "format!(\"{:#?}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v149 
    let v151 : string = "fable_library_rust::String_::fromString($0)"
    let v152 : string = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let _run_target_args'_v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : string = "format!(\"{:#?}\", $0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v153 
    let v155 : string = "fable_library_rust::String_::fromString($0)"
    let v156 : string = Fable.Core.RustInterop.emitRustExpr v154 v155 
    let _run_target_args'_v148 = v156 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v157 : string = "format!(\"{:#?}\", $0)"
    let v158 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v157 
    let v159 : string = "fable_library_rust::String_::fromString($0)"
    let v160 : string = Fable.Core.RustInterop.emitRustExpr v158 v159 
    let _run_target_args'_v148 = v160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v162 : string = $"%A{v9}"
    let _run_target_args'_v148 = v162 
    #endif
#if FABLE_COMPILER_PYTHON
    let v166 : string = $"%A{v9}"
    let _run_target_args'_v148 = v166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v170 : string = $"%A{v9}"
    let _run_target_args'_v148 = v170 
    #endif
#else
    let v174 : string = $"%A{v9}"
    let _run_target_args'_v148 = v174 
    #endif
    let v177 : string = _run_target_args'_v148 
    let v184 : string = $"{v177}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v11, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v202 : string = " }"
    let v203 : string = $"{v202}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v11, v203)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v219 : string = v11.l0
    let v220 : int64 = v0.l0
    let v223 : string = " "
    let v224 : string = v6 + v223 
    let v228 : string = v224 + v7 
    let v233 : string = " #"
    let v234 : string = v228 + v233 
    let v238 : (int64 -> string) = _.ToString()
    let v239 : string = v238 v220
    let v243 : string = v234 + v239 
    let v247 : string = v243 + v223 
    let v252 : string = "runtime.stdio_line"
    let v253 : string = v247 + v252 
    let v258 : string = " / "
    let v259 : string = v253 + v258 
    let v263 : string = v259 + v219 
    method16(v263)
and closure50 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method128(v41, v42, v43, v44, v45, v46, v59, v60, v0, v1)
        method17(v61)
and method129 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = v10.l0
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v43 : string = v39 + v8 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v11 
    method16(v53)
and closure51 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method78()
        let v60 : bool = v0 = ""
        let v63 : string =
            if v60 then
                let v61 : string = ""
                v61
            else
                method129(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v63)
and closure52 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method130 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure52()
and method131 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure53 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US30 =
    US30_0(v0)
and method132 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) =
    closure53()
and method133 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure54 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US31 =
    US31_0(v0)
and method134 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) =
    closure54()
and method135 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure55 () (v0 : std_process_Output) : US32 =
    US32_0(v0)
and method136 () : (std_process_Output -> US32) =
    closure55()
and closure56 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and method137 () : (std_string_String -> US32) =
    closure56()
and method138 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method13()
    let v19 : Mut3 = {l0 = v18} : Mut3
    let v22 : string = "{ "
    let v23 : string = $"{v22}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v19, v23)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v41 : string = "error"
    let v42 : string = $"{v41}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v19, v42)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v60 : string = " = "
    let v61 : string = $"{v60}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v19, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    (* run_target_args'
    let v81 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v81 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "format!(\"{:#?}\", $0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v86 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let _run_target_args'_v81 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "format!(\"{:#?}\", $0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v90 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let _run_target_args'_v81 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : string = $"%A{v8}"
    let _run_target_args'_v81 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v99 : string = $"%A{v8}"
    let _run_target_args'_v81 = v99 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : string = $"%A{v8}"
    let _run_target_args'_v81 = v103 
    #endif
#else
    let v107 : string = $"%A{v8}"
    let _run_target_args'_v81 = v107 
    #endif
    let v110 : string = _run_target_args'_v81 
    let v117 : string = $"{v110}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v19, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v135 : string = "; "
    let v136 : string = $"{v135}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v19, v136)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v154 : string = "file_name"
    let v155 : string = $"{v154}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v19, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v172 : string = $"{v60}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v19, v172)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v189 : string = $"{v9}"
    let v197 : unit = ()
    let v198 : (unit -> unit) = closure7(v19, v189)
    let v199 : unit = (fun () -> v198 (); v197) ()
    let v206 : string = $"{v135}"
    let v214 : unit = ()
    let v215 : (unit -> unit) = closure7(v19, v206)
    let v216 : unit = (fun () -> v215 (); v214) ()
    let v224 : string = "arguments"
    let v225 : string = $"{v224}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v19, v225)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v242 : string = $"{v60}"
    let v250 : unit = ()
    let v251 : (unit -> unit) = closure7(v19, v242)
    let v252 : unit = (fun () -> v251 (); v250) ()
    let v259 : string = $"{v10}"
    let v267 : unit = ()
    let v268 : (unit -> unit) = closure7(v19, v259)
    let v269 : unit = (fun () -> v268 (); v267) ()
    let v276 : string = $"{v135}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v19, v276)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v294 : string = "options"
    let v295 : string = $"{v294}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v19, v295)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v312 : string = $"{v60}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v19, v312)
    let v322 : unit = (fun () -> v321 (); v320) ()
    let v329 : string = $"{v22}"
    let v337 : unit = ()
    let v338 : (unit -> unit) = closure7(v19, v329)
    let v339 : unit = (fun () -> v338 (); v337) ()
    let v347 : string = "command"
    let v348 : string = $"{v347}"
    let v356 : unit = ()
    let v357 : (unit -> unit) = closure7(v19, v348)
    let v358 : unit = (fun () -> v357 (); v356) ()
    let v365 : string = $"{v60}"
    let v373 : unit = ()
    let v374 : (unit -> unit) = closure7(v19, v365)
    let v375 : unit = (fun () -> v374 (); v373) ()
    let v382 : string = $"{v11}"
    let v390 : unit = ()
    let v391 : (unit -> unit) = closure7(v19, v382)
    let v392 : unit = (fun () -> v391 (); v390) ()
    let v399 : string = $"{v135}"
    let v407 : unit = ()
    let v408 : (unit -> unit) = closure7(v19, v399)
    let v409 : unit = (fun () -> v408 (); v407) ()
    let v417 : string = "cancellation_token"
    let v418 : string = $"{v417}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v19, v418)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v435 : string = $"{v60}"
    let v443 : unit = ()
    let v444 : (unit -> unit) = closure7(v19, v435)
    let v445 : unit = (fun () -> v444 (); v443) ()
    (* run_target_args'
    let v455 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v456 : string = "format!(\"{:#?}\", $0)"
    let v457 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v456 
    let v458 : string = "fable_library_rust::String_::fromString($0)"
    let v459 : string = Fable.Core.RustInterop.emitRustExpr v457 v458 
    let _run_target_args'_v455 = v459 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v460 : string = "format!(\"{:#?}\", $0)"
    let v461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v460 
    let v462 : string = "fable_library_rust::String_::fromString($0)"
    let v463 : string = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let _run_target_args'_v455 = v463 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v464 : string = "format!(\"{:#?}\", $0)"
    let v465 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v464 
    let v466 : string = "fable_library_rust::String_::fromString($0)"
    let v467 : string = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let _run_target_args'_v455 = v467 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v469 : string = $"%A{v12}"
    let _run_target_args'_v455 = v469 
    #endif
#if FABLE_COMPILER_PYTHON
    let v473 : string = $"%A{v12}"
    let _run_target_args'_v455 = v473 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v477 : string = $"%A{v12}"
    let _run_target_args'_v455 = v477 
    #endif
#else
    let v481 : string = $"%A{v12}"
    let _run_target_args'_v455 = v481 
    #endif
    let v484 : string = _run_target_args'_v455 
    let v491 : string = $"{v484}"
    let v499 : unit = ()
    let v500 : (unit -> unit) = closure7(v19, v491)
    let v501 : unit = (fun () -> v500 (); v499) ()
    let v508 : string = $"{v135}"
    let v516 : unit = ()
    let v517 : (unit -> unit) = closure7(v19, v508)
    let v518 : unit = (fun () -> v517 (); v516) ()
    let v526 : string = "environment_variables"
    let v527 : string = $"{v526}"
    let v535 : unit = ()
    let v536 : (unit -> unit) = closure7(v19, v527)
    let v537 : unit = (fun () -> v536 (); v535) ()
    let v544 : string = $"{v60}"
    let v552 : unit = ()
    let v553 : (unit -> unit) = closure7(v19, v544)
    let v554 : unit = (fun () -> v553 (); v552) ()
    let v561 : string = $"%A{v13}"
    let v565 : string = $"{v561}"
    let v573 : unit = ()
    let v574 : (unit -> unit) = closure7(v19, v565)
    let v575 : unit = (fun () -> v574 (); v573) ()
    let v582 : string = $"{v135}"
    let v590 : unit = ()
    let v591 : (unit -> unit) = closure7(v19, v582)
    let v592 : unit = (fun () -> v591 (); v590) ()
    let v600 : string = "on_line"
    let v601 : string = $"{v600}"
    let v609 : unit = ()
    let v610 : (unit -> unit) = closure7(v19, v601)
    let v611 : unit = (fun () -> v610 (); v609) ()
    let v618 : string = $"{v60}"
    let v626 : unit = ()
    let v627 : (unit -> unit) = closure7(v19, v618)
    let v628 : unit = (fun () -> v627 (); v626) ()
    (* run_target_args'
    let v638 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v639 : string = "format!(\"{:#?}\", $0)"
    let v640 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v639 
    let v641 : string = "fable_library_rust::String_::fromString($0)"
    let v642 : string = Fable.Core.RustInterop.emitRustExpr v640 v641 
    let _run_target_args'_v638 = v642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v643 : string = "format!(\"{:#?}\", $0)"
    let v644 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v643 
    let v645 : string = "fable_library_rust::String_::fromString($0)"
    let v646 : string = Fable.Core.RustInterop.emitRustExpr v644 v645 
    let _run_target_args'_v638 = v646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v647 : string = "format!(\"{:#?}\", $0)"
    let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v647 
    let v649 : string = "fable_library_rust::String_::fromString($0)"
    let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
    let _run_target_args'_v638 = v650 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v652 : string = $"%A{v14}"
    let _run_target_args'_v638 = v652 
    #endif
#if FABLE_COMPILER_PYTHON
    let v656 : string = $"%A{v14}"
    let _run_target_args'_v638 = v656 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v660 : string = $"%A{v14}"
    let _run_target_args'_v638 = v660 
    #endif
#else
    let v664 : string = $"%A{v14}"
    let _run_target_args'_v638 = v664 
    #endif
    let v667 : string = _run_target_args'_v638 
    let v674 : string = $"{v667}"
    let v682 : unit = ()
    let v683 : (unit -> unit) = closure7(v19, v674)
    let v684 : unit = (fun () -> v683 (); v682) ()
    let v691 : string = $"{v135}"
    let v699 : unit = ()
    let v700 : (unit -> unit) = closure7(v19, v691)
    let v701 : unit = (fun () -> v700 (); v699) ()
    let v709 : string = "stdin"
    let v710 : string = $"{v709}"
    let v718 : unit = ()
    let v719 : (unit -> unit) = closure7(v19, v710)
    let v720 : unit = (fun () -> v719 (); v718) ()
    let v727 : string = $"{v60}"
    let v735 : unit = ()
    let v736 : (unit -> unit) = closure7(v19, v727)
    let v737 : unit = (fun () -> v736 (); v735) ()
    (* run_target_args'
    let v747 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v748 : string = "format!(\"{:#?}\", $0)"
    let v749 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v748 
    let v750 : string = "fable_library_rust::String_::fromString($0)"
    let v751 : string = Fable.Core.RustInterop.emitRustExpr v749 v750 
    let _run_target_args'_v747 = v751 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v752 : string = "format!(\"{:#?}\", $0)"
    let v753 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v752 
    let v754 : string = "fable_library_rust::String_::fromString($0)"
    let v755 : string = Fable.Core.RustInterop.emitRustExpr v753 v754 
    let _run_target_args'_v747 = v755 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v756 : string = "format!(\"{:#?}\", $0)"
    let v757 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v756 
    let v758 : string = "fable_library_rust::String_::fromString($0)"
    let v759 : string = Fable.Core.RustInterop.emitRustExpr v757 v758 
    let _run_target_args'_v747 = v759 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v761 : string = $"%A{v15}"
    let _run_target_args'_v747 = v761 
    #endif
#if FABLE_COMPILER_PYTHON
    let v765 : string = $"%A{v15}"
    let _run_target_args'_v747 = v765 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v769 : string = $"%A{v15}"
    let _run_target_args'_v747 = v769 
    #endif
#else
    let v773 : string = $"%A{v15}"
    let _run_target_args'_v747 = v773 
    #endif
    let v776 : string = _run_target_args'_v747 
    let v783 : string = $"{v776}"
    let v791 : unit = ()
    let v792 : (unit -> unit) = closure7(v19, v783)
    let v793 : unit = (fun () -> v792 (); v791) ()
    let v800 : string = $"{v135}"
    let v808 : unit = ()
    let v809 : (unit -> unit) = closure7(v19, v800)
    let v810 : unit = (fun () -> v809 (); v808) ()
    let v818 : string = "trace"
    let v819 : string = $"{v818}"
    let v827 : unit = ()
    let v828 : (unit -> unit) = closure7(v19, v819)
    let v829 : unit = (fun () -> v828 (); v827) ()
    let v836 : string = $"{v60}"
    let v844 : unit = ()
    let v845 : (unit -> unit) = closure7(v19, v836)
    let v846 : unit = (fun () -> v845 (); v844) ()
    let v854 : string =
        if v16 then
            let v852 : string = "true"
            v852
        else
            let v853 : string = "false"
            v853
    let v856 : string = $"{v854}"
    let v864 : unit = ()
    let v865 : (unit -> unit) = closure7(v19, v856)
    let v866 : unit = (fun () -> v865 (); v864) ()
    let v873 : string = $"{v135}"
    let v881 : unit = ()
    let v882 : (unit -> unit) = closure7(v19, v873)
    let v883 : unit = (fun () -> v882 (); v881) ()
    let v891 : string = "working_directory"
    let v892 : string = $"{v891}"
    let v900 : unit = ()
    let v901 : (unit -> unit) = closure7(v19, v892)
    let v902 : unit = (fun () -> v901 (); v900) ()
    let v909 : string = $"{v60}"
    let v917 : unit = ()
    let v918 : (unit -> unit) = closure7(v19, v909)
    let v919 : unit = (fun () -> v918 (); v917) ()
    (* run_target_args'
    let v929 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v930 : string = "format!(\"{:#?}\", $0)"
    let v931 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v930 
    let v932 : string = "fable_library_rust::String_::fromString($0)"
    let v933 : string = Fable.Core.RustInterop.emitRustExpr v931 v932 
    let _run_target_args'_v929 = v933 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v934 : string = "format!(\"{:#?}\", $0)"
    let v935 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v934 
    let v936 : string = "fable_library_rust::String_::fromString($0)"
    let v937 : string = Fable.Core.RustInterop.emitRustExpr v935 v936 
    let _run_target_args'_v929 = v937 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v938 : string = "format!(\"{:#?}\", $0)"
    let v939 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v938 
    let v940 : string = "fable_library_rust::String_::fromString($0)"
    let v941 : string = Fable.Core.RustInterop.emitRustExpr v939 v940 
    let _run_target_args'_v929 = v941 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v943 : string = $"%A{v17}"
    let _run_target_args'_v929 = v943 
    #endif
#if FABLE_COMPILER_PYTHON
    let v947 : string = $"%A{v17}"
    let _run_target_args'_v929 = v947 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v951 : string = $"%A{v17}"
    let _run_target_args'_v929 = v951 
    #endif
#else
    let v955 : string = $"%A{v17}"
    let _run_target_args'_v929 = v955 
    #endif
    let v958 : string = _run_target_args'_v929 
    let v965 : string = $"{v958}"
    let v973 : unit = ()
    let v974 : (unit -> unit) = closure7(v19, v965)
    let v975 : unit = (fun () -> v974 (); v973) ()
    let v983 : string = " }"
    let v984 : string = $"{v983}"
    let v992 : unit = ()
    let v993 : (unit -> unit) = closure7(v19, v984)
    let v994 : unit = (fun () -> v993 (); v992) ()
    let v1001 : string = $"{v983}"
    let v1009 : unit = ()
    let v1010 : (unit -> unit) = closure7(v19, v1001)
    let v1011 : unit = (fun () -> v1010 (); v1009) ()
    let v1017 : string = v19.l0
    let v1018 : int64 = v0.l0
    let v1021 : string = " "
    let v1022 : string = v6 + v1021 
    let v1026 : string = v1022 + v7 
    let v1031 : string = " #"
    let v1032 : string = v1026 + v1031 
    let v1036 : (int64 -> string) = _.ToString()
    let v1037 : string = v1036 v1018
    let v1041 : string = v1032 + v1037 
    let v1045 : string = v1041 + v1021 
    let v1050 : string = "runtime.execute_with_options / output error"
    let v1051 : string = v1045 + v1050 
    let v1056 : string = " / "
    let v1057 : string = v1051 + v1056 
    let v1061 : string = v1057 + v1017 
    method16(v1061)
and closure57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v10 : US0 = US0_4
    let v11 : bool = method7(v10)
    if v11 then
        let v26 : unit = ()
        let v27 : (unit -> unit) = closure2()
        let v28 : unit = (fun () -> v27 (); v26) ()
        let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
        let v67 : string = method8(v49, v50, v51, v52, v53, v54)
        let v68 : string = method76()
        let v70 : string = $"%A{v8}"
        let v73 : string = method138(v49, v50, v51, v52, v53, v54, v67, v68, v9, v7, v70, v0, v1, v2, v3, v4, v5, v6)
        method17(v73)
and closure58 () (v0 : int32) : US33 =
    US33_0(v0)
and method139 () : (int32 -> US33) =
    closure58()
and method140 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "std_trace_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "runtime.execute_with_options / result"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure59 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method78()
        let v61 : int32 = v1.Length
        let v62 : string = method140(v41, v42, v43, v44, v45, v46, v59, v60, v0, v61)
        method17(v62)
and method143 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method13()
    let v18 : Mut3 = {l0 = v17} : Mut3
    let v21 : string = "{ "
    let v22 : string = $"{v21}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v18, v22)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v40 : string = "file_name"
    let v41 : string = $"{v40}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v18, v41)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v59 : string = " = "
    let v60 : string = $"{v59}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v18, v60)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v77 : string = $"{v8}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v18, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v18, v96)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v114 : string = "arguments"
    let v115 : string = $"{v114}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v18, v115)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v132 : string = $"{v59}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v18, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v149 : string = $"%A{v9}"
    let v153 : string = $"{v149}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v18, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v170 : string = $"{v95}"
    let v178 : unit = ()
    let v179 : (unit -> unit) = closure7(v18, v170)
    let v180 : unit = (fun () -> v179 (); v178) ()
    let v188 : string = "options"
    let v189 : string = $"{v188}"
    let v197 : unit = ()
    let v198 : (unit -> unit) = closure7(v18, v189)
    let v199 : unit = (fun () -> v198 (); v197) ()
    let v206 : string = $"{v59}"
    let v214 : unit = ()
    let v215 : (unit -> unit) = closure7(v18, v206)
    let v216 : unit = (fun () -> v215 (); v214) ()
    let v223 : string = $"{v21}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v18, v223)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v241 : string = "command"
    let v242 : string = $"{v241}"
    let v250 : unit = ()
    let v251 : (unit -> unit) = closure7(v18, v242)
    let v252 : unit = (fun () -> v251 (); v250) ()
    let v259 : string = $"{v59}"
    let v267 : unit = ()
    let v268 : (unit -> unit) = closure7(v18, v259)
    let v269 : unit = (fun () -> v268 (); v267) ()
    let v276 : string = $"{v10}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v18, v276)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v293 : string = $"{v95}"
    let v301 : unit = ()
    let v302 : (unit -> unit) = closure7(v18, v293)
    let v303 : unit = (fun () -> v302 (); v301) ()
    let v311 : string = "cancellation_token"
    let v312 : string = $"{v311}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v18, v312)
    let v322 : unit = (fun () -> v321 (); v320) ()
    let v329 : string = $"{v59}"
    let v337 : unit = ()
    let v338 : (unit -> unit) = closure7(v18, v329)
    let v339 : unit = (fun () -> v338 (); v337) ()
    (* run_target_args'
    let v349 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v350 : string = "format!(\"{:#?}\", $0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v350 
    let v352 : string = "fable_library_rust::String_::fromString($0)"
    let v353 : string = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let _run_target_args'_v349 = v353 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v354 : string = "format!(\"{:#?}\", $0)"
    let v355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v354 
    let v356 : string = "fable_library_rust::String_::fromString($0)"
    let v357 : string = Fable.Core.RustInterop.emitRustExpr v355 v356 
    let _run_target_args'_v349 = v357 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v358 : string = "format!(\"{:#?}\", $0)"
    let v359 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v358 
    let v360 : string = "fable_library_rust::String_::fromString($0)"
    let v361 : string = Fable.Core.RustInterop.emitRustExpr v359 v360 
    let _run_target_args'_v349 = v361 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v363 : string = $"%A{v11}"
    let _run_target_args'_v349 = v363 
    #endif
#if FABLE_COMPILER_PYTHON
    let v367 : string = $"%A{v11}"
    let _run_target_args'_v349 = v367 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v371 : string = $"%A{v11}"
    let _run_target_args'_v349 = v371 
    #endif
#else
    let v375 : string = $"%A{v11}"
    let _run_target_args'_v349 = v375 
    #endif
    let v378 : string = _run_target_args'_v349 
    let v385 : string = $"{v378}"
    let v393 : unit = ()
    let v394 : (unit -> unit) = closure7(v18, v385)
    let v395 : unit = (fun () -> v394 (); v393) ()
    let v402 : string = $"{v95}"
    let v410 : unit = ()
    let v411 : (unit -> unit) = closure7(v18, v402)
    let v412 : unit = (fun () -> v411 (); v410) ()
    let v420 : string = "environment_variables"
    let v421 : string = $"{v420}"
    let v429 : unit = ()
    let v430 : (unit -> unit) = closure7(v18, v421)
    let v431 : unit = (fun () -> v430 (); v429) ()
    let v438 : string = $"{v59}"
    let v446 : unit = ()
    let v447 : (unit -> unit) = closure7(v18, v438)
    let v448 : unit = (fun () -> v447 (); v446) ()
    let v455 : string = $"%A{v12}"
    let v459 : string = $"{v455}"
    let v467 : unit = ()
    let v468 : (unit -> unit) = closure7(v18, v459)
    let v469 : unit = (fun () -> v468 (); v467) ()
    let v476 : string = $"{v95}"
    let v484 : unit = ()
    let v485 : (unit -> unit) = closure7(v18, v476)
    let v486 : unit = (fun () -> v485 (); v484) ()
    let v494 : string = "on_line"
    let v495 : string = $"{v494}"
    let v503 : unit = ()
    let v504 : (unit -> unit) = closure7(v18, v495)
    let v505 : unit = (fun () -> v504 (); v503) ()
    let v512 : string = $"{v59}"
    let v520 : unit = ()
    let v521 : (unit -> unit) = closure7(v18, v512)
    let v522 : unit = (fun () -> v521 (); v520) ()
    (* run_target_args'
    let v532 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v533 : string = "format!(\"{:#?}\", $0)"
    let v534 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v533 
    let v535 : string = "fable_library_rust::String_::fromString($0)"
    let v536 : string = Fable.Core.RustInterop.emitRustExpr v534 v535 
    let _run_target_args'_v532 = v536 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v537 : string = "format!(\"{:#?}\", $0)"
    let v538 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v537 
    let v539 : string = "fable_library_rust::String_::fromString($0)"
    let v540 : string = Fable.Core.RustInterop.emitRustExpr v538 v539 
    let _run_target_args'_v532 = v540 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v541 : string = "format!(\"{:#?}\", $0)"
    let v542 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v541 
    let v543 : string = "fable_library_rust::String_::fromString($0)"
    let v544 : string = Fable.Core.RustInterop.emitRustExpr v542 v543 
    let _run_target_args'_v532 = v544 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v546 : string = $"%A{v13}"
    let _run_target_args'_v532 = v546 
    #endif
#if FABLE_COMPILER_PYTHON
    let v550 : string = $"%A{v13}"
    let _run_target_args'_v532 = v550 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v554 : string = $"%A{v13}"
    let _run_target_args'_v532 = v554 
    #endif
#else
    let v558 : string = $"%A{v13}"
    let _run_target_args'_v532 = v558 
    #endif
    let v561 : string = _run_target_args'_v532 
    let v568 : string = $"{v561}"
    let v576 : unit = ()
    let v577 : (unit -> unit) = closure7(v18, v568)
    let v578 : unit = (fun () -> v577 (); v576) ()
    let v585 : string = $"{v95}"
    let v593 : unit = ()
    let v594 : (unit -> unit) = closure7(v18, v585)
    let v595 : unit = (fun () -> v594 (); v593) ()
    let v603 : string = "stdin"
    let v604 : string = $"{v603}"
    let v612 : unit = ()
    let v613 : (unit -> unit) = closure7(v18, v604)
    let v614 : unit = (fun () -> v613 (); v612) ()
    let v621 : string = $"{v59}"
    let v629 : unit = ()
    let v630 : (unit -> unit) = closure7(v18, v621)
    let v631 : unit = (fun () -> v630 (); v629) ()
    (* run_target_args'
    let v641 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v642 : string = "format!(\"{:#?}\", $0)"
    let v643 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v642 
    let v644 : string = "fable_library_rust::String_::fromString($0)"
    let v645 : string = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let _run_target_args'_v641 = v645 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v646 : string = "format!(\"{:#?}\", $0)"
    let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v646 
    let v648 : string = "fable_library_rust::String_::fromString($0)"
    let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let _run_target_args'_v641 = v649 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v650 : string = "format!(\"{:#?}\", $0)"
    let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v650 
    let v652 : string = "fable_library_rust::String_::fromString($0)"
    let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
    let _run_target_args'_v641 = v653 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v655 : string = $"%A{v14}"
    let _run_target_args'_v641 = v655 
    #endif
#if FABLE_COMPILER_PYTHON
    let v659 : string = $"%A{v14}"
    let _run_target_args'_v641 = v659 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v663 : string = $"%A{v14}"
    let _run_target_args'_v641 = v663 
    #endif
#else
    let v667 : string = $"%A{v14}"
    let _run_target_args'_v641 = v667 
    #endif
    let v670 : string = _run_target_args'_v641 
    let v677 : string = $"{v670}"
    let v685 : unit = ()
    let v686 : (unit -> unit) = closure7(v18, v677)
    let v687 : unit = (fun () -> v686 (); v685) ()
    let v694 : string = $"{v95}"
    let v702 : unit = ()
    let v703 : (unit -> unit) = closure7(v18, v694)
    let v704 : unit = (fun () -> v703 (); v702) ()
    let v712 : string = "trace"
    let v713 : string = $"{v712}"
    let v721 : unit = ()
    let v722 : (unit -> unit) = closure7(v18, v713)
    let v723 : unit = (fun () -> v722 (); v721) ()
    let v730 : string = $"{v59}"
    let v738 : unit = ()
    let v739 : (unit -> unit) = closure7(v18, v730)
    let v740 : unit = (fun () -> v739 (); v738) ()
    let v748 : string =
        if v15 then
            let v746 : string = "true"
            v746
        else
            let v747 : string = "false"
            v747
    let v750 : string = $"{v748}"
    let v758 : unit = ()
    let v759 : (unit -> unit) = closure7(v18, v750)
    let v760 : unit = (fun () -> v759 (); v758) ()
    let v767 : string = $"{v95}"
    let v775 : unit = ()
    let v776 : (unit -> unit) = closure7(v18, v767)
    let v777 : unit = (fun () -> v776 (); v775) ()
    let v785 : string = "working_directory"
    let v786 : string = $"{v785}"
    let v794 : unit = ()
    let v795 : (unit -> unit) = closure7(v18, v786)
    let v796 : unit = (fun () -> v795 (); v794) ()
    let v803 : string = $"{v59}"
    let v811 : unit = ()
    let v812 : (unit -> unit) = closure7(v18, v803)
    let v813 : unit = (fun () -> v812 (); v811) ()
    (* run_target_args'
    let v823 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v824 : string = "format!(\"{:#?}\", $0)"
    let v825 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v824 
    let v826 : string = "fable_library_rust::String_::fromString($0)"
    let v827 : string = Fable.Core.RustInterop.emitRustExpr v825 v826 
    let _run_target_args'_v823 = v827 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v828 : string = "format!(\"{:#?}\", $0)"
    let v829 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v828 
    let v830 : string = "fable_library_rust::String_::fromString($0)"
    let v831 : string = Fable.Core.RustInterop.emitRustExpr v829 v830 
    let _run_target_args'_v823 = v831 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v832 : string = "format!(\"{:#?}\", $0)"
    let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v832 
    let v834 : string = "fable_library_rust::String_::fromString($0)"
    let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
    let _run_target_args'_v823 = v835 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v837 : string = $"%A{v16}"
    let _run_target_args'_v823 = v837 
    #endif
#if FABLE_COMPILER_PYTHON
    let v841 : string = $"%A{v16}"
    let _run_target_args'_v823 = v841 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v845 : string = $"%A{v16}"
    let _run_target_args'_v823 = v845 
    #endif
#else
    let v849 : string = $"%A{v16}"
    let _run_target_args'_v823 = v849 
    #endif
    let v852 : string = _run_target_args'_v823 
    let v859 : string = $"{v852}"
    let v867 : unit = ()
    let v868 : (unit -> unit) = closure7(v18, v859)
    let v869 : unit = (fun () -> v868 (); v867) ()
    let v877 : string = " }"
    let v878 : string = $"{v877}"
    let v886 : unit = ()
    let v887 : (unit -> unit) = closure7(v18, v878)
    let v888 : unit = (fun () -> v887 (); v886) ()
    let v895 : string = $"{v877}"
    let v903 : unit = ()
    let v904 : (unit -> unit) = closure7(v18, v895)
    let v905 : unit = (fun () -> v904 (); v903) ()
    let v911 : string = v18.l0
    let v912 : int64 = v0.l0
    let v915 : string = " "
    let v916 : string = v6 + v915 
    let v920 : string = v916 + v7 
    let v925 : string = " #"
    let v926 : string = v920 + v925 
    let v930 : (int64 -> string) = _.ToString()
    let v931 : string = v930 v912
    let v935 : string = v926 + v931 
    let v939 : string = v935 + v915 
    let v944 : string = "runtime.execute_with_options_async"
    let v945 : string = v939 + v944 
    let v950 : string = " / "
    let v951 : string = v945 + v950 
    let v955 : string = v951 + v911 
    method16(v955)
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v25 : unit = ()
        let v26 : (unit -> unit) = closure2()
        let v27 : unit = (fun () -> v26 (); v25) ()
        let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
        let v66 : string = method8(v48, v49, v50, v51, v52, v53)
        let v67 : string = method12()
        let v68 : string = method143(v48, v49, v50, v51, v52, v53, v66, v67, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method17(v68)
and method144 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method147 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure62 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US34 =
    US34_0(v0)
and method148 () : ((struct (int32 * string * bool) -> Async<unit>) -> US34) =
    closure62()
and method149 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure63 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method78()
        let v60 : bool = v0 = ""
        let v63 : string =
            if v60 then
                let v61 : string = ""
                v61
            else
                method129(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v63)
and method146 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v2424 : string = method147(v10)
            let v2426 : string = null |> unbox<string>
            let v2429 : bool = v2424 = v2426
            let v2430 : bool = v2429 <> true
            if v2430 then
                let v2433 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v2434 : US34 option = v3 |> Option.map v2433 
                let v2454 : US34 = US34_1
                let v2455 : US34 = v2434 |> Option.defaultValue v2454 
                match v2455 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v2459) -> (* Some *)
                    let v2460 : int32 = method149(v7)
                    let v2461 : Async<unit> = v2459 struct (v2460, v2424, v9)
                    do! v2461 
                    ()
                let v2464 : string =
                    if v9 then
                        let v2462 : string = $"! {v2424}"
                        v2462
                    else
                        let v2463 : string = $"> {v2424}"
                        v2463
                if v5 then
                    let v2528 : unit = ()
                    let v2529 : (unit -> unit) = closure63(v2464)
                    let v2530 : unit = (fun () -> v2529 (); v2528) ()
                    ()
                else
                    let v2595 : unit = ()
                    let v2596 : (unit -> unit) = closure10(v2464)
                    let v2597 : unit = (fun () -> v2596 (); v2595) ()
                    ()
                let v2601 : string =
                    if v9 then
                        let v2599 : string = "\u001b[7;4m"
                        v2599
                    else
                        let v2600 : string = ""
                        v2600
                let v2604 : string =
                    if v9 then
                        let v2602 : string = "\u001b[0m"
                        v2602
                    else
                        let v2603 : string = ""
                        v2603
                let v2605 : string = $"{v2601}{v2424}{v2604}"
                (* run_target_args'
                let v2606 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2607 : (string -> unit) = v8.Push
                v2607 v2605
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5000 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v5000 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5002 : unit = ()
    let _let'_v5002 =
        async {
            let v7397 : string = method147(v10)
            let v7399 : string = null |> unbox<string>
            let v7402 : bool = v7397 = v7399
            let v7403 : bool = v7402 <> true
            if v7403 then
                let v7406 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v7407 : US34 option = v3 |> Option.map v7406 
                let v7427 : US34 = US34_1
                let v7428 : US34 = v7407 |> Option.defaultValue v7427 
                match v7428 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v7432) -> (* Some *)
                    let v7433 : int32 = method149(v7)
                    let v7434 : Async<unit> = v7432 struct (v7433, v7397, v9)
                    do! v7434 
                    ()
                let v7437 : string =
                    if v9 then
                        let v7435 : string = $"! {v7397}"
                        v7435
                    else
                        let v7436 : string = $"> {v7397}"
                        v7436
                if v5 then
                    let v7501 : unit = ()
                    let v7502 : (unit -> unit) = closure63(v7437)
                    let v7503 : unit = (fun () -> v7502 (); v7501) ()
                    ()
                else
                    let v7568 : unit = ()
                    let v7569 : (unit -> unit) = closure10(v7437)
                    let v7570 : unit = (fun () -> v7569 (); v7568) ()
                    ()
                let v7574 : string =
                    if v9 then
                        let v7572 : string = "\u001b[7;4m"
                        v7572
                    else
                        let v7573 : string = ""
                        v7573
                let v7577 : string =
                    if v9 then
                        let v7575 : string = "\u001b[0m"
                        v7575
                    else
                        let v7576 : string = ""
                        v7576
                let v7578 : string = $"{v7574}{v7397}{v7577}"
                (* run_target_args'
                let v7579 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v7580 : (string -> unit) = v8.Push
                v7580 v7578
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9973 : Async<unit> = _let'_v5002 
    let _run_target_args'_v15 = v9973 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v9975 : unit = ()
    let _let'_v9975 =
        async {
            let v12370 : string = method147(v10)
            let v12372 : string = null |> unbox<string>
            let v12375 : bool = v12370 = v12372
            let v12376 : bool = v12375 <> true
            if v12376 then
                let v12379 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v12380 : US34 option = v3 |> Option.map v12379 
                let v12400 : US34 = US34_1
                let v12401 : US34 = v12380 |> Option.defaultValue v12400 
                match v12401 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v12405) -> (* Some *)
                    let v12406 : int32 = method149(v7)
                    let v12407 : Async<unit> = v12405 struct (v12406, v12370, v9)
                    do! v12407 
                    ()
                let v12410 : string =
                    if v9 then
                        let v12408 : string = $"! {v12370}"
                        v12408
                    else
                        let v12409 : string = $"> {v12370}"
                        v12409
                if v5 then
                    let v12474 : unit = ()
                    let v12475 : (unit -> unit) = closure63(v12410)
                    let v12476 : unit = (fun () -> v12475 (); v12474) ()
                    ()
                else
                    let v12541 : unit = ()
                    let v12542 : (unit -> unit) = closure10(v12410)
                    let v12543 : unit = (fun () -> v12542 (); v12541) ()
                    ()
                let v12547 : string =
                    if v9 then
                        let v12545 : string = "\u001b[7;4m"
                        v12545
                    else
                        let v12546 : string = ""
                        v12546
                let v12550 : string =
                    if v9 then
                        let v12548 : string = "\u001b[0m"
                        v12548
                    else
                        let v12549 : string = ""
                        v12549
                let v12551 : string = $"{v12547}{v12370}{v12550}"
                (* run_target_args'
                let v12552 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v12553 : (string -> unit) = v8.Push
                v12553 v12551
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v14946 : Async<unit> = _let'_v9975 
    let _run_target_args'_v15 = v14946 
    #endif
#else
    let v14948 : unit = ()
    let _let'_v14948 =
        async {
            let v17343 : string = method147(v10)
            let v17345 : string = null |> unbox<string>
            let v17348 : bool = v17343 = v17345
            let v17349 : bool = v17348 <> true
            if v17349 then
                let v17352 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method148()
                let v17353 : US34 option = v3 |> Option.map v17352 
                let v17373 : US34 = US34_1
                let v17374 : US34 = v17353 |> Option.defaultValue v17373 
                match v17374 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v17378) -> (* Some *)
                    let v17379 : int32 = method149(v7)
                    let v17380 : Async<unit> = v17378 struct (v17379, v17343, v9)
                    do! v17380 
                    ()
                let v17383 : string =
                    if v9 then
                        let v17381 : string = $"! {v17343}"
                        v17381
                    else
                        let v17382 : string = $"> {v17343}"
                        v17382
                if v5 then
                    let v17447 : unit = ()
                    let v17448 : (unit -> unit) = closure63(v17383)
                    let v17449 : unit = (fun () -> v17448 (); v17447) ()
                    ()
                else
                    let v17514 : unit = ()
                    let v17515 : (unit -> unit) = closure10(v17383)
                    let v17516 : unit = (fun () -> v17515 (); v17514) ()
                    ()
                let v17520 : string =
                    if v9 then
                        let v17518 : string = "\u001b[7;4m"
                        v17518
                    else
                        let v17519 : string = ""
                        v17519
                let v17523 : string =
                    if v9 then
                        let v17521 : string = "\u001b[0m"
                        v17521
                    else
                        let v17522 : string = ""
                        v17522
                let v17524 : string = $"{v17520}{v17343}{v17523}"
                (* run_target_args'
                let v17525 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v17526 : (string -> unit) = v8.Push
                v17526 v17524
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v19919 : Async<unit> = _let'_v14948 
    let _run_target_args'_v15 = v19919 
    #endif
    let v19920 : Async<unit> = _run_target_args'_v15 
    v19920
and method145 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method146(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method145(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure64 () (v0 : System.Threading.CancellationToken) : US35 =
    US35_0(v0)
and method150 () : (System.Threading.CancellationToken -> US35) =
    closure64()
and method151 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v546 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v548 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v548 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v552 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v552 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v556 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v556 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v560 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v560 
            #endif
#if FABLE_COMPILER_PYTHON
            let v564 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v564 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v568 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v568 
            #endif
#else
            let v571 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v571 = v571 
            let v572 : System.Threading.CancellationToken = v571 
            let v573 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v574 : (System.Threading.CancellationToken []) = [|v572; v573; v0|]
            let v575 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v576 : System.Threading.CancellationTokenSource = v575 v574
            let v577 : System.Threading.CancellationToken = v576.Token
            return v577 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1102 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v1102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1104 : unit = ()
    let _let'_v1104 =
        async {
            (* run_target_args'
            let v1631 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1633 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1633 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1637 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1637 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1641 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1641 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1645 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1645 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1649 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1649 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1653 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1653 
            #endif
#else
            let v1656 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1656 = v1656 
            let v1657 : System.Threading.CancellationToken = v1656 
            let v1658 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1659 : (System.Threading.CancellationToken []) = [|v1657; v1658; v0|]
            let v1660 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1661 : System.Threading.CancellationTokenSource = v1660 v1659
            let v1662 : System.Threading.CancellationToken = v1661.Token
            return v1662 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2187 : Async<System.Threading.CancellationToken> = _let'_v1104 
    let _run_target_args'_v5 = v2187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2189 : unit = ()
    let _let'_v2189 =
        async {
            (* run_target_args'
            let v2716 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2718 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2718 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2722 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2722 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2726 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2726 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2730 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2730 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2734 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2734 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2738 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2738 
            #endif
#else
            let v2741 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v2741 = v2741 
            let v2742 : System.Threading.CancellationToken = v2741 
            let v2743 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v2744 : (System.Threading.CancellationToken []) = [|v2742; v2743; v0|]
            let v2745 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v2746 : System.Threading.CancellationTokenSource = v2745 v2744
            let v2747 : System.Threading.CancellationToken = v2746.Token
            return v2747 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3272 : Async<System.Threading.CancellationToken> = _let'_v2189 
    let _run_target_args'_v5 = v3272 
    #endif
#else
    let v3274 : unit = ()
    let _let'_v3274 =
        async {
            (* run_target_args'
            let v3801 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3803 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3803 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3807 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3807 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3811 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3811 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3815 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3815 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3819 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3819 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3823 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3823 
            #endif
#else
            let v3826 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v3826 = v3826 
            let v3827 : System.Threading.CancellationToken = v3826 
            let v3828 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v3829 : (System.Threading.CancellationToken []) = [|v3827; v3828; v0|]
            let v3830 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v3831 : System.Threading.CancellationTokenSource = v3830 v3829
            let v3832 : System.Threading.CancellationToken = v3831.Token
            return v3832 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4357 : Async<System.Threading.CancellationToken> = _let'_v3274 
    let _run_target_args'_v5 = v4357 
    #endif
    let v4358 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v4358
and method152 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method153 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method152(v0)
    let v2 : bool = v1 = false
    if v2 then
        method153(v0)
and method155 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "ex"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    (* run_target_args'
    let v72 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v72 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v72 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "format!(\"{:#?}\", $0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _run_target_args'_v72 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : string = $"%A{v8}"
    let _run_target_args'_v72 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : string = $"%A{v8}"
    let _run_target_args'_v72 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v94 : string = $"%A{v8}"
    let _run_target_args'_v72 = v94 
    #endif
#else
    let v98 : string = $"%A{v8}"
    let _run_target_args'_v72 = v98 
    #endif
    let v101 : string = _run_target_args'_v72 
    let v108 : string = $"{v101}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v10, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v126 : string = " }"
    let v127 : string = $"{v126}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v10, v127)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v143 : string = v10.l0
    let v144 : int64 = v0.l0
    let v147 : string = " "
    let v148 : string = v6 + v147 
    let v152 : string = v148 + v7 
    let v157 : string = " #"
    let v158 : string = v152 + v157 
    let v162 : (int64 -> string) = _.ToString()
    let v163 : string = v162 v144
    let v167 : string = v158 + v163 
    let v171 : string = v167 + v147 
    let v176 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v177 : string = v171 + v176 
    let v182 : string = " / "
    let v183 : string = v177 + v182 
    let v187 : string = v183 + v143 
    method16(v187)
and closure66 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method40()
        let v60 : string = method155(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method154 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v10622 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v10624 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v10622 = v10624 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v10628 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v10622 = v10628 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v10632 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v10622 = v10632 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v10636 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v10622 = v10636 
                #endif
#if FABLE_COMPILER_PYTHON
                let v10640 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v10622 = v10640 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v10644 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v10622 = v10644 
                #endif
#else
                let v10647 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v10622 = v10647 
                #endif
                let v10648 : System.Threading.Tasks.Task = _run_target_args'_v10622 
                (* run_target_args'
                let v10658 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v10660 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v10658 = v10660 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v10664 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v10658 = v10664 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v10668 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v10658 = v10668 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v10671 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v10672 : Async<unit> = v10671 v10648
                let _run_target_args'_v10658 = v10672 
                #endif
#if FABLE_COMPILER_PYTHON
                let v10673 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v10674 : Async<unit> = v10673 v10648
                let _run_target_args'_v10658 = v10674 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v10675 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v10676 : Async<unit> = v10675 v10648
                let _run_target_args'_v10658 = v10676 
                #endif
#else
                let v10677 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v10678 : Async<unit> = v10677 v10648
                let _run_target_args'_v10658 = v10678 
                #endif
                let v10679 : Async<unit> = _run_target_args'_v10658 
                do! v10679 
                (* run_target_args'
                let v10689 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v10691 : int32 = null |> unbox<int32>
                let _run_target_args'_v10689 = v10691 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v10695 : int32 = null |> unbox<int32>
                let _run_target_args'_v10689 = v10695 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v10699 : int32 = null |> unbox<int32>
                let _run_target_args'_v10689 = v10699 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v10703 : int32 = null |> unbox<int32>
                let _run_target_args'_v10689 = v10703 
                #endif
#if FABLE_COMPILER_PYTHON
                let v10707 : int32 = null |> unbox<int32>
                let _run_target_args'_v10689 = v10707 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v10711 : int32 = null |> unbox<int32>
                let _run_target_args'_v10689 = v10711 
                #endif
#else
                let v10714 : int32 = v0.ExitCode
                let _run_target_args'_v10689 = v10714 
                #endif
                let v10715 : int32 = _run_target_args'_v10689 
                return v10715 
                (* indent
                ()
            indent *)
            with ex ->
                let v10990 : exn = ex
                (* run_target_args'
                let v10995 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v10997 : string = $"%A{v10990}"
                let _run_target_args'_v10995 = v10997 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v11001 : string = $"%A{v10990}"
                let _run_target_args'_v10995 = v11001 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v11005 : string = $"%A{v10990}"
                let _run_target_args'_v10995 = v11005 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v11009 : string = $"%A{v10990}"
                let _run_target_args'_v10995 = v11009 
                #endif
#if FABLE_COMPILER_PYTHON
                let v11013 : string = $"%A{v10990}"
                let _run_target_args'_v10995 = v11013 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v11017 : string = $"%A{v10990}"
                let _run_target_args'_v10995 = v11017 
                #endif
#else
                let v11020 : string = $"{v10990.GetType ()}: {v10990.Message}"
                let _run_target_args'_v10995 = v11020 
                #endif
                let v11021 : string = _run_target_args'_v10995 
                (* run_target_args'
                let v11027 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v11028 : (string -> unit) = v1.Push
                v11028 v11021
                #endif
                // run_target_args' is_unit
                let v11030 : System.Threading.Tasks.TaskCanceledException = v10990 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v11093 : unit = ()
                let v11094 : (unit -> unit) = closure66(v11030)
                let v11095 : unit = (fun () -> v11094 (); v11093) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21813 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v21813 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21815 : unit = ()
    let _let'_v21815 =
        async {
            try
                (* run_target_args'
                let v32416 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v32418 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v32416 = v32418 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v32422 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v32416 = v32422 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v32426 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v32416 = v32426 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v32430 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v32416 = v32430 
                #endif
#if FABLE_COMPILER_PYTHON
                let v32434 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v32416 = v32434 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v32438 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v32416 = v32438 
                #endif
#else
                let v32441 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v32416 = v32441 
                #endif
                let v32442 : System.Threading.Tasks.Task = _run_target_args'_v32416 
                (* run_target_args'
                let v32452 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v32454 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v32452 = v32454 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v32458 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v32452 = v32458 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v32462 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v32452 = v32462 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v32465 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v32466 : Async<unit> = v32465 v32442
                let _run_target_args'_v32452 = v32466 
                #endif
#if FABLE_COMPILER_PYTHON
                let v32467 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v32468 : Async<unit> = v32467 v32442
                let _run_target_args'_v32452 = v32468 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v32469 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v32470 : Async<unit> = v32469 v32442
                let _run_target_args'_v32452 = v32470 
                #endif
#else
                let v32471 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v32472 : Async<unit> = v32471 v32442
                let _run_target_args'_v32452 = v32472 
                #endif
                let v32473 : Async<unit> = _run_target_args'_v32452 
                do! v32473 
                (* run_target_args'
                let v32483 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v32485 : int32 = null |> unbox<int32>
                let _run_target_args'_v32483 = v32485 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v32489 : int32 = null |> unbox<int32>
                let _run_target_args'_v32483 = v32489 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v32493 : int32 = null |> unbox<int32>
                let _run_target_args'_v32483 = v32493 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v32497 : int32 = null |> unbox<int32>
                let _run_target_args'_v32483 = v32497 
                #endif
#if FABLE_COMPILER_PYTHON
                let v32501 : int32 = null |> unbox<int32>
                let _run_target_args'_v32483 = v32501 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v32505 : int32 = null |> unbox<int32>
                let _run_target_args'_v32483 = v32505 
                #endif
#else
                let v32508 : int32 = v0.ExitCode
                let _run_target_args'_v32483 = v32508 
                #endif
                let v32509 : int32 = _run_target_args'_v32483 
                return v32509 
                (* indent
                ()
            indent *)
            with ex ->
                let v32784 : exn = ex
                (* run_target_args'
                let v32789 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v32791 : string = $"%A{v32784}"
                let _run_target_args'_v32789 = v32791 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v32795 : string = $"%A{v32784}"
                let _run_target_args'_v32789 = v32795 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v32799 : string = $"%A{v32784}"
                let _run_target_args'_v32789 = v32799 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v32803 : string = $"%A{v32784}"
                let _run_target_args'_v32789 = v32803 
                #endif
#if FABLE_COMPILER_PYTHON
                let v32807 : string = $"%A{v32784}"
                let _run_target_args'_v32789 = v32807 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v32811 : string = $"%A{v32784}"
                let _run_target_args'_v32789 = v32811 
                #endif
#else
                let v32814 : string = $"{v32784.GetType ()}: {v32784.Message}"
                let _run_target_args'_v32789 = v32814 
                #endif
                let v32815 : string = _run_target_args'_v32789 
                (* run_target_args'
                let v32821 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v32822 : (string -> unit) = v1.Push
                v32822 v32815
                #endif
                // run_target_args' is_unit
                let v32824 : System.Threading.Tasks.TaskCanceledException = v32784 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v32887 : unit = ()
                let v32888 : (unit -> unit) = closure66(v32824)
                let v32889 : unit = (fun () -> v32888 (); v32887) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v43607 : Async<int32> = _let'_v21815 
    let _run_target_args'_v7 = v43607 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43609 : unit = ()
    let _let'_v43609 =
        async {
            try
                (* run_target_args'
                let v54210 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54212 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v54210 = v54212 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v54216 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v54210 = v54216 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v54220 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v54210 = v54220 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v54224 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v54210 = v54224 
                #endif
#if FABLE_COMPILER_PYTHON
                let v54228 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v54210 = v54228 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v54232 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v54210 = v54232 
                #endif
#else
                let v54235 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v54210 = v54235 
                #endif
                let v54236 : System.Threading.Tasks.Task = _run_target_args'_v54210 
                (* run_target_args'
                let v54246 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54248 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v54246 = v54248 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v54252 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v54246 = v54252 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v54256 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v54246 = v54256 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v54259 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v54260 : Async<unit> = v54259 v54236
                let _run_target_args'_v54246 = v54260 
                #endif
#if FABLE_COMPILER_PYTHON
                let v54261 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v54262 : Async<unit> = v54261 v54236
                let _run_target_args'_v54246 = v54262 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v54263 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v54264 : Async<unit> = v54263 v54236
                let _run_target_args'_v54246 = v54264 
                #endif
#else
                let v54265 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v54266 : Async<unit> = v54265 v54236
                let _run_target_args'_v54246 = v54266 
                #endif
                let v54267 : Async<unit> = _run_target_args'_v54246 
                do! v54267 
                (* run_target_args'
                let v54277 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54279 : int32 = null |> unbox<int32>
                let _run_target_args'_v54277 = v54279 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v54283 : int32 = null |> unbox<int32>
                let _run_target_args'_v54277 = v54283 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v54287 : int32 = null |> unbox<int32>
                let _run_target_args'_v54277 = v54287 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v54291 : int32 = null |> unbox<int32>
                let _run_target_args'_v54277 = v54291 
                #endif
#if FABLE_COMPILER_PYTHON
                let v54295 : int32 = null |> unbox<int32>
                let _run_target_args'_v54277 = v54295 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v54299 : int32 = null |> unbox<int32>
                let _run_target_args'_v54277 = v54299 
                #endif
#else
                let v54302 : int32 = v0.ExitCode
                let _run_target_args'_v54277 = v54302 
                #endif
                let v54303 : int32 = _run_target_args'_v54277 
                return v54303 
                (* indent
                ()
            indent *)
            with ex ->
                let v54578 : exn = ex
                (* run_target_args'
                let v54583 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54585 : string = $"%A{v54578}"
                let _run_target_args'_v54583 = v54585 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v54589 : string = $"%A{v54578}"
                let _run_target_args'_v54583 = v54589 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v54593 : string = $"%A{v54578}"
                let _run_target_args'_v54583 = v54593 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v54597 : string = $"%A{v54578}"
                let _run_target_args'_v54583 = v54597 
                #endif
#if FABLE_COMPILER_PYTHON
                let v54601 : string = $"%A{v54578}"
                let _run_target_args'_v54583 = v54601 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v54605 : string = $"%A{v54578}"
                let _run_target_args'_v54583 = v54605 
                #endif
#else
                let v54608 : string = $"{v54578.GetType ()}: {v54578.Message}"
                let _run_target_args'_v54583 = v54608 
                #endif
                let v54609 : string = _run_target_args'_v54583 
                (* run_target_args'
                let v54615 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v54616 : (string -> unit) = v1.Push
                v54616 v54609
                #endif
                // run_target_args' is_unit
                let v54618 : System.Threading.Tasks.TaskCanceledException = v54578 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v54681 : unit = ()
                let v54682 : (unit -> unit) = closure66(v54618)
                let v54683 : unit = (fun () -> v54682 (); v54681) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v65401 : Async<int32> = _let'_v43609 
    let _run_target_args'_v7 = v65401 
    #endif
#else
    let v65403 : unit = ()
    let _let'_v65403 =
        async {
            try
                (* run_target_args'
                let v76004 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v76006 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v76004 = v76006 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76010 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v76004 = v76010 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v76014 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v76004 = v76014 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v76018 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v76004 = v76018 
                #endif
#if FABLE_COMPILER_PYTHON
                let v76022 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v76004 = v76022 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v76026 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v76004 = v76026 
                #endif
#else
                let v76029 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v76004 = v76029 
                #endif
                let v76030 : System.Threading.Tasks.Task = _run_target_args'_v76004 
                (* run_target_args'
                let v76040 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v76042 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v76040 = v76042 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76046 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v76040 = v76046 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v76050 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v76040 = v76050 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v76053 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v76054 : Async<unit> = v76053 v76030
                let _run_target_args'_v76040 = v76054 
                #endif
#if FABLE_COMPILER_PYTHON
                let v76055 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v76056 : Async<unit> = v76055 v76030
                let _run_target_args'_v76040 = v76056 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v76057 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v76058 : Async<unit> = v76057 v76030
                let _run_target_args'_v76040 = v76058 
                #endif
#else
                let v76059 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v76060 : Async<unit> = v76059 v76030
                let _run_target_args'_v76040 = v76060 
                #endif
                let v76061 : Async<unit> = _run_target_args'_v76040 
                do! v76061 
                (* run_target_args'
                let v76071 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v76073 : int32 = null |> unbox<int32>
                let _run_target_args'_v76071 = v76073 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76077 : int32 = null |> unbox<int32>
                let _run_target_args'_v76071 = v76077 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v76081 : int32 = null |> unbox<int32>
                let _run_target_args'_v76071 = v76081 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v76085 : int32 = null |> unbox<int32>
                let _run_target_args'_v76071 = v76085 
                #endif
#if FABLE_COMPILER_PYTHON
                let v76089 : int32 = null |> unbox<int32>
                let _run_target_args'_v76071 = v76089 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v76093 : int32 = null |> unbox<int32>
                let _run_target_args'_v76071 = v76093 
                #endif
#else
                let v76096 : int32 = v0.ExitCode
                let _run_target_args'_v76071 = v76096 
                #endif
                let v76097 : int32 = _run_target_args'_v76071 
                return v76097 
                (* indent
                ()
            indent *)
            with ex ->
                let v76372 : exn = ex
                (* run_target_args'
                let v76377 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v76379 : string = $"%A{v76372}"
                let _run_target_args'_v76377 = v76379 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76383 : string = $"%A{v76372}"
                let _run_target_args'_v76377 = v76383 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v76387 : string = $"%A{v76372}"
                let _run_target_args'_v76377 = v76387 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v76391 : string = $"%A{v76372}"
                let _run_target_args'_v76377 = v76391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v76395 : string = $"%A{v76372}"
                let _run_target_args'_v76377 = v76395 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v76399 : string = $"%A{v76372}"
                let _run_target_args'_v76377 = v76399 
                #endif
#else
                let v76402 : string = $"{v76372.GetType ()}: {v76372.Message}"
                let _run_target_args'_v76377 = v76402 
                #endif
                let v76403 : string = _run_target_args'_v76377 
                (* run_target_args'
                let v76409 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v76410 : (string -> unit) = v1.Push
                v76410 v76403
                #endif
                // run_target_args' is_unit
                let v76412 : System.Threading.Tasks.TaskCanceledException = v76372 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v76475 : unit = ()
                let v76476 : (unit -> unit) = closure66(v76412)
                let v76477 : unit = (fun () -> v76476 (); v76475) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v87195 : Async<int32> = _let'_v65403 
    let _run_target_args'_v7 = v87195 
    #endif
    let v87196 : Async<int32> = _run_target_args'_v7 
    v87196
and method156 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method13()
    let v18 : Mut3 = {l0 = v17} : Mut3
    let v21 : string = "{ "
    let v22 : string = $"{v21}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v18, v22)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v40 : string = "exit_code"
    let v41 : string = $"{v40}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v18, v41)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v59 : string = " = "
    let v60 : string = $"{v59}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v18, v60)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v80 : string = $"{v8}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v18, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v98 : string = "; "
    let v99 : string = $"{v98}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v18, v99)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v117 : string = "output_length"
    let v118 : string = $"{v117}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v18, v118)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v135 : string = $"{v59}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v18, v135)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v155 : string = $"{v9}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v18, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v172 : string = $"{v98}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v18, v172)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v190 : string = "options"
    let v191 : string = $"{v190}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v18, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v59}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v18, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v225 : string = $"{v21}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v18, v225)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v243 : string = "command"
    let v244 : string = $"{v243}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v18, v244)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v261 : string = $"{v59}"
    let v269 : unit = ()
    let v270 : (unit -> unit) = closure7(v18, v261)
    let v271 : unit = (fun () -> v270 (); v269) ()
    let v278 : string = $"{v10}"
    let v286 : unit = ()
    let v287 : (unit -> unit) = closure7(v18, v278)
    let v288 : unit = (fun () -> v287 (); v286) ()
    let v295 : string = $"{v98}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v18, v295)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v313 : string = "cancellation_token"
    let v314 : string = $"{v313}"
    let v322 : unit = ()
    let v323 : (unit -> unit) = closure7(v18, v314)
    let v324 : unit = (fun () -> v323 (); v322) ()
    let v331 : string = $"{v59}"
    let v339 : unit = ()
    let v340 : (unit -> unit) = closure7(v18, v331)
    let v341 : unit = (fun () -> v340 (); v339) ()
    (* run_target_args'
    let v351 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v352 : string = "format!(\"{:#?}\", $0)"
    let v353 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v352 
    let v354 : string = "fable_library_rust::String_::fromString($0)"
    let v355 : string = Fable.Core.RustInterop.emitRustExpr v353 v354 
    let _run_target_args'_v351 = v355 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v356 : string = "format!(\"{:#?}\", $0)"
    let v357 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v356 
    let v358 : string = "fable_library_rust::String_::fromString($0)"
    let v359 : string = Fable.Core.RustInterop.emitRustExpr v357 v358 
    let _run_target_args'_v351 = v359 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v360 : string = "format!(\"{:#?}\", $0)"
    let v361 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v360 
    let v362 : string = "fable_library_rust::String_::fromString($0)"
    let v363 : string = Fable.Core.RustInterop.emitRustExpr v361 v362 
    let _run_target_args'_v351 = v363 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v365 : string = $"%A{v11}"
    let _run_target_args'_v351 = v365 
    #endif
#if FABLE_COMPILER_PYTHON
    let v369 : string = $"%A{v11}"
    let _run_target_args'_v351 = v369 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v373 : string = $"%A{v11}"
    let _run_target_args'_v351 = v373 
    #endif
#else
    let v377 : string = $"%A{v11}"
    let _run_target_args'_v351 = v377 
    #endif
    let v380 : string = _run_target_args'_v351 
    let v387 : string = $"{v380}"
    let v395 : unit = ()
    let v396 : (unit -> unit) = closure7(v18, v387)
    let v397 : unit = (fun () -> v396 (); v395) ()
    let v404 : string = $"{v98}"
    let v412 : unit = ()
    let v413 : (unit -> unit) = closure7(v18, v404)
    let v414 : unit = (fun () -> v413 (); v412) ()
    let v422 : string = "environment_variables"
    let v423 : string = $"{v422}"
    let v431 : unit = ()
    let v432 : (unit -> unit) = closure7(v18, v423)
    let v433 : unit = (fun () -> v432 (); v431) ()
    let v440 : string = $"{v59}"
    let v448 : unit = ()
    let v449 : (unit -> unit) = closure7(v18, v440)
    let v450 : unit = (fun () -> v449 (); v448) ()
    let v457 : string = $"%A{v12}"
    let v461 : string = $"{v457}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v18, v461)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v478 : string = $"{v98}"
    let v486 : unit = ()
    let v487 : (unit -> unit) = closure7(v18, v478)
    let v488 : unit = (fun () -> v487 (); v486) ()
    let v496 : string = "on_line"
    let v497 : string = $"{v496}"
    let v505 : unit = ()
    let v506 : (unit -> unit) = closure7(v18, v497)
    let v507 : unit = (fun () -> v506 (); v505) ()
    let v514 : string = $"{v59}"
    let v522 : unit = ()
    let v523 : (unit -> unit) = closure7(v18, v514)
    let v524 : unit = (fun () -> v523 (); v522) ()
    (* run_target_args'
    let v534 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v535 : string = "format!(\"{:#?}\", $0)"
    let v536 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v535 
    let v537 : string = "fable_library_rust::String_::fromString($0)"
    let v538 : string = Fable.Core.RustInterop.emitRustExpr v536 v537 
    let _run_target_args'_v534 = v538 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v539 : string = "format!(\"{:#?}\", $0)"
    let v540 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v539 
    let v541 : string = "fable_library_rust::String_::fromString($0)"
    let v542 : string = Fable.Core.RustInterop.emitRustExpr v540 v541 
    let _run_target_args'_v534 = v542 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v543 : string = "format!(\"{:#?}\", $0)"
    let v544 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v543 
    let v545 : string = "fable_library_rust::String_::fromString($0)"
    let v546 : string = Fable.Core.RustInterop.emitRustExpr v544 v545 
    let _run_target_args'_v534 = v546 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v548 : string = $"%A{v13}"
    let _run_target_args'_v534 = v548 
    #endif
#if FABLE_COMPILER_PYTHON
    let v552 : string = $"%A{v13}"
    let _run_target_args'_v534 = v552 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v556 : string = $"%A{v13}"
    let _run_target_args'_v534 = v556 
    #endif
#else
    let v560 : string = $"%A{v13}"
    let _run_target_args'_v534 = v560 
    #endif
    let v563 : string = _run_target_args'_v534 
    let v570 : string = $"{v563}"
    let v578 : unit = ()
    let v579 : (unit -> unit) = closure7(v18, v570)
    let v580 : unit = (fun () -> v579 (); v578) ()
    let v587 : string = $"{v98}"
    let v595 : unit = ()
    let v596 : (unit -> unit) = closure7(v18, v587)
    let v597 : unit = (fun () -> v596 (); v595) ()
    let v605 : string = "stdin"
    let v606 : string = $"{v605}"
    let v614 : unit = ()
    let v615 : (unit -> unit) = closure7(v18, v606)
    let v616 : unit = (fun () -> v615 (); v614) ()
    let v623 : string = $"{v59}"
    let v631 : unit = ()
    let v632 : (unit -> unit) = closure7(v18, v623)
    let v633 : unit = (fun () -> v632 (); v631) ()
    (* run_target_args'
    let v643 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v644 : string = "format!(\"{:#?}\", $0)"
    let v645 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v644 
    let v646 : string = "fable_library_rust::String_::fromString($0)"
    let v647 : string = Fable.Core.RustInterop.emitRustExpr v645 v646 
    let _run_target_args'_v643 = v647 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v648 : string = "format!(\"{:#?}\", $0)"
    let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v648 
    let v650 : string = "fable_library_rust::String_::fromString($0)"
    let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
    let _run_target_args'_v643 = v651 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v652 : string = "format!(\"{:#?}\", $0)"
    let v653 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14 v652 
    let v654 : string = "fable_library_rust::String_::fromString($0)"
    let v655 : string = Fable.Core.RustInterop.emitRustExpr v653 v654 
    let _run_target_args'_v643 = v655 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v657 : string = $"%A{v14}"
    let _run_target_args'_v643 = v657 
    #endif
#if FABLE_COMPILER_PYTHON
    let v661 : string = $"%A{v14}"
    let _run_target_args'_v643 = v661 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v665 : string = $"%A{v14}"
    let _run_target_args'_v643 = v665 
    #endif
#else
    let v669 : string = $"%A{v14}"
    let _run_target_args'_v643 = v669 
    #endif
    let v672 : string = _run_target_args'_v643 
    let v679 : string = $"{v672}"
    let v687 : unit = ()
    let v688 : (unit -> unit) = closure7(v18, v679)
    let v689 : unit = (fun () -> v688 (); v687) ()
    let v696 : string = $"{v98}"
    let v704 : unit = ()
    let v705 : (unit -> unit) = closure7(v18, v696)
    let v706 : unit = (fun () -> v705 (); v704) ()
    let v714 : string = "trace"
    let v715 : string = $"{v714}"
    let v723 : unit = ()
    let v724 : (unit -> unit) = closure7(v18, v715)
    let v725 : unit = (fun () -> v724 (); v723) ()
    let v732 : string = $"{v59}"
    let v740 : unit = ()
    let v741 : (unit -> unit) = closure7(v18, v732)
    let v742 : unit = (fun () -> v741 (); v740) ()
    let v750 : string =
        if v15 then
            let v748 : string = "true"
            v748
        else
            let v749 : string = "false"
            v749
    let v752 : string = $"{v750}"
    let v760 : unit = ()
    let v761 : (unit -> unit) = closure7(v18, v752)
    let v762 : unit = (fun () -> v761 (); v760) ()
    let v769 : string = $"{v98}"
    let v777 : unit = ()
    let v778 : (unit -> unit) = closure7(v18, v769)
    let v779 : unit = (fun () -> v778 (); v777) ()
    let v787 : string = "working_directory"
    let v788 : string = $"{v787}"
    let v796 : unit = ()
    let v797 : (unit -> unit) = closure7(v18, v788)
    let v798 : unit = (fun () -> v797 (); v796) ()
    let v805 : string = $"{v59}"
    let v813 : unit = ()
    let v814 : (unit -> unit) = closure7(v18, v805)
    let v815 : unit = (fun () -> v814 (); v813) ()
    (* run_target_args'
    let v825 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v826 : string = "format!(\"{:#?}\", $0)"
    let v827 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v826 
    let v828 : string = "fable_library_rust::String_::fromString($0)"
    let v829 : string = Fable.Core.RustInterop.emitRustExpr v827 v828 
    let _run_target_args'_v825 = v829 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v830 : string = "format!(\"{:#?}\", $0)"
    let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v830 
    let v832 : string = "fable_library_rust::String_::fromString($0)"
    let v833 : string = Fable.Core.RustInterop.emitRustExpr v831 v832 
    let _run_target_args'_v825 = v833 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v834 : string = "format!(\"{:#?}\", $0)"
    let v835 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v834 
    let v836 : string = "fable_library_rust::String_::fromString($0)"
    let v837 : string = Fable.Core.RustInterop.emitRustExpr v835 v836 
    let _run_target_args'_v825 = v837 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v839 : string = $"%A{v16}"
    let _run_target_args'_v825 = v839 
    #endif
#if FABLE_COMPILER_PYTHON
    let v843 : string = $"%A{v16}"
    let _run_target_args'_v825 = v843 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v847 : string = $"%A{v16}"
    let _run_target_args'_v825 = v847 
    #endif
#else
    let v851 : string = $"%A{v16}"
    let _run_target_args'_v825 = v851 
    #endif
    let v854 : string = _run_target_args'_v825 
    let v861 : string = $"{v854}"
    let v869 : unit = ()
    let v870 : (unit -> unit) = closure7(v18, v861)
    let v871 : unit = (fun () -> v870 (); v869) ()
    let v879 : string = " }"
    let v880 : string = $"{v879}"
    let v888 : unit = ()
    let v889 : (unit -> unit) = closure7(v18, v880)
    let v890 : unit = (fun () -> v889 (); v888) ()
    let v897 : string = $"{v879}"
    let v905 : unit = ()
    let v906 : (unit -> unit) = closure7(v18, v897)
    let v907 : unit = (fun () -> v906 (); v905) ()
    let v913 : string = v18.l0
    let v914 : int64 = v0.l0
    let v917 : string = " "
    let v918 : string = v6 + v917 
    let v922 : string = v918 + v7 
    let v927 : string = " #"
    let v928 : string = v922 + v927 
    let v932 : (int64 -> string) = _.ToString()
    let v933 : string = v932 v914
    let v937 : string = v928 + v933 
    let v941 : string = v937 + v917 
    let v946 : string = "runtime.execute_with_options_async"
    let v947 : string = v941 + v946 
    let v952 : string = " / "
    let v953 : string = v947 + v952 
    let v957 : string = v953 + v913 
    method16(v957)
and closure67 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v25 : unit = ()
        let v26 : (unit -> unit) = closure2()
        let v27 : unit = (fun () -> v26 (); v25) ()
        let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : Mut4, v53 : int64 option) = TraceState.trace_state.Value
        let v66 : string = method8(v48, v49, v50, v51, v52, v53)
        let v67 : string = method12()
        let v68 : int32 = v8.Length
        let v69 : string = method156(v48, v49, v50, v51, v52, v53, v66, v67, v7, v68, v0, v1, v2, v3, v4, v5, v6)
        method17(v69)
and method142 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v5834 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v5837 : int32, v5838 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5837, v5838) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v5845 : int32, v5846 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5845, v5846) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v5853 : int32, v5854 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5853, v5854) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v5861 : int32, v5862 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5861, v5862) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v5869 : int32, v5870 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5869, v5870) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v5877 : int32, v5878 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5877, v5878) 
            #endif
#else
            let v5883 : US17 = method93(v0)
            let struct (v5895 : string, v5896 : US5) =
                match v5883 with
                | US17_1(v5886) -> (* Error *)
                    let v5888 : string = $"resultm.get / Result value was Error: {v5886}"
                    failwith<struct (string * US5)> v5888
                | US17_0(v5884, v5885) -> (* Ok *)
                    struct (v5884, v5885)
            let v5899 : (string -> US5) = method6()
            let v5900 : US5 option = v6 |> Option.map v5899 
            let v5920 : US5 = US5_1
            let v5921 : US5 = v5900 |> Option.defaultValue v5920 
            let v5928 : string =
                match v5921 with
                | US5_1 -> (* None *)
                    let v5926 : string = ""
                    v5926
                | US5_0(v5925) -> (* Some *)
                    v5925
            let v5989 : unit = ()
            let v5990 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v5896, v5895)
            let v5991 : unit = (fun () -> v5990 (); v5989) ()
            let v6052 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v6056 : string =
                match v5896 with
                | US5_1 -> (* None *)
                    let v6054 : string = ""
                    v6054
                | US5_0(v6053) -> (* Some *)
                    v6053
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v6056,
              StandardOutputEncoding = v6052,
              WorkingDirectory = v5928,
              FileName = v5895,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v6057 : System.Diagnostics.ProcessStartInfo = start_info
            let v6058 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v6059 : int32 = v6058.Length
            let v6060 : Mut5 = {l0 = 0} : Mut5
            while method29(v6059, v6060) do
                let v6062 : int32 = v6060.l0
                let struct (v6063 : string, v6064 : string) = v6058.[int v6062]
                v6057.EnvironmentVariables.[v6063] <- v6064 
                let v6065 : int32 = v6062 + 1
                v6060.l0 <- v6065
                ()
            let v6066 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v6057)
            use v6066 = v6066 
            let v6067 : System.Diagnostics.Process = v6066 
            let v6068 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v6069 : System.Collections.Concurrent.ConcurrentStack<string> = v6068 ()
            let v6070 : bool = false
            let v6071 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v6067, v6069, v6070)
            v6067.OutputDataReceived.Add v6071 
            let v6072 : bool = true
            let v6073 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v6067, v6069, v6072)
            v6067.ErrorDataReceived.Add v6073 
            let v6074 : (unit -> bool) = v6067.Start
            let v6075 : bool = v6074 ()
            let v6076 : bool = v6075 = false
            if v6076 then
                let v6077 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v6077
            let v6078 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v6078 v6067
            let v6079 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v6079 v6067
            let v6082 : (System.Threading.CancellationToken -> US35) = method150()
            let v6083 : US35 option = v1 |> Option.map v6082 
            let v6103 : US35 = US35_1
            let v6104 : US35 = v6083 |> Option.defaultValue v6103 
            let v6111 : System.Threading.CancellationToken =
                match v6104 with
                | US35_1 -> (* None *)
                    let v6109 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v6109
                | US35_0(v6108) -> (* Some *)
                    v6108
            let v6112 : Async<System.Threading.CancellationToken> = method151(v6111)
            let! v6112 = v6112 
            let v6113 : System.Threading.CancellationToken = v6112 
            let v6114 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v6113.Register
            let v6115 : (unit -> unit) = closure65(v6067)
            let v6116 : System.Threading.CancellationTokenRegistration = v6114 v6115
            use v6116 = v6116 
            let v6117 : System.Threading.CancellationTokenRegistration = v6116 
            let v6118 : Async<int32> = method154(v6067, v6069, v6113)
            let! v6118 = v6118 
            let v6119 : int32 = v6118 
            let v6121 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v6122 : string seq = v6121 v6069
            let v6126 : (string seq -> string seq) = Seq.rev
            let v6127 : string seq = v6126 v6122
            let v6132 : string = method69()
            let v6133 : (string -> (string seq -> string)) = String.concat
            let v6134 : (string seq -> string) = v6133 v6132
            let v6135 : string = v6134 v6127
            let v6200 : unit = ()
            let v6201 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v6119, v6135)
            let v6202 : unit = (fun () -> v6201 (); v6200) ()
            return struct (v6119, v6135) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v12070 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v12070 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12072 : unit = ()
    let _let'_v12072 =
        async {
            (* run_target_args'
            let v17881 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v17884 : int32, v17885 : string) = null |> unbox<struct (int32 * string)>
            return struct (v17884, v17885) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v17892 : int32, v17893 : string) = null |> unbox<struct (int32 * string)>
            return struct (v17892, v17893) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v17900 : int32, v17901 : string) = null |> unbox<struct (int32 * string)>
            return struct (v17900, v17901) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v17908 : int32, v17909 : string) = null |> unbox<struct (int32 * string)>
            return struct (v17908, v17909) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v17916 : int32, v17917 : string) = null |> unbox<struct (int32 * string)>
            return struct (v17916, v17917) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v17924 : int32, v17925 : string) = null |> unbox<struct (int32 * string)>
            return struct (v17924, v17925) 
            #endif
#else
            let v17930 : US17 = method93(v0)
            let struct (v17942 : string, v17943 : US5) =
                match v17930 with
                | US17_1(v17933) -> (* Error *)
                    let v17935 : string = $"resultm.get / Result value was Error: {v17933}"
                    failwith<struct (string * US5)> v17935
                | US17_0(v17931, v17932) -> (* Ok *)
                    struct (v17931, v17932)
            let v17946 : (string -> US5) = method6()
            let v17947 : US5 option = v6 |> Option.map v17946 
            let v17967 : US5 = US5_1
            let v17968 : US5 = v17947 |> Option.defaultValue v17967 
            let v17975 : string =
                match v17968 with
                | US5_1 -> (* None *)
                    let v17973 : string = ""
                    v17973
                | US5_0(v17972) -> (* Some *)
                    v17972
            let v18036 : unit = ()
            let v18037 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v17943, v17942)
            let v18038 : unit = (fun () -> v18037 (); v18036) ()
            let v18099 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v18103 : string =
                match v17943 with
                | US5_1 -> (* None *)
                    let v18101 : string = ""
                    v18101
                | US5_0(v18100) -> (* Some *)
                    v18100
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v18103,
              StandardOutputEncoding = v18099,
              WorkingDirectory = v17975,
              FileName = v17942,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v18104 : System.Diagnostics.ProcessStartInfo = start_info
            let v18105 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v18106 : int32 = v18105.Length
            let v18107 : Mut5 = {l0 = 0} : Mut5
            while method29(v18106, v18107) do
                let v18109 : int32 = v18107.l0
                let struct (v18110 : string, v18111 : string) = v18105.[int v18109]
                v18104.EnvironmentVariables.[v18110] <- v18111 
                let v18112 : int32 = v18109 + 1
                v18107.l0 <- v18112
                ()
            let v18113 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v18104)
            use v18113 = v18113 
            let v18114 : System.Diagnostics.Process = v18113 
            let v18115 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v18116 : System.Collections.Concurrent.ConcurrentStack<string> = v18115 ()
            let v18117 : bool = false
            let v18118 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v18114, v18116, v18117)
            v18114.OutputDataReceived.Add v18118 
            let v18119 : bool = true
            let v18120 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v18114, v18116, v18119)
            v18114.ErrorDataReceived.Add v18120 
            let v18121 : (unit -> bool) = v18114.Start
            let v18122 : bool = v18121 ()
            let v18123 : bool = v18122 = false
            if v18123 then
                let v18124 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v18124
            let v18125 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v18125 v18114
            let v18126 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v18126 v18114
            let v18129 : (System.Threading.CancellationToken -> US35) = method150()
            let v18130 : US35 option = v1 |> Option.map v18129 
            let v18150 : US35 = US35_1
            let v18151 : US35 = v18130 |> Option.defaultValue v18150 
            let v18158 : System.Threading.CancellationToken =
                match v18151 with
                | US35_1 -> (* None *)
                    let v18156 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v18156
                | US35_0(v18155) -> (* Some *)
                    v18155
            let v18159 : Async<System.Threading.CancellationToken> = method151(v18158)
            let! v18159 = v18159 
            let v18160 : System.Threading.CancellationToken = v18159 
            let v18161 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v18160.Register
            let v18162 : (unit -> unit) = closure65(v18114)
            let v18163 : System.Threading.CancellationTokenRegistration = v18161 v18162
            use v18163 = v18163 
            let v18164 : System.Threading.CancellationTokenRegistration = v18163 
            let v18165 : Async<int32> = method154(v18114, v18116, v18160)
            let! v18165 = v18165 
            let v18166 : int32 = v18165 
            let v18168 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v18169 : string seq = v18168 v18116
            let v18173 : (string seq -> string seq) = Seq.rev
            let v18174 : string seq = v18173 v18169
            let v18179 : string = method69()
            let v18180 : (string -> (string seq -> string)) = String.concat
            let v18181 : (string seq -> string) = v18180 v18179
            let v18182 : string = v18181 v18174
            let v18247 : unit = ()
            let v18248 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v18166, v18182)
            let v18249 : unit = (fun () -> v18248 (); v18247) ()
            return struct (v18166, v18182) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v24117 : Async<struct (int32 * string)> = _let'_v12072 
    let _run_target_args'_v11 = v24117 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24119 : unit = ()
    let _let'_v24119 =
        async {
            (* run_target_args'
            let v29928 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v29931 : int32, v29932 : string) = null |> unbox<struct (int32 * string)>
            return struct (v29931, v29932) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v29939 : int32, v29940 : string) = null |> unbox<struct (int32 * string)>
            return struct (v29939, v29940) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v29947 : int32, v29948 : string) = null |> unbox<struct (int32 * string)>
            return struct (v29947, v29948) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v29955 : int32, v29956 : string) = null |> unbox<struct (int32 * string)>
            return struct (v29955, v29956) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v29963 : int32, v29964 : string) = null |> unbox<struct (int32 * string)>
            return struct (v29963, v29964) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v29971 : int32, v29972 : string) = null |> unbox<struct (int32 * string)>
            return struct (v29971, v29972) 
            #endif
#else
            let v29977 : US17 = method93(v0)
            let struct (v29989 : string, v29990 : US5) =
                match v29977 with
                | US17_1(v29980) -> (* Error *)
                    let v29982 : string = $"resultm.get / Result value was Error: {v29980}"
                    failwith<struct (string * US5)> v29982
                | US17_0(v29978, v29979) -> (* Ok *)
                    struct (v29978, v29979)
            let v29993 : (string -> US5) = method6()
            let v29994 : US5 option = v6 |> Option.map v29993 
            let v30014 : US5 = US5_1
            let v30015 : US5 = v29994 |> Option.defaultValue v30014 
            let v30022 : string =
                match v30015 with
                | US5_1 -> (* None *)
                    let v30020 : string = ""
                    v30020
                | US5_0(v30019) -> (* Some *)
                    v30019
            let v30083 : unit = ()
            let v30084 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v29990, v29989)
            let v30085 : unit = (fun () -> v30084 (); v30083) ()
            let v30146 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v30150 : string =
                match v29990 with
                | US5_1 -> (* None *)
                    let v30148 : string = ""
                    v30148
                | US5_0(v30147) -> (* Some *)
                    v30147
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v30150,
              StandardOutputEncoding = v30146,
              WorkingDirectory = v30022,
              FileName = v29989,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v30151 : System.Diagnostics.ProcessStartInfo = start_info
            let v30152 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v30153 : int32 = v30152.Length
            let v30154 : Mut5 = {l0 = 0} : Mut5
            while method29(v30153, v30154) do
                let v30156 : int32 = v30154.l0
                let struct (v30157 : string, v30158 : string) = v30152.[int v30156]
                v30151.EnvironmentVariables.[v30157] <- v30158 
                let v30159 : int32 = v30156 + 1
                v30154.l0 <- v30159
                ()
            let v30160 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v30151)
            use v30160 = v30160 
            let v30161 : System.Diagnostics.Process = v30160 
            let v30162 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v30163 : System.Collections.Concurrent.ConcurrentStack<string> = v30162 ()
            let v30164 : bool = false
            let v30165 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v30161, v30163, v30164)
            v30161.OutputDataReceived.Add v30165 
            let v30166 : bool = true
            let v30167 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v30161, v30163, v30166)
            v30161.ErrorDataReceived.Add v30167 
            let v30168 : (unit -> bool) = v30161.Start
            let v30169 : bool = v30168 ()
            let v30170 : bool = v30169 = false
            if v30170 then
                let v30171 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v30171
            let v30172 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v30172 v30161
            let v30173 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v30173 v30161
            let v30176 : (System.Threading.CancellationToken -> US35) = method150()
            let v30177 : US35 option = v1 |> Option.map v30176 
            let v30197 : US35 = US35_1
            let v30198 : US35 = v30177 |> Option.defaultValue v30197 
            let v30205 : System.Threading.CancellationToken =
                match v30198 with
                | US35_1 -> (* None *)
                    let v30203 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v30203
                | US35_0(v30202) -> (* Some *)
                    v30202
            let v30206 : Async<System.Threading.CancellationToken> = method151(v30205)
            let! v30206 = v30206 
            let v30207 : System.Threading.CancellationToken = v30206 
            let v30208 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v30207.Register
            let v30209 : (unit -> unit) = closure65(v30161)
            let v30210 : System.Threading.CancellationTokenRegistration = v30208 v30209
            use v30210 = v30210 
            let v30211 : System.Threading.CancellationTokenRegistration = v30210 
            let v30212 : Async<int32> = method154(v30161, v30163, v30207)
            let! v30212 = v30212 
            let v30213 : int32 = v30212 
            let v30215 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v30216 : string seq = v30215 v30163
            let v30220 : (string seq -> string seq) = Seq.rev
            let v30221 : string seq = v30220 v30216
            let v30226 : string = method69()
            let v30227 : (string -> (string seq -> string)) = String.concat
            let v30228 : (string seq -> string) = v30227 v30226
            let v30229 : string = v30228 v30221
            let v30294 : unit = ()
            let v30295 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v30213, v30229)
            let v30296 : unit = (fun () -> v30295 (); v30294) ()
            return struct (v30213, v30229) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v36164 : Async<struct (int32 * string)> = _let'_v24119 
    let _run_target_args'_v11 = v36164 
    #endif
#else
    let v36166 : unit = ()
    let _let'_v36166 =
        async {
            (* run_target_args'
            let v41975 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v41978 : int32, v41979 : string) = null |> unbox<struct (int32 * string)>
            return struct (v41978, v41979) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v41986 : int32, v41987 : string) = null |> unbox<struct (int32 * string)>
            return struct (v41986, v41987) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v41994 : int32, v41995 : string) = null |> unbox<struct (int32 * string)>
            return struct (v41994, v41995) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v42002 : int32, v42003 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42002, v42003) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v42010 : int32, v42011 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42010, v42011) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v42018 : int32, v42019 : string) = null |> unbox<struct (int32 * string)>
            return struct (v42018, v42019) 
            #endif
#else
            let v42024 : US17 = method93(v0)
            let struct (v42036 : string, v42037 : US5) =
                match v42024 with
                | US17_1(v42027) -> (* Error *)
                    let v42029 : string = $"resultm.get / Result value was Error: {v42027}"
                    failwith<struct (string * US5)> v42029
                | US17_0(v42025, v42026) -> (* Ok *)
                    struct (v42025, v42026)
            let v42040 : (string -> US5) = method6()
            let v42041 : US5 option = v6 |> Option.map v42040 
            let v42061 : US5 = US5_1
            let v42062 : US5 = v42041 |> Option.defaultValue v42061 
            let v42069 : string =
                match v42062 with
                | US5_1 -> (* None *)
                    let v42067 : string = ""
                    v42067
                | US5_0(v42066) -> (* Some *)
                    v42066
            let v42130 : unit = ()
            let v42131 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v42037, v42036)
            let v42132 : unit = (fun () -> v42131 (); v42130) ()
            let v42193 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v42197 : string =
                match v42037 with
                | US5_1 -> (* None *)
                    let v42195 : string = ""
                    v42195
                | US5_0(v42194) -> (* Some *)
                    v42194
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v42197,
              StandardOutputEncoding = v42193,
              WorkingDirectory = v42069,
              FileName = v42036,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v42198 : System.Diagnostics.ProcessStartInfo = start_info
            let v42199 : (struct (string * string) []) = method144(v0, v1, v2, v3, v4, v5, v6)
            let v42200 : int32 = v42199.Length
            let v42201 : Mut5 = {l0 = 0} : Mut5
            while method29(v42200, v42201) do
                let v42203 : int32 = v42201.l0
                let struct (v42204 : string, v42205 : string) = v42199.[int v42203]
                v42198.EnvironmentVariables.[v42204] <- v42205 
                let v42206 : int32 = v42203 + 1
                v42201.l0 <- v42206
                ()
            let v42207 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v42198)
            use v42207 = v42207 
            let v42208 : System.Diagnostics.Process = v42207 
            let v42209 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v42210 : System.Collections.Concurrent.ConcurrentStack<string> = v42209 ()
            let v42211 : bool = false
            let v42212 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v42208, v42210, v42211)
            v42208.OutputDataReceived.Add v42212 
            let v42213 : bool = true
            let v42214 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v42208, v42210, v42213)
            v42208.ErrorDataReceived.Add v42214 
            let v42215 : (unit -> bool) = v42208.Start
            let v42216 : bool = v42215 ()
            let v42217 : bool = v42216 = false
            if v42217 then
                let v42218 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v42218
            let v42219 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v42219 v42208
            let v42220 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v42220 v42208
            let v42223 : (System.Threading.CancellationToken -> US35) = method150()
            let v42224 : US35 option = v1 |> Option.map v42223 
            let v42244 : US35 = US35_1
            let v42245 : US35 = v42224 |> Option.defaultValue v42244 
            let v42252 : System.Threading.CancellationToken =
                match v42245 with
                | US35_1 -> (* None *)
                    let v42250 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v42250
                | US35_0(v42249) -> (* Some *)
                    v42249
            let v42253 : Async<System.Threading.CancellationToken> = method151(v42252)
            let! v42253 = v42253 
            let v42254 : System.Threading.CancellationToken = v42253 
            let v42255 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v42254.Register
            let v42256 : (unit -> unit) = closure65(v42208)
            let v42257 : System.Threading.CancellationTokenRegistration = v42255 v42256
            use v42257 = v42257 
            let v42258 : System.Threading.CancellationTokenRegistration = v42257 
            let v42259 : Async<int32> = method154(v42208, v42210, v42254)
            let! v42259 = v42259 
            let v42260 : int32 = v42259 
            let v42262 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v42263 : string seq = v42262 v42210
            let v42267 : (string seq -> string seq) = Seq.rev
            let v42268 : string seq = v42267 v42263
            let v42273 : string = method69()
            let v42274 : (string -> (string seq -> string)) = String.concat
            let v42275 : (string seq -> string) = v42274 v42273
            let v42276 : string = v42275 v42268
            let v42341 : unit = ()
            let v42342 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v42260, v42276)
            let v42343 : unit = (fun () -> v42342 (); v42341) ()
            return struct (v42260, v42276) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v48211 : Async<struct (int32 * string)> = _let'_v36166 
    let _run_target_args'_v11 = v48211 
    #endif
    let v48212 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v48212
and method141 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method142(v0, v1, v2, v3, v4, v5, v6)
and method91 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method92(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US17 = method93(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US17_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US17_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US25 = method106(v34)
    let v44 : (string []) =
        match v35 with
        | US25_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US25_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let v119 : string = "_vec_map"
    let v120 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure40(v0, v1, v2, v3, v4, v5, v6, v29, v120)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v253 : bool = true
    let mutable _capture_v253 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v254 : string = "std::process::Command::new(&*$0)"
    let v255 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v254 
    let v256 : string = "true; let mut v255 = v255"
    let v257 : bool = Fable.Core.RustInterop.emitRustExpr () v256 
    let v258 : string = "true; std::process::Command::args(&mut v255, &*$0)"
    let v259 : bool = Fable.Core.RustInterop.emitRustExpr v120 v258 
    let v260 : string = "$0"
    let v261 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v255 v260 
    let v262 : string = "std::process::Stdio::piped()"
    let v263 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v262 
    let v264 : string = "true; let mut v261 = v261"
    let v265 : bool = Fable.Core.RustInterop.emitRustExpr () v264 
    let v266 : string = "true; std::process::Command::stdout(&mut v261, std::process::Stdio::piped())"
    let v267 : bool = Fable.Core.RustInterop.emitRustExpr () v266 
    let v268 : string = "$0"
    let v269 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v261 v268 
    let v270 : string = "std::process::Stdio::piped()"
    let v271 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v270 
    let v272 : string = "true; let mut v269 = v269"
    let v273 : bool = Fable.Core.RustInterop.emitRustExpr () v272 
    let v274 : string = "true; std::process::Command::stderr(&mut v269, std::process::Stdio::piped())"
    let v275 : bool = Fable.Core.RustInterop.emitRustExpr () v274 
    let v276 : string = "$0"
    let v277 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v269 v276 
    let v278 : string = "std::process::Stdio::piped()"
    let v279 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v278 
    let v280 : string = "true; let mut v277 = v277"
    let v281 : bool = Fable.Core.RustInterop.emitRustExpr () v280 
    let v282 : string = "true; std::process::Command::stdin(&mut v277, std::process::Stdio::piped())"
    let v283 : bool = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "$0"
    let v285 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v277 v284 
    let v288 : (string -> US5) = method6()
    let v289 : US5 option = v6 |> Option.map v288 
    let v309 : US5 = US5_1
    let v310 : US5 = v289 |> Option.defaultValue v309 
    let v324 : std_process_Command =
        match v310 with
        | US5_1 -> (* None *)
            let v321 : string = $"v285"
            let v322 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v321 
            v322
        | US5_0(v314) -> (* Some *)
            let v315 : string = "true; let mut v285 = v285"
            let v316 : bool = Fable.Core.RustInterop.emitRustExpr () v315 
            let v317 : string = "true; std::process::Command::current_dir(&mut v285, &*$0)"
            let v318 : bool = Fable.Core.RustInterop.emitRustExpr v314 v317 
            let v319 : string = $"v285"
            let v320 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v319 
            v320
    let v325 : uint64 = System.Convert.ToUInt64 v2.Length
    let v326 : bool = v325 = 0UL
    let v346 : std_process_Command =
        if v326 then
            v324
        else
            let v327 : string = "$0.to_vec()"
            let v328 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v327 
            let v329 : string = "true; let _vec_fold_ = $0.into_iter().fold(v324, |acc, x| { //"
            let v330 : bool = Fable.Core.RustInterop.emitRustExpr v328 v329 
            let v331 : string = "acc"
            let v332 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v331 
            let v333 : string = "x"
            let struct (v334 : string, v335 : string) = Fable.Core.RustInterop.emitRustExpr () v333 
            let v336 : string = "true; let mut v332 = v332"
            let v337 : bool = Fable.Core.RustInterop.emitRustExpr () v336 
            let v338 : string = "true; std::process::Command::env(&mut v332, &*$0, &*$1)"
            let v339 : bool = Fable.Core.RustInterop.emitRustExpr struct (v334, v335) v338 
            let v340 : string = "$0"
            let v341 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v332 v340 
            let v342 : string = "true; $0 })"
            let v343 : bool = Fable.Core.RustInterop.emitRustExpr v341 v342 
            let v344 : string = "_vec_fold_"
            let v345 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v344 
            v345
    let v347 : string = "true; let mut v346 = v346"
    let v348 : bool = Fable.Core.RustInterop.emitRustExpr () v347 
    let v349 : string = "std::process::Command::spawn(&mut v346)"
    let v350 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v349 
    let v351 : (std_io_Error -> std_string_String) = method73()
    (* run_target_args'
    let v353 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v354 : string = "$0.map_err(|x| $1(x))"
    let v355 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v350, v351) v354 
    let _run_target_args'_v353 = v355 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v356 : string = "$0.map_err(|x| $1(x))"
    let v357 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v350, v351) v356 
    let _run_target_args'_v353 = v357 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v358 : string = "$0.map_err(|x| $1(x))"
    let v359 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v350, v351) v358 
    let _run_target_args'_v353 = v359 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v360 : Result<std_process_Child, std_string_String> = match v350 with Ok x -> Ok x | Error x -> Error (v351 x)
    let _run_target_args'_v353 = v360 
    #endif
#if FABLE_COMPILER_PYTHON
    let v361 : Result<std_process_Child, std_string_String> = match v350 with Ok x -> Ok x | Error x -> Error (v351 x)
    let _run_target_args'_v353 = v361 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v362 : Result<std_process_Child, std_string_String> = match v350 with Ok x -> Ok x | Error x -> Error (v351 x)
    let _run_target_args'_v353 = v362 
    #endif
#else
    let v363 : Result<std_process_Child, std_string_String> = match v350 with Ok x -> Ok x | Error x -> Error (v351 x)
    let _run_target_args'_v353 = v363 
    #endif
    let v364 : Result<std_process_Child, std_string_String> = _run_target_args'_v353 
    let v367 : (std_process_Child option -> std_process_Child option) = method117()
    let v368 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v369 : bool = Fable.Core.RustInterop.emitRustExpr v364 v368 
    let v370 : string = "x"
    let v371 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v370 
    let v373 : std_process_Child option = Some v371 
    let v376 : std_process_Child option = v367 v373
    let v377 : string = "std::sync::Mutex::new(v376)"
    let v378 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "std::sync::Arc::new(v378)"
    let v380 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v379 
    let v381 : string = "true; $0 })"
    let v382 : bool = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let v383 : string = "_result_map_"
    let v384 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v383 
    let v385 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) = method118()
    let v386 : (std_string_String -> US27) = method119()
    let v387 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v388 : US27 = Fable.Core.RustInterop.emitRustExpr struct (v385, v386, v384) v387 
    let struct (v2176 : int32, v2177 : US7, v2178 : US28) =
        match v388 with
        | US27_1(v2039) -> (* Error *)
            let v2104 : unit = ()
            let v2105 : (unit -> unit) = closure44(v0, v1, v2, v3, v4, v5, v6, v29, v120, v2039)
            let v2106 : unit = (fun () -> v2105 (); v2104) ()
            let v2171 : US7 = US7_0(v2039)
            let v2172 : US28 = US28_1
            struct (-1, v2171, v2172)
        | US27_0(v389) -> (* Ok *)
            let v390 : string = "true; let _capture = (|| { //"
            let v391 : bool = Fable.Core.RustInterop.emitRustExpr () v390 
            let v392 : string = "$0"
            let v393 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v389 v392 
            let v394 : string = "v393.lock()"
            let v395 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v394 
            (* run_target_args'
            let v397 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v398 : string = "$0.unwrap()"
            let v399 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v395 v398 
            let _run_target_args'_v397 = v399 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v400 : string = "$0.unwrap()"
            let v401 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v395 v400 
            let _run_target_args'_v397 = v401 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v402 : string = "$0.unwrap()"
            let v403 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v395 v402 
            let _run_target_args'_v397 = v403 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v404 : std_sync_MutexGuard<std_process_Child option> = match v395 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v397 = v404 
            #endif
#if FABLE_COMPILER_PYTHON
            let v405 : std_sync_MutexGuard<std_process_Child option> = match v395 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v397 = v405 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v406 : std_sync_MutexGuard<std_process_Child option> = match v395 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v397 = v406 
            #endif
#else
            let v407 : std_sync_MutexGuard<std_process_Child option> = match v395 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v397 = v407 
            #endif
            let v408 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v397 
            let v411 : std_sync_MutexGuard<std_process_Child option> = method121(v408)
            let v412 : string = "true; let mut v411 = v411"
            let v413 : bool = Fable.Core.RustInterop.emitRustExpr () v412 
            let v414 : string = "&mut $0"
            let v415 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v411 v414 
            let v416 : string = "$0.as_mut()"
            let v417 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v415 v416 
            let v418 : string = "$0.unwrap()"
            let v419 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v417 v418 
            let v420 : string = "&mut $0.stdout"
            let v421 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v419 v420 
            let v422 : string = "Option::take($0)"
            let v423 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v421 v422 
            let v424 : string = "$0.unwrap()"
            let v425 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v423 v424 
            let v426 : string = "true; $0 })()"
            let v427 : bool = Fable.Core.RustInterop.emitRustExpr v425 v426 
            let v428 : string = "_capture"
            let v429 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v428 
            let v430 : string = "true; let _capture = (|| { //"
            let v431 : bool = Fable.Core.RustInterop.emitRustExpr () v430 
            let v432 : string = "$0"
            let v433 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v389 v432 
            let v434 : string = "v433.lock()"
            let v435 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v434 
            (* run_target_args'
            let v437 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v438 : string = "$0.unwrap()"
            let v439 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v435 v438 
            let _run_target_args'_v437 = v439 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v440 : string = "$0.unwrap()"
            let v441 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v435 v440 
            let _run_target_args'_v437 = v441 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v442 : string = "$0.unwrap()"
            let v443 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v435 v442 
            let _run_target_args'_v437 = v443 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v444 : std_sync_MutexGuard<std_process_Child option> = match v435 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v437 = v444 
            #endif
#if FABLE_COMPILER_PYTHON
            let v445 : std_sync_MutexGuard<std_process_Child option> = match v435 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v437 = v445 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v446 : std_sync_MutexGuard<std_process_Child option> = match v435 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v437 = v446 
            #endif
#else
            let v447 : std_sync_MutexGuard<std_process_Child option> = match v435 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v437 = v447 
            #endif
            let v448 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v437 
            let v451 : std_sync_MutexGuard<std_process_Child option> = method121(v448)
            let v452 : string = "true; let mut v451 = v451"
            let v453 : bool = Fable.Core.RustInterop.emitRustExpr () v452 
            let v454 : string = "&mut $0"
            let v455 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v451 v454 
            let v456 : string = "$0.as_mut()"
            let v457 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v455 v456 
            let v458 : string = "$0.unwrap()"
            let v459 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v457 v458 
            let v460 : string = "&mut $0.stderr"
            let v461 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v459 v460 
            let v462 : string = "Option::take($0)"
            let v463 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v461 v462 
            let v464 : string = "$0.unwrap()"
            let v465 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v463 v464 
            let v466 : string = "true; $0 })()"
            let v467 : bool = Fable.Core.RustInterop.emitRustExpr v465 v466 
            let v468 : string = "_capture"
            let v469 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v468 
            let v470 : string = "true; let _capture = (|| { //"
            let v471 : bool = Fable.Core.RustInterop.emitRustExpr () v470 
            let v472 : string = "$0"
            let v473 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v389 v472 
            let v474 : string = "v473.lock()"
            let v475 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v474 
            (* run_target_args'
            let v477 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v478 : string = "$0.unwrap()"
            let v479 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v475 v478 
            let _run_target_args'_v477 = v479 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v480 : string = "$0.unwrap()"
            let v481 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v475 v480 
            let _run_target_args'_v477 = v481 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v482 : string = "$0.unwrap()"
            let v483 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v475 v482 
            let _run_target_args'_v477 = v483 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v484 : std_sync_MutexGuard<std_process_Child option> = match v475 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v477 = v484 
            #endif
#if FABLE_COMPILER_PYTHON
            let v485 : std_sync_MutexGuard<std_process_Child option> = match v475 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v477 = v485 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v486 : std_sync_MutexGuard<std_process_Child option> = match v475 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v477 = v486 
            #endif
#else
            let v487 : std_sync_MutexGuard<std_process_Child option> = match v475 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v477 = v487 
            #endif
            let v488 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v477 
            let v491 : std_sync_MutexGuard<std_process_Child option> = method121(v488)
            let v492 : string = "true; let mut v491 = v491"
            let v493 : bool = Fable.Core.RustInterop.emitRustExpr () v492 
            let v494 : string = "&mut $0"
            let v495 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v491 v494 
            let v496 : string = "$0.as_mut()"
            let v497 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v495 v496 
            let v498 : string = "$0.unwrap()"
            let v499 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v497 v498 
            let v500 : string = "&mut $0.stdin"
            let v501 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v499 v500 
            let v502 : string = "Option::take($0)"
            let v503 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v501 v502 
            let v504 : string = "$0.unwrap()"
            let v505 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v503 v504 
            let v507 : std_process_ChildStdin option = Some v505 
            let v510 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method122()
            let v511 : std_process_ChildStdin option = v510 v507
            let v512 : string = "std::sync::Mutex::new(v511)"
            let v513 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v512 
            let v514 : string = "std::sync::Arc::new(v513)"
            let v515 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v514 
            let v516 : string = "true; $0 })()"
            let v517 : bool = Fable.Core.RustInterop.emitRustExpr v515 v516 
            let v518 : string = "_capture"
            let v519 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v518 
            let v520 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v521 : std_sync_mpsc_Sender<std_string_String>, v522 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v520 
            let v523 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method123()
            let v524 : std_sync_mpsc_Sender<std_string_String> = v523 v521
            let v525 : string = "std::sync::Mutex::new(v524)"
            let v526 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v525 
            let v527 : string = "std::sync::Arc::new(v526)"
            let v528 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v527 
            let v529 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method124()
            let v530 : std_sync_mpsc_Sender<std_string_String> = v529 v521
            let v531 : string = "std::sync::Mutex::new(v530)"
            let v532 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v531 
            let v533 : string = "std::sync::Arc::new(v532)"
            let v534 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v533 
            let v535 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method125()
            let v536 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v535 v522
            let v537 : string = "std::sync::Mutex::new(v536)"
            let v538 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v537 
            let v539 : string = "std::sync::Arc::new(v538)"
            let v540 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v539 
            let v541 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v542 : bool = Fable.Core.RustInterop.emitRustExpr () v541 
            let v543 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v544 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v429 v543 
            let v545 : string = "std::io::BufReader::new($0)"
            let v546 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v544 v545 
            let v547 : string = "std::io::BufRead::lines(v546)"
            let v548 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v547 
            let v549 : string = "true; let mut v548 = v548; let _iter_try_for_each = v548.try_for_each(|x| { //"
            let v550 : bool = Fable.Core.RustInterop.emitRustExpr () v549 
            let v551 : string = "x"
            let v552 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v551 
            let v553 : string = "$0.clone()"
            let v554 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v528 v553 
            let v555 : (std_io_Error -> std_string_String) = method73()
            (* run_target_args'
            let v557 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v558 : string = "$0.map_err(|x| $1(x))"
            let v559 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v552, v555) v558 
            let _run_target_args'_v557 = v559 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v560 : string = "$0.map_err(|x| $1(x))"
            let v561 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v552, v555) v560 
            let _run_target_args'_v557 = v561 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v562 : string = "$0.map_err(|x| $1(x))"
            let v563 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v552, v555) v562 
            let _run_target_args'_v557 = v563 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v564 : Result<std_string_String, std_string_String> = match v552 with Ok x -> Ok x | Error x -> Error (v555 x)
            let _run_target_args'_v557 = v564 
            #endif
#if FABLE_COMPILER_PYTHON
            let v565 : Result<std_string_String, std_string_String> = match v552 with Ok x -> Ok x | Error x -> Error (v555 x)
            let _run_target_args'_v557 = v565 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v566 : Result<std_string_String, std_string_String> = match v552 with Ok x -> Ok x | Error x -> Error (v555 x)
            let _run_target_args'_v557 = v566 
            #endif
#else
            let v567 : Result<std_string_String, std_string_String> = match v552 with Ok x -> Ok x | Error x -> Error (v555 x)
            let _run_target_args'_v557 = v567 
            #endif
            let v568 : Result<std_string_String, std_string_String> = _run_target_args'_v557 
            let v571 : (std_string_String -> US29) = method126()
            let v572 : (std_string_String -> US29) = method127()
            let v573 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v574 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v571, v572, v568) v573 
            let v963 : std_string_String =
                match v574 with
                | US29_1(v771) -> (* Error *)
                    let v832 : unit = ()
                    let v833 : (unit -> unit) = closure50(v5, v771)
                    let v834 : unit = (fun () -> v833 (); v832) ()
                    let v895 : string = $"\u001b[4;7m{v771}\u001b[0m"
                    (* run_target_args'
                    let v900 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v901 : string = "&*$0"
                    let v902 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v895 v901 
                    let _run_target_args'_v900 = v902 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v903 : string = "&*$0"
                    let v904 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v895 v903 
                    let _run_target_args'_v900 = v904 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v905 : string = "&*$0"
                    let v906 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v895 v905 
                    let _run_target_args'_v900 = v906 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v908 : Ref<Str> = v895 |> unbox<Ref<Str>>
                    let _run_target_args'_v900 = v908 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v912 : Ref<Str> = v895 |> unbox<Ref<Str>>
                    let _run_target_args'_v900 = v912 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v916 : Ref<Str> = v895 |> unbox<Ref<Str>>
                    let _run_target_args'_v900 = v916 
                    #endif
#else
                    let v920 : Ref<Str> = v895 |> unbox<Ref<Str>>
                    let _run_target_args'_v900 = v920 
                    #endif
                    let v923 : Ref<Str> = _run_target_args'_v900 
                    (* run_target_args'
                    let v933 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v934 : string = "String::from($0)"
                    let v935 : std_string_String = Fable.Core.RustInterop.emitRustExpr v923 v934 
                    let _run_target_args'_v933 = v935 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v936 : string = "String::from($0)"
                    let v937 : std_string_String = Fable.Core.RustInterop.emitRustExpr v923 v936 
                    let _run_target_args'_v933 = v937 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v938 : string = "String::from($0)"
                    let v939 : std_string_String = Fable.Core.RustInterop.emitRustExpr v923 v938 
                    let _run_target_args'_v933 = v939 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v941 : std_string_String = v923 |> unbox<std_string_String>
                    let _run_target_args'_v933 = v941 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v945 : std_string_String = v923 |> unbox<std_string_String>
                    let _run_target_args'_v933 = v945 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v949 : std_string_String = v923 |> unbox<std_string_String>
                    let _run_target_args'_v933 = v949 
                    #endif
#else
                    let v953 : std_string_String = v923 |> unbox<std_string_String>
                    let _run_target_args'_v933 = v953 
                    #endif
                    let v956 : std_string_String = _run_target_args'_v933 
                    v956
                | US29_0(v575) -> (* Ok *)
                    let v576 : string = "fable_library_rust::String_::fromString($0)"
                    let v577 : string = Fable.Core.RustInterop.emitRustExpr v575 v576 
                    let v578 : string = "encoding_rs::UTF_8"
                    let v579 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v578 
                    let v580 : string = "$0.encode(&*$1).0"
                    let v581 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v579, v577) v580 
                    let v582 : string = "$0.as_ref()"
                    let v583 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v581 v582 
                    let v584 : string = "std::str::from_utf8($0)"
                    let v585 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v583 v584 
                    (* run_target_args'
                    let v587 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v588 : string = "$0.unwrap()"
                    let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v585 v588 
                    let _run_target_args'_v587 = v589 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v590 : string = "$0.unwrap()"
                    let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v585 v590 
                    let _run_target_args'_v587 = v591 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v592 : string = "$0.unwrap()"
                    let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v585 v592 
                    let _run_target_args'_v587 = v593 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v594 : Ref<Str> = match v585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v587 = v594 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v595 : Ref<Str> = match v585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v587 = v595 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v596 : Ref<Str> = match v585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v587 = v596 
                    #endif
#else
                    let v597 : Ref<Str> = match v585 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v587 = v597 
                    #endif
                    let v598 : Ref<Str> = _run_target_args'_v587 
                    (* run_target_args'
                    let v605 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v606 : string = "String::from($0)"
                    let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr v598 v606 
                    let _run_target_args'_v605 = v607 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v608 : string = "String::from($0)"
                    let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v598 v608 
                    let _run_target_args'_v605 = v609 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v610 : string = "String::from($0)"
                    let v611 : std_string_String = Fable.Core.RustInterop.emitRustExpr v598 v610 
                    let _run_target_args'_v605 = v611 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v613 : std_string_String = v598 |> unbox<std_string_String>
                    let _run_target_args'_v605 = v613 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v617 : std_string_String = v598 |> unbox<std_string_String>
                    let _run_target_args'_v605 = v617 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v621 : std_string_String = v598 |> unbox<std_string_String>
                    let _run_target_args'_v605 = v621 
                    #endif
#else
                    let v625 : std_string_String = v598 |> unbox<std_string_String>
                    let _run_target_args'_v605 = v625 
                    #endif
                    let v628 : std_string_String = _run_target_args'_v605 
                    let v634 : string = "fable_library_rust::String_::fromString($0)"
                    let v635 : string = Fable.Core.RustInterop.emitRustExpr v628 v634 
                    let v636 : string = $"> {v635}"
                    if v5 then
                        let v700 : unit = ()
                        let v701 : (unit -> unit) = closure51(v636)
                        let v702 : unit = (fun () -> v701 (); v700) ()
                        ()
                    else
                        let v767 : unit = ()
                        let v768 : (unit -> unit) = closure10(v636)
                        let v769 : unit = (fun () -> v768 (); v767) ()
                        ()
                    v628
            let v964 : string = "$0"
            let v965 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v554 v964 
            let v966 : string = "v965.lock()"
            let v967 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v966 
            (* run_target_args'
            let v969 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v970 : string = "$0.unwrap()"
            let v971 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v967 v970 
            let _run_target_args'_v969 = v971 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v972 : string = "$0.unwrap()"
            let v973 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v967 v972 
            let _run_target_args'_v969 = v973 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v974 : string = "$0.unwrap()"
            let v975 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v967 v974 
            let _run_target_args'_v969 = v975 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v976 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v969 = v976 
            #endif
#if FABLE_COMPILER_PYTHON
            let v977 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v969 = v977 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v978 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v969 = v978 
            #endif
#else
            let v979 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v969 = v979 
            #endif
            let v980 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v969 
            let v983 : string = "&$0"
            let v984 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v980 v983 
            let v985 : string = "$0.send($1)"
            let v986 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v984, v963) v985 
            let v987 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method130()
            (* run_target_args'
            let v989 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v990 : string = "$0.map_err(|x| $1(x))"
            let v991 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v986, v987) v990 
            let _run_target_args'_v989 = v991 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v992 : string = "$0.map_err(|x| $1(x))"
            let v993 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v986, v987) v992 
            let _run_target_args'_v989 = v993 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v994 : string = "$0.map_err(|x| $1(x))"
            let v995 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v986, v987) v994 
            let _run_target_args'_v989 = v995 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v996 : Result<unit, std_string_String> = match v986 with Ok x -> Ok x | Error x -> Error (v987 x)
            let _run_target_args'_v989 = v996 
            #endif
#if FABLE_COMPILER_PYTHON
            let v997 : Result<unit, std_string_String> = match v986 with Ok x -> Ok x | Error x -> Error (v987 x)
            let _run_target_args'_v989 = v997 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v998 : Result<unit, std_string_String> = match v986 with Ok x -> Ok x | Error x -> Error (v987 x)
            let _run_target_args'_v989 = v998 
            #endif
#else
            let v999 : Result<unit, std_string_String> = match v986 with Ok x -> Ok x | Error x -> Error (v987 x)
            let _run_target_args'_v989 = v999 
            #endif
            let v1000 : Result<unit, std_string_String> = _run_target_args'_v989 
            let v1003 : string = "$0"
            let v1004 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1000 v1003 
            let v1005 : string = "true; $0 }); //"
            let v1006 : bool = Fable.Core.RustInterop.emitRustExpr v1004 v1005 
            let v1007 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1008 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1007 
            let v1009 : Result<unit, string> = method131(v1008)
            let v1010 : string = ""
            let v1011 : string = "}"
            let v1012 : string = v1010 + v1011 
            let x = v1009 //
            let v1013 : _ = x
            let v1014 : unit = ()
            (* run_target_args'
            let v1015 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1016 : string = $"true; let _fix_closure_v1014 = $0"
            let v1017 : bool = Fable.Core.RustInterop.emitRustExpr v1013 v1016 
            let _run_target_args'_v1015 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1018 : string = $"true; let _fix_closure_v1014 = $0"
            let v1019 : bool = Fable.Core.RustInterop.emitRustExpr v1013 v1018 
            let _run_target_args'_v1015 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1020 : string = $"true; let _fix_closure_v1014 = $0"
            let v1021 : bool = Fable.Core.RustInterop.emitRustExpr v1013 v1020 
            let _run_target_args'_v1015 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1015 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1015 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1015 = false 
            #endif
#else
            let _run_target_args'_v1015 = false 
            #endif
            let v1022 : bool = _run_target_args'_v1015 
            let v1024 : string = $"true; _fix_closure_v1014 " + v1012 + "); " + v1010 + " // rust.fix_closure'"
            let v1025 : bool = Fable.Core.RustInterop.emitRustExpr () v1024 
            let v1026 : string = "__spawn"
            let v1027 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1026 
            let v1028 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1029 : bool = Fable.Core.RustInterop.emitRustExpr () v1028 
            let v1030 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1031 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v469 v1030 
            let v1032 : string = "std::io::BufReader::new($0)"
            let v1033 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v1031 v1032 
            let v1034 : string = "std::io::BufRead::lines(v1033)"
            let v1035 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1034 
            let v1036 : string = "true; let mut v1035 = v1035; let _iter_try_for_each = v1035.try_for_each(|x| { //"
            let v1037 : bool = Fable.Core.RustInterop.emitRustExpr () v1036 
            let v1038 : string = "x"
            let v1039 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1038 
            let v1040 : string = "$0.clone()"
            let v1041 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v534 v1040 
            let v1042 : (std_io_Error -> std_string_String) = method73()
            (* run_target_args'
            let v1044 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1045 : string = "$0.map_err(|x| $1(x))"
            let v1046 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1039, v1042) v1045 
            let _run_target_args'_v1044 = v1046 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1047 : string = "$0.map_err(|x| $1(x))"
            let v1048 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1039, v1042) v1047 
            let _run_target_args'_v1044 = v1048 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1049 : string = "$0.map_err(|x| $1(x))"
            let v1050 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1039, v1042) v1049 
            let _run_target_args'_v1044 = v1050 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1051 : Result<std_string_String, std_string_String> = match v1039 with Ok x -> Ok x | Error x -> Error (v1042 x)
            let _run_target_args'_v1044 = v1051 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1052 : Result<std_string_String, std_string_String> = match v1039 with Ok x -> Ok x | Error x -> Error (v1042 x)
            let _run_target_args'_v1044 = v1052 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1053 : Result<std_string_String, std_string_String> = match v1039 with Ok x -> Ok x | Error x -> Error (v1042 x)
            let _run_target_args'_v1044 = v1053 
            #endif
#else
            let v1054 : Result<std_string_String, std_string_String> = match v1039 with Ok x -> Ok x | Error x -> Error (v1042 x)
            let _run_target_args'_v1044 = v1054 
            #endif
            let v1055 : Result<std_string_String, std_string_String> = _run_target_args'_v1044 
            let v1058 : (std_string_String -> US29) = method126()
            let v1059 : (std_string_String -> US29) = method127()
            let v1060 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1061 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v1058, v1059, v1055) v1060 
            let v1515 : std_string_String =
                match v1061 with
                | US29_1(v1323) -> (* Error *)
                    let v1384 : unit = ()
                    let v1385 : (unit -> unit) = closure50(v5, v1323)
                    let v1386 : unit = (fun () -> v1385 (); v1384) ()
                    let v1447 : string = $"\u001b[4;7m{v1323}\u001b[0m"
                    (* run_target_args'
                    let v1452 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1453 : string = "&*$0"
                    let v1454 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1447 v1453 
                    let _run_target_args'_v1452 = v1454 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1455 : string = "&*$0"
                    let v1456 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1447 v1455 
                    let _run_target_args'_v1452 = v1456 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1457 : string = "&*$0"
                    let v1458 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1447 v1457 
                    let _run_target_args'_v1452 = v1458 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1460 : Ref<Str> = v1447 |> unbox<Ref<Str>>
                    let _run_target_args'_v1452 = v1460 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1464 : Ref<Str> = v1447 |> unbox<Ref<Str>>
                    let _run_target_args'_v1452 = v1464 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1468 : Ref<Str> = v1447 |> unbox<Ref<Str>>
                    let _run_target_args'_v1452 = v1468 
                    #endif
#else
                    let v1472 : Ref<Str> = v1447 |> unbox<Ref<Str>>
                    let _run_target_args'_v1452 = v1472 
                    #endif
                    let v1475 : Ref<Str> = _run_target_args'_v1452 
                    (* run_target_args'
                    let v1485 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1486 : string = "String::from($0)"
                    let v1487 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1475 v1486 
                    let _run_target_args'_v1485 = v1487 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1488 : string = "String::from($0)"
                    let v1489 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1475 v1488 
                    let _run_target_args'_v1485 = v1489 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1490 : string = "String::from($0)"
                    let v1491 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1475 v1490 
                    let _run_target_args'_v1485 = v1491 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1493 : std_string_String = v1475 |> unbox<std_string_String>
                    let _run_target_args'_v1485 = v1493 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1497 : std_string_String = v1475 |> unbox<std_string_String>
                    let _run_target_args'_v1485 = v1497 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1501 : std_string_String = v1475 |> unbox<std_string_String>
                    let _run_target_args'_v1485 = v1501 
                    #endif
#else
                    let v1505 : std_string_String = v1475 |> unbox<std_string_String>
                    let _run_target_args'_v1485 = v1505 
                    #endif
                    let v1508 : std_string_String = _run_target_args'_v1485 
                    v1508
                | US29_0(v1062) -> (* Ok *)
                    let v1063 : string = "fable_library_rust::String_::fromString($0)"
                    let v1064 : string = Fable.Core.RustInterop.emitRustExpr v1062 v1063 
                    let v1065 : string = "encoding_rs::UTF_8"
                    let v1066 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1065 
                    let v1067 : string = "$0.encode(&*$1).0"
                    let v1068 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1066, v1064) v1067 
                    let v1069 : string = "$0.as_ref()"
                    let v1070 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1068 v1069 
                    let v1071 : string = "std::str::from_utf8($0)"
                    let v1072 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1070 v1071 
                    (* run_target_args'
                    let v1074 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1075 : string = "$0.unwrap()"
                    let v1076 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1072 v1075 
                    let _run_target_args'_v1074 = v1076 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1077 : string = "$0.unwrap()"
                    let v1078 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1072 v1077 
                    let _run_target_args'_v1074 = v1078 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1079 : string = "$0.unwrap()"
                    let v1080 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1072 v1079 
                    let _run_target_args'_v1074 = v1080 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1081 : Ref<Str> = match v1072 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1074 = v1081 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1082 : Ref<Str> = match v1072 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1074 = v1082 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1083 : Ref<Str> = match v1072 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1074 = v1083 
                    #endif
#else
                    let v1084 : Ref<Str> = match v1072 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1074 = v1084 
                    #endif
                    let v1085 : Ref<Str> = _run_target_args'_v1074 
                    (* run_target_args'
                    let v1092 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1093 : string = "String::from($0)"
                    let v1094 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1085 v1093 
                    let _run_target_args'_v1092 = v1094 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1095 : string = "String::from($0)"
                    let v1096 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1085 v1095 
                    let _run_target_args'_v1092 = v1096 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1097 : string = "String::from($0)"
                    let v1098 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1085 v1097 
                    let _run_target_args'_v1092 = v1098 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1100 : std_string_String = v1085 |> unbox<std_string_String>
                    let _run_target_args'_v1092 = v1100 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1104 : std_string_String = v1085 |> unbox<std_string_String>
                    let _run_target_args'_v1092 = v1104 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1108 : std_string_String = v1085 |> unbox<std_string_String>
                    let _run_target_args'_v1092 = v1108 
                    #endif
#else
                    let v1112 : std_string_String = v1085 |> unbox<std_string_String>
                    let _run_target_args'_v1092 = v1112 
                    #endif
                    let v1115 : std_string_String = _run_target_args'_v1092 
                    let v1121 : string = "fable_library_rust::String_::fromString($0)"
                    let v1122 : string = Fable.Core.RustInterop.emitRustExpr v1115 v1121 
                    let v1123 : string = $"! {v1122}"
                    if v5 then
                        let v1186 : unit = ()
                        let v1187 : (unit -> unit) = closure51(v1123)
                        let v1188 : unit = (fun () -> v1187 (); v1186) ()
                        ()
                    else
                        let v1252 : unit = ()
                        let v1253 : (unit -> unit) = closure10(v1123)
                        let v1254 : unit = (fun () -> v1253 (); v1252) ()
                        ()
                    let v1256 : string = $"\u001b[4;7m{v1115}\u001b[0m"
                    (* run_target_args'
                    let v1261 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1262 : string = "&*$0"
                    let v1263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1256 v1262 
                    let _run_target_args'_v1261 = v1263 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1264 : string = "&*$0"
                    let v1265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1256 v1264 
                    let _run_target_args'_v1261 = v1265 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1266 : string = "&*$0"
                    let v1267 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1256 v1266 
                    let _run_target_args'_v1261 = v1267 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1269 : Ref<Str> = v1256 |> unbox<Ref<Str>>
                    let _run_target_args'_v1261 = v1269 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1273 : Ref<Str> = v1256 |> unbox<Ref<Str>>
                    let _run_target_args'_v1261 = v1273 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1277 : Ref<Str> = v1256 |> unbox<Ref<Str>>
                    let _run_target_args'_v1261 = v1277 
                    #endif
#else
                    let v1281 : Ref<Str> = v1256 |> unbox<Ref<Str>>
                    let _run_target_args'_v1261 = v1281 
                    #endif
                    let v1284 : Ref<Str> = _run_target_args'_v1261 
                    (* run_target_args'
                    let v1294 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1295 : string = "String::from($0)"
                    let v1296 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1284 v1295 
                    let _run_target_args'_v1294 = v1296 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1297 : string = "String::from($0)"
                    let v1298 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1284 v1297 
                    let _run_target_args'_v1294 = v1298 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1299 : string = "String::from($0)"
                    let v1300 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1284 v1299 
                    let _run_target_args'_v1294 = v1300 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1302 : std_string_String = v1284 |> unbox<std_string_String>
                    let _run_target_args'_v1294 = v1302 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1306 : std_string_String = v1284 |> unbox<std_string_String>
                    let _run_target_args'_v1294 = v1306 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1310 : std_string_String = v1284 |> unbox<std_string_String>
                    let _run_target_args'_v1294 = v1310 
                    #endif
#else
                    let v1314 : std_string_String = v1284 |> unbox<std_string_String>
                    let _run_target_args'_v1294 = v1314 
                    #endif
                    let v1317 : std_string_String = _run_target_args'_v1294 
                    v1317
            let v1516 : string = "$0"
            let v1517 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1041 v1516 
            let v1518 : string = "v1517.lock()"
            let v1519 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1518 
            (* run_target_args'
            let v1521 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1522 : string = "$0.unwrap()"
            let v1523 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1519 v1522 
            let _run_target_args'_v1521 = v1523 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1524 : string = "$0.unwrap()"
            let v1525 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1519 v1524 
            let _run_target_args'_v1521 = v1525 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1526 : string = "$0.unwrap()"
            let v1527 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1519 v1526 
            let _run_target_args'_v1521 = v1527 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1528 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1521 = v1528 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1529 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1521 = v1529 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1530 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1521 = v1530 
            #endif
#else
            let v1531 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1521 = v1531 
            #endif
            let v1532 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v1521 
            let v1535 : string = "&$0"
            let v1536 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1532 v1535 
            let v1537 : string = "$0.send($1)"
            let v1538 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v1536, v1515) v1537 
            let v1539 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method130()
            (* run_target_args'
            let v1541 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1542 : string = "$0.map_err(|x| $1(x))"
            let v1543 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1538, v1539) v1542 
            let _run_target_args'_v1541 = v1543 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1544 : string = "$0.map_err(|x| $1(x))"
            let v1545 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1538, v1539) v1544 
            let _run_target_args'_v1541 = v1545 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1546 : string = "$0.map_err(|x| $1(x))"
            let v1547 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1538, v1539) v1546 
            let _run_target_args'_v1541 = v1547 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1548 : Result<unit, std_string_String> = match v1538 with Ok x -> Ok x | Error x -> Error (v1539 x)
            let _run_target_args'_v1541 = v1548 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1549 : Result<unit, std_string_String> = match v1538 with Ok x -> Ok x | Error x -> Error (v1539 x)
            let _run_target_args'_v1541 = v1549 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1550 : Result<unit, std_string_String> = match v1538 with Ok x -> Ok x | Error x -> Error (v1539 x)
            let _run_target_args'_v1541 = v1550 
            #endif
#else
            let v1551 : Result<unit, std_string_String> = match v1538 with Ok x -> Ok x | Error x -> Error (v1539 x)
            let _run_target_args'_v1541 = v1551 
            #endif
            let v1552 : Result<unit, std_string_String> = _run_target_args'_v1541 
            let v1555 : string = "$0"
            let v1556 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1552 v1555 
            let v1557 : string = "true; $0 }); //"
            let v1558 : bool = Fable.Core.RustInterop.emitRustExpr v1556 v1557 
            let v1559 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1560 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1559 
            let v1561 : Result<unit, string> = method131(v1560)
            let v1562 : string = v1010 + v1011 
            let x = v1561 //
            let v1563 : _ = x
            let v1564 : unit = ()
            (* run_target_args'
            let v1565 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1566 : string = $"true; let _fix_closure_v1564 = $0"
            let v1567 : bool = Fable.Core.RustInterop.emitRustExpr v1563 v1566 
            let _run_target_args'_v1565 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1568 : string = $"true; let _fix_closure_v1564 = $0"
            let v1569 : bool = Fable.Core.RustInterop.emitRustExpr v1563 v1568 
            let _run_target_args'_v1565 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1570 : string = $"true; let _fix_closure_v1564 = $0"
            let v1571 : bool = Fable.Core.RustInterop.emitRustExpr v1563 v1570 
            let _run_target_args'_v1565 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1565 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1565 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1565 = false 
            #endif
#else
            let _run_target_args'_v1565 = false 
            #endif
            let v1572 : bool = _run_target_args'_v1565 
            let v1574 : string = $"true; _fix_closure_v1564 " + v1562 + "); " + v1010 + " // rust.fix_closure'"
            let v1575 : bool = Fable.Core.RustInterop.emitRustExpr () v1574 
            let v1576 : string = "__spawn"
            let v1577 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1576 
            let v1580 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) = method132()
            let v1581 : US30 option = v4 |> Option.map v1580 
            let v1601 : US30 = US30_1
            let v1602 : US30 = v1581 |> Option.defaultValue v1601 
            match v1602 with
            | US30_1 -> (* None *)
                ()
            | US30_0(v1606) -> (* Some *)
                let v1607 : string = "$0"
                let v1608 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v519 v1607 
                let v1609 : string = "v1608.lock()"
                let v1610 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1609 
                (* run_target_args'
                let v1612 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1613 : string = "$0.unwrap()"
                let v1614 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1610 v1613 
                let _run_target_args'_v1612 = v1614 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1615 : string = "$0.unwrap()"
                let v1616 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1610 v1615 
                let _run_target_args'_v1612 = v1616 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1617 : string = "$0.unwrap()"
                let v1618 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1610 v1617 
                let _run_target_args'_v1612 = v1618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1619 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1610 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1612 = v1619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1620 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1610 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1612 = v1620 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1621 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1610 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1612 = v1621 
                #endif
#else
                let v1622 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1610 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1612 = v1622 
                #endif
                let v1623 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1612 
                let v1626 : std_sync_MutexGuard<std_process_ChildStdin option> = method133(v1623)
                let v1627 : string = "true; let mut v1626 = v1626"
                let v1628 : bool = Fable.Core.RustInterop.emitRustExpr () v1627 
                let v1629 : string = "&mut $0"
                let v1630 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1626 v1629 
                let v1631 : string = "Option::take($0)"
                let v1632 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1630 v1631 
                let v1633 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1634 : bool = Fable.Core.RustInterop.emitRustExpr v1632 v1633 
                let v1635 : string = "x"
                let v1636 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1635 
                let v1637 : string = "std::sync::Mutex::new(v1636)"
                let v1638 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1637 
                let v1639 : string = "std::sync::Arc::new(v1638)"
                let v1640 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1639 
                let v1641 : string = "true; $0 })"
                let v1642 : bool = Fable.Core.RustInterop.emitRustExpr v1640 v1641 
                let v1643 : string = "_optionm_map_"
                let v1644 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1643 
                let v1647 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) = method134()
                let v1648 : US31 option = v1644 |> Option.map v1647 
                let v1668 : US31 = US31_1
                let v1669 : US31 = v1648 |> Option.defaultValue v1668 
                match v1669 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1673) -> (* Some *)
                    v1606 v1673
                    let v1674 : string = "$0"
                    let v1675 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1673 v1674 
                    let v1676 : string = "v1675.lock()"
                    let v1677 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1676 
                    (* run_target_args'
                    let v1679 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1680 : string = "$0.unwrap()"
                    let v1681 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1677 v1680 
                    let _run_target_args'_v1679 = v1681 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1682 : string = "$0.unwrap()"
                    let v1683 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1677 v1682 
                    let _run_target_args'_v1679 = v1683 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1684 : string = "$0.unwrap()"
                    let v1685 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1677 v1684 
                    let _run_target_args'_v1679 = v1685 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1686 : std_sync_MutexGuard<std_process_ChildStdin> = match v1677 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1679 = v1686 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1687 : std_sync_MutexGuard<std_process_ChildStdin> = match v1677 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1679 = v1687 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1688 : std_sync_MutexGuard<std_process_ChildStdin> = match v1677 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1679 = v1688 
                    #endif
#else
                    let v1689 : std_sync_MutexGuard<std_process_ChildStdin> = match v1677 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1679 = v1689 
                    #endif
                    let v1690 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1679 
                    let v1693 : std_sync_MutexGuard<std_process_ChildStdin> = method135(v1690)
                    let v1694 : string = "true; let mut v1693 = v1693"
                    let v1695 : bool = Fable.Core.RustInterop.emitRustExpr () v1694 
                    let v1696 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1697 : bool = Fable.Core.RustInterop.emitRustExpr v1693 v1696 
                    ()
            let v1698 : string = "$0"
            let v1699 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v389 v1698 
            let v1700 : string = "v1699.lock()"
            let v1701 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1700 
            (* run_target_args'
            let v1703 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1704 : string = "$0.unwrap()"
            let v1705 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1701 v1704 
            let _run_target_args'_v1703 = v1705 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1706 : string = "$0.unwrap()"
            let v1707 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1701 v1706 
            let _run_target_args'_v1703 = v1707 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1708 : string = "$0.unwrap()"
            let v1709 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1701 v1708 
            let _run_target_args'_v1703 = v1709 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1710 : std_sync_MutexGuard<std_process_Child option> = match v1701 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1703 = v1710 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1711 : std_sync_MutexGuard<std_process_Child option> = match v1701 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1703 = v1711 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1712 : std_sync_MutexGuard<std_process_Child option> = match v1701 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1703 = v1712 
            #endif
#else
            let v1713 : std_sync_MutexGuard<std_process_Child option> = match v1701 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1703 = v1713 
            #endif
            let v1714 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1703 
            let v1717 : std_sync_MutexGuard<std_process_Child option> = method121(v1714)
            let v1718 : string = "true; let mut v1717 = v1717"
            let v1719 : bool = Fable.Core.RustInterop.emitRustExpr () v1718 
            let v1720 : string = "&mut $0"
            let v1721 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1717 v1720 
            let v1722 : string = "Option::take($0)"
            let v1723 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1721 v1722 
            let v1724 : string = "$0.unwrap()"
            let v1725 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1723 v1724 
            let v1726 : string = "$0.wait_with_output()"
            let v1727 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1725 v1726 
            let v1728 : (std_io_Error -> std_string_String) = method73()
            (* run_target_args'
            let v1730 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1731 : string = "$0.map_err(|x| $1(x))"
            let v1732 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1727, v1728) v1731 
            let _run_target_args'_v1730 = v1732 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1733 : string = "$0.map_err(|x| $1(x))"
            let v1734 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1727, v1728) v1733 
            let _run_target_args'_v1730 = v1734 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1735 : string = "$0.map_err(|x| $1(x))"
            let v1736 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1727, v1728) v1735 
            let _run_target_args'_v1730 = v1736 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1737 : Result<std_process_Output, std_string_String> = match v1727 with Ok x -> Ok x | Error x -> Error (v1728 x)
            let _run_target_args'_v1730 = v1737 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1738 : Result<std_process_Output, std_string_String> = match v1727 with Ok x -> Ok x | Error x -> Error (v1728 x)
            let _run_target_args'_v1730 = v1738 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1739 : Result<std_process_Output, std_string_String> = match v1727 with Ok x -> Ok x | Error x -> Error (v1728 x)
            let _run_target_args'_v1730 = v1739 
            #endif
#else
            let v1740 : Result<std_process_Output, std_string_String> = match v1727 with Ok x -> Ok x | Error x -> Error (v1728 x)
            let _run_target_args'_v1730 = v1740 
            #endif
            let v1741 : Result<std_process_Output, std_string_String> = _run_target_args'_v1730 
            let v1744 : string = "v1577"
            let v1745 : string = v1744 + v1010 
            let v1746 : string = v1745 + v1010 
            let v1747 : string = "v1027"
            let v1748 : string = ", "
            let v1749 : string = v1747 + v1748 
            let v1750 : string = v1749 + v1746 
            let v1751 : string = "vec![" + v1750 + "]"
            let v1752 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1751 
            let v1753 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1754 : bool = Fable.Core.RustInterop.emitRustExpr v1752 v1753 
            let v1755 : string = "x"
            let v1756 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1755 
            let v1757 : string = "std::thread::JoinHandle::join($0)"
            let v1758 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1756 v1757 
            (* run_target_args'
            let v1760 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1761 : string = "$0.unwrap()"
            let v1762 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1758 v1761 
            let _run_target_args'_v1760 = v1762 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1763 : string = "$0.unwrap()"
            let v1764 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1758 v1763 
            let _run_target_args'_v1760 = v1764 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1765 : string = "$0.unwrap()"
            let v1766 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1758 v1765 
            let _run_target_args'_v1760 = v1766 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1767 : Result<unit, string> = match v1758 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1760 = v1767 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1768 : Result<unit, string> = match v1758 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1760 = v1768 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1769 : Result<unit, string> = match v1758 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1760 = v1769 
            #endif
#else
            let v1770 : Result<unit, string> = match v1758 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1760 = v1770 
            #endif
            let v1771 : Result<unit, string> = _run_target_args'_v1760 
            (* run_target_args'
            let v1774 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1775 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1771 v1775 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1776 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1771 v1776 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1777 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1771 v1777 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1771 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1771 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1771 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1771 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1778 : string = $"true"
            let v1779 : bool = Fable.Core.RustInterop.emitRustExpr () v1778 
            let v1780 : string = "true; }}); { //"
            let v1781 : bool = Fable.Core.RustInterop.emitRustExpr () v1780 
            let v1782 : (std_process_Output -> US32) = method136()
            let v1783 : (std_string_String -> US32) = method137()
            let v1785 : US32 = match v1741 with Ok x -> v1782 x | Error x -> v1783 x
            match v1785 with
            | US32_1(v1899) -> (* Error *)
                let v1964 : unit = ()
                let v1965 : (unit -> unit) = closure57(v0, v1, v2, v3, v4, v5, v6, v29, v120, v1899)
                let v1966 : unit = (fun () -> v1965 (); v1964) ()
                let v2031 : US7 = US7_0(v1899)
                let v2032 : US28 = US28_1
                struct (-2, v2031, v2032)
            | US32_0(v1788) -> (* Ok *)
                let v1789 : string = "$0.status"
                let v1790 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1788 v1789 
                let v1791 : string = "$0.code()"
                let v1792 : int32 option = Fable.Core.RustInterop.emitRustExpr v1790 v1791 
                let v1795 : (int32 -> US33) = method139()
                let v1796 : US33 option = v1792 |> Option.map v1795 
                let v1816 : US33 = US33_1
                let v1817 : US33 = v1796 |> Option.defaultValue v1816 
                match v1817 with
                | US33_1 -> (* None *)
                    let v1824 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1829 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1830 : string = "&*$0"
                    let v1831 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1824 v1830 
                    let _run_target_args'_v1829 = v1831 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1832 : string = "&*$0"
                    let v1833 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1824 v1832 
                    let _run_target_args'_v1829 = v1833 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1834 : string = "&*$0"
                    let v1835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1824 v1834 
                    let _run_target_args'_v1829 = v1835 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1837 : Ref<Str> = v1824 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1837 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1841 : Ref<Str> = v1824 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1841 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1845 : Ref<Str> = v1824 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1845 
                    #endif
#else
                    let v1849 : Ref<Str> = v1824 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1849 
                    #endif
                    let v1852 : Ref<Str> = _run_target_args'_v1829 
                    (* run_target_args'
                    let v1862 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1863 : string = "String::from($0)"
                    let v1864 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1852 v1863 
                    let _run_target_args'_v1862 = v1864 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1865 : string = "String::from($0)"
                    let v1866 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1852 v1865 
                    let _run_target_args'_v1862 = v1866 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1867 : string = "String::from($0)"
                    let v1868 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1852 v1867 
                    let _run_target_args'_v1862 = v1868 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1870 : std_string_String = v1852 |> unbox<std_string_String>
                    let _run_target_args'_v1862 = v1870 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1874 : std_string_String = v1852 |> unbox<std_string_String>
                    let _run_target_args'_v1862 = v1874 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1878 : std_string_String = v1852 |> unbox<std_string_String>
                    let _run_target_args'_v1862 = v1878 
                    #endif
#else
                    let v1882 : std_string_String = v1852 |> unbox<std_string_String>
                    let _run_target_args'_v1862 = v1882 
                    #endif
                    let v1885 : std_string_String = _run_target_args'_v1862 
                    let v1891 : US7 = US7_0(v1885)
                    let v1892 : US28 = US28_0(v540)
                    struct (-1, v1891, v1892)
                | US33_0(v1821) -> (* Some *)
                    let v1822 : US7 = US7_1
                    let v1823 : US28 = US28_0(v540)
                    struct (v1821, v1822, v1823)
    let v2189 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v2178 with
        | US28_1 -> (* None *)
            let v2185 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v2185
        | US28_0(v2179) -> (* Some *)
            let v2181 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v2179 
            v2181
    let v2190 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v2191 : bool = Fable.Core.RustInterop.emitRustExpr v2189 v2190 
    let v2192 : string = "x"
    let v2193 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2192 
    let v2194 : string = "$0"
    let v2195 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v2193 v2194 
    let v2196 : string = "v2195.lock()"
    let v2197 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v2196 
    (* run_target_args'
    let v2199 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2200 : string = "$0.unwrap()"
    let v2201 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2197 v2200 
    let _run_target_args'_v2199 = v2201 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2202 : string = "$0.unwrap()"
    let v2203 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2197 v2202 
    let _run_target_args'_v2199 = v2203 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2204 : string = "$0.unwrap()"
    let v2205 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2197 v2204 
    let _run_target_args'_v2199 = v2205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2206 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2197 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2199 = v2206 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2207 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2197 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2199 = v2207 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2208 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2197 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2199 = v2208 
    #endif
#else
    let v2209 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v2197 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v2199 = v2209 
    #endif
    let v2210 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v2199 
    let v2213 : string = "$0.iter()"
    let v2214 : _ = Fable.Core.RustInterop.emitRustExpr v2210 v2213 
    let v2215 : string = "$0.collect::<Vec<_>>()"
    let v2216 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2214 v2215 
    let v2217 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v2218 : bool = Fable.Core.RustInterop.emitRustExpr v2216 v2217 
    let v2219 : string = "x"
    let v2220 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2219 
    let v2221 : string = "fable_library_rust::String_::fromString($0)"
    let v2222 : string = Fable.Core.RustInterop.emitRustExpr v2220 v2221 
    let v2223 : string = "true; $0 }).collect::<Vec<_>>()"
    let v2224 : bool = Fable.Core.RustInterop.emitRustExpr v2222 v2223 
    let v2225 : string = "_vec_map"
    let v2226 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2225 
    let v2227 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v2228 : (string []) = Fable.Core.RustInterop.emitRustExpr v2226 v2227 
    let v2230 : string seq = v2228 |> Seq.ofArray
    let v2235 : string = method69()
    let v2236 : (string -> (string seq -> string)) = String.concat
    let v2237 : (string seq -> string) = v2236 v2235
    let v2238 : string = v2237 v2230
    let v2242 : string = "true; $0 })"
    let v2243 : bool = Fable.Core.RustInterop.emitRustExpr v2238 v2242 
    let v2244 : string = "_optionm_map_"
    let v2245 : string option = Fable.Core.RustInterop.emitRustExpr () v2244 
    let v2252 : US5 =
        match v2177 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v2246) -> (* Some *)
            let v2247 : string = "fable_library_rust::String_::fromString($0)"
            let v2248 : string = Fable.Core.RustInterop.emitRustExpr v2246 v2247 
            US5_0(v2248)
    let v2256 : string =
        match v2252 with
        | US5_1 -> (* None *)
            let v2254 : string = ""
            v2254
        | US5_0(v2253) -> (* Some *)
            v2253
    let v2258 : string = v2245 |> Option.defaultValue v2256 
    let v2322 : unit = ()
    let v2323 : (unit -> unit) = closure59(v2176, v2258)
    let v2324 : unit = (fun () -> v2323 (); v2322) ()
    let v2387 : (int32 * string) = v2176, v2258 
    v2387 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v253 <- Some x
    let v2390 : (int32 * string) = match _capture_v253 with Some x -> x | None -> failwith "base.capture / _capture_v253=None"
    let (a, b) = v2390 
    let v4528 : int32 = a
    let v4529 : string = b
    let _run_target_args'_v15 = struct (v4528, v4529) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v4536 : int32, v4537 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4536, v4537) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v4544 : int32, v4545 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4544, v4545) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v4552 : int32, v4553 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4552, v4553) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v4560 : int32, v4561 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4560, v4561) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v4568 : int32, v4569 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v4568, v4569) 
    #endif
#else
    let v4574 : Async<struct (int32 * string)> = method141(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v4583 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4586 : int32, v4587 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4583 = struct (v4586, v4587) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v4594 : int32, v4595 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4583 = struct (v4594, v4595) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v4602 : int32, v4603 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4583 = struct (v4602, v4603) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v4610 : int32, v4611 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v4583 = struct (v4610, v4611) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4616 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v4617 : int32, v4618 : string) = v4616 v4574
    let _run_target_args'_v4583 = struct (v4617, v4618) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4619 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v4620 : int32, v4621 : string) = v4619 v4574
    let _run_target_args'_v4583 = struct (v4620, v4621) 
    #endif
#else
    let v4622 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v4623 : int32, v4624 : string) = v4622 v4574
    let _run_target_args'_v4583 = struct (v4623, v4624) 
    #endif
    let struct (v4625 : int32, v4626 : string) = _run_target_args'_v4583 
    let _run_target_args'_v15 = struct (v4625, v4626) 
    #endif
    let struct (v4631 : int32, v4632 : string) = _run_target_args'_v15 
    struct (v4631, v4632)
and method157 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "run_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "new_code_path"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.process_gleam / check error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure68 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v19 : unit = ()
        let v20 : (unit -> unit) = closure2()
        let v21 : unit = (fun () -> v20 (); v19) ()
        let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
        let v60 : string = method8(v42, v43, v44, v45, v46, v47)
        let v61 : string = method76()
        let v62 : string = method157(v42, v43, v44, v45, v46, v47, v60, v61, v2, v1, v0)
        method17(v62)
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_gleam / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure69 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method158(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method159 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "run_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "new_code_path"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.process_gleam / esbuild error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v19 : unit = ()
        let v20 : (unit -> unit) = closure2()
        let v21 : unit = (fun () -> v20 (); v19) ()
        let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
        let v60 : string = method8(v42, v43, v44, v45, v46, v47)
        let v61 : string = method76()
        let v62 : string = method159(v42, v43, v44, v45, v46, v47, v60, v61, v2, v1, v0)
        method17(v62)
and method160 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "run_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "new_code_path"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.process_gleam / trunk error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure71 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v19 : unit = ()
        let v20 : (unit -> unit) = closure2()
        let v21 : unit = (fun () -> v20 (); v19) ()
        let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
        let v60 : string = method8(v42, v43, v44, v45, v46, v47)
        let v61 : string = method76()
        let v62 : string = method160(v42, v43, v44, v45, v46, v47, v60, v61, v2, v1, v0)
        method17(v62)
and closure72 () (v0 : string) : US5 =
    US5_0(v0)
and closure73 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method161 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v111 : string = $"{v104}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v13, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = "; "
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v148 : string = "run_result'"
    let v149 : string = $"{v148}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v13, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v54}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v13, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    (* run_target_args'
    let v186 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v187 : string = "format!(\"{:#?}\", $0)"
    let v188 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v187 
    let v189 : string = "fable_library_rust::String_::fromString($0)"
    let v190 : string = Fable.Core.RustInterop.emitRustExpr v188 v189 
    let _run_target_args'_v186 = v190 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v191 : string = "format!(\"{:#?}\", $0)"
    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v191 
    let v193 : string = "fable_library_rust::String_::fromString($0)"
    let v194 : string = Fable.Core.RustInterop.emitRustExpr v192 v193 
    let _run_target_args'_v186 = v194 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v195 : string = "format!(\"{:#?}\", $0)"
    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v195 
    let v197 : string = "fable_library_rust::String_::fromString($0)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr v196 v197 
    let _run_target_args'_v186 = v198 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v200 : string = $"%A{v9}"
    let _run_target_args'_v186 = v200 
    #endif
#if FABLE_COMPILER_PYTHON
    let v204 : string = $"%A{v9}"
    let _run_target_args'_v186 = v204 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v208 : string = $"%A{v9}"
    let _run_target_args'_v186 = v208 
    #endif
#else
    let v212 : string = $"%A{v9}"
    let _run_target_args'_v186 = v212 
    #endif
    let v215 : string = _run_target_args'_v186 
    let v222 : string = $"{v215}"
    let v230 : unit = ()
    let v231 : (unit -> unit) = closure7(v13, v222)
    let v232 : unit = (fun () -> v231 (); v230) ()
    let v239 : string = $"{v129}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v257 : string = "new_code_path"
    let v258 : string = $"{v257}"
    let v266 : unit = ()
    let v267 : (unit -> unit) = closure7(v13, v258)
    let v268 : unit = (fun () -> v267 (); v266) ()
    let v275 : string = $"{v54}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v13, v275)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v292 : string = $"{v10}"
    let v300 : unit = ()
    let v301 : (unit -> unit) = closure7(v13, v292)
    let v302 : unit = (fun () -> v301 (); v300) ()
    let v309 : string = $"{v129}"
    let v317 : unit = ()
    let v318 : (unit -> unit) = closure7(v13, v309)
    let v319 : unit = (fun () -> v318 (); v317) ()
    let v327 : string = "external_command"
    let v328 : string = $"{v327}"
    let v336 : unit = ()
    let v337 : (unit -> unit) = closure7(v13, v328)
    let v338 : unit = (fun () -> v337 (); v336) ()
    let v345 : string = $"{v54}"
    let v353 : unit = ()
    let v354 : (unit -> unit) = closure7(v13, v345)
    let v355 : unit = (fun () -> v354 (); v353) ()
    let v362 : string = $"{v11}"
    let v370 : unit = ()
    let v371 : (unit -> unit) = closure7(v13, v362)
    let v372 : unit = (fun () -> v371 (); v370) ()
    let v380 : string = " }"
    let v381 : string = $"{v380}"
    let v389 : unit = ()
    let v390 : (unit -> unit) = closure7(v13, v381)
    let v391 : unit = (fun () -> v390 (); v389) ()
    let v397 : string = v13.l0
    let v398 : int64 = v0.l0
    let v401 : string = " "
    let v402 : string = v6 + v401 
    let v406 : string = v402 + v7 
    let v411 : string = " #"
    let v412 : string = v406 + v411 
    let v416 : (int64 -> string) = _.ToString()
    let v417 : string = v416 v398
    let v421 : string = v412 + v417 
    let v425 : string = v421 + v401 
    let v430 : string = "spiral.process_gleam / Exception"
    let v431 : string = v425 + v430 
    let v436 : string = " / "
    let v437 : string = v431 + v436 
    let v441 : string = v437 + v397 
    method16(v441)
and closure75 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method161(v43, v44, v45, v46, v47, v48, v61, v62, v3, v2, v0, v1)
        method17(v63)
and closure74 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure75(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method162 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method162(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method163 () : string =
    let v0 : string = "py-path"
    v0
and method164 () : string =
    let v0 : string = "env"
    v0
and method165 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US38, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "env"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v72 : string = $"%A{v8}"
    let v76 : string = $"{v72}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v13, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v94 : string = "; "
    let v95 : string = $"{v94}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v13, v95)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v113 : string = "exit_code"
    let v114 : string = $"{v113}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v13, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v131 : string = $"{v54}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v13, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v151 : string = $"{v9}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v13, v151)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v168 : string = $"{v94}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v13, v168)
    let v178 : unit = (fun () -> v177 (); v176) ()
    let v186 : string = "run_result"
    let v187 : string = $"{v186}"
    let v195 : unit = ()
    let v196 : (unit -> unit) = closure7(v13, v187)
    let v197 : unit = (fun () -> v196 (); v195) ()
    let v204 : string = $"{v54}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v13, v204)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v221 : string = $"{v10}"
    let v229 : unit = ()
    let v230 : (unit -> unit) = closure7(v13, v221)
    let v231 : unit = (fun () -> v230 (); v229) ()
    let v238 : string = $"{v94}"
    let v246 : unit = ()
    let v247 : (unit -> unit) = closure7(v13, v238)
    let v248 : unit = (fun () -> v247 (); v246) ()
    let v256 : string = "new_code_path"
    let v257 : string = $"{v256}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v13, v257)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v274 : string = $"{v54}"
    let v282 : unit = ()
    let v283 : (unit -> unit) = closure7(v13, v274)
    let v284 : unit = (fun () -> v283 (); v282) ()
    let v291 : string = $"{v11}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v13, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v309 : string = " }"
    let v310 : string = $"{v309}"
    let v318 : unit = ()
    let v319 : (unit -> unit) = closure7(v13, v310)
    let v320 : unit = (fun () -> v319 (); v318) ()
    let v326 : string = v13.l0
    let v327 : int64 = v0.l0
    let v330 : string = " "
    let v331 : string = v6 + v330 
    let v335 : string = v331 + v7 
    let v340 : string = " #"
    let v341 : string = v335 + v340 
    let v345 : (int64 -> string) = _.ToString()
    let v346 : string = v345 v327
    let v350 : string = v341 + v346 
    let v354 : string = v350 + v330 
    let v359 : string = "spiral.process_cuda / env install error"
    let v360 : string = v354 + v359 
    let v365 : string = " / "
    let v366 : string = v360 + v365 
    let v370 : string = v366 + v326 
    method16(v370)
and closure77 (v0 : US38, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method165(v43, v44, v45, v46, v47, v48, v61, v62, v0, v3, v2, v1)
        method17(v63)
and closure78 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method166 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v111 : string = $"{v104}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v13, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = "; "
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v148 : string = "run_result"
    let v149 : string = $"{v148}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v13, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v54}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v13, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v183 : string = $"{v9}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v129}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v218 : string = "new_code_path"
    let v219 : string = $"{v218}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v13, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v236 : string = $"{v54}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v13, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v253 : string = $"{v10}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v129}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v288 : string = "external_command"
    let v289 : string = $"{v288}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v13, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v306 : string = $"{v54}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v323 : string = $"{v11}"
    let v331 : unit = ()
    let v332 : (unit -> unit) = closure7(v13, v323)
    let v333 : unit = (fun () -> v332 (); v331) ()
    let v341 : string = " }"
    let v342 : string = $"{v341}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v13, v342)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v358 : string = v13.l0
    let v359 : int64 = v0.l0
    let v362 : string = " "
    let v363 : string = v6 + v362 
    let v367 : string = v363 + v7 
    let v372 : string = " #"
    let v373 : string = v367 + v372 
    let v377 : (int64 -> string) = _.ToString()
    let v378 : string = v377 v359
    let v382 : string = v373 + v378 
    let v386 : string = v382 + v362 
    let v391 : string = "spiral.process_cuda / Exception"
    let v392 : string = v386 + v391 
    let v397 : string = " / "
    let v398 : string = v392 + v397 
    let v402 : string = v398 + v358 
    method16(v402)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method166(v43, v44, v45, v46, v47, v48, v61, v62, v3, v1, v0, v2)
        method17(v63)
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method167 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_cuda / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method167(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method168 () : string =
    let v0 : string = "fs-path"
    v0
and method169 () : string =
    let v0 : string = "command"
    v0
and method170 () : string =
    let v0 : string = "path"
    v0
and method172 (v0 : string) : string =
    let v1 : string = method31()
    let v2 : string = method33(v1, v0)
    method63(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method172(v2)
and method171 () : (std_string_String -> string) =
    closure82()
and method173 () : string =
    let v0 : string = "retries"
    v0
and method174 () : string =
    let v0 : string = "working-directory"
    v0
and method176 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "exit_code"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v74 : string = $"{v8}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v12, v74)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v92 : string = "; "
    let v93 : string = $"{v92}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v12, v93)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v111 : string = "repl_result"
    let v112 : string = $"{v111}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v12, v112)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v129 : string = $"{v53}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v12, v129)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v146 : string = $"{v9}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v12, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v92}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v12, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "retry"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v12, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v53}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v12, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v10}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v12, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = " }"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v12, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v251 : string = v12.l0
    let v252 : int64 = v0.l0
    let v255 : string = " "
    let v256 : string = v6 + v255 
    let v260 : string = v256 + v7 
    let v265 : string = " #"
    let v266 : string = v260 + v265 
    let v270 : (int64 -> string) = _.ToString()
    let v271 : string = v270 v252
    let v275 : string = v266 + v271 
    let v279 : string = v275 + v255 
    let v284 : string = "spiral.run / repl error"
    let v285 : string = v279 + v284 
    let v290 : string = " / "
    let v291 : string = v285 + v290 
    let v295 : string = v291 + v251 
    method16(v295)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method12()
        let v63 : string = $"{v1}/{v0}"
        let v64 : string = method176(v43, v44, v45, v46, v47, v48, v61, v62, v3, v2, v63)
        method17(v64)
and method175 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v8 : (struct (string * string) []) = [||]
    let v10 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v18 : string option = None
    let v21 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v22 : string = "TRACE_LEVEL"
    let v23 : string = "Verbose"
    let v24 : string = "AUTOMATION"
    let v25 : string = "True"
    let v26 : (struct (string * string) []) = [|struct (v22, v23); struct (v24, v25)|]
    let v37 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v33 : string option = None
            v33
        | US5_0(v27) -> (* Some *)
            let v29 : string option = Some v27 
            v29
    let v38 : bool = false
    let struct (v39 : int32, v40 : string) = method91(v21, v5, v26, v10, v14, v38, v37)
    let v41 : bool = v39 = 0
    let v43 : bool =
        if v41 then
            true
        else
            let v42 : bool = v3 >= v1
            v42
    if v43 then
        struct (v39, v40)
    else
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure83(v1, v3, v40, v39)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v169 : uint8 = v3 + 1uy
        method175(v0, v1, v2, v169)
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "jupyter_result_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "spiral.run / dib / jupyter nbconvert"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : int32 = v0.Length
        let v62 : string = method177(v41, v42, v43, v44, v45, v46, v59, v60, v1, v61)
        method17(v62)
and method178 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "pwsh_replace_html_result_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "spiral.run / dib / html cell ids"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : int32 = v0.Length
        let v62 : string = method178(v41, v42, v43, v44, v45, v46, v59, v60, v1, v61)
        method17(v62)
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "result_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v167)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v183 : string = v11.l0
    let v184 : int64 = v0.l0
    let v187 : string = " "
    let v188 : string = v6 + v187 
    let v192 : string = v188 + v7 
    let v197 : string = " #"
    let v198 : string = v192 + v197 
    let v202 : (int64 -> string) = _.ToString()
    let v203 : string = v202 v184
    let v207 : string = v198 + v203 
    let v211 : string = v207 + v187 
    let v216 : string = "spiral.run / dib"
    let v217 : string = v211 + v216 
    let v222 : string = " / "
    let v223 : string = v217 + v222 
    let v227 : string = v223 + v183 
    method16(v227)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : int32 = v0.Length
        let v62 : string = method179(v41, v42, v43, v44, v45, v46, v59, v60, v1, v61)
        method17(v62)
and method180 () : string =
    let v0 : string = "cleanup"
    v0
and method181 () : string =
    let v0 : string = "wasm"
    v0
and method182 () : string =
    let v0 : string = "contract"
    v0
and method183 (v0 : US5, v1 : string, v2 : US42, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method33(v3, v4)
    let v6 : string = method33(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US42_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method33(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US41_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US41_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US41_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method33(v10, v42)
            method33(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method185 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method185(v0, v4, v2)
        let v6 : string = method33(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method186 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method186(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method184 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method72(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method33(v4, v7)
    let v9 : string = method42(v8)
    method70(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method185(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method114(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method186(v3, v35)
    let v37 : string list = []
    let v38 : string list = method114(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method33(v4, v58)
    let v60 : string = method42(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v65 : string = "\n"
    let v66 : string = v61 + v65 
    let v70 : string = v66 + v62 
    let v73 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v75 : string = v70 + v65 
    let v79 : string = v75 + v73 
    let v82 : string = $"    <LangVersion>preview</LangVersion>"
    let v84 : string = v79 + v65 
    let v88 : string = v84 + v82 
    let v91 : string = $"    <RollForward>Major</RollForward>"
    let v93 : string = v88 + v65 
    let v97 : string = v93 + v91 
    let v100 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v102 : string = v97 + v65 
    let v106 : string = v102 + v100 
    let v109 : string = $"    <PublishAot>false</PublishAot>"
    let v111 : string = v106 + v65 
    let v115 : string = v111 + v109 
    let v118 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v120 : string = v115 + v65 
    let v124 : string = v120 + v118 
    let v127 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v129 : string = v124 + v65 
    let v133 : string = v129 + v127 
    let v136 : string = $"    <SelfContained>true</SelfContained>"
    let v138 : string = v133 + v65 
    let v142 : string = v138 + v136 
    let v145 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v147 : string = v142 + v65 
    let v151 : string = v147 + v145 
    let v154 : string = $"    <OutputType>Exe</OutputType>"
    let v156 : string = v151 + v65 
    let v160 : string = v156 + v154 
    let v163 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v165 : string = v160 + v65 
    let v169 : string = v165 + v163 
    let v172 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v174 : string = v169 + v65 
    let v178 : string = v174 + v172 
    let v181 : string = $"</PropertyGroup>"
    let v183 : string = v178 + v65 
    let v187 : string = v183 + v181 
    let v190 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v192 : string = v187 + v65 
    let v196 : string = v192 + v190 
    let v199 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v201 : string = v196 + v65 
    let v205 : string = v201 + v199 
    let v208 : string = $"</PropertyGroup>"
    let v210 : string = v205 + v65 
    let v214 : string = v210 + v208 
    let v217 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v219 : string = v214 + v65 
    let v223 : string = v219 + v217 
    let v226 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v228 : string = v223 + v65 
    let v232 : string = v228 + v226 
    let v235 : string = $"</PropertyGroup>"
    let v237 : string = v232 + v65 
    let v241 : string = v237 + v235 
    let v244 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v246 : string = v241 + v65 
    let v250 : string = v246 + v244 
    let v253 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v255 : string = v250 + v65 
    let v259 : string = v255 + v253 
    let v262 : string = $"</PropertyGroup>"
    let v264 : string = v259 + v65 
    let v268 : string = v264 + v262 
    let v271 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v273 : string = v268 + v65 
    let v277 : string = v273 + v271 
    let v280 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v282 : string = v277 + v65 
    let v286 : string = v282 + v280 
    let v289 : string = $"</PropertyGroup>"
    let v291 : string = v286 + v65 
    let v295 : string = v291 + v289 
    let v298 : string = $"<ItemGroup>"
    let v300 : string = v295 + v65 
    let v304 : string = v300 + v298 
    let v307 : string = $"    {v32}"
    let v309 : string = v304 + v65 
    let v313 : string = v309 + v307 
    let v316 : string = $"    <Compile Include=\"{v9}\" />"
    let v318 : string = v313 + v65 
    let v322 : string = v318 + v316 
    let v325 : string = $"</ItemGroup>"
    let v327 : string = v322 + v65 
    let v331 : string = v327 + v325 
    let v334 : string = $"<ItemGroup>"
    let v336 : string = v331 + v65 
    let v340 : string = v336 + v334 
    let v343 : string = $"    {v55}"
    let v345 : string = v340 + v65 
    let v349 : string = v345 + v343 
    let v352 : string = $"</ItemGroup>"
    let v354 : string = v349 + v65 
    let v358 : string = v354 + v352 
    let v361 : string = $"</Project>"
    let v363 : string = v358 + v65 
    let v367 : string = v363 + v361 
    method70(v60, v367)
    v60
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US43 =
    US43_0(v0)
and method188 () : (chrono_DateTime<chrono_Utc> -> US43) =
    closure87()
and method189 () : string =
    let v0 : string = "hh:mm"
    v0
and method190 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method191 () : string =
    let v0 : string = "hhmm"
    v0
and method187 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v599 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v605 : System.DateTime = System.DateTime.UnixEpoch
    let v609 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v610 : System.DateTime = v609 v605
    let v614 : System.DateTimeKind = System.DateTimeKind.Local
    let v615 : System.DateTime = System.DateTime.SpecifyKind (v1, v614)
    let v619 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v620 : System.DateTime = v619 v615
    (* run_target_args'
    let v629 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v630 : (System.DateTime -> int64) = _.Ticks
    let v631 : int64 = v630 v620
    let _run_target_args'_v629 = v631 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v632 : (System.DateTime -> int64) = _.Ticks
    let v633 : int64 = v632 v620
    let _run_target_args'_v629 = v633 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v635 : int64 = null |> unbox<int64>
    let _run_target_args'_v629 = v635 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v638 : (System.DateTime -> int64) = _.Ticks
    let v639 : int64 = v638 v620
    let _run_target_args'_v629 = v639 
    #endif
#if FABLE_COMPILER_PYTHON
    let v640 : (System.DateTime -> int64) = _.Ticks
    let v641 : int64 = v640 v620
    let _run_target_args'_v629 = v641 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v642 : (System.DateTime -> int64) = _.Ticks
    let v643 : int64 = v642 v620
    let _run_target_args'_v629 = v643 
    #endif
#else
    let v644 : (System.DateTime -> int64) = _.Ticks
    let v645 : int64 = v644 v620
    let _run_target_args'_v629 = v645 
    #endif
    let v646 : int64 = _run_target_args'_v629 
    (* run_target_args'
    let v672 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v673 : (System.DateTime -> int64) = _.Ticks
    let v674 : int64 = v673 v610
    let _run_target_args'_v672 = v674 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v675 : (System.DateTime -> int64) = _.Ticks
    let v676 : int64 = v675 v610
    let _run_target_args'_v672 = v676 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v678 : int64 = null |> unbox<int64>
    let _run_target_args'_v672 = v678 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v681 : (System.DateTime -> int64) = _.Ticks
    let v682 : int64 = v681 v610
    let _run_target_args'_v672 = v682 
    #endif
#if FABLE_COMPILER_PYTHON
    let v683 : (System.DateTime -> int64) = _.Ticks
    let v684 : int64 = v683 v610
    let _run_target_args'_v672 = v684 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v685 : (System.DateTime -> int64) = _.Ticks
    let v686 : int64 = v685 v610
    let _run_target_args'_v672 = v686 
    #endif
#else
    let v687 : (System.DateTime -> int64) = _.Ticks
    let v688 : int64 = v687 v610
    let _run_target_args'_v672 = v688 
    #endif
    let v689 : int64 = _run_target_args'_v672 
    let v710 : int64 = v646 |> int64 
    let v714 : int64 = v689 |> int64 
    let v717 : int64 = v710 - v714
    let v718 : int64 = v717 / 10L
    let v719 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v720 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v718 v719 
    let v723 : (chrono_DateTime<chrono_Utc> -> US43) = method188()
    let v724 : US43 option = v720 |> Option.map v723 
    let v744 : US43 = US43_1
    let v745 : US43 = v724 |> Option.defaultValue v744 
    let v765 : US5 =
        match v745 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v749) -> (* Some *)
            let v750 : string = "$0.naive_utc()"
            let v751 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v749 v750 
            let v752 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v753 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v751 v752 
            let v754 : string = "%Y%m%d-%H%M-%S%f"
            let v755 : string = "r#\"" + v754 + "\"#"
            let v756 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v755 
            let v757 : string = "$0.format($1).to_string()"
            let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v753, v756) v757 
            let v759 : string = "fable_library_rust::String_::fromString($0)"
            let v760 : string = Fable.Core.RustInterop.emitRustExpr v758 v759 
            let v761 : string = $"{v760.[0..17]}-{v760.[18..21]}-{v760.[22]}"
            US5_0(v761)
    let v769 : string =
        match v765 with
        | US5_1 -> (* None *)
            let v767 : string = ""
            v767
        | US5_0(v766) -> (* Some *)
            v766
    (* run_target_args'
    let v774 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v775 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v776 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v775 
    let _run_target_args'_v774 = v776 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v778 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v774 = v778 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v782 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v774 = v782 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v786 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v774 = v786 
    #endif
#if FABLE_COMPILER_PYTHON
    let v790 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v774 = v790 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v793 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v774 = v793 
    #endif
#else
    let v794 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v774 = v794 
    #endif
    let v795 : System.TimeZoneInfo = _run_target_args'_v774 
    (* run_target_args'
    let v808 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v815 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v816 : (System.DateTime -> int64) = _.Ticks
    let v817 : int64 = v816 v620
    let _run_target_args'_v815 = v817 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v818 : (System.DateTime -> int64) = _.Ticks
    let v819 : int64 = v818 v620
    let _run_target_args'_v815 = v819 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v821 : int64 = null |> unbox<int64>
    let _run_target_args'_v815 = v821 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v824 : (System.DateTime -> int64) = _.Ticks
    let v825 : int64 = v824 v620
    let _run_target_args'_v815 = v825 
    #endif
#if FABLE_COMPILER_PYTHON
    let v826 : (System.DateTime -> int64) = _.Ticks
    let v827 : int64 = v826 v620
    let _run_target_args'_v815 = v827 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v828 : (System.DateTime -> int64) = _.Ticks
    let v829 : int64 = v828 v620
    let _run_target_args'_v815 = v829 
    #endif
#else
    let v830 : (System.DateTime -> int64) = _.Ticks
    let v831 : int64 = v830 v620
    let _run_target_args'_v815 = v831 
    #endif
    let v832 : int64 = _run_target_args'_v815 
    let v852 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v853 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v620, v832) v852 
    let v855 : System.TimeSpan = v853 |> System.TimeSpan 
    let _run_target_args'_v808 = v855 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v864 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v865 : (System.DateTime -> int64) = _.Ticks
    let v866 : int64 = v865 v620
    let _run_target_args'_v864 = v866 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v867 : (System.DateTime -> int64) = _.Ticks
    let v868 : int64 = v867 v620
    let _run_target_args'_v864 = v868 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v870 : int64 = null |> unbox<int64>
    let _run_target_args'_v864 = v870 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v873 : (System.DateTime -> int64) = _.Ticks
    let v874 : int64 = v873 v620
    let _run_target_args'_v864 = v874 
    #endif
#if FABLE_COMPILER_PYTHON
    let v875 : (System.DateTime -> int64) = _.Ticks
    let v876 : int64 = v875 v620
    let _run_target_args'_v864 = v876 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v877 : (System.DateTime -> int64) = _.Ticks
    let v878 : int64 = v877 v620
    let _run_target_args'_v864 = v878 
    #endif
#else
    let v879 : (System.DateTime -> int64) = _.Ticks
    let v880 : int64 = v879 v620
    let _run_target_args'_v864 = v880 
    #endif
    let v881 : int64 = _run_target_args'_v864 
    let v901 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v902 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v620, v881) v901 
    let v904 : System.TimeSpan = v902 |> System.TimeSpan 
    let _run_target_args'_v808 = v904 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v908 : US3 = US3_2
    let v909 : US4 = US4_3(v908)
    let v910 : string = $"date_time.get_utc_offset / target: {v909}"
    let v911 : System.TimeSpan = failwith<System.TimeSpan> v910
    let _run_target_args'_v808 = v911 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v915 : US3 = US3_0
    let v916 : US4 = US4_4(v915)
    let v917 : string = $"date_time.get_utc_offset / target: {v916}"
    let v918 : System.TimeSpan = failwith<System.TimeSpan> v917
    let _run_target_args'_v808 = v918 
    #endif
#if FABLE_COMPILER_PYTHON
    let v922 : US3 = US3_0
    let v923 : US4 = US4_5(v922)
    let v924 : string = $"date_time.get_utc_offset / target: {v923}"
    let v925 : System.TimeSpan = failwith<System.TimeSpan> v924
    let _run_target_args'_v808 = v925 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v928 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v933 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v934 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v935 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v934 
    let _run_target_args'_v933 = v935 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v937 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v933 = v937 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v941 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v933 = v941 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v945 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v933 = v945 
    #endif
#if FABLE_COMPILER_PYTHON
    let v949 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v933 = v949 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v952 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v933 = v952 
    #endif
#else
    let v953 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v933 = v953 
    #endif
    let v954 : System.TimeZoneInfo = _run_target_args'_v933 
    let v960 : (System.DateTime -> System.TimeSpan) = v928 v954
    let v961 : System.TimeSpan = v960 v620
    let _run_target_args'_v808 = v961 
    #endif
#else
    let v962 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v967 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v968 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v969 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v968 
    let _run_target_args'_v967 = v969 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v971 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v967 = v971 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v975 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v967 = v975 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v979 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v967 = v979 
    #endif
#if FABLE_COMPILER_PYTHON
    let v983 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v967 = v983 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v986 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v967 = v986 
    #endif
#else
    let v987 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v967 = v987 
    #endif
    let v988 : System.TimeZoneInfo = _run_target_args'_v967 
    let v994 : (System.DateTime -> System.TimeSpan) = v962 v988
    let v995 : System.TimeSpan = v994 v620
    let _run_target_args'_v808 = v995 
    #endif
    let v996 : System.TimeSpan = _run_target_args'_v808 
    let v1006 : (System.TimeSpan -> int32) = _.Hours
    let v1007 : int32 = v1006 v996
    let v1010 : bool = v1007 > 0
    let v1011 : uint8 =
        if v1010 then
            1uy
        else
            0uy
    let v1012 : string = method189()
    (* run_target_args'
    let v1072 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1073 : string = "$0.toString($1)"
    let v1074 : string = Fable.Core.RustInterop.emitRustExpr struct (v996, v1012) v1073 
    let _run_target_args'_v1072 = v1074 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1075 : string = "$0.toString($1)"
    let v1076 : string = Fable.Core.RustInterop.emitRustExpr struct (v996, v1012) v1075 
    let _run_target_args'_v1072 = v1076 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1077 : string = "$0.toString($1)"
    let v1078 : string = Fable.Core.RustInterop.emitRustExpr struct (v996, v1012) v1077 
    let _run_target_args'_v1072 = v1078 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1079 : string = v996.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1072 = v1079 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1080 : string = v996.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1072 = v1080 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1082 : string = v996.ToString v1012 
    let _run_target_args'_v1072 = v1082 
    #endif
#else
    let v1141 : string = v996.ToString v1012 
    let _run_target_args'_v1072 = v1141 
    #endif
    let v1199 : string = _run_target_args'_v1072 
    let v1260 : string = $"{v1011}{v1199.[0..1]}{v1199.[3..4]}"
    let v1262 : (System.Guid -> string) = _.ToString()
    let v1263 : string = v1262 v0
    let v1266 : int32 = v769.Length
    let v1267 : int32 = v1260.Length
    let v1268 : int32 = v1266 + v1267
    let v1270 : (string -> int32) = String.length
    let v1271 : int32 = v1270 v1263
    let v1279 : int32 = v1268 |> int32 
    let v1292 : int32 = v1271 |> int32 
    let v1300 : int32 = v1292 - 1
    let v1302 : string = v1263.[int v1279..int v1300]
    let v1306 : string = $"{v769}{v1260}{v1302}"
    (* run_target_args'
    let v1311 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1313 : System.Guid = v1306 |> System.Guid 
    let _run_target_args'_v1311 = v1313 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1317 : System.Guid = v1306 |> System.Guid 
    let _run_target_args'_v1311 = v1317 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1321 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1311 = v1321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1325 : System.Guid = v1306 |> System.Guid 
    let _run_target_args'_v1311 = v1325 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1329 : System.Guid = v1306 |> System.Guid 
    let _run_target_args'_v1311 = v1329 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1333 : System.Guid = v1306 |> System.Guid 
    let _run_target_args'_v1311 = v1333 
    #endif
#else
    let v1337 : System.Guid = v1306 |> System.Guid 
    let _run_target_args'_v1311 = v1337 
    #endif
    let v1340 : System.Guid = _run_target_args'_v1311 
    let _run_target_args'_v599 = v1340 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1351 : System.DateTime = System.DateTime.UnixEpoch
    let v1355 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1356 : System.DateTime = v1355 v1351
    let v1360 : System.DateTimeKind = System.DateTimeKind.Local
    let v1361 : System.DateTime = System.DateTime.SpecifyKind (v1, v1360)
    let v1365 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1366 : System.DateTime = v1365 v1361
    (* run_target_args'
    let v1375 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1376 : (System.DateTime -> int64) = _.Ticks
    let v1377 : int64 = v1376 v1366
    let _run_target_args'_v1375 = v1377 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1378 : (System.DateTime -> int64) = _.Ticks
    let v1379 : int64 = v1378 v1366
    let _run_target_args'_v1375 = v1379 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1381 : int64 = null |> unbox<int64>
    let _run_target_args'_v1375 = v1381 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1384 : (System.DateTime -> int64) = _.Ticks
    let v1385 : int64 = v1384 v1366
    let _run_target_args'_v1375 = v1385 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1386 : (System.DateTime -> int64) = _.Ticks
    let v1387 : int64 = v1386 v1366
    let _run_target_args'_v1375 = v1387 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1388 : (System.DateTime -> int64) = _.Ticks
    let v1389 : int64 = v1388 v1366
    let _run_target_args'_v1375 = v1389 
    #endif
#else
    let v1390 : (System.DateTime -> int64) = _.Ticks
    let v1391 : int64 = v1390 v1366
    let _run_target_args'_v1375 = v1391 
    #endif
    let v1392 : int64 = _run_target_args'_v1375 
    (* run_target_args'
    let v1418 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1419 : (System.DateTime -> int64) = _.Ticks
    let v1420 : int64 = v1419 v1356
    let _run_target_args'_v1418 = v1420 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1421 : (System.DateTime -> int64) = _.Ticks
    let v1422 : int64 = v1421 v1356
    let _run_target_args'_v1418 = v1422 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1424 : int64 = null |> unbox<int64>
    let _run_target_args'_v1418 = v1424 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1427 : (System.DateTime -> int64) = _.Ticks
    let v1428 : int64 = v1427 v1356
    let _run_target_args'_v1418 = v1428 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1429 : (System.DateTime -> int64) = _.Ticks
    let v1430 : int64 = v1429 v1356
    let _run_target_args'_v1418 = v1430 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1431 : (System.DateTime -> int64) = _.Ticks
    let v1432 : int64 = v1431 v1356
    let _run_target_args'_v1418 = v1432 
    #endif
#else
    let v1433 : (System.DateTime -> int64) = _.Ticks
    let v1434 : int64 = v1433 v1356
    let _run_target_args'_v1418 = v1434 
    #endif
    let v1435 : int64 = _run_target_args'_v1418 
    let v1456 : int64 = v1392 |> int64 
    let v1460 : int64 = v1435 |> int64 
    let v1463 : int64 = v1456 - v1460
    let v1464 : int64 = v1463 / 10L
    let v1465 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1466 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1464 v1465 
    let v1469 : (chrono_DateTime<chrono_Utc> -> US43) = method188()
    let v1470 : US43 option = v1466 |> Option.map v1469 
    let v1490 : US43 = US43_1
    let v1491 : US43 = v1470 |> Option.defaultValue v1490 
    let v1511 : US5 =
        match v1491 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v1495) -> (* Some *)
            let v1496 : string = "$0.naive_utc()"
            let v1497 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1495 v1496 
            let v1498 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1499 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1497 v1498 
            let v1500 : string = "%Y%m%d-%H%M-%S%f"
            let v1501 : string = "r#\"" + v1500 + "\"#"
            let v1502 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1501 
            let v1503 : string = "$0.format($1).to_string()"
            let v1504 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1499, v1502) v1503 
            let v1505 : string = "fable_library_rust::String_::fromString($0)"
            let v1506 : string = Fable.Core.RustInterop.emitRustExpr v1504 v1505 
            let v1507 : string = $"{v1506.[0..17]}-{v1506.[18..21]}-{v1506.[22]}"
            US5_0(v1507)
    let v1515 : string =
        match v1511 with
        | US5_1 -> (* None *)
            let v1513 : string = ""
            v1513
        | US5_0(v1512) -> (* Some *)
            v1512
    (* run_target_args'
    let v1520 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1521 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1522 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1521 
    let _run_target_args'_v1520 = v1522 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1524 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1520 = v1524 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1528 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1520 = v1528 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1532 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1520 = v1532 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1536 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1520 = v1536 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1539 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1520 = v1539 
    #endif
#else
    let v1540 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1520 = v1540 
    #endif
    let v1541 : System.TimeZoneInfo = _run_target_args'_v1520 
    (* run_target_args'
    let v1554 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1561 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1562 : (System.DateTime -> int64) = _.Ticks
    let v1563 : int64 = v1562 v1366
    let _run_target_args'_v1561 = v1563 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1564 : (System.DateTime -> int64) = _.Ticks
    let v1565 : int64 = v1564 v1366
    let _run_target_args'_v1561 = v1565 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1567 : int64 = null |> unbox<int64>
    let _run_target_args'_v1561 = v1567 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1570 : (System.DateTime -> int64) = _.Ticks
    let v1571 : int64 = v1570 v1366
    let _run_target_args'_v1561 = v1571 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1572 : (System.DateTime -> int64) = _.Ticks
    let v1573 : int64 = v1572 v1366
    let _run_target_args'_v1561 = v1573 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1574 : (System.DateTime -> int64) = _.Ticks
    let v1575 : int64 = v1574 v1366
    let _run_target_args'_v1561 = v1575 
    #endif
#else
    let v1576 : (System.DateTime -> int64) = _.Ticks
    let v1577 : int64 = v1576 v1366
    let _run_target_args'_v1561 = v1577 
    #endif
    let v1578 : int64 = _run_target_args'_v1561 
    let v1598 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1599 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1366, v1578) v1598 
    let v1601 : System.TimeSpan = v1599 |> System.TimeSpan 
    let _run_target_args'_v1554 = v1601 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1610 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1611 : (System.DateTime -> int64) = _.Ticks
    let v1612 : int64 = v1611 v1366
    let _run_target_args'_v1610 = v1612 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1613 : (System.DateTime -> int64) = _.Ticks
    let v1614 : int64 = v1613 v1366
    let _run_target_args'_v1610 = v1614 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1616 : int64 = null |> unbox<int64>
    let _run_target_args'_v1610 = v1616 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1619 : (System.DateTime -> int64) = _.Ticks
    let v1620 : int64 = v1619 v1366
    let _run_target_args'_v1610 = v1620 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1621 : (System.DateTime -> int64) = _.Ticks
    let v1622 : int64 = v1621 v1366
    let _run_target_args'_v1610 = v1622 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1623 : (System.DateTime -> int64) = _.Ticks
    let v1624 : int64 = v1623 v1366
    let _run_target_args'_v1610 = v1624 
    #endif
#else
    let v1625 : (System.DateTime -> int64) = _.Ticks
    let v1626 : int64 = v1625 v1366
    let _run_target_args'_v1610 = v1626 
    #endif
    let v1627 : int64 = _run_target_args'_v1610 
    let v1647 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1648 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1366, v1627) v1647 
    let v1650 : System.TimeSpan = v1648 |> System.TimeSpan 
    let _run_target_args'_v1554 = v1650 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1654 : US3 = US3_2
    let v1655 : US4 = US4_3(v1654)
    let v1656 : string = $"date_time.get_utc_offset / target: {v1655}"
    let v1657 : System.TimeSpan = failwith<System.TimeSpan> v1656
    let _run_target_args'_v1554 = v1657 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1661 : US3 = US3_0
    let v1662 : US4 = US4_4(v1661)
    let v1663 : string = $"date_time.get_utc_offset / target: {v1662}"
    let v1664 : System.TimeSpan = failwith<System.TimeSpan> v1663
    let _run_target_args'_v1554 = v1664 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1668 : US3 = US3_0
    let v1669 : US4 = US4_5(v1668)
    let v1670 : string = $"date_time.get_utc_offset / target: {v1669}"
    let v1671 : System.TimeSpan = failwith<System.TimeSpan> v1670
    let _run_target_args'_v1554 = v1671 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1674 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1679 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1680 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1681 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1680 
    let _run_target_args'_v1679 = v1681 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1683 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1679 = v1683 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1687 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1679 = v1687 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1691 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1679 = v1691 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1695 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1679 = v1695 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1698 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1679 = v1698 
    #endif
#else
    let v1699 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1679 = v1699 
    #endif
    let v1700 : System.TimeZoneInfo = _run_target_args'_v1679 
    let v1706 : (System.DateTime -> System.TimeSpan) = v1674 v1700
    let v1707 : System.TimeSpan = v1706 v1366
    let _run_target_args'_v1554 = v1707 
    #endif
#else
    let v1708 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1713 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1714 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1715 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1714 
    let _run_target_args'_v1713 = v1715 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1717 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1713 = v1717 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1721 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1713 = v1721 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1725 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1713 = v1725 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1729 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1713 = v1729 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1732 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1713 = v1732 
    #endif
#else
    let v1733 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1713 = v1733 
    #endif
    let v1734 : System.TimeZoneInfo = _run_target_args'_v1713 
    let v1740 : (System.DateTime -> System.TimeSpan) = v1708 v1734
    let v1741 : System.TimeSpan = v1740 v1366
    let _run_target_args'_v1554 = v1741 
    #endif
    let v1742 : System.TimeSpan = _run_target_args'_v1554 
    let v1752 : (System.TimeSpan -> int32) = _.Hours
    let v1753 : int32 = v1752 v1742
    let v1756 : bool = v1753 > 0
    let v1757 : uint8 =
        if v1756 then
            1uy
        else
            0uy
    let v1758 : string = method189()
    (* run_target_args'
    let v1818 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1819 : string = "$0.toString($1)"
    let v1820 : string = Fable.Core.RustInterop.emitRustExpr struct (v1742, v1758) v1819 
    let _run_target_args'_v1818 = v1820 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1821 : string = "$0.toString($1)"
    let v1822 : string = Fable.Core.RustInterop.emitRustExpr struct (v1742, v1758) v1821 
    let _run_target_args'_v1818 = v1822 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1823 : string = "$0.toString($1)"
    let v1824 : string = Fable.Core.RustInterop.emitRustExpr struct (v1742, v1758) v1823 
    let _run_target_args'_v1818 = v1824 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1825 : string = v1742.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1818 = v1825 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1826 : string = v1742.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1818 = v1826 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1828 : string = v1742.ToString v1758 
    let _run_target_args'_v1818 = v1828 
    #endif
#else
    let v1887 : string = v1742.ToString v1758 
    let _run_target_args'_v1818 = v1887 
    #endif
    let v1945 : string = _run_target_args'_v1818 
    let v2006 : string = $"{v1757}{v1945.[0..1]}{v1945.[3..4]}"
    let v2008 : (System.Guid -> string) = _.ToString()
    let v2009 : string = v2008 v0
    let v2012 : int32 = v1515.Length
    let v2013 : int32 = v2006.Length
    let v2014 : int32 = v2012 + v2013
    let v2016 : (string -> int32) = String.length
    let v2017 : int32 = v2016 v2009
    let v2025 : int32 = v2014 |> int32 
    let v2038 : int32 = v2017 |> int32 
    let v2046 : int32 = v2038 - 1
    let v2048 : string = v2009.[int v2025..int v2046]
    let v2052 : string = $"{v1515}{v2006}{v2048}"
    (* run_target_args'
    let v2057 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2059 : System.Guid = v2052 |> System.Guid 
    let _run_target_args'_v2057 = v2059 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2063 : System.Guid = v2052 |> System.Guid 
    let _run_target_args'_v2057 = v2063 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2067 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2057 = v2067 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2071 : System.Guid = v2052 |> System.Guid 
    let _run_target_args'_v2057 = v2071 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2075 : System.Guid = v2052 |> System.Guid 
    let _run_target_args'_v2057 = v2075 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2079 : System.Guid = v2052 |> System.Guid 
    let _run_target_args'_v2057 = v2079 
    #endif
#else
    let v2083 : System.Guid = v2052 |> System.Guid 
    let _run_target_args'_v2057 = v2083 
    #endif
    let v2086 : System.Guid = _run_target_args'_v2057 
    let _run_target_args'_v599 = v2086 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2093 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v599 = v2093 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2096 : string = method190()
    let v2098 : bool = v2096 = ""
    let v2100 : string =
        if v2098 then
            let v2099 : string = "M-d-y hh:mm:ss tt"
            v2099
        else
            v2096
    let v2101 : (string -> string) = v1.ToString
    let v2102 : string = v2101 v2100
    (* run_target_args'
    let v2121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2122 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2123 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2122 
    let _run_target_args'_v2121 = v2123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2121 = v2125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2129 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2121 = v2129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2133 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2121 = v2133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2137 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2121 = v2137 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2140 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2121 = v2140 
    #endif
#else
    let v2141 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2121 = v2141 
    #endif
    let v2142 : System.TimeZoneInfo = _run_target_args'_v2121 
    (* run_target_args'
    let v2155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2162 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2163 : (System.DateTime -> int64) = _.Ticks
    let v2164 : int64 = v2163 v1
    let _run_target_args'_v2162 = v2164 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2165 : (System.DateTime -> int64) = _.Ticks
    let v2166 : int64 = v2165 v1
    let _run_target_args'_v2162 = v2166 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2168 : int64 = null |> unbox<int64>
    let _run_target_args'_v2162 = v2168 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2171 : (System.DateTime -> int64) = _.Ticks
    let v2172 : int64 = v2171 v1
    let _run_target_args'_v2162 = v2172 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2173 : (System.DateTime -> int64) = _.Ticks
    let v2174 : int64 = v2173 v1
    let _run_target_args'_v2162 = v2174 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2175 : (System.DateTime -> int64) = _.Ticks
    let v2176 : int64 = v2175 v1
    let _run_target_args'_v2162 = v2176 
    #endif
#else
    let v2177 : (System.DateTime -> int64) = _.Ticks
    let v2178 : int64 = v2177 v1
    let _run_target_args'_v2162 = v2178 
    #endif
    let v2179 : int64 = _run_target_args'_v2162 
    let v2199 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2200 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2179) v2199 
    let v2202 : System.TimeSpan = v2200 |> System.TimeSpan 
    let _run_target_args'_v2155 = v2202 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2212 : (System.DateTime -> int64) = _.Ticks
    let v2213 : int64 = v2212 v1
    let _run_target_args'_v2211 = v2213 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2214 : (System.DateTime -> int64) = _.Ticks
    let v2215 : int64 = v2214 v1
    let _run_target_args'_v2211 = v2215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2217 : int64 = null |> unbox<int64>
    let _run_target_args'_v2211 = v2217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2220 : (System.DateTime -> int64) = _.Ticks
    let v2221 : int64 = v2220 v1
    let _run_target_args'_v2211 = v2221 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2222 : (System.DateTime -> int64) = _.Ticks
    let v2223 : int64 = v2222 v1
    let _run_target_args'_v2211 = v2223 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2224 : (System.DateTime -> int64) = _.Ticks
    let v2225 : int64 = v2224 v1
    let _run_target_args'_v2211 = v2225 
    #endif
#else
    let v2226 : (System.DateTime -> int64) = _.Ticks
    let v2227 : int64 = v2226 v1
    let _run_target_args'_v2211 = v2227 
    #endif
    let v2228 : int64 = _run_target_args'_v2211 
    let v2248 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2249 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2228) v2248 
    let v2251 : System.TimeSpan = v2249 |> System.TimeSpan 
    let _run_target_args'_v2155 = v2251 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2255 : US3 = US3_2
    let v2256 : US4 = US4_3(v2255)
    let v2257 : string = $"date_time.get_utc_offset / target: {v2256}"
    let v2258 : System.TimeSpan = failwith<System.TimeSpan> v2257
    let _run_target_args'_v2155 = v2258 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2262 : US3 = US3_0
    let v2263 : US4 = US4_4(v2262)
    let v2264 : string = $"date_time.get_utc_offset / target: {v2263}"
    let v2265 : System.TimeSpan = failwith<System.TimeSpan> v2264
    let _run_target_args'_v2155 = v2265 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2269 : US3 = US3_0
    let v2270 : US4 = US4_5(v2269)
    let v2271 : string = $"date_time.get_utc_offset / target: {v2270}"
    let v2272 : System.TimeSpan = failwith<System.TimeSpan> v2271
    let _run_target_args'_v2155 = v2272 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2275 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2280 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2281 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2282 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2281 
    let _run_target_args'_v2280 = v2282 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2280 = v2284 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2288 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2280 = v2288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2292 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2280 = v2292 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2296 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2280 = v2296 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2299 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2280 = v2299 
    #endif
#else
    let v2300 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2280 = v2300 
    #endif
    let v2301 : System.TimeZoneInfo = _run_target_args'_v2280 
    let v2307 : (System.DateTime -> System.TimeSpan) = v2275 v2301
    let v2308 : System.TimeSpan = v2307 v1
    let _run_target_args'_v2155 = v2308 
    #endif
#else
    let v2309 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2314 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2315 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2316 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2315 
    let _run_target_args'_v2314 = v2316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2318 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2314 = v2318 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2322 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2314 = v2322 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2326 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2314 = v2326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2330 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2314 = v2330 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2333 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2314 = v2333 
    #endif
#else
    let v2334 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2314 = v2334 
    #endif
    let v2335 : System.TimeZoneInfo = _run_target_args'_v2314 
    let v2341 : (System.DateTime -> System.TimeSpan) = v2309 v2335
    let v2342 : System.TimeSpan = v2341 v1
    let _run_target_args'_v2155 = v2342 
    #endif
    let v2343 : System.TimeSpan = _run_target_args'_v2155 
    let v2353 : (System.TimeSpan -> int32) = _.Hours
    let v2354 : int32 = v2353 v2343
    let v2357 : bool = v2354 > 0
    let v2358 : uint8 =
        if v2357 then
            1uy
        else
            0uy
    let v2359 : string = method191()
    (* run_target_args'
    let v2419 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2420 : string = "$0.toString($1)"
    let v2421 : string = Fable.Core.RustInterop.emitRustExpr struct (v2343, v2359) v2420 
    let _run_target_args'_v2419 = v2421 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2422 : string = "$0.toString($1)"
    let v2423 : string = Fable.Core.RustInterop.emitRustExpr struct (v2343, v2359) v2422 
    let _run_target_args'_v2419 = v2423 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2424 : string = "$0.toString($1)"
    let v2425 : string = Fable.Core.RustInterop.emitRustExpr struct (v2343, v2359) v2424 
    let _run_target_args'_v2419 = v2425 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2426 : string = v2343.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2419 = v2426 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2427 : string = v2343.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2419 = v2427 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2429 : string = v2343.ToString v2359 
    let _run_target_args'_v2419 = v2429 
    #endif
#else
    let v2488 : string = v2343.ToString v2359 
    let _run_target_args'_v2419 = v2488 
    #endif
    let v2546 : string = _run_target_args'_v2419 
    let v2607 : string = $"{v2358}{v2546}"
    let v2609 : (System.Guid -> string) = _.ToString()
    let v2610 : string = v2609 v0
    let v2613 : int32 = v2102.Length
    let v2614 : int32 = v2607.Length
    let v2615 : int32 = v2613 + v2614
    let v2617 : (string -> int32) = String.length
    let v2618 : int32 = v2617 v2610
    let v2626 : int32 = v2615 |> int32 
    let v2639 : int32 = v2618 |> int32 
    let v2647 : int32 = v2639 - 1
    let v2649 : string = v2610.[int v2626..int v2647]
    let v2653 : string = $"{v2102}{v2607}{v2649}"
    (* run_target_args'
    let v2658 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2660 : System.Guid = v2653 |> System.Guid 
    let _run_target_args'_v2658 = v2660 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2664 : System.Guid = v2653 |> System.Guid 
    let _run_target_args'_v2658 = v2664 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2668 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2658 = v2668 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2672 : System.Guid = v2653 |> System.Guid 
    let _run_target_args'_v2658 = v2672 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2676 : System.Guid = v2653 |> System.Guid 
    let _run_target_args'_v2658 = v2676 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2680 : System.Guid = v2653 |> System.Guid 
    let _run_target_args'_v2658 = v2680 
    #endif
#else
    let v2684 : System.Guid = v2653 |> System.Guid 
    let _run_target_args'_v2658 = v2684 
    #endif
    let v2687 : System.Guid = _run_target_args'_v2658 
    let _run_target_args'_v599 = v2687 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2693 : string = method190()
    let v2695 : bool = v2693 = ""
    let v2697 : string =
        if v2695 then
            let v2696 : string = "M-d-y hh:mm:ss tt"
            v2696
        else
            v2693
    let v2698 : (string -> string) = v1.ToString
    let v2699 : string = v2698 v2697
    (* run_target_args'
    let v2718 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2719 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2720 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2719 
    let _run_target_args'_v2718 = v2720 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2722 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2718 = v2722 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2726 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2718 = v2726 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2730 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2718 = v2730 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2734 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2718 = v2734 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2737 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2718 = v2737 
    #endif
#else
    let v2738 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2718 = v2738 
    #endif
    let v2739 : System.TimeZoneInfo = _run_target_args'_v2718 
    (* run_target_args'
    let v2752 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2759 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2760 : (System.DateTime -> int64) = _.Ticks
    let v2761 : int64 = v2760 v1
    let _run_target_args'_v2759 = v2761 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2762 : (System.DateTime -> int64) = _.Ticks
    let v2763 : int64 = v2762 v1
    let _run_target_args'_v2759 = v2763 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2765 : int64 = null |> unbox<int64>
    let _run_target_args'_v2759 = v2765 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2768 : (System.DateTime -> int64) = _.Ticks
    let v2769 : int64 = v2768 v1
    let _run_target_args'_v2759 = v2769 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2770 : (System.DateTime -> int64) = _.Ticks
    let v2771 : int64 = v2770 v1
    let _run_target_args'_v2759 = v2771 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2772 : (System.DateTime -> int64) = _.Ticks
    let v2773 : int64 = v2772 v1
    let _run_target_args'_v2759 = v2773 
    #endif
#else
    let v2774 : (System.DateTime -> int64) = _.Ticks
    let v2775 : int64 = v2774 v1
    let _run_target_args'_v2759 = v2775 
    #endif
    let v2776 : int64 = _run_target_args'_v2759 
    let v2796 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2797 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2776) v2796 
    let v2799 : System.TimeSpan = v2797 |> System.TimeSpan 
    let _run_target_args'_v2752 = v2799 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2808 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2809 : (System.DateTime -> int64) = _.Ticks
    let v2810 : int64 = v2809 v1
    let _run_target_args'_v2808 = v2810 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2811 : (System.DateTime -> int64) = _.Ticks
    let v2812 : int64 = v2811 v1
    let _run_target_args'_v2808 = v2812 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2814 : int64 = null |> unbox<int64>
    let _run_target_args'_v2808 = v2814 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2817 : (System.DateTime -> int64) = _.Ticks
    let v2818 : int64 = v2817 v1
    let _run_target_args'_v2808 = v2818 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2819 : (System.DateTime -> int64) = _.Ticks
    let v2820 : int64 = v2819 v1
    let _run_target_args'_v2808 = v2820 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2821 : (System.DateTime -> int64) = _.Ticks
    let v2822 : int64 = v2821 v1
    let _run_target_args'_v2808 = v2822 
    #endif
#else
    let v2823 : (System.DateTime -> int64) = _.Ticks
    let v2824 : int64 = v2823 v1
    let _run_target_args'_v2808 = v2824 
    #endif
    let v2825 : int64 = _run_target_args'_v2808 
    let v2845 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2846 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2825) v2845 
    let v2848 : System.TimeSpan = v2846 |> System.TimeSpan 
    let _run_target_args'_v2752 = v2848 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2852 : US3 = US3_2
    let v2853 : US4 = US4_3(v2852)
    let v2854 : string = $"date_time.get_utc_offset / target: {v2853}"
    let v2855 : System.TimeSpan = failwith<System.TimeSpan> v2854
    let _run_target_args'_v2752 = v2855 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2859 : US3 = US3_0
    let v2860 : US4 = US4_4(v2859)
    let v2861 : string = $"date_time.get_utc_offset / target: {v2860}"
    let v2862 : System.TimeSpan = failwith<System.TimeSpan> v2861
    let _run_target_args'_v2752 = v2862 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2866 : US3 = US3_0
    let v2867 : US4 = US4_5(v2866)
    let v2868 : string = $"date_time.get_utc_offset / target: {v2867}"
    let v2869 : System.TimeSpan = failwith<System.TimeSpan> v2868
    let _run_target_args'_v2752 = v2869 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2872 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2877 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2878 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2879 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2878 
    let _run_target_args'_v2877 = v2879 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2881 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2877 = v2881 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2885 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2877 = v2885 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2889 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2877 = v2889 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2893 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2877 = v2893 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2896 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2877 = v2896 
    #endif
#else
    let v2897 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2877 = v2897 
    #endif
    let v2898 : System.TimeZoneInfo = _run_target_args'_v2877 
    let v2904 : (System.DateTime -> System.TimeSpan) = v2872 v2898
    let v2905 : System.TimeSpan = v2904 v1
    let _run_target_args'_v2752 = v2905 
    #endif
#else
    let v2906 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2911 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2912 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2913 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2912 
    let _run_target_args'_v2911 = v2913 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2915 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2911 = v2915 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2919 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2911 = v2919 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2911 = v2923 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2927 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2911 = v2927 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2930 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2911 = v2930 
    #endif
#else
    let v2931 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2911 = v2931 
    #endif
    let v2932 : System.TimeZoneInfo = _run_target_args'_v2911 
    let v2938 : (System.DateTime -> System.TimeSpan) = v2906 v2932
    let v2939 : System.TimeSpan = v2938 v1
    let _run_target_args'_v2752 = v2939 
    #endif
    let v2940 : System.TimeSpan = _run_target_args'_v2752 
    let v2950 : (System.TimeSpan -> int32) = _.Hours
    let v2951 : int32 = v2950 v2940
    let v2954 : bool = v2951 > 0
    let v2955 : uint8 =
        if v2954 then
            1uy
        else
            0uy
    let v2956 : string = method191()
    (* run_target_args'
    let v3016 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3017 : string = "$0.toString($1)"
    let v3018 : string = Fable.Core.RustInterop.emitRustExpr struct (v2940, v2956) v3017 
    let _run_target_args'_v3016 = v3018 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3019 : string = "$0.toString($1)"
    let v3020 : string = Fable.Core.RustInterop.emitRustExpr struct (v2940, v2956) v3019 
    let _run_target_args'_v3016 = v3020 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3021 : string = "$0.toString($1)"
    let v3022 : string = Fable.Core.RustInterop.emitRustExpr struct (v2940, v2956) v3021 
    let _run_target_args'_v3016 = v3022 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3023 : string = v2940.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3016 = v3023 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3024 : string = v2940.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3016 = v3024 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3026 : string = v2940.ToString v2956 
    let _run_target_args'_v3016 = v3026 
    #endif
#else
    let v3085 : string = v2940.ToString v2956 
    let _run_target_args'_v3016 = v3085 
    #endif
    let v3143 : string = _run_target_args'_v3016 
    let v3204 : string = $"{v2955}{v3143}"
    let v3206 : (System.Guid -> string) = _.ToString()
    let v3207 : string = v3206 v0
    let v3210 : int32 = v2699.Length
    let v3211 : int32 = v3204.Length
    let v3212 : int32 = v3210 + v3211
    let v3214 : (string -> int32) = String.length
    let v3215 : int32 = v3214 v3207
    let v3223 : int32 = v3212 |> int32 
    let v3236 : int32 = v3215 |> int32 
    let v3244 : int32 = v3236 - 1
    let v3246 : string = v3207.[int v3223..int v3244]
    let v3250 : string = $"{v2699}{v3204}{v3246}"
    (* run_target_args'
    let v3255 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3257 : System.Guid = v3250 |> System.Guid 
    let _run_target_args'_v3255 = v3257 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3261 : System.Guid = v3250 |> System.Guid 
    let _run_target_args'_v3255 = v3261 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3265 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3255 = v3265 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3269 : System.Guid = v3250 |> System.Guid 
    let _run_target_args'_v3255 = v3269 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3273 : System.Guid = v3250 |> System.Guid 
    let _run_target_args'_v3255 = v3273 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3277 : System.Guid = v3250 |> System.Guid 
    let _run_target_args'_v3255 = v3277 
    #endif
#else
    let v3281 : System.Guid = v3250 |> System.Guid 
    let _run_target_args'_v3255 = v3281 
    #endif
    let v3284 : System.Guid = _run_target_args'_v3255 
    let _run_target_args'_v599 = v3284 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3290 : string = method190()
    let v3292 : bool = v3290 = ""
    let v3294 : string =
        if v3292 then
            let v3293 : string = "M-d-y hh:mm:ss tt"
            v3293
        else
            v3290
    let v3295 : (string -> string) = v1.ToString
    let v3296 : string = v3295 v3294
    (* run_target_args'
    let v3315 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3316 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3317 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3316 
    let _run_target_args'_v3315 = v3317 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3319 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3315 = v3319 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3323 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3315 = v3323 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3327 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3315 = v3327 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3331 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3315 = v3331 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3334 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3315 = v3334 
    #endif
#else
    let v3335 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3315 = v3335 
    #endif
    let v3336 : System.TimeZoneInfo = _run_target_args'_v3315 
    (* run_target_args'
    let v3349 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3356 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3357 : (System.DateTime -> int64) = _.Ticks
    let v3358 : int64 = v3357 v1
    let _run_target_args'_v3356 = v3358 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3359 : (System.DateTime -> int64) = _.Ticks
    let v3360 : int64 = v3359 v1
    let _run_target_args'_v3356 = v3360 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3362 : int64 = null |> unbox<int64>
    let _run_target_args'_v3356 = v3362 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3365 : (System.DateTime -> int64) = _.Ticks
    let v3366 : int64 = v3365 v1
    let _run_target_args'_v3356 = v3366 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3367 : (System.DateTime -> int64) = _.Ticks
    let v3368 : int64 = v3367 v1
    let _run_target_args'_v3356 = v3368 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3369 : (System.DateTime -> int64) = _.Ticks
    let v3370 : int64 = v3369 v1
    let _run_target_args'_v3356 = v3370 
    #endif
#else
    let v3371 : (System.DateTime -> int64) = _.Ticks
    let v3372 : int64 = v3371 v1
    let _run_target_args'_v3356 = v3372 
    #endif
    let v3373 : int64 = _run_target_args'_v3356 
    let v3393 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3394 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3373) v3393 
    let v3396 : System.TimeSpan = v3394 |> System.TimeSpan 
    let _run_target_args'_v3349 = v3396 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3405 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3406 : (System.DateTime -> int64) = _.Ticks
    let v3407 : int64 = v3406 v1
    let _run_target_args'_v3405 = v3407 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3408 : (System.DateTime -> int64) = _.Ticks
    let v3409 : int64 = v3408 v1
    let _run_target_args'_v3405 = v3409 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3411 : int64 = null |> unbox<int64>
    let _run_target_args'_v3405 = v3411 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3414 : (System.DateTime -> int64) = _.Ticks
    let v3415 : int64 = v3414 v1
    let _run_target_args'_v3405 = v3415 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3416 : (System.DateTime -> int64) = _.Ticks
    let v3417 : int64 = v3416 v1
    let _run_target_args'_v3405 = v3417 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3418 : (System.DateTime -> int64) = _.Ticks
    let v3419 : int64 = v3418 v1
    let _run_target_args'_v3405 = v3419 
    #endif
#else
    let v3420 : (System.DateTime -> int64) = _.Ticks
    let v3421 : int64 = v3420 v1
    let _run_target_args'_v3405 = v3421 
    #endif
    let v3422 : int64 = _run_target_args'_v3405 
    let v3442 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3443 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3422) v3442 
    let v3445 : System.TimeSpan = v3443 |> System.TimeSpan 
    let _run_target_args'_v3349 = v3445 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3449 : US3 = US3_2
    let v3450 : US4 = US4_3(v3449)
    let v3451 : string = $"date_time.get_utc_offset / target: {v3450}"
    let v3452 : System.TimeSpan = failwith<System.TimeSpan> v3451
    let _run_target_args'_v3349 = v3452 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3456 : US3 = US3_0
    let v3457 : US4 = US4_4(v3456)
    let v3458 : string = $"date_time.get_utc_offset / target: {v3457}"
    let v3459 : System.TimeSpan = failwith<System.TimeSpan> v3458
    let _run_target_args'_v3349 = v3459 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3463 : US3 = US3_0
    let v3464 : US4 = US4_5(v3463)
    let v3465 : string = $"date_time.get_utc_offset / target: {v3464}"
    let v3466 : System.TimeSpan = failwith<System.TimeSpan> v3465
    let _run_target_args'_v3349 = v3466 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3469 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3474 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3475 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3476 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3475 
    let _run_target_args'_v3474 = v3476 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3478 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3474 = v3478 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3482 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3474 = v3482 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3486 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3474 = v3486 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3490 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3474 = v3490 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3493 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3474 = v3493 
    #endif
#else
    let v3494 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3474 = v3494 
    #endif
    let v3495 : System.TimeZoneInfo = _run_target_args'_v3474 
    let v3501 : (System.DateTime -> System.TimeSpan) = v3469 v3495
    let v3502 : System.TimeSpan = v3501 v1
    let _run_target_args'_v3349 = v3502 
    #endif
#else
    let v3503 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3508 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3509 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3510 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3509 
    let _run_target_args'_v3508 = v3510 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3512 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3508 = v3512 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3516 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3508 = v3516 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3520 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3508 = v3520 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3524 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3508 = v3524 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3527 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3508 = v3527 
    #endif
#else
    let v3528 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3508 = v3528 
    #endif
    let v3529 : System.TimeZoneInfo = _run_target_args'_v3508 
    let v3535 : (System.DateTime -> System.TimeSpan) = v3503 v3529
    let v3536 : System.TimeSpan = v3535 v1
    let _run_target_args'_v3349 = v3536 
    #endif
    let v3537 : System.TimeSpan = _run_target_args'_v3349 
    let v3547 : (System.TimeSpan -> int32) = _.Hours
    let v3548 : int32 = v3547 v3537
    let v3551 : bool = v3548 > 0
    let v3552 : uint8 =
        if v3551 then
            1uy
        else
            0uy
    let v3553 : string = method191()
    (* run_target_args'
    let v3613 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3614 : string = "$0.toString($1)"
    let v3615 : string = Fable.Core.RustInterop.emitRustExpr struct (v3537, v3553) v3614 
    let _run_target_args'_v3613 = v3615 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3616 : string = "$0.toString($1)"
    let v3617 : string = Fable.Core.RustInterop.emitRustExpr struct (v3537, v3553) v3616 
    let _run_target_args'_v3613 = v3617 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3618 : string = "$0.toString($1)"
    let v3619 : string = Fable.Core.RustInterop.emitRustExpr struct (v3537, v3553) v3618 
    let _run_target_args'_v3613 = v3619 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3620 : string = v3537.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3613 = v3620 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3621 : string = v3537.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3613 = v3621 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3623 : string = v3537.ToString v3553 
    let _run_target_args'_v3613 = v3623 
    #endif
#else
    let v3682 : string = v3537.ToString v3553 
    let _run_target_args'_v3613 = v3682 
    #endif
    let v3740 : string = _run_target_args'_v3613 
    let v3801 : string = $"{v3552}{v3740}"
    let v3803 : (System.Guid -> string) = _.ToString()
    let v3804 : string = v3803 v0
    let v3807 : int32 = v3296.Length
    let v3808 : int32 = v3801.Length
    let v3809 : int32 = v3807 + v3808
    let v3811 : (string -> int32) = String.length
    let v3812 : int32 = v3811 v3804
    let v3820 : int32 = v3809 |> int32 
    let v3833 : int32 = v3812 |> int32 
    let v3841 : int32 = v3833 - 1
    let v3843 : string = v3804.[int v3820..int v3841]
    let v3847 : string = $"{v3296}{v3801}{v3843}"
    (* run_target_args'
    let v3852 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3854 : System.Guid = v3847 |> System.Guid 
    let _run_target_args'_v3852 = v3854 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3858 : System.Guid = v3847 |> System.Guid 
    let _run_target_args'_v3852 = v3858 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3862 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3852 = v3862 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3866 : System.Guid = v3847 |> System.Guid 
    let _run_target_args'_v3852 = v3866 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3870 : System.Guid = v3847 |> System.Guid 
    let _run_target_args'_v3852 = v3870 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3874 : System.Guid = v3847 |> System.Guid 
    let _run_target_args'_v3852 = v3874 
    #endif
#else
    let v3878 : System.Guid = v3847 |> System.Guid 
    let _run_target_args'_v3852 = v3878 
    #endif
    let v3881 : System.Guid = _run_target_args'_v3852 
    let _run_target_args'_v599 = v3881 
    #endif
#else
    let v3887 : string = method190()
    let v3889 : bool = v3887 = ""
    let v3891 : string =
        if v3889 then
            let v3890 : string = "M-d-y hh:mm:ss tt"
            v3890
        else
            v3887
    let v3892 : (string -> string) = v1.ToString
    let v3893 : string = v3892 v3891
    (* run_target_args'
    let v3912 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3913 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3914 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3913 
    let _run_target_args'_v3912 = v3914 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3916 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3912 = v3916 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3920 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3912 = v3920 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3924 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3912 = v3924 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3928 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3912 = v3928 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3931 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3912 = v3931 
    #endif
#else
    let v3932 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3912 = v3932 
    #endif
    let v3933 : System.TimeZoneInfo = _run_target_args'_v3912 
    (* run_target_args'
    let v3946 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3953 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3954 : (System.DateTime -> int64) = _.Ticks
    let v3955 : int64 = v3954 v1
    let _run_target_args'_v3953 = v3955 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3956 : (System.DateTime -> int64) = _.Ticks
    let v3957 : int64 = v3956 v1
    let _run_target_args'_v3953 = v3957 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3959 : int64 = null |> unbox<int64>
    let _run_target_args'_v3953 = v3959 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3962 : (System.DateTime -> int64) = _.Ticks
    let v3963 : int64 = v3962 v1
    let _run_target_args'_v3953 = v3963 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3964 : (System.DateTime -> int64) = _.Ticks
    let v3965 : int64 = v3964 v1
    let _run_target_args'_v3953 = v3965 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3966 : (System.DateTime -> int64) = _.Ticks
    let v3967 : int64 = v3966 v1
    let _run_target_args'_v3953 = v3967 
    #endif
#else
    let v3968 : (System.DateTime -> int64) = _.Ticks
    let v3969 : int64 = v3968 v1
    let _run_target_args'_v3953 = v3969 
    #endif
    let v3970 : int64 = _run_target_args'_v3953 
    let v3990 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3991 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3970) v3990 
    let v3993 : System.TimeSpan = v3991 |> System.TimeSpan 
    let _run_target_args'_v3946 = v3993 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4002 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4003 : (System.DateTime -> int64) = _.Ticks
    let v4004 : int64 = v4003 v1
    let _run_target_args'_v4002 = v4004 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4005 : (System.DateTime -> int64) = _.Ticks
    let v4006 : int64 = v4005 v1
    let _run_target_args'_v4002 = v4006 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4008 : int64 = null |> unbox<int64>
    let _run_target_args'_v4002 = v4008 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4011 : (System.DateTime -> int64) = _.Ticks
    let v4012 : int64 = v4011 v1
    let _run_target_args'_v4002 = v4012 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4013 : (System.DateTime -> int64) = _.Ticks
    let v4014 : int64 = v4013 v1
    let _run_target_args'_v4002 = v4014 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4015 : (System.DateTime -> int64) = _.Ticks
    let v4016 : int64 = v4015 v1
    let _run_target_args'_v4002 = v4016 
    #endif
#else
    let v4017 : (System.DateTime -> int64) = _.Ticks
    let v4018 : int64 = v4017 v1
    let _run_target_args'_v4002 = v4018 
    #endif
    let v4019 : int64 = _run_target_args'_v4002 
    let v4039 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4040 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4019) v4039 
    let v4042 : System.TimeSpan = v4040 |> System.TimeSpan 
    let _run_target_args'_v3946 = v4042 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4046 : US3 = US3_2
    let v4047 : US4 = US4_3(v4046)
    let v4048 : string = $"date_time.get_utc_offset / target: {v4047}"
    let v4049 : System.TimeSpan = failwith<System.TimeSpan> v4048
    let _run_target_args'_v3946 = v4049 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4053 : US3 = US3_0
    let v4054 : US4 = US4_4(v4053)
    let v4055 : string = $"date_time.get_utc_offset / target: {v4054}"
    let v4056 : System.TimeSpan = failwith<System.TimeSpan> v4055
    let _run_target_args'_v3946 = v4056 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4060 : US3 = US3_0
    let v4061 : US4 = US4_5(v4060)
    let v4062 : string = $"date_time.get_utc_offset / target: {v4061}"
    let v4063 : System.TimeSpan = failwith<System.TimeSpan> v4062
    let _run_target_args'_v3946 = v4063 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4066 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4071 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4072 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4073 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4072 
    let _run_target_args'_v4071 = v4073 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4075 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4071 = v4075 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4079 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4071 = v4079 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4083 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4071 = v4083 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4087 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4071 = v4087 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4090 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4071 = v4090 
    #endif
#else
    let v4091 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4071 = v4091 
    #endif
    let v4092 : System.TimeZoneInfo = _run_target_args'_v4071 
    let v4098 : (System.DateTime -> System.TimeSpan) = v4066 v4092
    let v4099 : System.TimeSpan = v4098 v1
    let _run_target_args'_v3946 = v4099 
    #endif
#else
    let v4100 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4105 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4106 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4107 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4106 
    let _run_target_args'_v4105 = v4107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4109 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4105 = v4109 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4113 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4105 = v4113 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4117 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4105 = v4117 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4121 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4105 = v4121 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4124 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4105 = v4124 
    #endif
#else
    let v4125 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4105 = v4125 
    #endif
    let v4126 : System.TimeZoneInfo = _run_target_args'_v4105 
    let v4132 : (System.DateTime -> System.TimeSpan) = v4100 v4126
    let v4133 : System.TimeSpan = v4132 v1
    let _run_target_args'_v3946 = v4133 
    #endif
    let v4134 : System.TimeSpan = _run_target_args'_v3946 
    let v4144 : (System.TimeSpan -> int32) = _.Hours
    let v4145 : int32 = v4144 v4134
    let v4148 : bool = v4145 > 0
    let v4149 : uint8 =
        if v4148 then
            1uy
        else
            0uy
    let v4150 : string = method191()
    (* run_target_args'
    let v4210 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4211 : string = "$0.toString($1)"
    let v4212 : string = Fable.Core.RustInterop.emitRustExpr struct (v4134, v4150) v4211 
    let _run_target_args'_v4210 = v4212 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4213 : string = "$0.toString($1)"
    let v4214 : string = Fable.Core.RustInterop.emitRustExpr struct (v4134, v4150) v4213 
    let _run_target_args'_v4210 = v4214 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4215 : string = "$0.toString($1)"
    let v4216 : string = Fable.Core.RustInterop.emitRustExpr struct (v4134, v4150) v4215 
    let _run_target_args'_v4210 = v4216 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4217 : string = v4134.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4210 = v4217 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4218 : string = v4134.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4210 = v4218 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4220 : string = v4134.ToString v4150 
    let _run_target_args'_v4210 = v4220 
    #endif
#else
    let v4279 : string = v4134.ToString v4150 
    let _run_target_args'_v4210 = v4279 
    #endif
    let v4337 : string = _run_target_args'_v4210 
    let v4398 : string = $"{v4149}{v4337}"
    let v4400 : (System.Guid -> string) = _.ToString()
    let v4401 : string = v4400 v0
    let v4404 : int32 = v3893.Length
    let v4405 : int32 = v4398.Length
    let v4406 : int32 = v4404 + v4405
    let v4408 : (string -> int32) = String.length
    let v4409 : int32 = v4408 v4401
    let v4417 : int32 = v4406 |> int32 
    let v4430 : int32 = v4409 |> int32 
    let v4438 : int32 = v4430 - 1
    let v4440 : string = v4401.[int v4417..int v4438]
    let v4444 : string = $"{v3893}{v4398}{v4440}"
    (* run_target_args'
    let v4449 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4451 : System.Guid = v4444 |> System.Guid 
    let _run_target_args'_v4449 = v4451 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4455 : System.Guid = v4444 |> System.Guid 
    let _run_target_args'_v4449 = v4455 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4459 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4449 = v4459 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4463 : System.Guid = v4444 |> System.Guid 
    let _run_target_args'_v4449 = v4463 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4467 : System.Guid = v4444 |> System.Guid 
    let _run_target_args'_v4449 = v4467 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4471 : System.Guid = v4444 |> System.Guid 
    let _run_target_args'_v4449 = v4471 
    #endif
#else
    let v4475 : System.Guid = v4444 |> System.Guid 
    let _run_target_args'_v4449 = v4475 
    #endif
    let v4478 : System.Guid = _run_target_args'_v4449 
    let _run_target_args'_v599 = v4478 
    #endif
    let v4484 : System.Guid = _run_target_args'_v599 
    v4484
and method192 (v0 : string, v1 : string) : unit =
    let v2 : bool = method36(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method72(v0)
        ()
    let v5 : string option = method38(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method36(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method72(v9)
        ()
    let v15 : bool = method36(v1)
    let v26 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method43(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v26 then
        let v27 : bool = true
        method81(v27, v1)
    let v28 : bool = method36(v1)
    let v29 : bool = v28 = false
    if v29 then
        (* run_target_args'
        let v30 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v31 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        let v33 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v34 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v33 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v35 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method194 () : string =
    let v0 : string = "("
    v0
and method195 () : string =
    let v0 : string = " "
    v0
and method198 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "is_error"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v73 : string =
        if v8 then
            let v71 : string = "true"
            v71
        else
            let v72 : string = "false"
            v72
    let v75 : string = $"{v73}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "retry"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "result"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v220 : string = $"{v10}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v13, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v238 : string = ", "
    let v239 : string = $"{v238}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v13, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v256 : string = $"{v11}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v13, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v274 : string = " }"
    let v275 : string = $"{v274}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v13, v275)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v291 : string = v13.l0
    let v292 : int64 = v0.l0
    let v295 : string = " "
    let v296 : string = v6 + v295 
    let v300 : string = v296 + v7 
    let v305 : string = " #"
    let v306 : string = v300 + v305 
    let v310 : (int64 -> string) = _.ToString()
    let v311 : string = v310 v292
    let v315 : string = v306 + v311 
    let v319 : string = v315 + v295 
    let v324 : string = "common.retry_fn' / loop"
    let v325 : string = v319 + v324 
    let v330 : string = " / "
    let v331 : string = v325 + v330 
    let v335 : string = v331 + v291 
    method16(v335)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure2()
        let v23 : unit = (fun () -> v22 (); v21) ()
        let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
        let v62 : string = method8(v44, v45, v46, v47, v48, v49)
        let v63 : string = method12()
        let v64 : string = $"{v1}/{v0}"
        let v65 : string = method198(v44, v45, v46, v47, v48, v49, v62, v63, v4, v64, v2, v3)
        method17(v65)
and method197 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method91(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US44 =
        if v11 then
            US44_0(v9, v10)
        else
            US44_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US44_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US44_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v89 : unit = ()
        let v90 : (unit -> unit) = closure88(v0, v8, v23, v24, v22)
        let v91 : unit = (fun () -> v90 (); v89) ()
        let v153 : uint8 = v8 + 1uy
        method197(v0, v1, v2, v3, v4, v5, v6, v7, v153)
and method196 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method197(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method193 (v0 : US39, v1 : string, v2 : string, v3 : string, v4 : US13) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    (* run_target_args'
    let v23 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "cfg!(windows)"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let _run_target_args'_v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "cfg!(windows)"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let _run_target_args'_v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "cfg!(windows)"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let _run_target_args'_v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : US3 = US3_0
    let v31 : US4 = US4_4(v30)
    let v32 : string = $"platform.is_windows / target: {v31}"
    let v33 : bool = failwith<bool> v32
    let _run_target_args'_v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : US3 = US3_0
    let v35 : US4 = US4_5(v34)
    let v36 : string = $"platform.is_windows / target: {v35}"
    let v37 : bool = failwith<bool> v36
    let _run_target_args'_v23 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v39 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v40 : bool = v39 v38
    let _run_target_args'_v23 = v40 
    #endif
#else
    let v41 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v42 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v43 : bool = v42 v41
    let _run_target_args'_v23 = v43 
    #endif
    let v44 : bool = _run_target_args'_v23 
    let v52 : string =
        if v44 then
            let v50 : string = "_WINDOWS"
            v50
        else
            let v51 : string = "_LINUX"
            v51
    let v53 : string = $" --define {v52}"
    let v267 : string =
        match v0 with
        | US39_1 -> (* None *)
            let v265 : string = ""
            v265
        | US39_0(v54) -> (* Some *)
            let v56 : string = Unchecked.defaultof<_>
            let v60 : string = Unchecked.defaultof<_>
            let v65 : bool =
                match v54 with
                | US40_0(v63) -> (* Wasm *)
                    let v64 : bool = v56 = v63
                    v64
                | _ ->
                    false
            let v155 : US5 =
                if v65 then
                    let v66 : string = "Wasm"
                    US5_0(v66)
                else
                    (* run_target_args'
                    let v70 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v71 : string = method194()
                    let _run_target_args'_v70 = v71 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v72 : string = method194()
                    let _run_target_args'_v70 = v72 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v73 : string = method194()
                    let _run_target_args'_v70 = v73 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v74 : string = method195()
                    let _run_target_args'_v70 = v74 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v75 : string = method195()
                    let _run_target_args'_v70 = v75 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v76 : string = method195()
                    let _run_target_args'_v70 = v76 
                    #endif
#else
                    let v77 : string = method195()
                    let _run_target_args'_v70 = v77 
                    #endif
                    let v78 : string = _run_target_args'_v70 
                    let v83 : string = method13()
                    let v84 : Mut3 = {l0 = v83} : Mut3
                    let v87 : US40 = US40_0(v56)
                    let v88 : string = $"%A{v87}"
                    let v93 : string = $"{v88}"
                    let v101 : unit = ()
                    let v102 : (unit -> unit) = closure7(v84, v93)
                    let v103 : unit = (fun () -> v102 (); v101) ()
                    let v109 : string = v84.l0
                    let v116 : (string []) = v109.Split v78 
                    let v120 : string = v116.[int 0]
                    let v123 : string = method13()
                    let v124 : Mut3 = {l0 = v123} : Mut3
                    let v126 : string = $"%A{v54}"
                    let v130 : string = $"{v126}"
                    let v138 : unit = ()
                    let v139 : (unit -> unit) = closure7(v124, v130)
                    let v140 : unit = (fun () -> v139 (); v138) ()
                    let v146 : string = v124.l0
                    let v148 : bool = v146.StartsWith (v120, false, null)
                    if v148 then
                        let v151 : string = "Wasm"
                        US5_0(v151)
                    else
                        US5_1
            let v257 : US5 =
                match v155 with
                | US5_1 -> (* None *)
                    let v160 : bool =
                        match v54 with
                        | US40_1(v158) -> (* Contract *)
                            let v159 : bool = v60 = v158
                            v159
                        | _ ->
                            false
                    let v250 : US5 =
                        if v160 then
                            let v161 : string = "Contract"
                            US5_0(v161)
                        else
                            (* run_target_args'
                            let v165 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v166 : string = method194()
                            let _run_target_args'_v165 = v166 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v167 : string = method194()
                            let _run_target_args'_v165 = v167 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v168 : string = method194()
                            let _run_target_args'_v165 = v168 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v169 : string = method195()
                            let _run_target_args'_v165 = v169 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v170 : string = method195()
                            let _run_target_args'_v165 = v170 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v171 : string = method195()
                            let _run_target_args'_v165 = v171 
                            #endif
#else
                            let v172 : string = method195()
                            let _run_target_args'_v165 = v172 
                            #endif
                            let v173 : string = _run_target_args'_v165 
                            let v178 : string = method13()
                            let v179 : Mut3 = {l0 = v178} : Mut3
                            let v182 : US40 = US40_1(v60)
                            let v183 : string = $"%A{v182}"
                            let v188 : string = $"{v183}"
                            let v196 : unit = ()
                            let v197 : (unit -> unit) = closure7(v179, v188)
                            let v198 : unit = (fun () -> v197 (); v196) ()
                            let v204 : string = v179.l0
                            let v211 : (string []) = v204.Split v173 
                            let v215 : string = v211.[int 0]
                            let v218 : string = method13()
                            let v219 : Mut3 = {l0 = v218} : Mut3
                            let v221 : string = $"%A{v54}"
                            let v225 : string = $"{v221}"
                            let v233 : unit = ()
                            let v234 : (unit -> unit) = closure7(v219, v225)
                            let v235 : unit = (fun () -> v234 (); v233) ()
                            let v241 : string = v219.l0
                            let v243 : bool = v241.StartsWith (v215, false, null)
                            if v243 then
                                let v246 : string = "Contract"
                                US5_0(v246)
                            else
                                US5_1
                    match v250 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v251) -> (* Some *)
                        US5_0(v251)
                | US5_0(v156) -> (* Some *)
                    US5_0(v156)
            let v261 : string =
                match v257 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v258) -> (* Some *)
                    v258
            let v262 : (unit -> string) = v261.ToUpper
            let v263 : string = v262 ()
            let v264 : string = $" --define {v263}"
            v264
    let v268 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v53}{v267}"
    let v280 : Result<string, string> =
        match v4 with
        | US13_1(v274) -> (* Error *)
            let v276 : Result<string, string> = Error v274 
            v276
        | US13_0(v269) -> (* Ok *)
            let v271 : Result<string, string> = Ok v269 
            v271
    (* run_target_args'
    let v282 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v283 : string = "$0.ok()"
    let v284 : string option = Fable.Core.RustInterop.emitRustExpr v280 v283 
    let _run_target_args'_v282 = v284 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v285 : string = "$0.ok()"
    let v286 : string option = Fable.Core.RustInterop.emitRustExpr v280 v285 
    let _run_target_args'_v282 = v286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : string = "$0.ok()"
    let v288 : string option = Fable.Core.RustInterop.emitRustExpr v280 v287 
    let _run_target_args'_v282 = v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v289 : string option = match v280 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v282 = v289 
    #endif
#if FABLE_COMPILER_PYTHON
    let v290 : string option = match v280 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v282 = v290 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v291 : string option = match v280 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v282 = v291 
    #endif
#else
    let v292 : string option = match v280 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v282 = v292 
    #endif
    let v293 : string option = _run_target_args'_v282 
    let v296 : uint8 = 3uy
    let v297 : bool = true
    method196(v296, v268, v6, v9, v11, v15, v297, v293)
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "dotnet_fable_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_rust / dotnet fable error"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method199(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method200 () : (std_string_String -> bool) =
    closure90()
and method201 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method202 () : string =
    let v0 : string = "("
    v0
and method203 () : string =
    let v0 : string = "("
    v0
and method205 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v39 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v40 
    let _run_target_args'_v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v42 
    let _run_target_args'_v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v44 
    let _run_target_args'_v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v55 
    #endif
#else
    let v59 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v59 
    #endif
    let v62 : std_string_String = _run_target_args'_v39 
    let v68 : string = "true; let _capture_move = (move || { //"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "Box::new($0)"
    let v71 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v62 v70 
    let v72 : string = "Box::leak($0)"
    let v73 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "$0"
    let v75 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = $"$0.captures_iter(v73)"
    let v77 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "true; let _regex_captures : Vec<_> = v77.map(|x| { //"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = $"x"
    let v81 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "Box::new($0)"
    let v83 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "Box::leak($0)"
    let v85 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = $"$0.capture_names()"
    let v87 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v87.map(|x| { //"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "x.unwrap_or(\"\").to_string().into()"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "$0.clone()"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = $"v85.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v91 v94 
    let v97 : (string * string) = v93, v95 
    let v100 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v102 : string = "_regex_captures"
    let v103 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "true; $0 }).collect::<Vec<_>>()"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "_regex_captures"
    let v107 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : string = "true; $0 })()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_capture_move"
    let v111 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v110 
    v111
and closure91 () (v0 : std_collections_HashMap<string, string>) : US45 =
    US45_0(v0)
and method206 () : (std_collections_HashMap<string, string> -> US45) =
    closure91()
and method207 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method12()
        let v63 : string = $"{v0}/{3uy}"
        let v64 : string = method198(v43, v44, v45, v46, v47, v48, v61, v62, v3, v63, v1, v2)
        method17(v64)
and method204 (v0 : US13, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v7 : (struct (string * string) []) = [||]
    let v9 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v13 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v17 : string option = None
    let v20 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v32 : Result<string, string> =
        match v0 with
        | US13_1(v26) -> (* Error *)
            let v28 : Result<string, string> = Error v26 
            v28
        | US13_0(v21) -> (* Ok *)
            let v23 : Result<string, string> = Ok v21 
            v23
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.ok()"
    let v36 : string option = Fable.Core.RustInterop.emitRustExpr v32 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.ok()"
    let v38 : string option = Fable.Core.RustInterop.emitRustExpr v32 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.ok()"
    let v40 : string option = Fable.Core.RustInterop.emitRustExpr v32 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : string option = _run_target_args'_v34 
    let v48 : bool = true
    let struct (v49 : int32, v50 : string) = method91(v20, v4, v7, v9, v13, v48, v45)
    let v53 : string = "failed to load manifest for workspace member"
    let v54 : bool = v50.Contains v53 
    let v57 : bool = v54 = false
    let v274 : US44 =
        if v57 then
            let v58 : bool = v49 = 0
            if v58 then
                US44_0(v49, v50)
            else
                US44_1(v49, v50)
        else
            let v62 : string = $"regex::Regex::new(&$0)"
            let v63 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v64 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v63 v62 
            (* run_target_args'
            let v66 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v67 : string = "$0.unwrap()"
            let v68 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v67 
            let _run_target_args'_v66 = v68 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v69 : string = "$0.unwrap()"
            let v70 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v69 
            let _run_target_args'_v66 = v70 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v71 : string = "$0.unwrap()"
            let v72 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v71 
            let _run_target_args'_v66 = v72 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v73 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v73 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v75 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v75 
            #endif
#else
            let v76 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v76 
            #endif
            let v77 : regex_Regex = _run_target_args'_v66 
            let v80 : Vec<std_collections_HashMap<string, string>> = method205(v50, v77)
            let v81 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v82 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v80 v81 
            let v83 : std_collections_HashMap<string, string> option = v82 |> Array.tryItem 0 
            let v86 : (std_collections_HashMap<string, string> -> US45) = method206()
            let v87 : US45 option = v83 |> Option.map v86 
            let v107 : US45 = US45_1
            let v108 : US45 = v87 |> Option.defaultValue v107 
            let v147 : US46 =
                match v108 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v112) -> (* Some *)
                    let v113 : string = method207()
                    let v114 : string = "std::collections::HashMap::get(&$0, &v113).map(|x| x).cloned()"
                    let v115 : string option = Fable.Core.RustInterop.emitRustExpr v112 v114 
                    let v118 : (string -> US5) = method6()
                    let v119 : US5 option = v115 |> Option.map v118 
                    let v139 : US5 = US5_1
                    let v140 : US5 = v119 |> Option.defaultValue v139 
                    US46_0(v140)
            let v154 : US5 =
                match v147 with
                | US46_0(v148) -> (* Some *)
                    match v148 with
                    | US5_0(v149) -> (* Some *)
                        US5_0(v149)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v154 with
            | US5_1 -> (* None *)
                US44_1(v49, v50)
            | US5_0(v156) -> (* Some *)
                let v157 : bool = method35(v156)
                let v158 : bool = v157 = false
                if v158 then
                    let v159 : string option = method38(v156)
                    let v162 : string = ""
                    let v163 : string = v159 |> Option.defaultValue v162 
                    let v166 : System.IDisposable = method72(v163)
                    (* run_target_args'
                    let v173 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v174 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v174 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v175 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v175 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v177 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v173 = v177 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v180 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v180 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v182 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v182 
                    #endif
#else
                    let v183 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v173 = v183 
                    #endif
                    let v184 : System.DateTime = _run_target_args'_v173 
                    let v190 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v191 : System.Guid = v190 ()
                    let v194 : System.Guid = method187(v191, v184)
                    let v196 : (System.Guid -> string) = _.ToString()
                    let v197 : string = v196 v194
                    let v200 : string = $"[package]"
                    let v201 : string = $"name = \"spiral_{v197}\""
                    let v204 : string = "\n"
                    let v205 : string = v200 + v204 
                    let v209 : string = v205 + v201 
                    let v212 : string = $"version = \"0.0.1\""
                    let v214 : string = v209 + v204 
                    let v218 : string = v214 + v212 
                    let v221 : string = $"edition = \"2021\""
                    let v223 : string = v218 + v204 
                    let v227 : string = v223 + v221 
                    let v230 : string = $""
                    let v232 : string = v227 + v204 
                    let v236 : string = v232 + v230 
                    let v239 : string = $"[[bin]]"
                    let v241 : string = v236 + v204 
                    let v245 : string = v241 + v239 
                    let v248 : string = $"name = \"spiral_{v197}\""
                    let v250 : string = v245 + v204 
                    let v254 : string = v250 + v248 
                    let v257 : string = $"path = \"spiral.rs\""
                    let v259 : string = v254 + v204 
                    let v263 : string = v259 + v257 
                    (* run_target_args'
                    let v266 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v267 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v156, v263) v267 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v156, v263)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v268 : bool = v49 = 0
                if v268 then
                    US44_0(v49, v50)
                else
                    US44_1(v49, v50)
    let struct (v282 : bool, v283 : int32, v284 : string) =
        match v274 with
        | US44_1(v277, v278) -> (* Error *)
            struct (true, v277, v278)
        | US44_0(v275, v276) -> (* Ok *)
            struct (false, v275, v276)
    let v285 : bool = v282 = false
    let v287 : bool =
        if v285 then
            true
        else
            let v286 : bool = v2 >= 3uy
            v286
    if v287 then
        struct (v283, v284)
    else
        let v349 : unit = ()
        let v350 : (unit -> unit) = closure92(v2, v283, v284, v282)
        let v351 : unit = (fun () -> v350 (); v349) ()
        let v413 : uint8 = v2 + 1uy
        method204(v0, v1, v413)
and method208 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "cargo_fmt_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_rust / cargo fmt error"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method208(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and method209 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method210 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method13()
    let v14 : Mut3 = {l0 = v13} : Mut3
    let v17 : string = "{ "
    let v18 : string = $"{v17}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v14, v18)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v36 : string = "exit_code"
    let v37 : string = $"{v36}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v14, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v55 : string = " = "
    let v56 : string = $"{v55}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v14, v56)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v76 : string = $"{v8}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v14, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v94 : string = "; "
    let v95 : string = $"{v94}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v14, v95)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v14, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v131 : string = $"{v55}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v14, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v14, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v165 : string = $"{v94}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v14, v165)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v183 : string = "external_command"
    let v184 : string = $"{v183}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v14, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v201 : string = $"{v55}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v14, v201)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v218 : string = $"{v10}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v14, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v235 : string = $"{v94}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v14, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v253 : string = "cleanup"
    let v254 : string = $"{v253}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v14, v254)
    let v264 : unit = (fun () -> v263 (); v262) ()
    let v271 : string = $"{v55}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v14, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v289 : string =
        if v11 then
            let v287 : string = "true"
            v287
        else
            let v288 : string = "false"
            v288
    let v291 : string = $"{v289}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v14, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v308 : string = $"{v94}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v14, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v326 : string = "cargo_result"
    let v327 : string = $"{v326}"
    let v335 : unit = ()
    let v336 : (unit -> unit) = closure7(v14, v327)
    let v337 : unit = (fun () -> v336 (); v335) ()
    let v344 : string = $"{v55}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v14, v344)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v361 : string = $"{v12}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v14, v361)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v379 : string = " }"
    let v380 : string = $"{v379}"
    let v388 : unit = ()
    let v389 : (unit -> unit) = closure7(v14, v380)
    let v390 : unit = (fun () -> v389 (); v388) ()
    let v396 : string = v14.l0
    let v397 : int64 = v0.l0
    let v400 : string = " "
    let v401 : string = v6 + v400 
    let v405 : string = v401 + v7 
    let v410 : string = " #"
    let v411 : string = v405 + v410 
    let v415 : (int64 -> string) = _.ToString()
    let v416 : string = v415 v397
    let v420 : string = v411 + v416 
    let v424 : string = v420 + v400 
    let v429 : string = "spiral.process_rust / error"
    let v430 : string = v424 + v429 
    let v435 : string = " / "
    let v436 : string = v430 + v435 
    let v440 : string = v436 + v396 
    method16(v440)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure2()
        let v23 : unit = (fun () -> v22 (); v21) ()
        let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
        let v62 : string = method8(v44, v45, v46, v47, v48, v49)
        let v63 : string = method76()
        let v64 : string = method210(v44, v45, v46, v47, v48, v49, v62, v63, v3, v1, v4, v0, v2)
        method17(v64)
and closure99 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v12 : (string -> bool) = closure99()
    let v13 : (string []) = v9 |> Array.skipWhile v12 
    let v14 : (string []) = v13 |> Array.skip 2 
    let v16 : string seq = v14 |> Seq.ofArray
    let v20 : string = method69()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method211 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v111 : string = $"{v104}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v13, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = "; "
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v148 : string = "new_code_path"
    let v149 : string = $"{v148}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v13, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v54}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v13, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v183 : string = $"{v9}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v129}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v218 : string = "external_command"
    let v219 : string = $"{v218}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v13, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v236 : string = $"{v54}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v13, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v253 : string = $"{v10}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v129}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v288 : string = "cargo_result"
    let v289 : string = $"{v288}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v13, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v306 : string = $"{v54}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v323 : string = $"{v11}"
    let v331 : unit = ()
    let v332 : (unit -> unit) = closure7(v13, v323)
    let v333 : unit = (fun () -> v332 (); v331) ()
    let v341 : string = " }"
    let v342 : string = $"{v341}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v13, v342)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v358 : string = v13.l0
    let v359 : int64 = v0.l0
    let v362 : string = " "
    let v363 : string = v6 + v362 
    let v367 : string = v363 + v7 
    let v372 : string = " #"
    let v373 : string = v367 + v372 
    let v377 : (int64 -> string) = _.ToString()
    let v378 : string = v377 v359
    let v382 : string = v373 + v378 
    let v386 : string = v382 + v362 
    let v391 : string = "spiral.process_rust / Exception"
    let v392 : string = v386 + v391 
    let v397 : string = " / "
    let v398 : string = v392 + v397 
    let v402 : string = v398 + v358 
    method16(v402)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method211(v43, v44, v45, v46, v47, v48, v61, v62, v3, v0, v2, v1)
        method17(v63)
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method212 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method13()
    let v14 : Mut3 = {l0 = v13} : Mut3
    let v17 : string = "{ "
    let v18 : string = $"{v17}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v14, v18)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v36 : string = "exit_code"
    let v37 : string = $"{v36}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v14, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v55 : string = " = "
    let v56 : string = $"{v55}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v14, v56)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v76 : string = $"{v8}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v14, v76)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v94 : string = "; "
    let v95 : string = $"{v94}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v14, v95)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v14, v114)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v131 : string = $"{v55}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v14, v131)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v148 : string = $"{v9}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v14, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v165 : string = $"{v94}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v14, v165)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v183 : string = "cargo_result"
    let v184 : string = $"{v183}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v14, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v201 : string = $"{v55}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v14, v201)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v218 : string = $"{v10}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v14, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v235 : string = $"{v94}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v14, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v253 : string = "cleanup"
    let v254 : string = $"{v253}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v14, v254)
    let v264 : unit = (fun () -> v263 (); v262) ()
    let v271 : string = $"{v55}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v14, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v289 : string =
        if v11 then
            let v287 : string = "true"
            v287
        else
            let v288 : string = "false"
            v288
    let v291 : string = $"{v289}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v14, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v308 : string = $"{v94}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v14, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v326 : string = "spiral_wasm_result"
    let v327 : string = $"{v326}"
    let v335 : unit = ()
    let v336 : (unit -> unit) = closure7(v14, v327)
    let v337 : unit = (fun () -> v336 (); v335) ()
    let v344 : string = $"{v55}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v14, v344)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v361 : string = $"{v12}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v14, v361)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v379 : string = " }"
    let v380 : string = $"{v379}"
    let v388 : unit = ()
    let v389 : (unit -> unit) = closure7(v14, v380)
    let v390 : unit = (fun () -> v389 (); v388) ()
    let v396 : string = v14.l0
    let v397 : int64 = v0.l0
    let v400 : string = " "
    let v401 : string = v6 + v400 
    let v405 : string = v401 + v7 
    let v410 : string = " #"
    let v411 : string = v405 + v410 
    let v415 : (int64 -> string) = _.ToString()
    let v416 : string = v415 v397
    let v420 : string = v411 + v416 
    let v424 : string = v420 + v400 
    let v429 : string = "spiral.process_rust / wasm error"
    let v430 : string = v424 + v429 
    let v435 : string = " / "
    let v436 : string = v430 + v435 
    let v440 : string = v436 + v396 
    method16(v440)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure2()
        let v23 : unit = (fun () -> v22 (); v21) ()
        let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
        let v62 : string = method8(v44, v45, v46, v47, v48, v49)
        let v63 : string = method76()
        let v64 : string = $"\n{v3}"
        let v65 : string = method212(v44, v45, v46, v47, v48, v49, v62, v63, v4, v1, v2, v0, v64)
        method17(v65)
and method213 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method13()
    let v15 : Mut3 = {l0 = v14} : Mut3
    let v18 : string = "{ "
    let v19 : string = $"{v18}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v15, v19)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v37 : string = "exit_code"
    let v38 : string = $"{v37}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v15, v38)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v56 : string = " = "
    let v57 : string = $"{v56}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v15, v57)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v77 : string = $"{v8}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v15, v77)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v15, v96)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v114 : string = "new_code_path"
    let v115 : string = $"{v114}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v15, v115)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v132 : string = $"{v56}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v15, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v149 : string = $"{v9}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v15, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v95}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v15, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v184 : string = "wasm_path"
    let v185 : string = $"{v184}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v15, v185)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v202 : string = $"{v56}"
    let v210 : unit = ()
    let v211 : (unit -> unit) = closure7(v15, v202)
    let v212 : unit = (fun () -> v211 (); v210) ()
    let v219 : string = $"{v10}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v15, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v236 : string = $"{v95}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v15, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v254 : string = "command"
    let v255 : string = $"{v254}"
    let v263 : unit = ()
    let v264 : (unit -> unit) = closure7(v15, v255)
    let v265 : unit = (fun () -> v264 (); v263) ()
    let v272 : string = $"{v56}"
    let v280 : unit = ()
    let v281 : (unit -> unit) = closure7(v15, v272)
    let v282 : unit = (fun () -> v281 (); v280) ()
    let v289 : string = $"{v11}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v15, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v306 : string = $"{v95}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v15, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v324 : string = "cleanup"
    let v325 : string = $"{v324}"
    let v333 : unit = ()
    let v334 : (unit -> unit) = closure7(v15, v325)
    let v335 : unit = (fun () -> v334 (); v333) ()
    let v342 : string = $"{v56}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v15, v342)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v360 : string =
        if v12 then
            let v358 : string = "true"
            v358
        else
            let v359 : string = "false"
            v359
    let v362 : string = $"{v360}"
    let v370 : unit = ()
    let v371 : (unit -> unit) = closure7(v15, v362)
    let v372 : unit = (fun () -> v371 (); v370) ()
    let v379 : string = $"{v95}"
    let v387 : unit = ()
    let v388 : (unit -> unit) = closure7(v15, v379)
    let v389 : unit = (fun () -> v388 (); v387) ()
    let v397 : string = "cargo_result"
    let v398 : string = $"{v397}"
    let v406 : unit = ()
    let v407 : (unit -> unit) = closure7(v15, v398)
    let v408 : unit = (fun () -> v407 (); v406) ()
    let v415 : string = $"{v56}"
    let v423 : unit = ()
    let v424 : (unit -> unit) = closure7(v15, v415)
    let v425 : unit = (fun () -> v424 (); v423) ()
    let v432 : string = $"{v13}"
    let v440 : unit = ()
    let v441 : (unit -> unit) = closure7(v15, v432)
    let v442 : unit = (fun () -> v441 (); v440) ()
    let v450 : string = " }"
    let v451 : string = $"{v450}"
    let v459 : unit = ()
    let v460 : (unit -> unit) = closure7(v15, v451)
    let v461 : unit = (fun () -> v460 (); v459) ()
    let v467 : string = v15.l0
    let v468 : int64 = v0.l0
    let v471 : string = " "
    let v472 : string = v6 + v471 
    let v476 : string = v472 + v7 
    let v481 : string = " #"
    let v482 : string = v476 + v481 
    let v486 : (int64 -> string) = _.ToString()
    let v487 : string = v486 v468
    let v491 : string = v482 + v487 
    let v495 : string = v491 + v471 
    let v500 : string = "spiral.process_rust / cargo error"
    let v501 : string = v495 + v500 
    let v506 : string = " / "
    let v507 : string = v501 + v506 
    let v511 : string = v507 + v467 
    method16(v511)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v22 : unit = ()
        let v23 : (unit -> unit) = closure2()
        let v24 : unit = (fun () -> v23 (); v22) ()
        let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : Mut4, v50 : int64 option) = TraceState.trace_state.Value
        let v63 : string = method8(v45, v46, v47, v48, v49, v50)
        let v64 : string = method76()
        let v65 : string = $"\n{v2}"
        let v66 : string = method213(v45, v46, v47, v48, v49, v50, v63, v64, v3, v1, v4, v5, v0, v65)
        method17(v66)
and method214 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : string = method13()
    let v20 : Mut3 = {l0 = v19} : Mut3
    let v23 : string = "{ "
    let v24 : string = $"{v23}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v20, v24)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v42 : string = "new_code_path"
    let v43 : string = $"{v42}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v20, v43)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v61 : string = " = "
    let v62 : string = $"{v61}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v20, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v79 : string = $"{v8}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v20, v79)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v97 : string = "; "
    let v98 : string = $"{v97}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v20, v98)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v116 : string = "cleanup"
    let v117 : string = $"{v116}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v20, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v61}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v20, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v157 : UH5 = UH5_0
    let v158 : UH5 = UH5_1(v17, v18, v157)
    let v159 : UH5 = UH5_1(v15, v16, v158)
    let v160 : UH5 = UH5_1(v13, v14, v159)
    let v161 : UH5 = UH5_1(v11, v12, v160)
    let v162 : UH5 = UH5_1(v9, v10, v161)
    let v163 : string = $"%A{v162}"
    let v173 : string = $"{v163}"
    let v181 : unit = ()
    let v182 : (unit -> unit) = closure7(v20, v173)
    let v183 : unit = (fun () -> v182 (); v181) ()
    let v191 : string = " }"
    let v192 : string = $"{v191}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v20, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v208 : string = v20.l0
    let v209 : int64 = v0.l0
    let v212 : string = " "
    let v213 : string = v6 + v212 
    let v217 : string = v213 + v7 
    let v222 : string = " #"
    let v223 : string = v217 + v222 
    let v227 : (int64 -> string) = _.ToString()
    let v228 : string = v227 v209
    let v232 : string = v223 + v228 
    let v236 : string = v232 + v212 
    let v241 : string = "spiral.process_rust / cleanup"
    let v242 : string = v236 + v241 
    let v247 : string = " / "
    let v248 : string = v242 + v247 
    let v252 : string = v248 + v208 
    method16(v252)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v27 : unit = ()
        let v28 : (unit -> unit) = closure2()
        let v29 : unit = (fun () -> v28 (); v27) ()
        let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
        let v68 : string = method8(v50, v51, v52, v53, v54, v55)
        let v69 : string = method78()
        let v70 : string = method214(v50, v51, v52, v53, v54, v55, v68, v69, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method17(v70)
and closure105 () () : US47 =
    US47_0
and method216 () : (unit -> US47) =
    closure105()
and closure106 () (v0 : string) : US47 =
    US47_1(v0)
and method217 () : (string -> US47) =
    closure106()
and method218 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "error'"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "file_system.file_delete"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure107 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method76()
        let v60 : string = method218(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method215 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method45()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US47) = method216()
        let v24 : (string -> US47) = method217()
        let v26 : US47 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US47_1(v29) -> (* Error *)
            let v90 : unit = ()
            let v91 : (unit -> unit) = closure107(v29)
            let v92 : unit = (fun () -> v91 (); v90) ()
            ()
        | US47_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v153 : (string -> unit) = System.IO.File.Delete
        v153 v1
        #endif
        // run_target_args' is_unit
        method215(v3)
    | UH5_0 -> (* Nil *)
        ()
and method219 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US48 =
    US48_0(v0)
and method220 () : (std_fs_FileType -> US48) =
    closure109()
and closure110 () (v0 : std_string_String) : US48 =
    US48_1(v0)
and method221 () : (std_string_String -> US48) =
    closure110()
and method222 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v179 : US5 = US5_1
    let v180 : US5 = v159 |> Option.defaultValue v179 
    let v187 : string =
        match v180 with
        | US5_1 -> (* None *)
            let v185 : string = ""
            v185
        | US5_0(v184) -> (* Some *)
            v184
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v189 : string = null |> unbox<string>
    let _run_target_args'_v5 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = null |> unbox<string>
    let _run_target_args'_v5 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v197 : string = null |> unbox<string>
    let _run_target_args'_v5 = v197 
    #endif
#if FABLE_COMPILER_PYTHON
    let v201 : string = null |> unbox<string>
    let _run_target_args'_v5 = v201 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : (string -> string) = System.IO.Path.GetDirectoryName
    let v205 : string = v204 v0
    let _run_target_args'_v5 = v205 
    #endif
#else
    let v206 : (string -> string) = System.IO.Path.GetDirectoryName
    let v207 : string = v206 v0
    let _run_target_args'_v5 = v207 
    #endif
    let v208 : string = _run_target_args'_v5 
    v208
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method73()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US48) = method220()
    let v37 : (std_string_String -> US48) = method221()
    let v39 : US48 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v284 : US49 =
        match v39 with
        | US48_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US49_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v86 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v87 : string = "format!(\"{}\", $0)"
                let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v87 
                let _run_target_args'_v86 = v88 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v89 : string = "format!(\"{}\", $0)"
                let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v89 
                let _run_target_args'_v86 = v90 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v91 : string = "format!(\"{}\", $0)"
                let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v91 
                let _run_target_args'_v86 = v92 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v94 
                #endif
#if FABLE_COMPILER_PYTHON
                let v98 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v98 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v102 
                #endif
#else
                let v106 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v106 
                #endif
                let v109 : std_string_String = _run_target_args'_v86 
                let v115 : string = "fable_library_rust::String_::fromString($0)"
                let v116 : string = Fable.Core.RustInterop.emitRustExpr v109 v115 
                let v117 : string = method222(v116)
                let v119 : bool = v117.StartsWith (v0, false, null)
                let v122 : bool = v119 = false
                if v122 then
                    US49_1
                else
                    let v124 : string option = method38(v116)
                    let v127 : (string -> US5) = method6()
                    let v128 : US5 option = v124 |> Option.map v127 
                    let v148 : US5 = US5_1
                    let v149 : US5 = v128 |> Option.defaultValue v148 
                    match v149 with
                    | US5_0(v153) -> (* Some *)
                        let v155 : bool = v153.Contains v0 
                        let v158 : bool = v155 = false
                        if v158 then
                            US49_2
                        else
                            US49_1
                    | _ ->
                        US49_1
        | _ ->
            let v166 : string = "async_walkdir::DirEntry::path(&$0)"
            let v167 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v166 
            (* run_target_args'
            let v172 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v173 : string = "$0.display()"
            let v174 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v167 v173 
            let _run_target_args'_v172 = v174 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v175 : string = "$0.display()"
            let v176 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v167 v175 
            let _run_target_args'_v172 = v176 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v177 : string = "$0.display()"
            let v178 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v167 v177 
            let _run_target_args'_v172 = v178 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v180 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v180 
            #endif
#if FABLE_COMPILER_PYTHON
            let v184 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v184 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v188 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v188 
            #endif
#else
            let v192 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v192 
            #endif
            let v195 : std_path_Display = _run_target_args'_v172 
            (* run_target_args'
            let v205 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v206 : string = "format!(\"{}\", $0)"
            let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v195 v206 
            let _run_target_args'_v205 = v207 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v208 : string = "format!(\"{}\", $0)"
            let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v195 v208 
            let _run_target_args'_v205 = v209 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v210 : string = "format!(\"{}\", $0)"
            let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v195 v210 
            let _run_target_args'_v205 = v211 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v213 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v213 
            #endif
#if FABLE_COMPILER_PYTHON
            let v217 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v217 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v221 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v221 
            #endif
#else
            let v225 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v225 
            #endif
            let v228 : std_string_String = _run_target_args'_v205 
            let v234 : string = "fable_library_rust::String_::fromString($0)"
            let v235 : string = Fable.Core.RustInterop.emitRustExpr v228 v234 
            let v236 : string = method222(v235)
            let v238 : bool = v236.StartsWith (v0, false, null)
            let v241 : bool = v238 = false
            if v241 then
                US49_1
            else
                let v243 : string option = method38(v235)
                let v246 : (string -> US5) = method6()
                let v247 : US5 option = v243 |> Option.map v246 
                let v267 : US5 = US5_1
                let v268 : US5 = v247 |> Option.defaultValue v267 
                match v268 with
                | US5_0(v272) -> (* Some *)
                    let v274 : bool = v272.Contains v0 
                    let v277 : bool = v274 = false
                    if v277 then
                        US49_2
                    else
                        US49_1
                | _ ->
                    US49_1
    let v285 : string = ""
    let v286 : string = "}"
    let v287 : string = v285 + v286 
    let x = v284 //
    let v288 : _ = x
    let v289 : unit = ()
    (* run_target_args'
    let v290 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v291 : string = $"true; let _fix_closure_v289 = $0"
    let v292 : bool = Fable.Core.RustInterop.emitRustExpr v288 v291 
    let _run_target_args'_v290 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v293 : string = $"true; let _fix_closure_v289 = $0"
    let v294 : bool = Fable.Core.RustInterop.emitRustExpr v288 v293 
    let _run_target_args'_v290 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v295 : string = $"true; let _fix_closure_v289 = $0"
    let v296 : bool = Fable.Core.RustInterop.emitRustExpr v288 v295 
    let _run_target_args'_v290 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v290 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v290 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v290 = false 
    #endif
#else
    let _run_target_args'_v290 = false 
    #endif
    let v297 : bool = _run_target_args'_v290 
    let v299 : string = $"true; _fix_closure_v289 " + v287 + "); " + v285 + " // rust.fix_closure'"
    let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
    let v301 : string = "__future_init"
    let v302 : _ = Fable.Core.RustInterop.emitRustExpr () v301 
    let v303 : string = "v302"
    let v304 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US49>>, Send<Dyn<std_future_Future<US49>>>>>> = Fable.Core.RustInterop.emitRustExpr () v303 
    let v305 : string = "v304.await"
    let v306 : US49 = Fable.Core.RustInterop.emitRustExpr () v305 
    let v315 : async_walkdir_Filtering =
        match v306 with
        | US49_2 -> (* Continue *)
            let v311 : string = "async_walkdir::Filtering::Continue"
            let v312 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v311 
            v312
        | US49_0 -> (* Ignore *)
            let v307 : string = "async_walkdir::Filtering::Ignore"
            let v308 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v307 
            v308
        | US49_1 -> (* IgnoreDir *)
            let v309 : string = "async_walkdir::Filtering::IgnoreDir"
            let v310 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v309 
            v310
    let v316 : string = v285 + v286 
    let x = v315 //
    let v317 : _ = x
    let v318 : unit = ()
    (* run_target_args'
    let v319 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v320 : string = $"true; let _fix_closure_v318 = $0"
    let v321 : bool = Fable.Core.RustInterop.emitRustExpr v317 v320 
    let _run_target_args'_v319 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v322 : string = $"true; let _fix_closure_v318 = $0"
    let v323 : bool = Fable.Core.RustInterop.emitRustExpr v317 v322 
    let _run_target_args'_v319 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : string = $"true; let _fix_closure_v318 = $0"
    let v325 : bool = Fable.Core.RustInterop.emitRustExpr v317 v324 
    let _run_target_args'_v319 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v319 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v319 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v319 = false 
    #endif
#else
    let _run_target_args'_v319 = false 
    #endif
    let v326 : bool = _run_target_args'_v319 
    let v328 : string = $"true; _fix_closure_v318 " + v316 + "); " + v285 + " // rust.fix_closure'"
    let v329 : bool = Fable.Core.RustInterop.emitRustExpr () v328 
    let v330 : string = "__future_init"
    let v331 : _ = Fable.Core.RustInterop.emitRustExpr () v330 
    let v332 : string = "v331"
    let v333 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v332 
    v333
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method224 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US50 =
    US50_0(v0)
and method225 () : (async_walkdir_DirEntry -> US50) =
    closure113()
and closure114 () (v0 : std_string_String) : US50 =
    US50_1(v0)
and method226 () : (std_string_String -> US50) =
    closure114()
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "error"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    (* run_target_args'
    let v72 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v72 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v72 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "format!(\"{:#?}\", $0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _run_target_args'_v72 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : string = $"%A{v8}"
    let _run_target_args'_v72 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : string = $"%A{v8}"
    let _run_target_args'_v72 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v94 : string = $"%A{v8}"
    let _run_target_args'_v72 = v94 
    #endif
#else
    let v98 : string = $"%A{v8}"
    let _run_target_args'_v72 = v98 
    #endif
    let v101 : string = _run_target_args'_v72 
    let v108 : string = $"{v101}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v10, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v126 : string = " }"
    let v127 : string = $"{v126}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v10, v127)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v143 : string = v10.l0
    let v144 : int64 = v0.l0
    let v147 : string = " "
    let v148 : string = v6 + v147 
    let v152 : string = v148 + v7 
    let v157 : string = " #"
    let v158 : string = v152 + v157 
    let v162 : (int64 -> string) = _.ToString()
    let v163 : string = v162 v144
    let v167 : string = v158 + v163 
    let v171 : string = v167 + v147 
    let v176 : string = "spiral.process_typescript / stream_filter_map"
    let v177 : string = v171 + v176 
    let v182 : string = " / "
    let v183 : string = v177 + v182 
    let v187 : string = v183 + v143 
    method16(v187)
and closure115 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method76()
        let v60 : string = method227(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method224()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US50) = method225()
    let v19 : (std_string_String -> US50) = method226()
    let v21 : US50 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v319 : US51 =
        match v21 with
        | US50_1(v193) -> (* Error *)
            let v254 : unit = ()
            let v255 : (unit -> unit) = closure115(v193)
            let v256 : unit = (fun () -> v255 (); v254) ()
            US51_1
        | US50_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v64 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v65 
            let _run_target_args'_v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "format!(\"{}\", $0)"
            let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v67 
            let _run_target_args'_v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "format!(\"{}\", $0)"
            let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v69 
            let _run_target_args'_v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v76 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v76 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v80 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v80 
            #endif
#else
            let v84 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v84 
            #endif
            let v87 : std_string_String = _run_target_args'_v64 
            let v93 : string = "fable_library_rust::String_::fromString($0)"
            let v94 : string = Fable.Core.RustInterop.emitRustExpr v87 v93 
            let v95 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v96 : string = $"regex::Regex::new(&$0)"
            let v97 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v95 v96 
            (* run_target_args'
            let v99 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v100 : string = "$0.unwrap()"
            let v101 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v100 
            let _run_target_args'_v99 = v101 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v102 : string = "$0.unwrap()"
            let v103 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v102 
            let _run_target_args'_v99 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : string = "$0.unwrap()"
            let v105 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v104 
            let _run_target_args'_v99 = v105 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v106 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v106 
            #endif
#if FABLE_COMPILER_PYTHON
            let v107 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v107 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v108 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v108 
            #endif
#else
            let v109 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v109 
            #endif
            let v110 : regex_Regex = _run_target_args'_v99 
            let v113 : Vec<std_collections_HashMap<string, string>> = method205(v94, v110)
            let v114 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v115 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : std_collections_HashMap<string, string> option = v115 |> Array.tryItem 0 
            let v119 : (std_collections_HashMap<string, string> -> US45) = method206()
            let v120 : US45 option = v116 |> Option.map v119 
            let v140 : US45 = US45_1
            let v141 : US45 = v120 |> Option.defaultValue v140 
            let v180 : US46 =
                match v141 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v145) -> (* Some *)
                    let v146 : string = method207()
                    let v147 : string = "std::collections::HashMap::get(&$0, &v146).map(|x| x).cloned()"
                    let v148 : string option = Fable.Core.RustInterop.emitRustExpr v145 v147 
                    let v151 : (string -> US5) = method6()
                    let v152 : US5 option = v148 |> Option.map v151 
                    let v172 : US5 = US5_1
                    let v173 : US5 = v152 |> Option.defaultValue v172 
                    US46_0(v173)
            let v187 : US5 =
                match v180 with
                | US46_0(v181) -> (* Some *)
                    match v181 with
                    | US5_0(v182) -> (* Some *)
                        US5_0(v182)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v187 with
            | US5_1 -> (* None *)
                US51_1
            | US5_0(v188) -> (* Some *)
                US51_0(v94, v188)
    match v319 with
    | US51_1 -> (* None *)
        let v327 : struct (string * string) option = None
        v327
    | US51_0(v320, v321) -> (* Some *)
        let v323 : struct (string * string) option = Some struct (v320, v321) 
        v323
and method223 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US51 =
    US51_0(v0, v1)
and method228 () : (struct (string * string) -> US51) =
    closure117()
and method229 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US51) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "version"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"%A{v8}"
    let v73 : string = $"{v69}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v10, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = " }"
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v108 : string = v10.l0
    let v109 : int64 = v0.l0
    let v112 : string = " "
    let v113 : string = v6 + v112 
    let v117 : string = v113 + v7 
    let v122 : string = " #"
    let v123 : string = v117 + v122 
    let v127 : (int64 -> string) = _.ToString()
    let v128 : string = v127 v109
    let v132 : string = v123 + v128 
    let v136 : string = v132 + v112 
    let v141 : string = "spiral.process_typescript"
    let v142 : string = v136 + v141 
    let v147 : string = " / "
    let v148 : string = v142 + v147 
    let v152 : string = v148 + v108 
    method16(v152)
and closure118 (v0 : US51) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method229(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method230 (v0 : string, v1 : string, v2 : US51) : unit =
    match v2 with
    | US51_1 -> (* None *)
        let v10 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US51_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method33(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method33(v0, v8)
        method192(v7, v9)
and method231 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "dotnet_fable_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_typescript"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method231(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and method232 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "new_code_path"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "spiral.process_typescript"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure120 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method232(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and method233 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method233(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method234 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method234(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method235 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v111 : string = $"{v104}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v13, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = "; "
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v148 : string = "new_code_path"
    let v149 : string = $"{v148}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v13, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v54}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v13, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v183 : string = $"{v9}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v129}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v218 : string = "external_command"
    let v219 : string = $"{v218}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v13, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v236 : string = $"{v54}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v13, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v253 : string = $"{v10}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v129}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v288 : string = "run_result"
    let v289 : string = $"{v288}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v13, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v306 : string = $"{v54}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v323 : string = $"{v11}"
    let v331 : unit = ()
    let v332 : (unit -> unit) = closure7(v13, v323)
    let v333 : unit = (fun () -> v332 (); v331) ()
    let v341 : string = " }"
    let v342 : string = $"{v341}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v13, v342)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v358 : string = v13.l0
    let v359 : int64 = v0.l0
    let v362 : string = " "
    let v363 : string = v6 + v362 
    let v367 : string = v363 + v7 
    let v372 : string = " #"
    let v373 : string = v367 + v372 
    let v377 : (int64 -> string) = _.ToString()
    let v378 : string = v377 v359
    let v382 : string = v373 + v378 
    let v386 : string = v382 + v362 
    let v391 : string = "spiral.process_typescript / Exception"
    let v392 : string = v386 + v391 
    let v397 : string = " / "
    let v398 : string = v392 + v397 
    let v402 : string = v398 + v358 
    method16(v402)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method235(v43, v44, v45, v46, v47, v48, v61, v62, v3, v0, v2, v1)
        method17(v63)
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method236 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_typescript / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method236(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method237 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v8}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "dotnet_fable_result"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v9}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v11, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = " }"
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v180 : string = v11.l0
    let v181 : int64 = v0.l0
    let v184 : string = " "
    let v185 : string = v6 + v184 
    let v189 : string = v185 + v7 
    let v194 : string = " #"
    let v195 : string = v189 + v194 
    let v199 : (int64 -> string) = _.ToString()
    let v200 : string = v199 v181
    let v204 : string = v195 + v200 
    let v208 : string = v204 + v184 
    let v213 : string = "spiral.process_python"
    let v214 : string = v208 + v213 
    let v219 : string = " / "
    let v220 : string = v214 + v219 
    let v224 : string = v220 + v180 
    method16(v224)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method76()
        let v61 : string = method237(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and method238 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method13()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v10, v14)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v32 : string = "new_code_path"
    let v33 : string = $"{v32}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v33)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v51 : string = " = "
    let v52 : string = $"{v51}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v10, v52)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v69 : string = $"{v8}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v10, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = " }"
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v104 : string = v10.l0
    let v105 : int64 = v0.l0
    let v108 : string = " "
    let v109 : string = v6 + v108 
    let v113 : string = v109 + v7 
    let v118 : string = " #"
    let v119 : string = v113 + v118 
    let v123 : (int64 -> string) = _.ToString()
    let v124 : string = v123 v105
    let v128 : string = v119 + v124 
    let v132 : string = v128 + v108 
    let v137 : string = "spiral.process_python"
    let v138 : string = v132 + v137 
    let v143 : string = " / "
    let v144 : string = v138 + v143 
    let v148 : string = v144 + v104 
    method16(v148)
and closure126 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v17 : unit = ()
        let v18 : (unit -> unit) = closure2()
        let v19 : unit = (fun () -> v18 (); v17) ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
        let v58 : string = method8(v40, v41, v42, v43, v44, v45)
        let v59 : string = method12()
        let v60 : string = method238(v40, v41, v42, v43, v44, v45, v58, v59, v0)
        method17(v60)
and closure127 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method69()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method239 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "ex"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v75 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v75 = v87 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : string = $"%A{v8}"
    let _run_target_args'_v75 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = $"%A{v8}"
    let _run_target_args'_v75 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v8}"
    let _run_target_args'_v75 = v97 
    #endif
#else
    let v101 : string = $"%A{v8}"
    let _run_target_args'_v75 = v101 
    #endif
    let v104 : string = _run_target_args'_v75 
    let v111 : string = $"{v104}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v13, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v129 : string = "; "
    let v130 : string = $"{v129}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v148 : string = "new_code_path"
    let v149 : string = $"{v148}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v13, v149)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v166 : string = $"{v54}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v13, v166)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v183 : string = $"{v9}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v129}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v218 : string = "external_command"
    let v219 : string = $"{v218}"
    let v227 : unit = ()
    let v228 : (unit -> unit) = closure7(v13, v219)
    let v229 : unit = (fun () -> v228 (); v227) ()
    let v236 : string = $"{v54}"
    let v244 : unit = ()
    let v245 : (unit -> unit) = closure7(v13, v236)
    let v246 : unit = (fun () -> v245 (); v244) ()
    let v253 : string = $"{v10}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v129}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v288 : string = "run_result"
    let v289 : string = $"{v288}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v13, v289)
    let v299 : unit = (fun () -> v298 (); v297) ()
    let v306 : string = $"{v54}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v323 : string = $"{v11}"
    let v331 : unit = ()
    let v332 : (unit -> unit) = closure7(v13, v323)
    let v333 : unit = (fun () -> v332 (); v331) ()
    let v341 : string = " }"
    let v342 : string = $"{v341}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v13, v342)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v358 : string = v13.l0
    let v359 : int64 = v0.l0
    let v362 : string = " "
    let v363 : string = v6 + v362 
    let v367 : string = v363 + v7 
    let v372 : string = " #"
    let v373 : string = v367 + v372 
    let v377 : (int64 -> string) = _.ToString()
    let v378 : string = v377 v359
    let v382 : string = v373 + v378 
    let v386 : string = v382 + v362 
    let v391 : string = "spiral.process_python / Exception"
    let v392 : string = v386 + v391 
    let v397 : string = " / "
    let v398 : string = v392 + v397 
    let v402 : string = v398 + v358 
    method16(v402)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method239(v43, v44, v45, v46, v47, v48, v61, v62, v3, v0, v2, v1)
        method17(v63)
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v66 : unit = (fun () -> v65 (); v64) ()
    US5_1
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method13()
    let v13 : Mut3 = {l0 = v12} : Mut3
    let v16 : string = "{ "
    let v17 : string = $"{v16}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v13, v17)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v35 : string = "exit_code"
    let v36 : string = $"{v35}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v13, v36)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v54 : string = " = "
    let v55 : string = $"{v54}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v13, v55)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v75 : string = $"{v8}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v13, v75)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v93 : string = "; "
    let v94 : string = $"{v93}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v13, v94)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v112 : string = "run_result"
    let v113 : string = $"{v112}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v13, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v130 : string = $"{v54}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v13, v130)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v147 : string = $"{v9}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v13, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v93}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v13, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v182 : string = "new_code_path"
    let v183 : string = $"{v182}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v13, v183)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v200 : string = $"{v54}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v13, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v217 : string = $"{v10}"
    let v225 : unit = ()
    let v226 : (unit -> unit) = closure7(v13, v217)
    let v227 : unit = (fun () -> v226 (); v225) ()
    let v234 : string = $"{v93}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v13, v234)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v252 : string = "external_command"
    let v253 : string = $"{v252}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v13, v253)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v270 : string = $"{v54}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v13, v270)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v287 : string = $"{v11}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v13, v287)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v305 : string = " }"
    let v306 : string = $"{v305}"
    let v314 : unit = ()
    let v315 : (unit -> unit) = closure7(v13, v306)
    let v316 : unit = (fun () -> v315 (); v314) ()
    let v322 : string = v13.l0
    let v323 : int64 = v0.l0
    let v326 : string = " "
    let v327 : string = v6 + v326 
    let v331 : string = v327 + v7 
    let v336 : string = " #"
    let v337 : string = v331 + v336 
    let v341 : (int64 -> string) = _.ToString()
    let v342 : string = v341 v323
    let v346 : string = v337 + v342 
    let v350 : string = v346 + v326 
    let v355 : string = "spiral.process_python / error"
    let v356 : string = v350 + v355 
    let v361 : string = " / "
    let v362 : string = v356 + v361 
    let v366 : string = v362 + v322 
    method16(v366)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v20 : unit = ()
        let v21 : (unit -> unit) = closure2()
        let v22 : unit = (fun () -> v21 (); v20) ()
        let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
        let v61 : string = method8(v43, v44, v45, v46, v47, v48)
        let v62 : string = method76()
        let v63 : string = method240(v43, v44, v45, v46, v47, v48, v61, v62, v2, v1, v0, v3)
        method17(v63)
and method241 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "subcommand"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v78 : string = "format!(\"{:#?}\", $0)"
    let v79 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v78 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let _run_target_args'_v73 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v73 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : string = $"%A{v8}"
    let _run_target_args'_v73 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = $"%A{v8}"
    let _run_target_args'_v73 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : string = $"%A{v8}"
    let _run_target_args'_v73 = v95 
    #endif
#else
    let v99 : string = $"%A{v8}"
    let _run_target_args'_v73 = v99 
    #endif
    let v102 : string = _run_target_args'_v73 
    let v109 : string = $"{v102}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v11, v109)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v127 : string = "; "
    let v128 : string = $"{v127}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v146 : string = "arg_matches"
    let v147 : string = $"{v146}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v11, v147)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v164 : string = $"{v52}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v11, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    (* run_target_args'
    let v184 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v185 : string = "format!(\"{:#?}\", $0)"
    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v185 
    let v187 : string = "fable_library_rust::String_::fromString($0)"
    let v188 : string = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let _run_target_args'_v184 = v188 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v189 : string = "format!(\"{:#?}\", $0)"
    let v190 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v189 
    let v191 : string = "fable_library_rust::String_::fromString($0)"
    let v192 : string = Fable.Core.RustInterop.emitRustExpr v190 v191 
    let _run_target_args'_v184 = v192 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = "format!(\"{:#?}\", $0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v193 
    let v195 : string = "fable_library_rust::String_::fromString($0)"
    let v196 : string = Fable.Core.RustInterop.emitRustExpr v194 v195 
    let _run_target_args'_v184 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : string = $"%A{v9}"
    let _run_target_args'_v184 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : string = $"%A{v9}"
    let _run_target_args'_v184 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : string = $"%A{v9}"
    let _run_target_args'_v184 = v206 
    #endif
#else
    let v210 : string = $"%A{v9}"
    let _run_target_args'_v184 = v210 
    #endif
    let v213 : string = _run_target_args'_v184 
    let v220 : string = $"{v213}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v11, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v238 : string = " }"
    let v239 : string = $"{v238}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v11, v239)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v255 : string = v11.l0
    let v256 : int64 = v0.l0
    let v259 : string = " "
    let v260 : string = v6 + v259 
    let v264 : string = v260 + v7 
    let v269 : string = " #"
    let v270 : string = v264 + v269 
    let v274 : (int64 -> string) = _.ToString()
    let v275 : string = v274 v256
    let v279 : string = v270 + v275 
    let v283 : string = v279 + v259 
    let v288 : string = "spiral.run / invalid subcommand"
    let v289 : string = v283 + v288 
    let v294 : string = " / "
    let v295 : string = v289 + v294 
    let v299 : string = v295 + v255 
    method16(v299)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v18 : unit = ()
        let v19 : (unit -> unit) = closure2()
        let v20 : unit = (fun () -> v19 (); v18) ()
        let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
        let v59 : string = method8(v41, v42, v43, v44, v45, v46)
        let v60 : string = method12()
        let v61 : string = method241(v41, v42, v43, v44, v45, v46, v59, v60, v1, v0)
        method17(v61)
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v28 v34 
    v35
and method242 () : (serde_json_Error -> string) =
    closure132()
and method18 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US6) = method19()
    let v14 : US6 option = v10 |> Option.map v13 
    let v35 : US6 = US6_1
    let v36 : US6 = v14 |> Option.defaultValue v35 
    let v10245 : (struct (string * string) []) =
        match v36 with
        | US6_0(v40, v41) -> (* Some *)
            let v42 : string = "fable_library_rust::String_::fromString($0)"
            let v43 : string = Fable.Core.RustInterop.emitRustExpr v40 v42 
            let v44 : bool = v43 = "gleam"
            if v44 then
                let v45 : string = method20()
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "&*$0"
                let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "&*$0"
                let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "&*$0"
                let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : Ref<Str> = _run_target_args'_v50 
                let v79 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v80 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v73) v79 
                let v83 : (std_string_String -> US7) = method21()
                let v84 : US7 option = v80 |> Option.map v83 
                let v104 : US7 = US7_1
                let v105 : US7 = v84 |> Option.defaultValue v104 
                let v112 : std_string_String =
                    match v105 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v109) -> (* Some *)
                        v109
                let v113 : string = "fable_library_rust::String_::fromString($0)"
                let v114 : string = Fable.Core.RustInterop.emitRustExpr v112 v113 
                let v115 : string = method22()
                (* run_target_args'
                let v120 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v121 : string = "&*$0"
                let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v115 v121 
                let _run_target_args'_v120 = v122 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v123 : string = "&*$0"
                let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v115 v123 
                let _run_target_args'_v120 = v124 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v125 : string = "&*$0"
                let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v115 v125 
                let _run_target_args'_v120 = v126 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v128 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v128 
                #endif
#if FABLE_COMPILER_PYTHON
                let v132 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v132 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v136 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v136 
                #endif
#else
                let v140 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v140 
                #endif
                let v143 : Ref<Str> = _run_target_args'_v120 
                let v149 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v150 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v143) v149 
                let v153 : (std_string_String -> US7) = method21()
                let v154 : US7 option = v150 |> Option.map v153 
                let v174 : US7 = US7_1
                let v175 : US7 = v154 |> Option.defaultValue v174 
                let v236 : US8 =
                    match v175 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v179) -> (* Some *)
                        let v180 : string = "fable_library_rust::String_::fromString($0)"
                        let v181 : string = Fable.Core.RustInterop.emitRustExpr v179 v180 
                        
                        
                        
                        
                        let v184 : string = "JavaScript"
                        let v185 : (unit -> string) = v184.ToLower
                        let v186 : string = v185 ()
                        let v191 : string = "Erlang"
                        let v192 : (unit -> string) = v191.ToLower
                        let v193 : string = v192 ()
                        let v196 : bool = "Erlang" = v181
                        let v200 : US9 =
                            if v196 then
                                let v197 : US10 = US10_0
                                US9_0(v197)
                            else
                                US9_1
                        let v232 : US9 =
                            match v200 with
                            | US9_1 -> (* None *)
                                let v203 : bool = "JavaScript" = v181
                                let v207 : US9 =
                                    if v203 then
                                        let v204 : US10 = US10_1
                                        US9_0(v204)
                                    else
                                        US9_1
                                match v207 with
                                | US9_1 -> (* None *)
                                    let v210 : bool = v193 = v181
                                    let v214 : US9 =
                                        if v210 then
                                            let v211 : US10 = US10_0
                                            US9_0(v211)
                                        else
                                            US9_1
                                    match v214 with
                                    | US9_1 -> (* None *)
                                        let v217 : bool = v186 = v181
                                        let v221 : US9 =
                                            if v217 then
                                                let v218 : US10 = US10_1
                                                US9_0(v218)
                                            else
                                                US9_1
                                        match v221 with
                                        | US9_1 -> (* None *)
                                            US9_1
                                        | US9_0(v222) -> (* Some *)
                                            US9_0(v222)
                                    | US9_0(v215) -> (* Some *)
                                        US9_0(v215)
                                | US9_0(v208) -> (* Some *)
                                    US9_0(v208)
                            | US9_0(v201) -> (* Some *)
                                US9_0(v201)
                        US8_0(v232)
                let v243 : US9 =
                    match v236 with
                    | US8_0(v237) -> (* Some *)
                        match v237 with
                        | US9_0(v238) -> (* Some *)
                            US9_0(v238)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v247 : US10 =
                    match v243 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v244) -> (* Some *)
                        v244
                let v248 : string = method23()
                (* run_target_args'
                let v253 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v254 : string = "&*$0"
                let v255 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v248 v254 
                let _run_target_args'_v253 = v255 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v256 : string = "&*$0"
                let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v248 v256 
                let _run_target_args'_v253 = v257 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v258 : string = "&*$0"
                let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v248 v258 
                let _run_target_args'_v253 = v259 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v261 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v261 
                #endif
#if FABLE_COMPILER_PYTHON
                let v265 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v265 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v269 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v269 
                #endif
#else
                let v273 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v273 
                #endif
                let v276 : Ref<Str> = _run_target_args'_v253 
                let v282 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v283 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v276) v282 
                let v286 : (Vec<std_string_String> -> US11) = method24()
                let v287 : US11 option = v283 |> Option.map v286 
                let v307 : US11 = US11_1
                let v308 : US11 = v287 |> Option.defaultValue v307 
                let v312 : (std_string_String []) = [||]
                let v313 : string = "$0.to_vec()"
                let v314 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v312 v313 
                let v317 : Vec<std_string_String> =
                    match v308 with
                    | US11_1 -> (* None *)
                        v314
                    | US11_0(v315) -> (* Some *)
                        v315
                (* run_target_args'
                let v322 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v327 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v328 : string = "std::fs::read(&*$0)"
                let v329 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v114 v328 
                (* run_target_args'
                let v331 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v332 : string = "$0.unwrap()"
                let v333 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v329 v332 
                let _run_target_args'_v331 = v333 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v334 : string = "$0.unwrap()"
                let v335 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v329 v334 
                let _run_target_args'_v331 = v335 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v336 : string = "$0.unwrap()"
                let v337 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v329 v336 
                let _run_target_args'_v331 = v337 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v338 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v338 
                #endif
#if FABLE_COMPILER_PYTHON
                let v339 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v339 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v340 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v340 
                #endif
#else
                let v341 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v341 
                #endif
                let v342 : Vec<uint8> = _run_target_args'_v331 
                let _run_target_args'_v327 = v342 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v346 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v346 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v350 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v350 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v354 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v354 
                #endif
#if FABLE_COMPILER_PYTHON
                let v358 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v358 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v362 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v362 
                #endif
#else
                let v365 : (uint8 []) = v114 |> System.IO.File.ReadAllBytes
                let v366 : string = "$0.to_vec()"
                let v367 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v365 v366 
                let _run_target_args'_v327 = v367 
                #endif
                let v368 : Vec<uint8> = _run_target_args'_v327 
                let v374 : Vec<uint8> = method25(v368)
                let v375 : string = "std::string::String::from_utf8($0)"
                let v376 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                (* run_target_args'
                let v378 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v379 : string = "$0.unwrap()"
                let v380 : std_string_String = Fable.Core.RustInterop.emitRustExpr v376 v379 
                let _run_target_args'_v378 = v380 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v381 : string = "$0.unwrap()"
                let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr v376 v381 
                let _run_target_args'_v378 = v382 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v383 : string = "$0.unwrap()"
                let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v376 v383 
                let _run_target_args'_v378 = v384 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v385 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v385 
                #endif
#if FABLE_COMPILER_PYTHON
                let v386 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v386 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v387 
                #endif
#else
                let v388 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v388 
                #endif
                let v389 : std_string_String = _run_target_args'_v378 
                let v392 : string = "fable_library_rust::String_::fromString($0)"
                let v393 : string = Fable.Core.RustInterop.emitRustExpr v389 v392 
                let _run_target_args'_v322 = v393 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v395 : string = null |> unbox<string>
                let _run_target_args'_v322 = v395 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v399 : string = null |> unbox<string>
                let _run_target_args'_v322 = v399 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v403 : string = null |> unbox<string>
                let _run_target_args'_v322 = v403 
                #endif
#if FABLE_COMPILER_PYTHON
                let v407 : string = null |> unbox<string>
                let _run_target_args'_v322 = v407 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v411 : string = null |> unbox<string>
                let _run_target_args'_v322 = v411 
                #endif
#else
                let v414 : string = v114 |> System.IO.File.ReadAllText
                let _run_target_args'_v322 = v414 
                #endif
                let v415 : string = _run_target_args'_v322 
                let v421 : string = method13()
                let v422 : Mut3 = {l0 = v421} : Mut3
                let v425 : string = "{ "
                let v426 : string = $"{v425}"
                let v434 : unit = ()
                let v435 : (unit -> unit) = closure7(v422, v426)
                let v436 : unit = (fun () -> v435 (); v434) ()
                let v444 : string = "extension"
                let v445 : string = $"{v444}"
                let v453 : unit = ()
                let v454 : (unit -> unit) = closure7(v422, v445)
                let v455 : unit = (fun () -> v454 (); v453) ()
                let v463 : string = " = "
                let v464 : string = $"{v463}"
                let v472 : unit = ()
                let v473 : (unit -> unit) = closure7(v422, v464)
                let v474 : unit = (fun () -> v473 (); v472) ()
                let v482 : string = "gleam"
                let v483 : string = $"{v482}"
                let v491 : unit = ()
                let v492 : (unit -> unit) = closure7(v422, v483)
                let v493 : unit = (fun () -> v492 (); v491) ()
                let v501 : string = "; "
                let v502 : string = $"{v501}"
                let v510 : unit = ()
                let v511 : (unit -> unit) = closure7(v422, v502)
                let v512 : unit = (fun () -> v511 (); v510) ()
                let v520 : string = "new_code"
                let v521 : string = $"{v520}"
                let v529 : unit = ()
                let v530 : (unit -> unit) = closure7(v422, v521)
                let v531 : unit = (fun () -> v530 (); v529) ()
                let v538 : string = $"{v463}"
                let v546 : unit = ()
                let v547 : (unit -> unit) = closure7(v422, v538)
                let v548 : unit = (fun () -> v547 (); v546) ()
                let v555 : string = $"{v415}"
                let v563 : unit = ()
                let v564 : (unit -> unit) = closure7(v422, v555)
                let v565 : unit = (fun () -> v564 (); v563) ()
                let v573 : string = " }"
                let v574 : string = $"{v573}"
                let v582 : unit = ()
                let v583 : (unit -> unit) = closure7(v422, v574)
                let v584 : unit = (fun () -> v583 (); v582) ()
                let v590 : string = v422.l0
                let v591 : string = method26(v590)
                let v592 : string = method31()
                let v593 : US5 = method32(v592)
                let v599 : US5 =
                    match v593 with
                    | US5_1 -> (* None *)
                        let v596 : string = __SOURCE_DIRECTORY__
                        method32(v596)
                    | US5_0(v594) -> (* Some *)
                        US5_0(v594)
                let v605 : US5 =
                    match v599 with
                    | US5_1 -> (* None *)
                        let v602 : string = "/workspaces"
                        method32(v602)
                    | US5_0(v600) -> (* Some *)
                        US5_0(v600)
                let v609 : string =
                    match v605 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v606) -> (* Some *)
                        v606
                let v610 : string = method50(v609)
                let v611 : bool = "deps" = v610
                let v622 : string =
                    if v611 then
                        let v612 : string option = method38(v609)
                        let v614 : string = v612 |> Option.get
                        let v617 : US5 = method32(v614)
                        match v617 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v618) -> (* Some *)
                            v618
                    else
                        v609
                let v623 : string = "polyglot"
                let v624 : string = method33(v622, v623)
                let v625 : string = method31()
                let v627 : (unit -> string) = v625.ToLower
                let v628 : string = v627 ()
                let v632 : (unit -> string) = v624.ToLower
                let v633 : string = v632 ()
                let v637 : bool = v628.StartsWith (v633, false, null)
                let v642 : US13 =
                    if v637 then
                        US13_1(v633)
                    else
                        US13_0(v633)
                let v654 : Result<string, string> =
                    match v642 with
                    | US13_1(v648) -> (* Error *)
                        let v650 : Result<string, string> = Error v648 
                        v650
                    | US13_0(v643) -> (* Ok *)
                        let v645 : Result<string, string> = Ok v643 
                        v645
                let v655 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v656 : bool = Fable.Core.RustInterop.emitRustExpr v654 v655 
                let v657 : string = "x"
                let v658 : string = Fable.Core.RustInterop.emitRustExpr () v657 
                let v659 : string = "true; $0 })"
                let v660 : bool = Fable.Core.RustInterop.emitRustExpr v658 v659 
                let v661 : string = "_result_unwrap_or_else"
                let v662 : string = Fable.Core.RustInterop.emitRustExpr () v661 
                let v663 : string = method63(v662)
                let v664 : string option = method38(v114)
                let v667 : string = ""
                let v668 : string = v664 |> Option.defaultValue v667 
                let v671 : string = method63(v668)
                let v672 : string = ".."
                let v673 : string = method33(v671, v672)
                let v674 : string = method63(v673)
                let v675 : string = "gleam.toml"
                let v676 : string = method33(v674, v675)
                let v677 : string = "gleam_stdlib=\"0.57.0\""
                let v678 : string = "gleam_time=\">=1.0.0 and <2.0.0\""
                let v679 : string = "gleam_erlang=\">=0.34.0 and <1.0.0\""
                let v680 : string = "envoy=\">=1.0.0 and <2.0.0\""
                let v681 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v682 : (string []) = [|v677; v678; v679; v680; v681|]
                let v683 : string = "$0.to_vec()"
                let v684 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v682 v683 
                let v685 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v686 : bool = Fable.Core.RustInterop.emitRustExpr v684 v685 
                let v687 : string = "x"
                let v688 : string = Fable.Core.RustInterop.emitRustExpr () v687 
                (* run_target_args'
                let v693 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v694 : string = "&*$0"
                let v695 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v688 v694 
                let _run_target_args'_v693 = v695 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v696 : string = "&*$0"
                let v697 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v688 v696 
                let _run_target_args'_v693 = v697 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v698 : string = "&*$0"
                let v699 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v688 v698 
                let _run_target_args'_v693 = v699 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v701 : Ref<Str> = v688 |> unbox<Ref<Str>>
                let _run_target_args'_v693 = v701 
                #endif
#if FABLE_COMPILER_PYTHON
                let v705 : Ref<Str> = v688 |> unbox<Ref<Str>>
                let _run_target_args'_v693 = v705 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v709 : Ref<Str> = v688 |> unbox<Ref<Str>>
                let _run_target_args'_v693 = v709 
                #endif
#else
                let v713 : Ref<Str> = v688 |> unbox<Ref<Str>>
                let _run_target_args'_v693 = v713 
                #endif
                let v716 : Ref<Str> = _run_target_args'_v693 
                (* run_target_args'
                let v726 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v727 : string = "String::from($0)"
                let v728 : std_string_String = Fable.Core.RustInterop.emitRustExpr v716 v727 
                let _run_target_args'_v726 = v728 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v729 : string = "String::from($0)"
                let v730 : std_string_String = Fable.Core.RustInterop.emitRustExpr v716 v729 
                let _run_target_args'_v726 = v730 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v731 : string = "String::from($0)"
                let v732 : std_string_String = Fable.Core.RustInterop.emitRustExpr v716 v731 
                let _run_target_args'_v726 = v732 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v734 : std_string_String = v716 |> unbox<std_string_String>
                let _run_target_args'_v726 = v734 
                #endif
#if FABLE_COMPILER_PYTHON
                let v738 : std_string_String = v716 |> unbox<std_string_String>
                let _run_target_args'_v726 = v738 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v742 : std_string_String = v716 |> unbox<std_string_String>
                let _run_target_args'_v726 = v742 
                #endif
#else
                let v746 : std_string_String = v716 |> unbox<std_string_String>
                let _run_target_args'_v726 = v746 
                #endif
                let v749 : std_string_String = _run_target_args'_v726 
                let v755 : string = "true; $0 }).collect::<Vec<_>>()"
                let v756 : bool = Fable.Core.RustInterop.emitRustExpr v749 v755 
                let v757 : string = "_vec_map"
                let v758 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v757 
                let v759 : Vec<std_string_String> = method67(v317)
                let v760 : Vec<std_string_String> = method68(v758)
                let v761 : string = "true; let mut v760 = v760"
                let v762 : bool = Fable.Core.RustInterop.emitRustExpr () v761 
                let v763 : string = "true; v760.extend(v759)"
                let v764 : bool = Fable.Core.RustInterop.emitRustExpr () v763 
                let v765 : string = "v760"
                let v766 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v765 
                let v767 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v768 : bool = Fable.Core.RustInterop.emitRustExpr v766 v767 
                let v769 : string = "x"
                let v770 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v769 
                let v771 : string = "fable_library_rust::String_::fromString($0)"
                let v772 : string = Fable.Core.RustInterop.emitRustExpr v770 v771 
                let v775 : string = "="
                let v776 : bool = v772.Contains v775 
                let v791 : string =
                    if v776 then
                        v772
                    else
                        let v781 : string = "]"
                        let v782 : bool = v772.EndsWith (v781, false, null)
                        if v782 then
                            let v785 : string = $"={{version='*',features=["
                            let v786 : string = "["
                            let v787 : string = v772.Replace (v786, v785)
                            let v788 : string = $"{v787}}}"
                            v788
                        else
                            let v789 : string = $"{v772}='*'"
                            v789
                let v792 : string = "true; $0 }).collect::<Vec<_>>()"
                let v793 : bool = Fable.Core.RustInterop.emitRustExpr v791 v792 
                let v794 : string = "_vec_map"
                let v795 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v794 
                let v796 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v797 : (string []) = Fable.Core.RustInterop.emitRustExpr v795 v796 
                let v802 : unit = ()
                let _let'_v802 =
                    seq {
                        for i = 0 to v797.Length - 1 do yield v797.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v805 : string seq = _let'_v802 
                let v813 : string = method69()
                let v814 : (string -> (string seq -> string)) = String.concat
                let v815 : (string seq -> string) = v814 v813
                let v816 : string = v815 v805
                
                
                let v820 : bool =
                    match v247 with
                    | US10_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v824 : US5 =
                    if v820 then
                        let v821 : string = "Erlang"
                        US5_0(v821)
                    else
                        US5_1
                let v838 : US5 =
                    match v824 with
                    | US5_1 -> (* None *)
                        let v827 : bool =
                            match v247 with
                            | US10_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v831 : US5 =
                            if v827 then
                                let v828 : string = "JavaScript"
                                US5_0(v828)
                            else
                                US5_1
                        match v831 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v832) -> (* Some *)
                            US5_0(v832)
                    | US5_0(v825) -> (* Some *)
                        US5_0(v825)
                let v842 : string =
                    match v838 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v839) -> (* Some *)
                        v839
                let v844 : (unit -> string) = v842.ToLower
                let v845 : string = v844 ()
                let v850 : string = "_real"
                let v851 : bool = v114.Contains v850 
                let v856 : string =
                    if v851 then
                        let v854 : string = "main_real"
                        v854
                    else
                        let v855 : string = "main"
                        v855
                let v857 : string = $"name = \"{v856}\""
                let v858 : string = $"target = \"{v845}\""
                let v861 : string = "\n"
                let v862 : string = v857 + v861 
                let v866 : string = v862 + v858 
                let v869 : string = $""
                let v871 : string = v866 + v861 
                let v875 : string = v871 + v869 
                let v878 : string = $"[dependencies]"
                let v880 : string = v875 + v861 
                let v884 : string = v880 + v878 
                let v887 : string = $"{v816}"
                let v889 : string = v884 + v861 
                let v893 : string = v889 + v887 
                method70(v676, v893)
                let v897 : System.Threading.CancellationToken option = None
                let v900 : (struct (string * string) []) = [||]
                let v902 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v906 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v910 : string option = None
                let v913 : string = $"gleam check"
                let v915 : string option = Some v674 
                let v918 : bool = true
                let struct (v919 : int32, v920 : string) = method91(v913, v897, v900, v902, v906, v918, v915)
                let v922 : bool = v919 <> 0 
                let struct (v2171 : US5, v2172 : US5, v2173 : US5, v2174 : US5) =
                    if v922 then
                        let v985 : unit = ()
                        let v986 : (unit -> unit) = closure68(v114, v920, v919)
                        let v987 : unit = (fun () -> v986 (); v985) ()
                        let v1048 : US5 = US5_0(v482)
                        let v1049 : US5 = US5_1
                        let v1050 : US5 = US5_1
                        let v1051 : US5 = US5_1
                        struct (v1048, v1049, v1050, v1051)
                    else
                        let v1052 : bool =
                            match v247 with
                            | US10_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v1055 : string =
                            if v1052 then
                                let v1053 : string = $"gleam run --no-print-progress \"{v114}\""
                                v1053
                            else
                                let v1054 : string = $"gleam build --no-print-progress"
                                v1054
                        let v1056 : string = "TRACE_LEVEL"
                        let v1057 : string = "GLEAM_LOG"
                        let v1058 : string = "GLEAM_LOG_NOCOLOUR"
                        let v1059 : (struct (string * string) []) = [|struct (v1056, v667); struct (v1057, v667); struct (v1058, v667)|]
                        let v1061 : System.Threading.CancellationToken option = None
                        let v1064 : (struct (string * string) []) = [||]
                        let v1066 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1070 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1074 : string option = None
                        let v1078 : string option = Some v674 
                        let v1081 : bool = true
                        let struct (v1082 : int32, v1083 : string) = method91(v1055, v1061, v1059, v1066, v1070, v1081, v1078)
                        let v1084 : int32 = v1059.Length
                        let v1085 : (string []) = Array.zeroCreate<string> (v1084)
                        let v1086 : Mut5 = {l0 = 0} : Mut5
                        while method29(v1084, v1086) do
                            let v1088 : int32 = v1086.l0
                            let struct (v1089 : string, v1090 : string) = v1059.[int v1088]
                            let v1091 : string = $"$env:{v1089}=''{v1090}''"
                            v1085.[int v1088] <- v1091
                            let v1092 : int32 = v1088 + 1
                            v1086.l0 <- v1092
                            ()
                        let v1094 : string seq = v1085 |> Seq.ofArray
                        let v1099 : (string -> (string seq -> string)) = String.concat
                        let v1100 : string = ";"
                        let v1101 : (string seq -> string) = v1099 v1100
                        let v1102 : string = v1101 v1094
                        let v1105 : string = $"pwsh -c '{v1102}; {v1055}'"
                        let v1107 : bool = v1082 <> 0 
                        let struct (v2167 : US5, v2168 : US5, v2169 : US5, v2170 : US5) =
                            if v1107 then
                                let v1170 : unit = ()
                                let v1171 : (unit -> unit) = closure69(v114, v1083, v1082, v1105)
                                let v1172 : unit = (fun () -> v1171 (); v1170) ()
                                let v1233 : US5 = US5_0(v482)
                                let v1234 : US5 = US5_1
                                let v1235 : US5 = US5_1
                                let v1236 : US5 = US5_1
                                struct (v1233, v1234, v1235, v1236)
                            else
                                let v1237 : bool =
                                    match v247 with
                                    | US10_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v2074 : string =
                                    if v1237 then
                                        v1083
                                    else
                                        let v1238 : string = $"{v674}/build/dev/javascript/main/main.mjs"
                                        (* run_target_args'
                                        let v1243 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v1248 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1249 : string = "std::fs::read(&*$0)"
                                        let v1250 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1238 v1249 
                                        (* run_target_args'
                                        let v1252 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1253 : string = "$0.unwrap()"
                                        let v1254 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1250 v1253 
                                        let _run_target_args'_v1252 = v1254 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1255 : string = "$0.unwrap()"
                                        let v1256 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1250 v1255 
                                        let _run_target_args'_v1252 = v1256 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1257 : string = "$0.unwrap()"
                                        let v1258 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1250 v1257 
                                        let _run_target_args'_v1252 = v1258 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1259 : Vec<uint8> = match v1250 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1252 = v1259 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1260 : Vec<uint8> = match v1250 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1252 = v1260 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1261 : Vec<uint8> = match v1250 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1252 = v1261 
                                        #endif
#else
                                        let v1262 : Vec<uint8> = match v1250 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1252 = v1262 
                                        #endif
                                        let v1263 : Vec<uint8> = _run_target_args'_v1252 
                                        let _run_target_args'_v1248 = v1263 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1267 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1248 = v1267 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1271 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1248 = v1271 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1275 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1248 = v1275 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1279 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1248 = v1279 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1283 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v1248 = v1283 
                                        #endif
#else
                                        let v1286 : (uint8 []) = v1238 |> System.IO.File.ReadAllBytes
                                        let v1287 : string = "$0.to_vec()"
                                        let v1288 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1286 v1287 
                                        let _run_target_args'_v1248 = v1288 
                                        #endif
                                        let v1289 : Vec<uint8> = _run_target_args'_v1248 
                                        let v1295 : Vec<uint8> = method25(v1289)
                                        let v1296 : string = "std::string::String::from_utf8($0)"
                                        let v1297 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1295 v1296 
                                        (* run_target_args'
                                        let v1299 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1300 : string = "$0.unwrap()"
                                        let v1301 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1297 v1300 
                                        let _run_target_args'_v1299 = v1301 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1302 : string = "$0.unwrap()"
                                        let v1303 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1297 v1302 
                                        let _run_target_args'_v1299 = v1303 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1304 : string = "$0.unwrap()"
                                        let v1305 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1297 v1304 
                                        let _run_target_args'_v1299 = v1305 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1306 : std_string_String = match v1297 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1299 = v1306 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1307 : std_string_String = match v1297 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1299 = v1307 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1308 : std_string_String = match v1297 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1299 = v1308 
                                        #endif
#else
                                        let v1309 : std_string_String = match v1297 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v1299 = v1309 
                                        #endif
                                        let v1310 : std_string_String = _run_target_args'_v1299 
                                        let v1313 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1314 : string = Fable.Core.RustInterop.emitRustExpr v1310 v1313 
                                        let _run_target_args'_v1243 = v1314 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1316 : string = null |> unbox<string>
                                        let _run_target_args'_v1243 = v1316 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1320 : string = null |> unbox<string>
                                        let _run_target_args'_v1243 = v1320 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1324 : string = null |> unbox<string>
                                        let _run_target_args'_v1243 = v1324 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1328 : string = null |> unbox<string>
                                        let _run_target_args'_v1243 = v1328 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v1332 : string = null |> unbox<string>
                                        let _run_target_args'_v1243 = v1332 
                                        #endif
#else
                                        let v1335 : string = v1238 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v1243 = v1335 
                                        #endif
                                        let v1336 : string = _run_target_args'_v1243 
                                        let v1342 : string = $"#app_"
                                        let v1343 : string = $"#app_{v591}"
                                        let v1344 : string = v1336.Replace (v1342, v1343)
                                        let v1347 : string = "main()"
                                        let v1348 : bool = v1344.EndsWith (v1347, false, null)
                                        let v1351 : bool = v1348 = false
                                        if v1351 then
                                            let v1352 : string = $"{v1344}
main()"
                                            method70(v1238, v1352)
                                        let v1354 : System.Threading.CancellationToken option = None
                                        let v1357 : (struct (string * string) []) = [||]
                                        let v1359 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v1363 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v1367 : string option = None
                                        let v1370 : string = $"bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir={v671} {v1238}"
                                        let v1371 : string = "PATH"
                                        let v1372 : string = method3(v1371)
                                        let v1373 : bool = v1372 = ""
                                        let v1408 : US5 =
                                            if v1373 then
                                                US5_1
                                            else
                                                (* run_target_args'
                                                let v1376 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1377 : string = "cfg!(windows)"
                                                let v1378 : bool = Fable.Core.RustInterop.emitRustExpr () v1377 
                                                let _run_target_args'_v1376 = v1378 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1379 : string = "cfg!(windows)"
                                                let v1380 : bool = Fable.Core.RustInterop.emitRustExpr () v1379 
                                                let _run_target_args'_v1376 = v1380 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1381 : string = "cfg!(windows)"
                                                let v1382 : bool = Fable.Core.RustInterop.emitRustExpr () v1381 
                                                let _run_target_args'_v1376 = v1382 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1383 : US3 = US3_0
                                                let v1384 : US4 = US4_4(v1383)
                                                let v1385 : string = $"platform.is_windows / target: {v1384}"
                                                let v1386 : bool = failwith<bool> v1385
                                                let _run_target_args'_v1376 = v1386 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1387 : US3 = US3_0
                                                let v1388 : US4 = US4_5(v1387)
                                                let v1389 : string = $"platform.is_windows / target: {v1388}"
                                                let v1390 : bool = failwith<bool> v1389
                                                let _run_target_args'_v1376 = v1390 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1391 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v1392 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v1393 : bool = v1392 v1391
                                                let _run_target_args'_v1376 = v1393 
                                                #endif
#else
                                                let v1394 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v1395 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v1396 : bool = v1395 v1394
                                                let _run_target_args'_v1376 = v1396 
                                                #endif
                                                let v1397 : bool = _run_target_args'_v1376 
                                                let v1404 : string =
                                                    if v1397 then
                                                        v1100
                                                    else
                                                        let v1403 : string = ":"
                                                        v1403
                                                let v1405 : string = "~/.bun/bin"
                                                let v1406 : string = $"{v1405}{v1404}{v1372}"
                                                US5_0(v1406)
                                        let v1413 : (struct (string * string) []) =
                                            match v1408 with
                                            | US5_1 -> (* None *)
                                                [||]
                                            | US5_0(v1409) -> (* Some *)
                                                [|struct (v1371, v1409)|]
                                        let v1415 : string option = Some v674 
                                        let v1418 : bool = true
                                        let struct (v1419 : int32, v1420 : string) = method91(v1370, v1354, v1413, v1359, v1363, v1418, v1415)
                                        let v1422 : bool = v1419 <> 0 
                                        if v1422 then
                                            let v1485 : unit = ()
                                            let v1486 : (unit -> unit) = closure70(v114, v1420, v1419)
                                            let v1487 : unit = (fun () -> v1486 (); v1485) ()
                                            v667
                                        else
                                            let v1548 : string = $"<!DOCTYPE html>"
                                            let v1549 : string = $"<html lang=\"en\">"
                                            let v1551 : string = v1548 + v861 
                                            let v1555 : string = v1551 + v1549 
                                            let v1558 : string = $"  <head>"
                                            let v1560 : string = v1555 + v861 
                                            let v1564 : string = v1560 + v1558 
                                            let v1567 : string = $"    <meta charset=\"UTF-8\" />"
                                            let v1569 : string = v1564 + v861 
                                            let v1573 : string = v1569 + v1567 
                                            let v1576 : string = $"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />"
                                            let v1578 : string = v1573 + v861 
                                            let v1582 : string = v1578 + v1576 
                                            let v1585 : string = $"    <link"
                                            let v1587 : string = v1582 + v861 
                                            let v1591 : string = v1587 + v1585 
                                            let v1594 : string = $"      data-trunk"
                                            let v1596 : string = v1591 + v861 
                                            let v1600 : string = v1596 + v1594 
                                            let v1603 : string = $"      rel=\"inline\""
                                            let v1605 : string = v1600 + v861 
                                            let v1609 : string = v1605 + v1603 
                                            let v1612 : string = $"      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\""
                                            let v1614 : string = v1609 + v861 
                                            let v1618 : string = v1614 + v1612 
                                            let v1621 : string = $"    />"
                                            let v1623 : string = v1618 + v861 
                                            let v1627 : string = v1623 + v1621 
                                            let v1630 : string = $"    <link"
                                            let v1632 : string = v1627 + v861 
                                            let v1636 : string = v1632 + v1630 
                                            let v1639 : string = $"      data-trunk"
                                            let v1641 : string = v1636 + v861 
                                            let v1645 : string = v1641 + v1639 
                                            let v1648 : string = $"      rel=\"inline\""
                                            let v1650 : string = v1645 + v861 
                                            let v1654 : string = v1650 + v1648 
                                            let v1657 : string = $"      type=\"module\""
                                            let v1659 : string = v1654 + v861 
                                            let v1663 : string = v1659 + v1657 
                                            let v1666 : string = $"      href=\"main.js\""
                                            let v1668 : string = v1663 + v861 
                                            let v1672 : string = v1668 + v1666 
                                            let v1675 : string = $"    />"
                                            let v1677 : string = v1672 + v861 
                                            let v1681 : string = v1677 + v1675 
                                            let v1684 : string = $"  </head>"
                                            let v1686 : string = v1681 + v861 
                                            let v1690 : string = v1686 + v1684 
                                            let v1693 : string = $"  <body>"
                                            let v1695 : string = v1690 + v861 
                                            let v1699 : string = v1695 + v1693 
                                            let v1702 : string = $"    <div id=\"app_{v591}\"></div>"
                                            let v1704 : string = v1699 + v861 
                                            let v1708 : string = v1704 + v1702 
                                            let v1711 : string = $"  </body>"
                                            let v1713 : string = v1708 + v861 
                                            let v1717 : string = v1713 + v1711 
                                            let v1720 : string = $"</html>"
                                            let v1722 : string = v1717 + v861 
                                            let v1726 : string = v1722 + v1720 
                                            let v1729 : string = $"{v671}/index.html"
                                            method70(v1729, v1726)
                                            let v1730 : string = $"{v671}/spiral_{v591}.rs"
                                            method70(v1730, v667)
                                            let v1731 : string = $"[package]"
                                            let v1732 : string = $"name = \"spiral_{v591}\""
                                            let v1734 : string = v1731 + v861 
                                            let v1738 : string = v1734 + v1732 
                                            let v1741 : string = $""
                                            let v1743 : string = v1738 + v861 
                                            let v1747 : string = v1743 + v1741 
                                            let v1750 : string = $"[workspace]"
                                            let v1752 : string = v1747 + v861 
                                            let v1756 : string = v1752 + v1750 
                                            let v1759 : string = $""
                                            let v1761 : string = v1756 + v861 
                                            let v1765 : string = v1761 + v1759 
                                            let v1768 : string = $"[lib]"
                                            let v1770 : string = v1765 + v861 
                                            let v1774 : string = v1770 + v1768 
                                            let v1777 : string = $"crate-type = [\"cdylib\", \"rlib\"]"
                                            let v1779 : string = v1774 + v861 
                                            let v1783 : string = v1779 + v1777 
                                            let v1786 : string = $"path = \"spiral_{v591}.rs\""
                                            let v1788 : string = v1783 + v861 
                                            let v1792 : string = v1788 + v1786 
                                            let v1795 : string = $""
                                            let v1797 : string = v1792 + v861 
                                            let v1801 : string = v1797 + v1795 
                                            let v1804 : string = $"[dependencies]"
                                            let v1806 : string = v1801 + v861 
                                            let v1810 : string = v1806 + v1804 
                                            let v1813 : string = $"{v671}/Cargo.toml"
                                            method70(v1813, v1810)
                                            let v1815 : System.Threading.CancellationToken option = None
                                            let v1818 : (struct (string * string) []) = [||]
                                            let v1820 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v1824 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v1828 : string option = None
                                            let v1831 : string = $"trunk build --release --minify --dist={v671} --public-url=./ --no-sri"
                                            let v1832 : string = "TRUNK_TOOLS_WASM_BINDGEN"
                                            let v1833 : string = "0.2.93"
                                            let v1834 : (struct (string * string) []) = [|struct (v1832, v1833)|]
                                            let v1836 : string option = Some v671 
                                            let v1839 : bool = true
                                            let struct (v1840 : int32, v1841 : string) = method91(v1831, v1815, v1834, v1820, v1824, v1839, v1836)
                                            let v1843 : bool = v1840 <> 0 
                                            if v1843 then
                                                let v1906 : unit = ()
                                                let v1907 : (unit -> unit) = closure71(v114, v1841, v1840)
                                                let v1908 : unit = (fun () -> v1907 (); v1906) ()
                                                v667
                                            else
                                                (* run_target_args'
                                                let v1973 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v1978 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1979 : string = "std::fs::read(&*$0)"
                                                let v1980 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1729 v1979 
                                                (* run_target_args'
                                                let v1982 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1983 : string = "$0.unwrap()"
                                                let v1984 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1980 v1983 
                                                let _run_target_args'_v1982 = v1984 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1985 : string = "$0.unwrap()"
                                                let v1986 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1980 v1985 
                                                let _run_target_args'_v1982 = v1986 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1987 : string = "$0.unwrap()"
                                                let v1988 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1980 v1987 
                                                let _run_target_args'_v1982 = v1988 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1989 : Vec<uint8> = match v1980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1982 = v1989 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1990 : Vec<uint8> = match v1980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1982 = v1990 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1991 : Vec<uint8> = match v1980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1982 = v1991 
                                                #endif
#else
                                                let v1992 : Vec<uint8> = match v1980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1982 = v1992 
                                                #endif
                                                let v1993 : Vec<uint8> = _run_target_args'_v1982 
                                                let _run_target_args'_v1978 = v1993 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1997 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1978 = v1997 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2001 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1978 = v2001 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2005 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1978 = v2005 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2009 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1978 = v2009 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2013 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1978 = v2013 
                                                #endif
#else
                                                let v2016 : (uint8 []) = v1729 |> System.IO.File.ReadAllBytes
                                                let v2017 : string = "$0.to_vec()"
                                                let v2018 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2016 v2017 
                                                let _run_target_args'_v1978 = v2018 
                                                #endif
                                                let v2019 : Vec<uint8> = _run_target_args'_v1978 
                                                let v2025 : Vec<uint8> = method25(v2019)
                                                let v2026 : string = "std::string::String::from_utf8($0)"
                                                let v2027 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2025 v2026 
                                                (* run_target_args'
                                                let v2029 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2030 : string = "$0.unwrap()"
                                                let v2031 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2027 v2030 
                                                let _run_target_args'_v2029 = v2031 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2032 : string = "$0.unwrap()"
                                                let v2033 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2027 v2032 
                                                let _run_target_args'_v2029 = v2033 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2034 : string = "$0.unwrap()"
                                                let v2035 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2027 v2034 
                                                let _run_target_args'_v2029 = v2035 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2036 : std_string_String = match v2027 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2029 = v2036 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2037 : std_string_String = match v2027 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2029 = v2037 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2038 : std_string_String = match v2027 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2029 = v2038 
                                                #endif
#else
                                                let v2039 : std_string_String = match v2027 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v2029 = v2039 
                                                #endif
                                                let v2040 : std_string_String = _run_target_args'_v2029 
                                                let v2043 : string = "fable_library_rust::String_::fromString($0)"
                                                let v2044 : string = Fable.Core.RustInterop.emitRustExpr v2040 v2043 
                                                let _run_target_args'_v1973 = v2044 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2046 : string = null |> unbox<string>
                                                let _run_target_args'_v1973 = v2046 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2050 : string = null |> unbox<string>
                                                let _run_target_args'_v1973 = v2050 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2054 : string = null |> unbox<string>
                                                let _run_target_args'_v1973 = v2054 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2058 : string = null |> unbox<string>
                                                let _run_target_args'_v1973 = v2058 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2062 : string = null |> unbox<string>
                                                let _run_target_args'_v1973 = v2062 
                                                #endif
#else
                                                let v2065 : string = v1729 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v1973 = v2065 
                                                #endif
                                                let v2066 : string = _run_target_args'_v1973 
                                                v2066
                                (* run_target_args'
                                let v2079 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2080 : string = "&*$0"
                                let v2081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2074 v2080 
                                let _run_target_args'_v2079 = v2081 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2082 : string = "&*$0"
                                let v2083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2074 v2082 
                                let _run_target_args'_v2079 = v2083 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2084 : string = "&*$0"
                                let v2085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2074 v2084 
                                let _run_target_args'_v2079 = v2085 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2087 : Ref<Str> = v2074 |> unbox<Ref<Str>>
                                let _run_target_args'_v2079 = v2087 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2091 : Ref<Str> = v2074 |> unbox<Ref<Str>>
                                let _run_target_args'_v2079 = v2091 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2095 : Ref<Str> = v2074 |> unbox<Ref<Str>>
                                let _run_target_args'_v2079 = v2095 
                                #endif
#else
                                let v2099 : Ref<Str> = v2074 |> unbox<Ref<Str>>
                                let _run_target_args'_v2079 = v2099 
                                #endif
                                let v2102 : Ref<Str> = _run_target_args'_v2079 
                                (* run_target_args'
                                let v2112 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2113 : string = "String::from($0)"
                                let v2114 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2102 v2113 
                                let _run_target_args'_v2112 = v2114 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2115 : string = "String::from($0)"
                                let v2116 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2102 v2115 
                                let _run_target_args'_v2112 = v2116 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2117 : string = "String::from($0)"
                                let v2118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2102 v2117 
                                let _run_target_args'_v2112 = v2118 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2120 : std_string_String = v2102 |> unbox<std_string_String>
                                let _run_target_args'_v2112 = v2120 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2124 : std_string_String = v2102 |> unbox<std_string_String>
                                let _run_target_args'_v2112 = v2124 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2128 : std_string_String = v2102 |> unbox<std_string_String>
                                let _run_target_args'_v2112 = v2128 
                                #endif
#else
                                let v2132 : std_string_String = v2102 |> unbox<std_string_String>
                                let _run_target_args'_v2112 = v2132 
                                #endif
                                let v2135 : std_string_String = _run_target_args'_v2112 
                                let v2141 : (string -> US5) = closure72()
                                let v2142 : (unit -> string) = closure73(v2074)
                                let v2143 : (exn -> US5) = closure74(v114, v1105, v2135)
                                let v2145 : US5 = US5_1
                                let result = ref v2145
                                try
                                    result.Value <- v2142 () |> v2141 
                                with ex ->
                                    result.Value <- v2143 ex 
                                let v2146 : US5 = result.Value
                                let v2160 : string option =
                                    match v2146 with
                                    | US5_1 -> (* None *)
                                        let v2156 : string option = None
                                        v2156
                                    | US5_0(v2150) -> (* Some *)
                                        let v2152 : string option = Some v2150 
                                        v2152
                                let v2161 : string = "$0.unwrap()"
                                let v2162 : string = Fable.Core.RustInterop.emitRustExpr v2160 v2161 
                                let v2163 : US5 = US5_0(v482)
                                let v2164 : US5 = US5_0(v415)
                                let v2165 : US5 = US5_0(v114)
                                let v2166 : US5 = US5_0(v2162)
                                struct (v2163, v2164, v2165, v2166)
                        struct (v2167, v2168, v2169, v2170)
                let v2177 : string =
                    match v2171 with
                    | US5_1 -> (* None *)
                        v667
                    | US5_0(v2175) -> (* Some *)
                        v2175
                let v2180 : string =
                    match v2172 with
                    | US5_1 -> (* None *)
                        v667
                    | US5_0(v2178) -> (* Some *)
                        v2178
                let v2181 : string = "code"
                let v2184 : string =
                    match v2174 with
                    | US5_1 -> (* None *)
                        v667
                    | US5_0(v2182) -> (* Some *)
                        v2182
                let v2185 : string = "output"
                let v2186 : (struct (string * string) []) = [|struct (v444, v2177); struct (v2181, v2180); struct (v2185, v2184)|]
                let v2187 : string = "$0.to_vec()"
                let v2188 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2186 v2187 
                let v2189 : unit = ()
                let v2190 : string = $"true; let _func1_from_v2189 = Func1::from(move |value| {{ //"
                let v2191 : bool = Fable.Core.RustInterop.emitRustExpr () v2190 
                let v2192 : string = $"value"
                let struct (v2193 : string, v2194 : string) = Fable.Core.RustInterop.emitRustExpr () v2192 
                (* run_target_args'
                let v2199 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2200 : string = "&*$0"
                let v2201 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2193 v2200 
                let _run_target_args'_v2199 = v2201 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2202 : string = "&*$0"
                let v2203 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2193 v2202 
                let _run_target_args'_v2199 = v2203 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2204 : string = "&*$0"
                let v2205 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2193 v2204 
                let _run_target_args'_v2199 = v2205 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2207 : Ref<Str> = v2193 |> unbox<Ref<Str>>
                let _run_target_args'_v2199 = v2207 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2211 : Ref<Str> = v2193 |> unbox<Ref<Str>>
                let _run_target_args'_v2199 = v2211 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2215 : Ref<Str> = v2193 |> unbox<Ref<Str>>
                let _run_target_args'_v2199 = v2215 
                #endif
#else
                let v2219 : Ref<Str> = v2193 |> unbox<Ref<Str>>
                let _run_target_args'_v2199 = v2219 
                #endif
                let v2222 : Ref<Str> = _run_target_args'_v2199 
                (* run_target_args'
                let v2232 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2233 : string = "String::from($0)"
                let v2234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2222 v2233 
                let _run_target_args'_v2232 = v2234 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2235 : string = "String::from($0)"
                let v2236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2222 v2235 
                let _run_target_args'_v2232 = v2236 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2237 : string = "String::from($0)"
                let v2238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2222 v2237 
                let _run_target_args'_v2232 = v2238 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2240 : std_string_String = v2222 |> unbox<std_string_String>
                let _run_target_args'_v2232 = v2240 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2244 : std_string_String = v2222 |> unbox<std_string_String>
                let _run_target_args'_v2232 = v2244 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2248 : std_string_String = v2222 |> unbox<std_string_String>
                let _run_target_args'_v2232 = v2248 
                #endif
#else
                let v2252 : std_string_String = v2222 |> unbox<std_string_String>
                let _run_target_args'_v2232 = v2252 
                #endif
                let v2255 : std_string_String = _run_target_args'_v2232 
                (* run_target_args'
                let v2265 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2266 : string = "&*$0"
                let v2267 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2194 v2266 
                let _run_target_args'_v2265 = v2267 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2268 : string = "&*$0"
                let v2269 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2194 v2268 
                let _run_target_args'_v2265 = v2269 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2270 : string = "&*$0"
                let v2271 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2194 v2270 
                let _run_target_args'_v2265 = v2271 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2273 : Ref<Str> = v2194 |> unbox<Ref<Str>>
                let _run_target_args'_v2265 = v2273 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2277 : Ref<Str> = v2194 |> unbox<Ref<Str>>
                let _run_target_args'_v2265 = v2277 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2281 : Ref<Str> = v2194 |> unbox<Ref<Str>>
                let _run_target_args'_v2265 = v2281 
                #endif
#else
                let v2285 : Ref<Str> = v2194 |> unbox<Ref<Str>>
                let _run_target_args'_v2265 = v2285 
                #endif
                let v2288 : Ref<Str> = _run_target_args'_v2265 
                (* run_target_args'
                let v2298 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2299 : string = "String::from($0)"
                let v2300 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2288 v2299 
                let _run_target_args'_v2298 = v2300 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2301 : string = "String::from($0)"
                let v2302 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2288 v2301 
                let _run_target_args'_v2298 = v2302 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2303 : string = "String::from($0)"
                let v2304 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2288 v2303 
                let _run_target_args'_v2298 = v2304 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2306 : std_string_String = v2288 |> unbox<std_string_String>
                let _run_target_args'_v2298 = v2306 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2310 : std_string_String = v2288 |> unbox<std_string_String>
                let _run_target_args'_v2298 = v2310 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2314 : std_string_String = v2288 |> unbox<std_string_String>
                let _run_target_args'_v2298 = v2314 
                #endif
#else
                let v2318 : std_string_String = v2288 |> unbox<std_string_String>
                let _run_target_args'_v2298 = v2318 
                #endif
                let v2321 : std_string_String = _run_target_args'_v2298 
                let v2328 : (std_string_String * std_string_String) = v2255, v2321 
                let func1_from_result = v2328 //
                let v2331 : _ = func1_from_result
                let v2332 : string = $"true; $0 /*"
                let v2333 : bool = Fable.Core.RustInterop.emitRustExpr v2331 v2332 
                let v2334 : string = $"*/ }}); //"
                let v2335 : bool = Fable.Core.RustInterop.emitRustExpr () v2334 
                let v2336 : string = $"_func1_from_v2189"
                let v2337 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v2336 
                let v2338 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v2339 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v2337)
                let v2340 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2188, v2339) v2338 
                let v2341 : string = "std::collections::BTreeMap::from_iter(v2340.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v2342 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2341 
                let v2343 : string = "serde_json::to_string(&v2342)"
                let v2344 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v2343 
                (* run_target_args'
                let v2346 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2347 : string = "$0.unwrap()"
                let v2348 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2344 v2347 
                let _run_target_args'_v2346 = v2348 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2349 : string = "$0.unwrap()"
                let v2350 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2344 v2349 
                let _run_target_args'_v2346 = v2350 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2351 : string = "$0.unwrap()"
                let v2352 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2344 v2351 
                let _run_target_args'_v2346 = v2352 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2353 : std_string_String = match v2344 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2346 = v2353 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2354 : std_string_String = match v2344 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2346 = v2354 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2355 : std_string_String = match v2344 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2346 = v2355 
                #endif
#else
                let v2356 : std_string_String = match v2344 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v2346 = v2356 
                #endif
                let v2357 : std_string_String = _run_target_args'_v2346 
                let v2360 : string = "fable_library_rust::String_::fromString($0)"
                let v2361 : string = Fable.Core.RustInterop.emitRustExpr v2357 v2360 
                let v2362 : string = "command_result"
                [|struct (v2362, v2361)|]
            else
                let v2364 : string = "fable_library_rust::String_::fromString($0)"
                let v2365 : string = Fable.Core.RustInterop.emitRustExpr v40 v2364 
                let v2366 : bool = v2365 = "cuda"
                if v2366 then
                    let v2367 : string = method163()
                    (* run_target_args'
                    let v2372 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2373 : string = "&*$0"
                    let v2374 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2367 v2373 
                    let _run_target_args'_v2372 = v2374 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2375 : string = "&*$0"
                    let v2376 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2367 v2375 
                    let _run_target_args'_v2372 = v2376 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2377 : string = "&*$0"
                    let v2378 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2367 v2377 
                    let _run_target_args'_v2372 = v2378 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2380 : Ref<Str> = v2367 |> unbox<Ref<Str>>
                    let _run_target_args'_v2372 = v2380 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2384 : Ref<Str> = v2367 |> unbox<Ref<Str>>
                    let _run_target_args'_v2372 = v2384 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2388 : Ref<Str> = v2367 |> unbox<Ref<Str>>
                    let _run_target_args'_v2372 = v2388 
                    #endif
#else
                    let v2392 : Ref<Str> = v2367 |> unbox<Ref<Str>>
                    let _run_target_args'_v2372 = v2392 
                    #endif
                    let v2395 : Ref<Str> = _run_target_args'_v2372 
                    let v2401 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v2402 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2395) v2401 
                    let v2405 : (std_string_String -> US7) = method21()
                    let v2406 : US7 option = v2402 |> Option.map v2405 
                    let v2426 : US7 = US7_1
                    let v2427 : US7 = v2406 |> Option.defaultValue v2426 
                    let v2434 : std_string_String =
                        match v2427 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v2431) -> (* Some *)
                            v2431
                    let v2435 : string = "fable_library_rust::String_::fromString($0)"
                    let v2436 : string = Fable.Core.RustInterop.emitRustExpr v2434 v2435 
                    let v2437 : string = method164()
                    (* run_target_args'
                    let v2442 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2443 : string = "&*$0"
                    let v2444 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2437 v2443 
                    let _run_target_args'_v2442 = v2444 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2445 : string = "&*$0"
                    let v2446 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2437 v2445 
                    let _run_target_args'_v2442 = v2446 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2447 : string = "&*$0"
                    let v2448 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2437 v2447 
                    let _run_target_args'_v2442 = v2448 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2450 : Ref<Str> = v2437 |> unbox<Ref<Str>>
                    let _run_target_args'_v2442 = v2450 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2454 : Ref<Str> = v2437 |> unbox<Ref<Str>>
                    let _run_target_args'_v2442 = v2454 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2458 : Ref<Str> = v2437 |> unbox<Ref<Str>>
                    let _run_target_args'_v2442 = v2458 
                    #endif
#else
                    let v2462 : Ref<Str> = v2437 |> unbox<Ref<Str>>
                    let _run_target_args'_v2442 = v2462 
                    #endif
                    let v2465 : Ref<Str> = _run_target_args'_v2442 
                    let v2471 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v2472 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2465) v2471 
                    let v2475 : (std_string_String -> US7) = method21()
                    let v2476 : US7 option = v2472 |> Option.map v2475 
                    let v2496 : US7 = US7_1
                    let v2497 : US7 = v2476 |> Option.defaultValue v2496 
                    let v2558 : US36 =
                        match v2497 with
                        | US7_1 -> (* None *)
                            US36_1
                        | US7_0(v2501) -> (* Some *)
                            let v2502 : string = "fable_library_rust::String_::fromString($0)"
                            let v2503 : string = Fable.Core.RustInterop.emitRustExpr v2501 v2502 
                            
                            
                            
                            
                            let v2506 : string = "Poetry"
                            let v2507 : (unit -> string) = v2506.ToLower
                            let v2508 : string = v2507 ()
                            let v2513 : string = "Pip"
                            let v2514 : (unit -> string) = v2513.ToLower
                            let v2515 : string = v2514 ()
                            let v2518 : bool = "Pip" = v2503
                            let v2522 : US37 =
                                if v2518 then
                                    let v2519 : US38 = US38_0
                                    US37_0(v2519)
                                else
                                    US37_1
                            let v2554 : US37 =
                                match v2522 with
                                | US37_1 -> (* None *)
                                    let v2525 : bool = "Poetry" = v2503
                                    let v2529 : US37 =
                                        if v2525 then
                                            let v2526 : US38 = US38_1
                                            US37_0(v2526)
                                        else
                                            US37_1
                                    match v2529 with
                                    | US37_1 -> (* None *)
                                        let v2532 : bool = v2515 = v2503
                                        let v2536 : US37 =
                                            if v2532 then
                                                let v2533 : US38 = US38_0
                                                US37_0(v2533)
                                            else
                                                US37_1
                                        match v2536 with
                                        | US37_1 -> (* None *)
                                            let v2539 : bool = v2508 = v2503
                                            let v2543 : US37 =
                                                if v2539 then
                                                    let v2540 : US38 = US38_1
                                                    US37_0(v2540)
                                                else
                                                    US37_1
                                            match v2543 with
                                            | US37_1 -> (* None *)
                                                US37_1
                                            | US37_0(v2544) -> (* Some *)
                                                US37_0(v2544)
                                        | US37_0(v2537) -> (* Some *)
                                            US37_0(v2537)
                                    | US37_0(v2530) -> (* Some *)
                                        US37_0(v2530)
                                | US37_0(v2523) -> (* Some *)
                                    US37_0(v2523)
                            US36_0(v2554)
                    let v2565 : US37 =
                        match v2558 with
                        | US36_0(v2559) -> (* Some *)
                            match v2559 with
                            | US37_0(v2560) -> (* Some *)
                                US37_0(v2560)
                            | _ ->
                                US37_1
                        | _ ->
                            US37_1
                    let v2569 : US38 =
                        match v2565 with
                        | US37_1 -> (* None *)
                            US38_0
                        | US37_0(v2566) -> (* Some *)
                            v2566
                    let v2570 : string = method23()
                    (* run_target_args'
                    let v2575 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2576 : string = "&*$0"
                    let v2577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2570 v2576 
                    let _run_target_args'_v2575 = v2577 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2578 : string = "&*$0"
                    let v2579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2570 v2578 
                    let _run_target_args'_v2575 = v2579 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2580 : string = "&*$0"
                    let v2581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2570 v2580 
                    let _run_target_args'_v2575 = v2581 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2583 : Ref<Str> = v2570 |> unbox<Ref<Str>>
                    let _run_target_args'_v2575 = v2583 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2587 : Ref<Str> = v2570 |> unbox<Ref<Str>>
                    let _run_target_args'_v2575 = v2587 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2591 : Ref<Str> = v2570 |> unbox<Ref<Str>>
                    let _run_target_args'_v2575 = v2591 
                    #endif
#else
                    let v2595 : Ref<Str> = v2570 |> unbox<Ref<Str>>
                    let _run_target_args'_v2575 = v2595 
                    #endif
                    let v2598 : Ref<Str> = _run_target_args'_v2575 
                    let v2604 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v2605 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2598) v2604 
                    let v2608 : (Vec<std_string_String> -> US11) = method24()
                    let v2609 : US11 option = v2605 |> Option.map v2608 
                    let v2629 : US11 = US11_1
                    let v2630 : US11 = v2609 |> Option.defaultValue v2629 
                    let v2634 : (std_string_String []) = [||]
                    let v2635 : string = "$0.to_vec()"
                    let v2636 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2634 v2635 
                    let v2639 : Vec<std_string_String> =
                        match v2630 with
                        | US11_1 -> (* None *)
                            v2636
                        | US11_0(v2637) -> (* Some *)
                            v2637
                    (* run_target_args'
                    let v2644 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v2649 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2650 : string = "std::fs::read(&*$0)"
                    let v2651 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2436 v2650 
                    (* run_target_args'
                    let v2653 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2654 : string = "$0.unwrap()"
                    let v2655 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2651 v2654 
                    let _run_target_args'_v2653 = v2655 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2656 : string = "$0.unwrap()"
                    let v2657 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2651 v2656 
                    let _run_target_args'_v2653 = v2657 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2658 : string = "$0.unwrap()"
                    let v2659 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2651 v2658 
                    let _run_target_args'_v2653 = v2659 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2660 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2653 = v2660 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2661 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2653 = v2661 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2662 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2653 = v2662 
                    #endif
#else
                    let v2663 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2653 = v2663 
                    #endif
                    let v2664 : Vec<uint8> = _run_target_args'_v2653 
                    let _run_target_args'_v2649 = v2664 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2668 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2649 = v2668 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2672 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2649 = v2672 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2676 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2649 = v2676 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2680 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2649 = v2680 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2684 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v2649 = v2684 
                    #endif
#else
                    let v2687 : (uint8 []) = v2436 |> System.IO.File.ReadAllBytes
                    let v2688 : string = "$0.to_vec()"
                    let v2689 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2687 v2688 
                    let _run_target_args'_v2649 = v2689 
                    #endif
                    let v2690 : Vec<uint8> = _run_target_args'_v2649 
                    let v2696 : Vec<uint8> = method25(v2690)
                    let v2697 : string = "std::string::String::from_utf8($0)"
                    let v2698 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2696 v2697 
                    (* run_target_args'
                    let v2700 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2701 : string = "$0.unwrap()"
                    let v2702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2698 v2701 
                    let _run_target_args'_v2700 = v2702 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2703 : string = "$0.unwrap()"
                    let v2704 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2698 v2703 
                    let _run_target_args'_v2700 = v2704 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2705 : string = "$0.unwrap()"
                    let v2706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2698 v2705 
                    let _run_target_args'_v2700 = v2706 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2707 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2700 = v2707 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2708 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2700 = v2708 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2709 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2700 = v2709 
                    #endif
#else
                    let v2710 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2700 = v2710 
                    #endif
                    let v2711 : std_string_String = _run_target_args'_v2700 
                    let v2714 : string = "fable_library_rust::String_::fromString($0)"
                    let v2715 : string = Fable.Core.RustInterop.emitRustExpr v2711 v2714 
                    let _run_target_args'_v2644 = v2715 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2717 : string = null |> unbox<string>
                    let _run_target_args'_v2644 = v2717 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2721 : string = null |> unbox<string>
                    let _run_target_args'_v2644 = v2721 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2725 : string = null |> unbox<string>
                    let _run_target_args'_v2644 = v2725 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2729 : string = null |> unbox<string>
                    let _run_target_args'_v2644 = v2729 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2733 : string = null |> unbox<string>
                    let _run_target_args'_v2644 = v2733 
                    #endif
#else
                    let v2736 : string = v2436 |> System.IO.File.ReadAllText
                    let _run_target_args'_v2644 = v2736 
                    #endif
                    let v2737 : string = _run_target_args'_v2644 
                    let v2743 : string = method31()
                    let v2744 : US5 = method32(v2743)
                    let v2750 : US5 =
                        match v2744 with
                        | US5_1 -> (* None *)
                            let v2747 : string = __SOURCE_DIRECTORY__
                            method32(v2747)
                        | US5_0(v2745) -> (* Some *)
                            US5_0(v2745)
                    let v2756 : US5 =
                        match v2750 with
                        | US5_1 -> (* None *)
                            let v2753 : string = "/workspaces"
                            method32(v2753)
                        | US5_0(v2751) -> (* Some *)
                            US5_0(v2751)
                    let v2760 : string =
                        match v2756 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v2757) -> (* Some *)
                            v2757
                    let v2761 : string = method50(v2760)
                    let v2762 : bool = "deps" = v2761
                    let v2773 : string =
                        if v2762 then
                            let v2763 : string option = method38(v2760)
                            let v2765 : string = v2763 |> Option.get
                            let v2768 : US5 = method32(v2765)
                            match v2768 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v2769) -> (* Some *)
                                v2769
                        else
                            v2760
                    let v2774 : string = "polyglot"
                    let v2775 : string = method33(v2773, v2774)
                    let v2776 : string = method31()
                    let v2778 : (unit -> string) = v2776.ToLower
                    let v2779 : string = v2778 ()
                    let v2783 : (unit -> string) = v2775.ToLower
                    let v2784 : string = v2783 ()
                    let v2788 : bool = v2779.StartsWith (v2784, false, null)
                    let v2793 : US13 =
                        if v2788 then
                            US13_1(v2784)
                        else
                            US13_0(v2784)
                    let v2805 : Result<string, string> =
                        match v2793 with
                        | US13_1(v2799) -> (* Error *)
                            let v2801 : Result<string, string> = Error v2799 
                            v2801
                        | US13_0(v2794) -> (* Ok *)
                            let v2796 : Result<string, string> = Ok v2794 
                            v2796
                    let v2806 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v2807 : bool = Fable.Core.RustInterop.emitRustExpr v2805 v2806 
                    let v2808 : string = "x"
                    let v2809 : string = Fable.Core.RustInterop.emitRustExpr () v2808 
                    let v2810 : string = "true; $0 })"
                    let v2811 : bool = Fable.Core.RustInterop.emitRustExpr v2809 v2810 
                    let v2812 : string = "_result_unwrap_or_else"
                    let v2813 : string = Fable.Core.RustInterop.emitRustExpr () v2812 
                    let v2814 : string option = method38(v2436)
                    let v2817 : string = ""
                    let v2818 : string = v2814 |> Option.defaultValue v2817 
                    let v2826 : string =
                        match v2569 with
                        | US38_0 -> (* Pip *)
                            let v2821 : string = "requirements.txt"
                            method33(v2818, v2821)
                        | US38_1 -> (* Poetry *)
                            let v2823 : string = "pyproject.toml"
                            method33(v2818, v2823)
                    let v2827 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v2828 : bool = Fable.Core.RustInterop.emitRustExpr v2639 v2827 
                    let v2829 : string = "x"
                    let v2830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2829 
                    let v2831 : string = "fable_library_rust::String_::fromString($0)"
                    let v2832 : string = Fable.Core.RustInterop.emitRustExpr v2830 v2831 
                    let v2835 : string = "="
                    let v2836 : bool = v2832.Contains v2835 
                    let v2851 : string =
                        if v2836 then
                            v2832
                        else
                            let v2841 : string = "]"
                            let v2842 : bool = v2832.EndsWith (v2841, false, null)
                            if v2842 then
                                let v2845 : string = $"={{version='*',features=["
                                let v2846 : string = "["
                                let v2847 : string = v2832.Replace (v2846, v2845)
                                let v2848 : string = $"{v2847}}}"
                                v2848
                            else
                                let v2849 : string = $"{v2832}='*'"
                                v2849
                    let v2852 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v2853 : bool = Fable.Core.RustInterop.emitRustExpr v2851 v2852 
                    let v2854 : string = "_vec_map"
                    let v2855 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2854 
                    let v2856 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v2857 : (string []) = Fable.Core.RustInterop.emitRustExpr v2855 v2856 
                    let v2862 : unit = ()
                    let _let'_v2862 =
                        seq {
                            for i = 0 to v2857.Length - 1 do yield v2857.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v2865 : string seq = _let'_v2862 
                    let v2873 : string = method69()
                    let v2874 : (string -> (string seq -> string)) = String.concat
                    let v2875 : (string seq -> string) = v2874 v2873
                    let v2876 : string = v2875 v2865
                    let v2880 : bool = v2876 = ""
                    let struct (v3022 : int32, v3023 : string) =
                        if v2880 then
                            struct (0, v2817)
                        else
                            let v2993 : string =
                                match v2569 with
                                | US38_0 -> (* Pip *)
                                    v2876
                                | US38_1 -> (* Poetry *)
                                    let v2881 : string = $"[tool.poetry]"
                                    let v2882 : string = $"name = \"test\""
                                    let v2885 : string = "\n"
                                    let v2886 : string = v2881 + v2885 
                                    let v2890 : string = v2886 + v2882 
                                    let v2893 : string = $"version = \"0.0.1\""
                                    let v2895 : string = v2890 + v2885 
                                    let v2899 : string = v2895 + v2893 
                                    let v2902 : string = $"description = \"\""
                                    let v2904 : string = v2899 + v2885 
                                    let v2908 : string = v2904 + v2902 
                                    let v2911 : string = $"authors = []"
                                    let v2913 : string = v2908 + v2885 
                                    let v2917 : string = v2913 + v2911 
                                    let v2920 : string = $""
                                    let v2922 : string = v2917 + v2885 
                                    let v2926 : string = v2922 + v2920 
                                    let v2929 : string = $"[tool.poetry.dependencies]"
                                    let v2931 : string = v2926 + v2885 
                                    let v2935 : string = v2931 + v2929 
                                    let v2938 : string = $"python=\"~3.12\""
                                    let v2940 : string = v2935 + v2885 
                                    let v2944 : string = v2940 + v2938 
                                    let v2947 : string = $"{v2876}"
                                    let v2949 : string = v2944 + v2885 
                                    let v2953 : string = v2949 + v2947 
                                    let v2956 : string = $""
                                    let v2958 : string = v2953 + v2885 
                                    let v2962 : string = v2958 + v2956 
                                    let v2965 : string = $"[build-system]"
                                    let v2967 : string = v2962 + v2885 
                                    let v2971 : string = v2967 + v2965 
                                    let v2974 : string = $"requires = [\"poetry-core\"]"
                                    let v2976 : string = v2971 + v2885 
                                    let v2980 : string = v2976 + v2974 
                                    let v2983 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v2985 : string = v2980 + v2885 
                                    let v2989 : string = v2985 + v2983 
                                    v2989
                            method70(v2826, v2993)
                            let v2995 : System.Threading.CancellationToken option = None
                            let v2998 : (struct (string * string) []) = [||]
                            let v3000 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v3004 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v3008 : string option = None
                            let v3014 : string =
                                match v2569 with
                                | US38_0 -> (* Pip *)
                                    let v3011 : string = $"pip install -r requirements.txt"
                                    v3011
                                | US38_1 -> (* Poetry *)
                                    let v3012 : string = $"poetry install"
                                    v3012
                            let v3016 : string option = Some v2818 
                            let v3019 : bool = true
                            method91(v3014, v2995, v2998, v3000, v3004, v3019, v3016)
                    let v3025 : bool = v3022 <> 0 
                    let struct (v3376 : US5, v3377 : US5, v3378 : US5, v3379 : US5) =
                        if v3025 then
                            let v3088 : unit = ()
                            let v3089 : (unit -> unit) = closure77(v2569, v2436, v3023, v3022)
                            let v3090 : unit = (fun () -> v3089 (); v3088) ()
                            let v3151 : string = "py"
                            let v3152 : US5 = US5_0(v3151)
                            let v3153 : US5 = US5_1
                            let v3154 : US5 = US5_1
                            let v3155 : US5 = US5_1
                            struct (v3152, v3153, v3154, v3155)
                        else
                            let v3159 : string =
                                match v2569 with
                                | US38_0 -> (* Pip *)
                                    let v3156 : string = $"python \"{v2436}\""
                                    v3156
                                | US38_1 -> (* Poetry *)
                                    let v3157 : string = $"poetry run python \"{v2436}\""
                                    v3157
                            let v3160 : string = "TRACE_LEVEL"
                            let v3161 : string = "Verbose"
                            let v3162 : (struct (string * string) []) = [|struct (v3160, v3161)|]
                            let v3164 : System.Threading.CancellationToken option = None
                            let v3167 : (struct (string * string) []) = [||]
                            let v3169 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v3173 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v3177 : string option = None
                            let v3181 : string option = Some v2818 
                            let v3184 : bool = true
                            let struct (v3185 : int32, v3186 : string) = method91(v3159, v3164, v3162, v3169, v3173, v3184, v3181)
                            let v3187 : int32 = v3162.Length
                            let v3188 : (string []) = Array.zeroCreate<string> (v3187)
                            let v3189 : Mut5 = {l0 = 0} : Mut5
                            while method29(v3187, v3189) do
                                let v3191 : int32 = v3189.l0
                                let struct (v3192 : string, v3193 : string) = v3162.[int v3191]
                                let v3194 : string = $"$env:{v3192}=''{v3193}''"
                                v3188.[int v3191] <- v3194
                                let v3195 : int32 = v3191 + 1
                                v3189.l0 <- v3195
                                ()
                            let v3197 : string seq = v3188 |> Seq.ofArray
                            let v3202 : (string -> (string seq -> string)) = String.concat
                            let v3203 : string = ";"
                            let v3204 : (string seq -> string) = v3202 v3203
                            let v3205 : string = v3204 v3197
                            let v3208 : string = $"pwsh -c '{v3205}; {v3159}'"
                            let v3209 : bool = v3185 = 0
                            let v3216 : bool =
                                if v3209 then
                                    true
                                else
                                    let v3212 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v3213 : bool = v3186.Contains v3212 
                                    v3213
                            let struct (v3372 : US5, v3373 : US5, v3374 : US5, v3375 : US5) =
                                if v3216 then
                                    let v3217 : (string -> US5) = closure72()
                                    let v3218 : (unit -> string) = closure78(v3186)
                                    let v3219 : (exn -> US5) = closure79(v2436, v3186, v3208)
                                    let v3221 : US5 = US5_1
                                    let result = ref v3221
                                    try
                                        result.Value <- v3218 () |> v3217 
                                    with ex ->
                                        result.Value <- v3219 ex 
                                    let v3222 : US5 = result.Value
                                    let v3236 : string option =
                                        match v3222 with
                                        | US5_1 -> (* None *)
                                            let v3232 : string option = None
                                            v3232
                                        | US5_0(v3226) -> (* Some *)
                                            let v3228 : string option = Some v3226 
                                            v3228
                                    let v3237 : string = "$0.unwrap()"
                                    let v3238 : string = Fable.Core.RustInterop.emitRustExpr v3236 v3237 
                                    let v3239 : string = "py"
                                    let v3240 : US5 = US5_0(v3239)
                                    let v3241 : US5 = US5_0(v2737)
                                    let v3242 : US5 = US5_0(v2436)
                                    let v3243 : US5 = US5_0(v3238)
                                    struct (v3240, v3241, v3242, v3243)
                                else
                                    let v3304 : unit = ()
                                    let v3305 : (unit -> unit) = closure81(v2436, v3186, v3185, v3208)
                                    let v3306 : unit = (fun () -> v3305 (); v3304) ()
                                    let v3367 : string = "py"
                                    let v3368 : US5 = US5_0(v3367)
                                    let v3369 : US5 = US5_1
                                    let v3370 : US5 = US5_1
                                    let v3371 : US5 = US5_1
                                    struct (v3368, v3369, v3370, v3371)
                            struct (v3372, v3373, v3374, v3375)
                    let v3382 : string =
                        match v3376 with
                        | US5_1 -> (* None *)
                            v2817
                        | US5_0(v3380) -> (* Some *)
                            v3380
                    let v3383 : string = "extension"
                    let v3386 : string =
                        match v3377 with
                        | US5_1 -> (* None *)
                            v2817
                        | US5_0(v3384) -> (* Some *)
                            v3384
                    let v3387 : string = "code"
                    let v3390 : string =
                        match v3379 with
                        | US5_1 -> (* None *)
                            v2817
                        | US5_0(v3388) -> (* Some *)
                            v3388
                    let v3391 : string = "output"
                    let v3392 : (struct (string * string) []) = [|struct (v3383, v3382); struct (v3387, v3386); struct (v3391, v3390)|]
                    let v3393 : string = "$0.to_vec()"
                    let v3394 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3392 v3393 
                    let v3395 : unit = ()
                    let v3396 : string = $"true; let _func1_from_v3395 = Func1::from(move |value| {{ //"
                    let v3397 : bool = Fable.Core.RustInterop.emitRustExpr () v3396 
                    let v3398 : string = $"value"
                    let struct (v3399 : string, v3400 : string) = Fable.Core.RustInterop.emitRustExpr () v3398 
                    (* run_target_args'
                    let v3405 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3406 : string = "&*$0"
                    let v3407 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3399 v3406 
                    let _run_target_args'_v3405 = v3407 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3408 : string = "&*$0"
                    let v3409 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3399 v3408 
                    let _run_target_args'_v3405 = v3409 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3410 : string = "&*$0"
                    let v3411 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3399 v3410 
                    let _run_target_args'_v3405 = v3411 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3413 : Ref<Str> = v3399 |> unbox<Ref<Str>>
                    let _run_target_args'_v3405 = v3413 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3417 : Ref<Str> = v3399 |> unbox<Ref<Str>>
                    let _run_target_args'_v3405 = v3417 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3421 : Ref<Str> = v3399 |> unbox<Ref<Str>>
                    let _run_target_args'_v3405 = v3421 
                    #endif
#else
                    let v3425 : Ref<Str> = v3399 |> unbox<Ref<Str>>
                    let _run_target_args'_v3405 = v3425 
                    #endif
                    let v3428 : Ref<Str> = _run_target_args'_v3405 
                    (* run_target_args'
                    let v3438 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3439 : string = "String::from($0)"
                    let v3440 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3428 v3439 
                    let _run_target_args'_v3438 = v3440 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3441 : string = "String::from($0)"
                    let v3442 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3428 v3441 
                    let _run_target_args'_v3438 = v3442 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3443 : string = "String::from($0)"
                    let v3444 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3428 v3443 
                    let _run_target_args'_v3438 = v3444 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3446 : std_string_String = v3428 |> unbox<std_string_String>
                    let _run_target_args'_v3438 = v3446 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3450 : std_string_String = v3428 |> unbox<std_string_String>
                    let _run_target_args'_v3438 = v3450 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3454 : std_string_String = v3428 |> unbox<std_string_String>
                    let _run_target_args'_v3438 = v3454 
                    #endif
#else
                    let v3458 : std_string_String = v3428 |> unbox<std_string_String>
                    let _run_target_args'_v3438 = v3458 
                    #endif
                    let v3461 : std_string_String = _run_target_args'_v3438 
                    (* run_target_args'
                    let v3471 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3472 : string = "&*$0"
                    let v3473 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3400 v3472 
                    let _run_target_args'_v3471 = v3473 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3474 : string = "&*$0"
                    let v3475 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3400 v3474 
                    let _run_target_args'_v3471 = v3475 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3476 : string = "&*$0"
                    let v3477 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3400 v3476 
                    let _run_target_args'_v3471 = v3477 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3479 : Ref<Str> = v3400 |> unbox<Ref<Str>>
                    let _run_target_args'_v3471 = v3479 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3483 : Ref<Str> = v3400 |> unbox<Ref<Str>>
                    let _run_target_args'_v3471 = v3483 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3487 : Ref<Str> = v3400 |> unbox<Ref<Str>>
                    let _run_target_args'_v3471 = v3487 
                    #endif
#else
                    let v3491 : Ref<Str> = v3400 |> unbox<Ref<Str>>
                    let _run_target_args'_v3471 = v3491 
                    #endif
                    let v3494 : Ref<Str> = _run_target_args'_v3471 
                    (* run_target_args'
                    let v3504 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3505 : string = "String::from($0)"
                    let v3506 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3494 v3505 
                    let _run_target_args'_v3504 = v3506 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3507 : string = "String::from($0)"
                    let v3508 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3494 v3507 
                    let _run_target_args'_v3504 = v3508 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3509 : string = "String::from($0)"
                    let v3510 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3494 v3509 
                    let _run_target_args'_v3504 = v3510 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3512 : std_string_String = v3494 |> unbox<std_string_String>
                    let _run_target_args'_v3504 = v3512 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3516 : std_string_String = v3494 |> unbox<std_string_String>
                    let _run_target_args'_v3504 = v3516 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3520 : std_string_String = v3494 |> unbox<std_string_String>
                    let _run_target_args'_v3504 = v3520 
                    #endif
#else
                    let v3524 : std_string_String = v3494 |> unbox<std_string_String>
                    let _run_target_args'_v3504 = v3524 
                    #endif
                    let v3527 : std_string_String = _run_target_args'_v3504 
                    let v3534 : (std_string_String * std_string_String) = v3461, v3527 
                    let func1_from_result = v3534 //
                    let v3537 : _ = func1_from_result
                    let v3538 : string = $"true; $0 /*"
                    let v3539 : bool = Fable.Core.RustInterop.emitRustExpr v3537 v3538 
                    let v3540 : string = $"*/ }}); //"
                    let v3541 : bool = Fable.Core.RustInterop.emitRustExpr () v3540 
                    let v3542 : string = $"_func1_from_v3395"
                    let v3543 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v3542 
                    let v3544 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v3545 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v3543)
                    let v3546 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v3394, v3545) v3544 
                    let v3547 : string = "std::collections::BTreeMap::from_iter(v3546.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v3548 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3547 
                    let v3549 : string = "serde_json::to_string(&v3548)"
                    let v3550 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v3549 
                    (* run_target_args'
                    let v3552 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3553 : string = "$0.unwrap()"
                    let v3554 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3550 v3553 
                    let _run_target_args'_v3552 = v3554 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3555 : string = "$0.unwrap()"
                    let v3556 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3550 v3555 
                    let _run_target_args'_v3552 = v3556 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3557 : string = "$0.unwrap()"
                    let v3558 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3550 v3557 
                    let _run_target_args'_v3552 = v3558 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3559 : std_string_String = match v3550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3552 = v3559 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3560 : std_string_String = match v3550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3552 = v3560 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3561 : std_string_String = match v3550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3552 = v3561 
                    #endif
#else
                    let v3562 : std_string_String = match v3550 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v3552 = v3562 
                    #endif
                    let v3563 : std_string_String = _run_target_args'_v3552 
                    let v3566 : string = "fable_library_rust::String_::fromString($0)"
                    let v3567 : string = Fable.Core.RustInterop.emitRustExpr v3563 v3566 
                    let v3568 : string = "command_result"
                    [|struct (v3568, v3567)|]
                else
                    let v3570 : string = "fable_library_rust::String_::fromString($0)"
                    let v3571 : string = Fable.Core.RustInterop.emitRustExpr v40 v3570 
                    let v3572 : bool = v3571 = "fable"
                    if v3572 then
                        let v3573 : string = method168()
                        (* run_target_args'
                        let v3578 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3579 : string = "&*$0"
                        let v3580 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3573 v3579 
                        let _run_target_args'_v3578 = v3580 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3581 : string = "&*$0"
                        let v3582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3573 v3581 
                        let _run_target_args'_v3578 = v3582 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3583 : string = "&*$0"
                        let v3584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3573 v3583 
                        let _run_target_args'_v3578 = v3584 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3586 : Ref<Str> = v3573 |> unbox<Ref<Str>>
                        let _run_target_args'_v3578 = v3586 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3590 : Ref<Str> = v3573 |> unbox<Ref<Str>>
                        let _run_target_args'_v3578 = v3590 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3594 : Ref<Str> = v3573 |> unbox<Ref<Str>>
                        let _run_target_args'_v3578 = v3594 
                        #endif
#else
                        let v3598 : Ref<Str> = v3573 |> unbox<Ref<Str>>
                        let _run_target_args'_v3578 = v3598 
                        #endif
                        let v3601 : Ref<Str> = _run_target_args'_v3578 
                        let v3607 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v3608 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3601) v3607 
                        let v3611 : (std_string_String -> US7) = method21()
                        let v3612 : US7 option = v3608 |> Option.map v3611 
                        let v3632 : US7 = US7_1
                        let v3633 : US7 = v3612 |> Option.defaultValue v3632 
                        let v3640 : std_string_String =
                            match v3633 with
                            | US7_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US7_0(v3637) -> (* Some *)
                                v3637
                        let v3641 : string = "fable_library_rust::String_::fromString($0)"
                        let v3642 : string = Fable.Core.RustInterop.emitRustExpr v3640 v3641 
                        let v3643 : string = method169()
                        (* run_target_args'
                        let v3648 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3649 : string = "&*$0"
                        let v3650 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3643 v3649 
                        let _run_target_args'_v3648 = v3650 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3651 : string = "&*$0"
                        let v3652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3643 v3651 
                        let _run_target_args'_v3648 = v3652 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3653 : string = "&*$0"
                        let v3654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3643 v3653 
                        let _run_target_args'_v3648 = v3654 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3656 : Ref<Str> = v3643 |> unbox<Ref<Str>>
                        let _run_target_args'_v3648 = v3656 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3660 : Ref<Str> = v3643 |> unbox<Ref<Str>>
                        let _run_target_args'_v3648 = v3660 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3664 : Ref<Str> = v3643 |> unbox<Ref<Str>>
                        let _run_target_args'_v3648 = v3664 
                        #endif
#else
                        let v3668 : Ref<Str> = v3643 |> unbox<Ref<Str>>
                        let _run_target_args'_v3648 = v3668 
                        #endif
                        let v3671 : Ref<Str> = _run_target_args'_v3648 
                        let v3677 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v3678 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3671) v3677 
                        let v3681 : (std_string_String -> US7) = method21()
                        let v3682 : US7 option = v3678 |> Option.map v3681 
                        let v3702 : US7 = US7_1
                        let v3703 : US7 = v3682 |> Option.defaultValue v3702 
                        let v3713 : US5 =
                            match v3703 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v3707) -> (* Some *)
                                let v3708 : string = "fable_library_rust::String_::fromString($0)"
                                let v3709 : string = Fable.Core.RustInterop.emitRustExpr v3707 v3708 
                                US5_0(v3709)
                        let v3825 : string =
                            match v3713 with
                            | US5_1 -> (* None *)
                                let v3823 : string = "{}"
                                v3823
                            | US5_0(v3714) -> (* Some *)
                                let v3715 : clap_Command = method0()
                                let v3716 : string = $"_ {v3714} --fs-path \"{v3642}\""
                                let v3717 : US25 = method106(v3716)
                                let v3726 : (string []) =
                                    match v3717 with
                                    | US25_1(v3719) -> (* Error *)
                                        let v3721 : string = $"resultm.get / Result value was Error: {v3719}"
                                        failwith<(string [])> v3721
                                    | US25_0(v3718) -> (* Ok *)
                                        v3718
                                let v3727 : string = "$0.to_vec()"
                                let v3728 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v3726 v3727 
                                let v3729 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v3730 : bool = Fable.Core.RustInterop.emitRustExpr v3728 v3729 
                                let v3731 : string = "x"
                                let v3732 : string = Fable.Core.RustInterop.emitRustExpr () v3731 
                                (* run_target_args'
                                let v3737 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3738 : string = "&*$0"
                                let v3739 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3732 v3738 
                                let _run_target_args'_v3737 = v3739 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3740 : string = "&*$0"
                                let v3741 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3732 v3740 
                                let _run_target_args'_v3737 = v3741 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3742 : string = "&*$0"
                                let v3743 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3732 v3742 
                                let _run_target_args'_v3737 = v3743 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3745 : Ref<Str> = v3732 |> unbox<Ref<Str>>
                                let _run_target_args'_v3737 = v3745 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3749 : Ref<Str> = v3732 |> unbox<Ref<Str>>
                                let _run_target_args'_v3737 = v3749 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3753 : Ref<Str> = v3732 |> unbox<Ref<Str>>
                                let _run_target_args'_v3737 = v3753 
                                #endif
#else
                                let v3757 : Ref<Str> = v3732 |> unbox<Ref<Str>>
                                let _run_target_args'_v3737 = v3757 
                                #endif
                                let v3760 : Ref<Str> = _run_target_args'_v3737 
                                (* run_target_args'
                                let v3770 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3771 : string = "String::from($0)"
                                let v3772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3760 v3771 
                                let _run_target_args'_v3770 = v3772 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3773 : string = "String::from($0)"
                                let v3774 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3760 v3773 
                                let _run_target_args'_v3770 = v3774 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3775 : string = "String::from($0)"
                                let v3776 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3760 v3775 
                                let _run_target_args'_v3770 = v3776 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3778 : std_string_String = v3760 |> unbox<std_string_String>
                                let _run_target_args'_v3770 = v3778 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3782 : std_string_String = v3760 |> unbox<std_string_String>
                                let _run_target_args'_v3770 = v3782 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3786 : std_string_String = v3760 |> unbox<std_string_String>
                                let _run_target_args'_v3770 = v3786 
                                #endif
#else
                                let v3790 : std_string_String = v3760 |> unbox<std_string_String>
                                let _run_target_args'_v3770 = v3790 
                                #endif
                                let v3793 : std_string_String = _run_target_args'_v3770 
                                let v3799 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v3800 : bool = Fable.Core.RustInterop.emitRustExpr v3793 v3799 
                                let v3801 : string = "_vec_map"
                                let v3802 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3801 
                                let v3803 : string = "clap::Command::get_matches_from($0, v3802)"
                                let v3804 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v3715 v3803 
                                let v3805 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v0, v3804)
                                let v3806 : string = "v3805.await"
                                let v3807 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v3806 
                                (* run_target_args'
                                let v3809 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3810 : string = "$0.unwrap()"
                                let v3811 : string = Fable.Core.RustInterop.emitRustExpr v3807 v3810 
                                let _run_target_args'_v3809 = v3811 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3812 : string = "$0.unwrap()"
                                let v3813 : string = Fable.Core.RustInterop.emitRustExpr v3807 v3812 
                                let _run_target_args'_v3809 = v3813 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3814 : string = "$0.unwrap()"
                                let v3815 : string = Fable.Core.RustInterop.emitRustExpr v3807 v3814 
                                let _run_target_args'_v3809 = v3815 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3816 : string = match v3807 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3809 = v3816 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3817 : string = match v3807 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3809 = v3817 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3818 : string = match v3807 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3809 = v3818 
                                #endif
#else
                                let v3819 : string = match v3807 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v3809 = v3819 
                                #endif
                                let v3820 : string = _run_target_args'_v3809 
                                v3820
                        let v3826 : string = "command_result"
                        [|struct (v3826, v3825)|]
                    else
                        let v3828 : string = "fable_library_rust::String_::fromString($0)"
                        let v3829 : string = Fable.Core.RustInterop.emitRustExpr v40 v3828 
                        let v3830 : bool = v3829 = "dib"
                        if v3830 then
                            let v3831 : string = method170()
                            (* run_target_args'
                            let v3836 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3837 : string = "&*$0"
                            let v3838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3831 v3837 
                            let _run_target_args'_v3836 = v3838 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3839 : string = "&*$0"
                            let v3840 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3831 v3839 
                            let _run_target_args'_v3836 = v3840 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3841 : string = "&*$0"
                            let v3842 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3831 v3841 
                            let _run_target_args'_v3836 = v3842 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3844 : Ref<Str> = v3831 |> unbox<Ref<Str>>
                            let _run_target_args'_v3836 = v3844 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3848 : Ref<Str> = v3831 |> unbox<Ref<Str>>
                            let _run_target_args'_v3836 = v3848 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3852 : Ref<Str> = v3831 |> unbox<Ref<Str>>
                            let _run_target_args'_v3836 = v3852 
                            #endif
#else
                            let v3856 : Ref<Str> = v3831 |> unbox<Ref<Str>>
                            let _run_target_args'_v3836 = v3856 
                            #endif
                            let v3859 : Ref<Str> = _run_target_args'_v3836 
                            let v3865 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v3866 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3859) v3865 
                            let v3869 : (std_string_String -> string) = method171()
                            let v3870 : string option = v3866 |> Option.map v3869 
                            let v3890 : string = "$0.unwrap()"
                            let v3891 : string = Fable.Core.RustInterop.emitRustExpr v3870 v3890 
                            let v3892 : string = method173()
                            (* run_target_args'
                            let v3897 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3898 : string = "&*$0"
                            let v3899 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3892 v3898 
                            let _run_target_args'_v3897 = v3899 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3900 : string = "&*$0"
                            let v3901 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3892 v3900 
                            let _run_target_args'_v3897 = v3901 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3902 : string = "&*$0"
                            let v3903 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3892 v3902 
                            let _run_target_args'_v3897 = v3903 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3905 : Ref<Str> = v3892 |> unbox<Ref<Str>>
                            let _run_target_args'_v3897 = v3905 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3909 : Ref<Str> = v3892 |> unbox<Ref<Str>>
                            let _run_target_args'_v3897 = v3909 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3913 : Ref<Str> = v3892 |> unbox<Ref<Str>>
                            let _run_target_args'_v3897 = v3913 
                            #endif
#else
                            let v3917 : Ref<Str> = v3892 |> unbox<Ref<Str>>
                            let _run_target_args'_v3897 = v3917 
                            #endif
                            let v3920 : Ref<Str> = _run_target_args'_v3897 
                            let v3926 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v3927 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3920) v3926 
                            let v3929 : uint8 = v3927 |> Option.defaultValue 1uy 
                            let v3932 : string = method174()
                            (* run_target_args'
                            let v3937 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3938 : string = "&*$0"
                            let v3939 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3932 v3938 
                            let _run_target_args'_v3937 = v3939 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3940 : string = "&*$0"
                            let v3941 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3932 v3940 
                            let _run_target_args'_v3937 = v3941 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3942 : string = "&*$0"
                            let v3943 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3932 v3942 
                            let _run_target_args'_v3937 = v3943 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3945 : Ref<Str> = v3932 |> unbox<Ref<Str>>
                            let _run_target_args'_v3937 = v3945 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3949 : Ref<Str> = v3932 |> unbox<Ref<Str>>
                            let _run_target_args'_v3937 = v3949 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3953 : Ref<Str> = v3932 |> unbox<Ref<Str>>
                            let _run_target_args'_v3937 = v3953 
                            #endif
#else
                            let v3957 : Ref<Str> = v3932 |> unbox<Ref<Str>>
                            let _run_target_args'_v3937 = v3957 
                            #endif
                            let v3960 : Ref<Str> = _run_target_args'_v3937 
                            let v3966 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v3967 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3960) v3966 
                            let v3970 : (std_string_String -> US7) = method21()
                            let v3971 : US7 option = v3967 |> Option.map v3970 
                            let v3991 : US7 = US7_1
                            let v3992 : US7 = v3971 |> Option.defaultValue v3991 
                            let v4002 : US5 =
                                match v3992 with
                                | US7_1 -> (* None *)
                                    US5_1
                                | US7_0(v3996) -> (* Some *)
                                    let v3997 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3998 : string = Fable.Core.RustInterop.emitRustExpr v3996 v3997 
                                    US5_0(v3998)
                            let v4003 : uint8 = 1uy
                            let struct (v4004 : int32, v4005 : string) = method175(v4002, v3929, v3891, v4003)
                            let v4007 : bool = v4004 <> 0 
                            let struct (v4534 : int32, v4535 : string) =
                                if v4007 then
                                    struct (v4004, v4005)
                                else
                                    let v4011 : System.Threading.CancellationToken option = None
                                    let v4014 : (struct (string * string) []) = [||]
                                    let v4016 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v4020 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v4024 : string option = None
                                    let v4027 : string = $"jupyter nbconvert \"{v3891}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v4028 : bool = true
                                    let struct (v4029 : int32, v4030 : string) = method91(v4027, v4011, v4014, v4016, v4020, v4028, v4024)
                                    let v4092 : unit = ()
                                    let v4093 : (unit -> unit) = closure84(v4030, v4029)
                                    let v4094 : unit = (fun () -> v4093 (); v4092) ()
                                    let v4157 : bool = v4029 <> 0 
                                    if v4157 then
                                        let v4160 : string = $"repl_result: {v4005}

jupyter_result: {v4030}"
                                        struct (v4029, v4160)
                                    else
                                        let v4161 : string = "'"
                                        let v4162 : string = "''"
                                        let v4163 : string = v3891.Replace (v4161, v4162)
                                        let v4165 : System.Threading.CancellationToken option = None
                                        let v4168 : (struct (string * string) []) = [||]
                                        let v4170 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v4174 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v4178 : string option = None
                                        let v4181 : string = $"pwsh -c \"$counter = 1; $path = '{v4163}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v4182 : bool = true
                                        let struct (v4183 : int32, v4184 : string) = method91(v4181, v4165, v4168, v4170, v4174, v4182, v4178)
                                        let v4246 : unit = ()
                                        let v4247 : (unit -> unit) = closure85(v4184, v4183)
                                        let v4248 : unit = (fun () -> v4247 (); v4246) ()
                                        let v4310 : string = $"{v3891}.html"
                                        (* run_target_args'
                                        let v4315 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v4320 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4321 : string = "std::fs::read(&*$0)"
                                        let v4322 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4310 v4321 
                                        (* run_target_args'
                                        let v4324 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4325 : string = "$0.unwrap()"
                                        let v4326 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4322 v4325 
                                        let _run_target_args'_v4324 = v4326 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4327 : string = "$0.unwrap()"
                                        let v4328 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4322 v4327 
                                        let _run_target_args'_v4324 = v4328 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4329 : string = "$0.unwrap()"
                                        let v4330 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4322 v4329 
                                        let _run_target_args'_v4324 = v4330 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4331 : Vec<uint8> = match v4322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4324 = v4331 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4332 : Vec<uint8> = match v4322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4324 = v4332 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4333 : Vec<uint8> = match v4322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4324 = v4333 
                                        #endif
#else
                                        let v4334 : Vec<uint8> = match v4322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4324 = v4334 
                                        #endif
                                        let v4335 : Vec<uint8> = _run_target_args'_v4324 
                                        let _run_target_args'_v4320 = v4335 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4339 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4320 = v4339 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4343 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4320 = v4343 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4347 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4320 = v4347 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4351 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4320 = v4351 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4355 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4320 = v4355 
                                        #endif
#else
                                        let v4358 : (uint8 []) = v4310 |> System.IO.File.ReadAllBytes
                                        let v4359 : string = "$0.to_vec()"
                                        let v4360 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4358 v4359 
                                        let _run_target_args'_v4320 = v4360 
                                        #endif
                                        let v4361 : Vec<uint8> = _run_target_args'_v4320 
                                        let v4367 : Vec<uint8> = method25(v4361)
                                        let v4368 : string = "std::string::String::from_utf8($0)"
                                        let v4369 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4367 v4368 
                                        (* run_target_args'
                                        let v4371 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4372 : string = "$0.unwrap()"
                                        let v4373 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4369 v4372 
                                        let _run_target_args'_v4371 = v4373 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4374 : string = "$0.unwrap()"
                                        let v4375 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4369 v4374 
                                        let _run_target_args'_v4371 = v4375 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4376 : string = "$0.unwrap()"
                                        let v4377 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4369 v4376 
                                        let _run_target_args'_v4371 = v4377 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4378 : std_string_String = match v4369 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4371 = v4378 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4379 : std_string_String = match v4369 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4371 = v4379 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4380 : std_string_String = match v4369 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4371 = v4380 
                                        #endif
#else
                                        let v4381 : std_string_String = match v4369 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4371 = v4381 
                                        #endif
                                        let v4382 : std_string_String = _run_target_args'_v4371 
                                        let v4385 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4386 : string = Fable.Core.RustInterop.emitRustExpr v4382 v4385 
                                        let _run_target_args'_v4315 = v4386 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4388 : string = null |> unbox<string>
                                        let _run_target_args'_v4315 = v4388 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4392 : string = null |> unbox<string>
                                        let _run_target_args'_v4315 = v4392 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4396 : string = null |> unbox<string>
                                        let _run_target_args'_v4315 = v4396 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4400 : string = null |> unbox<string>
                                        let _run_target_args'_v4315 = v4400 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4404 : string = null |> unbox<string>
                                        let _run_target_args'_v4315 = v4404 
                                        #endif
#else
                                        let v4407 : string = v4310 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v4315 = v4407 
                                        #endif
                                        let v4408 : string = _run_target_args'_v4315 
                                        let v4414 : string = "\r\n"
                                        let v4415 : string = "\n"
                                        let v4416 : string = v4408.Replace (v4414, v4415)
                                        let v4417 : string = $"{v3891}.html"
                                        (* run_target_args'
                                        let v4418 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4419 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v4417, v4416) v4419 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v4417, v4416)
                                        #endif
                                        // run_target_args' is_unit
                                        let v4420 : string = $"{v3891}.ipynb"
                                        (* run_target_args'
                                        let v4425 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v4430 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4431 : string = "std::fs::read(&*$0)"
                                        let v4432 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4420 v4431 
                                        (* run_target_args'
                                        let v4434 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4435 : string = "$0.unwrap()"
                                        let v4436 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4432 v4435 
                                        let _run_target_args'_v4434 = v4436 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4437 : string = "$0.unwrap()"
                                        let v4438 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4432 v4437 
                                        let _run_target_args'_v4434 = v4438 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4439 : string = "$0.unwrap()"
                                        let v4440 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4432 v4439 
                                        let _run_target_args'_v4434 = v4440 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4441 : Vec<uint8> = match v4432 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4434 = v4441 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4442 : Vec<uint8> = match v4432 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4434 = v4442 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4443 : Vec<uint8> = match v4432 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4434 = v4443 
                                        #endif
#else
                                        let v4444 : Vec<uint8> = match v4432 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4434 = v4444 
                                        #endif
                                        let v4445 : Vec<uint8> = _run_target_args'_v4434 
                                        let _run_target_args'_v4430 = v4445 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4449 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4430 = v4449 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4453 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4430 = v4453 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4457 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4430 = v4457 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4461 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4430 = v4461 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4465 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v4430 = v4465 
                                        #endif
#else
                                        let v4468 : (uint8 []) = v4420 |> System.IO.File.ReadAllBytes
                                        let v4469 : string = "$0.to_vec()"
                                        let v4470 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4468 v4469 
                                        let _run_target_args'_v4430 = v4470 
                                        #endif
                                        let v4471 : Vec<uint8> = _run_target_args'_v4430 
                                        let v4477 : Vec<uint8> = method25(v4471)
                                        let v4478 : string = "std::string::String::from_utf8($0)"
                                        let v4479 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4477 v4478 
                                        (* run_target_args'
                                        let v4481 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4482 : string = "$0.unwrap()"
                                        let v4483 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4479 v4482 
                                        let _run_target_args'_v4481 = v4483 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4484 : string = "$0.unwrap()"
                                        let v4485 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4479 v4484 
                                        let _run_target_args'_v4481 = v4485 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4486 : string = "$0.unwrap()"
                                        let v4487 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4479 v4486 
                                        let _run_target_args'_v4481 = v4487 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4488 : std_string_String = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4481 = v4488 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4489 : std_string_String = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4481 = v4489 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4490 : std_string_String = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4481 = v4490 
                                        #endif
#else
                                        let v4491 : std_string_String = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v4481 = v4491 
                                        #endif
                                        let v4492 : std_string_String = _run_target_args'_v4481 
                                        let v4495 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4496 : string = Fable.Core.RustInterop.emitRustExpr v4492 v4495 
                                        let _run_target_args'_v4425 = v4496 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4498 : string = null |> unbox<string>
                                        let _run_target_args'_v4425 = v4498 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4502 : string = null |> unbox<string>
                                        let _run_target_args'_v4425 = v4502 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4506 : string = null |> unbox<string>
                                        let _run_target_args'_v4425 = v4506 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4510 : string = null |> unbox<string>
                                        let _run_target_args'_v4425 = v4510 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4514 : string = null |> unbox<string>
                                        let _run_target_args'_v4425 = v4514 
                                        #endif
#else
                                        let v4517 : string = v4420 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v4425 = v4517 
                                        #endif
                                        let v4518 : string = _run_target_args'_v4425 
                                        let v4524 : string = v4518.Replace (v4414, v4415)
                                        let v4525 : string = "\\r\\n"
                                        let v4526 : string = "\\n"
                                        let v4527 : string = v4524.Replace (v4525, v4526)
                                        let v4528 : string = $"{v3891}.ipynb"
                                        (* run_target_args'
                                        let v4529 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4530 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v4528, v4527) v4530 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v4528, v4527)
                                        #endif
                                        // run_target_args' is_unit
                                        let v4531 : string = $"repl_result: {v4005}

jupyter_result: {v4030}

pwsh_replace_html_result: {v4184}"
                                        struct (v4183, v4531)
                            let v4597 : unit = ()
                            let v4598 : (unit -> unit) = closure86(v4535, v4534)
                            let v4599 : unit = (fun () -> v4598 (); v4597) ()
                            let v4662 : bool = v4534 <> 0 
                            if v4662 then
                                let v4665 : string = $"spiral.run / dib / exit_code: {v4534} / result: {v4535}"
                                failwith<unit> v4665
                            let v4666 : string = "stdio"
                            [|struct (v4666, v4535)|]
                        else
                            let v4668 : string = "fable_library_rust::String_::fromString($0)"
                            let v4669 : string = Fable.Core.RustInterop.emitRustExpr v40 v4668 
                            let v4670 : bool = v4669 = "rust"
                            let struct (v10210 : US5, v10211 : US5, v10212 : US5, v10213 : US5) =
                                if v4670 then
                                    let v4671 : string = method168()
                                    (* run_target_args'
                                    let v4676 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4677 : string = "&*$0"
                                    let v4678 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4671 v4677 
                                    let _run_target_args'_v4676 = v4678 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4679 : string = "&*$0"
                                    let v4680 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4671 v4679 
                                    let _run_target_args'_v4676 = v4680 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4681 : string = "&*$0"
                                    let v4682 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4671 v4681 
                                    let _run_target_args'_v4676 = v4682 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4684 : Ref<Str> = v4671 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4676 = v4684 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4688 : Ref<Str> = v4671 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4676 = v4688 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4692 : Ref<Str> = v4671 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4676 = v4692 
                                    #endif
#else
                                    let v4696 : Ref<Str> = v4671 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4676 = v4696 
                                    #endif
                                    let v4699 : Ref<Str> = _run_target_args'_v4676 
                                    let v4705 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v4706 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4699) v4705 
                                    let v4709 : (std_string_String -> US7) = method21()
                                    let v4710 : US7 option = v4706 |> Option.map v4709 
                                    let v4730 : US7 = US7_1
                                    let v4731 : US7 = v4710 |> Option.defaultValue v4730 
                                    let v4738 : std_string_String =
                                        match v4731 with
                                        | US7_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US7_0(v4735) -> (* Some *)
                                            v4735
                                    let v4739 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4740 : string = Fable.Core.RustInterop.emitRustExpr v4738 v4739 
                                    let v4741 : string = method23()
                                    (* run_target_args'
                                    let v4746 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4747 : string = "&*$0"
                                    let v4748 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4741 v4747 
                                    let _run_target_args'_v4746 = v4748 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4749 : string = "&*$0"
                                    let v4750 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4741 v4749 
                                    let _run_target_args'_v4746 = v4750 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4751 : string = "&*$0"
                                    let v4752 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4741 v4751 
                                    let _run_target_args'_v4746 = v4752 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4754 : Ref<Str> = v4741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4746 = v4754 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4758 : Ref<Str> = v4741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4746 = v4758 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4762 : Ref<Str> = v4741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4746 = v4762 
                                    #endif
#else
                                    let v4766 : Ref<Str> = v4741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4746 = v4766 
                                    #endif
                                    let v4769 : Ref<Str> = _run_target_args'_v4746 
                                    let v4775 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v4776 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4769) v4775 
                                    let v4779 : (Vec<std_string_String> -> US11) = method24()
                                    let v4780 : US11 option = v4776 |> Option.map v4779 
                                    let v4800 : US11 = US11_1
                                    let v4801 : US11 = v4780 |> Option.defaultValue v4800 
                                    let v4805 : (std_string_String []) = [||]
                                    let v4806 : string = "$0.to_vec()"
                                    let v4807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4805 v4806 
                                    let v4810 : Vec<std_string_String> =
                                        match v4801 with
                                        | US11_1 -> (* None *)
                                            v4807
                                        | US11_0(v4808) -> (* Some *)
                                            v4808
                                    let v4811 : string = method180()
                                    (* run_target_args'
                                    let v4816 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4817 : string = "&*$0"
                                    let v4818 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4811 v4817 
                                    let _run_target_args'_v4816 = v4818 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4819 : string = "&*$0"
                                    let v4820 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4811 v4819 
                                    let _run_target_args'_v4816 = v4820 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4821 : string = "&*$0"
                                    let v4822 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4811 v4821 
                                    let _run_target_args'_v4816 = v4822 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4824 : Ref<Str> = v4811 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4816 = v4824 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4828 : Ref<Str> = v4811 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4816 = v4828 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4832 : Ref<Str> = v4811 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4816 = v4832 
                                    #endif
#else
                                    let v4836 : Ref<Str> = v4811 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4816 = v4836 
                                    #endif
                                    let v4839 : Ref<Str> = _run_target_args'_v4816 
                                    let v4845 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v4846 : bool = Fable.Core.RustInterop.emitRustExpr struct (v41, v4839) v4845 
                                    let v4847 : string = method181()
                                    (* run_target_args'
                                    let v4852 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4853 : string = "&*$0"
                                    let v4854 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4847 v4853 
                                    let _run_target_args'_v4852 = v4854 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4855 : string = "&*$0"
                                    let v4856 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4847 v4855 
                                    let _run_target_args'_v4852 = v4856 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4857 : string = "&*$0"
                                    let v4858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4847 v4857 
                                    let _run_target_args'_v4852 = v4858 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4860 : Ref<Str> = v4847 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4852 = v4860 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4864 : Ref<Str> = v4847 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4852 = v4864 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4868 : Ref<Str> = v4847 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4852 = v4868 
                                    #endif
#else
                                    let v4872 : Ref<Str> = v4847 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4852 = v4872 
                                    #endif
                                    let v4875 : Ref<Str> = _run_target_args'_v4852 
                                    let v4881 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v4882 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4875) v4881 
                                    let v4885 : (std_string_String -> US7) = method21()
                                    let v4886 : US7 option = v4882 |> Option.map v4885 
                                    let v4906 : US7 = US7_1
                                    let v4907 : US7 = v4886 |> Option.defaultValue v4906 
                                    let v4917 : US5 =
                                        match v4907 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v4911) -> (* Some *)
                                            let v4912 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4913 : string = Fable.Core.RustInterop.emitRustExpr v4911 v4912 
                                            US5_0(v4913)
                                    let v4918 : string = method182()
                                    (* run_target_args'
                                    let v4923 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4924 : string = "&*$0"
                                    let v4925 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4918 v4924 
                                    let _run_target_args'_v4923 = v4925 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4926 : string = "&*$0"
                                    let v4927 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4918 v4926 
                                    let _run_target_args'_v4923 = v4927 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4928 : string = "&*$0"
                                    let v4929 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4918 v4928 
                                    let _run_target_args'_v4923 = v4929 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4931 : Ref<Str> = v4918 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4923 = v4931 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4935 : Ref<Str> = v4918 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4923 = v4935 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v4939 : Ref<Str> = v4918 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4923 = v4939 
                                    #endif
#else
                                    let v4943 : Ref<Str> = v4918 |> unbox<Ref<Str>>
                                    let _run_target_args'_v4923 = v4943 
                                    #endif
                                    let v4946 : Ref<Str> = _run_target_args'_v4923 
                                    let v4952 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v4953 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4946) v4952 
                                    let v4956 : (std_string_String -> US7) = method21()
                                    let v4957 : US7 option = v4953 |> Option.map v4956 
                                    let v4977 : US7 = US7_1
                                    let v4978 : US7 = v4957 |> Option.defaultValue v4977 
                                    let v4988 : US5 =
                                        match v4978 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v4982) -> (* Some *)
                                            let v4983 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4984 : string = Fable.Core.RustInterop.emitRustExpr v4982 v4983 
                                            US5_0(v4984)
                                    let v4997 : US39 =
                                        match v4917 with
                                        | US5_0(v4989) -> (* Some *)
                                            let v4990 : US40 = US40_0(v4989)
                                            US39_0(v4990)
                                        | _ ->
                                            match v4988 with
                                            | US5_0(v4992) -> (* Some *)
                                                let v4993 : US40 = US40_1(v4992)
                                                US39_0(v4993)
                                            | _ ->
                                                US39_1
                                    (* run_target_args'
                                    let v5002 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v5007 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5008 : string = "std::fs::read(&*$0)"
                                    let v5009 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4740 v5008 
                                    (* run_target_args'
                                    let v5011 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5012 : string = "$0.unwrap()"
                                    let v5013 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5009 v5012 
                                    let _run_target_args'_v5011 = v5013 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5014 : string = "$0.unwrap()"
                                    let v5015 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5009 v5014 
                                    let _run_target_args'_v5011 = v5015 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5016 : string = "$0.unwrap()"
                                    let v5017 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5009 v5016 
                                    let _run_target_args'_v5011 = v5017 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5018 : Vec<uint8> = match v5009 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5011 = v5018 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5019 : Vec<uint8> = match v5009 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5011 = v5019 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5020 : Vec<uint8> = match v5009 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5011 = v5020 
                                    #endif
#else
                                    let v5021 : Vec<uint8> = match v5009 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5011 = v5021 
                                    #endif
                                    let v5022 : Vec<uint8> = _run_target_args'_v5011 
                                    let _run_target_args'_v5007 = v5022 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5026 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5007 = v5026 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5030 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5007 = v5030 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5034 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5007 = v5034 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5038 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5007 = v5038 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5042 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v5007 = v5042 
                                    #endif
#else
                                    let v5045 : (uint8 []) = v4740 |> System.IO.File.ReadAllBytes
                                    let v5046 : string = "$0.to_vec()"
                                    let v5047 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5045 v5046 
                                    let _run_target_args'_v5007 = v5047 
                                    #endif
                                    let v5048 : Vec<uint8> = _run_target_args'_v5007 
                                    let v5054 : Vec<uint8> = method25(v5048)
                                    let v5055 : string = "std::string::String::from_utf8($0)"
                                    let v5056 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5054 v5055 
                                    (* run_target_args'
                                    let v5058 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5059 : string = "$0.unwrap()"
                                    let v5060 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5056 v5059 
                                    let _run_target_args'_v5058 = v5060 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5061 : string = "$0.unwrap()"
                                    let v5062 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5056 v5061 
                                    let _run_target_args'_v5058 = v5062 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5063 : string = "$0.unwrap()"
                                    let v5064 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5056 v5063 
                                    let _run_target_args'_v5058 = v5064 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5065 : std_string_String = match v5056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5058 = v5065 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5066 : std_string_String = match v5056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5058 = v5066 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5067 : std_string_String = match v5056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5058 = v5067 
                                    #endif
#else
                                    let v5068 : std_string_String = match v5056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v5058 = v5068 
                                    #endif
                                    let v5069 : std_string_String = _run_target_args'_v5058 
                                    let v5072 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5073 : string = Fable.Core.RustInterop.emitRustExpr v5069 v5072 
                                    let _run_target_args'_v5002 = v5073 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5075 : string = null |> unbox<string>
                                    let _run_target_args'_v5002 = v5075 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5079 : string = null |> unbox<string>
                                    let _run_target_args'_v5002 = v5079 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5083 : string = null |> unbox<string>
                                    let _run_target_args'_v5002 = v5083 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5087 : string = null |> unbox<string>
                                    let _run_target_args'_v5002 = v5087 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v5091 : string = null |> unbox<string>
                                    let _run_target_args'_v5002 = v5091 
                                    #endif
#else
                                    let v5094 : string = v4740 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v5002 = v5094 
                                    #endif
                                    let v5095 : string = _run_target_args'_v5002 
                                    let v5101 : string = method13()
                                    let v5102 : Mut3 = {l0 = v5101} : Mut3
                                    let v5105 : string = "{ "
                                    let v5106 : string = $"{v5105}"
                                    let v5114 : unit = ()
                                    let v5115 : (unit -> unit) = closure7(v5102, v5106)
                                    let v5116 : unit = (fun () -> v5115 (); v5114) ()
                                    let v5124 : string = "extension"
                                    let v5125 : string = $"{v5124}"
                                    let v5133 : unit = ()
                                    let v5134 : (unit -> unit) = closure7(v5102, v5125)
                                    let v5135 : unit = (fun () -> v5134 (); v5133) ()
                                    let v5143 : string = " = "
                                    let v5144 : string = $"{v5143}"
                                    let v5152 : unit = ()
                                    let v5153 : (unit -> unit) = closure7(v5102, v5144)
                                    let v5154 : unit = (fun () -> v5153 (); v5152) ()
                                    let v5162 : string = "rs"
                                    let v5163 : string = $"{v5162}"
                                    let v5171 : unit = ()
                                    let v5172 : (unit -> unit) = closure7(v5102, v5163)
                                    let v5173 : unit = (fun () -> v5172 (); v5171) ()
                                    let v5181 : string = "; "
                                    let v5182 : string = $"{v5181}"
                                    let v5190 : unit = ()
                                    let v5191 : (unit -> unit) = closure7(v5102, v5182)
                                    let v5192 : unit = (fun () -> v5191 (); v5190) ()
                                    let v5200 : string = "code"
                                    let v5201 : string = $"{v5200}"
                                    let v5209 : unit = ()
                                    let v5210 : (unit -> unit) = closure7(v5102, v5201)
                                    let v5211 : unit = (fun () -> v5210 (); v5209) ()
                                    let v5218 : string = $"{v5143}"
                                    let v5226 : unit = ()
                                    let v5227 : (unit -> unit) = closure7(v5102, v5218)
                                    let v5228 : unit = (fun () -> v5227 (); v5226) ()
                                    let v5235 : string = $"{v5095}"
                                    let v5243 : unit = ()
                                    let v5244 : (unit -> unit) = closure7(v5102, v5235)
                                    let v5245 : unit = (fun () -> v5244 (); v5243) ()
                                    let v5252 : string = $"{v5181}"
                                    let v5260 : unit = ()
                                    let v5261 : (unit -> unit) = closure7(v5102, v5252)
                                    let v5262 : unit = (fun () -> v5261 (); v5260) ()
                                    let v5270 : string = "runtime"
                                    let v5271 : string = $"{v5270}"
                                    let v5279 : unit = ()
                                    let v5280 : (unit -> unit) = closure7(v5102, v5271)
                                    let v5281 : unit = (fun () -> v5280 (); v5279) ()
                                    let v5288 : string = $"{v5143}"
                                    let v5296 : unit = ()
                                    let v5297 : (unit -> unit) = closure7(v5102, v5288)
                                    let v5298 : unit = (fun () -> v5297 (); v5296) ()
                                    let v5305 : string = $"%A{v4997}"
                                    let v5309 : string = $"{v5305}"
                                    let v5317 : unit = ()
                                    let v5318 : (unit -> unit) = closure7(v5102, v5309)
                                    let v5319 : unit = (fun () -> v5318 (); v5317) ()
                                    let v5327 : string = " }"
                                    let v5328 : string = $"{v5327}"
                                    let v5336 : unit = ()
                                    let v5337 : (unit -> unit) = closure7(v5102, v5328)
                                    let v5338 : unit = (fun () -> v5337 (); v5336) ()
                                    let v5344 : string = v5102.l0
                                    let v5345 : string = method26(v5344)
                                    let v5346 : string = method31()
                                    let v5347 : US5 = method32(v5346)
                                    let v5353 : US5 =
                                        match v5347 with
                                        | US5_1 -> (* None *)
                                            let v5350 : string = __SOURCE_DIRECTORY__
                                            method32(v5350)
                                        | US5_0(v5348) -> (* Some *)
                                            US5_0(v5348)
                                    let v5359 : US5 =
                                        match v5353 with
                                        | US5_1 -> (* None *)
                                            let v5356 : string = "/workspaces"
                                            method32(v5356)
                                        | US5_0(v5354) -> (* Some *)
                                            US5_0(v5354)
                                    let v5363 : string =
                                        match v5359 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v5360) -> (* Some *)
                                            v5360
                                    let v5364 : string = method50(v5363)
                                    let v5365 : bool = "deps" = v5364
                                    let v5376 : string =
                                        if v5365 then
                                            let v5366 : string option = method38(v5363)
                                            let v5368 : string = v5366 |> Option.get
                                            let v5371 : US5 = method32(v5368)
                                            match v5371 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v5372) -> (* Some *)
                                                v5372
                                        else
                                            v5363
                                    let v5377 : string = "polyglot"
                                    let v5378 : string = method33(v5376, v5377)
                                    let v5379 : string = method31()
                                    let v5381 : (unit -> string) = v5379.ToLower
                                    let v5382 : string = v5381 ()
                                    let v5386 : (unit -> string) = v5378.ToLower
                                    let v5387 : string = v5386 ()
                                    let v5391 : bool = v5382.StartsWith (v5387, false, null)
                                    let v5396 : US13 =
                                        if v5391 then
                                            US13_1(v5387)
                                        else
                                            US13_0(v5387)
                                    let v5408 : Result<string, string> =
                                        match v5396 with
                                        | US13_1(v5402) -> (* Error *)
                                            let v5404 : Result<string, string> = Error v5402 
                                            v5404
                                        | US13_0(v5397) -> (* Ok *)
                                            let v5399 : Result<string, string> = Ok v5397 
                                            v5399
                                    let v5409 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v5410 : bool = Fable.Core.RustInterop.emitRustExpr v5408 v5409 
                                    let v5411 : string = "x"
                                    let v5412 : string = Fable.Core.RustInterop.emitRustExpr () v5411 
                                    let v5413 : string = "true; $0 })"
                                    let v5414 : bool = Fable.Core.RustInterop.emitRustExpr v5412 v5413 
                                    let v5415 : string = "_result_unwrap_or_else"
                                    let v5416 : string = Fable.Core.RustInterop.emitRustExpr () v5415 
                                    let v5417 : string = "spiral"
                                    let v5418 : US41 = US41_0
                                    let v5419 : US42 = US42_0(v5418)
                                    let v5420 : US5 = US5_0(v5345)
                                    let v5421 : string = method183(v5420, v5417, v5419, v5416)
                                    let v5422 : string = "Fable.Core"
                                    let v5423 : string = "4.3.0"
                                    let v5424 : UH4 = UH4_0
                                    let v5425 : UH4 = UH4_1(v5422, v5423, v5424)
                                    let v5426 : UH2 = UH2_0
                                    let v5427 : string = method184(v5095, v5417, v5426, v5425, v5421, v5416)
                                    let v5428 : string = "../../.."
                                    let v5429 : string = method33(v5421, v5428)
                                    let v5430 : string = "Cargo.toml"
                                    let v5431 : string = method33(v5429, v5430)
                                    let v5432 : bool = method35(v5431)
                                    let v5433 : bool = v5432 = false
                                    if v5433 then
                                        (* run_target_args'
                                        let v5440 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5441 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5440 = v5441 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v5442 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5440 = v5442 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v5444 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v5440 = v5444 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v5447 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5440 = v5447 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v5448 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5440 = v5448 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v5449 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5440 = v5449 
                                        #endif
#else
                                        let v5450 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5440 = v5450 
                                        #endif
                                        let v5451 : System.DateTime = _run_target_args'_v5440 
                                        let v5457 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v5458 : System.Guid = v5457 ()
                                        let v5461 : System.Guid = method187(v5458, v5451)
                                        let v5463 : (System.Guid -> string) = _.ToString()
                                        let v5464 : string = v5463 v5461
                                        let v5467 : string = $"[package]"
                                        let v5468 : string = $"name = \"spiral_{v5464}\""
                                        let v5471 : string = "\n"
                                        let v5472 : string = v5467 + v5471 
                                        let v5476 : string = v5472 + v5468 
                                        let v5479 : string = $"version = \"0.0.1\""
                                        let v5481 : string = v5476 + v5471 
                                        let v5485 : string = v5481 + v5479 
                                        let v5488 : string = $"edition = \"2021\""
                                        let v5490 : string = v5485 + v5471 
                                        let v5494 : string = v5490 + v5488 
                                        let v5497 : string = $""
                                        let v5499 : string = v5494 + v5471 
                                        let v5503 : string = v5499 + v5497 
                                        let v5506 : string = $"[[bin]]"
                                        let v5508 : string = v5503 + v5471 
                                        let v5512 : string = v5508 + v5506 
                                        let v5515 : string = $"name = \"spiral_{v5464}\""
                                        let v5517 : string = v5512 + v5471 
                                        let v5521 : string = v5517 + v5515 
                                        let v5524 : string = $"path = \"spiral.rs\""
                                        let v5526 : string = v5521 + v5471 
                                        let v5530 : string = v5526 + v5524 
                                        (* run_target_args'
                                        let v5533 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5534 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v5431, v5530) v5534 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v5431, v5530)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v5535 : string = method33(v5421, v5430)
                                    let v5536 : bool = method35(v5535)
                                    let v5537 : bool = v5536 = false
                                    if v5537 then
                                        (* run_target_args'
                                        let v5544 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5545 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5544 = v5545 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v5546 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5544 = v5546 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v5548 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v5544 = v5548 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v5551 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5544 = v5551 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v5552 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5544 = v5552 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v5553 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5544 = v5553 
                                        #endif
#else
                                        let v5554 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v5544 = v5554 
                                        #endif
                                        let v5555 : System.DateTime = _run_target_args'_v5544 
                                        let v5561 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v5562 : System.Guid = v5561 ()
                                        let v5565 : System.Guid = method187(v5562, v5555)
                                        let v5567 : (System.Guid -> string) = _.ToString()
                                        let v5568 : string = v5567 v5565
                                        let v5571 : string = $"[package]"
                                        let v5572 : string = $"name = \"spiral_{v5568}\""
                                        let v5575 : string = "\n"
                                        let v5576 : string = v5571 + v5575 
                                        let v5580 : string = v5576 + v5572 
                                        let v5583 : string = $"version = \"0.0.1\""
                                        let v5585 : string = v5580 + v5575 
                                        let v5589 : string = v5585 + v5583 
                                        let v5592 : string = $"edition = \"2021\""
                                        let v5594 : string = v5589 + v5575 
                                        let v5598 : string = v5594 + v5592 
                                        let v5601 : string = $""
                                        let v5603 : string = v5598 + v5575 
                                        let v5607 : string = v5603 + v5601 
                                        let v5610 : string = $"[[bin]]"
                                        let v5612 : string = v5607 + v5575 
                                        let v5616 : string = v5612 + v5610 
                                        let v5619 : string = $"name = \"spiral_{v5568}\""
                                        let v5621 : string = v5616 + v5575 
                                        let v5625 : string = v5621 + v5619 
                                        let v5628 : string = $"path = \"spiral.rs\""
                                        let v5630 : string = v5625 + v5575 
                                        let v5634 : string = v5630 + v5628 
                                        (* run_target_args'
                                        let v5637 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v5638 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v5535, v5634) v5638 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v5535, v5634)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v5639 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v5640 : string = method33(v5416, v5639)
                                    let v5641 : string = "fable_modules/fable-library-rust"
                                    let v5642 : string = method33(v5421, v5641)
                                    method192(v5640, v5642)
                                    let struct (v5643 : int32, v5644 : string) = method193(v4997, v5421, v5162, v5427, v5396)
                                    let v5646 : bool = v5643 <> 0 
                                    let struct (v7813 : US5, v7814 : US5, v7815 : US5, v7816 : US5) =
                                        if v5646 then
                                            let v5709 : unit = ()
                                            let v5710 : (unit -> unit) = closure89(v5644, v5643)
                                            let v5711 : unit = (fun () -> v5710 (); v5709) ()
                                            let v5772 : US5 = US5_0(v5162)
                                            let v5773 : US5 = US5_1
                                            let v5774 : US5 = US5_1
                                            let v5775 : US5 = US5_0(v5644)
                                            struct (v5772, v5773, v5774, v5775)
                                        else
                                            let v5776 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v5876 : Vec<std_string_String> =
                                                if v5776 then
                                                    v4810
                                                else
                                                    let v5777 : (std_string_String -> bool) = method200()
                                                    let v5778 : Vec<std_string_String> = method201(v4810)
                                                    let v5779 : string = "v5778.into_iter().filter(|x| v5777(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v5780 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v5779 
                                                    let v5781 : string = "$0.len()"
                                                    let v5782 : unativeint = Fable.Core.RustInterop.emitRustExpr v5780 v5781 
                                                    let v5788 : int32 = v5782 |> int32 
                                                    let v5796 : bool = v5788 > 0
                                                    if v5796 then
                                                        v4810
                                                    else
                                                        let v5797 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v5802 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v5803 : string = "&*$0"
                                                        let v5804 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5797 v5803 
                                                        let _run_target_args'_v5802 = v5804 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v5805 : string = "&*$0"
                                                        let v5806 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5797 v5805 
                                                        let _run_target_args'_v5802 = v5806 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v5807 : string = "&*$0"
                                                        let v5808 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5797 v5807 
                                                        let _run_target_args'_v5802 = v5808 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v5810 : Ref<Str> = v5797 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5802 = v5810 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v5814 : Ref<Str> = v5797 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5802 = v5814 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v5818 : Ref<Str> = v5797 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5802 = v5818 
                                                        #endif
#else
                                                        let v5822 : Ref<Str> = v5797 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v5802 = v5822 
                                                        #endif
                                                        let v5825 : Ref<Str> = _run_target_args'_v5802 
                                                        (* run_target_args'
                                                        let v5835 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v5836 : string = "String::from($0)"
                                                        let v5837 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5825 v5836 
                                                        let _run_target_args'_v5835 = v5837 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v5838 : string = "String::from($0)"
                                                        let v5839 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5825 v5838 
                                                        let _run_target_args'_v5835 = v5839 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v5840 : string = "String::from($0)"
                                                        let v5841 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5825 v5840 
                                                        let _run_target_args'_v5835 = v5841 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v5843 : std_string_String = v5825 |> unbox<std_string_String>
                                                        let _run_target_args'_v5835 = v5843 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v5847 : std_string_String = v5825 |> unbox<std_string_String>
                                                        let _run_target_args'_v5835 = v5847 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v5851 : std_string_String = v5825 |> unbox<std_string_String>
                                                        let _run_target_args'_v5835 = v5851 
                                                        #endif
#else
                                                        let v5855 : std_string_String = v5825 |> unbox<std_string_String>
                                                        let _run_target_args'_v5835 = v5855 
                                                        #endif
                                                        let v5858 : std_string_String = _run_target_args'_v5835 
                                                        let v5864 : (std_string_String []) = [|v5858|]
                                                        let v5865 : string = "$0.to_vec()"
                                                        let v5866 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5864 v5865 
                                                        let v5867 : Vec<std_string_String> = method67(v5866)
                                                        let v5868 : Vec<std_string_String> = method68(v4810)
                                                        let v5869 : string = "true; let mut v5868 = v5868"
                                                        let v5870 : bool = Fable.Core.RustInterop.emitRustExpr () v5869 
                                                        let v5871 : string = "true; v5868.extend(v5867)"
                                                        let v5872 : bool = Fable.Core.RustInterop.emitRustExpr () v5871 
                                                        let v5873 : string = "v5868"
                                                        let v5874 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v5873 
                                                        v5874
                                            let v5877 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v5878 : bool = Fable.Core.RustInterop.emitRustExpr v5876 v5877 
                                            let v5879 : string = "x"
                                            let v5880 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5879 
                                            let v5881 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5882 : string = Fable.Core.RustInterop.emitRustExpr v5880 v5881 
                                            let v5885 : string = "="
                                            let v5886 : bool = v5882.Contains v5885 
                                            let v5901 : string =
                                                if v5886 then
                                                    v5882
                                                else
                                                    let v5891 : string = "]"
                                                    let v5892 : bool = v5882.EndsWith (v5891, false, null)
                                                    if v5892 then
                                                        let v5895 : string = $"={{version='*',features=["
                                                        let v5896 : string = "["
                                                        let v5897 : string = v5882.Replace (v5896, v5895)
                                                        let v5898 : string = $"{v5897}}}"
                                                        v5898
                                                    else
                                                        let v5899 : string = $"{v5882}='*'"
                                                        v5899
                                            let v5902 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v5903 : bool = Fable.Core.RustInterop.emitRustExpr v5901 v5902 
                                            let v5904 : string = "_vec_map"
                                            let v5905 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5904 
                                            let v5906 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v5907 : (string []) = Fable.Core.RustInterop.emitRustExpr v5905 v5906 
                                            let v5912 : unit = ()
                                            let _let'_v5912 =
                                                seq {
                                                    for i = 0 to v5907.Length - 1 do yield v5907.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v5915 : string seq = _let'_v5912 
                                            let v5923 : string = method69()
                                            let v5924 : (string -> (string seq -> string)) = String.concat
                                            let v5925 : (string seq -> string) = v5924 v5923
                                            let v5926 : string = v5925 v5915
                                            let v5930 : string = $"{v5417}.{v5162}"
                                            let v5931 : string = method33(v5421, v5930)
                                            (* run_target_args'
                                            let v5936 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v5941 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5942 : string = "std::fs::read(&*$0)"
                                            let v5943 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5931 v5942 
                                            (* run_target_args'
                                            let v5945 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5946 : string = "$0.unwrap()"
                                            let v5947 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5943 v5946 
                                            let _run_target_args'_v5945 = v5947 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5948 : string = "$0.unwrap()"
                                            let v5949 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5943 v5948 
                                            let _run_target_args'_v5945 = v5949 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5950 : string = "$0.unwrap()"
                                            let v5951 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5943 v5950 
                                            let _run_target_args'_v5945 = v5951 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5952 : Vec<uint8> = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5945 = v5952 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5953 : Vec<uint8> = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5945 = v5953 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5954 : Vec<uint8> = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5945 = v5954 
                                            #endif
#else
                                            let v5955 : Vec<uint8> = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5945 = v5955 
                                            #endif
                                            let v5956 : Vec<uint8> = _run_target_args'_v5945 
                                            let _run_target_args'_v5941 = v5956 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5960 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5941 = v5960 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5964 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5941 = v5964 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5968 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5941 = v5968 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5972 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5941 = v5972 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5976 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5941 = v5976 
                                            #endif
#else
                                            let v5979 : (uint8 []) = v5931 |> System.IO.File.ReadAllBytes
                                            let v5980 : string = "$0.to_vec()"
                                            let v5981 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5979 v5980 
                                            let _run_target_args'_v5941 = v5981 
                                            #endif
                                            let v5982 : Vec<uint8> = _run_target_args'_v5941 
                                            let v5988 : Vec<uint8> = method25(v5982)
                                            let v5989 : string = "std::string::String::from_utf8($0)"
                                            let v5990 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5988 v5989 
                                            (* run_target_args'
                                            let v5992 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5993 : string = "$0.unwrap()"
                                            let v5994 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5990 v5993 
                                            let _run_target_args'_v5992 = v5994 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5995 : string = "$0.unwrap()"
                                            let v5996 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5990 v5995 
                                            let _run_target_args'_v5992 = v5996 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5997 : string = "$0.unwrap()"
                                            let v5998 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5990 v5997 
                                            let _run_target_args'_v5992 = v5998 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5999 : std_string_String = match v5990 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5992 = v5999 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6000 : std_string_String = match v5990 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5992 = v6000 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6001 : std_string_String = match v5990 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5992 = v6001 
                                            #endif
#else
                                            let v6002 : std_string_String = match v5990 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5992 = v6002 
                                            #endif
                                            let v6003 : std_string_String = _run_target_args'_v5992 
                                            let v6006 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6007 : string = Fable.Core.RustInterop.emitRustExpr v6003 v6006 
                                            let _run_target_args'_v5936 = v6007 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6009 : string = null |> unbox<string>
                                            let _run_target_args'_v5936 = v6009 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6013 : string = null |> unbox<string>
                                            let _run_target_args'_v5936 = v6013 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6017 : string = null |> unbox<string>
                                            let _run_target_args'_v5936 = v6017 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6021 : string = null |> unbox<string>
                                            let _run_target_args'_v5936 = v6021 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6025 : string = null |> unbox<string>
                                            let _run_target_args'_v5936 = v6025 
                                            #endif
#else
                                            let v6028 : string = v5931 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v5936 = v6028 
                                            #endif
                                            let v6029 : string = _run_target_args'_v5936 
                                            let v6035 : string = method202()
                                            let v6038 : string = "on_startup!"
                                            let v6039 : string = v6038 + v6035 
                                            let v6042 : string = method203()
                                            let v6045 : string = " method0"
                                            let v6046 : string = v6045 + v6042 
                                            let v6050 : bool = v6029.Contains v6039 
                                            let v6058 : bool =
                                                if v6050 then
                                                    let v6054 : bool = v6029.Contains v6046 
                                                    let v6057 : bool = v6054 = false
                                                    v6057
                                                else
                                                    false
                                            let v6059 : string = $"cargo-features = [\"edition2024\"]"
                                            let v6060 : string = $""
                                            let v6063 : string = "\n"
                                            let v6064 : string = v6059 + v6063 
                                            let v6068 : string = v6064 + v6060 
                                            let v6071 : string = $"[package]"
                                            let v6073 : string = v6068 + v6063 
                                            let v6077 : string = v6073 + v6071 
                                            let v6080 : string = $"name = \"spiral_{v5345}\""
                                            let v6082 : string = v6077 + v6063 
                                            let v6086 : string = v6082 + v6080 
                                            let v6089 : string = $"version = \"0.0.1\""
                                            let v6091 : string = v6086 + v6063 
                                            let v6095 : string = v6091 + v6089 
                                            let v6098 : string = $"edition = \"2024\""
                                            let v6100 : string = v6095 + v6063 
                                            let v6104 : string = v6100 + v6098 
                                            let v6107 : string = $""
                                            let v6109 : string = v6104 + v6063 
                                            let v6113 : string = v6109 + v6107 
                                            let v6116 : string = $"[dependencies]"
                                            let v6118 : string = v6113 + v6063 
                                            let v6122 : string = v6118 + v6116 
                                            let v6127 : US39 = US39_1
                                            let v6128 : bool = v4997 <> v6127 
                                            let v6146 : string =
                                                if v6128 then
                                                    let v6132 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v6132
                                                else
                                                    let v6133 : string = $"fable_library_rust = {{"
                                                    let v6134 : string = $" workspace = true,"
                                                    let v6135 : string = v6133 + v6134 
                                                    let v6136 : string = $" features = ["
                                                    let v6137 : string = v6135 + v6136 
                                                    let v6140 : string =
                                                        if v6058 then
                                                            let v6138 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v6138
                                                        else
                                                            let v6139 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v6139
                                                    let v6141 : string = v6137 + v6140 
                                                    let v6142 : string = $"]"
                                                    let v6143 : string = v6141 + v6142 
                                                    let v6144 : string = $"}}"
                                                    let v6145 : string = v6143 + v6144 
                                                    v6145
                                            let v6148 : string = v6122 + v6063 
                                            let v6152 : string = v6148 + v6146 
                                            let v6155 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v6157 : string = v6152 + v6063 
                                            let v6161 : string = v6157 + v6155 
                                            let v6164 : string = $"{v5926}"
                                            let v6166 : string = v6161 + v6063 
                                            let v6170 : string = v6166 + v6164 
                                            let v6173 : string = $""
                                            let v6175 : string = v6170 + v6063 
                                            let v6179 : string = v6175 + v6173 
                                            let v6182 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v6203 : string =
                                                if v6182 then
                                                    let v6183 : string = $"[[bin]]"
                                                    let v6184 : string = $"name = \"spiral_{v5345}\""
                                                    let v6186 : string = v6183 + v6063 
                                                    let v6190 : string = v6186 + v6184 
                                                    v6190
                                                else
                                                    let v6193 : string = $"[lib]"
                                                    let v6194 : string = $"crate-type = [\"cdylib\"]"
                                                    let v6196 : string = v6193 + v6063 
                                                    let v6200 : string = v6196 + v6194 
                                                    v6200
                                            let v6205 : string = v6179 + v6063 
                                            let v6209 : string = v6205 + v6203 
                                            let v6212 : string = $"path = \"spiral.rs\""
                                            let v6214 : string = v6209 + v6063 
                                            let v6218 : string = v6214 + v6212 
                                            let v6221 : string = method42(v5416)
                                            let v6222 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v6223 : string = $""
                                            let v6225 : string = v6222 + v6063 
                                            let v6229 : string = v6225 + v6223 
                                            let v6232 : string = $"[workspace]"
                                            let v6234 : string = v6229 + v6063 
                                            let v6238 : string = v6234 + v6232 
                                            let v6241 : string = $"resolver = \"2\""
                                            let v6243 : string = v6238 + v6063 
                                            let v6247 : string = v6243 + v6241 
                                            let v6250 : string = $"members = [\"packages/Rust/*\"]"
                                            let v6252 : string = v6247 + v6063 
                                            let v6256 : string = v6252 + v6250 
                                            let v6259 : string = $""
                                            let v6261 : string = v6256 + v6063 
                                            let v6265 : string = v6261 + v6259 
                                            let v6268 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v6270 : string = v6265 + v6063 
                                            let v6274 : string = v6270 + v6268 
                                            let v6277 : string = $"path = \"{v6221}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v6279 : string = v6274 + v6063 
                                            let v6283 : string = v6279 + v6277 
                                            let v6286 : string = $"default-features = false"
                                            let v6288 : string = v6283 + v6063 
                                            let v6292 : string = v6288 + v6286 
                                            let v6295 : string = $"features = []"
                                            let v6297 : string = v6292 + v6063 
                                            let v6301 : string = v6297 + v6295 
                                            let v6304 : string = $""
                                            let v6306 : string = v6301 + v6063 
                                            let v6310 : string = v6306 + v6304 
                                            let v6313 : string = $"[workspace.dependencies]"
                                            let v6315 : string = v6310 + v6063 
                                            let v6319 : string = v6315 + v6313 
                                            let v6322 : string = $"inline_colorization = \"~0.1\""
                                            let v6324 : string = v6319 + v6063 
                                            let v6328 : string = v6324 + v6322 
                                            let v6331 : string = $""
                                            let v6333 : string = v6328 + v6063 
                                            let v6337 : string = v6333 + v6331 
                                            let v6340 : string = $"[profile.release]"
                                            let v6342 : string = v6337 + v6063 
                                            let v6346 : string = v6342 + v6340 
                                            let v6349 : string = $"codegen-units = 1"
                                            let v6351 : string = v6346 + v6063 
                                            let v6355 : string = v6351 + v6349 
                                            let v6358 : string = $"opt-level = \"z\""
                                            let v6360 : string = v6355 + v6063 
                                            let v6364 : string = v6360 + v6358 
                                            let v6367 : string = $"lto = true"
                                            let v6369 : string = v6364 + v6063 
                                            let v6373 : string = v6369 + v6367 
                                            let v6376 : string = $"debug = false"
                                            let v6378 : string = v6373 + v6063 
                                            let v6382 : string = v6378 + v6376 
                                            let v6385 : string = $"panic = \"abort\""
                                            let v6387 : string = v6382 + v6063 
                                            let v6391 : string = v6387 + v6385 
                                            let v6394 : string = $"overflow-checks = true"
                                            let v6396 : string = v6391 + v6063 
                                            let v6400 : string = v6396 + v6394 
                                            let v6403 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v6405 : string = v6400 + v6063 
                                            let v6409 : string = v6405 + v6403 
                                            method70(v5535, v6218)
                                            method70(v5431, v6409)
                                            let v6412 : string = "src/Range.rs"
                                            let v6413 : string = method33(v5642, v6412)
                                            let v6414 : bool = method35(v6413)
                                            if v6414 then
                                                (* run_target_args'
                                                let v6419 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v6424 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6425 : string = "std::fs::read(&*$0)"
                                                let v6426 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6413 v6425 
                                                (* run_target_args'
                                                let v6428 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6429 : string = "$0.unwrap()"
                                                let v6430 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6426 v6429 
                                                let _run_target_args'_v6428 = v6430 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6431 : string = "$0.unwrap()"
                                                let v6432 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6426 v6431 
                                                let _run_target_args'_v6428 = v6432 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6433 : string = "$0.unwrap()"
                                                let v6434 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6426 v6433 
                                                let _run_target_args'_v6428 = v6434 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6435 : Vec<uint8> = match v6426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6428 = v6435 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6436 : Vec<uint8> = match v6426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6428 = v6436 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6437 : Vec<uint8> = match v6426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6428 = v6437 
                                                #endif
#else
                                                let v6438 : Vec<uint8> = match v6426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6428 = v6438 
                                                #endif
                                                let v6439 : Vec<uint8> = _run_target_args'_v6428 
                                                let _run_target_args'_v6424 = v6439 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6443 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6424 = v6443 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6447 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6424 = v6447 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6451 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6424 = v6451 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6455 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6424 = v6455 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6459 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v6424 = v6459 
                                                #endif
#else
                                                let v6462 : (uint8 []) = v6413 |> System.IO.File.ReadAllBytes
                                                let v6463 : string = "$0.to_vec()"
                                                let v6464 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6462 v6463 
                                                let _run_target_args'_v6424 = v6464 
                                                #endif
                                                let v6465 : Vec<uint8> = _run_target_args'_v6424 
                                                let v6471 : Vec<uint8> = method25(v6465)
                                                let v6472 : string = "std::string::String::from_utf8($0)"
                                                let v6473 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6471 v6472 
                                                (* run_target_args'
                                                let v6475 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6476 : string = "$0.unwrap()"
                                                let v6477 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6473 v6476 
                                                let _run_target_args'_v6475 = v6477 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6478 : string = "$0.unwrap()"
                                                let v6479 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6473 v6478 
                                                let _run_target_args'_v6475 = v6479 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6480 : string = "$0.unwrap()"
                                                let v6481 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6473 v6480 
                                                let _run_target_args'_v6475 = v6481 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6482 : std_string_String = match v6473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6475 = v6482 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6483 : std_string_String = match v6473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6475 = v6483 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6484 : std_string_String = match v6473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6475 = v6484 
                                                #endif
#else
                                                let v6485 : std_string_String = match v6473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v6475 = v6485 
                                                #endif
                                                let v6486 : std_string_String = _run_target_args'_v6475 
                                                let v6489 : string = "fable_library_rust::String_::fromString($0)"
                                                let v6490 : string = Fable.Core.RustInterop.emitRustExpr v6486 v6489 
                                                let _run_target_args'_v6419 = v6490 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6492 : string = null |> unbox<string>
                                                let _run_target_args'_v6419 = v6492 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6496 : string = null |> unbox<string>
                                                let _run_target_args'_v6419 = v6496 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6500 : string = null |> unbox<string>
                                                let _run_target_args'_v6419 = v6500 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6504 : string = null |> unbox<string>
                                                let _run_target_args'_v6419 = v6504 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v6508 : string = null |> unbox<string>
                                                let _run_target_args'_v6419 = v6508 
                                                #endif
#else
                                                let v6511 : string = v6413 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v6419 = v6511 
                                                #endif
                                                let v6512 : string = _run_target_args'_v6419 
                                                let v6518 : string = "use crate::String_::fromCharCode;"
                                                let v6519 : string = "use crate::String_::fromChar;"
                                                let v6520 : string = v6512.Replace (v6518, v6519)
                                                let v6521 : string = "fromCharCode(c)"
                                                let v6522 : string = "std::char::from_u32(c).unwrap()"
                                                let v6523 : string = v6520.Replace (v6521, v6522)
                                                method70(v6413, v6523)
                                            let v6524 : uint8 = 1uy
                                            let struct (v6525 : int32, v6526 : string) = method204(v5396, v5535, v6524)
                                            let v6528 : bool = v6525 <> 0 
                                            if v6528 then
                                                let v6591 : unit = ()
                                                let v6592 : (unit -> unit) = closure93(v6526, v6525)
                                                let v6593 : unit = (fun () -> v6592 (); v6591) ()
                                                ()
                                            (* run_target_args'
                                            let v6658 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v6663 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6664 : string = "std::fs::read(&*$0)"
                                            let v6665 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5931 v6664 
                                            (* run_target_args'
                                            let v6667 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6668 : string = "$0.unwrap()"
                                            let v6669 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6665 v6668 
                                            let _run_target_args'_v6667 = v6669 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6670 : string = "$0.unwrap()"
                                            let v6671 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6665 v6670 
                                            let _run_target_args'_v6667 = v6671 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6672 : string = "$0.unwrap()"
                                            let v6673 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6665 v6672 
                                            let _run_target_args'_v6667 = v6673 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6674 : Vec<uint8> = match v6665 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6667 = v6674 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6675 : Vec<uint8> = match v6665 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6667 = v6675 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6676 : Vec<uint8> = match v6665 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6667 = v6676 
                                            #endif
#else
                                            let v6677 : Vec<uint8> = match v6665 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6667 = v6677 
                                            #endif
                                            let v6678 : Vec<uint8> = _run_target_args'_v6667 
                                            let _run_target_args'_v6663 = v6678 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6682 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6663 = v6682 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6686 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6663 = v6686 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6690 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6663 = v6690 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6694 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6663 = v6694 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6698 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v6663 = v6698 
                                            #endif
#else
                                            let v6701 : (uint8 []) = v5931 |> System.IO.File.ReadAllBytes
                                            let v6702 : string = "$0.to_vec()"
                                            let v6703 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6701 v6702 
                                            let _run_target_args'_v6663 = v6703 
                                            #endif
                                            let v6704 : Vec<uint8> = _run_target_args'_v6663 
                                            let v6710 : Vec<uint8> = method25(v6704)
                                            let v6711 : string = "std::string::String::from_utf8($0)"
                                            let v6712 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6710 v6711 
                                            (* run_target_args'
                                            let v6714 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6715 : string = "$0.unwrap()"
                                            let v6716 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6712 v6715 
                                            let _run_target_args'_v6714 = v6716 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6717 : string = "$0.unwrap()"
                                            let v6718 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6712 v6717 
                                            let _run_target_args'_v6714 = v6718 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6719 : string = "$0.unwrap()"
                                            let v6720 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6712 v6719 
                                            let _run_target_args'_v6714 = v6720 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6721 : std_string_String = match v6712 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6714 = v6721 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6722 : std_string_String = match v6712 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6714 = v6722 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6723 : std_string_String = match v6712 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6714 = v6723 
                                            #endif
#else
                                            let v6724 : std_string_String = match v6712 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v6714 = v6724 
                                            #endif
                                            let v6725 : std_string_String = _run_target_args'_v6714 
                                            let v6728 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6729 : string = Fable.Core.RustInterop.emitRustExpr v6725 v6728 
                                            let _run_target_args'_v6658 = v6729 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6731 : string = null |> unbox<string>
                                            let _run_target_args'_v6658 = v6731 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6735 : string = null |> unbox<string>
                                            let _run_target_args'_v6658 = v6735 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6739 : string = null |> unbox<string>
                                            let _run_target_args'_v6658 = v6739 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6743 : string = null |> unbox<string>
                                            let _run_target_args'_v6658 = v6743 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v6747 : string = null |> unbox<string>
                                            let _run_target_args'_v6658 = v6747 
                                            #endif
#else
                                            let v6750 : string = v5931 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v6658 = v6750 
                                            #endif
                                            let v6751 : string = _run_target_args'_v6658 
                                            let v6757 : string = method209()
                                            let v6760 : string = "pub fn main() -> Result<(), String> "
                                            let v6761 : string = v6760 + v6757 
                                            let v6764 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v6857 : string =
                                                if v6764 then
                                                    let v6765 : string = ""
                                                    v6765
                                                else
                                                    let v6766 : string = $"#[near_sdk::near_bindgen]"
                                                    let v6767 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v6769 : string = v6766 + v6063 
                                                    let v6773 : string = v6769 + v6767 
                                                    let v6776 : string = $"pub struct MainState {{"
                                                    let v6778 : string = v6773 + v6063 
                                                    let v6782 : string = v6778 + v6776 
                                                    let v6785 : string = $"}}"
                                                    let v6787 : string = v6782 + v6063 
                                                    let v6791 : string = v6787 + v6785 
                                                    let v6794 : string = $""
                                                    let v6796 : string = v6791 + v6063 
                                                    let v6800 : string = v6796 + v6794 
                                                    let v6803 : string = $"#[near_sdk::near_bindgen]"
                                                    let v6805 : string = v6800 + v6063 
                                                    let v6809 : string = v6805 + v6803 
                                                    let v6812 : string = $"impl MainState {{"
                                                    let v6814 : string = v6809 + v6063 
                                                    let v6818 : string = v6814 + v6812 
                                                    let v6821 : string = $"    pub fn state_main() {{"
                                                    let v6823 : string = v6818 + v6063 
                                                    let v6827 : string = v6823 + v6821 
                                                    let v6830 : string = $"        Spiral::method0();"
                                                    let v6832 : string = v6827 + v6063 
                                                    let v6836 : string = v6832 + v6830 
                                                    let v6839 : string = $"    }}"
                                                    let v6841 : string = v6836 + v6063 
                                                    let v6845 : string = v6841 + v6839 
                                                    let v6848 : string = $"}}"
                                                    let v6850 : string = v6845 + v6063 
                                                    let v6854 : string = v6850 + v6848 
                                                    v6854
                                            let v6858 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v6869 : bool =
                                                if v6858 then
                                                    let v6861 : string = "Spiral::method0()"
                                                    let v6862 : string = v6039 + v6861 
                                                    let v6866 : bool = v6751.Contains v6862 
                                                    v6866
                                                else
                                                    false
                                            let v6872 : string =
                                                if v6869 then
                                                    let v6870 : string = $"{v6761} Ok(Spiral::method0()) }}"
                                                    v6870
                                                else
                                                    let v6871 : string = $"{v6761} Ok(()) }}"
                                                    v6871
                                            let v6874 : string = v6857 + v6063 
                                            let v6878 : string = v6874 + v6872 
                                            let v6882 : bool = v6751.Contains v6761 
                                            let v6885 : string = $"{v6751}\n\n{v6878}\n"
                                            let v7078 : string =
                                                if v6882 then
                                                    v6751
                                                else
                                                    let v6889 : bool =
                                                        match v4997 with
                                                        | US39_0(v6886) -> (* Some *)
                                                            match v6886 with
                                                            | US40_1(v6887) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v6890 : string = "\";\".into()"
                                                    let v6891 : string = Fable.Core.RustInterop.emitRustExpr () v6890 
                                                    let v6894 : string = "),)"
                                                    let v6895 : string = v6894 + v6891 
                                                    let v6898 : string = "));"
                                                    let v6899 : string = v6885.Replace (v6895, v6898)
                                                    let v6900 : string = "\";\".into()"
                                                    let v6901 : string = Fable.Core.RustInterop.emitRustExpr () v6900 
                                                    let v6904 : string = "},)"
                                                    let v6905 : string = v6904 + v6901 
                                                    let v6908 : string = "});"
                                                    let v6909 : string = v6899.Replace (v6905, v6908)
                                                    let v6910 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v6911 : string = " defaultOf::<()>();"
                                                    let v6912 : string = method60(v6910, v6911, v6909)
                                                    let v6913 : string = "\\s\\sgetZero\\(\\);"
                                                    let v6914 : string = " getZero::<()>();"
                                                    let v6915 : string = method60(v6913, v6914, v6912)
                                                    let v6916 : string = "\"t\".into()"
                                                    let v6917 : string = Fable.Core.RustInterop.emitRustExpr () v6916 
                                                    let v6920 : string = "(&e.get_Curren"
                                                    let v6921 : string = v6920 + v6917 
                                                    let v6924 : string = "(e.get_Current"
                                                    let v6925 : string = v6915.Replace (v6921, v6924)
                                                    let v6926 : string = "\"::<()>()\".into()"
                                                    let v6927 : string = Fable.Core.RustInterop.emitRustExpr () v6926 
                                                    let v6930 : string = "getNull"
                                                    let v6931 : string = v6930 + v6927 
                                                    let v6934 : string = "fable_library_rust::Native_::getZero()"
                                                    let v6935 : string = v6925.Replace (v6931, v6934)
                                                    let v6936 : string = $"\")\".into()"
                                                    let v6937 : string = Fable.Core.RustInterop.emitRustExpr () v6936 
                                                    let v6940 : string = "null::<()>("
                                                    let v6941 : string = v6940 + v6937 
                                                    let v6944 : string = v6935.Replace (v6941, v6934)
                                                    let v6945 : string = "null::<\\(\\)>\\(\\)"
                                                    let v6946 : string = method60(v6945, v6934, v6944)
                                                    let v6947 : string = "\\(null::<\\(\\)>\\(\\)"
                                                    let v6948 : string = "(null()"
                                                    let v6949 : string = method60(v6947, v6948, v6946)
                                                    let v6950 : string = " null::<\\(\\)>\\(\\)"
                                                    let v6951 : string = " null()"
                                                    let v6952 : string = method60(v6950, v6951, v6949)
                                                    let v6953 : string = "unbox::<bool>\\(null\\(\\)"
                                                    let v6954 : string = "false"
                                                    let v6955 : string = method60(v6953, v6954, v6952)
                                                    let v6956 : string = "unbox::<string>\\(null\\(\\)"
                                                    let v6957 : string = method60(v6956, v6934, v6955)
                                                    let v6958 : string = "unbox::<i32>\\(null\\(\\)"
                                                    let v6959 : string = "0"
                                                    let v6960 : string = method60(v6958, v6959, v6957)
                                                    let v6961 : string = "unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"
                                                    let v6962 : string = method60(v6961, v6959, v6960)
                                                    let v6963 : string = "null\\(\\)"
                                                    let v6964 : string = method60(v6963, v6934, v6962)
                                                    let v6965 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v6966 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v6967 : string = method60(v6965, v6966, v6964)
                                                    let v6968 : string = " gen:"
                                                    let v6969 : string = " f:"
                                                    let v6970 : string = v6967.Replace (v6968, v6969)
                                                    let v6971 : string = "\\(gen\\("
                                                    let v6972 : string = "(f("
                                                    let v6973 : string = method60(v6971, v6972, v6970)
                                                    let v6974 : string = "\\(gen,"
                                                    let v6975 : string = "(f,"
                                                    let v6976 : string = method60(v6974, v6975, v6973)
                                                    let v6977 : string = " gen "
                                                    let v6978 : string = " f "
                                                    let v6979 : string = v6976.Replace (v6977, v6978)
                                                    let v6980 : string = "::Slice'_"
                                                    let v6981 : string = "::Slice__"
                                                    let v6982 : string = v6979.Replace (v6980, v6981)
                                                    let v6983 : string = " Slice'_"
                                                    let v6984 : string = " Slice__"
                                                    let v6985 : string = v6982.Replace (v6983, v6984)
                                                    let v6986 : string = "\",\".into()"
                                                    let v6987 : string = Fable.Core.RustInterop.emitRustExpr () v6986 
                                                    let v6990 : string = "defaultOf()"
                                                    let v6991 : string = v6990 + v6987 
                                                    let v6994 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v6995 : string = v6985.Replace (v6991, v6994)
                                                    let v6996 : string = "\"__.\".into()"
                                                    let v6997 : string = Fable.Core.RustInterop.emitRustExpr () v6996 
                                                    let v7000 : string = "__self"
                                                    let v7001 : string = v7000 + v6997 
                                                    let v7004 : string = "self."
                                                    let v7005 : string = v6995.Replace (v7001, v7004)
                                                    let v7006 : string = "\"_.\".into()"
                                                    let v7007 : string = Fable.Core.RustInterop.emitRustExpr () v7006 
                                                    let v7010 : string = "_self"
                                                    let v7011 : string = v7010 + v7007 
                                                    let v7014 : string = v7005.Replace (v7011, v7004)
                                                    let v7015 : string = "\"h\".into()"
                                                    let v7016 : string = Fable.Core.RustInterop.emitRustExpr () v7015 
                                                    let v7019 : string = "get_or_insert_wit"
                                                    let v7020 : string = v7019 + v7016 
                                                    let v7023 : string = "get_or_init"
                                                    let v7024 : string = v7014.Replace (v7020, v7023)
                                                    let v7025 : string = "\";\".into()"
                                                    let v7026 : string = Fable.Core.RustInterop.emitRustExpr () v7025 
                                                    let v7029 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v7030 : string = v7029 + v7026 
                                                    let v7033 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v7034 : string = v7024.Replace (v7030, v7033)
                                                    let v7035 : string = "\";\".into()"
                                                    let v7036 : string = Fable.Core.RustInterop.emitRustExpr () v7035 
                                                    let v7039 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v7040 : string = v7039 + v7036 
                                                    let v7043 : string = "type TimeZoneInfo = i64;"
                                                    let v7044 : string = v7034.Replace (v7040, v7043)
                                                    let v7045 : string = "\";\".into()"
                                                    let v7046 : string = Fable.Core.RustInterop.emitRustExpr () v7045 
                                                    let v7049 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v7050 : string = v7049 + v7046 
                                                    let v7053 : string = "type TaskCanceledException = ();"
                                                    let v7054 : string = v7044.Replace (v7050, v7053)
                                                    let v7063 : (string -> string) =
                                                        if v6058 then
                                                            closure94()
                                                        else
                                                            let v7058 : string = "// "
                                                            let v7059 : string = v7058 + v6039 
                                                            closure95(v6039, v7059)
                                                    let v7064 : string = v7063 v7054
                                                    let v7065 : bool = v6889 = false
                                                    let v7076 : (string -> string) =
                                                        if v7065 then
                                                            closure94()
                                                        else
                                                            let v7070 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v7071 : string = ";"
                                                            let v7072 : string = v7070 + v7071 
                                                            closure96(v7072)
                                                    v7076 v7064
                                            let v7079 : bool = v6882 = false
                                            if v7079 then
                                                method70(v5931, v7078)
                                            let v7080 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v7081 : bool = v7080 <> true
                                            let v7084 : string =
                                                if v7081 then
                                                    let v7082 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v5535}\""
                                                    v7082
                                                else
                                                    let v7083 : string = $"cargo run --manifest-path \"{v5535}\""
                                                    v7083
                                            let v7085 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v7086 : bool = v7085 <> true
                                            let v7097 : (struct (string * string) []) =
                                                if v7086 then
                                                    [||]
                                                else
                                                    let v7088 : string = "TRACE_LEVEL"
                                                    let v7089 : string = "Verbose"
                                                    let v7090 : string = "RUSTC_WRAPPER"
                                                    let v7091 : string = "sccache"
                                                    let v7092 : string = "RUST_BACKTRACE"
                                                    let v7093 : string = "full"
                                                    let v7094 : string = "RUSTFLAGS"
                                                    let v7095 : string = "-C prefer-dynamic"
                                                    [|struct (v7088, v7089); struct (v7090, v7091); struct (v7092, v7093); struct (v7094, v7095)|]
                                            let v7099 : System.Threading.CancellationToken option = None
                                            let v7102 : (struct (string * string) []) = [||]
                                            let v7104 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v7108 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v7112 : string option = None
                                            let v7126 : Result<string, string> =
                                                match v5396 with
                                                | US13_1(v7120) -> (* Error *)
                                                    let v7122 : Result<string, string> = Error v7120 
                                                    v7122
                                                | US13_0(v7115) -> (* Ok *)
                                                    let v7117 : Result<string, string> = Ok v7115 
                                                    v7117
                                            (* run_target_args'
                                            let v7128 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7129 : string = "$0.ok()"
                                            let v7130 : string option = Fable.Core.RustInterop.emitRustExpr v7126 v7129 
                                            let _run_target_args'_v7128 = v7130 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7131 : string = "$0.ok()"
                                            let v7132 : string option = Fable.Core.RustInterop.emitRustExpr v7126 v7131 
                                            let _run_target_args'_v7128 = v7132 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7133 : string = "$0.ok()"
                                            let v7134 : string option = Fable.Core.RustInterop.emitRustExpr v7126 v7133 
                                            let _run_target_args'_v7128 = v7134 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7135 : string option = match v7126 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7128 = v7135 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7136 : string option = match v7126 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7128 = v7136 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v7137 : string option = match v7126 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7128 = v7137 
                                            #endif
#else
                                            let v7138 : string option = match v7126 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v7128 = v7138 
                                            #endif
                                            let v7139 : string option = _run_target_args'_v7128 
                                            let v7142 : bool = true
                                            let struct (v7143 : int32, v7144 : string) = method91(v7084, v7099, v7097, v7104, v7108, v7142, v7139)
                                            let v7145 : bool =
                                                match v4997 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v7649 : US5, v7650 : US5, v7651 : US5, v7652 : US5) =
                                                if v7145 then
                                                    let v7146 : int32 = v7097.Length
                                                    let v7147 : (string []) = Array.zeroCreate<string> (v7146)
                                                    let v7148 : Mut5 = {l0 = 0} : Mut5
                                                    while method29(v7146, v7148) do
                                                        let v7150 : int32 = v7148.l0
                                                        let struct (v7151 : string, v7152 : string) = v7097.[int v7150]
                                                        let v7153 : string = $"$env:{v7151}=''{v7152}''"
                                                        v7147.[int v7150] <- v7153
                                                        let v7154 : int32 = v7150 + 1
                                                        v7148.l0 <- v7154
                                                        ()
                                                    let v7156 : string seq = v7147 |> Seq.ofArray
                                                    let v7161 : (string -> (string seq -> string)) = String.concat
                                                    let v7162 : string = ";"
                                                    let v7163 : (string seq -> string) = v7161 v7162
                                                    let v7164 : string = v7163 v7156
                                                    let v7167 : (string []) = [|v7164; v7084|]
                                                    let v7169 : string seq = v7167 |> Seq.ofArray
                                                    let v7173 : (string -> (string seq -> string)) = String.concat
                                                    let v7174 : (string seq -> string) = v7173 v7162
                                                    let v7175 : string = v7174 v7169
                                                    let v7178 : string = $"pwsh -c '{v7175}'"
                                                    let v7180 : bool = v7143 <> 0 
                                                    let struct (v7336 : US5, v7337 : US5, v7338 : US5, v7339 : US5) =
                                                        if v7180 then
                                                            let v7243 : unit = ()
                                                            let v7244 : (unit -> unit) = closure97(v4846, v5931, v7144, v7143, v7178)
                                                            let v7245 : unit = (fun () -> v7244 (); v7243) ()
                                                            let v7306 : US5 = US5_0(v5162)
                                                            let v7307 : US5 = US5_1
                                                            let v7308 : US5 = US5_1
                                                            let v7309 : US5 = US5_1
                                                            struct (v7306, v7307, v7308, v7309)
                                                        else
                                                            let v7310 : (string -> US5) = closure72()
                                                            let v7311 : (unit -> string) = closure98(v7144)
                                                            let v7312 : (exn -> US5) = closure100(v5931, v7144, v7178)
                                                            let v7314 : US5 = US5_1
                                                            let result = ref v7314
                                                            try
                                                                result.Value <- v7311 () |> v7310 
                                                            with ex ->
                                                                result.Value <- v7312 ex 
                                                            let v7315 : US5 = result.Value
                                                            let v7329 : string option =
                                                                match v7315 with
                                                                | US5_1 -> (* None *)
                                                                    let v7325 : string option = None
                                                                    v7325
                                                                | US5_0(v7319) -> (* Some *)
                                                                    let v7321 : string option = Some v7319 
                                                                    v7321
                                                            let v7330 : string = "$0.unwrap()"
                                                            let v7331 : string = Fable.Core.RustInterop.emitRustExpr v7329 v7330 
                                                            let v7332 : US5 = US5_0(v5162)
                                                            let v7333 : US5 = US5_0(v7078)
                                                            let v7334 : US5 = US5_0(v5931)
                                                            let v7335 : US5 = US5_0(v7331)
                                                            struct (v7332, v7333, v7334, v7335)
                                                    struct (v7336, v7337, v7338, v7339)
                                                else
                                                    let v7340 : string = $"target/spiral/{v5417}/target/wasm32-unknown-unknown/release/spiral_{v5345}.wasm"
                                                    let v7347 : string =
                                                        match v4997 with
                                                        | US39_0(v7341) -> (* Some *)
                                                            match v7341 with
                                                            | US40_1(v7343) -> (* Contract *)
                                                                v7343
                                                            | US40_0(v7342) -> (* Wasm *)
                                                                v7342
                                                        | _ ->
                                                            let v7346 : string = ""
                                                            v7346
                                                    let v7348 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v7340} -t debug {v7347}'"
                                                    let v7349 : string = "AUTOMATION"
                                                    let v7350 : string = method3(v7349)
                                                    let v7351 : string = "scripts/invoke-block.ps1"
                                                    let v7352 : string = $"pwsh -c \"pwsh {v7351} {v7348} -Linux -EnvironmentVariables AUTOMATION={v7350}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v7353 : bool = v7143 = 0
                                                    let struct (v7645 : US5, v7646 : US5, v7647 : US5, v7648 : US5) =
                                                        if v7353 then
                                                            let v7355 : System.Threading.CancellationToken option = None
                                                            let v7358 : (struct (string * string) []) = [||]
                                                            let v7360 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v7364 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v7368 : string option = None
                                                            let v7372 : string option = Some v5416 
                                                            let v7375 : bool = true
                                                            let struct (v7376 : int32, v7377 : string) = method91(v7352, v7355, v7358, v7360, v7364, v7375, v7372)
                                                            let v7378 : bool = v7376 = 0
                                                            let struct (v7512 : US5, v7513 : US5, v7514 : US5, v7515 : US5) =
                                                                if v7378 then
                                                                    let v7379 : US5 = US5_0(v5162)
                                                                    let v7380 : US5 = US5_0(v7078)
                                                                    let v7381 : US5 = US5_0(v5931)
                                                                    let v7382 : US5 = US5_0(v7377)
                                                                    struct (v7379, v7380, v7381, v7382)
                                                                else
                                                                    let v7444 : unit = ()
                                                                    let v7445 : (unit -> unit) = closure102(v4846, v5931, v7144, v7377, v7376)
                                                                    let v7446 : unit = (fun () -> v7445 (); v7444) ()
                                                                    let v7508 : US5 = US5_0(v5162)
                                                                    let v7509 : US5 = US5_1
                                                                    let v7510 : US5 = US5_1
                                                                    let v7511 : US5 = US5_1
                                                                    struct (v7508, v7509, v7510, v7511)
                                                            struct (v7512, v7513, v7514, v7515)
                                                        else
                                                            let v7577 : unit = ()
                                                            let v7578 : (unit -> unit) = closure103(v4846, v5931, v7144, v7143, v7340, v7352)
                                                            let v7579 : unit = (fun () -> v7578 (); v7577) ()
                                                            let v7641 : US5 = US5_0(v5162)
                                                            let v7642 : US5 = US5_1
                                                            let v7643 : US5 = US5_1
                                                            let v7644 : US5 = US5_1
                                                            struct (v7641, v7642, v7643, v7644)
                                                    struct (v7645, v7646, v7647, v7648)
                                            if v4846 then
                                                let v7653 : bool =
                                                    match v4997 with
                                                    | US39_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v7654 : bool = v7653 <> true
                                                let v7657 : string =
                                                    if v7654 then
                                                        let v7655 : string = "wasm32-unknown-unknown/release"
                                                        v7655
                                                    else
                                                        let v7656 : string = "debug"
                                                        v7656
                                                let v7658 : string = ""
                                                let v7659 : string = $"target/{v7657}/spiral_{v5345}{v7658}"
                                                let v7660 : string = method33(v5429, v7659)
                                                let v7661 : string = ".wasm"
                                                let v7662 : string = $"target/{v7657}/spiral_{v5345}{v7661}"
                                                let v7663 : string = method33(v5429, v7662)
                                                let v7664 : string = ".pdb"
                                                let v7665 : string = $"target/{v7657}/spiral_{v5345}{v7664}"
                                                let v7666 : string = method33(v5429, v7665)
                                                let v7667 : string = ".exe"
                                                let v7668 : string = $"target/{v7657}/spiral_{v5345}{v7667}"
                                                let v7669 : string = method33(v5429, v7668)
                                                let v7670 : string = ".d"
                                                let v7671 : string = $"target/{v7657}/spiral_{v5345}{v7670}"
                                                let v7672 : string = method33(v5429, v7671)
                                                let v7673 : bool = method35(v7660)
                                                let v7674 : bool = method35(v7663)
                                                let v7675 : bool = method35(v7666)
                                                let v7676 : bool = method35(v7669)
                                                let v7677 : bool = method35(v7672)
                                                let v7738 : unit = ()
                                                let v7739 : (unit -> unit) = closure104(v5931, v7672, v7677, v7669, v7676, v7666, v7675, v7663, v7674, v7660, v7673)
                                                let v7740 : unit = (fun () -> v7739 (); v7738) ()
                                                let v7804 : UH5 =
                                                    if v7673 then
                                                        let v7801 : UH5 = UH5_0
                                                        UH5_1(v7660, v7673, v7801)
                                                    else
                                                        UH5_0
                                                let v7806 : UH5 =
                                                    if v7674 then
                                                        UH5_1(v7663, v7674, v7804)
                                                    else
                                                        v7804
                                                let v7808 : UH5 =
                                                    if v7675 then
                                                        UH5_1(v7666, v7675, v7806)
                                                    else
                                                        v7806
                                                let v7810 : UH5 =
                                                    if v7676 then
                                                        UH5_1(v7669, v7676, v7808)
                                                    else
                                                        v7808
                                                let v7812 : UH5 =
                                                    if v7677 then
                                                        UH5_1(v7672, v7677, v7810)
                                                    else
                                                        v7810
                                                method215(v7812)
                                            struct (v7649, v7650, v7651, v7652)
                                    struct (v7813, v7814, v7815, v7816)
                                else
                                    let v7817 : string = "fable_library_rust::String_::fromString($0)"
                                    let v7818 : string = Fable.Core.RustInterop.emitRustExpr v40 v7817 
                                    let v7819 : bool = v7818 = "typescript"
                                    let struct (v10206 : US5, v10207 : US5, v10208 : US5, v10209 : US5) =
                                        if v7819 then
                                            let v7820 : string = method168()
                                            (* run_target_args'
                                            let v7825 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7826 : string = "&*$0"
                                            let v7827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7820 v7826 
                                            let _run_target_args'_v7825 = v7827 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7828 : string = "&*$0"
                                            let v7829 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7820 v7828 
                                            let _run_target_args'_v7825 = v7829 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7830 : string = "&*$0"
                                            let v7831 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7820 v7830 
                                            let _run_target_args'_v7825 = v7831 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7833 : Ref<Str> = v7820 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7825 = v7833 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7837 : Ref<Str> = v7820 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7825 = v7837 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v7841 : Ref<Str> = v7820 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7825 = v7841 
                                            #endif
#else
                                            let v7845 : Ref<Str> = v7820 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7825 = v7845 
                                            #endif
                                            let v7848 : Ref<Str> = _run_target_args'_v7825 
                                            let v7854 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v7855 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v7848) v7854 
                                            let v7858 : (std_string_String -> US7) = method21()
                                            let v7859 : US7 option = v7855 |> Option.map v7858 
                                            let v7879 : US7 = US7_1
                                            let v7880 : US7 = v7859 |> Option.defaultValue v7879 
                                            let v7887 : std_string_String =
                                                match v7880 with
                                                | US7_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US7_0(v7884) -> (* Some *)
                                                    v7884
                                            let v7888 : string = "fable_library_rust::String_::fromString($0)"
                                            let v7889 : string = Fable.Core.RustInterop.emitRustExpr v7887 v7888 
                                            let v7890 : string = method23()
                                            (* run_target_args'
                                            let v7895 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7896 : string = "&*$0"
                                            let v7897 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7890 v7896 
                                            let _run_target_args'_v7895 = v7897 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7898 : string = "&*$0"
                                            let v7899 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7890 v7898 
                                            let _run_target_args'_v7895 = v7899 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7900 : string = "&*$0"
                                            let v7901 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7890 v7900 
                                            let _run_target_args'_v7895 = v7901 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7903 : Ref<Str> = v7890 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7895 = v7903 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7907 : Ref<Str> = v7890 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7895 = v7907 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v7911 : Ref<Str> = v7890 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7895 = v7911 
                                            #endif
#else
                                            let v7915 : Ref<Str> = v7890 |> unbox<Ref<Str>>
                                            let _run_target_args'_v7895 = v7915 
                                            #endif
                                            let v7918 : Ref<Str> = _run_target_args'_v7895 
                                            let v7924 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v7925 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v7918) v7924 
                                            let v7928 : (Vec<std_string_String> -> US11) = method24()
                                            let v7929 : US11 option = v7925 |> Option.map v7928 
                                            let v7949 : US11 = US11_1
                                            let v7950 : US11 = v7929 |> Option.defaultValue v7949 
                                            let v7954 : (std_string_String []) = [||]
                                            let v7955 : string = "$0.to_vec()"
                                            let v7956 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v7954 v7955 
                                            let v7959 : Vec<std_string_String> =
                                                match v7950 with
                                                | US11_1 -> (* None *)
                                                    v7956
                                                | US11_0(v7957) -> (* Some *)
                                                    v7957
                                            (* run_target_args'
                                            let v7964 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v7969 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7970 : string = "std::fs::read(&*$0)"
                                            let v7971 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v7889 v7970 
                                            (* run_target_args'
                                            let v7973 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7974 : string = "$0.unwrap()"
                                            let v7975 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7971 v7974 
                                            let _run_target_args'_v7973 = v7975 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7976 : string = "$0.unwrap()"
                                            let v7977 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7971 v7976 
                                            let _run_target_args'_v7973 = v7977 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7978 : string = "$0.unwrap()"
                                            let v7979 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7971 v7978 
                                            let _run_target_args'_v7973 = v7979 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7980 : Vec<uint8> = match v7971 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v7973 = v7980 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7981 : Vec<uint8> = match v7971 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v7973 = v7981 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v7982 : Vec<uint8> = match v7971 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v7973 = v7982 
                                            #endif
#else
                                            let v7983 : Vec<uint8> = match v7971 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v7973 = v7983 
                                            #endif
                                            let v7984 : Vec<uint8> = _run_target_args'_v7973 
                                            let _run_target_args'_v7969 = v7984 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7988 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v7969 = v7988 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7992 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v7969 = v7992 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7996 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v7969 = v7996 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8000 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v7969 = v8000 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8004 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v7969 = v8004 
                                            #endif
#else
                                            let v8007 : (uint8 []) = v7889 |> System.IO.File.ReadAllBytes
                                            let v8008 : string = "$0.to_vec()"
                                            let v8009 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8007 v8008 
                                            let _run_target_args'_v7969 = v8009 
                                            #endif
                                            let v8010 : Vec<uint8> = _run_target_args'_v7969 
                                            let v8016 : Vec<uint8> = method25(v8010)
                                            let v8017 : string = "std::string::String::from_utf8($0)"
                                            let v8018 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8016 v8017 
                                            (* run_target_args'
                                            let v8020 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8021 : string = "$0.unwrap()"
                                            let v8022 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8018 v8021 
                                            let _run_target_args'_v8020 = v8022 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8023 : string = "$0.unwrap()"
                                            let v8024 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8018 v8023 
                                            let _run_target_args'_v8020 = v8024 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8025 : string = "$0.unwrap()"
                                            let v8026 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8018 v8025 
                                            let _run_target_args'_v8020 = v8026 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8027 : std_string_String = match v8018 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8020 = v8027 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8028 : std_string_String = match v8018 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8020 = v8028 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8029 : std_string_String = match v8018 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8020 = v8029 
                                            #endif
#else
                                            let v8030 : std_string_String = match v8018 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v8020 = v8030 
                                            #endif
                                            let v8031 : std_string_String = _run_target_args'_v8020 
                                            let v8034 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8035 : string = Fable.Core.RustInterop.emitRustExpr v8031 v8034 
                                            let _run_target_args'_v7964 = v8035 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8037 : string = null |> unbox<string>
                                            let _run_target_args'_v7964 = v8037 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8041 : string = null |> unbox<string>
                                            let _run_target_args'_v7964 = v8041 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8045 : string = null |> unbox<string>
                                            let _run_target_args'_v7964 = v8045 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8049 : string = null |> unbox<string>
                                            let _run_target_args'_v7964 = v8049 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v8053 : string = null |> unbox<string>
                                            let _run_target_args'_v7964 = v8053 
                                            #endif
#else
                                            let v8056 : string = v7889 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v7964 = v8056 
                                            #endif
                                            let v8057 : string = _run_target_args'_v7964 
                                            let v8065 : string = "ts"
                                            let v8066 : string = $"%A{struct (v8065, v8057)}"
                                            let v8069 : string = method26(v8066)
                                            let v8070 : string = method31()
                                            let v8071 : US5 = method32(v8070)
                                            let v8077 : US5 =
                                                match v8071 with
                                                | US5_1 -> (* None *)
                                                    let v8074 : string = __SOURCE_DIRECTORY__
                                                    method32(v8074)
                                                | US5_0(v8072) -> (* Some *)
                                                    US5_0(v8072)
                                            let v8083 : US5 =
                                                match v8077 with
                                                | US5_1 -> (* None *)
                                                    let v8080 : string = "/workspaces"
                                                    method32(v8080)
                                                | US5_0(v8078) -> (* Some *)
                                                    US5_0(v8078)
                                            let v8087 : string =
                                                match v8083 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v8084) -> (* Some *)
                                                    v8084
                                            let v8088 : string = method50(v8087)
                                            let v8089 : bool = "deps" = v8088
                                            let v8100 : string =
                                                if v8089 then
                                                    let v8090 : string option = method38(v8087)
                                                    let v8092 : string = v8090 |> Option.get
                                                    let v8095 : US5 = method32(v8092)
                                                    match v8095 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v8096) -> (* Some *)
                                                        v8096
                                                else
                                                    v8087
                                            let v8101 : string = "polyglot"
                                            let v8102 : string = method33(v8100, v8101)
                                            let v8103 : string = method31()
                                            let v8105 : (unit -> string) = v8103.ToLower
                                            let v8106 : string = v8105 ()
                                            let v8110 : (unit -> string) = v8102.ToLower
                                            let v8111 : string = v8110 ()
                                            let v8115 : bool = v8106.StartsWith (v8111, false, null)
                                            let v8120 : US13 =
                                                if v8115 then
                                                    US13_1(v8111)
                                                else
                                                    US13_0(v8111)
                                            let v8132 : Result<string, string> =
                                                match v8120 with
                                                | US13_1(v8126) -> (* Error *)
                                                    let v8128 : Result<string, string> = Error v8126 
                                                    v8128
                                                | US13_0(v8121) -> (* Ok *)
                                                    let v8123 : Result<string, string> = Ok v8121 
                                                    v8123
                                            let v8133 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v8134 : bool = Fable.Core.RustInterop.emitRustExpr v8132 v8133 
                                            let v8135 : string = "x"
                                            let v8136 : string = Fable.Core.RustInterop.emitRustExpr () v8135 
                                            let v8137 : string = "true; $0 })"
                                            let v8138 : bool = Fable.Core.RustInterop.emitRustExpr v8136 v8137 
                                            let v8139 : string = "_result_unwrap_or_else"
                                            let v8140 : string = Fable.Core.RustInterop.emitRustExpr () v8139 
                                            let v8141 : string = "spiral"
                                            let v8142 : US41 = US41_1
                                            let v8143 : US42 = US42_0(v8142)
                                            let v8144 : US5 = US5_0(v8069)
                                            let v8145 : string = method183(v8144, v8141, v8143, v8140)
                                            let v8146 : string = "Fable.Core"
                                            let v8147 : string = "4.3.0"
                                            let v8148 : UH4 = UH4_0
                                            let v8149 : UH4 = UH4_1(v8146, v8147, v8148)
                                            let v8150 : UH2 = UH2_0
                                            let v8151 : string = method184(v8057, v8141, v8150, v8149, v8145, v8140)
                                            let v8152 : string = "lib/typescript/fable/fable_modules"
                                            let v8153 : string = method33(v8140, v8152)
                                            let v8154 : string = $"fable-library-{v8065}"
                                            let v8155 : string = method219(v8154)
                                            let v8156 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v8157 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v8153 v8156 
                                            let v8158 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v8159 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v8154)
                                            let v8160 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v8157, v8159) v8158 
                                            let v8161 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method223(v8155)
                                            let v8162 : string = "futures::stream::StreamExt::filter_map(v8160, |x| async { v8161(x) })"
                                            let v8163 : _ = Fable.Core.RustInterop.emitRustExpr () v8162 
                                            let v8164 : string = "Box::pin(futures::stream::StreamExt::collect(v8163))"
                                            let v8165 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v8164 
                                            let v8166 : string = "v8165.await"
                                            let v8167 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v8166 
                                            let v8168 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v8169 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v8167 v8168 
                                            let v8170 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v8171 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v8172 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v8169, v8171) v8170 
                                            let v8173 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v8174 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v8172 v8173 
                                            let v8175 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v8176 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v8174 v8175 
                                            let v8177 : struct (string * string) option = v8176 |> Array.tryItem 0 
                                            let v8180 : (struct (string * string) -> US51) = method228()
                                            let v8181 : US51 option = v8177 |> Option.map v8180 
                                            let v8202 : US51 = US51_1
                                            let v8203 : US51 = v8181 |> Option.defaultValue v8202 
                                            let v8267 : unit = ()
                                            let v8268 : (unit -> unit) = closure118(v8203)
                                            let v8269 : unit = (fun () -> v8268 (); v8267) ()
                                            method230(v8145, v8153, v8203)
                                            let v8330 : US39 = US39_1
                                            let struct (v8331 : int32, v8332 : string) = method193(v8330, v8145, v8065, v8151, v8120)
                                            method230(v8145, v8153, v8203)
                                            let v8334 : bool = v8331 <> 0 
                                            let struct (v9053 : US5, v9054 : US5, v9055 : US5, v9056 : US5) =
                                                if v8334 then
                                                    let v8397 : unit = ()
                                                    let v8398 : (unit -> unit) = closure119(v8332, v8331)
                                                    let v8399 : unit = (fun () -> v8398 (); v8397) ()
                                                    let v8460 : US5 = US5_0(v8065)
                                                    let v8461 : US5 = US5_1
                                                    let v8462 : US5 = US5_1
                                                    let v8463 : US5 = US5_0(v8332)
                                                    struct (v8460, v8461, v8462, v8463)
                                                else
                                                    let v8464 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v8465 : bool = Fable.Core.RustInterop.emitRustExpr v7959 v8464 
                                                    let v8466 : string = "x"
                                                    let v8467 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8466 
                                                    let v8468 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v8469 : string = Fable.Core.RustInterop.emitRustExpr v8467 v8468 
                                                    let v8472 : string = "="
                                                    let v8473 : bool = v8469.Contains v8472 
                                                    let v8477 : string =
                                                        if v8473 then
                                                            v8469
                                                        else
                                                            let v8476 : string = $"\"{v8469}\":\"*\""
                                                            v8476
                                                    let v8478 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v8479 : bool = Fable.Core.RustInterop.emitRustExpr v8477 v8478 
                                                    let v8480 : string = "_vec_map"
                                                    let v8481 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v8480 
                                                    let v8482 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v8483 : (string []) = Fable.Core.RustInterop.emitRustExpr v8481 v8482 
                                                    let v8488 : unit = ()
                                                    let _let'_v8488 =
                                                        seq {
                                                            for i = 0 to v8483.Length - 1 do yield v8483.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v8491 : string seq = _let'_v8488 
                                                    let v8499 : (string -> (string seq -> string)) = String.concat
                                                    let v8500 : string = ",\n"
                                                    let v8501 : (string seq -> string) = v8499 v8500
                                                    let v8502 : string = v8501 v8491
                                                    let v8505 : string = $"{{"
                                                    let v8506 : string = $"  \"name\": \"spiral_{v8069}\","
                                                    let v8507 : string = v8505 + v8506 
                                                    let v8508 : string = $"  \"dependencies\": {{"
                                                    let v8509 : string = v8507 + v8508 
                                                    let v8510 : string = v8509 + v8502 
                                                    let v8511 : string = $"  }},"
                                                    let v8512 : string = v8510 + v8511 
                                                    let v8513 : string = $"    \"devDependencies\": {{"
                                                    let v8514 : string = v8512 + v8513 
                                                    let v8515 : string = $"  }},"
                                                    let v8516 : string = v8514 + v8515 
                                                    let v8517 : string = $"}}"
                                                    let v8518 : string = v8516 + v8517 
                                                    let v8519 : string = "package.json"
                                                    let v8520 : string = method33(v8145, v8519)
                                                    let v8521 : string = "../.."
                                                    let v8522 : string = method33(v8145, v8521)
                                                    let v8523 : string = method33(v8522, v8519)
                                                    method70(v8520, v8518)
                                                    let v8524 : string = ""
                                                    method70(v8523, v8524)
                                                    let v8525 : string = $"{v8141}.{v8065}"
                                                    let v8526 : string = method33(v8145, v8525)
                                                    let v8587 : unit = ()
                                                    let v8588 : (unit -> unit) = closure120(v8526)
                                                    let v8589 : unit = (fun () -> v8588 (); v8587) ()
                                                    (* run_target_args'
                                                    let v8654 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v8659 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8660 : string = "std::fs::read(&*$0)"
                                                    let v8661 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8526 v8660 
                                                    (* run_target_args'
                                                    let v8663 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8664 : string = "$0.unwrap()"
                                                    let v8665 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8661 v8664 
                                                    let _run_target_args'_v8663 = v8665 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8666 : string = "$0.unwrap()"
                                                    let v8667 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8661 v8666 
                                                    let _run_target_args'_v8663 = v8667 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8668 : string = "$0.unwrap()"
                                                    let v8669 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8661 v8668 
                                                    let _run_target_args'_v8663 = v8669 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8670 : Vec<uint8> = match v8661 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8663 = v8670 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8671 : Vec<uint8> = match v8661 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8663 = v8671 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8672 : Vec<uint8> = match v8661 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8663 = v8672 
                                                    #endif
#else
                                                    let v8673 : Vec<uint8> = match v8661 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8663 = v8673 
                                                    #endif
                                                    let v8674 : Vec<uint8> = _run_target_args'_v8663 
                                                    let _run_target_args'_v8659 = v8674 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8678 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8659 = v8678 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8682 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8659 = v8682 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8686 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8659 = v8686 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8690 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8659 = v8690 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8694 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v8659 = v8694 
                                                    #endif
#else
                                                    let v8697 : (uint8 []) = v8526 |> System.IO.File.ReadAllBytes
                                                    let v8698 : string = "$0.to_vec()"
                                                    let v8699 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8697 v8698 
                                                    let _run_target_args'_v8659 = v8699 
                                                    #endif
                                                    let v8700 : Vec<uint8> = _run_target_args'_v8659 
                                                    let v8706 : Vec<uint8> = method25(v8700)
                                                    let v8707 : string = "std::string::String::from_utf8($0)"
                                                    let v8708 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8706 v8707 
                                                    (* run_target_args'
                                                    let v8710 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8711 : string = "$0.unwrap()"
                                                    let v8712 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8708 v8711 
                                                    let _run_target_args'_v8710 = v8712 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8713 : string = "$0.unwrap()"
                                                    let v8714 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8708 v8713 
                                                    let _run_target_args'_v8710 = v8714 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8715 : string = "$0.unwrap()"
                                                    let v8716 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8708 v8715 
                                                    let _run_target_args'_v8710 = v8716 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8717 : std_string_String = match v8708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8710 = v8717 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8718 : std_string_String = match v8708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8710 = v8718 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8719 : std_string_String = match v8708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8710 = v8719 
                                                    #endif
#else
                                                    let v8720 : std_string_String = match v8708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v8710 = v8720 
                                                    #endif
                                                    let v8721 : std_string_String = _run_target_args'_v8710 
                                                    let v8724 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v8725 : string = Fable.Core.RustInterop.emitRustExpr v8721 v8724 
                                                    let _run_target_args'_v8654 = v8725 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8727 : string = null |> unbox<string>
                                                    let _run_target_args'_v8654 = v8727 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8731 : string = null |> unbox<string>
                                                    let _run_target_args'_v8654 = v8731 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8735 : string = null |> unbox<string>
                                                    let _run_target_args'_v8654 = v8735 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8739 : string = null |> unbox<string>
                                                    let _run_target_args'_v8654 = v8739 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8743 : string = null |> unbox<string>
                                                    let _run_target_args'_v8654 = v8743 
                                                    #endif
#else
                                                    let v8746 : string = v8526 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v8654 = v8746 
                                                    #endif
                                                    let v8747 : string = _run_target_args'_v8654 
                                                    let v8755 : string = "// spiral.process_typescript"
                                                    let v8756 : bool = v8747.Contains v8755 
                                                    let v8765 : string =
                                                        if v8756 then
                                                            v8747
                                                        else
                                                            let v8759 : string = $"\"./fable_modules/fable-library-ts.{v8203}/"
                                                            let v8760 : string = $"\"{v8140}/lib/typescript/fable/fable_modules/fable-library-ts.{v8203}/"
                                                            let v8761 : string = v8747.Replace (v8759, v8760)
                                                            let v8762 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v8763 : string = " defaultOf::<()>();"
                                                            method60(v8762, v8763, v8761)
                                                    let v8766 : bool = v8756 = false
                                                    if v8766 then
                                                        let v8767 : string = $"{v8765}\n\n{v8755}\n"
                                                        method70(v8526, v8767)
                                                    let v8768 : string = $"bun --bun run \"{v8526}\""
                                                    let v8769 : string = "PATH"
                                                    let v8770 : string = method3(v8769)
                                                    let v8771 : bool = v8770 = ""
                                                    let v8807 : US5 =
                                                        if v8771 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v8774 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v8775 : string = "cfg!(windows)"
                                                            let v8776 : bool = Fable.Core.RustInterop.emitRustExpr () v8775 
                                                            let _run_target_args'_v8774 = v8776 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v8777 : string = "cfg!(windows)"
                                                            let v8778 : bool = Fable.Core.RustInterop.emitRustExpr () v8777 
                                                            let _run_target_args'_v8774 = v8778 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v8779 : string = "cfg!(windows)"
                                                            let v8780 : bool = Fable.Core.RustInterop.emitRustExpr () v8779 
                                                            let _run_target_args'_v8774 = v8780 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v8781 : US3 = US3_0
                                                            let v8782 : US4 = US4_4(v8781)
                                                            let v8783 : string = $"platform.is_windows / target: {v8782}"
                                                            let v8784 : bool = failwith<bool> v8783
                                                            let _run_target_args'_v8774 = v8784 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v8785 : US3 = US3_0
                                                            let v8786 : US4 = US4_5(v8785)
                                                            let v8787 : string = $"platform.is_windows / target: {v8786}"
                                                            let v8788 : bool = failwith<bool> v8787
                                                            let _run_target_args'_v8774 = v8788 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v8789 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v8790 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v8791 : bool = v8790 v8789
                                                            let _run_target_args'_v8774 = v8791 
                                                            #endif
#else
                                                            let v8792 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v8793 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v8794 : bool = v8793 v8792
                                                            let _run_target_args'_v8774 = v8794 
                                                            #endif
                                                            let v8795 : bool = _run_target_args'_v8774 
                                                            let v8803 : string =
                                                                if v8795 then
                                                                    let v8801 : string = ";"
                                                                    v8801
                                                                else
                                                                    let v8802 : string = ":"
                                                                    v8802
                                                            let v8804 : string = "~/.bun/bin"
                                                            let v8805 : string = $"{v8804}{v8803}{v8770}"
                                                            US5_0(v8805)
                                                    let v8813 : UH4 =
                                                        match v8807 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v8808) -> (* Some *)
                                                            let v8809 : UH4 = UH4_0
                                                            UH4_1(v8769, v8808, v8809)
                                                    let v8814 : string = "TRACE_LEVEL"
                                                    let v8815 : string = "Verbose"
                                                    let v8816 : UH4 = UH4_0
                                                    let v8817 : UH4 = UH4_1(v8814, v8815, v8816)
                                                    let v8818 : UH4 = method233(v8813, v8817)
                                                    let v8819 : struct (string * string) list = []
                                                    let v8820 : struct (string * string) list = method234(v8818, v8819)
                                                    let v8822 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v8823 : (struct (string * string) []) = v8822 v8820
                                                    let v8827 : System.Threading.CancellationToken option = None
                                                    let v8830 : (struct (string * string) []) = [||]
                                                    let v8832 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v8836 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v8840 : string option = None
                                                    let v8854 : Result<string, string> =
                                                        match v8120 with
                                                        | US13_1(v8848) -> (* Error *)
                                                            let v8850 : Result<string, string> = Error v8848 
                                                            v8850
                                                        | US13_0(v8843) -> (* Ok *)
                                                            let v8845 : Result<string, string> = Ok v8843 
                                                            v8845
                                                    (* run_target_args'
                                                    let v8856 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v8857 : string = "$0.ok()"
                                                    let v8858 : string option = Fable.Core.RustInterop.emitRustExpr v8854 v8857 
                                                    let _run_target_args'_v8856 = v8858 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v8859 : string = "$0.ok()"
                                                    let v8860 : string option = Fable.Core.RustInterop.emitRustExpr v8854 v8859 
                                                    let _run_target_args'_v8856 = v8860 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v8861 : string = "$0.ok()"
                                                    let v8862 : string option = Fable.Core.RustInterop.emitRustExpr v8854 v8861 
                                                    let _run_target_args'_v8856 = v8862 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v8863 : string option = match v8854 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v8856 = v8863 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v8864 : string option = match v8854 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v8856 = v8864 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v8865 : string option = match v8854 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v8856 = v8865 
                                                    #endif
#else
                                                    let v8866 : string option = match v8854 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v8856 = v8866 
                                                    #endif
                                                    let v8867 : string option = _run_target_args'_v8856 
                                                    let v8870 : bool = true
                                                    let struct (v8871 : int32, v8872 : string) = method91(v8768, v8827, v8823, v8832, v8836, v8870, v8867)
                                                    let v8873 : int32 = v8823.Length
                                                    let v8874 : (string []) = Array.zeroCreate<string> (v8873)
                                                    let v8875 : Mut5 = {l0 = 0} : Mut5
                                                    while method29(v8873, v8875) do
                                                        let v8877 : int32 = v8875.l0
                                                        let struct (v8878 : string, v8879 : string) = v8823.[int v8877]
                                                        let v8880 : string = $"$env:{v8878}=''{v8879}''"
                                                        v8874.[int v8877] <- v8880
                                                        let v8881 : int32 = v8877 + 1
                                                        v8875.l0 <- v8881
                                                        ()
                                                    let v8883 : string seq = v8874 |> Seq.ofArray
                                                    let v8888 : (string -> (string seq -> string)) = String.concat
                                                    let v8889 : string = ";"
                                                    let v8890 : (string seq -> string) = v8888 v8889
                                                    let v8891 : string = v8890 v8883
                                                    let v8894 : string = $"pwsh -c '{v8891}; {v8768}'"
                                                    let v8895 : bool = v8871 = 0
                                                    let struct (v9049 : US5, v9050 : US5, v9051 : US5, v9052 : US5) =
                                                        if v8895 then
                                                            let v8896 : (string -> US5) = closure72()
                                                            let v8897 : (unit -> string) = closure121(v8872)
                                                            let v8898 : (exn -> US5) = closure122(v8526, v8872, v8894)
                                                            let v8900 : US5 = US5_1
                                                            let result = ref v8900
                                                            try
                                                                result.Value <- v8897 () |> v8896 
                                                            with ex ->
                                                                result.Value <- v8898 ex 
                                                            let v8901 : US5 = result.Value
                                                            let v8915 : string option =
                                                                match v8901 with
                                                                | US5_1 -> (* None *)
                                                                    let v8911 : string option = None
                                                                    v8911
                                                                | US5_0(v8905) -> (* Some *)
                                                                    let v8907 : string option = Some v8905 
                                                                    v8907
                                                            let v8916 : string = "$0.unwrap()"
                                                            let v8917 : string = Fable.Core.RustInterop.emitRustExpr v8915 v8916 
                                                            let v8918 : US5 = US5_0(v8065)
                                                            let v8919 : US5 = US5_0(v8765)
                                                            let v8920 : US5 = US5_0(v8526)
                                                            let v8921 : US5 = US5_0(v8917)
                                                            struct (v8918, v8919, v8920, v8921)
                                                        else
                                                            let v8982 : unit = ()
                                                            let v8983 : (unit -> unit) = closure124(v8526, v8872, v8871, v8894)
                                                            let v8984 : unit = (fun () -> v8983 (); v8982) ()
                                                            let v9045 : US5 = US5_0(v8065)
                                                            let v9046 : US5 = US5_1
                                                            let v9047 : US5 = US5_1
                                                            let v9048 : US5 = US5_1
                                                            struct (v9045, v9046, v9047, v9048)
                                                    struct (v9049, v9050, v9051, v9052)
                                            struct (v9053, v9054, v9055, v9056)
                                        else
                                            let v9057 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9058 : string = Fable.Core.RustInterop.emitRustExpr v40 v9057 
                                            let v9059 : bool = v9058 = "python"
                                            let struct (v10202 : US5, v10203 : US5, v10204 : US5, v10205 : US5) =
                                                if v9059 then
                                                    let v9060 : string = method168()
                                                    (* run_target_args'
                                                    let v9065 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9066 : string = "&*$0"
                                                    let v9067 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9060 v9066 
                                                    let _run_target_args'_v9065 = v9067 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9068 : string = "&*$0"
                                                    let v9069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9060 v9068 
                                                    let _run_target_args'_v9065 = v9069 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9070 : string = "&*$0"
                                                    let v9071 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9060 v9070 
                                                    let _run_target_args'_v9065 = v9071 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9073 : Ref<Str> = v9060 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9065 = v9073 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9077 : Ref<Str> = v9060 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9065 = v9077 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9081 : Ref<Str> = v9060 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9065 = v9081 
                                                    #endif
#else
                                                    let v9085 : Ref<Str> = v9060 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9065 = v9085 
                                                    #endif
                                                    let v9088 : Ref<Str> = _run_target_args'_v9065 
                                                    let v9094 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v9095 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9088) v9094 
                                                    let v9098 : (std_string_String -> US7) = method21()
                                                    let v9099 : US7 option = v9095 |> Option.map v9098 
                                                    let v9119 : US7 = US7_1
                                                    let v9120 : US7 = v9099 |> Option.defaultValue v9119 
                                                    let v9127 : std_string_String =
                                                        match v9120 with
                                                        | US7_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US7_0(v9124) -> (* Some *)
                                                            v9124
                                                    let v9128 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v9129 : string = Fable.Core.RustInterop.emitRustExpr v9127 v9128 
                                                    let v9130 : string = method23()
                                                    (* run_target_args'
                                                    let v9135 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9136 : string = "&*$0"
                                                    let v9137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9130 v9136 
                                                    let _run_target_args'_v9135 = v9137 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9138 : string = "&*$0"
                                                    let v9139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9130 v9138 
                                                    let _run_target_args'_v9135 = v9139 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9140 : string = "&*$0"
                                                    let v9141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9130 v9140 
                                                    let _run_target_args'_v9135 = v9141 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9143 : Ref<Str> = v9130 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9135 = v9143 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9147 : Ref<Str> = v9130 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9135 = v9147 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9151 : Ref<Str> = v9130 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9135 = v9151 
                                                    #endif
#else
                                                    let v9155 : Ref<Str> = v9130 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v9135 = v9155 
                                                    #endif
                                                    let v9158 : Ref<Str> = _run_target_args'_v9135 
                                                    let v9164 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v9165 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9158) v9164 
                                                    let v9168 : (Vec<std_string_String> -> US11) = method24()
                                                    let v9169 : US11 option = v9165 |> Option.map v9168 
                                                    let v9189 : US11 = US11_1
                                                    let v9190 : US11 = v9169 |> Option.defaultValue v9189 
                                                    let v9194 : (std_string_String []) = [||]
                                                    let v9195 : string = "$0.to_vec()"
                                                    let v9196 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v9194 v9195 
                                                    let v9199 : Vec<std_string_String> =
                                                        match v9190 with
                                                        | US11_1 -> (* None *)
                                                            v9196
                                                        | US11_0(v9197) -> (* Some *)
                                                            v9197
                                                    let v9200 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v9205 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v9210 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9211 : string = "std::fs::read(&*$0)"
                                                    let v9212 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9129 v9211 
                                                    (* run_target_args'
                                                    let v9214 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9215 : string = "$0.unwrap()"
                                                    let v9216 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9212 v9215 
                                                    let _run_target_args'_v9214 = v9216 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9217 : string = "$0.unwrap()"
                                                    let v9218 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9212 v9217 
                                                    let _run_target_args'_v9214 = v9218 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9219 : string = "$0.unwrap()"
                                                    let v9220 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9212 v9219 
                                                    let _run_target_args'_v9214 = v9220 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9221 : Vec<uint8> = match v9212 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9214 = v9221 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9222 : Vec<uint8> = match v9212 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9214 = v9222 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9223 : Vec<uint8> = match v9212 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9214 = v9223 
                                                    #endif
#else
                                                    let v9224 : Vec<uint8> = match v9212 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9214 = v9224 
                                                    #endif
                                                    let v9225 : Vec<uint8> = _run_target_args'_v9214 
                                                    let _run_target_args'_v9210 = v9225 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9229 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9210 = v9229 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9233 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9210 = v9233 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9237 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9210 = v9237 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9241 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9210 = v9241 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9245 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v9210 = v9245 
                                                    #endif
#else
                                                    let v9248 : (uint8 []) = v9129 |> System.IO.File.ReadAllBytes
                                                    let v9249 : string = "$0.to_vec()"
                                                    let v9250 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9248 v9249 
                                                    let _run_target_args'_v9210 = v9250 
                                                    #endif
                                                    let v9251 : Vec<uint8> = _run_target_args'_v9210 
                                                    let v9257 : Vec<uint8> = method25(v9251)
                                                    let v9258 : string = "std::string::String::from_utf8($0)"
                                                    let v9259 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9257 v9258 
                                                    (* run_target_args'
                                                    let v9261 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v9262 : string = "$0.unwrap()"
                                                    let v9263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9259 v9262 
                                                    let _run_target_args'_v9261 = v9263 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9264 : string = "$0.unwrap()"
                                                    let v9265 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9259 v9264 
                                                    let _run_target_args'_v9261 = v9265 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9266 : string = "$0.unwrap()"
                                                    let v9267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9259 v9266 
                                                    let _run_target_args'_v9261 = v9267 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9268 : std_string_String = match v9259 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9261 = v9268 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9269 : std_string_String = match v9259 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9261 = v9269 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9270 : std_string_String = match v9259 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9261 = v9270 
                                                    #endif
#else
                                                    let v9271 : std_string_String = match v9259 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v9261 = v9271 
                                                    #endif
                                                    let v9272 : std_string_String = _run_target_args'_v9261 
                                                    let v9275 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v9276 : string = Fable.Core.RustInterop.emitRustExpr v9272 v9275 
                                                    let _run_target_args'_v9205 = v9276 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v9278 : string = null |> unbox<string>
                                                    let _run_target_args'_v9205 = v9278 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v9282 : string = null |> unbox<string>
                                                    let _run_target_args'_v9205 = v9282 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v9286 : string = null |> unbox<string>
                                                    let _run_target_args'_v9205 = v9286 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v9290 : string = null |> unbox<string>
                                                    let _run_target_args'_v9205 = v9290 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v9294 : string = null |> unbox<string>
                                                    let _run_target_args'_v9205 = v9294 
                                                    #endif
#else
                                                    let v9297 : string = v9129 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v9205 = v9297 
                                                    #endif
                                                    let v9298 : string = _run_target_args'_v9205 
                                                    let v9306 : string = "py"
                                                    let v9307 : string = $"%A{struct (v9306, v9298)}"
                                                    let v9310 : string = method26(v9307)
                                                    let v9311 : string = method31()
                                                    let v9312 : US5 = method32(v9311)
                                                    let v9318 : US5 =
                                                        match v9312 with
                                                        | US5_1 -> (* None *)
                                                            let v9315 : string = __SOURCE_DIRECTORY__
                                                            method32(v9315)
                                                        | US5_0(v9313) -> (* Some *)
                                                            US5_0(v9313)
                                                    let v9324 : US5 =
                                                        match v9318 with
                                                        | US5_1 -> (* None *)
                                                            let v9321 : string = "/workspaces"
                                                            method32(v9321)
                                                        | US5_0(v9319) -> (* Some *)
                                                            US5_0(v9319)
                                                    let v9328 : string =
                                                        match v9324 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v9325) -> (* Some *)
                                                            v9325
                                                    let v9329 : string = method50(v9328)
                                                    let v9330 : bool = "deps" = v9329
                                                    let v9341 : string =
                                                        if v9330 then
                                                            let v9331 : string option = method38(v9328)
                                                            let v9333 : string = v9331 |> Option.get
                                                            let v9336 : US5 = method32(v9333)
                                                            match v9336 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v9337) -> (* Some *)
                                                                v9337
                                                        else
                                                            v9328
                                                    let v9342 : string = "polyglot"
                                                    let v9343 : string = method33(v9341, v9342)
                                                    let v9344 : string = method31()
                                                    let v9346 : (unit -> string) = v9344.ToLower
                                                    let v9347 : string = v9346 ()
                                                    let v9351 : (unit -> string) = v9343.ToLower
                                                    let v9352 : string = v9351 ()
                                                    let v9356 : bool = v9347.StartsWith (v9352, false, null)
                                                    let v9361 : US13 =
                                                        if v9356 then
                                                            US13_1(v9352)
                                                        else
                                                            US13_0(v9352)
                                                    let v9373 : Result<string, string> =
                                                        match v9361 with
                                                        | US13_1(v9367) -> (* Error *)
                                                            let v9369 : Result<string, string> = Error v9367 
                                                            v9369
                                                        | US13_0(v9362) -> (* Ok *)
                                                            let v9364 : Result<string, string> = Ok v9362 
                                                            v9364
                                                    let v9374 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v9375 : bool = Fable.Core.RustInterop.emitRustExpr v9373 v9374 
                                                    let v9376 : string = "x"
                                                    let v9377 : string = Fable.Core.RustInterop.emitRustExpr () v9376 
                                                    let v9378 : string = "true; $0 })"
                                                    let v9379 : bool = Fable.Core.RustInterop.emitRustExpr v9377 v9378 
                                                    let v9380 : string = "_result_unwrap_or_else"
                                                    let v9381 : string = Fable.Core.RustInterop.emitRustExpr () v9380 
                                                    let v9382 : string = "spiral"
                                                    let v9383 : US41 = US41_2
                                                    let v9384 : US42 = US42_0(v9383)
                                                    let v9385 : US5 = US5_0(v9310)
                                                    let v9386 : string = method183(v9385, v9382, v9384, v9381)
                                                    let v9387 : string = "Fable.Core"
                                                    let v9388 : string = "4.3.0"
                                                    let v9389 : UH4 = UH4_0
                                                    let v9390 : UH4 = UH4_1(v9387, v9388, v9389)
                                                    let v9391 : UH2 = UH2_0
                                                    let v9392 : string = method184(v9298, v9382, v9391, v9390, v9386, v9381)
                                                    let v9393 : string = "lib/python/fable/fable_modules"
                                                    let v9394 : string = method33(v9381, v9393)
                                                    let v9395 : string = $"fable_library"
                                                    let v9396 : string = method33(v9394, v9395)
                                                    let v9397 : string = $"fable_modules/fable_library"
                                                    let v9398 : string = method33(v9386, v9397)
                                                    method192(v9396, v9398)
                                                    let v9399 : US39 = US39_1
                                                    let struct (v9400 : int32, v9401 : string) = method193(v9399, v9386, v9306, v9392, v9361)
                                                    let v9403 : bool = v9400 <> 0 
                                                    let struct (v10071 : US5, v10072 : US5, v10073 : US5, v10074 : US5) =
                                                        if v9403 then
                                                            let v9466 : unit = ()
                                                            let v9467 : (unit -> unit) = closure125(v9401, v9400)
                                                            let v9468 : unit = (fun () -> v9467 (); v9466) ()
                                                            let v9529 : US5 = US5_0(v9306)
                                                            let v9530 : US5 = US5_1
                                                            let v9531 : US5 = US5_1
                                                            let v9532 : US5 = US5_0(v9401)
                                                            struct (v9529, v9530, v9531, v9532)
                                                        else
                                                            let v9533 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v9534 : bool = Fable.Core.RustInterop.emitRustExpr v9199 v9533 
                                                            let v9535 : string = "x"
                                                            let v9536 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9535 
                                                            let v9537 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9538 : string = Fable.Core.RustInterop.emitRustExpr v9536 v9537 
                                                            let v9541 : string = "="
                                                            let v9542 : bool = v9538.Contains v9541 
                                                            let v9546 : string =
                                                                if v9542 then
                                                                    v9538
                                                                else
                                                                    let v9545 : string = $"\"{v9538}\":\"*\""
                                                                    v9545
                                                            let v9547 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v9548 : bool = Fable.Core.RustInterop.emitRustExpr v9546 v9547 
                                                            let v9549 : string = "_vec_map"
                                                            let v9550 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v9549 
                                                            let v9551 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v9552 : (string []) = Fable.Core.RustInterop.emitRustExpr v9550 v9551 
                                                            let v9557 : unit = ()
                                                            let _let'_v9557 =
                                                                seq {
                                                                    for i = 0 to v9552.Length - 1 do yield v9552.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v9560 : string seq = _let'_v9557 
                                                            let v9568 : (string -> (string seq -> string)) = String.concat
                                                            let v9569 : string = ",\n"
                                                            let v9570 : (string seq -> string) = v9568 v9569
                                                            let v9571 : string = v9570 v9560
                                                            let v9574 : string = $"{{"
                                                            let v9575 : string = $"  \"name\": \"spiral_{v9310}\","
                                                            let v9576 : string = v9574 + v9575 
                                                            let v9577 : string = $"  \"dependencies\": {{"
                                                            let v9578 : string = v9576 + v9577 
                                                            let v9579 : string = v9578 + v9571 
                                                            let v9580 : string = $"  }},"
                                                            let v9581 : string = v9579 + v9580 
                                                            let v9582 : string = $"    \"devDependencies\": {{"
                                                            let v9583 : string = v9581 + v9582 
                                                            let v9584 : string = $"  }},"
                                                            let v9585 : string = v9583 + v9584 
                                                            let v9586 : string = $"}}"
                                                            let v9587 : string = v9585 + v9586 
                                                            let v9588 : string = "package.json"
                                                            let v9589 : string = method33(v9386, v9588)
                                                            let v9590 : string = "../.."
                                                            let v9591 : string = method33(v9386, v9590)
                                                            let v9592 : string = method33(v9591, v9588)
                                                            method70(v9589, v9587)
                                                            let v9593 : string = ""
                                                            method70(v9592, v9593)
                                                            let v9594 : string = $"{v9382}.{v9306}"
                                                            let v9595 : string = method33(v9386, v9594)
                                                            let v9656 : unit = ()
                                                            let v9657 : (unit -> unit) = closure126(v9595)
                                                            let v9658 : unit = (fun () -> v9657 (); v9656) ()
                                                            (* run_target_args'
                                                            let v9723 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v9728 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9729 : string = "std::fs::read(&*$0)"
                                                            let v9730 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9595 v9729 
                                                            (* run_target_args'
                                                            let v9732 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9733 : string = "$0.unwrap()"
                                                            let v9734 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9730 v9733 
                                                            let _run_target_args'_v9732 = v9734 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9735 : string = "$0.unwrap()"
                                                            let v9736 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9730 v9735 
                                                            let _run_target_args'_v9732 = v9736 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9737 : string = "$0.unwrap()"
                                                            let v9738 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9730 v9737 
                                                            let _run_target_args'_v9732 = v9738 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9739 : Vec<uint8> = match v9730 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9732 = v9739 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9740 : Vec<uint8> = match v9730 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9732 = v9740 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9741 : Vec<uint8> = match v9730 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9732 = v9741 
                                                            #endif
#else
                                                            let v9742 : Vec<uint8> = match v9730 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9732 = v9742 
                                                            #endif
                                                            let v9743 : Vec<uint8> = _run_target_args'_v9732 
                                                            let _run_target_args'_v9728 = v9743 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9747 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9728 = v9747 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9751 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9728 = v9751 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9755 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9728 = v9755 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9759 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9728 = v9759 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9763 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v9728 = v9763 
                                                            #endif
#else
                                                            let v9766 : (uint8 []) = v9595 |> System.IO.File.ReadAllBytes
                                                            let v9767 : string = "$0.to_vec()"
                                                            let v9768 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9766 v9767 
                                                            let _run_target_args'_v9728 = v9768 
                                                            #endif
                                                            let v9769 : Vec<uint8> = _run_target_args'_v9728 
                                                            let v9775 : Vec<uint8> = method25(v9769)
                                                            let v9776 : string = "std::string::String::from_utf8($0)"
                                                            let v9777 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9775 v9776 
                                                            (* run_target_args'
                                                            let v9779 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9780 : string = "$0.unwrap()"
                                                            let v9781 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9777 v9780 
                                                            let _run_target_args'_v9779 = v9781 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9782 : string = "$0.unwrap()"
                                                            let v9783 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9777 v9782 
                                                            let _run_target_args'_v9779 = v9783 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9784 : string = "$0.unwrap()"
                                                            let v9785 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9777 v9784 
                                                            let _run_target_args'_v9779 = v9785 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9786 : std_string_String = match v9777 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9779 = v9786 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9787 : std_string_String = match v9777 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9779 = v9787 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9788 : std_string_String = match v9777 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9779 = v9788 
                                                            #endif
#else
                                                            let v9789 : std_string_String = match v9777 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v9779 = v9789 
                                                            #endif
                                                            let v9790 : std_string_String = _run_target_args'_v9779 
                                                            let v9793 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9794 : string = Fable.Core.RustInterop.emitRustExpr v9790 v9793 
                                                            let _run_target_args'_v9723 = v9794 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9796 : string = null |> unbox<string>
                                                            let _run_target_args'_v9723 = v9796 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9800 : string = null |> unbox<string>
                                                            let _run_target_args'_v9723 = v9800 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9804 : string = null |> unbox<string>
                                                            let _run_target_args'_v9723 = v9804 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9808 : string = null |> unbox<string>
                                                            let _run_target_args'_v9723 = v9808 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9812 : string = null |> unbox<string>
                                                            let _run_target_args'_v9723 = v9812 
                                                            #endif
#else
                                                            let v9815 : string = v9595 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v9723 = v9815 
                                                            #endif
                                                            let v9816 : string = _run_target_args'_v9723 
                                                            let v9824 : string = "# spiral.process_python"
                                                            let v9825 : bool = v9816.Contains v9824 
                                                            let v9837 : string =
                                                                if v9825 then
                                                                    v9816
                                                                else
                                                                    let v9828 : string = "\";\".into()"
                                                                    let v9829 : string = Fable.Core.RustInterop.emitRustExpr () v9828 
                                                                    let v9830 : string = "),)"
                                                                    let v9831 : string = v9830 + v9829 
                                                                    let v9832 : string = "));"
                                                                    let v9833 : string = v9816.Replace (v9831, v9832)
                                                                    let v9834 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v9835 : string = " defaultOf::<()>();"
                                                                    method60(v9834, v9835, v9833)
                                                            let v9838 : bool = v9825 = false
                                                            if v9838 then
                                                                let v9839 : string = $"{v9837}\n\n{v9824}\n"
                                                                method70(v9595, v9839)
                                                            let v9840 : string = $"python \"{v9595}\""
                                                            let v9841 : string = "TRACE_LEVEL"
                                                            let v9842 : string = "Verbose"
                                                            let v9843 : (struct (string * string) []) = [|struct (v9841, v9842)|]
                                                            let v9845 : System.Threading.CancellationToken option = None
                                                            let v9848 : (struct (string * string) []) = [||]
                                                            let v9850 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v9854 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v9858 : string option = None
                                                            let v9872 : Result<string, string> =
                                                                match v9361 with
                                                                | US13_1(v9866) -> (* Error *)
                                                                    let v9868 : Result<string, string> = Error v9866 
                                                                    v9868
                                                                | US13_0(v9861) -> (* Ok *)
                                                                    let v9863 : Result<string, string> = Ok v9861 
                                                                    v9863
                                                            (* run_target_args'
                                                            let v9874 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9875 : string = "$0.ok()"
                                                            let v9876 : string option = Fable.Core.RustInterop.emitRustExpr v9872 v9875 
                                                            let _run_target_args'_v9874 = v9876 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9877 : string = "$0.ok()"
                                                            let v9878 : string option = Fable.Core.RustInterop.emitRustExpr v9872 v9877 
                                                            let _run_target_args'_v9874 = v9878 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9879 : string = "$0.ok()"
                                                            let v9880 : string option = Fable.Core.RustInterop.emitRustExpr v9872 v9879 
                                                            let _run_target_args'_v9874 = v9880 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9881 : string option = match v9872 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v9874 = v9881 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9882 : string option = match v9872 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v9874 = v9882 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v9883 : string option = match v9872 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v9874 = v9883 
                                                            #endif
#else
                                                            let v9884 : string option = match v9872 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v9874 = v9884 
                                                            #endif
                                                            let v9885 : string option = _run_target_args'_v9874 
                                                            let v9888 : bool = true
                                                            let struct (v9889 : int32, v9890 : string) = method91(v9840, v9845, v9843, v9850, v9854, v9888, v9885)
                                                            let v9891 : int32 = v9843.Length
                                                            let v9892 : (string []) = Array.zeroCreate<string> (v9891)
                                                            let v9893 : Mut5 = {l0 = 0} : Mut5
                                                            while method29(v9891, v9893) do
                                                                let v9895 : int32 = v9893.l0
                                                                let struct (v9896 : string, v9897 : string) = v9843.[int v9895]
                                                                let v9898 : string = $"$env:{v9896}=''{v9897}''"
                                                                v9892.[int v9895] <- v9898
                                                                let v9899 : int32 = v9895 + 1
                                                                v9893.l0 <- v9899
                                                                ()
                                                            let v9901 : string seq = v9892 |> Seq.ofArray
                                                            let v9906 : (string -> (string seq -> string)) = String.concat
                                                            let v9907 : string = ";"
                                                            let v9908 : (string seq -> string) = v9906 v9907
                                                            let v9909 : string = v9908 v9901
                                                            let v9912 : string = $"pwsh -c '{v9909}; {v9840}'"
                                                            let v9913 : bool = v9889 = 0
                                                            let struct (v10067 : US5, v10068 : US5, v10069 : US5, v10070 : US5) =
                                                                if v9913 then
                                                                    let v9914 : (string -> US5) = closure72()
                                                                    let v9915 : (unit -> string) = closure127(v9890)
                                                                    let v9916 : (exn -> US5) = closure128(v9595, v9890, v9912)
                                                                    let v9918 : US5 = US5_1
                                                                    let result = ref v9918
                                                                    try
                                                                        result.Value <- v9915 () |> v9914 
                                                                    with ex ->
                                                                        result.Value <- v9916 ex 
                                                                    let v9919 : US5 = result.Value
                                                                    let v9933 : string option =
                                                                        match v9919 with
                                                                        | US5_1 -> (* None *)
                                                                            let v9929 : string option = None
                                                                            v9929
                                                                        | US5_0(v9923) -> (* Some *)
                                                                            let v9925 : string option = Some v9923 
                                                                            v9925
                                                                    let v9934 : string = "$0.unwrap()"
                                                                    let v9935 : string = Fable.Core.RustInterop.emitRustExpr v9933 v9934 
                                                                    let v9936 : US5 = US5_0(v9306)
                                                                    let v9937 : US5 = US5_0(v9837)
                                                                    let v9938 : US5 = US5_0(v9595)
                                                                    let v9939 : US5 = US5_0(v9935)
                                                                    struct (v9936, v9937, v9938, v9939)
                                                                else
                                                                    let v10000 : unit = ()
                                                                    let v10001 : (unit -> unit) = closure130(v9595, v9890, v9889, v9912)
                                                                    let v10002 : unit = (fun () -> v10001 (); v10000) ()
                                                                    let v10063 : US5 = US5_0(v9306)
                                                                    let v10064 : US5 = US5_1
                                                                    let v10065 : US5 = US5_1
                                                                    let v10066 : US5 = US5_1
                                                                    struct (v10063, v10064, v10065, v10066)
                                                            struct (v10067, v10068, v10069, v10070)
                                                    struct (v10071, v10072, v10073, v10074)
                                                else
                                                    let v10135 : unit = ()
                                                    let v10136 : (unit -> unit) = closure131(v41, v40)
                                                    let v10137 : unit = (fun () -> v10136 (); v10135) ()
                                                    let v10198 : US5 = US5_1
                                                    let v10199 : US5 = US5_1
                                                    let v10200 : US5 = US5_1
                                                    let v10201 : US5 = US5_1
                                                    struct (v10198, v10199, v10200, v10201)
                                            struct (v10202, v10203, v10204, v10205)
                                    struct (v10206, v10207, v10208, v10209)
                            let v10217 : string =
                                match v10210 with
                                | US5_1 -> (* None *)
                                    let v10215 : string = ""
                                    v10215
                                | US5_0(v10214) -> (* Some *)
                                    v10214
                            let v10218 : string = "extension"
                            let v10222 : string =
                                match v10211 with
                                | US5_1 -> (* None *)
                                    let v10220 : string = ""
                                    v10220
                                | US5_0(v10219) -> (* Some *)
                                    v10219
                            let v10223 : string = "code"
                            let v10227 : string =
                                match v10212 with
                                | US5_1 -> (* None *)
                                    let v10225 : string = ""
                                    v10225
                                | US5_0(v10224) -> (* Some *)
                                    v10224
                            let v10228 : string = "code_path"
                            let v10232 : string =
                                match v10213 with
                                | US5_1 -> (* None *)
                                    let v10230 : string = ""
                                    v10230
                                | US5_0(v10229) -> (* Some *)
                                    v10229
                            let v10233 : string = "output"
                            [|struct (v10218, v10217); struct (v10223, v10222); struct (v10228, v10227); struct (v10233, v10232)|]
        | _ ->
            let v10239 : string = "extension"
            let v10240 : string = ""
            let v10241 : string = "code"
            let v10242 : string = "code_path"
            let v10243 : string = "output"
            [|struct (v10239, v10240); struct (v10241, v10240); struct (v10242, v10240); struct (v10243, v10240)|]
    let v10246 : string = "$0.to_vec()"
    let v10247 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v10245 v10246 
    let v10248 : unit = ()
    let v10249 : string = $"true; let _func1_from_v10248 = Func1::from(move |value| {{ //"
    let v10250 : bool = Fable.Core.RustInterop.emitRustExpr () v10249 
    let v10251 : string = $"value"
    let struct (v10252 : string, v10253 : string) = Fable.Core.RustInterop.emitRustExpr () v10251 
    (* run_target_args'
    let v10258 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10259 : string = "&*$0"
    let v10260 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10252 v10259 
    let _run_target_args'_v10258 = v10260 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10261 : string = "&*$0"
    let v10262 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10252 v10261 
    let _run_target_args'_v10258 = v10262 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10263 : string = "&*$0"
    let v10264 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10252 v10263 
    let _run_target_args'_v10258 = v10264 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10266 : Ref<Str> = v10252 |> unbox<Ref<Str>>
    let _run_target_args'_v10258 = v10266 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10270 : Ref<Str> = v10252 |> unbox<Ref<Str>>
    let _run_target_args'_v10258 = v10270 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10274 : Ref<Str> = v10252 |> unbox<Ref<Str>>
    let _run_target_args'_v10258 = v10274 
    #endif
#else
    let v10278 : Ref<Str> = v10252 |> unbox<Ref<Str>>
    let _run_target_args'_v10258 = v10278 
    #endif
    let v10281 : Ref<Str> = _run_target_args'_v10258 
    (* run_target_args'
    let v10291 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10292 : string = "String::from($0)"
    let v10293 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10281 v10292 
    let _run_target_args'_v10291 = v10293 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10294 : string = "String::from($0)"
    let v10295 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10281 v10294 
    let _run_target_args'_v10291 = v10295 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10296 : string = "String::from($0)"
    let v10297 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10281 v10296 
    let _run_target_args'_v10291 = v10297 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10299 : std_string_String = v10281 |> unbox<std_string_String>
    let _run_target_args'_v10291 = v10299 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10303 : std_string_String = v10281 |> unbox<std_string_String>
    let _run_target_args'_v10291 = v10303 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10307 : std_string_String = v10281 |> unbox<std_string_String>
    let _run_target_args'_v10291 = v10307 
    #endif
#else
    let v10311 : std_string_String = v10281 |> unbox<std_string_String>
    let _run_target_args'_v10291 = v10311 
    #endif
    let v10314 : std_string_String = _run_target_args'_v10291 
    (* run_target_args'
    let v10324 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10325 : string = "&*$0"
    let v10326 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10253 v10325 
    let _run_target_args'_v10324 = v10326 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10327 : string = "&*$0"
    let v10328 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10253 v10327 
    let _run_target_args'_v10324 = v10328 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10329 : string = "&*$0"
    let v10330 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10253 v10329 
    let _run_target_args'_v10324 = v10330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10332 : Ref<Str> = v10253 |> unbox<Ref<Str>>
    let _run_target_args'_v10324 = v10332 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10336 : Ref<Str> = v10253 |> unbox<Ref<Str>>
    let _run_target_args'_v10324 = v10336 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10340 : Ref<Str> = v10253 |> unbox<Ref<Str>>
    let _run_target_args'_v10324 = v10340 
    #endif
#else
    let v10344 : Ref<Str> = v10253 |> unbox<Ref<Str>>
    let _run_target_args'_v10324 = v10344 
    #endif
    let v10347 : Ref<Str> = _run_target_args'_v10324 
    (* run_target_args'
    let v10357 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10358 : string = "String::from($0)"
    let v10359 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10347 v10358 
    let _run_target_args'_v10357 = v10359 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10360 : string = "String::from($0)"
    let v10361 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10347 v10360 
    let _run_target_args'_v10357 = v10361 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10362 : string = "String::from($0)"
    let v10363 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10347 v10362 
    let _run_target_args'_v10357 = v10363 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10365 : std_string_String = v10347 |> unbox<std_string_String>
    let _run_target_args'_v10357 = v10365 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10369 : std_string_String = v10347 |> unbox<std_string_String>
    let _run_target_args'_v10357 = v10369 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10373 : std_string_String = v10347 |> unbox<std_string_String>
    let _run_target_args'_v10357 = v10373 
    #endif
#else
    let v10377 : std_string_String = v10347 |> unbox<std_string_String>
    let _run_target_args'_v10357 = v10377 
    #endif
    let v10380 : std_string_String = _run_target_args'_v10357 
    let v10387 : (std_string_String * std_string_String) = v10314, v10380 
    let func1_from_result = v10387 //
    let v10390 : _ = func1_from_result
    let v10391 : string = $"true; $0 /*"
    let v10392 : bool = Fable.Core.RustInterop.emitRustExpr v10390 v10391 
    let v10393 : string = $"*/ }}); //"
    let v10394 : bool = Fable.Core.RustInterop.emitRustExpr () v10393 
    let v10395 : string = $"_func1_from_v10248"
    let v10396 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v10395 
    let v10397 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v10398 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v10396)
    let v10399 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v10247, v10398) v10397 
    let v10400 : string = "std::collections::BTreeMap::from_iter(v10399.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v10401 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10400 
    let v10402 : string = "serde_json::to_string(&v10401)"
    let v10403 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v10402 
    let v10404 : (serde_json_Error -> string) = method242()
    (* run_target_args'
    let v10406 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10407 : string = "$0.map_err(|x| $1(x))"
    let v10408 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v10403, v10404) v10407 
    let _run_target_args'_v10406 = v10408 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10409 : string = "$0.map_err(|x| $1(x))"
    let v10410 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v10403, v10404) v10409 
    let _run_target_args'_v10406 = v10410 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10411 : string = "$0.map_err(|x| $1(x))"
    let v10412 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v10403, v10404) v10411 
    let _run_target_args'_v10406 = v10412 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10413 : Result<std_string_String, string> = match v10403 with Ok x -> Ok x | Error x -> Error (v10404 x)
    let _run_target_args'_v10406 = v10413 
    #endif
#if FABLE_COMPILER_PYTHON
    let v10414 : Result<std_string_String, string> = match v10403 with Ok x -> Ok x | Error x -> Error (v10404 x)
    let _run_target_args'_v10406 = v10414 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v10415 : Result<std_string_String, string> = match v10403 with Ok x -> Ok x | Error x -> Error (v10404 x)
    let _run_target_args'_v10406 = v10415 
    #endif
#else
    let v10416 : Result<std_string_String, string> = match v10403 with Ok x -> Ok x | Error x -> Error (v10404 x)
    let _run_target_args'_v10406 = v10416 
    #endif
    let v10417 : Result<std_string_String, string> = _run_target_args'_v10406 
    let v10420 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v10421 : bool = Fable.Core.RustInterop.emitRustExpr v10417 v10420 
    let v10422 : string = "x"
    let v10423 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10422 
    let v10424 : string = "fable_library_rust::String_::fromString($0)"
    let v10425 : string = Fable.Core.RustInterop.emitRustExpr v10423 v10424 
    let v10426 : string = "true; $0 })"
    let v10427 : bool = Fable.Core.RustInterop.emitRustExpr v10425 v10426 
    let v10428 : string = "_result_map_"
    let v10429 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v10428 
    let v10430 : string = ""
    let v10431 : string = "}"
    let v10432 : string = v10430 + v10431 
    let x = v10429 //
    let v10433 : _ = x
    let v10434 : unit = ()
    (* run_target_args'
    let v10435 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10436 : string = $"true; let _fix_closure_v10434 = $0"
    let v10437 : bool = Fable.Core.RustInterop.emitRustExpr v10433 v10436 
    let _run_target_args'_v10435 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10438 : string = $"true; let _fix_closure_v10434 = $0"
    let v10439 : bool = Fable.Core.RustInterop.emitRustExpr v10433 v10438 
    let _run_target_args'_v10435 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10440 : string = $"true; let _fix_closure_v10434 = $0"
    let v10441 : bool = Fable.Core.RustInterop.emitRustExpr v10433 v10440 
    let _run_target_args'_v10435 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v10435 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v10435 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v10435 = false 
    #endif
#else
    let _run_target_args'_v10435 = false 
    #endif
    let v10442 : bool = _run_target_args'_v10435 
    let v10444 : string = $"true; _fix_closure_v10434 " + v10432 + "); " + v10430 + " // rust.fix_closure'"
    let v10445 : bool = Fable.Core.RustInterop.emitRustExpr () v10444 
    let v10446 : string = "__future_init"
    let v10447 : _ = Fable.Core.RustInterop.emitRustExpr () v10446 
    let v10448 : string = "v10447"
    let v10449 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v10448 
    v10449
and closure1 () (v0 : (string [])) : int32 =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v38 : Mut0, v39 : Mut1, v40 : Mut2, v41 : Mut3, v42 : Mut4, v43 : int64 option) = TraceState.trace_state.Value
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure5(v0)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v177 : clap_Command = method0()
    let v178 : string = "clap::Command::get_matches($0)"
    let v179 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let v180 : US0 = v42.l0
    let v181 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v180, v179)
    let v182 : string = "futures::executor::block_on($0)"
    let v183 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v181 v182 
    (* run_target_args'
    let v185 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v186 : string = "$0.unwrap()"
    let v187 : string = Fable.Core.RustInterop.emitRustExpr v183 v186 
    let _run_target_args'_v185 = v187 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v188 : string = "$0.unwrap()"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v183 v188 
    let _run_target_args'_v185 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v190 : string = "$0.unwrap()"
    let v191 : string = Fable.Core.RustInterop.emitRustExpr v183 v190 
    let _run_target_args'_v185 = v191 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v192 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v192 
    #endif
#if FABLE_COMPILER_PYTHON
    let v193 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v193 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v194 
    #endif
#else
    let v195 : string = match v183 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v185 = v195 
    #endif
    let v196 : string = _run_target_args'_v185 
    let v199 : US0 = v42.l0
    let v200 : bool =
        match v199 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v200 then
        let v202 : unit = ()
        let v203 : (unit -> unit) = closure10(v196)
        let v204 : unit = (fun () -> v203 (); v202) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
