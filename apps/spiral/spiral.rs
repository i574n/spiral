#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_1216f6c3 {
    pub mod Spiral {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Exception_::finally;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::List_::List;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::singleton;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::type_test;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith3;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trim;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::IDisposable;
        use fable_library_rust::System::Text::StringBuilder;
        use fable_library_rust::System::Threading::CancellationToken;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type TimeZoneInfo = i64;
        pub trait IOsEnviron: core::fmt::Debug + core::fmt::Display {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + core::fmt::Debug + core::fmt::Display> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral::Mut0>,
                        LrcPtr<Spiral::Mut1>,
                        LrcPtr<Spiral::Mut2>,
                        LrcPtr<Spiral::Mut3>,
                        LrcPtr<Spiral::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral::Mut0>,
                                LrcPtr<Spiral::Mut1>,
                                LrcPtr<Spiral::Mut2>,
                                LrcPtr<Spiral::Mut3>,
                                LrcPtr<Spiral::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral::Mut0>,
                                LrcPtr<Spiral::Mut1>,
                                LrcPtr<Spiral::Mut2>,
                                LrcPtr<Spiral::Mut3>,
                                LrcPtr<Spiral::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait ICryptoCreateHash: core::fmt::Debug + core::fmt::Display {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + core::fmt::Debug + core::fmt::Display> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256: core::fmt::Debug + core::fmt::Display {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + core::fmt::Debug + core::fmt::Display> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        pub trait IFs: core::fmt::Debug + core::fmt::Display {
            fn realpathSync(&self, path: string) -> string;
        }
        impl<V: IFs + core::fmt::Debug + core::fmt::Display> IFs for LrcPtr<V> {
            #[inline]
            fn realpathSync(&self, path: string) -> string {
                (**self).realpathSync(path)
            }
        }
        pub trait IPathJoin: core::fmt::Debug + core::fmt::Display {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + core::fmt::Debug + core::fmt::Display> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync: core::fmt::Debug + core::fmt::Display {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + core::fmt::Debug + core::fmt::Display> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname: core::fmt::Debug + core::fmt::Display {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + core::fmt::Debug + core::fmt::Display> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        pub trait IPathBasename: core::fmt::Debug + core::fmt::Display {
            fn basename(&self, path: string) -> string;
        }
        impl<V: IPathBasename + core::fmt::Debug + core::fmt::Display> IPathBasename for LrcPtr<V> {
            #[inline]
            fn basename(&self, path: string) -> string {
                (**self).basename(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral::US0>,
        }
        impl core::fmt::Display for Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US1 {
            US1_0(Spiral::US0),
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US2 {
            US2_0(i64),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US3 {
            US3_0,
            US3_1,
            US3_2,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US4 {
            US4_0(Spiral::US3),
            US4_1(Spiral::US3),
            US4_2(Spiral::US3),
            US4_3(Spiral::US3),
            US4_4(Spiral::US3),
            US4_5(Spiral::US3),
            US4_6(Spiral::US3),
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US5 {
            US5_0(string),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ),
            US6_1,
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(std::string::String, clap::ArgMatches),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(std::string::String),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US11 {
            US11_0,
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US10 {
            US10_0(Spiral::US11),
            US10_1,
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US9 {
            US9_0(Spiral::US10),
            US9_1,
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Vec<std::string::String>),
            US12_1,
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US13 {
            US13_0,
            US13_1,
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US14 {
            US14_0(string),
            US14_1(string),
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::path::PathBuf),
            US15_1(string),
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(std::path::PathBuf),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US17 {
            US17_0,
            US17_1(std::string::String),
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0(string, Spiral::US5),
            US18_1(string),
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US19_1(string),
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral::UH0>),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral::US19>,
                LrcPtr<Spiral::UH1>,
            ),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US20_1(string),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(char),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(string, LrcPtr<StringBuilder>, i32, i32),
            US22_1(string),
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(string, Spiral::US5, string, LrcPtr<StringBuilder>, i32, i32),
            US23_1(string),
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Spiral::US21, string, LrcPtr<StringBuilder>, i32, i32),
            US24_1(string),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(Spiral::US5, string, LrcPtr<StringBuilder>, i32, i32),
            US25_1(string),
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Array<string>),
            US26_1(string),
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral::UH2>),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(LrcPtr<Spiral::UH2>, string, LrcPtr<StringBuilder>, i32, i32),
            US27_1(string),
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral::US20>,
                LrcPtr<Spiral::UH3>,
            ),
        }
        impl core::fmt::Display for UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(std::string::String),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(std::process::Output),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US34 {
            US34_0(i32),
            US34_1,
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US35 {
            US35_0(Spiral::US5),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US38 {
            US38_0,
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Spiral::US38),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US36 {
            US36_0(Spiral::US37),
            US36_1,
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US39 {
            US39_0,
            US39_1(string),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US41 {
            US41_0(string),
            US41_1(string),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US40 {
            US40_0(Spiral::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0,
            US42_1,
            US42_2,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US43 {
            US43_0(Spiral::US42),
            US43_1,
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, string, LrcPtr<Spiral::UH4>),
        }
        impl core::fmt::Display for UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(chrono::DateTime<chrono::Utc>),
            US44_1,
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US45 {
            US45_0(i32, string),
            US45_1(i32, string),
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(std::collections::HashMap<string, string>),
            US46_1,
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, bool, LrcPtr<Spiral::UH5>),
        }
        impl core::fmt::Display for UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(std::fs::FileType),
            US47_1(std::string::String),
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US48 {
            US48_0,
            US48_1,
            US48_2,
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(async_walkdir::DirEntry),
            US49_1(std::string::String),
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US50 {
            US50_0(string, string),
            US50_1,
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"gleam\"#");
            let v31: &'static str = r#"gleam"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"gleam-path\"#");
            let v36: &'static str = r#"gleam-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('g');
            let v41: string = string("r#\"gleam-path\"#");
            let v42: &'static str = r#"gleam-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"target\"#");
            let v51: &'static str = r#"target"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('t');
            let v56: string = string("r#\"target\"#");
            let v57: &'static str = r#"target"#;
            let v59: clap::Arg = v55.long(v57);
            let v64: string = toLower(string("JavaScript"));
            let v88: Array<string> = toArray(ofArray(new_array(&[toLower(string("Erlang")), v64])));
            let v92: Vec<string> = v88.to_vec();
            let v94: bool = true;
            let _vec_map: Vec<_> = v92
                .into_iter()
                .map(|x| {
                    //;
                    let v96: string = x;
                    let v103: &str = &*v96;
                    let v139: std::string::String = String::from(v103);
                    let v170: Box<std::string::String> = Box::new(v139);
                    let v172: &'static mut std::string::String = Box::leak(v170);
                    let v174: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v172);
                    let v176: bool = true;
                    v174
                })
                .collect::<Vec<_>>();
            let v178: Vec<clap::builder::PossibleValue> = _vec_map;
            let v180: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v178),
            );
            let v182: clap::Arg = v59.value_parser(v180);
            let v184: clap::Command = clap::Command::arg(v48, v182);
            let v186: string = string("r#\"NAME\"#");
            let v189: string = string("r#\"VERSION\"#");
            let v191: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v193: usize = 1_i32 as usize;
            let v197: usize = 0_i32 as usize;
            let v213: clap::builder::ValueRange = if (v197) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v193..)
            } else {
                let v211: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v193..v197)
            };
            let v215: string = string("r#\"deps\"#");
            let v216: &'static str = r#"deps"#;
            let v218: clap::Arg = clap::Arg::new(v216);
            let v220: clap::Arg = v218.short('d');
            let v221: string = string("r#\"deps\"#");
            let v222: &'static str = r#"deps"#;
            let v224: clap::Arg = v220.long(v222);
            let v226: Vec<&'static str> = v191.to_vec();
            let v228: clap::Arg = v224.value_names(v226);
            let v230: clap::Arg = v228.num_args(v213);
            let v232: clap::ArgAction = clap::ArgAction::Append;
            let v234: clap::Arg = v230.action(v232);
            let v236: clap::Command = clap::Command::arg(v184, v234);
            let v238: clap::Command = clap::Command::subcommand(v28, v236);
            let v240: string = string("r#\"cuda\"#");
            let v241: &'static str = r#"cuda"#;
            let v243: clap::Command = clap::Command::new(v241);
            let v245: string = string("r#\"py-path\"#");
            let v246: &'static str = r#"py-path"#;
            let v248: clap::Arg = clap::Arg::new(v246);
            let v250: clap::Arg = v248.short('p');
            let v251: string = string("r#\"py-path\"#");
            let v252: &'static str = r#"py-path"#;
            let v254: clap::Arg = v250.long(v252);
            let v256: clap::Arg = v254.required(true);
            let v258: clap::Command = clap::Command::arg(v243, v256);
            let v260: string = string("r#\"env\"#");
            let v261: &'static str = r#"env"#;
            let v263: clap::Arg = clap::Arg::new(v261);
            let v265: clap::Arg = v263.short('e');
            let v266: string = string("r#\"env\"#");
            let v267: &'static str = r#"env"#;
            let v269: clap::Arg = v265.long(v267);
            let v274: string = toLower(string("Poetry"));
            let v298: Array<string> = toArray(ofArray(new_array(&[toLower(string("Pip")), v274])));
            let v302: Vec<string> = v298.to_vec();
            let v304: bool = true;
            let _vec_map: Vec<_> = v302
                .into_iter()
                .map(|x| {
                    //;
                    let v306: string = x;
                    let v313: &str = &*v306;
                    let v349: std::string::String = String::from(v313);
                    let v380: Box<std::string::String> = Box::new(v349);
                    let v382: &'static mut std::string::String = Box::leak(v380);
                    let v384: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v382);
                    let v386: bool = true;
                    v384
                })
                .collect::<Vec<_>>();
            let v388: Vec<clap::builder::PossibleValue> = _vec_map;
            let v390: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v388),
            );
            let v392: clap::Arg = v269.value_parser(v390);
            let v394: clap::Command = clap::Command::arg(v258, v392);
            let v395: string = string("r#\"NAME\"#");
            let v397: string = string("r#\"VERSION\"#");
            let v399: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v401: usize = 1_i32 as usize;
            let v405: usize = 0_i32 as usize;
            let v421: clap::builder::ValueRange = if (v405) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v401..)
            } else {
                let v419: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v401..v405)
            };
            let v422: string = string("r#\"deps\"#");
            let v423: &'static str = r#"deps"#;
            let v425: clap::Arg = clap::Arg::new(v423);
            let v427: clap::Arg = v425.short('d');
            let v428: string = string("r#\"deps\"#");
            let v429: &'static str = r#"deps"#;
            let v431: clap::Arg = v427.long(v429);
            let v433: Vec<&'static str> = v399.to_vec();
            let v435: clap::Arg = v431.value_names(v433);
            let v437: clap::Arg = v435.num_args(v421);
            let v439: clap::ArgAction = clap::ArgAction::Append;
            let v441: clap::Arg = v437.action(v439);
            let v443: clap::Command = clap::Command::arg(v394, v441);
            let v445: clap::Command = clap::Command::subcommand(v238, v443);
            let v447: string = string("r#\"fable\"#");
            let v448: &'static str = r#"fable"#;
            let v450: clap::Command = clap::Command::new(v448);
            let v452: string = string("r#\"fs-path\"#");
            let v453: &'static str = r#"fs-path"#;
            let v455: clap::Arg = clap::Arg::new(v453);
            let v457: clap::Arg = v455.short('f');
            let v458: string = string("r#\"fs-path\"#");
            let v459: &'static str = r#"fs-path"#;
            let v461: clap::Arg = v457.long(v459);
            let v463: clap::Arg = v461.required(true);
            let v465: clap::Command = clap::Command::arg(v450, v463);
            let v466: string = string("r#\"command\"#");
            let v467: &'static str = r#"command"#;
            let v469: clap::Arg = clap::Arg::new(v467);
            let v471: clap::Arg = v469.short('c');
            let v472: string = string("r#\"command\"#");
            let v473: &'static str = r#"command"#;
            let v475: clap::Arg = v471.long(v473);
            let v477: clap::Command = clap::Command::arg(v465, v475);
            let v479: clap::Command = clap::Command::subcommand(v445, v477);
            let v481: string = string("r#\"rust\"#");
            let v482: &'static str = r#"rust"#;
            let v484: clap::Command = clap::Command::new(v482);
            let v485: string = string("r#\"fs-path\"#");
            let v486: &'static str = r#"fs-path"#;
            let v488: clap::Arg = clap::Arg::new(v486);
            let v490: clap::Arg = v488.short('f');
            let v491: string = string("r#\"fs-path\"#");
            let v492: &'static str = r#"fs-path"#;
            let v494: clap::Arg = v490.long(v492);
            let v496: clap::Arg = v494.required(true);
            let v498: clap::Command = clap::Command::arg(v484, v496);
            let v499: string = string("r#\"NAME\"#");
            let v501: string = string("r#\"VERSION\"#");
            let v503: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v505: usize = 1_i32 as usize;
            let v509: usize = 0_i32 as usize;
            let v525: clap::builder::ValueRange = if (v509) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v505..)
            } else {
                let v523: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v505..v509)
            };
            let v526: string = string("r#\"deps\"#");
            let v527: &'static str = r#"deps"#;
            let v529: clap::Arg = clap::Arg::new(v527);
            let v531: clap::Arg = v529.short('d');
            let v532: string = string("r#\"deps\"#");
            let v533: &'static str = r#"deps"#;
            let v535: clap::Arg = v531.long(v533);
            let v537: Vec<&'static str> = v503.to_vec();
            let v539: clap::Arg = v535.value_names(v537);
            let v541: clap::Arg = v539.num_args(v525);
            let v543: clap::ArgAction = clap::ArgAction::Append;
            let v545: clap::Arg = v541.action(v543);
            let v547: clap::Command = clap::Command::arg(v498, v545);
            let v549: usize = 0_i32 as usize;
            let v553: usize = 1_i32 as usize;
            let v569: clap::builder::ValueRange = if (v553) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v549..)
            } else {
                let v567: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v549..=v553)
            };
            let v571: string = string("r#\"wasm\"#");
            let v572: &'static str = r#"wasm"#;
            let v574: clap::Arg = clap::Arg::new(v572);
            let v576: clap::Arg = v574.short('w');
            let v577: string = string("r#\"wasm\"#");
            let v578: &'static str = r#"wasm"#;
            let v580: clap::Arg = v576.long(v578);
            let v582: clap::Arg = v580.num_args(v569);
            let v584: clap::Arg = v582.require_equals(true);
            let v586: string = string("r#\"\"#");
            let v587: &str = r#""#;
            let v589: clap::Arg = v584.default_missing_value(v587);
            let v591: clap::Command = clap::Command::arg(v547, v589);
            let v593: usize = 0_i32 as usize;
            let v597: usize = 1_i32 as usize;
            let v613: clap::builder::ValueRange = if (v597) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v593..)
            } else {
                let v611: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v593..=v597)
            };
            let v615: string = string("r#\"contract\"#");
            let v616: &'static str = r#"contract"#;
            let v618: clap::Arg = clap::Arg::new(v616);
            let v620: clap::Arg = v618.short('c');
            let v621: string = string("r#\"contract\"#");
            let v622: &'static str = r#"contract"#;
            let v624: clap::Arg = v620.long(v622);
            let v626: clap::Arg = v624.num_args(v613);
            let v628: clap::Arg = v626.require_equals(true);
            let v629: string = string("r#\"\"#");
            let v630: &str = r#""#;
            let v632: clap::Arg = v628.default_missing_value(v630);
            let v634: clap::Command = clap::Command::arg(v591, v632);
            let v636: string = string("r#\"cleanup\"#");
            let v637: &'static str = r#"cleanup"#;
            let v639: clap::Arg = clap::Arg::new(v637);
            let v641: clap::Arg = v639.short('l');
            let v642: string = string("r#\"cleanup\"#");
            let v643: &'static str = r#"cleanup"#;
            let v645: clap::Arg = v641.long(v643);
            let v647: string = string("r#\"true\"#");
            let v648: &str = r#"true"#;
            let v650: clap::Arg = v645.default_value(v648);
            let v652: clap::ArgAction = clap::ArgAction::SetFalse;
            let v654: clap::Arg = v650.action(v652);
            let v656: clap::Command = clap::Command::arg(v634, v654);
            let v658: clap::Command = clap::Command::subcommand(v479, v656);
            let v660: string = string("r#\"typescript\"#");
            let v661: &'static str = r#"typescript"#;
            let v663: clap::Command = clap::Command::new(v661);
            let v664: string = string("r#\"fs-path\"#");
            let v665: &'static str = r#"fs-path"#;
            let v667: clap::Arg = clap::Arg::new(v665);
            let v669: clap::Arg = v667.short('f');
            let v670: string = string("r#\"fs-path\"#");
            let v671: &'static str = r#"fs-path"#;
            let v673: clap::Arg = v669.long(v671);
            let v675: clap::Arg = v673.required(true);
            let v677: clap::Command = clap::Command::arg(v663, v675);
            let v678: string = string("r#\"NAME\"#");
            let v680: string = string("r#\"VERSION\"#");
            let v682: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v684: usize = 1_i32 as usize;
            let v688: usize = 0_i32 as usize;
            let v703: clap::builder::ValueRange = if (v688) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v684..)
            } else {
                let v701: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v684..v688)
            };
            let v704: string = string("r#\"deps\"#");
            let v705: &'static str = r#"deps"#;
            let v707: clap::Arg = clap::Arg::new(v705);
            let v709: clap::Arg = v707.short('d');
            let v710: string = string("r#\"deps\"#");
            let v711: &'static str = r#"deps"#;
            let v713: clap::Arg = v709.long(v711);
            let v715: Vec<&'static str> = v682.to_vec();
            let v717: clap::Arg = v713.value_names(v715);
            let v719: clap::Arg = v717.num_args(v703);
            let v721: clap::ArgAction = clap::ArgAction::Append;
            let v723: clap::Arg = v719.action(v721);
            let v725: clap::Command = clap::Command::arg(v677, v723);
            let v727: clap::Command = clap::Command::subcommand(v658, v725);
            let v729: string = string("r#\"python\"#");
            let v730: &'static str = r#"python"#;
            let v732: clap::Command = clap::Command::new(v730);
            let v733: string = string("r#\"fs-path\"#");
            let v734: &'static str = r#"fs-path"#;
            let v736: clap::Arg = clap::Arg::new(v734);
            let v738: clap::Arg = v736.short('f');
            let v739: string = string("r#\"fs-path\"#");
            let v740: &'static str = r#"fs-path"#;
            let v742: clap::Arg = v738.long(v740);
            let v744: clap::Arg = v742.required(true);
            let v746: clap::Command = clap::Command::arg(v732, v744);
            let v747: string = string("r#\"NAME\"#");
            let v749: string = string("r#\"VERSION\"#");
            let v751: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v753: usize = 1_i32 as usize;
            let v757: usize = 0_i32 as usize;
            let v772: clap::builder::ValueRange = if (v757) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v753..)
            } else {
                let v770: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v753..v757)
            };
            let v773: string = string("r#\"deps\"#");
            let v774: &'static str = r#"deps"#;
            let v776: clap::Arg = clap::Arg::new(v774);
            let v778: clap::Arg = v776.short('d');
            let v779: string = string("r#\"deps\"#");
            let v780: &'static str = r#"deps"#;
            let v782: clap::Arg = v778.long(v780);
            let v784: Vec<&'static str> = v751.to_vec();
            let v786: clap::Arg = v782.value_names(v784);
            let v788: clap::Arg = v786.num_args(v772);
            let v790: clap::ArgAction = clap::ArgAction::Append;
            let v792: clap::Arg = v788.action(v790);
            let v794: clap::Command = clap::Command::arg(v746, v792);
            let v796: clap::Command = clap::Command::subcommand(v727, v794);
            let v798: string = string("r#\"dib\"#");
            let v799: &'static str = r#"dib"#;
            let v801: clap::Command = clap::Command::new(v799);
            let v803: string = string("r#\"path\"#");
            let v804: &'static str = r#"path"#;
            let v806: clap::Arg = clap::Arg::new(v804);
            let v808: clap::Arg = v806.short('p');
            let v809: string = string("r#\"path\"#");
            let v810: &'static str = r#"path"#;
            let v812: clap::Arg = v808.long(v810);
            let v814: clap::Arg = v812.required(true);
            let v816: clap::Command = clap::Command::arg(v801, v814);
            let v818: string = string("clap::value_parser!(u8).into()");
            let v819: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v821: string = string("r#\"retries\"#");
            let v822: &'static str = r#"retries"#;
            let v824: clap::Arg = clap::Arg::new(v822);
            let v826: clap::Arg = v824.short('r');
            let v827: string = string("r#\"retries\"#");
            let v828: &'static str = r#"retries"#;
            let v830: clap::Arg = v826.long(v828);
            let v832: clap::Arg = v830.value_parser(v819);
            let v834: clap::Command = clap::Command::arg(v816, v832);
            let v836: string = string("r#\"working-directory\"#");
            let v837: &'static str = r#"working-directory"#;
            let v839: clap::Arg = clap::Arg::new(v837);
            let v841: clap::Arg = v839.short('w');
            let v842: string = string("r#\"working-directory\"#");
            let v843: &'static str = r#"working-directory"#;
            let v845: clap::Arg = v841.long(v843);
            let v847: clap::Command = clap::Command::arg(v834, v845);
            clap::Command::subcommand(v796, v847)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
        {
        let v4: string = string("*/ #[test] fn verify_app() { //");
        let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method4(v0_1: string) -> string {
            v0_1
        }
        pub fn method5() -> string {
            string("")
        }
        pub fn closure3(unitVar: (), v0_1: string) -> Spiral::US5 {
            Spiral::US5::US5_0(v0_1)
        }
        pub fn method6() -> Func1<string, Spiral::US5> {
            Func1::new(move |v: string| Spiral::closure3((), v))
        }
        pub fn method3(v0_1: string) -> string {
            let v3: string = Spiral::method4(v0_1);
            let v5: Result<std::string::String, std::env::VarError> = std::env::var(&*v3);
            let v7: bool = true;
            let _result_map_ = v5.map(|x| {
                //;
                let v9: std::string::String = x;
                let v11: string = fable_library_rust::String_::fromString(v9);
                let v13: bool = true;
                v11
            });
            let v15: Result<string, std::env::VarError> = _result_map_;
            let v16: string = Spiral::method5();
            v15.unwrap_or(v16)
        }
        pub fn method2() -> (Spiral::US1, Spiral::US2) {
            let v1_1: string = Spiral::method3(string("TRACE_LEVEL"));
            let v6: string = toLower(string("Critical"));
            let v13: string = toLower(string("Warning"));
            let v20: string = toLower(string("Info"));
            let v27: string = toLower(string("Debug"));
            let v34: string = toLower(string("Verbose"));
            let v41: Spiral::US1 = if string("Verbose") == (v1_1.clone()) {
                Spiral::US1::US1_0(Spiral::US0::US0_0)
            } else {
                Spiral::US1::US1_1
            };
            (
                match &v41 {
                    Spiral::US1::US1_0(v41_0_0) => Spiral::US1::US1_0(
                        match &v41 {
                            Spiral::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    _ => {
                        let v48: Spiral::US1 = if string("Debug") == (v1_1.clone()) {
                            Spiral::US1::US1_0(Spiral::US0::US0_1)
                        } else {
                            Spiral::US1::US1_1
                        };
                        match &v48 {
                            Spiral::US1::US1_0(v48_0_0) => Spiral::US1::US1_0(
                                match &v48 {
                                    Spiral::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v55: Spiral::US1 = if string("Info") == (v1_1.clone()) {
                                    Spiral::US1::US1_0(Spiral::US0::US0_2)
                                } else {
                                    Spiral::US1::US1_1
                                };
                                match &v55 {
                                    Spiral::US1::US1_0(v55_0_0) => Spiral::US1::US1_0(
                                        match &v55 {
                                            Spiral::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => {
                                        let v62: Spiral::US1 =
                                            if string("Warning") == (v1_1.clone()) {
                                                Spiral::US1::US1_0(Spiral::US0::US0_3)
                                            } else {
                                                Spiral::US1::US1_1
                                            };
                                        match &v62 {
                                            Spiral::US1::US1_0(v62_0_0) => Spiral::US1::US1_0(
                                                match &v62 {
                                                    Spiral::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => {
                                                let v69: Spiral::US1 =
                                                    if string("Critical") == (v1_1.clone()) {
                                                        Spiral::US1::US1_0(Spiral::US0::US0_4)
                                                    } else {
                                                        Spiral::US1::US1_1
                                                    };
                                                match &v69 {
                                                    Spiral::US1::US1_0(v69_0_0) => {
                                                        Spiral::US1::US1_0(
                                                            match &v69 {
                                                                Spiral::US1::US1_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => {
                                                        let v76: Spiral::US1 = if (v34.clone())
                                                            == (v1_1.clone())
                                                        {
                                                            Spiral::US1::US1_0(Spiral::US0::US0_0)
                                                        } else {
                                                            Spiral::US1::US1_1
                                                        };
                                                        match &v76 {
                                                            Spiral::US1::US1_0(v76_0_0) => {
                                                                Spiral::US1::US1_0(
                                                                    match &v76 {
                                                                        Spiral::US1::US1_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone(),
                                                                )
                                                            }
                                                            _ => {
                                                                let v83: Spiral::US1 = if (v27
                                                                    .clone())
                                                                    == (v1_1.clone())
                                                                {
                                                                    Spiral::US1::US1_0(
                                                                        Spiral::US0::US0_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US1::US1_1
                                                                };
                                                                match &v83 {
                                                                 Spiral::US1::US1_0(v83_0_0)
                                                                 =>
                                                                 Spiral::US1::US1_0(match &v83
                                                                                        {
                                                                                        Spiral::US1::US1_0(x)
                                                                                        =>
                                                                                        x.clone(),
                                                                                        _
                                                                                        =>
                                                                                        unreachable!(),
                                                                                    }.clone()),
                                                                 _ => {
                                                                     let v90:
                                                                             Spiral::US1 =
                                                                         if (v20.clone())
                                                                                ==
                                                                                (v1_1.clone())
                                                                            {
                                                                             Spiral::US1::US1_0(Spiral::US0::US0_2)
                                                                         } else {
                                                                             Spiral::US1::US1_1
                                                                         };
                                                                     match &v90
                                                                         {
                                                                         Spiral::US1::US1_0(v90_0_0)
                                                                         =>
                                                                         Spiral::US1::US1_0(match &v90
                                                                                                {
                                                                                                Spiral::US1::US1_0(x)
                                                                                                =>
                                                                                                x.clone(),
                                                                                                _
                                                                                                =>
                                                                                                unreachable!(),
                                                                                            }.clone()),
                                                                         _ =>
                                                                         {
                                                                             let v97:
                                                                                     Spiral::US1 =
                                                                                 if (v13.clone())
                                                                                        ==
                                                                                        (v1_1.clone())
                                                                                    {
                                                                                     Spiral::US1::US1_0(Spiral::US0::US0_3)
                                                                                 } else {
                                                                                     Spiral::US1::US1_1
                                                                                 };
                                                                             match &v97
                                                                                 {
                                                                                 Spiral::US1::US1_0(v97_0_0)
                                                                                 =>
                                                                                 Spiral::US1::US1_0(match &v97
                                                                                                        {
                                                                                                        Spiral::US1::US1_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    }.clone()),
                                                                                 _
                                                                                 =>
                                                                                 {
                                                                                     let v104:
                                                                                             Spiral::US1 =
                                                                                         if (v6.clone())
                                                                                                ==
                                                                                                (v1_1.clone())
                                                                                            {
                                                                                             Spiral::US1::US1_0(Spiral::US0::US0_4)
                                                                                         } else {
                                                                                             Spiral::US1::US1_1
                                                                                         };
                                                                                     match &v104
                                                                                         {
                                                                                         Spiral::US1::US1_0(v104_0_0)
                                                                                         =>
                                                                                         Spiral::US1::US1_0(match &v104
                                                                                                                {
                                                                                                                Spiral::US1::US1_0(x)
                                                                                                                =>
                                                                                                                x.clone(),
                                                                                                                _
                                                                                                                =>
                                                                                                                unreachable!(),
                                                                                                            }.clone()),
                                                                                         _
                                                                                         =>
                                                                                         Spiral::US1::US1_1,
                                                                                     }
                                                                                 }
                                                                             }
                                                                         }
                                                                     }
                                                                 }
                                                             }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if (Spiral::method3(string("AUTOMATION"))) != string("True") {
                    Spiral::US2::US2_1
                } else {
                    Spiral::US2::US2_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                },
            )
        }
        pub fn closure4(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral::US0,
        ) -> (
            LrcPtr<Spiral::Mut0>,
            LrcPtr<Spiral::Mut1>,
            LrcPtr<Spiral::Mut2>,
            LrcPtr<Spiral::Mut3>,
            LrcPtr<Spiral::Mut4>,
            Option<i64>,
        ) {
            let patternInput: (Spiral::US1, Spiral::US2) = Spiral::method2();
            let _run_target_args__v3: (Spiral::US1, Spiral::US2) =
                (patternInput.0.clone(), patternInput.1.clone());
            let v185: Spiral::US2 = _run_target_args__v3.1.clone();
            let v184: Spiral::US1 = _run_target_args__v3.0.clone();
            (
                LrcPtr::new(Spiral::Mut0 {
                    l0: MutCell::new(1_i64),
                }),
                LrcPtr::new(Spiral::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral::closure4((), v))),
                }),
                LrcPtr::new(Spiral::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral::Mut4 {
                    l0: MutCell::new(match &v184 {
                        Spiral::US1::US1_0(v184_0_0) => match &v184 {
                            Spiral::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        _ => v0_1.clone(),
                    }),
                }),
                match &v185 {
                    Spiral::US2::US2_0(v185_0_0) => Some(match &v185 {
                        Spiral::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral::TraceState::trace_state().get().clone().is_none() {
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::method1(Spiral::US0::US0_0);
                Spiral::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn closure6(unitVar: (), v0_1: i64) -> Spiral::US2 {
            Spiral::US2::US2_0(v0_1)
        }
        pub fn method8() -> Func1<i64, Spiral::US2> {
            Func1::new(move |v: i64| Spiral::closure6((), v))
        }
        pub fn method9() -> string {
            string("hh:mm:ss")
        }
        pub fn method10() -> string {
            string("HH:mm:ss")
        }
        pub fn method7(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
        ) -> string {
            let v241: Spiral::US2 = defaultValue(Spiral::US2::US2_1, map(Spiral::method8(), v5));
            let v395: DateTime = match &v241 {
                Spiral::US2::US2_0(v241_0_0) => {
                    let v324: TimeSpan = TimeSpan::new_ticks(
                        ({
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        }) - (match &v241 {
                            Spiral::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                    );
                    DateTime::new_ymdhms_milli(
                        1_i32,
                        1_i32,
                        1_i32,
                        v324.hours(),
                        v324.minutes(),
                        v324.seconds(),
                        v324.milliseconds(),
                    )
                }
                _ => DateTime::now(),
            };
            let v396: string = Spiral::method9();
            let provider: string = if (v396.clone()) == string("") {
                string("M-d-y hh:mm:ss tt")
            } else {
                v396
            };
            v395.toString(provider)
        }
        pub fn method13() -> string {
            string("")
        }
        pub fn closure7(v0_1: LrcPtr<Spiral::Mut3>, v1_1: string, unitVar: ()) {
            let v4: string = append((v0_1.l0.get().clone()), (v1_1));
            v0_1.l0.set(v4);
            ()
        }
        pub fn method12(v0_1: char) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method11() -> string {
            let v3: &str = inline_colorization::color_bright_blue;
            let v10: std::string::String = String::from(v3);
            let v139: string = append(
                (fable_library_rust::String_::fromString(v10)),
                (Spiral::method12(getCharAt(toLower(string("Debug")), 0_i32))),
            );
            let v145: &str = inline_colorization::color_reset;
            let v152: std::string::String = String::from(v145);
            append((v139), (fable_library_rust::String_::fromString(v152)))
        }
        pub fn method15(v0_1: Array<string>) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("args"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v76: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method16(v0_1: string) -> string {
            trimEndChars(
                trimStartChars(v0_1, toArray(empty::<char>())),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn method14(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Array<string>,
        ) -> string {
            let v9: string = Spiral::method15(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.main"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure8(v0_1: LrcPtr<Spiral::Mut0>, unitVar: ()) {
            let v2: i64 = (v0_1.l0.get().clone()) + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure9(unitVar: (), v0_1: string) {
            let v4: () = {
                Spiral::closure10(v0_1, ());
                ()
            };
            ()
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method14(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method11(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure11(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure12(
            unitVar: (),
            _arg: (std::string::String, clap::ArgMatches),
        ) -> Spiral::US7 {
            Spiral::US7::US7_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method18() -> Func1<(std::string::String, clap::ArgMatches), Spiral::US7> {
            Func1::new(move |arg10_0040: (std::string::String, clap::ArgMatches)| {
                Spiral::closure12((), arg10_0040)
            })
        }
        pub fn method19() -> string {
            string("gleam-path")
        }
        pub fn closure13(unitVar: (), v0_1: std::string::String) -> Spiral::US8 {
            Spiral::US8::US8_0(v0_1)
        }
        pub fn method20() -> Func1<std::string::String, Spiral::US8> {
            Func1::new(move |v: std::string::String| Spiral::closure13((), v))
        }
        pub fn method21() -> string {
            string("target")
        }
        pub fn method22() -> string {
            string("deps")
        }
        pub fn closure14(unitVar: (), v0_1: Vec<std::string::String>) -> Spiral::US12 {
            Spiral::US12::US12_0(v0_1)
        }
        pub fn method23() -> Func1<Vec<std::string::String>, Spiral::US12> {
            Func1::new(move |v: Vec<std::string::String>| Spiral::closure14((), v))
        }
        pub fn method24(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method25(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("extension"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v91: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v3.clone(), string("new_code"), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v163: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method27() -> string {
            string("")
        }
        pub fn method28(v0_1: string) -> string {
            v0_1
        }
        pub fn method29(v0_1: i32, v1_1: LrcPtr<Spiral::Mut5>) -> bool {
            (v1_1.l0.get().clone()) < (v0_1)
        }
        pub fn method30() -> string {
            string("")
        }
        pub fn method26(v0_1: string) -> string {
            let v9: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v11: Vec<u8> = v9.to_vec();
            let v13: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v11);
            let v15: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v13);
            let v17: bool = true;
            let mut v15 = v15;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v20: sha2::Sha256 = result;
                let v22: bool = true;
                let mut v20 = v20;
                let v24: usize = 0_i32 as usize;
                let v28: _ = [0_u8; 1024];
                let v30: bool = true;
                loop {
                    // rust.loop;
                    let v32: bool = true;
                    let mut v28 = v28;
                    let v34: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v15, &mut v28);
                    let v47: usize = v34.unwrap();
                    if (v47) == (v24) {
                        let v55: bool = true;
                        break;
                        ()
                    }
                    {
                        let v57: usize = v47;
                        let v74: &_ = if (v57) == (v28.len()) {
                            &v28[v24..]
                        } else {
                            &v28[v24..v57]
                        };
                        sha2::Digest::update(&mut v20, v74);
                        {
                            let v77: bool = true;
                        } // rust.loop;
                        let v79: bool = true;
                    } // rust.loop;
                    let v81: bool = true;
                } // rust.loop;
                let v83: bool = true;
                {
                    // rust.loop;
                    let v85: bool = true;
                    {
                        // rust.loop;
                        let v87: &[u8] = &sha2::Digest::finalize(v20);
                        let v89: Vec<u8> = v87.iter().map(|x| *x).collect::<Vec<_>>();
                        let v91: bool = true;
                        let _vec_map: Vec<_> = v89
                            .into_iter()
                            .map(|x| {
                                //;
                                let v93: u8 = x;
                                let v95: std::string::String = format!("{:02x}", v93);
                                let v97: string = fable_library_rust::String_::fromString(v95);
                                let v99: bool = true;
                                v97
                            })
                            .collect::<Vec<_>>();
                        let v101: Vec<string> = _vec_map;
                        let v103: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v101.clone());
                        let _let__v108: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v103 = v103.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v103 = v103.clone();
                                        move |i: i32| v103[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, (get_Count(v103.clone())) - 1_i32),
                                )
                            }
                        }));
                        let v117: string = Spiral::method27();
                        let v124: string = join(
                            if (v117.clone()) == string("\n") {
                                Spiral::method28(v117.clone())
                            } else {
                                v117
                            },
                            toArray_1(_let__v108),
                        );
                        Ok::<string, std::io::Error>(v124).unwrap()
                    }
                }
            }
        }
        pub fn method31() -> string {
            let v6: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v10: std::path::PathBuf = v6.unwrap();
            let v28: std::path::Display = v10.display();
            let v64: std::string::String = format!("{}", v28);
            fable_library_rust::String_::fromString(v64)
        }
        pub fn method33(v0_1: string, v1_1: string) -> string {
            let v13: &str = &*v0_1;
            let v49: std::string::String = String::from(v13);
            let v85: std::path::PathBuf = std::path::PathBuf::from(v49);
            let v121: &str = &*v1_1;
            let v157: std::string::String = String::from(v121);
            let v188: std::path::PathBuf = v85.join(v157);
            let v195: std::path::Display = v188.display();
            let v231: std::string::String = format!("{}", v195);
            fable_library_rust::String_::fromString(v231)
        }
        pub fn method35(v0_1: string) -> bool {
            let v12: &str = &*v0_1;
            let v48: std::string::String = String::from(v12);
            let v105: std::path::PathBuf = std::path::PathBuf::from(v48);
            if v105.clone().exists() {
                v105.is_file()
            } else {
                false
            }
        }
        pub fn closure15(unitVar: (), v0_1: string) -> bool {
            Spiral::method35(v0_1)
        }
        pub fn method36(v0_1: string) -> bool {
            let v12: &str = &*v0_1;
            let v48: std::string::String = String::from(v12);
            let v105: std::path::PathBuf = std::path::PathBuf::from(v48);
            if v105.clone().exists() {
                v105.is_dir()
            } else {
                false
            }
        }
        pub fn closure16(unitVar: (), v0_1: string) -> bool {
            Spiral::method36(v0_1)
        }
        pub fn method38(v0_1: string) -> Option<string> {
            let v12: &str = &*v0_1;
            let v48: std::string::String = String::from(v12);
            let v84: std::path::PathBuf = std::path::PathBuf::from(v48);
            let v115: Option<std::path::PathBuf> = v84.parent().map(std::path::PathBuf::from);
            let v117: bool = true;
            let _optionm_map_ = v115.map(|x| {
                //;
                let v119: std::path::PathBuf = x;
                let v126: std::path::Display = v119.display();
                let v162: std::string::String = format!("{}", v126);
                let v193: string = fable_library_rust::String_::fromString(v162);
                let v195: bool = true;
                v193
            });
            _optionm_map_
        }
        pub fn method39(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: Func1<string, bool>,
            v4: string,
        ) -> Spiral::US14 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<bool> = MutCell::new(v2);
            let v3 = MutCell::new(v3.clone());
            let v4: MutCell<string> = MutCell::new(v4.clone());
            '_method39: loop {
                break '_method39 (if v3(Spiral::method33(v4.get().clone(), v0_1.get().clone())) {
                    Spiral::US14::US14_0(v4.get().clone())
                } else {
                    let v8: Option<string> = Spiral::method38(v4.get().clone());
                    let v33: Spiral::US5 =
                        defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v8));
                    match &v33 {
                        Spiral::US5::US5_0(v33_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: bool = v2.get().clone();
                            let v3_temp = v3.get().clone();
                            let v4_temp: string = match &v33 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method39;
                        }
                        _ => Spiral::US14::US14_1(append(
                            (concat(new_array(&[
                                string("file_system.find_parent / No parent for "),
                                if v2.get().clone() {
                                    string("file")
                                } else {
                                    string("dir")
                                },
                            ]))),
                            sprintf!(
                                " \'{}\' at \'{}\' (until \'{}\')",
                                v0_1.get().clone(),
                                v1_1.get().clone(),
                                v4.get().clone()
                            ),
                        )),
                    }
                });
            }
        }
        pub fn method37(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: Func1<string, bool>,
        ) -> Spiral::US14 {
            if v3(Spiral::method33(v1_1.clone(), v0_1.clone())) {
                Spiral::US14::US14_0(v1_1.clone())
            } else {
                let v7: Option<string> = Spiral::method38(v1_1.clone());
                let v32: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v7));
                match &v32 {
                    Spiral::US5::US5_0(v32_0_0) => Spiral::method39(
                        v0_1.clone(),
                        v1_1.clone(),
                        v2,
                        v3.clone(),
                        match &v32 {
                            Spiral::US5::US5_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    _ => Spiral::US14::US14_1(append(
                        (concat(new_array(&[
                            string("file_system.find_parent / No parent for "),
                            if v2 { string("file") } else { string("dir") },
                        ]))),
                        sprintf!(
                            " \'{}\' at \'{}\' (until \'{}\')",
                            v0_1.clone(),
                            v1_1.clone(),
                            v1_1.clone()
                        ),
                    )),
                }
            }
        }
        pub fn method34(v0_1: Spiral::US13, v1_1: string, v2: string) -> Spiral::US14 {
            let v3: bool = if let Spiral::US13::US13_0 = &v0_1 {
                true
            } else {
                false
            };
            Spiral::method37(
                v1_1,
                v2,
                v3,
                if v3 {
                    Func1::new(move |v: string| Spiral::closure15((), v))
                } else {
                    Func1::new(move |v_1: string| Spiral::closure16((), v_1))
                },
            )
        }
        pub fn method40() -> string {
            let v3: &str = inline_colorization::color_yellow;
            let v10: std::string::String = String::from(v3);
            let v139: string = append(
                (fable_library_rust::String_::fromString(v10)),
                (Spiral::method12(getCharAt(toLower(string("Warning")), 0_i32))),
            );
            let v145: &str = inline_colorization::color_reset;
            let v152: std::string::String = String::from(v145);
            append((v139), (fable_library_rust::String_::fromString(v152)))
        }
        pub fn method42(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("dir"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v91: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v3.clone(), string("error"), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v163: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method41(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method42(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.get_workspace_root"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure17(v0_1: string, v1_1: string, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                3_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method41(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method40(),
                    v0_1,
                    v1_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method47(v0_1: std::io::Error) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v9: std::string::String = format!("{:#?}", v0_1);
            let v56: () = {
                Spiral::closure7(v2.clone(), fable_library_rust::String_::fromString(v9), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure18(unitVar: (), v0_1: std::io::Error) -> string {
            Spiral::method47(v0_1)
        }
        pub fn method46() -> Func1<std::io::Error, string> {
            Func1::new(move |v: std::io::Error| Spiral::closure18((), v))
        }
        pub fn closure19(unitVar: (), v0_1: std::path::PathBuf) -> Spiral::US15 {
            Spiral::US15::US15_0(v0_1)
        }
        pub fn method48() -> Func1<std::path::PathBuf, Spiral::US15> {
            Func1::new(move |v: std::path::PathBuf| Spiral::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: string) -> Spiral::US15 {
            Spiral::US15::US15_1(v0_1)
        }
        pub fn method49() -> Func1<string, Spiral::US15> {
            Func1::new(move |v: string| Spiral::closure20((), v))
        }
        pub fn method52(v0_1: string) -> string {
            let v12: &str = &*v0_1;
            let v48: std::string::String = String::from(v12);
            let v84: std::path::PathBuf = std::path::PathBuf::from(v48);
            let v115: Option<&std::ffi::OsStr> = v84.file_name();
            let v117: bool = true;
            let _optionm_map_ = v115.map(|x| {
                //;
                let v119: &std::ffi::OsStr = x;
                let v121: std::ffi::OsString = v119.to_os_string();
                let v123: Option<&str> = v121.to_str();
                let v125: &str = v123.unwrap();
                let v132: std::string::String = String::from(v125);
                let v163: string = fable_library_rust::String_::fromString(v132);
                let v165: bool = true;
                v163
            });
            let v167: Option<string> = _optionm_map_;
            let v192: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v167));
            match &v192 {
                Spiral::US5::US5_0(v192_0_0) => match &v192 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            }
        }
        pub fn method53(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v14: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method51(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: string,
            v4: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v5: string = Spiral::method52(v4.clone());
            let v6: Option<string> = Spiral::method38(v4.clone());
            let v31: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6));
            let v35: string = Spiral::method53(v3);
            if (v2) >= 11_u8 {
                let v39: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v4.clone(),
                        v5.clone()
                    ),
                );
                let v46: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v39);
                Err(v46)
            } else {
                if let Spiral::US5::US5_0(v31_0_0) = &v31 {
                    if (v4.clone()) != string("") {
                        let v100: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v31_0_0.clone());
                        let v101 = Spiral::method46();
                        let v114: Result<std::path::PathBuf, string> = v100.map_err(|x| v101(x));
                        let v117 = Spiral::method48();
                        let v118 = Spiral::method49();
                        let v120: Spiral::US15 = match &v114 {
                            Err(v114_1_0) => v118(v114_1_0.clone()),
                            Ok(v114_0_0) => v117(v114_0_0.clone()),
                        };
                        match &v120 {
                            Spiral::US15::US15_0(v120_0_0) => {
                                let v164: string = Spiral::method33(
                                    toString(v120_0_0.clone().display()),
                                    v5.clone(),
                                );
                                let v171: &str = &*v164;
                                let v207: std::string::String = String::from(v171);
                                let v243: std::path::PathBuf = std::path::PathBuf::from(v207);
                                Ok(v243)
                            }
                            Spiral::US15::US15_1(v120_1_0) => {
                                let v291: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v120_1_0.clone(),
                                        v35.clone(),
                                        v5.clone()
                                    ),
                                );
                                let v298: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v291);
                                Err(v298)
                            }
                        }
                    } else {
                        let v347: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v35.clone(),
                                v4.clone(),
                                v5.clone()
                            ),
                        );
                        let v354: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v347);
                        Err(v354)
                    }
                } else {
                    let v402: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1,
                            v35.clone(),
                            v4,
                            v5.clone()
                        ),
                    );
                    let v409: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v402);
                    Err(v409)
                }
            }
        }
        pub fn method50(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v9: Result<std::path::PathBuf, std::io::Error> = std::fs::read_link(&*v2.clone());
            let v10 = Spiral::method46();
            let v23: Result<std::path::PathBuf, string> = v9.map_err(|x| v10(x));
            let v26 = Spiral::method48();
            let v27 = Spiral::method49();
            let v29: Spiral::US15 = match &v23 {
                Err(v23_1_0) => v27(v23_1_0.clone()),
                Ok(v23_0_0) => v26(v23_0_0.clone()),
            };
            match &v29 {
                Spiral::US15::US15_0(v29_0_0) => Ok(v29_0_0.clone()),
                Spiral::US15::US15_1(v29_1_0) => Spiral::method51(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure21(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    v29_1_0.clone(),
                    v2.clone(),
                ),
            }
        }
        pub fn closure22(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            Spiral::method50(v0_1, v1_1, v2)
        }
        pub fn closure21(
            v0_1: string,
            v1_1: u8,
        ) -> Func1<string, Result<std::path::PathBuf, std::io::Error>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure22(v0_1.clone(), v1_1, v)
            })
        }
        pub fn method54(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v4: string = Spiral::method52(v0_1.clone());
            let v5: Option<string> = Spiral::method38(v0_1.clone());
            let v30: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5));
            let v34: string = Spiral::method53(v3);
            if (v2) >= 11_u8 {
                let v38: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v0_1.clone(),
                        v4.clone()
                    ),
                );
                let v45: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v38);
                Err(v45)
            } else {
                if let Spiral::US5::US5_0(v30_0_0) = &v30 {
                    if (v0_1.clone()) != string("") {
                        let v99: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v30_0_0.clone());
                        let v100 = Spiral::method46();
                        let v113: Result<std::path::PathBuf, string> = v99.map_err(|x| v100(x));
                        let v116 = Spiral::method48();
                        let v117 = Spiral::method49();
                        let v119: Spiral::US15 = match &v113 {
                            Err(v113_1_0) => v117(v113_1_0.clone()),
                            Ok(v113_0_0) => v116(v113_0_0.clone()),
                        };
                        match &v119 {
                            Spiral::US15::US15_0(v119_0_0) => {
                                let v163: string = Spiral::method33(
                                    toString(v119_0_0.clone().display()),
                                    v4.clone(),
                                );
                                let v170: &str = &*v163;
                                let v206: std::string::String = String::from(v170);
                                let v242: std::path::PathBuf = std::path::PathBuf::from(v206);
                                Ok(v242)
                            }
                            Spiral::US15::US15_1(v119_1_0) => {
                                let v290: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v119_1_0.clone(),
                                        v34.clone(),
                                        v4.clone()
                                    ),
                                );
                                let v297: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v290);
                                Err(v297)
                            }
                        }
                    } else {
                        let v346: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v34.clone(),
                                v0_1.clone(),
                                v4.clone()
                            ),
                        );
                        let v353: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v346);
                        Err(v353)
                    }
                } else {
                    let v401: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1.clone(),
                            v34.clone(),
                            v0_1,
                            v4.clone()
                        ),
                    );
                    let v408: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v401);
                    Err(v408)
                }
            }
        }
        pub fn method45(v0_1: string, v1_1: u8) -> Result<std::path::PathBuf, std::io::Error> {
            let v8: Result<std::path::PathBuf, std::io::Error> = std::fs::read_link(&*v0_1.clone());
            let v9 = Spiral::method46();
            let v22: Result<std::path::PathBuf, string> = v8.map_err(|x| v9(x));
            let v25 = Spiral::method48();
            let v26 = Spiral::method49();
            let v28: Spiral::US15 = match &v22 {
                Err(v22_1_0) => v26(v22_1_0.clone()),
                Ok(v22_0_0) => v25(v22_0_0.clone()),
            };
            match &v28 {
                Spiral::US15::US15_0(v28_0_0) => Ok(v28_0_0.clone()),
                Spiral::US15::US15_1(v28_1_0) => Spiral::method54(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure21(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    v28_1_0.clone(),
                ),
            }
        }
        pub fn method56(v0_1: bool) -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn method57() -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn method58(v0_1: i32, v1_1: i32) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method60(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: std::io::Error,
            v4: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v5: string = Spiral::method52(v4.clone());
            let v6: Option<string> = Spiral::method38(v4.clone());
            let v31: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6));
            let v35: string = Spiral::method47(v3);
            if (v2) >= 11_u8 {
                let v39: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v4.clone(),
                        v5.clone()
                    ),
                );
                let v46: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v39);
                Err(v46)
            } else {
                if let Spiral::US5::US5_0(v31_0_0) = &v31 {
                    if (v4.clone()) != string("") {
                        let v100: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v31_0_0.clone());
                        let v101 = Spiral::method46();
                        let v114: Result<std::path::PathBuf, string> = v100.map_err(|x| v101(x));
                        let v117 = Spiral::method48();
                        let v118 = Spiral::method49();
                        let v120: Spiral::US15 = match &v114 {
                            Err(v114_1_0) => v118(v114_1_0.clone()),
                            Ok(v114_0_0) => v117(v114_0_0.clone()),
                        };
                        match &v120 {
                            Spiral::US15::US15_0(v120_0_0) => {
                                let v164: string = Spiral::method33(
                                    toString(v120_0_0.clone().display()),
                                    v5.clone(),
                                );
                                let v171: &str = &*v164;
                                let v207: std::string::String = String::from(v171);
                                let v243: std::path::PathBuf = std::path::PathBuf::from(v207);
                                Ok(v243)
                            }
                            Spiral::US15::US15_1(v120_1_0) => {
                                let v291: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v120_1_0.clone(),
                                        v35.clone(),
                                        v5.clone()
                                    ),
                                );
                                let v298: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v291);
                                Err(v298)
                            }
                        }
                    } else {
                        let v347: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v35.clone(),
                                v4.clone(),
                                v5.clone()
                            ),
                        );
                        let v354: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v347);
                        Err(v354)
                    }
                } else {
                    let v402: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1,
                            v35.clone(),
                            v4,
                            v5.clone()
                        ),
                    );
                    let v409: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v402);
                    Err(v409)
                }
            }
        }
        pub fn method59(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v45: i32 = Spiral::method56(unbox::<bool>(fable_library_rust::Native_::getZero()));
            let v47: bool = Spiral::method58(Spiral::method57(), v45);
            if v47 {
                let v54: bool = unbox::<bool>(fable_library_rust::Native_::getZero());
                let v131: std::path::PathBuf = fable_library_rust::Native_::getZero();
                Ok(v131)
            } else {
                let v153: string = append(
                    string(
                        "file_system.read_link / Fsharp / The file or directory is not a reparse point. / ",
                    ),
                    sprintf!(
                        "path: {} / result: {} / path\': {} / n: {}",
                        v0_1.clone(),
                        v47,
                        v2.clone(),
                        v1_1
                    ),
                );
                Spiral::method60(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure23(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    std::io::Error::new(std::io::ErrorKind::Other, &*v153),
                    v2,
                )
            }
        }
        pub fn closure24(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            Spiral::method59(v0_1, v1_1, v2)
        }
        pub fn closure23(
            v0_1: string,
            v1_1: u8,
        ) -> Func1<string, Result<std::path::PathBuf, std::io::Error>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure24(v0_1.clone(), v1_1, v)
            })
        }
        pub fn method61(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: std::io::Error,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v4: string = Spiral::method52(v0_1.clone());
            let v5: Option<string> = Spiral::method38(v0_1.clone());
            let v30: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5));
            let v34: string = Spiral::method47(v3);
            if (v2) >= 11_u8 {
                let v38: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v0_1.clone(),
                        v4.clone()
                    ),
                );
                let v45: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v38);
                Err(v45)
            } else {
                if let Spiral::US5::US5_0(v30_0_0) = &v30 {
                    if (v0_1.clone()) != string("") {
                        let v99: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v30_0_0.clone());
                        let v100 = Spiral::method46();
                        let v113: Result<std::path::PathBuf, string> = v99.map_err(|x| v100(x));
                        let v116 = Spiral::method48();
                        let v117 = Spiral::method49();
                        let v119: Spiral::US15 = match &v113 {
                            Err(v113_1_0) => v117(v113_1_0.clone()),
                            Ok(v113_0_0) => v116(v113_0_0.clone()),
                        };
                        match &v119 {
                            Spiral::US15::US15_0(v119_0_0) => {
                                let v163: string = Spiral::method33(
                                    toString(v119_0_0.clone().display()),
                                    v4.clone(),
                                );
                                let v170: &str = &*v163;
                                let v206: std::string::String = String::from(v170);
                                let v242: std::path::PathBuf = std::path::PathBuf::from(v206);
                                Ok(v242)
                            }
                            Spiral::US15::US15_1(v119_1_0) => {
                                let v290: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v119_1_0.clone(),
                                        v34.clone(),
                                        v4.clone()
                                    ),
                                );
                                let v297: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v290);
                                Err(v297)
                            }
                        }
                    } else {
                        let v346: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v34.clone(),
                                v0_1.clone(),
                                v4.clone()
                            ),
                        );
                        let v353: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v346);
                        Err(v353)
                    }
                } else {
                    let v401: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1.clone(),
                            v34.clone(),
                            v0_1,
                            v4.clone()
                        ),
                    );
                    let v408: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v401);
                    Err(v408)
                }
            }
        }
        pub fn method55(v0_1: string, v1_1: u8) -> Result<std::path::PathBuf, std::io::Error> {
            let v44: i32 = Spiral::method56(unbox::<bool>(fable_library_rust::Native_::getZero()));
            let v46: bool = Spiral::method58(Spiral::method57(), v44);
            if v46 {
                let v53: bool = unbox::<bool>(fable_library_rust::Native_::getZero());
                let v130: std::path::PathBuf = fable_library_rust::Native_::getZero();
                Ok(v130)
            } else {
                let v152: string = append(
                    string(
                        "file_system.read_link / Fsharp / The file or directory is not a reparse point. / ",
                    ),
                    sprintf!(
                        "path: {} / result: {} / path\': {} / n: {}",
                        v0_1.clone(),
                        v46,
                        v0_1.clone(),
                        v1_1
                    ),
                );
                Spiral::method61(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure23(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    std::io::Error::new(std::io::ErrorKind::Other, &*v152),
                )
            }
        }
        pub fn method44(v0_1: string) -> Result<std::path::PathBuf, std::io::Error> {
            if Spiral::method36(v0_1.clone()) {
                std::fs::read_link(&*v0_1.clone())
            } else {
                Spiral::method45(v0_1, 0_u8)
            }
        }
        pub fn closure25(unitVar: (), v0_1: std::path::PathBuf) -> Spiral::US16 {
            Spiral::US16::US16_0(v0_1)
        }
        pub fn method62() -> Func1<std::path::PathBuf, Spiral::US16> {
            Func1::new(move |v: std::path::PathBuf| Spiral::closure25((), v))
        }
        pub fn method64(v0_1: string) -> string {
            v0_1
        }
        pub fn method65() -> string {
            string("")
        }
        pub fn method63(v0_1: string, v1_1: string, v2: string) -> string {
            let v6: Result<regex::Regex, regex::Error> = regex::Regex::new(&v0_1);
            let v10: regex::Regex = v6.unwrap();
            let v22: string = Spiral::method64(v2);
            let v24: std::borrow::Cow<str> = v10.replace_all(&*v22, &*v1_1);
            let v26: std::string::String = String::from(v24);
            fable_library_rust::String_::fromString(v26)
        }
        pub fn method43(v0_1: string) -> string {
            if (v0_1.clone()) == string("") {
                string("")
            } else {
                let v3: Result<std::path::PathBuf, std::io::Error> = Spiral::method44(v0_1.clone());
                let v7: Option<std::path::PathBuf> = v3.ok();
                let v43: Spiral::US16 =
                    defaultValue(Spiral::US16::US16_1, map(Spiral::method62(), v7));
                let v89: string = match &v43 {
                    Spiral::US16::US16_0(v43_0_0) => toString(
                        match &v43 {
                            Spiral::US16::US16_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone()
                        .display(),
                    ),
                    _ => v0_1.clone(),
                };
                let v94: string = Spiral::method63(
                    string("^\\\\\\\\\\?\\\\"),
                    string(""),
                    if (v89.clone()) == string("") {
                        v0_1.clone()
                    } else {
                        v89
                    },
                );
                if (length(v94.clone())) < 2_i32 {
                    v0_1.clone()
                } else {
                    replace(
                        concat(new_array(&[
                            toLower(ofChar(getCharAt(v94.clone(), 0_i32))),
                            getSlice(v94, Some(1_i32), None::<i32>),
                        ])),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method32(v0_1: string) -> Spiral::US5 {
            let v5: Spiral::US14 = Spiral::method34(
                Spiral::US13::US13_1,
                Spiral::method33(string("spiral"), string("workspace")),
                v0_1.clone(),
            );
            match &v5 {
                Spiral::US14::US14_0(v5_0_0) => {
                    Spiral::US5::US5_0(Spiral::method43(v5_0_0.clone()))
                }
                Spiral::US14::US14_1(v5_1_0) => {
                    let v323: () = {
                        Spiral::closure17(v0_1.clone(), v5_1_0.clone(), ());
                        ()
                    };
                    Spiral::US5::US5_1
                }
            }
        }
        pub fn method68(v0_1: i32, v1_1: LrcPtr<Spiral::Mut6>) -> bool {
            (v1_1.l0.get().clone()) < (v0_1)
        }
        pub fn method69() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method67(v0_1: string) -> string {
            let v12: &str = &*v0_1.clone();
            let v48: std::string::String = String::from(v12);
            let v84: std::path::PathBuf = std::path::PathBuf::from(v48);
            if (v84.exists()) == false {
                let v117: string = Spiral::method31();
                let v131: Array<string> = split(
                    Spiral::method43(Spiral::method33(v117.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v135: i32 = get_Count(v131.clone());
                let v136: LrcPtr<Spiral::Mut6> = LrcPtr::new(Spiral::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral::method68(v135, v136.clone()) {
                    let v138: i32 = v136.l0.get().clone();
                    let v141: i32 = ((v138.wrapping_neg()) + (v135)) - 1_i32;
                    let matchValue: i32 = v136.l1.get().clone();
                    let v143: Array<string> = v136.l2.get().clone();
                    let v142: i32 = matchValue;
                    let v144: string = v131[v141].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == (v144.clone()) {
                        ((v142) + 1_i32, v143.clone())
                    } else {
                        if string(".") == (v144.clone()) {
                            (v142, v143.clone())
                        } else {
                            if 0_i32 == (v142) {
                                if endsWith3(v144.clone(), string(":"), false) {
                                    let v156: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v117.clone(), 0_i32)
                                    )]);
                                    let v157: i32 = get_Count(v156.clone());
                                    let v159: i32 = (v157) + (get_Count(v143.clone()));
                                    let v160: Array<string> = new_init(&string(""), v159);
                                    let v161: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v159, v161.clone()) {
                                        let v163: i32 = v161.l0.get().clone();
                                        let v168: string = if (v163) < (v157) {
                                            v156[v163].clone()
                                        } else {
                                            let v166: i32 = (v163) - (v157);
                                            v143[v166].clone()
                                        };
                                        v160.get_mut()[v163 as usize] = v168;
                                        {
                                            let v169: i32 = (v163) + 1_i32;
                                            v161.l0.set(v169);
                                            ()
                                        }
                                    }
                                    (0_i32, v160.clone())
                                } else {
                                    let v170: Array<string> = new_array(&[v144]);
                                    let v171: i32 = get_Count(v170.clone());
                                    let v173: i32 = (v171) + (get_Count(v143.clone()));
                                    let v174: Array<string> = new_init(&string(""), v173);
                                    let v175: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v173, v175.clone()) {
                                        let v177: i32 = v175.l0.get().clone();
                                        let v182: string = if (v177) < (v171) {
                                            v170[v177].clone()
                                        } else {
                                            let v180: i32 = (v177) - (v171);
                                            v143[v180].clone()
                                        };
                                        v174.get_mut()[v177 as usize] = v182;
                                        {
                                            let v183: i32 = (v177) + 1_i32;
                                            v175.l0.set(v183);
                                            ()
                                        }
                                    }
                                    (0_i32, v174.clone())
                                }
                            } else {
                                ((v142) - 1_i32, v143.clone())
                            }
                        }
                    };
                    let v193: i32 = (v138) + 1_i32;
                    v136.l0.set(v193);
                    v136.l1.set(patternInput_1.0.clone());
                    v136.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v136.l1.get().clone();
                    let v195: Array<string> = v136.l2.get().clone();
                    let _let__v200: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v195 = v195.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v195 = v195.clone();
                                    move |i: i32| v195[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, (get_Count(v195.clone())) - 1_i32),
                            )
                        }
                    }));
                    let v212: string = ofChar(Spiral::method69());
                    join(
                        if (v212.clone()) == string("\n") {
                            Spiral::method28(v212.clone())
                        } else {
                            v212
                        },
                        toArray_1(_let__v200),
                    )
                }
            } else {
                let v225: Result<std::path::PathBuf, std::io::Error> =
                    std::fs::canonicalize(&*v0_1);
                let v229: std::path::PathBuf = v225.unwrap();
                let v247: std::path::Display = v229.display();
                let v283: std::string::String = format!("{}", v247);
                fable_library_rust::String_::fromString(v283)
            }
        }
        pub fn method66(v0_1: string) -> string {
            Spiral::method43(Spiral::method67(v0_1))
        }
        pub fn method71(v0_1: bool, v1_1: string) {
            if Spiral::method36(v1_1.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v1_1.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v1_1).unwrap();
                    ()
                };
            }
            ()
        }
        pub fn closure26(v0_1: string, unitVar: ()) {
            if ((Spiral::method3(string("CI"))) == string("")) != true {
                Spiral::method71(true, v0_1);
            };
        }
        pub fn method70(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure26(v0_1.clone(), ())
            })
        }
        pub fn method72(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure26(v0_1.clone(), ())
            })
        }
        pub fn method73(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method74(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method75() -> string {
            string("\n")
        }
        pub fn method77(v0_1: string, v1_1: string) -> bool {
            if (Spiral::method35(v0_1.clone())) == false {
                false
            } else {
                let v20: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v68: Vec<u8> = Spiral::method24(v20.unwrap());
                let v70: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v68);
                let v74: std::string::String = v70.unwrap();
                (v1_1) == (fable_library_rust::String_::fromString(v74))
            }
        }
        pub fn closure27(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method79() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral::closure27((), v))
        }
        pub fn closure28(unitVar: (), unitVar_1: ()) -> Spiral::US17 {
            Spiral::US17::US17_0
        }
        pub fn method80() -> Func0<Spiral::US17> {
            Func0::new(move || Spiral::closure28((), ()))
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Spiral::US17 {
            Spiral::US17::US17_1(v0_1)
        }
        pub fn method81() -> Func1<std::string::String, Spiral::US17> {
            Func1::new(move |v: std::string::String| Spiral::closure29((), v))
        }
        pub fn method82() -> string {
            let v3: &str = inline_colorization::color_bright_red;
            let v10: std::string::String = String::from(v3);
            let v139: string = append(
                (fable_library_rust::String_::fromString(v10)),
                (Spiral::method12(getCharAt(toLower(string("Critical")), 0_i32))),
            );
            let v145: &str = inline_colorization::color_reset;
            let v152: std::string::String = String::from(v145);
            append((v139), (fable_library_rust::String_::fromString(v152)))
        }
        pub fn method84(v0_1: string, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("dir"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v91: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v3.clone(), string("error"), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v139: std::string::String = format!("{:#?}", v1_1);
            let v186: () = {
                Spiral::closure7(
                    v3.clone(),
                    fable_library_rust::String_::fromString(v139),
                    (),
                );
                ()
            };
            let v205: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method83(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral::method84(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.create_dir"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure30(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method83(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method82(),
                    v0_1,
                    v1_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method85() -> string {
            let v3: &str = inline_colorization::color_bright_black;
            let v10: std::string::String = String::from(v3);
            let v139: string = append(
                (fable_library_rust::String_::fromString(v10)),
                (Spiral::method12(getCharAt(toLower(string("Verbose")), 0_i32))),
            );
            let v145: &str = inline_colorization::color_reset;
            let v152: std::string::String = String::from(v145);
            append((v139), (fable_library_rust::String_::fromString(v152)))
        }
        pub fn method87(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("dir"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method86(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method87(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.create_dir"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure31(v0_1: string, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                0_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method86(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method85(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure32(v0_1: string, unitVar: ()) {
            Spiral::method71(true, v0_1);
        }
        pub fn method88(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure32(v0_1.clone(), ())
            })
        }
        pub fn method89(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure32(v0_1.clone(), ())
            })
        }
        pub fn method78(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v7: Result<(), std::io::Error> = std::fs::create_dir_all(&*v0_1.clone());
            let v8 = Spiral::method79();
            let v21: Result<(), std::string::String> = v7.map_err(|x| v8(x));
            let v24 = Spiral::method80();
            let v25 = Spiral::method81();
            let v27: Spiral::US17 = match &v21 {
                Err(v21_1_0) => v25(v21_1_0.clone()),
                _ => v24(),
            };
            match &v27 {
                Spiral::US17::US17_0 => {
                    let v343: () = {
                        Spiral::closure31(v0_1.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral::US17::US17_1(v27_1_0) => {
                    let v972: () = {
                        Spiral::closure30(
                            v0_1.clone(),
                            match &v27 {
                                Spiral::US17::US17_1(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v1292 = Spiral::method88(v0_1.clone());
                interface_cast!(
                    Spiral::Disposable::_ctor__3A5B6456(Func0::new({
                        let v1292 = v1292.clone();
                        move || v1292.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method76(v0_1: string, v1_1: string) {
            if (Spiral::method77(v0_1.clone(), v1_1.clone())) == false {
                let v8: string = defaultValue(string(""), Spiral::method38(v0_1.clone()));
                if (Spiral::method36(v8.clone())) == false {
                    let v13: LrcPtr<dyn IDisposable> = Spiral::method78(v8);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ()
            };
        }
        pub fn method91(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
        ) -> string {
            v0_1
        }
        pub fn method93() -> string {
            string("")
        }
        pub fn method94(v0_1: char, v1_1: LrcPtr<StringBuilder>, v2: i32, v3: i32) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("c"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v77: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v96: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string("s"), ());
                ()
            };
            let v132: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v144: std::string::String = format!("{:#?}", v1_1);
            let v191: () = {
                Spiral::closure7(
                    v5.clone(),
                    fable_library_rust::String_::fromString(v144),
                    (),
                );
                ()
            };
            let v210: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method95(v0_1: i64, v1_1: string, v2: i64) -> LrcPtr<Spiral::UH0> {
            if (v2) < (v0_1) {
                LrcPtr::new(Spiral::UH0::UH0_1(
                    getCharAt(v1_1.clone(), v2 as i32),
                    Spiral::method95(v0_1, v1_1, (v2) + 1_i64),
                ))
            } else {
                LrcPtr::new(Spiral::UH0::UH0_0)
            }
        }
        pub fn method96(
            v0_1: LrcPtr<Spiral::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method96: loop {
                break '_method96 (match v0_1.get().clone().as_ref() {
                    Spiral::UH0::UH0_0 => (v1_1.get().clone(), v2.get().clone(), v3.get().clone()),
                    Spiral::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == (v4);
                        let patternInput: (i32, i32) = if v6 {
                            ((v2.get().clone()) + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), (v3.get().clone()) + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v23: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method96;
                        }
                    }
                });
            }
        }
        pub fn method97(v0_1: char, v1_1: i32, v2: i32) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v4.clone(), string("expected"), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v76: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v114: () = {
                Spiral::closure7(v4.clone(), string("line"), ());
                ()
            };
            let v131: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v151: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v168: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v187: () = {
                Spiral::closure7(v4.clone(), string("col"), ());
                ()
            };
            let v204: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v224: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v243: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn closure34(v0_1: i32, v1_1: i32, v2: string) -> string {
            if (v1_1) >= (v0_1) {
                v2.clone()
            } else {
                (Spiral::method98(v0_1, (v1_1) + 1_i32))(append((v2), string(" ")))
            }
        }
        pub fn method98(v0_1: i32, v1_1: i32) -> Func1<string, string> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure34(v0_1, v1_1, v)
            })
        }
        pub fn closure33(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US19 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == (v0_1.clone()) {
                Spiral::US19::US19_1(append(
                    string("parsing.p_char / unexpected end of input / "),
                    (Spiral::method94('\"', v1_1.clone(), v2, v3)),
                ))
            } else {
                let v14: char = getCharAt(v0_1.clone(), 0_i32);
                if (v14) == '\"' {
                    let v51: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v57: string = ofChar(v14);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v57.clone()) as i64, v57, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US19::US19_0(
                        v14,
                        v51,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v74: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    let v114: string = getSlice(
                        v0_1.clone(),
                        Some(0_i32),
                        Some(
                            (if -2_i32 == (v74) {
                                (length(v0_1)) + 1_i32
                            } else {
                                (v74) + 1_i32
                            }) - 1_i32,
                        ),
                    );
                    Spiral::US19::US19_1(append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                string("parsing.p_char / "),
                                                (Spiral::method97('\"', v2, v3)),
                                            )),
                                            string("\n"),
                                        )),
                                        (toString(v1_1)),
                                    )),
                                    (v114),
                                )),
                                string("\n"),
                            )),
                            (append(
                                ((Spiral::method98((v3) - 1_i32, 0_i32))(string(""))),
                                string("^"),
                            )),
                        )),
                        string("\n"),
                    ))
                }
            }
        }
        pub fn closure35(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US19 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == (v0_1.clone()) {
                Spiral::US19::US19_1(append(
                    string("parsing.p_char / unexpected end of input / "),
                    (Spiral::method94('\'', v1_1.clone(), v2, v3)),
                ))
            } else {
                let v14: char = getCharAt(v0_1.clone(), 0_i32);
                if (v14) == '\'' {
                    let v51: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v57: string = ofChar(v14);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v57.clone()) as i64, v57, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US19::US19_0(
                        v14,
                        v51,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v74: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    let v114: string = getSlice(
                        v0_1.clone(),
                        Some(0_i32),
                        Some(
                            (if -2_i32 == (v74) {
                                (length(v0_1)) + 1_i32
                            } else {
                                (v74) + 1_i32
                            }) - 1_i32,
                        ),
                    );
                    Spiral::US19::US19_1(append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                string("parsing.p_char / "),
                                                (Spiral::method97('\'', v2, v3)),
                                            )),
                                            string("\n"),
                                        )),
                                        (toString(v1_1)),
                                    )),
                                    (v114),
                                )),
                                string("\n"),
                            )),
                            (append(
                                ((Spiral::method98((v3) - 1_i32, 0_i32))(string(""))),
                                string("^"),
                            )),
                        )),
                        string("\n"),
                    ))
                }
            }
        }
        pub fn method99(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral::UH1>,
        ) -> Spiral::US19 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral::UH1>> = MutCell::new(v2.clone());
            '_method99: loop {
                break '_method99 (match v2.get().clone().as_ref() {
                    Spiral::UH1::UH1_0 => {
                        Spiral::US19::US19_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral::US19 = (match v2.get().clone().as_ref() {
                            Spiral::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral::US19::US19_0(v7_0_0, v7_0_1, v7_0_2, v7_0_3, v7_0_4) => {
                                v7.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method99;
                            }
                        }
                    }
                });
            }
        }
        pub fn method100(v0_1: Array<char>) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method101(v0_1: string, v1_1: LrcPtr<StringBuilder>, v2: i32, v3: i32) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("chars"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v5.clone(), v0_1, ());
                ()
            };
            let v93: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v112: () = {
                Spiral::closure7(v5.clone(), string("s"), ());
                ()
            };
            let v129: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v141: std::string::String = format!("{:#?}", v1_1);
            let v188: () = {
                Spiral::closure7(
                    v5.clone(),
                    fable_library_rust::String_::fromString(v141),
                    (),
                );
                ()
            };
            let v207: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method102(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method102: loop {
                break '_method102 (if (v1_1.get().clone()) >= 2_i64 {
                    false
                } else {
                    let v11: Spiral::US21 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US21::US21_0('\"')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US21::US21_0('\'')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            Spiral::US21::US21_1
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v11 {
                            Spiral::US21::US21_0(v11_0_0) => match &v11 {
                                Spiral::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method102;
                    }
                });
            }
        }
        pub fn method103(
            v0_1: char,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> string {
            let v6: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v20: () = {
                Spiral::closure7(v6.clone(), string("{ "), ());
                ()
            };
            let v39: () = {
                Spiral::closure7(v6.clone(), string("first_char"), ());
                ()
            };
            let v58: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v78: () = {
                Spiral::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v97: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v116: () = {
                Spiral::closure7(v6.clone(), string("chars"), ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v6.clone(), v1_1, ());
                ()
            };
            let v167: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v186: () = {
                Spiral::closure7(v6.clone(), string("s"), ());
                ()
            };
            let v203: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v215: std::string::String = format!("{:#?}", v2);
            let v262: () = {
                Spiral::closure7(
                    v6.clone(),
                    fable_library_rust::String_::fromString(v215),
                    (),
                );
                ()
            };
            let v281: () = {
                Spiral::closure7(v6.clone(), string(" }"), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method104(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method104: loop {
                break '_method104 ({
                    let v176: Spiral::US19 = if string("") == (v1_1.get().clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.none_of / unexpected end of input / "),
                            (Spiral::method101(
                                Spiral::method100(toArray(ofArray(new_array(&['\"', '\''])))),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v63: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method102(v63, 0_i64)) == false {
                            let v102: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v108: string = ofChar(v63);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v108.clone()) as i64, v108, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US19::US19_0(
                                v63,
                                v102,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected char / "),
                                (Spiral::method103(
                                    v63,
                                    Spiral::method100(toArray(ofArray(new_array(&['\"', '\''])))),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                )),
                            ))
                        }
                    };
                    let v188: Spiral::US19 = match &v176 {
                        Spiral::US19::US19_0(v176_0_0, v176_0_1, v176_0_2, v176_0_3, v176_0_4) => {
                            let v177: char = v176_0_0.clone();
                            Spiral::US19::US19_0(
                                if '\\' == (v177) { '/' } else { v177 },
                                v176_0_1.clone(),
                                v176_0_2.clone(),
                                v176_0_3.clone(),
                                v176_0_4.clone(),
                            )
                        }
                        Spiral::US19::US19_1(v176_1_0) => Spiral::US19::US19_1(v176_1_0.clone()),
                    };
                    match &v188 {
                        Spiral::US19::US19_0(v188_0_0, v188_0_1, v188_0_2, v188_0_3, v188_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v188_0_0.clone())));
                            let v1_1_temp: string = v188_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v188_0_2.clone();
                            let v3_temp: i32 = v188_0_3.clone();
                            let v4_temp: i32 = v188_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method104;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method105(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral::UH1>,
        ) -> Spiral::US19 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral::UH1>> = MutCell::new(v4.clone());
            '_method105: loop {
                break '_method105 (match v4.get().clone().as_ref() {
                    Spiral::UH1::UH1_0 => {
                        Spiral::US19::US19_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral::US19 = (match v4.get().clone().as_ref() {
                            Spiral::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral::US19::US19_0(v9_0_0, v9_0_1, v9_0_2, v9_0_3, v9_0_4) => {
                                v9.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method105;
                            }
                        }
                    }
                });
            }
        }
        pub fn method106(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
            v5: string,
            v6: LrcPtr<StringBuilder>,
            v7: i32,
            v8: i32,
            v9: string,
            v10: LrcPtr<StringBuilder>,
            v11: i32,
            v12: i32,
        ) -> string {
            let v14: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v28: () = {
                Spiral::closure7(v14.clone(), string("{ "), ());
                ()
            };
            let v47: () = {
                Spiral::closure7(v14.clone(), string("e"), ());
                ()
            };
            let v66: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v14.clone(), v0_1, ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v14.clone(), string("input"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v155: () = {
                Spiral::closure7(v14.clone(), v1_1, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v14.clone(), string(", "), ());
                ()
            };
            let v186: std::string::String = format!("{:#?}", v2);
            let v233: () = {
                Spiral::closure7(
                    v14.clone(),
                    fable_library_rust::String_::fromString(v186),
                    (),
                );
                ()
            };
            let v250: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v269: () = {
                Spiral::closure7(v14.clone(), string("rest1"), ());
                ()
            };
            let v286: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v303: () = {
                Spiral::closure7(v14.clone(), v5, ());
                ()
            };
            let v320: () = {
                Spiral::closure7(v14.clone(), string(", "), ());
                ()
            };
            let v332: std::string::String = format!("{:#?}", v6);
            let v379: () = {
                Spiral::closure7(
                    v14.clone(),
                    fable_library_rust::String_::fromString(v332),
                    (),
                );
                ()
            };
            let v396: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v415: () = {
                Spiral::closure7(v14.clone(), string("rest2"), ());
                ()
            };
            let v432: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v449: () = {
                Spiral::closure7(v14.clone(), v9, ());
                ()
            };
            let v466: () = {
                Spiral::closure7(v14.clone(), string(", "), ());
                ()
            };
            let v478: std::string::String = format!("{:#?}", v10);
            let v525: () = {
                Spiral::closure7(
                    v14.clone(),
                    fable_library_rust::String_::fromString(v478),
                    (),
                );
                ()
            };
            let v544: () = {
                Spiral::closure7(v14.clone(), string(" }"), ());
                ()
            };
            v14.l0.get().clone()
        }
        pub fn method107(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method107: loop {
                break '_method107 (if (v1_1.get().clone()) >= 3_i64 {
                    false
                } else {
                    let v15: Spiral::US21 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US21::US21_0('\"')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US21::US21_0('\'')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US21::US21_0(' ')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                Spiral::US21::US21_1
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v15 {
                            Spiral::US21::US21_0(v15_0_0) => match &v15 {
                                Spiral::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method107;
                    }
                });
            }
        }
        pub fn method108(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method108: loop {
                break '_method108 ({
                    let v200: Spiral::US19 = if string("") == (v1_1.get().clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.none_of / unexpected end of input / "),
                            (Spiral::method101(
                                Spiral::method100(toArray(ofArray(new_array(&['\"', '\'', ' '])))),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v75: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method107(v75, 0_i64)) == false {
                            let v114: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v120: string = ofChar(v75);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v120.clone()) as i64, v120, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US19::US19_0(
                                v75,
                                v114,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected char / "),
                                (Spiral::method103(
                                    v75,
                                    Spiral::method100(toArray(ofArray(new_array(&[
                                        '\"', '\'', ' ',
                                    ])))),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                )),
                            ))
                        }
                    };
                    let v212: Spiral::US19 = match &v200 {
                        Spiral::US19::US19_0(v200_0_0, v200_0_1, v200_0_2, v200_0_3, v200_0_4) => {
                            let v201: char = v200_0_0.clone();
                            Spiral::US19::US19_0(
                                if '\\' == (v201) { '/' } else { v201 },
                                v200_0_1.clone(),
                                v200_0_2.clone(),
                                v200_0_3.clone(),
                                v200_0_4.clone(),
                            )
                        }
                        Spiral::US19::US19_1(v200_1_0) => Spiral::US19::US19_1(v200_1_0.clone()),
                    };
                    match &v212 {
                        Spiral::US19::US19_0(v212_0_0, v212_0_1, v212_0_2, v212_0_3, v212_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v212_0_0.clone())));
                            let v1_1_temp: string = v212_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v212_0_2.clone();
                            let v3_temp: i32 = v212_0_3.clone();
                            let v4_temp: i32 = v212_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method108;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method109(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("input"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method110(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method110: loop {
                break '_method110 (if (v1_1.get().clone()) >= (length(v0_1.get().clone())) {
                    v1_1.get().clone()
                } else {
                    if ' ' == (getCharAt(v0_1.get().clone(), v1_1.get().clone())) {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = (v1_1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method110;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method111(v0_1: LrcPtr<StringBuilder>, v1_1: i32, v2: i32) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v4.clone(), string("s"), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v68: std::string::String = format!("{:#?}", v0_1);
            let v115: () = {
                Spiral::closure7(v4.clone(), fable_library_rust::String_::fromString(v68), ());
                ()
            };
            let v134: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method112(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method112: loop {
                break '_method112 ({
                    let v66: Spiral::US19 = if string("") == (v1_1.get().clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.any_char / unexpected end of input / "),
                            (Spiral::method111(
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v14: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v50: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some((length(v1_1.get().clone())) - 1_i32),
                        );
                        let v56: string = ofChar(v14);
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                            Spiral::method95(length(v56.clone()) as i64, v56, 0_i64),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        );
                        Spiral::US19::US19_0(
                            v14,
                            v50,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    };
                    match &v66 {
                        Spiral::US19::US19_0(v66_0_0, v66_0_1, v66_0_2, v66_0_3, v66_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v66_0_0.clone())));
                            let v1_1_temp: string = v66_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v66_0_2.clone();
                            let v3_temp: i32 = v66_0_3.clone();
                            let v4_temp: i32 = v66_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method112;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method92(v0_1: string) -> Spiral::US18 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v10: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v16: LrcPtr<StringBuilder> =
                    StringBuilder::_ctor__Z721C83C5(Spiral::method93());
                fn v19(arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)) -> Spiral::US19 {
                    Spiral::closure33((), arg10_0040)
                }
                fn v20(arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32)) -> Spiral::US19 {
                    Spiral::closure35((), arg10_0040_1)
                }
                let v24: Spiral::US19 = Spiral::method99(
                    v10.clone(),
                    v16.clone(),
                    LrcPtr::new(Spiral::UH1::UH1_1(
                        Func1::from(v19),
                        LrcPtr::new(Spiral::UH1::UH1_1(
                            Func1::from(v20),
                            LrcPtr::new(Spiral::UH1::UH1_0),
                        )),
                    )),
                );
                let v280: Spiral::US20 = match &v24 {
                    Spiral::US19::US19_0(v24_0_0, v24_0_1, v24_0_2, v24_0_3, v24_0_4) => {
                        let v29: i32 = v24_0_4.clone();
                        let v28: i32 = v24_0_3.clone();
                        let v27: LrcPtr<StringBuilder> = v24_0_2.clone();
                        let v26: string = v24_0_1.clone();
                        let v201: Spiral::US19 = if string("") == (v26.clone()) {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected end of input / "),
                                (Spiral::method101(
                                    Spiral::method100(toArray(ofArray(new_array(&['\"', '\''])))),
                                    v27.clone(),
                                    v28,
                                    v29,
                                )),
                            ))
                        } else {
                            let v88: char = getCharAt(v26.clone(), 0_i32);
                            if (Spiral::method102(v88, 0_i64)) == false {
                                let v127: string = getSlice(
                                    v26.clone(),
                                    Some(1_i32),
                                    Some((length(v26.clone())) - 1_i32),
                                );
                                let v133: string = ofChar(v88);
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method96(
                                        Spiral::method95(length(v133.clone()) as i64, v133, 0_i64),
                                        v27.clone(),
                                        v28,
                                        v29,
                                    );
                                Spiral::US19::US19_0(
                                    v88,
                                    v127,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            } else {
                                Spiral::US19::US19_1(append(
                                    string("parsing.none_of / unexpected char / "),
                                    (Spiral::method103(
                                        v88,
                                        Spiral::method100(toArray(ofArray(new_array(&[
                                            '\"', '\'',
                                        ])))),
                                        v27.clone(),
                                        v28,
                                        v29,
                                    )),
                                ))
                            }
                        };
                        let v213: Spiral::US19 = match &v201 {
                            Spiral::US19::US19_0(
                                v201_0_0,
                                v201_0_1,
                                v201_0_2,
                                v201_0_3,
                                v201_0_4,
                            ) => {
                                let v202: char = v201_0_0.clone();
                                Spiral::US19::US19_0(
                                    if '\\' == (v202) { '/' } else { v202 },
                                    v201_0_1.clone(),
                                    v201_0_2.clone(),
                                    v201_0_3.clone(),
                                    v201_0_4.clone(),
                                )
                            }
                            Spiral::US19::US19_1(v201_1_0) => {
                                Spiral::US19::US19_1(v201_1_0.clone())
                            }
                        };
                        let v233: Spiral::US20 = match &v213 {
                            Spiral::US19::US19_0(
                                v213_0_0,
                                v213_0_1,
                                v213_0_2,
                                v213_0_3,
                                v213_0_4,
                            ) => {
                                let patternInput_1: (
                                    string,
                                    string,
                                    LrcPtr<StringBuilder>,
                                    i32,
                                    i32,
                                ) = Spiral::method104(
                                    ofChar(v213_0_0.clone()),
                                    v213_0_1.clone(),
                                    v213_0_2.clone(),
                                    v213_0_3.clone(),
                                    v213_0_4.clone(),
                                );
                                Spiral::US20::US20_0(
                                    patternInput_1.0.clone(),
                                    patternInput_1.1.clone(),
                                    patternInput_1.2.clone(),
                                    patternInput_1.3.clone(),
                                    patternInput_1.4.clone(),
                                )
                            }
                            Spiral::US19::US19_1(v213_1_0) => {
                                Spiral::US20::US20_1(v213_1_0.clone())
                            }
                        };
                        let v243: Spiral::US20 = match &v233 {
                            Spiral::US20::US20_0(
                                v233_0_0,
                                v233_0_1,
                                v233_0_2,
                                v233_0_3,
                                v233_0_4,
                            ) => Spiral::US20::US20_0(
                                v233_0_0.clone(),
                                v233_0_1.clone(),
                                v233_0_2.clone(),
                                v233_0_3.clone(),
                                v233_0_4.clone(),
                            ),
                            _ => {
                                Spiral::US20::US20_0(string(""), v26.clone(), v27.clone(), v28, v29)
                            }
                        };
                        match &v243 {
                            Spiral::US20::US20_0(
                                v243_0_0,
                                v243_0_1,
                                v243_0_2,
                                v243_0_3,
                                v243_0_4,
                            ) => {
                                let v248: i32 = v243_0_4.clone();
                                let v247: i32 = v243_0_3.clone();
                                let v246: LrcPtr<StringBuilder> = v243_0_2.clone();
                                let v245: string = v243_0_1.clone();
                                let v252: Spiral::US19 = Spiral::method105(
                                    v245.clone(),
                                    v246.clone(),
                                    v247,
                                    v248,
                                    LrcPtr::new(Spiral::UH1::UH1_1(
                                        Func1::from(v19),
                                        LrcPtr::new(Spiral::UH1::UH1_1(
                                            Func1::from(v20),
                                            LrcPtr::new(Spiral::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v252 {
                                    Spiral::US19::US19_0(
                                        v252_0_0,
                                        v252_0_1,
                                        v252_0_2,
                                        v252_0_3,
                                        v252_0_4,
                                    ) => Spiral::US20::US20_0(
                                        v243_0_0.clone(),
                                        v252_0_1.clone(),
                                        v252_0_2.clone(),
                                        v252_0_3.clone(),
                                        v252_0_4.clone(),
                                    ),
                                    Spiral::US19::US19_1(v252_1_0) => Spiral::US20::US20_1(append(
                                        string("parsing.between / expected closing delimiter / "),
                                        (Spiral::method106(
                                            v252_1_0.clone(),
                                            v10.clone(),
                                            v16.clone(),
                                            1_i32,
                                            1_i32,
                                            v26.clone(),
                                            v27.clone(),
                                            v28,
                                            v29,
                                            v245.clone(),
                                            v246.clone(),
                                            v247,
                                            v248,
                                        )),
                                    )),
                                }
                            }
                            _ => Spiral::US20::US20_1(string("parsing.between / expected content")),
                        }
                    }
                    Spiral::US19::US19_1(v24_1_0) => Spiral::US20::US20_1(v24_1_0.clone()),
                };
                let v602: Spiral::US20 = match &v280 {
                    Spiral::US20::US20_0(v280_0_0, v280_0_1, v280_0_2, v280_0_3, v280_0_4) => {
                        v280.clone()
                    }
                    _ => {
                        let v488: Spiral::US19 = if string("") == (v10.clone()) {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected end of input / "),
                                (Spiral::method101(
                                    Spiral::method100(toArray(ofArray(new_array(&[
                                        '\"', '\'', ' ',
                                    ])))),
                                    v16.clone(),
                                    1_i32,
                                    1_i32,
                                )),
                            ))
                        } else {
                            let v359: char = getCharAt(v10.clone(), 0_i32);
                            if (Spiral::method107(v359, 0_i64)) == false {
                                let v398: string = getSlice(
                                    v10.clone(),
                                    Some(1_i32),
                                    Some((length(v10.clone())) - 1_i32),
                                );
                                let v404: string = ofChar(v359);
                                let patternInput_2: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method96(
                                        Spiral::method95(length(v404.clone()) as i64, v404, 0_i64),
                                        v16.clone(),
                                        1_i32,
                                        1_i32,
                                    );
                                Spiral::US19::US19_0(
                                    v359,
                                    v398,
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone(),
                                    patternInput_2.2.clone(),
                                )
                            } else {
                                Spiral::US19::US19_1(append(
                                    string("parsing.none_of / unexpected char / "),
                                    (Spiral::method103(
                                        v359,
                                        Spiral::method100(toArray(ofArray(new_array(&[
                                            '\"', '\'', ' ',
                                        ])))),
                                        v16.clone(),
                                        1_i32,
                                        1_i32,
                                    )),
                                ))
                            }
                        };
                        let v500: Spiral::US19 = match &v488 {
                            Spiral::US19::US19_0(
                                v488_0_0,
                                v488_0_1,
                                v488_0_2,
                                v488_0_3,
                                v488_0_4,
                            ) => {
                                let v489: char = v488_0_0.clone();
                                Spiral::US19::US19_0(
                                    if '\\' == (v489) { '/' } else { v489 },
                                    v488_0_1.clone(),
                                    v488_0_2.clone(),
                                    v488_0_3.clone(),
                                    v488_0_4.clone(),
                                )
                            }
                            Spiral::US19::US19_1(v488_1_0) => {
                                Spiral::US19::US19_1(v488_1_0.clone())
                            }
                        };
                        let v520: Spiral::US20 = match &v500 {
                            Spiral::US19::US19_0(
                                v500_0_0,
                                v500_0_1,
                                v500_0_2,
                                v500_0_3,
                                v500_0_4,
                            ) => {
                                let patternInput_3: (
                                    string,
                                    string,
                                    LrcPtr<StringBuilder>,
                                    i32,
                                    i32,
                                ) = Spiral::method108(
                                    ofChar(v500_0_0.clone()),
                                    v500_0_1.clone(),
                                    v500_0_2.clone(),
                                    v500_0_3.clone(),
                                    v500_0_4.clone(),
                                );
                                Spiral::US20::US20_0(
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                    patternInput_3.3.clone(),
                                    patternInput_3.4.clone(),
                                )
                            }
                            Spiral::US19::US19_1(v500_1_0) => {
                                Spiral::US20::US20_1(v500_1_0.clone())
                            }
                        };
                        match &v520 {
                            Spiral::US20::US20_0(
                                v520_0_0,
                                v520_0_1,
                                v520_0_2,
                                v520_0_3,
                                v520_0_4,
                            ) => v520.clone(),
                            _ => {
                                let v538: Spiral::US22 = if (length(v10.clone())) == 0_i32 {
                                    Spiral::US22::US22_0(v10.clone(), v16.clone(), 1_i32, 1_i32)
                                } else {
                                    Spiral::US22::US22_1(append(
                                        string("parsing.eof / expected end of input / "),
                                        (Spiral::method109(v10.clone())),
                                    ))
                                };
                                let v547: Spiral::US20 = match &v538 {
                                    Spiral::US22::US22_0(
                                        v538_0_0,
                                        v538_0_1,
                                        v538_0_2,
                                        v538_0_3,
                                    ) => Spiral::US20::US20_0(
                                        string(""),
                                        v538_0_0.clone(),
                                        v538_0_1.clone(),
                                        v538_0_2.clone(),
                                        v538_0_3.clone(),
                                    ),
                                    Spiral::US22::US22_1(v538_1_0) => {
                                        Spiral::US20::US20_1(v538_1_0.clone())
                                    }
                                };
                                match &v547 {
                                    Spiral::US20::US20_0(
                                        v547_0_0,
                                        v547_0_1,
                                        v547_0_2,
                                        v547_0_3,
                                        v547_0_4,
                                    ) => {
                                        let v549: string = v547_0_1.clone();
                                        Spiral::US20::US20_0(
                                            v547_0_0.clone(),
                                            getSlice(
                                                v549.clone(),
                                                Some(Spiral::method110(v549.clone(), 0_i32)),
                                                Some((length(v549)) - 1_i32),
                                            ),
                                            v547_0_2.clone(),
                                            v547_0_3.clone(),
                                            v547_0_4.clone(),
                                        )
                                    }
                                    Spiral::US20::US20_1(v547_1_0) => {
                                        Spiral::US20::US20_1(v547_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v900: Spiral::US23 = match &v602 {
                    Spiral::US20::US20_0(v602_0_0, v602_0_1, v602_0_2, v602_0_3, v602_0_4) => {
                        let v607: i32 = v602_0_4.clone();
                        let v606: i32 = v602_0_3.clone();
                        let v605: LrcPtr<StringBuilder> = v602_0_2.clone();
                        let v604: string = v602_0_1.clone();
                        let v771: Spiral::US19 = if string("") == (v604.clone()) {
                            Spiral::US19::US19_1(append(
                                string("parsing.p_char / unexpected end of input / "),
                                (Spiral::method94(' ', v605.clone(), v606, v607)),
                            ))
                        } else {
                            let v618: char = getCharAt(v604.clone(), 0_i32);
                            if (v618) == ' ' {
                                let v655: string = getSlice(
                                    v604.clone(),
                                    Some(1_i32),
                                    Some((length(v604.clone())) - 1_i32),
                                );
                                let v661: string = ofChar(v618);
                                let patternInput_4: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method96(
                                        Spiral::method95(length(v661.clone()) as i64, v661, 0_i64),
                                        v605.clone(),
                                        v606,
                                        v607,
                                    );
                                Spiral::US19::US19_0(
                                    v618,
                                    v655,
                                    patternInput_4.0.clone(),
                                    patternInput_4.1.clone(),
                                    patternInput_4.2.clone(),
                                )
                            } else {
                                let v678: i32 = (indexOf(v604.clone(), string("\n"))) - 1_i32;
                                let v718: string = getSlice(
                                    v604.clone(),
                                    Some(0_i32),
                                    Some(
                                        (if -2_i32 == (v678) {
                                            (length(v604.clone())) + 1_i32
                                        } else {
                                            (v678) + 1_i32
                                        }) - 1_i32,
                                    ),
                                );
                                Spiral::US19::US19_1(append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            string("parsing.p_char / "),
                                                            (Spiral::method97(' ', v606, v607)),
                                                        )),
                                                        string("\n"),
                                                    )),
                                                    (toString(v605.clone())),
                                                )),
                                                (v718),
                                            )),
                                            string("\n"),
                                        )),
                                        (append(
                                            ((Spiral::method98((v607) - 1_i32, 0_i32))(string(""))),
                                            string("^"),
                                        )),
                                    )),
                                    string("\n"),
                                ))
                            }
                        };
                        let v783: Spiral::US24 = match &v771 {
                            Spiral::US19::US19_0(
                                v771_0_0,
                                v771_0_1,
                                v771_0_2,
                                v771_0_3,
                                v771_0_4,
                            ) => Spiral::US24::US24_0(
                                Spiral::US21::US21_0(v771_0_0.clone()),
                                v771_0_1.clone(),
                                v771_0_2.clone(),
                                v771_0_3.clone(),
                                v771_0_4.clone(),
                            ),
                            _ => Spiral::US24::US24_0(
                                Spiral::US21::US21_1,
                                v604.clone(),
                                v605.clone(),
                                v606,
                                v607,
                            ),
                        };
                        let v874: Spiral::US20 = match &v783 {
                            Spiral::US24::US24_0(
                                v783_0_0,
                                v783_0_1,
                                v783_0_2,
                                v783_0_3,
                                v783_0_4,
                            ) => {
                                let v788: i32 = v783_0_4.clone();
                                let v787: i32 = v783_0_3.clone();
                                let v786: LrcPtr<StringBuilder> = v783_0_2.clone();
                                let v785: string = v783_0_1.clone();
                                let v850: Spiral::US19 = if string("") == (v785.clone()) {
                                    Spiral::US19::US19_1(append(
                                        string("parsing.any_char / unexpected end of input / "),
                                        (Spiral::method111(v786.clone(), v787, v788)),
                                    ))
                                } else {
                                    let v798: char = getCharAt(v785.clone(), 0_i32);
                                    let v834: string = getSlice(
                                        v785.clone(),
                                        Some(1_i32),
                                        Some((length(v785)) - 1_i32),
                                    );
                                    let v840: string = ofChar(v798);
                                    let patternInput_5: (LrcPtr<StringBuilder>, i32, i32) =
                                        Spiral::method96(
                                            Spiral::method95(
                                                length(v840.clone()) as i64,
                                                v840,
                                                0_i64,
                                            ),
                                            v786,
                                            v787,
                                            v788,
                                        );
                                    Spiral::US19::US19_0(
                                        v798,
                                        v834,
                                        patternInput_5.0.clone(),
                                        patternInput_5.1.clone(),
                                        patternInput_5.2.clone(),
                                    )
                                };
                                match &v850 {
                                    Spiral::US19::US19_0(
                                        v850_0_0,
                                        v850_0_1,
                                        v850_0_2,
                                        v850_0_3,
                                        v850_0_4,
                                    ) => {
                                        let patternInput_6: (
                                            string,
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        ) = Spiral::method112(
                                            ofChar(v850_0_0.clone()),
                                            v850_0_1.clone(),
                                            v850_0_2.clone(),
                                            v850_0_3.clone(),
                                            v850_0_4.clone(),
                                        );
                                        Spiral::US20::US20_0(
                                            patternInput_6.0.clone(),
                                            patternInput_6.1.clone(),
                                            patternInput_6.2.clone(),
                                            patternInput_6.3.clone(),
                                            patternInput_6.4.clone(),
                                        )
                                    }
                                    Spiral::US19::US19_1(v850_1_0) => {
                                        Spiral::US20::US20_1(v850_1_0.clone())
                                    }
                                }
                            }
                            Spiral::US24::US24_1(v783_1_0) => {
                                Spiral::US20::US20_1(v783_1_0.clone())
                            }
                        };
                        let v886: Spiral::US25 = match &v874 {
                            Spiral::US20::US20_0(
                                v874_0_0,
                                v874_0_1,
                                v874_0_2,
                                v874_0_3,
                                v874_0_4,
                            ) => Spiral::US25::US25_0(
                                Spiral::US5::US5_0(v874_0_0.clone()),
                                v874_0_1.clone(),
                                v874_0_2.clone(),
                                v874_0_3.clone(),
                                v874_0_4.clone(),
                            ),
                            _ => Spiral::US25::US25_0(
                                Spiral::US5::US5_1,
                                v604.clone(),
                                v605.clone(),
                                v606,
                                v607,
                            ),
                        };
                        match &v886 {
                            Spiral::US25::US25_0(
                                v886_0_0,
                                v886_0_1,
                                v886_0_2,
                                v886_0_3,
                                v886_0_4,
                            ) => Spiral::US23::US23_0(
                                v602_0_0.clone(),
                                v886_0_0.clone(),
                                v886_0_1.clone(),
                                v886_0_2.clone(),
                                v886_0_3.clone(),
                                v886_0_4.clone(),
                            ),
                            Spiral::US25::US25_1(v886_1_0) => {
                                Spiral::US23::US23_1(v886_1_0.clone())
                            }
                        }
                    }
                    Spiral::US20::US20_1(v602_1_0) => Spiral::US23::US23_1(v602_1_0.clone()),
                };
                match &v900 {
                    Spiral::US23::US23_0(
                        v900_0_0,
                        v900_0_1,
                        v900_0_2,
                        v900_0_3,
                        v900_0_4,
                        v900_0_5,
                    ) => Spiral::US18::US18_0(v900_0_0.clone(), v900_0_1.clone()),
                    Spiral::US23::US23_1(v900_1_0) => Spiral::US18::US18_1(v900_1_0.clone()),
                }
            }
        }
        pub fn method115(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method115: loop {
                break '_method115 (if (v1_1.get().clone()) >= 4_i64 {
                    false
                } else {
                    let v19: Spiral::US21 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US21::US21_0('\\')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US21::US21_0('`')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US21::US21_0('\"')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                if (v11) == 0_i64 {
                                    Spiral::US21::US21_0(' ')
                                } else {
                                    let v14: i64 = (v11) - 1_i64;
                                    Spiral::US21::US21_1
                                }
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v19 {
                            Spiral::US21::US21_0(v19_0_0) => match &v19 {
                                Spiral::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method115;
                    }
                });
            }
        }
        pub fn method116(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method116: loop {
                break '_method116 ({
                    let v224: Spiral::US19 = if string("") == (v1_1.get().clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.none_of / unexpected end of input / "),
                            (Spiral::method101(
                                Spiral::method100(toArray(ofArray(new_array(&[
                                    '\\', '`', '\"', ' ',
                                ])))),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v87: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method115(v87, 0_i64)) == false {
                            let v126: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v132: string = ofChar(v87);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v132.clone()) as i64, v132, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US19::US19_0(
                                v87,
                                v126,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected char / "),
                                (Spiral::method103(
                                    v87,
                                    Spiral::method100(toArray(ofArray(new_array(&[
                                        '\\', '`', '\"', ' ',
                                    ])))),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                )),
                            ))
                        }
                    };
                    match &v224 {
                        Spiral::US19::US19_0(v224_0_0, v224_0_1, v224_0_2, v224_0_3, v224_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v224_0_0.clone())));
                            let v1_1_temp: string = v224_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v224_0_2.clone();
                            let v3_temp: i32 = v224_0_3.clone();
                            let v4_temp: i32 = v224_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method116;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method118(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method118: loop {
                break '_method118 (if (v1_1.get().clone()) >= 3_i64 {
                    false
                } else {
                    let v15: Spiral::US21 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US21::US21_0('\\')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US21::US21_0('`')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US21::US21_0('\"')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                Spiral::US21::US21_1
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v15 {
                            Spiral::US21::US21_0(v15_0_0) => match &v15 {
                                Spiral::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method118;
                    }
                });
            }
        }
        pub fn closure36(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US20 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v168: Spiral::US19 = if string("") == (v0_1.clone()) {
                Spiral::US19::US19_1(append(
                    string("parsing.p_char / unexpected end of input / "),
                    (Spiral::method94('\\', v1_1.clone(), v2, v3)),
                ))
            } else {
                let v14: char = getCharAt(v0_1.clone(), 0_i32);
                if (v14) == '\\' {
                    let v51: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v57: string = ofChar(v14);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v57.clone()) as i64, v57, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US19::US19_0(
                        v14,
                        v51,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v74: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    let v114: string = getSlice(
                        v0_1.clone(),
                        Some(0_i32),
                        Some(
                            (if -2_i32 == (v74) {
                                (length(v0_1)) + 1_i32
                            } else {
                                (v74) + 1_i32
                            }) - 1_i32,
                        ),
                    );
                    Spiral::US19::US19_1(append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                string("parsing.p_char / "),
                                                (Spiral::method97('\\', v2, v3)),
                                            )),
                                            string("\n"),
                                        )),
                                        (toString(v1_1)),
                                    )),
                                    (v114),
                                )),
                                string("\n"),
                            )),
                            (append(
                                ((Spiral::method98((v3) - 1_i32, 0_i32))(string(""))),
                                string("^"),
                            )),
                        )),
                        string("\n"),
                    ))
                }
            };
            let v239: Spiral::US19 = match &v168 {
                Spiral::US19::US19_0(v168_0_0, v168_0_1, v168_0_2, v168_0_3, v168_0_4) => {
                    let v173: i32 = v168_0_4.clone();
                    let v172: i32 = v168_0_3.clone();
                    let v171: LrcPtr<StringBuilder> = v168_0_2.clone();
                    let v170: string = v168_0_1.clone();
                    if string("") == (v170.clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.any_char / unexpected end of input / "),
                            (Spiral::method111(v171.clone(), v172, v173)),
                        ))
                    } else {
                        let v183: char = getCharAt(v170.clone(), 0_i32);
                        let v219: string =
                            getSlice(v170.clone(), Some(1_i32), Some((length(v170)) - 1_i32));
                        let v225: string = ofChar(v183);
                        let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                            Spiral::method95(length(v225.clone()) as i64, v225, 0_i64),
                            v171,
                            v172,
                            v173,
                        );
                        Spiral::US19::US19_0(
                            v183,
                            v219,
                            patternInput_1.0.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                        )
                    }
                }
                Spiral::US19::US19_1(v168_1_0) => Spiral::US19::US19_1(v168_1_0.clone()),
            };
            match &v239 {
                Spiral::US19::US19_0(v239_0_0, v239_0_1, v239_0_2, v239_0_3, v239_0_4) => {
                    Spiral::US20::US20_0(
                        append((ofChar('\\')), (ofChar(v239_0_0.clone()))),
                        v239_0_1.clone(),
                        v239_0_2.clone(),
                        v239_0_3.clone(),
                        v239_0_4.clone(),
                    )
                }
                Spiral::US19::US19_1(v239_1_0) => Spiral::US20::US20_1(v239_1_0.clone()),
            }
        }
        pub fn closure37(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US20 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v168: Spiral::US19 = if string("") == (v0_1.clone()) {
                Spiral::US19::US19_1(append(
                    string("parsing.p_char / unexpected end of input / "),
                    (Spiral::method94('`', v1_1.clone(), v2, v3)),
                ))
            } else {
                let v14: char = getCharAt(v0_1.clone(), 0_i32);
                if (v14) == '`' {
                    let v51: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v57: string = ofChar(v14);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v57.clone()) as i64, v57, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US19::US19_0(
                        v14,
                        v51,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v74: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    let v114: string = getSlice(
                        v0_1.clone(),
                        Some(0_i32),
                        Some(
                            (if -2_i32 == (v74) {
                                (length(v0_1)) + 1_i32
                            } else {
                                (v74) + 1_i32
                            }) - 1_i32,
                        ),
                    );
                    Spiral::US19::US19_1(append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                string("parsing.p_char / "),
                                                (Spiral::method97('`', v2, v3)),
                                            )),
                                            string("\n"),
                                        )),
                                        (toString(v1_1)),
                                    )),
                                    (v114),
                                )),
                                string("\n"),
                            )),
                            (append(
                                ((Spiral::method98((v3) - 1_i32, 0_i32))(string(""))),
                                string("^"),
                            )),
                        )),
                        string("\n"),
                    ))
                }
            };
            let v239: Spiral::US19 = match &v168 {
                Spiral::US19::US19_0(v168_0_0, v168_0_1, v168_0_2, v168_0_3, v168_0_4) => {
                    let v173: i32 = v168_0_4.clone();
                    let v172: i32 = v168_0_3.clone();
                    let v171: LrcPtr<StringBuilder> = v168_0_2.clone();
                    let v170: string = v168_0_1.clone();
                    if string("") == (v170.clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.any_char / unexpected end of input / "),
                            (Spiral::method111(v171.clone(), v172, v173)),
                        ))
                    } else {
                        let v183: char = getCharAt(v170.clone(), 0_i32);
                        let v219: string =
                            getSlice(v170.clone(), Some(1_i32), Some((length(v170)) - 1_i32));
                        let v225: string = ofChar(v183);
                        let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                            Spiral::method95(length(v225.clone()) as i64, v225, 0_i64),
                            v171,
                            v172,
                            v173,
                        );
                        Spiral::US19::US19_0(
                            v183,
                            v219,
                            patternInput_1.0.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                        )
                    }
                }
                Spiral::US19::US19_1(v168_1_0) => Spiral::US19::US19_1(v168_1_0.clone()),
            };
            match &v239 {
                Spiral::US19::US19_0(v239_0_0, v239_0_1, v239_0_2, v239_0_3, v239_0_4) => {
                    Spiral::US20::US20_0(
                        append((ofChar('`')), (ofChar(v239_0_0.clone()))),
                        v239_0_1.clone(),
                        v239_0_2.clone(),
                        v239_0_3.clone(),
                        v239_0_4.clone(),
                    )
                }
                Spiral::US19::US19_1(v239_1_0) => Spiral::US20::US20_1(v239_1_0.clone()),
            }
        }
        pub fn method119(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral::UH3>,
        ) -> Spiral::US20 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral::UH3>> = MutCell::new(v4.clone());
            '_method119: loop {
                break '_method119 (match v4.get().clone().as_ref() {
                    Spiral::UH3::UH3_0 => {
                        Spiral::US20::US20_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral::US20 = (match v4.get().clone().as_ref() {
                            Spiral::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral::US20::US20_0(v9_0_0, v9_0_1, v9_0_2, v9_0_3, v9_0_4) => {
                                v9.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method119;
                            }
                        }
                    }
                });
            }
        }
        pub fn method120(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v1_1.clone());
            '_method120: loop {
                break '_method120 (match v0_1.get().clone().as_ref() {
                    Spiral::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral::UH2> = match v0_1.get().clone().as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v1_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                            match v0_1.get().clone().as_ref() {
                                Spiral::UH2::UH2_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.get().clone(),
                        ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method120;
                    }
                });
            }
        }
        pub fn method117(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US27 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method117: loop {
                break '_method117 ({
                    let v200: Spiral::US19 = if string("") == (v1_1.get().clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.none_of / unexpected end of input / "),
                            (Spiral::method101(
                                Spiral::method100(toArray(ofArray(new_array(&['\\', '`', '\"'])))),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v75: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method118(v75, 0_i64)) == false {
                            let v114: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v120: string = ofChar(v75);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v120.clone()) as i64, v120, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US19::US19_0(
                                v75,
                                v114,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected char / "),
                                (Spiral::method103(
                                    v75,
                                    Spiral::method100(toArray(ofArray(new_array(&[
                                        '\\', '`', '\"',
                                    ])))),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                )),
                            ))
                        }
                    };
                    let v215: Spiral::US20 = match &v200 {
                        Spiral::US19::US19_0(v200_0_0, v200_0_1, v200_0_2, v200_0_3, v200_0_4) => {
                            Spiral::US20::US20_0(
                                ofChar(v200_0_0.clone()),
                                v200_0_1.clone(),
                                v200_0_2.clone(),
                                v200_0_3.clone(),
                                v200_0_4.clone(),
                            )
                        }
                        Spiral::US19::US19_1(v200_1_0) => Spiral::US20::US20_1(v200_1_0.clone()),
                    };
                    let v229: Spiral::US20 = match &v215 {
                        Spiral::US20::US20_0(v215_0_0, v215_0_1, v215_0_2, v215_0_3, v215_0_4) => {
                            v215.clone()
                        }
                        _ => Spiral::method119(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral::closure36((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral::closure37((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v229 {
                        Spiral::US20::US20_0(v229_0_0, v229_0_1, v229_0_2, v229_0_3, v229_0_4) => {
                            let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                                v229_0_0.clone(),
                                v0_1.get().clone(),
                            ));
                            let v1_1_temp: string = v229_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v229_0_2.clone();
                            let v3_temp: i32 = v229_0_3.clone();
                            let v4_temp: i32 = v229_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method117;
                        }
                        _ => Spiral::US27::US27_0(
                            Spiral::method120(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method121(v0_1: LrcPtr<Spiral::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral::UH2::UH2_0 => v1_1.clone(),
                Spiral::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                    Spiral::method121(
                        match v0_1.as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method122(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US27 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method122: loop {
                break '_method122 ({
                    let v200: Spiral::US19 = if string("") == (v1_1.get().clone()) {
                        Spiral::US19::US19_1(append(
                            string("parsing.none_of / unexpected end of input / "),
                            (Spiral::method101(
                                Spiral::method100(toArray(ofArray(new_array(&['\\', '`', '\"'])))),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v75: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method118(v75, 0_i64)) == false {
                            let v114: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v120: string = ofChar(v75);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v120.clone()) as i64, v120, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US19::US19_0(
                                v75,
                                v114,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected char / "),
                                (Spiral::method103(
                                    v75,
                                    Spiral::method100(toArray(ofArray(new_array(&[
                                        '\\', '`', '\"',
                                    ])))),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                )),
                            ))
                        }
                    };
                    let v215: Spiral::US20 = match &v200 {
                        Spiral::US19::US19_0(v200_0_0, v200_0_1, v200_0_2, v200_0_3, v200_0_4) => {
                            Spiral::US20::US20_0(
                                ofChar(v200_0_0.clone()),
                                v200_0_1.clone(),
                                v200_0_2.clone(),
                                v200_0_3.clone(),
                                v200_0_4.clone(),
                            )
                        }
                        Spiral::US19::US19_1(v200_1_0) => Spiral::US20::US20_1(v200_1_0.clone()),
                    };
                    match &v215 {
                        Spiral::US20::US20_0(v215_0_0, v215_0_1, v215_0_2, v215_0_3, v215_0_4) => {
                            let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                                v215_0_0.clone(),
                                v0_1.get().clone(),
                            ));
                            let v1_1_temp: string = v215_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v215_0_2.clone();
                            let v3_temp: i32 = v215_0_3.clone();
                            let v4_temp: i32 = v215_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method122;
                        }
                        _ => Spiral::US27::US27_0(
                            Spiral::method120(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method114(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US27 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method114: loop {
                break '_method114 ({
                    let v5: bool = string("") == (v1_1.get().clone());
                    let v224: Spiral::US19 = if v5 {
                        Spiral::US19::US19_1(append(
                            string("parsing.none_of / unexpected end of input / "),
                            (Spiral::method101(
                                Spiral::method100(toArray(ofArray(new_array(&[
                                    '\\', '`', '\"', ' ',
                                ])))),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            )),
                        ))
                    } else {
                        let v87: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method115(v87, 0_i64)) == false {
                            let v126: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v132: string = ofChar(v87);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v132.clone()) as i64, v132, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US19::US19_0(
                                v87,
                                v126,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US19::US19_1(append(
                                string("parsing.none_of / unexpected char / "),
                                (Spiral::method103(
                                    v87,
                                    Spiral::method100(toArray(ofArray(new_array(&[
                                        '\\', '`', '\"', ' ',
                                    ])))),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                )),
                            ))
                        }
                    };
                    let v244: Spiral::US20 = match &v224 {
                        Spiral::US19::US19_0(v224_0_0, v224_0_1, v224_0_2, v224_0_3, v224_0_4) => {
                            let patternInput_1: (string, string, LrcPtr<StringBuilder>, i32, i32) =
                                Spiral::method116(
                                    ofChar(v224_0_0.clone()),
                                    v224_0_1.clone(),
                                    v224_0_2.clone(),
                                    v224_0_3.clone(),
                                    v224_0_4.clone(),
                                );
                            Spiral::US20::US20_0(
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                            )
                        }
                        Spiral::US19::US19_1(v224_1_0) => Spiral::US20::US20_1(v224_1_0.clone()),
                    };
                    let v721: Spiral::US20 = match &v244 {
                        Spiral::US20::US20_0(v244_0_0, v244_0_1, v244_0_2, v244_0_3, v244_0_4) => {
                            v244.clone()
                        }
                        _ => {
                            let v414: Spiral::US19 = if v5 {
                                Spiral::US19::US19_1(append(
                                    string("parsing.p_char / unexpected end of input / "),
                                    (Spiral::method94(
                                        '\"',
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    )),
                                ))
                            } else {
                                let v260: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if (v260) == '\"' {
                                    let v297: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some((length(v1_1.get().clone())) - 1_i32),
                                    );
                                    let v303: string = ofChar(v260);
                                    let patternInput_2: (LrcPtr<StringBuilder>, i32, i32) =
                                        Spiral::method96(
                                            Spiral::method95(
                                                length(v303.clone()) as i64,
                                                v303,
                                                0_i64,
                                            ),
                                            v2.get().clone(),
                                            v3.get().clone(),
                                            v4.get().clone(),
                                        );
                                    Spiral::US19::US19_0(
                                        v260,
                                        v297,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                } else {
                                    let v320: i32 =
                                        (indexOf(v1_1.get().clone(), string("\n"))) - 1_i32;
                                    let v360: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(0_i32),
                                        Some(
                                            (if -2_i32 == (v320) {
                                                (length(v1_1.get().clone())) + 1_i32
                                            } else {
                                                (v320) + 1_i32
                                            }) - 1_i32,
                                        ),
                                    );
                                    Spiral::US19::US19_1(append(
                                        (append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("parsing.p_char / "),
                                                                (Spiral::method97(
                                                                    '\"',
                                                                    v3.get().clone(),
                                                                    v4.get().clone(),
                                                                )),
                                                            )),
                                                            string("\n"),
                                                        )),
                                                        (toString(v2.get().clone())),
                                                    )),
                                                    (v360),
                                                )),
                                                string("\n"),
                                            )),
                                            (append(
                                                ((Spiral::method98(
                                                    (v4.get().clone()) - 1_i32,
                                                    0_i32,
                                                ))(
                                                    string("")
                                                )),
                                                string("^"),
                                            )),
                                        )),
                                        string("\n"),
                                    ))
                                }
                            };
                            let v650: Spiral::US20 = match &v414 {
                                Spiral::US19::US19_0(
                                    v414_0_0,
                                    v414_0_1,
                                    v414_0_2,
                                    v414_0_3,
                                    v414_0_4,
                                ) => {
                                    let v419: i32 = v414_0_4.clone();
                                    let v418: i32 = v414_0_3.clone();
                                    let v417: LrcPtr<StringBuilder> = v414_0_2.clone();
                                    let v416: string = v414_0_1.clone();
                                    let v421: Spiral::US27 = Spiral::method117(
                                        LrcPtr::new(Spiral::UH2::UH2_0),
                                        v416.clone(),
                                        v417.clone(),
                                        v418,
                                        v419,
                                    );
                                    let v454: Spiral::US20 = match &v421 {
                                        Spiral::US27::US27_0(
                                            v421_0_0,
                                            v421_0_1,
                                            v421_0_2,
                                            v421_0_3,
                                            v421_0_4,
                                        ) => {
                                            let v428: List<string> = Spiral::method121(
                                                v421_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral::US20::US20_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v428 = v428.clone();
                                                        move || ofList(v428.clone()).clone()
                                                    }))),
                                                ),
                                                v421_0_1.clone(),
                                                v421_0_2.clone(),
                                                v421_0_3.clone(),
                                                v421_0_4.clone(),
                                            )
                                        }
                                        Spiral::US27::US27_1(v421_1_0) => {
                                            Spiral::US20::US20_1(v421_1_0.clone())
                                        }
                                    };
                                    match &v454 {
                                        Spiral::US20::US20_0(
                                            v454_0_0,
                                            v454_0_1,
                                            v454_0_2,
                                            v454_0_3,
                                            v454_0_4,
                                        ) => {
                                            let v459: i32 = v454_0_4.clone();
                                            let v458: i32 = v454_0_3.clone();
                                            let v457: LrcPtr<StringBuilder> = v454_0_2.clone();
                                            let v456: string = v454_0_1.clone();
                                            let v624: Spiral::US19 = if string("") == (v456.clone())
                                            {
                                                Spiral::US19::US19_1(append(
                                                    string(
                                                        "parsing.p_char / unexpected end of input / ",
                                                    ),
                                                    (Spiral::method94(
                                                        '\"',
                                                        v457.clone(),
                                                        v458,
                                                        v459,
                                                    )),
                                                ))
                                            } else {
                                                let v470: char = getCharAt(v456.clone(), 0_i32);
                                                if (v470) == '\"' {
                                                    let v507: string = getSlice(
                                                        v456.clone(),
                                                        Some(1_i32),
                                                        Some((length(v456.clone())) - 1_i32),
                                                    );
                                                    let v513: string = ofChar(v470);
                                                    let patternInput_3: (
                                                        LrcPtr<StringBuilder>,
                                                        i32,
                                                        i32,
                                                    ) = Spiral::method96(
                                                        Spiral::method95(
                                                            length(v513.clone()) as i64,
                                                            v513,
                                                            0_i64,
                                                        ),
                                                        v457.clone(),
                                                        v458,
                                                        v459,
                                                    );
                                                    Spiral::US19::US19_0(
                                                        v470,
                                                        v507,
                                                        patternInput_3.0.clone(),
                                                        patternInput_3.1.clone(),
                                                        patternInput_3.2.clone(),
                                                    )
                                                } else {
                                                    let v530: i32 =
                                                        (indexOf(v456.clone(), string("\n")))
                                                            - 1_i32;
                                                    let v570: string = getSlice(
                                                        v456.clone(),
                                                        Some(0_i32),
                                                        Some(
                                                            (if -2_i32 == (v530) {
                                                                (length(v456.clone())) + 1_i32
                                                            } else {
                                                                (v530) + 1_i32
                                                            }) - 1_i32,
                                                        ),
                                                    );
                                                    Spiral::US19::US19_1(append(
                                                        (append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(
                                                                                    "parsing.p_char / ",
                                                                                ),
                                                                                (Spiral::method97(
                                                                                    '\"', v458,
                                                                                    v459,
                                                                                )),
                                                                            )),
                                                                            string("\n"),
                                                                        )),
                                                                        (toString(v457.clone())),
                                                                    )),
                                                                    (v570),
                                                                )),
                                                                string("\n"),
                                                            )),
                                                            (append(
                                                                ((Spiral::method98(
                                                                    (v459) - 1_i32,
                                                                    0_i32,
                                                                ))(
                                                                    string("")
                                                                )),
                                                                string("^"),
                                                            )),
                                                        )),
                                                        string("\n"),
                                                    ))
                                                }
                                            };
                                            match &v624 {
                                                Spiral::US19::US19_0(
                                                    v624_0_0,
                                                    v624_0_1,
                                                    v624_0_2,
                                                    v624_0_3,
                                                    v624_0_4,
                                                ) => Spiral::US20::US20_0(
                                                    v454_0_0.clone(),
                                                    v624_0_1.clone(),
                                                    v624_0_2.clone(),
                                                    v624_0_3.clone(),
                                                    v624_0_4.clone(),
                                                ),
                                                Spiral::US19::US19_1(v624_1_0) => {
                                                    Spiral::US20::US20_1(append(
                                                        string(
                                                            "parsing.between / expected closing delimiter / ",
                                                        ),
                                                        (Spiral::method106(
                                                            v624_1_0.clone(),
                                                            v1_1.get().clone(),
                                                            v2.get().clone(),
                                                            v3.get().clone(),
                                                            v4.get().clone(),
                                                            v416.clone(),
                                                            v417.clone(),
                                                            v418,
                                                            v419,
                                                            v456.clone(),
                                                            v457.clone(),
                                                            v458,
                                                            v459,
                                                        )),
                                                    ))
                                                }
                                            }
                                        }
                                        _ => Spiral::US20::US20_1(string(
                                            "parsing.between / expected content",
                                        )),
                                    }
                                }
                                Spiral::US19::US19_1(v414_1_0) => {
                                    Spiral::US20::US20_1(v414_1_0.clone())
                                }
                            };
                            match &v650 {
                                Spiral::US20::US20_0(
                                    v650_0_0,
                                    v650_0_1,
                                    v650_0_2,
                                    v650_0_3,
                                    v650_0_4,
                                ) => v650.clone(),
                                _ => {
                                    let v662: Spiral::US20 =
                                                     Spiral::method119(v1_1.get().clone(),
                                                                       v2.get().clone(),
                                                                       v3.get().clone(),
                                                                       v4.get().clone(),
                                                                       LrcPtr::new(Spiral::UH3::UH3_1(Func1::new(move
                                                                                                                     |arg10_0040:
                                                                                                                          (string,
                                                                                                                           LrcPtr<StringBuilder>,
                                                                                                                           i32,
                                                                                                                           i32)|
                                                                                                                     Spiral::closure36((),
                                                                                                                                       arg10_0040)),
                                                                                                      LrcPtr::new(Spiral::UH3::UH3_1(Func1::new(move
                                                                                                                                                    |arg10_0040_1:
                                                                                                                                                         (string,
                                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                                          i32,
                                                                                                                                                          i32)|
                                                                                                                                                    Spiral::closure37((),
                                                                                                                                                                      arg10_0040_1)),
                                                                                                                                     LrcPtr::new(Spiral::UH3::UH3_0))))));
                                    let v673: Spiral::US20 = match &v662 {
                                        Spiral::US20::US20_0(
                                            v662_0_0,
                                            v662_0_1,
                                            v662_0_2,
                                            v662_0_3,
                                            v662_0_4,
                                        ) => Spiral::US20::US20_0(
                                            string(""),
                                            v662_0_1.clone(),
                                            v662_0_2.clone(),
                                            v662_0_3.clone(),
                                            v662_0_4.clone(),
                                        ),
                                        Spiral::US20::US20_1(v662_1_0) => {
                                            Spiral::US20::US20_1(v662_1_0.clone())
                                        }
                                    };
                                    let v684: Spiral::US27 = match &v673 {
                                        Spiral::US20::US20_0(
                                            v673_0_0,
                                            v673_0_1,
                                            v673_0_2,
                                            v673_0_3,
                                            v673_0_4,
                                        ) => Spiral::method122(
                                            LrcPtr::new(Spiral::UH2::UH2_0),
                                            v673_0_1.clone(),
                                            v673_0_2.clone(),
                                            v673_0_3.clone(),
                                            v673_0_4.clone(),
                                        ),
                                        Spiral::US20::US20_1(v673_1_0) => {
                                            Spiral::US27::US27_1(v673_1_0.clone())
                                        }
                                    };
                                    match &v684 {
                                        Spiral::US27::US27_0(
                                            v684_0_0,
                                            v684_0_1,
                                            v684_0_2,
                                            v684_0_3,
                                            v684_0_4,
                                        ) => {
                                            let v691: List<string> = Spiral::method121(
                                                v684_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral::US20::US20_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v691 = v691.clone();
                                                        move || ofList(v691.clone()).clone()
                                                    }))),
                                                ),
                                                v684_0_1.clone(),
                                                v684_0_2.clone(),
                                                v684_0_3.clone(),
                                                v684_0_4.clone(),
                                            )
                                        }
                                        Spiral::US27::US27_1(v684_1_0) => {
                                            Spiral::US20::US20_1(v684_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v721 {
                        Spiral::US20::US20_0(v721_0_0, v721_0_1, v721_0_2, v721_0_3, v721_0_4) => {
                            let v726: i32 = v721_0_4.clone();
                            let v725: i32 = v721_0_3.clone();
                            let v724: LrcPtr<StringBuilder> = v721_0_2.clone();
                            let v723: string = v721_0_1.clone();
                            let v722: string = v721_0_0.clone();
                            let v728: i32 = Spiral::method110(v723.clone(), 0_i32);
                            let v772: Spiral::US22 = if 0_i32 == (v728) {
                                Spiral::US22::US22_1(string(
                                    "parsing.spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral::US22::US22_0(
                                    getSlice(
                                        v723.clone(),
                                        Some(v728),
                                        Some((length(v723.clone())) - 1_i32),
                                    ),
                                    v724.clone(),
                                    v725,
                                    v726,
                                )
                            };
                            match &v772 {
                                Spiral::US22::US22_0(v772_0_0, v772_0_1, v772_0_2, v772_0_3) => {
                                    let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(
                                        Spiral::UH2::UH2_1(v722.clone(), v0_1.get().clone()),
                                    );
                                    let v1_1_temp: string = v772_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v772_0_1.clone();
                                    let v3_temp: i32 = v772_0_2.clone();
                                    let v4_temp: i32 = v772_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method114;
                                }
                                _ => Spiral::US27::US27_0(
                                    Spiral::method120(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral::UH2::UH2_1(
                                            v722.clone(),
                                            LrcPtr::new(Spiral::UH2::UH2_0),
                                        )),
                                    ),
                                    v723.clone(),
                                    v724.clone(),
                                    v725,
                                    v726,
                                ),
                            }
                        }
                        _ => Spiral::US27::US27_0(
                            Spiral::method120(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method113(v0_1: string) -> Spiral::US26 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v22: Spiral::US27 = Spiral::method114(
                    LrcPtr::new(Spiral::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(Spiral::method93()),
                    1_i32,
                    1_i32,
                );
                match &v22 {
                    Spiral::US27::US27_0(v22_0_0, v22_0_1, v22_0_2, v22_0_3, v22_0_4) => {
                        Spiral::US26::US26_0(toArray(Spiral::method121(
                            v22_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral::US27::US27_1(v22_1_0) => Spiral::US26::US26_1(v22_1_0.clone()),
                }
            }
        }
        pub fn method124(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
            v9: bool,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("file_name"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v80: () = {
                Spiral::closure7(v11.clone(), v0_1, ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v118: () = {
                Spiral::closure7(v11.clone(), string("arguments"), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v11.clone(), v1_1, ());
                ()
            };
            let v169: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v188: () = {
                Spiral::closure7(v11.clone(), string("options"), ());
                ()
            };
            let v205: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v222: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v241: () = {
                Spiral::closure7(v11.clone(), string("command"), ());
                ()
            };
            let v258: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v275: () = {
                Spiral::closure7(v11.clone(), v2, ());
                ()
            };
            let v292: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v311: () = {
                Spiral::closure7(v11.clone(), string("cancellation_token"), ());
                ()
            };
            let v328: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v340: std::string::String = format!("{:#?}", v3);
            let v387: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v340),
                    (),
                );
                ()
            };
            let v404: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v423: () = {
                Spiral::closure7(v11.clone(), string("environment_variables"), ());
                ()
            };
            let v440: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v462: () = {
                Spiral::closure7(v11.clone(), sprintf!("{:?}", v4), ());
                ()
            };
            let v479: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v498: () = {
                Spiral::closure7(v11.clone(), string("on_line"), ());
                ()
            };
            let v515: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v527: std::string::String = format!("{:#?}", v5);
            let v574: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v527),
                    (),
                );
                ()
            };
            let v591: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v610: () = {
                Spiral::closure7(v11.clone(), string("stdin"), ());
                ()
            };
            let v627: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v639: std::string::String = format!("{:#?}", v6);
            let v686: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v639),
                    (),
                );
                ()
            };
            let v703: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v722: () = {
                Spiral::closure7(v11.clone(), string("trace"), ());
                ()
            };
            let v739: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v759: () = {
                Spiral::closure7(
                    v11.clone(),
                    if v7 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v776: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v795: () = {
                Spiral::closure7(v11.clone(), string("working_directory"), ());
                ()
            };
            let v812: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v824: std::string::String = format!("{:#?}", v8);
            let v871: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v824),
                    (),
                );
                ()
            };
            let v888: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v907: () = {
                Spiral::closure7(v11.clone(), string("stderr"), ());
                ()
            };
            let v924: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v944: () = {
                Spiral::closure7(
                    v11.clone(),
                    if v9 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v963: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v980: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            v11.l0.get().clone()
        }
        pub fn method123(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
            v17: bool,
        ) -> string {
            let v18: string = Spiral::method124(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options"),
                    )),
                    string(" / "),
                )),
                (v18),
            ))
        }
        pub fn closure38(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: string,
            v9: Vec<std::string::String>,
            unitVar: (),
        ) {
            fn v25() {
                Spiral::closure2((), ());
            }
            let v26: () = {
                v25();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v67: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v311: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v67,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v90: () = {
                    v25();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v118: Option<i64> = patternInput_1.5.clone();
                let v117: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v116: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v115: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v114: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v113: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v137: string = Spiral::method123(
                    v113.clone(),
                    v114.clone(),
                    v115.clone(),
                    v116.clone(),
                    v117.clone(),
                    v118.clone(),
                    Spiral::method7(v113, v114, v115, v116, v117, v118),
                    Spiral::method11(),
                    v8,
                    sprintf!("{:?}", v9),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                );
                let v153: () = {
                    v25();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v177: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v176: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v198: () = {
                    Spiral::closure8(v176.clone(), ());
                    ()
                };
                println!("{}", v137.clone());
                (v177.l0.get().clone())(v137);
                Spiral::US6::US6_0(
                    v176,
                    v177,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure39(
            unitVar: (),
            v0_1: Option<std::process::Child>,
        ) -> Option<std::process::Child> {
            v0_1
        }
        pub fn method125() -> Func1<Option<std::process::Child>, Option<std::process::Child>> {
            Func1::new(move |v: Option<std::process::Child>| Spiral::closure39((), v))
        }
        pub fn closure40(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral::US28 {
            Spiral::US28::US28_0(v0_1)
        }
        pub fn method126()
        -> Func1<std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>, Spiral::US28>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral::closure40((), v)
                },
            )
        }
        pub fn closure41(unitVar: (), v0_1: std::string::String) -> Spiral::US28 {
            Spiral::US28::US28_1(v0_1)
        }
        pub fn method127() -> Func1<std::string::String, Spiral::US28> {
            Func1::new(move |v: std::string::String| Spiral::closure41((), v))
        }
        pub fn method129(
            v0_1: std::string::String,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Option<CancellationToken>,
            v5: Array<(string, string)>,
            v6: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v7: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v8: bool,
            v9: Option<string>,
            v10: bool,
        ) -> string {
            let v12: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v26: () = {
                Spiral::closure7(v12.clone(), string("{ "), ());
                ()
            };
            let v45: () = {
                Spiral::closure7(v12.clone(), string("error"), ());
                ()
            };
            let v64: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v76: std::string::String = format!("{:#?}", v0_1);
            let v123: () = {
                Spiral::closure7(
                    v12.clone(),
                    fable_library_rust::String_::fromString(v76),
                    (),
                );
                ()
            };
            let v142: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v161: () = {
                Spiral::closure7(v12.clone(), string("file_name"), ());
                ()
            };
            let v178: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v195: () = {
                Spiral::closure7(v12.clone(), v1_1, ());
                ()
            };
            let v212: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v231: () = {
                Spiral::closure7(v12.clone(), string("arguments"), ());
                ()
            };
            let v248: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v265: () = {
                Spiral::closure7(v12.clone(), v2, ());
                ()
            };
            let v282: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v301: () = {
                Spiral::closure7(v12.clone(), string("options"), ());
                ()
            };
            let v318: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v335: () = {
                Spiral::closure7(v12.clone(), string("{ "), ());
                ()
            };
            let v354: () = {
                Spiral::closure7(v12.clone(), string("command"), ());
                ()
            };
            let v371: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v388: () = {
                Spiral::closure7(v12.clone(), v3, ());
                ()
            };
            let v405: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v424: () = {
                Spiral::closure7(v12.clone(), string("cancellation_token"), ());
                ()
            };
            let v441: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v453: std::string::String = format!("{:#?}", v4);
            let v500: () = {
                Spiral::closure7(
                    v12.clone(),
                    fable_library_rust::String_::fromString(v453),
                    (),
                );
                ()
            };
            let v517: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v536: () = {
                Spiral::closure7(v12.clone(), string("environment_variables"), ());
                ()
            };
            let v553: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v575: () = {
                Spiral::closure7(v12.clone(), sprintf!("{:?}", v5), ());
                ()
            };
            let v592: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v611: () = {
                Spiral::closure7(v12.clone(), string("on_line"), ());
                ()
            };
            let v628: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v640: std::string::String = format!("{:#?}", v6);
            let v687: () = {
                Spiral::closure7(
                    v12.clone(),
                    fable_library_rust::String_::fromString(v640),
                    (),
                );
                ()
            };
            let v704: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v723: () = {
                Spiral::closure7(v12.clone(), string("stdin"), ());
                ()
            };
            let v740: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v752: std::string::String = format!("{:#?}", v7);
            let v799: () = {
                Spiral::closure7(
                    v12.clone(),
                    fable_library_rust::String_::fromString(v752),
                    (),
                );
                ()
            };
            let v816: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v835: () = {
                Spiral::closure7(v12.clone(), string("trace"), ());
                ()
            };
            let v852: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v872: () = {
                Spiral::closure7(
                    v12.clone(),
                    if v8 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v889: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v908: () = {
                Spiral::closure7(v12.clone(), string("working_directory"), ());
                ()
            };
            let v925: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v937: std::string::String = format!("{:#?}", v9);
            let v984: () = {
                Spiral::closure7(
                    v12.clone(),
                    fable_library_rust::String_::fromString(v937),
                    (),
                );
                ()
            };
            let v1001: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v1020: () = {
                Spiral::closure7(v12.clone(), string("stderr"), ());
                ()
            };
            let v1037: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v1057: () = {
                Spiral::closure7(
                    v12.clone(),
                    if v10 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v1076: () = {
                Spiral::closure7(v12.clone(), string(" }"), ());
                ()
            };
            let v1093: () = {
                Spiral::closure7(v12.clone(), string(" }"), ());
                ()
            };
            v12.l0.get().clone()
        }
        pub fn method128(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: string,
            v10: string,
            v11: string,
            v12: Option<CancellationToken>,
            v13: Array<(string, string)>,
            v14: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v15: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v16: bool,
            v17: Option<string>,
            v18: bool,
        ) -> string {
            let v19: string =
                Spiral::method129(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options / child error"),
                    )),
                    string(" / "),
                )),
                (v19),
            ))
        }
        pub fn closure42(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: string,
            v9: Vec<std::string::String>,
            v10: std::string::String,
            unitVar: (),
        ) {
            fn v26() {
                Spiral::closure2((), ());
            }
            let v27: () = {
                v26();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v68: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v312: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v91: () = {
                    v26();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v119: Option<i64> = patternInput_1.5.clone();
                let v118: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v117: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v116: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v115: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v114: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v138: string = Spiral::method128(
                    v114.clone(),
                    v115.clone(),
                    v116.clone(),
                    v117.clone(),
                    v118.clone(),
                    v119.clone(),
                    Spiral::method7(v114, v115, v116, v117, v118, v119),
                    Spiral::method82(),
                    v10,
                    v8,
                    sprintf!("{:?}", v9),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                );
                let v154: () = {
                    v26();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v178: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v177: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v199: () = {
                    Spiral::closure8(v177.clone(), ());
                    ()
                };
                println!("{}", v138.clone());
                (v178.l0.get().clone())(v138);
                Spiral::US6::US6_0(
                    v177,
                    v178,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method130(
            v0_1: std::sync::MutexGuard<Option<std::process::Child>>,
        ) -> std::sync::MutexGuard<Option<std::process::Child>> {
            v0_1
        }
        pub fn closure43(
            unitVar: (),
            v0_1: Option<std::process::ChildStdin>,
        ) -> Option<std::process::ChildStdin> {
            v0_1
        }
        pub fn method131()
        -> Func1<Option<std::process::ChildStdin>, Option<std::process::ChildStdin>> {
            Func1::new(move |v: Option<std::process::ChildStdin>| Spiral::closure43((), v))
        }
        pub fn closure44(
            unitVar: (),
            v0_1: std::sync::mpsc::Sender<std::string::String>,
        ) -> std::sync::mpsc::Sender<std::string::String> {
            v0_1
        }
        pub fn method132() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral::closure44((), v)
            })
        }
        pub fn method133() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral::closure44((), v)
            })
        }
        pub fn closure45(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        ) -> std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>> {
            v0_1
        }
        pub fn method134() -> Func1<
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>| {
                    Spiral::closure45((), v)
                },
            )
        }
        pub fn closure46(unitVar: (), v0_1: std::string::String) -> Spiral::US30 {
            Spiral::US30::US30_0(v0_1)
        }
        pub fn method135() -> Func1<std::string::String, Spiral::US30> {
            Func1::new(move |v: std::string::String| Spiral::closure46((), v))
        }
        pub fn closure47(unitVar: (), v0_1: std::string::String) -> Spiral::US30 {
            Spiral::US30::US30_1(v0_1)
        }
        pub fn method136() -> Func1<std::string::String, Spiral::US30> {
            Func1::new(move |v: std::string::String| Spiral::closure47((), v))
        }
        pub fn method138(v0_1: bool, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("trace\'"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(
                    v3.clone(),
                    if v0_1 {
                        string("true")
                    } else {
                        string("false")
                    },
                    (),
                );
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string("e"), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v142: std::string::String = format!("{:#?}", v1_1);
            let v189: () = {
                Spiral::closure7(
                    v3.clone(),
                    fable_library_rust::String_::fromString(v142),
                    (),
                );
                ()
            };
            let v208: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method137(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral::method138(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.stdio_line"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure48(v0_1: bool, v1_1: std::string::String, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method137(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method82(),
                    v0_1,
                    v1_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method140() -> string {
            let v1_1: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            v1_1.l0.get().clone()
        }
        pub fn method139(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method140();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        (v8),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure49(v0_1: string, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                0_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = if (v0_1.clone()) == string("") {
                    string("")
                } else {
                    Spiral::method139(
                        v104.clone(),
                        v105.clone(),
                        v106.clone(),
                        v107.clone(),
                        v108.clone(),
                        v109.clone(),
                        Spiral::method7(v104, v105, v106, v107, v108, v109),
                        Spiral::method85(),
                        v0_1,
                    )
                };
                let v143: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure50(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method141()
        -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral::closure50((), v)
            })
        }
        pub fn method142(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure51(
            unitVar: (),
            v0_1: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
        ) -> Spiral::US31 {
            Spiral::US31::US31_0(v0_1)
        }
        pub fn method143() -> Func1<
            Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
            Spiral::US31,
        > {
            Func1::new(
                move |v: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>| {
                    Spiral::closure51((), v)
                },
            )
        }
        pub fn method144(
            v0_1: std::sync::MutexGuard<Option<std::process::ChildStdin>>,
        ) -> std::sync::MutexGuard<Option<std::process::ChildStdin>> {
            v0_1
        }
        pub fn closure52(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> Spiral::US32 {
            Spiral::US32::US32_0(v0_1)
        }
        pub fn method145()
        -> Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, Spiral::US32> {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>| {
                    Spiral::closure52((), v)
                },
            )
        }
        pub fn method146(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn closure53(unitVar: (), v0_1: std::process::Output) -> Spiral::US33 {
            Spiral::US33::US33_0(v0_1)
        }
        pub fn method147() -> Func1<std::process::Output, Spiral::US33> {
            Func1::new(move |v: std::process::Output| Spiral::closure53((), v))
        }
        pub fn closure54(unitVar: (), v0_1: std::string::String) -> Spiral::US33 {
            Spiral::US33::US33_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Spiral::US33> {
            Func1::new(move |v: std::string::String| Spiral::closure54((), v))
        }
        pub fn method149(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: string,
            v10: string,
            v11: string,
            v12: Option<CancellationToken>,
            v13: Array<(string, string)>,
            v14: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v15: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v16: bool,
            v17: Option<string>,
            v18: bool,
        ) -> string {
            let v19: string =
                Spiral::method129(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options / output error"),
                    )),
                    string(" / "),
                )),
                (v19),
            ))
        }
        pub fn closure55(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: string,
            v9: Vec<std::string::String>,
            v10: std::string::String,
            unitVar: (),
        ) {
            fn v26() {
                Spiral::closure2((), ());
            }
            let v27: () = {
                v26();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v68: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v312: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v91: () = {
                    v26();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v119: Option<i64> = patternInput_1.5.clone();
                let v118: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v117: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v116: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v115: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v114: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v138: string = Spiral::method149(
                    v114.clone(),
                    v115.clone(),
                    v116.clone(),
                    v117.clone(),
                    v118.clone(),
                    v119.clone(),
                    Spiral::method7(v114, v115, v116, v117, v118, v119),
                    Spiral::method82(),
                    v10,
                    v8,
                    sprintf!("{:?}", v9),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                );
                let v154: () = {
                    v26();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v178: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v177: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v199: () = {
                    Spiral::closure8(v177.clone(), ());
                    ()
                };
                println!("{}", v138.clone());
                (v178.l0.get().clone())(v138);
                Spiral::US6::US6_0(
                    v177,
                    v178,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure56(unitVar: (), v0_1: i32) -> Spiral::US34 {
            Spiral::US34::US34_0(v0_1)
        }
        pub fn method150() -> Func1<i32, Spiral::US34> {
            Func1::new(move |v: i32| Spiral::closure56((), v))
        }
        pub fn method152(v0_1: string, v1_1: i32, v2: i32) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v4.clone(), string("file_name"), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v73: () = {
                Spiral::closure7(v4.clone(), v0_1, ());
                ()
            };
            let v92: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v111: () = {
                Spiral::closure7(v4.clone(), string("exit_code"), ());
                ()
            };
            let v128: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v148: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v184: () = {
                Spiral::closure7(v4.clone(), string("std_trace_length"), ());
                ()
            };
            let v201: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v221: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v240: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method151(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: i32,
            v10: i32,
        ) -> string {
            let v11: string = Spiral::method152(v8, v9, v10);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options / result"),
                    )),
                    string(" / "),
                )),
                (v11),
            ))
        }
        pub fn closure57(v0_1: string, v1_1: i32, v2: string, unitVar: ()) {
            fn v18() {
                Spiral::closure2((), ());
            }
            let v19: () = {
                v18();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v60: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                0_i32
                    >= (find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v83: () = {
                    v18();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v111: Option<i64> = patternInput_1.5.clone();
                let v110: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v109: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v108: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v107: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v106: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method151(
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    Spiral::method7(v106, v107, v108, v109, v110, v111),
                    Spiral::method85(),
                    v0_1,
                    v1_1,
                    length(v2),
                );
                let v143: () = {
                    v18();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method90(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
        ) -> (i32, string) {
            let v9: Spiral::US18 = Spiral::method92(Spiral::method91(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
                v7,
            ));
            let patternInput: (string, Spiral::US5) = match &v9 {
                Spiral::US18::US18_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral::US18::US18_1(v9_1_0) => panic!(
                    "{}",
                    concat(new_array(&[
                        string("resultm.get / Error x: "),
                        v9_1_0.clone()
                    ])),
                ),
            };
            let v22: Spiral::US5 = patternInput.1.clone();
            let v21: string = patternInput.0.clone();
            let v27: Spiral::US26 = Spiral::method113(match &v22 {
                Spiral::US5::US5_0(v22_0_0) => match &v22 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            });
            let v36: Array<string> = match &v27 {
                Spiral::US26::US26_0(v27_0_0) => v27_0_0.clone(),
                Spiral::US26::US26_1(v27_1_0) => panic!(
                    "{}",
                    concat(new_array(&[
                        string("resultm.get / Error x: "),
                        v27_1_0.clone()
                    ])),
                ),
            };
            let v38: Vec<string> = v36.to_vec();
            let v40: bool = true;
            let _vec_map: Vec<_> = v38
                .into_iter()
                .map(|x| {
                    //;
                    let v42: string = x;
                    let v49: &str = &*v42;
                    let v85: std::string::String = String::from(v49);
                    let v116: bool = true;
                    v85
                })
                .collect::<Vec<_>>();
            let v118: Vec<std::string::String> = _vec_map;
            let v436: () = {
                Spiral::closure38(
                    v0_1.clone(),
                    v1_1.clone(),
                    v2.clone(),
                    v3.clone(),
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v7,
                    v21.clone(),
                    v118.clone(),
                    (),
                );
                ()
            };
            let _capture_v756: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_5: LrcPtr<(i32, string)> = (Func0::new({
                    let v0_1 = v0_1.clone();
                    let v118 = v118.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v21 = v21.clone();
                    let v3 = v3.clone();
                    let v4 = v4.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    let v7 = v7.clone();
                    move || {
                        let v758: std::process::Command = std::process::Command::new(&*v21.clone());
                        let v760: bool = true;
                        let mut v758 = v758;
                        let v762: bool = true;
                        std::process::Command::args(&mut v758, &*v118.clone());
                        let v764: std::process::Command = v758;
                        let v766: std::process::Stdio = std::process::Stdio::piped();
                        let v768: bool = true;
                        let mut v764 = v764;
                        let v770: bool = true;
                        std::process::Command::stdout(&mut v764, std::process::Stdio::piped());
                        let v772: std::process::Command = v764;
                        let v774: std::process::Stdio = std::process::Stdio::piped();
                        let v776: bool = true;
                        let mut v772 = v772;
                        let v778: bool = true;
                        std::process::Command::stderr(&mut v772, std::process::Stdio::piped());
                        let v780: std::process::Command = v772;
                        let v782: std::process::Stdio = std::process::Stdio::piped();
                        let v784: bool = true;
                        let mut v780 = v780;
                        let v786: bool = true;
                        std::process::Command::stdin(&mut v780, std::process::Stdio::piped());
                        let v788: std::process::Command = v780;
                        let v813: Spiral::US5 =
                            defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6.clone()));
                        let v829: std::process::Command = match &v813 {
                            Spiral::US5::US5_0(v813_0_0) => {
                                let v819: bool = true;
                                let mut v788 = v788;
                                let v821: bool = true;
                                std::process::Command::current_dir(
                                    &mut v788,
                                    &*match &v813 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                );
                                v788
                            }
                            _ => {
                                let v825: std::process::Command = v788;
                                v825
                            }
                        };
                        let v851: std::process::Command = if (get_Count(v2.clone()) as u64) == 0_u64
                        {
                            v829
                        } else {
                            let v833: Vec<(string, string)> = v2.clone().to_vec();
                            let v835: bool = true;
                            let _vec_fold_ = v833.into_iter().fold(v829, |acc, x| {
                                //;
                                let v837: std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v842: bool = true;
                                let mut v837 = v837;
                                let v844: bool = true;
                                std::process::Command::env(
                                    &mut v837,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v846: std::process::Command = v837;
                                let v848: bool = true;
                                v846
                            });
                            _vec_fold_
                        };
                        let v853: bool = true;
                        let mut v851 = v851;
                        let v855: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(&mut v851);
                        let v856 = Spiral::method79();
                        let v860: Result<std::process::Child, std::string::String> =
                            v855.map_err(|x| v856(x));
                        let v872 = Spiral::method125();
                        let v874: bool = true;
                        let _result_map_ = v860.map(|x| {
                            //;
                            let v881: Option<std::process::Child> = v872(Some(x));
                            let v883: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(v881);
                            let v885: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v883);
                            let v887: bool = true;
                            v885
                        });
                        let v889: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v890 = Spiral::method126();
                        let v891 = Spiral::method127();
                        let v893: Spiral::US28 = match v889 {
                            Ok(x) => v890(x),
                            Err(e) => v891(e),
                        };
                        let patternInput_3: (i32, Spiral::US8, Spiral::US29) = match &v893 {
                            Spiral::US28::US28_0(v893_0_0) => {
                                let v894: std::sync::Arc<
                                    std::sync::Mutex<Option<std::process::Child>>,
                                > = v893_0_0.clone();
                                let v896: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v898: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v894.clone();
                                    let v900: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v898.lock();
                                    let v916: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method130(v900.unwrap());
                                    let v918: bool = true;
                                    let mut v916 = v916;
                                    let v920: &mut Option<std::process::Child> = &mut v916;
                                    let v922: Option<&mut std::process::Child> = v920.as_mut();
                                    let v924: &mut std::process::Child = v922.unwrap();
                                    let v926: &mut Option<std::process::ChildStdout> =
                                        &mut v924.stdout;
                                    let v928: Option<std::process::ChildStdout> =
                                        Option::take(v926);
                                    let v930: std::process::ChildStdout = v928.unwrap();
                                    let v932: bool = true;
                                    v930
                                })();
                                let v934: std::process::ChildStdout = _capture;
                                let v936: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v938: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v894.clone();
                                    let v940: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v938.lock();
                                    let v956: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method130(v940.unwrap());
                                    let v958: bool = true;
                                    let mut v956 = v956;
                                    let v960: &mut Option<std::process::Child> = &mut v956;
                                    let v962: Option<&mut std::process::Child> = v960.as_mut();
                                    let v964: &mut std::process::Child = v962.unwrap();
                                    let v966: &mut Option<std::process::ChildStderr> =
                                        &mut v964.stderr;
                                    let v968: Option<std::process::ChildStderr> =
                                        Option::take(v966);
                                    let v970: std::process::ChildStderr = v968.unwrap();
                                    let v972: bool = true;
                                    v970
                                })();
                                let v974: std::process::ChildStderr = _capture;
                                let v976: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v978: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v894.clone();
                                    let v980: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v978.lock();
                                    let v996: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method130(v980.unwrap());
                                    let v998: bool = true;
                                    let mut v996 = v996;
                                    let v1000: &mut Option<std::process::Child> = &mut v996;
                                    let v1002: Option<&mut std::process::Child> = v1000.as_mut();
                                    let v1004: &mut std::process::Child = v1002.unwrap();
                                    let v1006: &mut Option<std::process::ChildStdin> =
                                        &mut v1004.stdin;
                                    let v1008: Option<std::process::ChildStdin> =
                                        Option::take(v1006);
                                    let v1010: std::process::ChildStdin = v1008.unwrap();
                                    let v1016: Option<std::process::ChildStdin> =
                                        (Spiral::method131())(Some(v1010));
                                    let v1018: std::sync::Mutex<Option<std::process::ChildStdin>> =
                                        std::sync::Mutex::new(v1016);
                                    let v1020: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = std::sync::Arc::new(v1018);
                                    let v1022: bool = true;
                                    v1020
                                })();
                                let v1024: std::sync::Arc<
                                    std::sync::Mutex<Option<std::process::ChildStdin>>,
                                > = _capture;
                                let patternInput_2: (
                                    std::sync::mpsc::Sender<std::string::String>,
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                ) = {
                                    let (sender, receiver) = std::sync::mpsc::channel();
                                    (sender, std::sync::Arc::new(receiver))
                                };
                                let v1026: std::sync::mpsc::Sender<std::string::String> =
                                    patternInput_2.0.clone();
                                let v1029: std::sync::mpsc::Sender<std::string::String> =
                                    (Spiral::method132())(v1026.clone());
                                let v1031: std::sync::Mutex<
                                    std::sync::mpsc::Sender<std::string::String>,
                                > = std::sync::Mutex::new(v1029);
                                let v1033: std::sync::Arc<
                                    std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>,
                                > = std::sync::Arc::new(v1031);
                                let v1035: std::sync::mpsc::Sender<std::string::String> =
                                    (Spiral::method133())(v1026);
                                let v1037: std::sync::Mutex<
                                    std::sync::mpsc::Sender<std::string::String>,
                                > = std::sync::Mutex::new(v1035);
                                let v1039: std::sync::Arc<
                                    std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>,
                                > = std::sync::Arc::new(v1037);
                                let v1041: std::sync::Arc<
                                    std::sync::mpsc::Receiver<std::string::String>,
                                > = (Spiral::method134())(patternInput_2.1.clone());
                                let v1043: std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                > = std::sync::Mutex::new(v1041);
                                let v1045: std::sync::Arc<
                                    std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                > = std::sync::Arc::new(v1043);
                                let v1047: bool = true;
                                let __spawn = std::thread::spawn(move || {
                                    //;
                                    let v1049: encoding_rs_io::DecodeReaderBytes<
                                        std::process::ChildStdout,
                                        Vec<u8>,
                                    > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                        .utf8_passthru(true)
                                        .build(v934);
                                    let v1051: std::io::BufReader<
                                        encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        >,
                                    > = std::io::BufReader::new(v1049);
                                    let v1053: std::io::Lines<
                                        std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        >,
                                    > = std::io::BufRead::lines(v1051);
                                    let v1055: bool = true;
                                    let mut v1053 = v1053;
                                    let _iter_try_for_each = v1053.try_for_each(|x| {
                                        //;
                                        let v1057: Result<std::string::String, std::io::Error> = x;
                                        let v1059: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v1033.clone();
                                        let v1060 = Spiral::method79();
                                        let v1064: Result<
                                            std::string::String,
                                            std::string::String,
                                        > = v1057.map_err(|x| v1060(x));
                                        let v1076 = Spiral::method135();
                                        let v1077 = Spiral::method136();
                                        let v1079: Spiral::US30 = match v1064 {
                                            Ok(x) => v1076(x),
                                            Err(e) => v1077(e),
                                        };
                                        let v2487: std::string::String = match &v1079 {
                                            Spiral::US30::US30_0(v1079_0_0) => {
                                                let v1082: string =
                                                    fable_library_rust::String_::fromString(
                                                        v1079_0_0.clone(),
                                                    );
                                                let v1084: &encoding_rs::Encoding =
                                                    encoding_rs::UTF_8;
                                                let v1086: std::borrow::Cow<[u8]> =
                                                    v1084.encode(&*v1082).0;
                                                let v1088: &[u8] = v1086.as_ref();
                                                let v1090: Result<&str, std::str::Utf8Error> =
                                                    std::str::from_utf8(v1088);
                                                let v1094: &str = v1090.unwrap();
                                                let v1133: std::string::String =
                                                    String::from(v1094);
                                                let v1144: string = concat(new_array(&[
                                                    string("> "),
                                                    fable_library_rust::String_::fromString(
                                                        v1133.clone(),
                                                    ),
                                                ]));
                                                if v5 {
                                                    let v1461: () = {
                                                        Spiral::closure49(v1144.clone(), ());
                                                        ()
                                                    };
                                                    ()
                                                } else {
                                                    let v1782: () = {
                                                        Spiral::closure10(v1144, ());
                                                        ()
                                                    };
                                                    ()
                                                }
                                                v1133
                                            }
                                            Spiral::US30::US30_1(v1079_1_0) => {
                                                let v1784: std::string::String = v1079_1_0.clone();
                                                let v2098: () = {
                                                    Spiral::closure48(v5, v1784.clone(), ());
                                                    ()
                                                };
                                                let v2413: string =
                                                    sprintf!("\u{001b}[4;7m{}\u{001b}[0m", v1784);
                                                let v2420: &str = &*v2413;
                                                String::from(v2420)
                                            }
                                        };
                                        let v2489: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v1059;
                                        let v2491: Result<
                                            std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            >,
                                        > = v2489.lock();
                                        let v2495: std::sync::MutexGuard<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = v2491.unwrap();
                                        let v2508: &std::sync::mpsc::Sender<std::string::String> =
                                            &v2495;
                                        let v2510: Result<
                                            (),
                                            std::sync::mpsc::SendError<std::string::String>,
                                        > = v2508.send(v2487);
                                        let v2511 = Spiral::method141();
                                        let v2515: Result<(), std::string::String> =
                                            v2510.map_err(|x| v2511(x));
                                        let v2528: _ = v2515;
                                        let v2530: bool = true;
                                        v2528
                                    }); //;
                                    let v2533: Result<(), string> =
                                        Spiral::method142(_iter_try_for_each.map_err(|x| x.into()));
                                    let v2536: string = string("}");
                                    let v2541: bool = true;
                                    let _fix_closure_v2538 = v2533;
                                    let v2547: string = append(
                                        (append(
                                            (append(
                                                (append(
                                                    string("true; _fix_closure_v2538 "),
                                                    (v2536),
                                                )),
                                                string("); "),
                                            )),
                                            string(""),
                                        )),
                                        string(" // rust.fix_closure\'"),
                                    );
                                    let v2548: bool = true;
                                    _fix_closure_v2538
                                }); // rust.fix_closure';
                                let v2550: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                let v2552: bool = true;
                                let __spawn = std::thread::spawn(move || {
                                    //;
                                    let v2554: encoding_rs_io::DecodeReaderBytes<
                                        std::process::ChildStderr,
                                        Vec<u8>,
                                    > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                        .utf8_passthru(true)
                                        .build(v974);
                                    let v2556: std::io::BufReader<
                                        encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        >,
                                    > = std::io::BufReader::new(v2554);
                                    let v2558: std::io::Lines<
                                        std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        >,
                                    > = std::io::BufRead::lines(v2556);
                                    let v2560: bool = true;
                                    let mut v2558 = v2558;
                                    let _iter_try_for_each = v2558.try_for_each(|x| {
                                        //;
                                        let v2562: Result<std::string::String, std::io::Error> = x;
                                        let v4100: Result<(), std::string::String> = if (v7)
                                            == false
                                        {
                                            Ok::<(), std::string::String>(())
                                        } else {
                                            let v2569: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v1039.clone();
                                            let v2570 = Spiral::method79();
                                            let v2574: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v2562.map_err(|x| v2570(x));
                                            let v2586 = Spiral::method135();
                                            let v2587 = Spiral::method136();
                                            let v2589: Spiral::US30 = match v2574 {
                                                Ok(x) => v2586(x),
                                                Err(e) => v2587(e),
                                            };
                                            let v4060: std::string::String = match &v2589 {
                                                Spiral::US30::US30_0(v2589_0_0) => {
                                                    let v2592: string =
                                                        fable_library_rust::String_::fromString(
                                                            v2589_0_0.clone(),
                                                        );
                                                    let v2594: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v2596: std::borrow::Cow<[u8]> =
                                                        v2594.encode(&*v2592).0;
                                                    let v2598: &[u8] = v2596.as_ref();
                                                    let v2600: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v2598);
                                                    let v2604: &str = v2600.unwrap();
                                                    let v2643: std::string::String =
                                                        String::from(v2604);
                                                    let v2654: string = concat(new_array(&[
                                                        string("! "),
                                                        fable_library_rust::String_::fromString(
                                                            v2643.clone(),
                                                        ),
                                                    ]));
                                                    if v5 {
                                                        let v2968: () = {
                                                            Spiral::closure49(v2654.clone(), ());
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v3286: () = {
                                                            Spiral::closure10(v2654, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    {
                                                        let v3288: string = sprintf!(
                                                            "\u{001b}[4;7m{}\u{001b}[0m",
                                                            v2643
                                                        );
                                                        let v3295: &str = &*v3288;
                                                        String::from(v3295)
                                                    }
                                                }
                                                Spiral::US30::US30_1(v2589_1_0) => {
                                                    let v3361: std::string::String =
                                                        v2589_1_0.clone();
                                                    let v3673: () = {
                                                        Spiral::closure48(v5, v3361.clone(), ());
                                                        ()
                                                    };
                                                    let v3986: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v3361
                                                    );
                                                    let v3993: &str = &*v3986;
                                                    String::from(v3993)
                                                }
                                            };
                                            let v4062: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v2569;
                                            let v4064: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v4062.lock();
                                            let v4068: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v4064.unwrap();
                                            let v4081: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v4068;
                                            let v4083: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v4081.send(v4060);
                                            let v4084 = Spiral::method141();
                                            v4083.map_err(|x| v4084(x))
                                        };
                                        let v4102: _ = v4100;
                                        let v4104: bool = true;
                                        v4102
                                    }); //;
                                    let v4107: Result<(), string> =
                                        Spiral::method142(_iter_try_for_each.map_err(|x| x.into()));
                                    let v4108: string = string("}");
                                    let v4113: bool = true;
                                    let _fix_closure_v4110 = v4107;
                                    let v4119: string = append(
                                        (append(
                                            (append(
                                                (append(
                                                    string("true; _fix_closure_v4110 "),
                                                    (v4108),
                                                )),
                                                string("); "),
                                            )),
                                            string(""),
                                        )),
                                        string(" // rust.fix_closure\'"),
                                    );
                                    let v4120: bool = true;
                                    _fix_closure_v4110
                                }); // rust.fix_closure';
                                let v4122: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                let v4147: Spiral::US31 = defaultValue(
                                    Spiral::US31::US31_1,
                                    map(Spiral::method143(), v4.clone()),
                                );
                                match &v4147 {
                                    Spiral::US31::US31_0(v4147_0_0) => {
                                        let v4153: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = v1024.clone();
                                        let v4155: Result<
                                            std::sync::MutexGuard<Option<std::process::ChildStdin>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                            >,
                                        > = v4153.lock();
                                        let v4171: std::sync::MutexGuard<
                                            Option<std::process::ChildStdin>,
                                        > = Spiral::method144(v4155.unwrap());
                                        let v4173: bool = true;
                                        let mut v4171 = v4171;
                                        let v4175: &mut Option<std::process::ChildStdin> =
                                            &mut v4171;
                                        let v4177: Option<std::process::ChildStdin> =
                                            Option::take(v4175);
                                        let v4179: bool = true;
                                        let _optionm_map_ = v4177.map(|x| {
                                            //;
                                            let v4181: std::process::ChildStdin = x;
                                            let v4183: std::sync::Mutex<std::process::ChildStdin> =
                                                std::sync::Mutex::new(v4181);
                                            let v4185: std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            > = std::sync::Arc::new(v4183);
                                            let v4187: bool = true;
                                            v4185
                                        });
                                        let v4189: Option<
                                            std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            >,
                                        > = _optionm_map_;
                                        let v4214: Spiral::US32 = defaultValue(
                                            Spiral::US32::US32_1,
                                            map(Spiral::method145(), v4189),
                                        );
                                        match &v4214 {
                                            Spiral::US32::US32_0(v4214_0_0) => {
                                                let v4218: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = match &v4214 {
                                                    Spiral::US32::US32_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone();
                                                (match &v4147 {
                                                    Spiral::US31::US31_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })(
                                                    v4218.clone()
                                                );
                                                {
                                                    let v4220: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = v4218;
                                                    let v4222: Result<
                                                        std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        >,
                                                        std::sync::PoisonError<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                        >,
                                                    > = v4220.lock();
                                                    let v4238: std::sync::MutexGuard<
                                                        std::process::ChildStdin,
                                                    > = Spiral::method146(v4222.unwrap());
                                                    let v4240: bool = true;
                                                    let mut v4238 = v4238;
                                                    let v4242: bool = true;
                                                    std::io::Write::flush(&mut *v4238).unwrap();
                                                    ()
                                                }
                                            }
                                            _ => (),
                                        }
                                    }
                                    _ => (),
                                }
                                {
                                    let v4244: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v894;
                                    let v4246: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v4244.lock();
                                    let v4262: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method130(v4246.unwrap());
                                    let v4264: bool = true;
                                    let mut v4262 = v4262;
                                    let v4266: &mut Option<std::process::Child> = &mut v4262;
                                    let v4268: Option<std::process::Child> = Option::take(v4266);
                                    let v4270: std::process::Child = v4268.unwrap();
                                    let v4272: Result<std::process::Output, std::io::Error> =
                                        v4270.wait_with_output();
                                    let v4273 = Spiral::method79();
                                    let v4286: Result<std::process::Output, std::string::String> =
                                        v4272.map_err(|x| v4273(x));
                                    let v4296: string = string("vec![v2550, v4122]");
                                    let v4297: Vec<std::thread::JoinHandle<Result<(), string>>> =
                                        vec![v2550, v4122];
                                    let v4299: bool = true;
                                    v4297.into_iter().for_each(|x| {
                                        //;
                                        let v4301: std::thread::JoinHandle<Result<(), string>> = x;
                                        let v4303: Result<
                                            Result<(), string>,
                                            Box<dyn core::any::Any + 'static + Send>,
                                        > = std::thread::JoinHandle::join(v4301);
                                        let v4307: Result<(), string> = v4303.unwrap();
                                        v4307.unwrap();
                                        {
                                            let v4324: bool = true;
                                            let v4326: bool = true;
                                        }
                                    });
                                    {
                                        //;
                                        let v4327 = Spiral::method147();
                                        let v4328 = Spiral::method148();
                                        let v4330: Spiral::US33 = match &v4286 {
                                            Err(v4286_1_0) => v4328(v4286_1_0.clone()),
                                            Ok(v4286_0_0) => v4327(v4286_0_0.clone()),
                                        };
                                        match &v4330 {
                                            Spiral::US33::US33_0(v4330_0_0) => {
                                                let v4333: std::process::Output = v4330_0_0.clone();
                                                let v4335: std::process::ExitStatus =
                                                    v4333.clone().status;
                                                let v4337: Option<i32> = v4335.code();
                                                let v4362: Spiral::US34 = defaultValue(
                                                    Spiral::US34::US34_1,
                                                    map(Spiral::method150(), v4337),
                                                );
                                                match &v4362 {
                                                    Spiral::US34::US34_0(v4362_0_0) => {
                                                        let v4369: Vec<u8> =
                                                            Spiral::method24(v4333.clone().stdout);
                                                        let v4371: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v4369);
                                                        let v4375: std::string::String =
                                                            v4371.unwrap();
                                                        let v4389: Vec<u8> =
                                                            Spiral::method24(v4333.clone().stderr);
                                                        let v4391: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v4389);
                                                        let v4395: std::string::String =
                                                            v4391.unwrap();
                                                        let v4411: string = trim(
                                                            fable_library_rust::String_::fromString(
                                                                v4395,
                                                            ),
                                                        );
                                                        let v4418: string = trim(
                                                            fable_library_rust::String_::fromString(
                                                                v4375,
                                                            ),
                                                        );
                                                        let v4427: LrcPtr<Spiral::UH2> =
                                                            if ((length(v4411.clone())) == 0_i32)
                                                                == false
                                                            {
                                                                LrcPtr::new(Spiral::UH2::UH2_1(
                                                                    v4411,
                                                                    LrcPtr::new(Spiral::UH2::UH2_0),
                                                                ))
                                                            } else {
                                                                LrcPtr::new(Spiral::UH2::UH2_0)
                                                            };
                                                        let v4434: List<string> = Spiral::method121(
                                                            if ((length(v4418.clone())) == 0_i32)
                                                                == false
                                                            {
                                                                LrcPtr::new(Spiral::UH2::UH2_1(
                                                                    v4418,
                                                                    v4427.clone(),
                                                                ))
                                                            } else {
                                                                v4427
                                                            },
                                                            empty::<string>(),
                                                        );
                                                        let _let__v4439: LrcPtr<
                                                            dyn IEnumerable_1<string>,
                                                        > = delay(Func0::new({
                                                            let v4434 = v4434.clone();
                                                            move || ofList(v4434.clone()).clone()
                                                        }));
                                                        let v4453: string = join(
                                                            Spiral::method75(),
                                                            toArray_1(_let__v4439),
                                                        );
                                                        let v4463: &str = &*v4453;
                                                        (
                                                            match &v4362 {
                                                                Spiral::US34::US34_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            Spiral::US8::US8_0(String::from(v4463)),
                                                            Spiral::US29::US29_0(v1045.clone()),
                                                        )
                                                    }
                                                    _ => {
                                                        let v4538: &str = &*string(
                                                            "runtime.execute_with_options / exit_code=None",
                                                        );
                                                        (
                                                            -1_i32,
                                                            Spiral::US8::US8_0(String::from(v4538)),
                                                            Spiral::US29::US29_0(v1045.clone()),
                                                        )
                                                    }
                                                }
                                            }
                                            Spiral::US33::US33_1(v4330_1_0) => {
                                                let v4612: std::string::String = v4330_1_0.clone();
                                                let v4928: () = {
                                                    Spiral::closure55(
                                                        v0_1.clone(),
                                                        v1_1.clone(),
                                                        v2.clone(),
                                                        v3.clone(),
                                                        v4.clone(),
                                                        v5,
                                                        v6.clone(),
                                                        v7,
                                                        v21.clone(),
                                                        v118.clone(),
                                                        v4612.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                (
                                                    -2_i32,
                                                    Spiral::US8::US8_0(v4612),
                                                    Spiral::US29::US29_1,
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                            Spiral::US28::US28_1(v893_1_0) => {
                                let v5253: std::string::String = v893_1_0.clone();
                                let v5571: () = {
                                    Spiral::closure42(
                                        v0_1.clone(),
                                        v1_1.clone(),
                                        v2.clone(),
                                        v3.clone(),
                                        v4.clone(),
                                        v5,
                                        v6.clone(),
                                        v7,
                                        v21.clone(),
                                        v118.clone(),
                                        v5253.clone(),
                                        (),
                                    );
                                    ()
                                };
                                (-1_i32, Spiral::US8::US8_0(v5253), Spiral::US29::US29_1)
                            }
                        };
                        let v5897: Spiral::US29 = patternInput_3.2.clone();
                        let v5896: Spiral::US8 = patternInput_3.1.clone();
                        let v5895: i32 = patternInput_3.0.clone();
                        let v5908: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v5897 {
                            Spiral::US29::US29_0(v5897_0_0) => Some(
                                match &v5897 {
                                    Spiral::US29::US29_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v5910: bool = true;
                        let _optionm_map_ = v5908.map(|x| {
                            //;
                            let v5912: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v5914: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v5912;
                            let v5916: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v5914.lock();
                            let v5920: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v5916.unwrap();
                            let v5933 = v5920.iter();
                            let v5935: Vec<std::string::String> = v5933.collect::<Vec<_>>();
                            let v5937: bool = true;
                            let _vec_map: Vec<_> = v5935
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v5939: std::string::String = x;
                                    let v5941: string =
                                        fable_library_rust::String_::fromString(v5939);
                                    let v5943: bool = true;
                                    v5941
                                })
                                .collect::<Vec<_>>();
                            let v5945: Vec<string> = _vec_map;
                            let v5949: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(
                                fable_library_rust::NativeArray_::array_from(v5945.clone()),
                            );
                            let v5957: string = join(Spiral::method75(), toArray_1(v5949));
                            let v5962: bool = true;
                            v5957
                        });
                        let v5964: Option<string> = _optionm_map_;
                        let v5989: Spiral::US5 =
                            defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5964));
                        let v6007: Spiral::US35 = match &v5989 {
                            Spiral::US5::US5_0(v5989_0_0) => {
                                let v5996: string = trim(
                                    match &v5989 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                );
                                Spiral::US35::US35_0(if (length(v5996.clone())) == 0_i32 {
                                    Spiral::US5::US5_1
                                } else {
                                    Spiral::US5::US5_0(v5996)
                                })
                            }
                            _ => Spiral::US35::US35_1,
                        };
                        let v6014: Spiral::US5 = if let Spiral::US35::US35_0(v6007_0_0) = &v6007 {
                            let v6008: Spiral::US5 = v6007_0_0.clone();
                            if let Spiral::US5::US5_0(v6008_0_0) = &v6008 {
                                Spiral::US5::US5_0(v6008_0_0.clone())
                            } else {
                                Spiral::US5::US5_1
                            }
                        } else {
                            Spiral::US5::US5_1
                        };
                        let v6021: Spiral::US5 = match &v5896 {
                            Spiral::US8::US8_0(v5896_0_0) => {
                                Spiral::US5::US5_0(fable_library_rust::String_::fromString(
                                    match &v5896 {
                                        Spiral::US8::US8_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ))
                            }
                            _ => Spiral::US5::US5_1,
                        };
                        let v6025: string = match &v6021 {
                            Spiral::US5::US5_0(v6021_0_0) => match &v6021 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => string(""),
                        };
                        let v6028: string = match &v6014 {
                            Spiral::US5::US5_0(v6014_0_0) => match &v6014 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => v6025.clone(),
                        };
                        let v6343: () = {
                            Spiral::closure57(v21.clone(), v5895, v6028.clone(), ());
                            ()
                        };
                        LrcPtr::new((v5895, v6028))
                    }
                }))();
                _capture_v756.set(Some(x_5))
            }
            {
                let v6663: LrcPtr<(i32, string)> = match &_capture_v756.get().clone() {
                    None => panic!("{}", string("base.capture / _capture_v756=None"),),
                    Some(_capture_v756_0_0) => _capture_v756_0_0.clone(),
                };
                (v6663.0.clone(), v6663.1.clone())
            }
        }
        pub fn method154(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v4.clone(), string("exit_code"), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v76: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v114: () = {
                Spiral::closure7(v4.clone(), string("run_result"), ());
                ()
            };
            let v131: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v148: () = {
                Spiral::closure7(v4.clone(), v1_1, ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v184: () = {
                Spiral::closure7(v4.clone(), string("new_code_path"), ());
                ()
            };
            let v201: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v218: () = {
                Spiral::closure7(v4.clone(), v2, ());
                ()
            };
            let v237: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method153(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method154(v8, v9, v10);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / check error"),
                    )),
                    string(" / "),
                )),
                (v11),
            ))
        }
        pub fn closure58(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            fn v18() {
                Spiral::closure2((), ());
            }
            let v19: () = {
                v18();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v60: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v300: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v83: () = {
                    v18();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v111: Option<i64> = patternInput_1.5.clone();
                let v110: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v109: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v108: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v107: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v106: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v126: string = Spiral::method153(
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    Spiral::method7(v106, v107, v108, v109, v110, v111),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                );
                let v142: () = {
                    v18();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v166: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v165: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v187: () = {
                    Spiral::closure8(v165.clone(), ());
                    ()
                };
                println!("{}", v126.clone());
                (v166.l0.get().clone())(v126);
                Spiral::US6::US6_0(
                    v165,
                    v166,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method156(v0_1: i32, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("exit_code"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v77: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v96: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v132: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v149: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v166: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v185: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v202: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v219: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v236: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v255: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v272: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v289: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v308: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method155(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method156(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / error"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure59(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method155(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method157(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method154(v8, v9, v10);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / esbuild error"),
                    )),
                    string(" / "),
                )),
                (v11),
            ))
        }
        pub fn closure60(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            fn v18() {
                Spiral::closure2((), ());
            }
            let v19: () = {
                v18();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v60: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v300: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v83: () = {
                    v18();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v111: Option<i64> = patternInput_1.5.clone();
                let v110: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v109: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v108: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v107: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v106: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v126: string = Spiral::method157(
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    Spiral::method7(v106, v107, v108, v109, v110, v111),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                );
                let v142: () = {
                    v18();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v166: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v165: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v187: () = {
                    Spiral::closure8(v165.clone(), ());
                    ()
                };
                println!("{}", v126.clone());
                (v166.l0.get().clone())(v126);
                Spiral::US6::US6_0(
                    v165,
                    v166,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method158(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method154(v8, v9, v10);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / trunk error"),
                    )),
                    string(" / "),
                )),
                (v11),
            ))
        }
        pub fn closure61(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            fn v18() {
                Spiral::closure2((), ());
            }
            let v19: () = {
                v18();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v60: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v300: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v83: () = {
                    v18();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v111: Option<i64> = patternInput_1.5.clone();
                let v110: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v109: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v108: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v107: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v106: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v126: string = Spiral::method158(
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    Spiral::method7(v106, v107, v108, v109, v110, v111),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                );
                let v142: () = {
                    v18();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v166: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v165: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v187: () = {
                    Spiral::closure8(v165.clone(), ());
                    ()
                };
                println!("{}", v126.clone());
                (v166.l0.get().clone())(v126);
                Spiral::US6::US6_0(
                    v165,
                    v166,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure62(unitVar: (), v0_1: string) -> Spiral::US5 {
            Spiral::US5::US5_0(v0_1)
        }
        pub fn closure64(unitVar: (), v0_1: string) -> bool {
            if (startsWith3(v0_1.clone(), string("{compiling,\""), false)) == false {
                if (startsWith3(v0_1.clone(), string("{compiled,main"), false)) == false {
                    if (endsWith3(v0_1.clone(), string("main.beam\"}"), false)) == false {
                        if (endsWith3(v0_1.clone(), string("main_real.beam\"}"), false)) == false {
                            if (startsWith3(v0_1.clone(), string("src\\main.gleam:"), false))
                                == false
                            {
                                if (startsWith3(
                                    v0_1.clone(),
                                    string("src\\main_real.gleam:"),
                                    false,
                                )) == false
                                {
                                    if (startsWith3(v0_1.clone(), string("src/main.gleam:"), false))
                                        == false
                                    {
                                        if (startsWith3(
                                            v0_1.clone(),
                                            string("src/main_real.gleam:"),
                                            false,
                                        )) == false
                                        {
                                            (startsWith3(v0_1, string("% "), false)) == false
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method159() -> Func1<string, bool> {
            Func1::new(move |v: string| Spiral::closure64((), v))
        }
        pub fn method160(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure63(v0_1: string, unitVar: ()) -> string {
            let v12: Array<string> = split(v0_1, string("\n"), -1_i32, 0_i32);
            let v16: Vec<string> = v12.to_vec();
            let v17 = Spiral::method159();
            let v18: Vec<string> = Spiral::method160(v16);
            let v20: Vec<string> = v18
                .into_iter()
                .filter(|x| v17(x.clone().clone()))
                .collect::<Vec<_>>();
            let v24: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v20.clone()));
            trimStartChars(
                join(Spiral::method75(), toArray_1(v24)),
                toArray(singleton('\n')),
            )
        }
        pub fn method162(
            v0_1: LrcPtr<Exception>,
            v1_1: std::string::String,
            v2: string,
            v3: string,
        ) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v69: std::string::String = format!("{:#?}", v0_1);
            let v116: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v69), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v154: () = {
                Spiral::closure7(v5.clone(), string("run_result\'"), ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v183: std::string::String = format!("{:#?}", v1_1);
            let v230: () = {
                Spiral::closure7(
                    v5.clone(),
                    fable_library_rust::String_::fromString(v183),
                    (),
                );
                ()
            };
            let v247: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v266: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v283: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v300: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v317: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v336: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v353: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v370: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v389: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method161(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: std::string::String,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method162(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / Exception"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure66(
            v0_1: string,
            v1_1: string,
            v2: std::string::String,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method161(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v3,
                    v2,
                    v0_1,
                    v1_1,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure65(
            v0_1: string,
            v1_1: string,
            v2: std::string::String,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v317: () = {
                Spiral::closure66(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method163(
            v0_1: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>>,
        ) -> Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>> {
            v0_1
        }
        pub fn closure67(
            v0_1: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>>,
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>> =
                Spiral::method163(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method164() -> string {
            string("py-path")
        }
        pub fn method165() -> string {
            string("env")
        }
        pub fn method167(v0_1: Spiral::US38, v1_1: i32, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("env"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v78: () = {
                Spiral::closure7(v5.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            let v97: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v116: () = {
                Spiral::closure7(v5.clone(), string("exit_code"), ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v153: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v170: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v189: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v206: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v223: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v240: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v259: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v276: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v293: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v312: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method166(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral::US38,
            v9: i32,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method167(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_cuda / env install error"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure68(v0_1: Spiral::US38, v1_1: string, v2: string, v3: i32, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method166(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v0_1,
                    v3,
                    v2,
                    v1_1,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure69(v0_1: string, unitVar: ()) -> string {
            let v16: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v16))
        }
        pub fn method169(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v69: std::string::String = format!("{:#?}", v0_1);
            let v116: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v69), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v154: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v188: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v205: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v224: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v241: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v258: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v275: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v294: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v311: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v328: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v347: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method168(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method169(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_cuda / Exception"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure71(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method168(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v3,
                    v1_1,
                    v0_1,
                    v2,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure70(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v317: () = {
                Spiral::closure71(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method170(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method156(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_cuda / error"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure72(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method170(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method171() -> string {
            string("fs-path")
        }
        pub fn method172() -> string {
            string("command")
        }
        pub fn method173() -> string {
            string("path")
        }
        pub fn method175(v0_1: string) -> string {
            Spiral::method66(Spiral::method33(Spiral::method31(), v0_1))
        }
        pub fn closure73(unitVar: (), v0_1: std::string::String) -> string {
            Spiral::method175(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method174() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Spiral::closure73((), v))
        }
        pub fn method176() -> string {
            string("retries")
        }
        pub fn method177() -> string {
            string("working-directory")
        }
        pub fn method180(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v4.clone(), string("exit_code"), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v76: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v114: () = {
                Spiral::closure7(v4.clone(), string("repl_result"), ());
                ()
            };
            let v131: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v148: () = {
                Spiral::closure7(v4.clone(), v1_1, ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v184: () = {
                Spiral::closure7(v4.clone(), string("retry"), ());
                ()
            };
            let v201: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v218: () = {
                Spiral::closure7(v4.clone(), v2, ());
                ()
            };
            let v237: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method179(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method180(v8, v9, v10);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_dib / repl error"),
                    )),
                    string(" / "),
                )),
                (v11),
            ))
        }
        pub fn closure74(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v302: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                3_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v128: string = Spiral::method179(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method40(),
                    v3,
                    v2,
                    sprintf!("{}/{}", v1_1, v0_1),
                );
                let v144: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v168: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v167: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v189: () = {
                    Spiral::closure8(v167.clone(), ());
                    ()
                };
                println!("{}", v128.clone());
                (v168.l0.get().clone())(v128);
                Spiral::US6::US6_0(
                    v167,
                    v168,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method178(
            v0_1: Spiral::US5,
            v1_1: u8,
            v2: string,
            v3: string,
            v4: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<Spiral::US5> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<string> = MutCell::new(v3.clone());
            let v4: MutCell<u8> = MutCell::new(v4);
            '_method178: loop {
                break '_method178 ({
                    let patternInput: (i32, string) = Spiral::method90(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}\"",
                            v2.get().clone(),
                            v3.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral::US5::US5_0(v0_1_0_0) => Some(
                                match &v0_1.get().clone() {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => None::<string>,
                        },
                        true,
                    );
                    let v42: string = patternInput.1.clone();
                    let v41: i32 = patternInput.0.clone();
                    if if (v41) == 0_i32 {
                        true
                    } else {
                        (v4.get().clone()) >= (v1_1.get().clone())
                    } {
                        let v57: Result<Vec<u8>, std::io::Error> =
                            std::fs::read(&*v3.get().clone());
                        let v105: Vec<u8> = Spiral::method24(v57.unwrap());
                        let v107: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v105);
                        let v111: std::string::String = v107.unwrap();
                        let v160: string = replace(
                            replace(
                                fable_library_rust::String_::fromString(v111),
                                string("\r\n"),
                                string("\n"),
                            ),
                            string("\\r\\n"),
                            string("\\n"),
                        );
                        std::fs::write(&*v3.get().clone(), &*v160).unwrap();
                        (v41, v42.clone())
                    } else {
                        let v477: () = {
                            Spiral::closure74(v1_1.get().clone(), v4.get().clone(), v42, v41, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral::US5 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: string = v3.get().clone();
                            let v4_temp: u8 = (v4.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method178;
                        }
                    }
                });
            }
        }
        pub fn method182(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string("jupyter_result_length"), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v169: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method181(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method182(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_dib / dib / jupyter nbconvert"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure75(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v300: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v126: string = Spiral::method181(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method11(),
                    v1_1,
                    length(v0_1),
                );
                let v142: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v166: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v165: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v187: () = {
                    Spiral::closure8(v165.clone(), ());
                    ()
                };
                println!("{}", v126.clone());
                (v166.l0.get().clone())(v126);
                Spiral::US6::US6_0(
                    v165,
                    v166,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method184(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string("pwsh_replace_html_result_length"), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v169: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method183(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method184(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / dib / html cell ids"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure76(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v300: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v126: string = Spiral::method183(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method11(),
                    v1_1,
                    length(v0_1),
                );
                let v142: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v166: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v165: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v187: () = {
                    Spiral::closure8(v165.clone(), ());
                    ()
                };
                println!("{}", v126.clone());
                (v166.l0.get().clone())(v126);
                Spiral::US6::US6_0(
                    v165,
                    v166,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure77(unitVar: (), unitVar_1: ()) -> Spiral::US39 {
            Spiral::US39::US39_0
        }
        pub fn method185() -> Func0<Spiral::US39> {
            Func0::new(move || Spiral::closure77((), ()))
        }
        pub fn closure78(unitVar: (), v0_1: string) -> Spiral::US39 {
            Spiral::US39::US39_1(v0_1)
        }
        pub fn method186() -> Func1<string, Spiral::US39> {
            Func1::new(move |v: string| Spiral::closure78((), v))
        }
        pub fn method188(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("error\'"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method187(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method188(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.file_delete"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure79(v0_1: string, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method187(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method82(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method190(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string("result_length"), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v169: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method189(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method190(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_dib / dib"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure80(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v300: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v126: string = Spiral::method189(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method11(),
                    v1_1,
                    length(v0_1),
                );
                let v142: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v166: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v165: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v187: () = {
                    Spiral::closure8(v165.clone(), ());
                    ()
                };
                println!("{}", v126.clone());
                (v166.l0.get().clone())(v126);
                Spiral::US6::US6_0(
                    v165,
                    v166,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method191() -> string {
            string("cleanup")
        }
        pub fn method192() -> string {
            string("wasm")
        }
        pub fn method193() -> string {
            string("contract")
        }
        pub fn method194(v0_1: string, v1_1: string, v2: Spiral::US40) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v4.clone(), string("extension"), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v73: () = {
                Spiral::closure7(v4.clone(), v0_1, ());
                ()
            };
            let v92: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v111: () = {
                Spiral::closure7(v4.clone(), string("code"), ());
                ()
            };
            let v128: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v145: () = {
                Spiral::closure7(v4.clone(), v1_1, ());
                ()
            };
            let v162: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v181: () = {
                Spiral::closure7(v4.clone(), string("runtime"), ());
                ()
            };
            let v198: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v219: () = {
                Spiral::closure7(v4.clone(), sprintf!("{:?}", v2), ());
                ()
            };
            let v238: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method195(v0_1: Spiral::US5, v1_1: string, v2: Spiral::US43, v3: string) -> string {
            let v6: string = Spiral::method33(Spiral::method33(v3, string("target/spiral")), v1_1);
            if let Spiral::US5::US5_0(v0_1_0_0) = &v0_1 {
                if let Spiral::US43::US43_0(v2_0_0) = &v2 {
                    let v8: Spiral::US42 = v2_0_0.clone();
                    let v10: string = Spiral::method33(v6.clone(), string("packages"));
                    let v15: Spiral::US5 = if if let Spiral::US42::US42_0 = &v8 {
                        true
                    } else {
                        false
                    } {
                        Spiral::US5::US5_0(string("Rust"))
                    } else {
                        Spiral::US5::US5_1
                    };
                    let v38: Spiral::US5 = match &v15 {
                        Spiral::US5::US5_0(v15_0_0) => Spiral::US5::US5_0(
                            match &v15 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => {
                            let v22: Spiral::US5 = if if let Spiral::US42::US42_1 = &v8 {
                                true
                            } else {
                                false
                            } {
                                Spiral::US5::US5_0(string("TypeScript"))
                            } else {
                                Spiral::US5::US5_1
                            };
                            match &v22 {
                                Spiral::US5::US5_0(v22_0_0) => Spiral::US5::US5_0(
                                    match &v22 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => {
                                    let v29: Spiral::US5 = if if let Spiral::US42::US42_2 = &v8 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral::US5::US5_0(string("Python"))
                                    } else {
                                        Spiral::US5::US5_1
                                    };
                                    match &v29 {
                                        Spiral::US5::US5_0(v29_0_0) => Spiral::US5::US5_0(
                                            match &v29 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    }
                                }
                            }
                        }
                    };
                    Spiral::method33(
                        Spiral::method33(
                            v10,
                            match &v38 {
                                Spiral::US5::US5_0(v38_0_0) => match &v38 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                        ),
                        v0_1_0_0.clone(),
                    )
                } else {
                    v6.clone()
                }
            } else {
                v6
            }
        }
        pub fn method197(
            v0_1: string,
            v1_1: LrcPtr<Spiral::UH2>,
            v2: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            match v1_1.as_ref() {
                Spiral::UH2::UH2_0 => v2.clone(),
                Spiral::UH2::UH2_1(v1_1_1_0, v1_1_1_1) => {
                    let v5: LrcPtr<Spiral::UH2> = Spiral::method197(
                        v0_1.clone(),
                        match v1_1.as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v2.clone(),
                    );
                    LrcPtr::new(Spiral::UH2::UH2_1(
                        concat(new_array(&[
                            string("<Compile Include=\""),
                            Spiral::method33(
                                v0_1.clone(),
                                match v1_1.as_ref() {
                                    Spiral::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            string("\" />"),
                        ])),
                        v5,
                    ))
                }
            }
        }
        pub fn method198(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral::UH2::UH2_1(
                        sprintf!(
                            "<PackageReference Include=\"{}\" Version=\"{}\" />",
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                        ),
                        Spiral::method198(
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method196(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<Spiral::UH2>,
            v3: LrcPtr<Spiral::UH4>,
            v4: string,
            v5: string,
        ) -> string {
            let v6: LrcPtr<dyn IDisposable> = Spiral::method78(v4.clone());
            let v9: string = Spiral::method43(Spiral::method33(
                v4.clone(),
                concat(new_array(&[v1_1.clone(), string(".fs")])),
            ));
            Spiral::method76(v9.clone(), v0_1);
            {
                let v13: List<string> = Spiral::method121(
                    Spiral::method197(v5, v2, LrcPtr::new(Spiral::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v32: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v13 = v13.clone();
                        move || ofList(v13.clone()).clone()
                    }))),
                );
                let v38: List<string> = Spiral::method121(
                    Spiral::method198(v3, LrcPtr::new(Spiral::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v55: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v38 = v38.clone();
                        move || ofList(v38.clone()).clone()
                    }))),
                );
                let v60: string = Spiral::method43(Spiral::method33(
                    v4,
                    concat(new_array(&[v1_1, string(".fsproj")])),
                ));
                Spiral::method76(
                    v60.clone(),
                    append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        string(
                                                                            "<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n    <ServerGarbageCollection>true</ServerGarbageCollection>\n    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n",
                                                                        ),
                                                                        (concat(new_array(&[
                                                                            string("    "),
                                                                            v32,
                                                                        ]))),
                                                                    )),
                                                                    string("\n"),
                                                                )),
                                                                (concat(new_array(&[
                                                                    string(
                                                                        "    <Compile Include=\"",
                                                                    ),
                                                                    v9,
                                                                    string("\" />"),
                                                                ]))),
                                                            )),
                                                            string("\n"),
                                                        )),
                                                        string("</ItemGroup>"),
                                                    )),
                                                    string("\n"),
                                                )),
                                                string("<ItemGroup>"),
                                            )),
                                            string("\n"),
                                        )),
                                        (concat(new_array(&[string("    "), v55]))),
                                    )),
                                    string("\n"),
                                )),
                                string("</ItemGroup>"),
                            )),
                            string("\n"),
                        )),
                        string("</Project>"),
                    ),
                );
                v60
            }
        }
        pub fn closure81(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Spiral::US44 {
            Spiral::US44::US44_0(v0_1)
        }
        pub fn method200() -> Func1<chrono::DateTime<chrono::Utc>, Spiral::US44> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Spiral::closure81((), v))
        }
        pub fn method201() -> string {
            string("hh:mm")
        }
        pub fn method202() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method203() -> string {
            string("hhmm")
        }
        pub fn method199(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v752: DateTime = {
                let _arg: DateTime = DateTime::unixEpoch();
                _arg.toUniversalTime()
            };
            let v762: DateTime = {
                let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                _arg_1.toUniversalTime()
            };
            let v862: i64 = ((v762.ticks()) - (v752.ticks())) / 10_i64;
            let v864: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v862);
            let v889: Spiral::US44 =
                defaultValue(Spiral::US44::US44_1, map(Spiral::method200(), v864));
            let v909: Spiral::US5 = match &v889 {
                Spiral::US44::US44_0(v889_0_0) => {
                    let v895: chrono::NaiveDateTime = match &v889 {
                        Spiral::US44::US44_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v897: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v895);
                    let v899: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v900: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v902: std::string::String = v897.format(v900).to_string();
                    let v904: string = fable_library_rust::String_::fromString(v902);
                    Spiral::US5::US5_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v904.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v904.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v904, 22_i32)
                    ))
                }
                _ => Spiral::US5::US5_1,
            };
            let v913: string = match &v909 {
                Spiral::US5::US5_0(v909_0_0) => match &v909 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            };
            let v920: LrcPtr<TimeZoneInfo> = std::sync::Arc::new(
                chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64,
            );
            let v964: i64 = v762.ticks();
            let v1000: string = string(
                "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))",
            );
            let v1151: TimeSpan = TimeSpan::new_ticks(chrono::FixedOffset::local_minus_utc(
                &chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(
                    &chrono::DateTime::from_timestamp_nanos(v964),
                )),
            ) as i64);
            let v1172: u8 = if (v1151.hours()) > 0_i32 { 1_u8 } else { 0_u8 };
            let v1173: string = Spiral::method201();
            let v1393: string = v1151.toString(v1173);
            let v1534: string = sprintf!(
                "{}{}{}",
                v1172,
                getSlice(v1393.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v1393, Some(3_i32), Some(4_i32))
            );
            let v1537: string = toString(v0_1);
            parse(concat(new_array(&[
                v913.clone(),
                v1534.clone(),
                getSlice(
                    v1537.clone(),
                    Some((length(v913)) + (length(v1534))),
                    Some((length(v1537)) - 1_i32),
                ),
            ])))
        }
        pub fn method204(v0_1: string, v1_1: string) {
            if (Spiral::method36(v0_1.clone())) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral::method78(v0_1.clone());
                ()
            }
            {
                let v9: string = defaultValue(string(""), Spiral::method38(v1_1.clone()));
                if (Spiral::method36(v9.clone())) == false {
                    let v14: LrcPtr<dyn IDisposable> = Spiral::method78(v9);
                    ()
                }
                if if Spiral::method36(v1_1.clone()) {
                    let v16: Result<std::path::PathBuf, std::io::Error> =
                        Spiral::method44(v1_1.clone());
                    v16.is_err()
                } else {
                    false
                } {
                    Spiral::method71(true, v1_1.clone());
                }
                if (Spiral::method36(v1_1.clone())) == false {
                    let v31: bool = true;
                    #[cfg(windows)]
                    std::os::windows::fs::symlink_dir(&*v0_1.clone(), &*v1_1.clone()).unwrap();
                    let v33: bool = true;
                    #[cfg(unix)]
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1).unwrap();
                    ()
                }
            }
        }
        pub fn method206() -> string {
            string("(")
        }
        pub fn method207() -> string {
            string(" ")
        }
        pub fn method208(v0_1: Spiral::US41) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v18: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method212(v0_1: bool, v1_1: string, v2: i32, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("is_error"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v77: () = {
                Spiral::closure7(
                    v5.clone(),
                    if v0_1 {
                        string("true")
                    } else {
                        string("false")
                    },
                    (),
                );
                ()
            };
            let v96: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string("retry"), ());
                ()
            };
            let v132: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v149: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v166: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v185: () = {
                Spiral::closure7(v5.clone(), string("result"), ());
                ()
            };
            let v202: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v222: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v241: () = {
                Spiral::closure7(v5.clone(), string(", "), ());
                ()
            };
            let v258: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v277: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method211(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: string,
            v10: i32,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method212(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("common.retry_fn\' / 루프"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure82(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            fn v20() {
                Spiral::closure2((), ());
            }
            let v21: () = {
                v20();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v62: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v303: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v62,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v85: () = {
                    v20();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v113: Option<i64> = patternInput_1.5.clone();
                let v112: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v111: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v110: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v109: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v108: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v129: string = Spiral::method211(
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    v113.clone(),
                    Spiral::method7(v108, v109, v110, v111, v112, v113),
                    Spiral::method11(),
                    v4,
                    sprintf!("{}/{}", v1_1, v0_1),
                    v2,
                    v3,
                );
                let v145: () = {
                    v20();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v169: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v168: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v190: () = {
                    Spiral::closure8(v168.clone(), ());
                    ()
                };
                println!("{}", v129.clone());
                (v169.l0.get().clone())(v129);
                Spiral::US6::US6_0(
                    v168,
                    v169,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method210(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: bool,
            v9: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<bool> = MutCell::new(v8);
            let v9: MutCell<u8> = MutCell::new(v9);
            '_method210: loop {
                break '_method210 ({
                    let patternInput: (i32, string) = Spiral::method90(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                        v8.get().clone(),
                    );
                    let v11: string = patternInput.1.clone();
                    let v10: i32 = patternInput.0.clone();
                    let v15: Spiral::US45 = if (v10) == 0_i32 {
                        Spiral::US45::US45_0(v10, v11.clone())
                    } else {
                        Spiral::US45::US45_1(v10, v11)
                    };
                    let patternInput_1: (bool, i32, string) = match &v15 {
                        Spiral::US45::US45_0(v15_0_0, v15_0_1) => {
                            (false, v15_0_0.clone(), v15_0_1.clone())
                        }
                        Spiral::US45::US45_1(v15_1_0, v15_1_1) => {
                            (true, v15_1_0.clone(), v15_1_1.clone())
                        }
                    };
                    let v25: string = patternInput_1.2.clone();
                    let v24: i32 = patternInput_1.1.clone();
                    let v23: bool = patternInput_1.0.clone();
                    if if (v23) == false {
                        true
                    } else {
                        (v9.get().clone()) >= (v0_1.get().clone())
                    } {
                        (v24, v25.clone())
                    } else {
                        let v343: () = {
                            Spiral::closure82(
                                v0_1.get().clone(),
                                v9.get().clone(),
                                v24,
                                v25,
                                v23,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: bool = v8.get().clone();
                            let v9_temp: u8 = (v9.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            v9.set(v9_temp);
                            continue '_method210;
                        }
                    }
                });
            }
        }
        pub fn method209(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: bool,
        ) -> (i32, string) {
            Spiral::method210(v0_1, v1_1, v2, v3, v4, v5, v6, v7, v8, 1_u8)
        }
        pub fn method205(
            v0_1: Spiral::US40,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral::US14,
        ) -> (i32, string) {
            let v179: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                concat(new_array(&[
                    string(" --define "),
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ])),
                match &v0_1 {
                    Spiral::US40::US40_0(v0_1_0_0) => {
                        let v57: Spiral::US41 = match &v0_1 {
                            Spiral::US40::US40_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v112: Spiral::US5 = if if let Spiral::US41::US41_0(v57_0_0) = &v57 {
                            string("") == (v57_0_0.clone())
                        } else {
                            false
                        } {
                            Spiral::US5::US5_0(string("Wasm"))
                        } else {
                            let v74: string = Spiral::method206();
                            let v96: Array<string> = split(
                                Spiral::method208(Spiral::US41::US41_0(string(""))),
                                v74,
                                -1_i32,
                                0_i32,
                            );
                            let v100: string = v96[0_i32].clone();
                            if startsWith3(Spiral::method208(v57.clone()), v100, false) {
                                Spiral::US5::US5_0(string("Wasm"))
                            } else {
                                Spiral::US5::US5_1
                            }
                        };
                        let v168: Spiral::US5 = match &v112 {
                            Spiral::US5::US5_0(v112_0_0) => Spiral::US5::US5_0(
                                match &v112 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v161: Spiral::US5 = if if let Spiral::US41::US41_1(v57_1_0) =
                                    &v57
                                {
                                    string("") == (v57_1_0.clone())
                                } else {
                                    false
                                } {
                                    Spiral::US5::US5_0(string("Contract"))
                                } else {
                                    let v123: string = Spiral::method206();
                                    let v145: Array<string> = split(
                                        Spiral::method208(Spiral::US41::US41_1(string(""))),
                                        v123,
                                        -1_i32,
                                        0_i32,
                                    );
                                    let v149: string = v145[0_i32].clone();
                                    if startsWith3(Spiral::method208(v57.clone()), v149, false) {
                                        Spiral::US5::US5_0(string("Contract"))
                                    } else {
                                        Spiral::US5::US5_1
                                    }
                                };
                                match &v161 {
                                    Spiral::US5::US5_0(v161_0_0) => Spiral::US5::US5_0(
                                        match &v161 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::US5::US5_1,
                                }
                            }
                        };
                        concat(new_array(&[
                            string(" --define "),
                            toUpper(match &v168 {
                                Spiral::US5::US5_0(v168_0_0) => match &v168 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                        ]))
                    }
                    _ => string(""),
                }
            );
            let v191: Result<string, string> = match &v4 {
                Spiral::US14::US14_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral::US14::US14_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral::method209(
                3_u8,
                v179,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v191.ok(),
                true,
            )
        }
        pub fn method214(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string("dotnet_fable_result"), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v147: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v166: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method213(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method214(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / dotnet fable error"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure83(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method213(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure84(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method215() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral::closure84((), v))
        }
        pub fn method216(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method217() -> string {
            string("(")
        }
        pub fn method218() -> string {
            string("(")
        }
        pub fn method220(
            v0_1: string,
            v1_1: regex::Regex,
        ) -> Vec<std::collections::HashMap<string, string>> {
            let v8: &str = &*v0_1;
            let v44: std::string::String = String::from(v8);
            let v75: bool = true;
            let _capture_move = (move || {
                //;
                let v77: Box<std::string::String> = Box::new(v44);
                let v79: &'static mut std::string::String = Box::leak(v77);
                let v81: regex::Regex = v1_1.clone();
                let v83: regex::CaptureMatches = v81.captures_iter(v79);
                let v85: bool = true;
                let _regex_captures: Vec<_> = v83
                    .map(|x| {
                        //;
                        let v87: regex::Captures<'static> = x;
                        let v89: Box<regex::Captures<'static>> = Box::new(v87);
                        let v91: &'static mut regex::Captures<'static> = Box::leak(v89);
                        let v93: regex::CaptureNames = v1_1.capture_names();
                        let v95: bool = true;
                        let _regex_captures: std::collections::HashMap<_, _> = v93
                            .map(|x| {
                                //;
                                let v97: string = x.unwrap_or("").to_string().into();
                                let v99: string = v97.clone().clone();
                                let v101: string = v91
                                    .name(&v97)
                                    .map(|x| x.as_str())
                                    .unwrap_or("")
                                    .to_string()
                                    .into();
                                let v107: bool = true;
                                LrcPtr::new((v99, v101))
                            })
                            .map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone()))
                            .collect();
                        let v109: std::collections::HashMap<string, string> = _regex_captures;
                        let v111: bool = true;
                        v109
                    })
                    .collect::<Vec<_>>();
                let v113: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                let v115: bool = true;
                v113
            })();
            _capture_move
        }
        pub fn closure85(
            unitVar: (),
            v0_1: std::collections::HashMap<string, string>,
        ) -> Spiral::US46 {
            Spiral::US46::US46_0(v0_1)
        }
        pub fn method221() -> Func1<std::collections::HashMap<string, string>, Spiral::US46> {
            Func1::new(move |v: std::collections::HashMap<string, string>| Spiral::closure85((), v))
        }
        pub fn method222() -> string {
            string("a")
        }
        pub fn closure86(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v302: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v128: string = Spiral::method211(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method11(),
                    v3,
                    sprintf!("{}/{}", v0_1, 3_u8),
                    v1_1,
                    v2,
                );
                let v144: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v168: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v167: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v189: () = {
                    Spiral::closure8(v167.clone(), ());
                    ()
                };
                println!("{}", v128.clone());
                (v168.l0.get().clone())(v128);
                Spiral::US6::US6_0(
                    v167,
                    v168,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method219(v0_1: Spiral::US14, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral::US14> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method219: loop {
                break '_method219 ({
                    let v20: string = concat(new_array(&[
                        string("cargo fmt --manifest-path \""),
                        v1_1.get().clone(),
                        string("\" --"),
                    ]));
                    let v32: Result<string, string> = match &v0_1.get().clone() {
                        Spiral::US14::US14_0(v0_1_0_0) => Ok::<string, string>(v0_1_0_0.clone()),
                        Spiral::US14::US14_1(v0_1_1_0) => Err::<string, string>(v0_1_1_0.clone()),
                    };
                    let patternInput: (i32, string) = Spiral::method90(
                        v20,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v32.ok(),
                        true,
                    );
                    let v51: string = patternInput.1.clone();
                    let v50: i32 = patternInput.0.clone();
                    let v275: Spiral::US45 = if (contains(
                        v51.clone(),
                        string("failed to load manifest for workspace member"),
                    )) == false
                    {
                        if (v50) == 0_i32 {
                            Spiral::US45::US45_0(v50, v51.clone())
                        } else {
                            Spiral::US45::US45_1(v50, v51.clone())
                        }
                    } else {
                        let v65: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v81: Vec<std::collections::HashMap<string, string>> =
                            Spiral::method220(v51.clone(), v65.unwrap());
                        let v84: Option<std::collections::HashMap<string, string>> = tryItem(
                            0_i32,
                            fable_library_rust::NativeArray_::array_from(v81.clone()),
                        );
                        let v109: Spiral::US46 =
                            defaultValue(Spiral::US46::US46_1, map(Spiral::method221(), v84));
                        let v148: Spiral::US35 = match &v109 {
                            Spiral::US46::US46_0(v109_0_0) => {
                                let v114: string = Spiral::method222();
                                let v116: Option<string> = std::collections::HashMap::get(
                                    &match &v109 {
                                        Spiral::US46::US46_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    &v114,
                                )
                                .map(|x| x)
                                .cloned();
                                Spiral::US35::US35_0(defaultValue(
                                    Spiral::US5::US5_1,
                                    map(Spiral::method6(), v116),
                                ))
                            }
                            _ => Spiral::US35::US35_1,
                        };
                        let v155: Spiral::US5 = if let Spiral::US35::US35_0(v148_0_0) = &v148 {
                            let v149: Spiral::US5 = v148_0_0.clone();
                            if let Spiral::US5::US5_0(v149_0_0) = &v149 {
                                Spiral::US5::US5_0(v149_0_0.clone())
                            } else {
                                Spiral::US5::US5_1
                            }
                        } else {
                            Spiral::US5::US5_1
                        };
                        match &v155 {
                            Spiral::US5::US5_0(v155_0_0) => {
                                let v157: string = match &v155 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                if (Spiral::method35(v157.clone())) == false {
                                    let v167: LrcPtr<dyn IDisposable> = Spiral::method78(
                                        defaultValue(string(""), Spiral::method38(v157.clone())),
                                    );
                                    let v175: DateTime = DateTime::now();
                                    let v198: string =
                                        toString(Spiral::method199(new_guid(), v175));
                                    let v264: string =
                                                     append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                            (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                v198.clone(),
                                                                                                                                                                                string("\"")]))))),
                                                                                                                                                    string("\n"))),
                                                                                                                                            string("version = \"0.0.1\""))),
                                                                                                                                    string("\n"))),
                                                                                                                            string("edition = \"2021\""))),
                                                                                                                    string("\n"))),
                                                                                                            string(""))),
                                                                                                    string("\n"))),
                                                                                            string("[[bin]]"))),
                                                                                    string("\n"))),
                                                                            (concat(new_array(&[string("name = \"spiral_"),
                                                                                                v198,
                                                                                                string("\"")]))))),
                                                                    string("\n"))),
                                                            string("path = \"spiral.rs\""));
                                    std::fs::write(&*v157, &*v264).unwrap();
                                    ()
                                }
                                if (v50) == 0_i32 {
                                    Spiral::US45::US45_0(v50, v51.clone())
                                } else {
                                    Spiral::US45::US45_1(v50, v51.clone())
                                }
                            }
                            _ => Spiral::US45::US45_1(v50, v51.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v275 {
                        Spiral::US45::US45_0(v275_0_0, v275_0_1) => {
                            (false, v275_0_0.clone(), v275_0_1.clone())
                        }
                        Spiral::US45::US45_1(v275_1_0, v275_1_1) => {
                            (true, v275_1_0.clone(), v275_1_1.clone())
                        }
                    };
                    let v285: string = patternInput_1.2.clone();
                    let v284: i32 = patternInput_1.1.clone();
                    let v283: bool = patternInput_1.0.clone();
                    if if (v283) == false {
                        true
                    } else {
                        (v2.get().clone()) >= 3_u8
                    } {
                        (v284, v285.clone())
                    } else {
                        let v603: () = {
                            Spiral::closure86(v2.get().clone(), v284, v285, v283, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral::US14 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = (v2.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method219;
                        }
                    }
                });
            }
        }
        pub fn method224(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string("cargo_fmt_result"), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v147: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v166: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method223(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method224(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / cargo fmt error"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure87(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method223(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method225() -> string {
            string("{")
        }
        pub fn closure88(unitVar: (), v0_1: string) -> string {
            v0_1
        }
        pub fn closure89(v0_1: string, v1_1: string, v2: string) -> string {
            replace(v2, v0_1, v1_1)
        }
        pub fn closure90(v0_1: string, v1_1: string) -> string {
            replace(v1_1, v0_1, string("type DateTime = ();"))
        }
        pub fn method227(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v20: () = {
                Spiral::closure7(v6.clone(), string("{ "), ());
                ()
            };
            let v39: () = {
                Spiral::closure7(v6.clone(), string("exit_code"), ());
                ()
            };
            let v58: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v78: () = {
                Spiral::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v97: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v116: () = {
                Spiral::closure7(v6.clone(), string("new_code_path"), ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v6.clone(), v1_1, ());
                ()
            };
            let v167: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v186: () = {
                Spiral::closure7(v6.clone(), string("external_command"), ());
                ()
            };
            let v203: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v220: () = {
                Spiral::closure7(v6.clone(), v2, ());
                ()
            };
            let v237: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v256: () = {
                Spiral::closure7(v6.clone(), string("cleanup"), ());
                ()
            };
            let v273: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v293: () = {
                Spiral::closure7(
                    v6.clone(),
                    if v3 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v310: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v329: () = {
                Spiral::closure7(v6.clone(), string("cargo_result"), ());
                ()
            };
            let v346: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v363: () = {
                Spiral::closure7(v6.clone(), v4, ());
                ()
            };
            let v382: () = {
                Spiral::closure7(v6.clone(), string(" }"), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method226(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral::method227(v8, v9, v10, v11, v12);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / error"),
                    )),
                    string(" / "),
                )),
                (v13),
            ))
        }
        pub fn closure91(v0_1: bool, v1_1: string, v2: string, v3: i32, v4: string, unitVar: ()) {
            fn v20() {
                Spiral::closure2((), ());
            }
            let v21: () = {
                v20();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v62: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v302: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v62,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v85: () = {
                    v20();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v113: Option<i64> = patternInput_1.5.clone();
                let v112: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v111: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v110: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v109: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v108: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v128: string = Spiral::method226(
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    v113.clone(),
                    Spiral::method7(v108, v109, v110, v111, v112, v113),
                    Spiral::method82(),
                    v3,
                    v1_1,
                    v4,
                    v0_1,
                    v2,
                );
                let v144: () = {
                    v20();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v168: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v167: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v189: () = {
                    Spiral::closure8(v167.clone(), ());
                    ()
                };
                println!("{}", v128.clone());
                (v168.l0.get().clone())(v128);
                Spiral::US6::US6_0(
                    v167,
                    v168,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure93(unitVar: (), v0_1: string) -> bool {
            if (contains(v0_1.clone(), string("profile [optimized] target"))) == false {
                if (contains(v0_1.clone(), string("profile [unoptimized] target"))) == false {
                    (contains(v0_1, string("profile [unoptimized + debuginfo] target"))) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure92(v0_1: string, unitVar: ()) -> string {
            let v19: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(skip(
                2_i32,
                skipWhile(
                    Func1::new(move |v: string| Spiral::closure93((), v)),
                    split(v0_1, string("\n"), -1_i32, 0_i32),
                ),
            ));
            join(Spiral::method75(), toArray_1(v19))
        }
        pub fn method229(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v69: std::string::String = format!("{:#?}", v0_1);
            let v116: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v69), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v154: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v188: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v205: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v224: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v241: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v258: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v275: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v294: () = {
                Spiral::closure7(v5.clone(), string("cargo_result"), ());
                ()
            };
            let v311: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v328: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v347: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method228(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method229(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / Exception"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure95(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method228(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure94(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v317: () = {
                Spiral::closure95(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method231(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v20: () = {
                Spiral::closure7(v6.clone(), string("{ "), ());
                ()
            };
            let v39: () = {
                Spiral::closure7(v6.clone(), string("exit_code"), ());
                ()
            };
            let v58: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v78: () = {
                Spiral::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v97: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v116: () = {
                Spiral::closure7(v6.clone(), string("new_code_path"), ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v6.clone(), v1_1, ());
                ()
            };
            let v167: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v186: () = {
                Spiral::closure7(v6.clone(), string("cargo_result"), ());
                ()
            };
            let v203: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v220: () = {
                Spiral::closure7(v6.clone(), v2, ());
                ()
            };
            let v237: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v256: () = {
                Spiral::closure7(v6.clone(), string("cleanup"), ());
                ()
            };
            let v273: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v293: () = {
                Spiral::closure7(
                    v6.clone(),
                    if v3 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v310: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v329: () = {
                Spiral::closure7(v6.clone(), string("spiral_wasm_result"), ());
                ()
            };
            let v346: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v363: () = {
                Spiral::closure7(v6.clone(), v4, ());
                ()
            };
            let v382: () = {
                Spiral::closure7(v6.clone(), string(" }"), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method230(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral::method231(v8, v9, v10, v11, v12);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / wasm error"),
                    )),
                    string(" / "),
                )),
                (v13),
            ))
        }
        pub fn closure96(v0_1: bool, v1_1: string, v2: string, v3: string, v4: i32, unitVar: ()) {
            fn v20() {
                Spiral::closure2((), ());
            }
            let v21: () = {
                v20();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v62: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v303: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v62,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v85: () = {
                    v20();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v113: Option<i64> = patternInput_1.5.clone();
                let v112: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v111: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v110: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v109: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v108: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v129: string = Spiral::method230(
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    v113.clone(),
                    Spiral::method7(v108, v109, v110, v111, v112, v113),
                    Spiral::method82(),
                    v4,
                    v1_1,
                    v2,
                    v0_1,
                    concat(new_array(&[string("\n"), v3])),
                );
                let v145: () = {
                    v20();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v169: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v168: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v190: () = {
                    Spiral::closure8(v168.clone(), ());
                    ()
                };
                println!("{}", v129.clone());
                (v169.l0.get().clone())(v129);
                Spiral::US6::US6_0(
                    v168,
                    v169,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method233(
            v0_1: i32,
            v1_1: string,
            v2: string,
            v3: string,
            v4: bool,
            v5: string,
        ) -> string {
            let v7: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v21: () = {
                Spiral::closure7(v7.clone(), string("{ "), ());
                ()
            };
            let v40: () = {
                Spiral::closure7(v7.clone(), string("exit_code"), ());
                ()
            };
            let v59: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v79: () = {
                Spiral::closure7(v7.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v117: () = {
                Spiral::closure7(v7.clone(), string("new_code_path"), ());
                ()
            };
            let v134: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v151: () = {
                Spiral::closure7(v7.clone(), v1_1, ());
                ()
            };
            let v168: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v187: () = {
                Spiral::closure7(v7.clone(), string("wasm_path"), ());
                ()
            };
            let v204: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v221: () = {
                Spiral::closure7(v7.clone(), v2, ());
                ()
            };
            let v238: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v257: () = {
                Spiral::closure7(v7.clone(), string("command"), ());
                ()
            };
            let v274: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v291: () = {
                Spiral::closure7(v7.clone(), v3, ());
                ()
            };
            let v308: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v327: () = {
                Spiral::closure7(v7.clone(), string("cleanup"), ());
                ()
            };
            let v344: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v364: () = {
                Spiral::closure7(
                    v7.clone(),
                    if v4 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v381: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v400: () = {
                Spiral::closure7(v7.clone(), string("cargo_result"), ());
                ()
            };
            let v417: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v434: () = {
                Spiral::closure7(v7.clone(), v5, ());
                ()
            };
            let v453: () = {
                Spiral::closure7(v7.clone(), string(" }"), ());
                ()
            };
            v7.l0.get().clone()
        }
        pub fn method232(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
            v12: bool,
            v13: string,
        ) -> string {
            let v14: string = Spiral::method233(v8, v9, v10, v11, v12, v13);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / cargo error"),
                    )),
                    string(" / "),
                )),
                (v14),
            ))
        }
        pub fn closure97(
            v0_1: bool,
            v1_1: string,
            v2: string,
            v3: i32,
            v4: string,
            v5: string,
            unitVar: (),
        ) {
            fn v21() {
                Spiral::closure2((), ());
            }
            let v22: () = {
                v21();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v63: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v304: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v86: () = {
                    v21();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v114: Option<i64> = patternInput_1.5.clone();
                let v113: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v112: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v111: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v110: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v109: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v130: string = Spiral::method232(
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    v113.clone(),
                    v114.clone(),
                    Spiral::method7(v109, v110, v111, v112, v113, v114),
                    Spiral::method82(),
                    v3,
                    v1_1,
                    v4,
                    v5,
                    v0_1,
                    concat(new_array(&[string("\n"), v2])),
                );
                let v146: () = {
                    v21();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v170: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v169: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v191: () = {
                    Spiral::closure8(v169.clone(), ());
                    ()
                };
                println!("{}", v130.clone());
                (v170.l0.get().clone())(v130);
                Spiral::US6::US6_0(
                    v169,
                    v170,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method235(v0_1: string, v1_1: LrcPtr<Spiral::UH5>) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("new_code_path"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v91: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v3.clone(), string("cleanup"), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v148: () = {
                Spiral::closure7(v3.clone(), sprintf!("{:?}", v1_1), ());
                ()
            };
            let v167: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method234(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: bool,
            v11: string,
            v12: bool,
            v13: string,
            v14: bool,
            v15: string,
            v16: bool,
            v17: string,
            v18: bool,
        ) -> string {
            let v25: string = Spiral::method235(
                v8,
                LrcPtr::new(Spiral::UH5::UH5_1(
                    v9,
                    v10,
                    LrcPtr::new(Spiral::UH5::UH5_1(
                        v11,
                        v12,
                        LrcPtr::new(Spiral::UH5::UH5_1(
                            v13,
                            v14,
                            LrcPtr::new(Spiral::UH5::UH5_1(
                                v15,
                                v16,
                                LrcPtr::new(Spiral::UH5::UH5_1(
                                    v17,
                                    v18,
                                    LrcPtr::new(Spiral::UH5::UH5_0),
                                )),
                            )),
                        )),
                    )),
                )),
            );
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / cleanup"),
                    )),
                    string(" / "),
                )),
                (v25),
            ))
        }
        pub fn closure98(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            fn v26() {
                Spiral::closure2((), ());
            }
            let v27: () = {
                v26();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v68: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v308: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                0_i32
                    >= (find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v91: () = {
                    v26();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v119: Option<i64> = patternInput_1.5.clone();
                let v118: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v117: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v116: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v115: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v114: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v134: string = Spiral::method234(
                    v114.clone(),
                    v115.clone(),
                    v116.clone(),
                    v117.clone(),
                    v118.clone(),
                    v119.clone(),
                    Spiral::method7(v114, v115, v116, v117, v118, v119),
                    Spiral::method85(),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                    v8,
                    v9,
                    v10,
                );
                let v150: () = {
                    v26();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v174: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v173: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v195: () = {
                    Spiral::closure8(v173.clone(), ());
                    ()
                };
                println!("{}", v134.clone());
                (v174.l0.get().clone())(v134);
                Spiral::US6::US6_0(
                    v173,
                    v174,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method236(v0_1: LrcPtr<Spiral::UH5>) {
            let v0_1: MutCell<LrcPtr<Spiral::UH5>> = MutCell::new(v0_1.clone());
            '_method236: loop {
                break '_method236 (match v0_1.get().clone().as_ref() {
                    Spiral::UH5::UH5_0 => (),
                    Spiral::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        let v6: Result<(), std::io::Error> = std::fs::remove_file(
                            &*match v0_1.get().clone().as_ref() {
                                Spiral::UH5::UH5_1(x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v7 = Spiral::method46();
                        let v20: Result<(), string> = v6.map_err(|x| v7(x));
                        let v23 = Spiral::method185();
                        let v24 = Spiral::method186();
                        let v26: Spiral::US39 = match &v20 {
                            Err(v20_1_0) => v24(v20_1_0.clone()),
                            _ => v23(),
                        };
                        match &v26 {
                            Spiral::US39::US39_0 => (),
                            Spiral::US39::US39_1(v26_1_0) => {
                                let v343: () = {
                                    Spiral::closure79(
                                        match &v26 {
                                            Spiral::US39::US39_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        (),
                                    );
                                    ()
                                };
                                ()
                            }
                        }
                        {
                            let v0_1_temp: LrcPtr<Spiral::UH5> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral::UH5::UH5_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                            v0_1.set(v0_1_temp);
                            continue '_method236;
                        }
                    }
                });
            }
        }
        pub fn method237(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("extension"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v91: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v3.clone(), string("code"), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v163: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method238(v0_1: string) -> string {
            v0_1
        }
        pub fn closure100(unitVar: (), v0_1: std::fs::FileType) -> Spiral::US47 {
            Spiral::US47::US47_0(v0_1)
        }
        pub fn method239() -> Func1<std::fs::FileType, Spiral::US47> {
            Func1::new(move |v: std::fs::FileType| Spiral::closure100((), v))
        }
        pub fn closure101(unitVar: (), v0_1: std::string::String) -> Spiral::US47 {
            Spiral::US47::US47_1(v0_1)
        }
        pub fn method240() -> Func1<std::string::String, Spiral::US47> {
            Func1::new(move |v: std::string::String| Spiral::closure101((), v))
        }
        pub fn method241(v0_1: string) -> string {
            let v12: &str = &*v0_1;
            let v48: std::string::String = String::from(v12);
            let v84: std::path::PathBuf = std::path::PathBuf::from(v48);
            let v115: Option<&std::ffi::OsStr> = v84.file_name();
            let v117: bool = true;
            let _optionm_map_ = v115.map(|x| {
                //;
                let v119: &std::ffi::OsStr = x;
                let v121: std::ffi::OsString = v119.to_os_string();
                let v123: Option<&str> = v121.to_str();
                let v125: &str = v123.unwrap();
                let v132: std::string::String = String::from(v125);
                let v163: string = fable_library_rust::String_::fromString(v132);
                let v165: bool = true;
                v163
            });
            let v167: Option<string> = _optionm_map_;
            let v192: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v167));
            match &v192 {
                Spiral::US5::US5_0(v192_0_0) => match &v192 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            }
        }
        pub fn closure99(
            v0_1: string,
            v1_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v3: bool = true;
            let __future_init = Box::pin(
                /*;
                let v5: bool = */
                async {
                    /*;
                    let v7: bool = */
                    ();
                    let v9: bool = true;
                    let __future_init = Box::pin(
                        /*;
                        let v11: bool = */
                        async move {
                            /*;
                            let v13: bool = */
                            ();
                            let v15: async_walkdir::DirEntry = v1_1.clone();
                            let v17: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<std::fs::FileType, std::io::Error>,
                                        > + Send,
                                >,
                            > = Box::pin(async_walkdir::DirEntry::file_type(&v15));
                            let v19: Result<std::fs::FileType, std::io::Error> = v17.await;
                            let v20 = Spiral::method79();
                            let v33: Result<std::fs::FileType, std::string::String> =
                                v19.map_err(|x| v20(x));
                            let v36 = Spiral::method239();
                            let v37 = Spiral::method240();
                            let v39: Spiral::US47 = match &v33 {
                                Err(v33_1_0) => v37(v33_1_0.clone()),
                                Ok(v33_0_0) => v36(v33_0_0.clone()),
                            };
                            let v296: Spiral::US48 = if let Spiral::US47::US47_0(v39_0_0) = &v39 {
                                if (std::fs::FileType::is_dir(&v39_0_0.clone())) == false {
                                    Spiral::US48::US48_0
                                } else {
                                    let v48: std::path::PathBuf =
                                        async_walkdir::DirEntry::path(&v1_1.clone());
                                    let v55: std::path::Display = v48.display();
                                    let v91: std::string::String = format!("{}", v55);
                                    let v122: string = fable_library_rust::String_::fromString(v91);
                                    if (startsWith3(
                                        Spiral::method241(v122.clone()),
                                        v0_1.clone(),
                                        false,
                                    )) == false
                                    {
                                        Spiral::US48::US48_1
                                    } else {
                                        let v130: Option<string> = Spiral::method38(v122);
                                        let v155: Spiral::US5 = defaultValue(
                                            Spiral::US5::US5_1,
                                            map(Spiral::method6(), v130),
                                        );
                                        if let Spiral::US5::US5_0(v155_0_0) = &v155 {
                                            if (contains(v155_0_0.clone(), v0_1.clone())) == false {
                                                Spiral::US48::US48_2
                                            } else {
                                                Spiral::US48::US48_1
                                            }
                                        } else {
                                            Spiral::US48::US48_1
                                        }
                                    }
                                }
                            } else {
                                let v173: std::path::PathBuf = async_walkdir::DirEntry::path(&v1_1);
                                let v180: std::path::Display = v173.display();
                                let v216: std::string::String = format!("{}", v180);
                                let v247: string = fable_library_rust::String_::fromString(v216);
                                if (startsWith3(
                                    Spiral::method241(v247.clone()),
                                    v0_1.clone(),
                                    false,
                                )) == false
                                {
                                    Spiral::US48::US48_1
                                } else {
                                    let v255: Option<string> = Spiral::method38(v247);
                                    let v280: Spiral::US5 = defaultValue(
                                        Spiral::US5::US5_1,
                                        map(Spiral::method6(), v255),
                                    );
                                    if let Spiral::US5::US5_0(v280_0_0) = &v280 {
                                        if (contains(v280_0_0.clone(), v0_1)) == false {
                                            Spiral::US48::US48_2
                                        } else {
                                            Spiral::US48::US48_1
                                        }
                                    } else {
                                        Spiral::US48::US48_1
                                    }
                                }
                            };
                            let v299: string = string("}");
                            let v304: bool = true;
                            let _fix_closure_v301 = v296;
                            let v310: string = append(
                                (append(
                                    (append(
                                        (append(string("true; _fix_closure_v301 "), (v299))),
                                        string("); "),
                                    )),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v311: bool = true;
                            _fix_closure_v301
                        },
                    ); // rust.fix_closure';
                    let v313 = __future_init;
                    let v315: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Spiral::US48> + Send>,
                    > = v313;
                    let v317: Spiral::US48 = v315.await;
                    let v326: async_walkdir::Filtering = match &v317 {
                        Spiral::US48::US48_0 => async_walkdir::Filtering::Ignore,
                        Spiral::US48::US48_1 => async_walkdir::Filtering::IgnoreDir,
                        _ => async_walkdir::Filtering::Continue,
                    };
                    let v327: string = string("}");
                    let v332: bool = true;
                    let _fix_closure_v329 = v326;
                    let v338: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v329 "), (v327))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v339: bool = true;
                    _fix_closure_v329
                },
            ); // rust.fix_closure';
            let v341 = __future_init;
            v341
        }
        pub fn closure103(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method243() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral::closure103((), v))
        }
        pub fn closure104(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral::US49 {
            Spiral::US49::US49_0(v0_1)
        }
        pub fn method244() -> Func1<async_walkdir::DirEntry, Spiral::US49> {
            Func1::new(move |v: async_walkdir::DirEntry| Spiral::closure104((), v))
        }
        pub fn closure105(unitVar: (), v0_1: std::string::String) -> Spiral::US49 {
            Spiral::US49::US49_1(v0_1)
        }
        pub fn method245() -> Func1<std::string::String, Spiral::US49> {
            Func1::new(move |v: std::string::String| Spiral::closure105((), v))
        }
        pub fn method247(v0_1: std::string::String) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("error"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v66: std::string::String = format!("{:#?}", v0_1);
            let v113: () = {
                Spiral::closure7(v2.clone(), fable_library_rust::String_::fromString(v66), ());
                ()
            };
            let v132: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method246(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral::method247(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript / stream_filter_map"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure106(v0_1: std::string::String, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method246(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method82(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure102(
            v0_1: string,
            v1_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v2 = Spiral::method243();
            let v15: Result<async_walkdir::DirEntry, std::string::String> = v1_1.map_err(|x| v2(x));
            let v18 = Spiral::method244();
            let v19 = Spiral::method245();
            let v21: Spiral::US49 = match &v15 {
                Err(v15_1_0) => v19(v15_1_0.clone()),
                Ok(v15_0_0) => v18(v15_0_0.clone()),
            };
            let v830: Spiral::US50 = match &v21 {
                Spiral::US49::US49_0(v21_0_0) => {
                    let v26: std::path::PathBuf = async_walkdir::DirEntry::path(&v21_0_0.clone());
                    let v33: std::path::Display = v26.display();
                    let v69: std::string::String = format!("{}", v33);
                    let v100: string = fable_library_rust::String_::fromString(v69);
                    let v101: string =
                        concat(new_array(&[v0_1.clone(), string("\\.(?<a>[-\\d\\w.]+)$")]));
                    let v103: Result<regex::Regex, regex::Error> = regex::Regex::new(&v101);
                    let v119: Vec<std::collections::HashMap<string, string>> =
                        Spiral::method220(v100.clone(), v103.unwrap());
                    let v122: Option<std::collections::HashMap<string, string>> = tryItem(
                        0_i32,
                        fable_library_rust::NativeArray_::array_from(v119.clone()),
                    );
                    let v147: Spiral::US46 =
                        defaultValue(Spiral::US46::US46_1, map(Spiral::method221(), v122));
                    let v186: Spiral::US35 = match &v147 {
                        Spiral::US46::US46_0(v147_0_0) => {
                            let v152: string = Spiral::method222();
                            let v154: Option<string> = std::collections::HashMap::get(
                                &match &v147 {
                                    Spiral::US46::US46_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                &v152,
                            )
                            .map(|x| x)
                            .cloned();
                            Spiral::US35::US35_0(defaultValue(
                                Spiral::US5::US5_1,
                                map(Spiral::method6(), v154),
                            ))
                        }
                        _ => Spiral::US35::US35_1,
                    };
                    let v193: Spiral::US5 = if let Spiral::US35::US35_0(v186_0_0) = &v186 {
                        let v187: Spiral::US5 = v186_0_0.clone();
                        if let Spiral::US5::US5_0(v187_0_0) = &v187 {
                            Spiral::US5::US5_0(v187_0_0.clone())
                        } else {
                            Spiral::US5::US5_1
                        }
                    } else {
                        Spiral::US5::US5_1
                    };
                    match &v193 {
                        Spiral::US5::US5_0(v193_0_0) => Spiral::US50::US50_0(
                            v100.clone(),
                            match &v193 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => Spiral::US50::US50_1,
                    }
                }
                Spiral::US49::US49_1(v21_1_0) => {
                    let v513: () = {
                        Spiral::closure106(v21_1_0.clone(), ());
                        ()
                    };
                    Spiral::US50::US50_1
                }
            };
            match &v830 {
                Spiral::US50::US50_0(v830_0_0, v830_0_1) => Some((
                    match &v830 {
                        Spiral::US50::US50_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                    match &v830 {
                        Spiral::US50::US50_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method242(
            v0_1: string,
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral::closure102(v0_1.clone(), v)
                }
            })
        }
        pub fn closure107(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure108(unitVar: (), _arg: (string, string)) -> Spiral::US50 {
            Spiral::US50::US50_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method248() -> Func1<(string, string), Spiral::US50> {
            Func1::new(move |arg10_0040: (string, string)| Spiral::closure108((), arg10_0040))
        }
        pub fn method250(v0_1: Spiral::US50) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("version"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method249(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral::US50,
        ) -> string {
            let v9: string = Spiral::method250(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure109(v0_1: Spiral::US50, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method249(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method11(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method251(v0_1: string, v1_1: string, v2: Spiral::US50) {
            match &v2 {
                Spiral::US50::US50_0(v2_0_0, v2_0_1) => {
                    let v4: string = match &v2 {
                        Spiral::US50::US50_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v7: string = Spiral::method33(
                        v1_1.clone(),
                        concat(new_array(&[
                            string("fable-library-"),
                            string("ts"),
                            string("."),
                            v4.clone(),
                        ])),
                    );
                    Spiral::method204(
                        v7.clone(),
                        Spiral::method33(
                            v0_1.clone(),
                            concat(new_array(&[
                                string("fable_modules/fable-library-"),
                                string("ts"),
                                string("."),
                                v4,
                            ])),
                        ),
                    );
                    Spiral::method71(true, Spiral::method33(v7, string("fable_modules")))
                }
                _ => panic!(
                    "{}",
                    concat(new_array(&[
                        string("spiral.process_typescript / fable library not found / lib_path: "),
                        v1_1.clone()
                    ])),
                ),
            };
        }
        pub fn method252(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method214(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure110(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method252(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method254(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v16: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v2.clone(), string("new_code_path"), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method253(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method254(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure111(v0_1: string, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method253(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method11(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method255(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: LrcPtr<Spiral::UH4>,
        ) -> LrcPtr<Spiral::UH4> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral::UH4::UH4_1(
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        Spiral::method255(
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method256(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    Spiral::method256(
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure112(v0_1: string, unitVar: ()) -> string {
            let v16: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v16))
        }
        pub fn method258(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v19: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v69: std::string::String = format!("{:#?}", v0_1);
            let v116: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v69), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v154: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v188: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v205: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v224: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v241: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v258: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v275: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v294: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v311: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v328: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v347: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method257(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method258(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript / Exception"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure114(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method257(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure113(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v317: () = {
                Spiral::closure114(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method259(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method156(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript / error"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure115(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method259(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method260(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method214(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure116(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method260(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method261(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method254(v8);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python"),
                    )),
                    string(" / "),
                )),
                (v9),
            ))
        }
        pub fn closure117(v0_1: string, unitVar: ()) {
            fn v16() {
                Spiral::closure2((), ());
            }
            let v17: () = {
                v16();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v58: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v298: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v58,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v81: () = {
                    v16();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v109: Option<i64> = patternInput_1.5.clone();
                let v108: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v107: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v106: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v105: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v104: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v124: string = Spiral::method261(
                    v104.clone(),
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    Spiral::method7(v104, v105, v106, v107, v108, v109),
                    Spiral::method11(),
                    v0_1,
                );
                let v140: () = {
                    v16();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v164: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v163: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v185: () = {
                    Spiral::closure8(v163.clone(), ());
                    ()
                };
                println!("{}", v124.clone());
                (v164.l0.get().clone())(v124);
                Spiral::US6::US6_0(
                    v163,
                    v164,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure118(v0_1: string, unitVar: ()) -> string {
            let v16: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v16))
        }
        pub fn method262(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method258(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python / Exception"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure120(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method262(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure119(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v317: () = {
                Spiral::closure120(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method263(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method156(v8, v9, v10, v11);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python / error"),
                    )),
                    string(" / "),
                )),
                (v12),
            ))
        }
        pub fn closure121(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v19() {
                Spiral::closure2((), ());
            }
            let v20: () = {
                v19();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v61: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v301: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                4_i32
                    >= (find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v84: () = {
                    v19();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v112: Option<i64> = patternInput_1.5.clone();
                let v111: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v110: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v109: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v108: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v107: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v127: string = Spiral::method263(
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    v111.clone(),
                    v112.clone(),
                    Spiral::method7(v107, v108, v109, v110, v111, v112),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                );
                let v143: () = {
                    v19();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v167: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v166: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v188: () = {
                    Spiral::closure8(v166.clone(), ());
                    ()
                };
                println!("{}", v127.clone());
                (v167.l0.get().clone())(v127);
                Spiral::US6::US6_0(
                    v166,
                    v167,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn method265(v0_1: std::string::String, v1_1: clap::ArgMatches) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v17: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v3.clone(), string("subcommand"), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v67: std::string::String = format!("{:#?}", v0_1);
            let v114: () = {
                Spiral::closure7(v3.clone(), fable_library_rust::String_::fromString(v67), ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v3.clone(), string("arg_matches"), ());
                ()
            };
            let v169: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v181: std::string::String = format!("{:#?}", v1_1);
            let v228: () = {
                Spiral::closure7(
                    v3.clone(),
                    fable_library_rust::String_::fromString(v181),
                    (),
                );
                ()
            };
            let v247: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method264(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: clap::ArgMatches,
        ) -> string {
            let v10: string = Spiral::method265(v8, v9);
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / invalid subcommand"),
                    )),
                    string(" / "),
                )),
                (v10),
            ))
        }
        pub fn closure122(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            fn v17() {
                Spiral::closure2((), ());
            }
            let v18: () = {
                v17();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v59: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            let v299: Spiral::US6 = if (if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                1_i32
                    >= (find(
                        v59,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                        ])))),
                    ))
            }) == false
            {
                Spiral::US6::US6_1
            } else {
                let v82: () = {
                    v17();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v110: Option<i64> = patternInput_1.5.clone();
                let v109: LrcPtr<Spiral::Mut4> = patternInput_1.4.clone();
                let v108: LrcPtr<Spiral::Mut3> = patternInput_1.3.clone();
                let v107: LrcPtr<Spiral::Mut2> = patternInput_1.2.clone();
                let v106: LrcPtr<Spiral::Mut1> = patternInput_1.1.clone();
                let v105: LrcPtr<Spiral::Mut0> = patternInput_1.0.clone();
                let v125: string = Spiral::method264(
                    v105.clone(),
                    v106.clone(),
                    v107.clone(),
                    v108.clone(),
                    v109.clone(),
                    v110.clone(),
                    Spiral::method7(v105, v106, v107, v108, v109, v110),
                    Spiral::method11(),
                    v1_1,
                    v0_1,
                );
                let v141: () = {
                    v17();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v165: LrcPtr<Spiral::Mut1> = patternInput_2.1.clone();
                let v164: LrcPtr<Spiral::Mut0> = patternInput_2.0.clone();
                let v186: () = {
                    Spiral::closure8(v164.clone(), ());
                    ()
                };
                println!("{}", v125.clone());
                (v165.l0.get().clone())(v125);
                Spiral::US6::US6_0(
                    v164,
                    v165,
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            };
            ()
        }
        pub fn closure123(unitVar: (), v0_1: serde_json::Error) -> string {
            let v7: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v7)
        }
        pub fn method266() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral::closure123((), v))
        }
        pub fn method17(
            v0_1: Spiral::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(
                /*;
                let v5: bool = */
                async move {
                    /*;
                    let v7: bool = */
                    ();
                    let v10: Option<(std::string::String, clap::ArgMatches)> =
                        clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                            (
                                Func1::new(move |v: &str| Spiral::closure11((), v))(a),
                                b.clone(),
                            )
                        });
                    let v36: Spiral::US7 =
                        defaultValue(Spiral::US7::US7_1, map(Spiral::method18(), v10));
                    let v22893: Array<(string, string)> = if let Spiral::US7::US7_0(
                        v36_0_0,
                        v36_0_1,
                    ) = &v36
                    {
                        let v41: clap::ArgMatches = v36_0_1.clone();
                        let v40: std::string::String = v36_0_0.clone();
                        if (fable_library_rust::String_::fromString(v40.clone())) == string("gleam")
                        {
                            let v45: string = Spiral::method19();
                            let v52: &str = &*v45;
                            let v83: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v41.clone(), v52).cloned();
                            let v108: Spiral::US8 =
                                defaultValue(Spiral::US8::US8_1, map(Spiral::method20(), v83));
                            let v115: std::string::String = match &v108 {
                                Spiral::US8::US8_0(v108_0_0) => match &v108 {
                                    Spiral::US8::US8_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v117: string = fable_library_rust::String_::fromString(v115);
                            let v118: string = Spiral::method21();
                            let v125: &str = &*v118;
                            let v156: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v41.clone(), v125).cloned();
                            let v181: Spiral::US8 =
                                defaultValue(Spiral::US8::US8_1, map(Spiral::method20(), v156));
                            let v242: Spiral::US9 = match &v181 {
                                Spiral::US8::US8_0(v181_0_0) => {
                                    let v187: string = fable_library_rust::String_::fromString(
                                        match &v181 {
                                            Spiral::US8::US8_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    );
                                    let v192: string = toLower(string("JavaScript"));
                                    let v199: string = toLower(string("Erlang"));
                                    let v206: Spiral::US10 = if string("Erlang") == (v187.clone()) {
                                        Spiral::US10::US10_0(Spiral::US11::US11_0)
                                    } else {
                                        Spiral::US10::US10_1
                                    };
                                    Spiral::US9::US9_0(match &v206 {
                                        Spiral::US10::US10_0(v206_0_0) => Spiral::US10::US10_0(
                                            match &v206 {
                                                Spiral::US10::US10_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => {
                                            let v213: Spiral::US10 =
                                                if string("JavaScript") == (v187.clone()) {
                                                    Spiral::US10::US10_0(Spiral::US11::US11_1)
                                                } else {
                                                    Spiral::US10::US10_1
                                                };
                                            match &v213 {
                                                Spiral::US10::US10_0(v213_0_0) => {
                                                    Spiral::US10::US10_0(
                                                        match &v213 {
                                                            Spiral::US10::US10_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    )
                                                }
                                                _ => {
                                                    let v220: Spiral::US10 = if (v199.clone())
                                                        == (v187.clone())
                                                    {
                                                        Spiral::US10::US10_0(Spiral::US11::US11_0)
                                                    } else {
                                                        Spiral::US10::US10_1
                                                    };
                                                    match &v220 {
                                                        Spiral::US10::US10_0(v220_0_0) => {
                                                            Spiral::US10::US10_0(
                                                                match &v220 {
                                                                    Spiral::US10::US10_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => {
                                                            let v227: Spiral::US10 =
                                                                if (v192.clone()) == (v187.clone())
                                                                {
                                                                    Spiral::US10::US10_0(
                                                                        Spiral::US11::US11_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US10::US10_1
                                                                };
                                                            match &v227
                                                                                   {
                                                                                   Spiral::US10::US10_0(v227_0_0)
                                                                                   =>
                                                                                   Spiral::US10::US10_0(match &v227
                                                                                                            {
                                                                                                            Spiral::US10::US10_0(x)
                                                                                                            =>
                                                                                                            x.clone(),
                                                                                                            _
                                                                                                            =>
                                                                                                            unreachable!(),
                                                                                                        }.clone()),
                                                                                   _
                                                                                   =>
                                                                                   Spiral::US10::US10_1,
                                                                               }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    })
                                }
                                _ => Spiral::US9::US9_1,
                            };
                            let v249: Spiral::US10 = if let Spiral::US9::US9_0(v242_0_0) = &v242 {
                                let v243: Spiral::US10 = v242_0_0.clone();
                                if let Spiral::US10::US10_0(v243_0_0) = &v243 {
                                    Spiral::US10::US10_0(v243_0_0.clone())
                                } else {
                                    Spiral::US10::US10_1
                                }
                            } else {
                                Spiral::US10::US10_1
                            };
                            let v253: Spiral::US11 = match &v249 {
                                Spiral::US10::US10_0(v249_0_0) => match &v249 {
                                    Spiral::US10::US10_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => Spiral::US11::US11_0,
                            };
                            let v254: string = Spiral::method22();
                            let v261: &str = &*v254;
                            let v292: Option<Vec<std::string::String>> =
                                clap::ArgMatches::get_many(&v41.clone(), v261)
                                    .map(|x| x.cloned().into_iter().collect());
                            let v317: Spiral::US12 =
                                defaultValue(Spiral::US12::US12_1, map(Spiral::method23(), v292));
                            let v323: Vec<std::string::String> =
                                new_empty::<std::string::String>().to_vec();
                            let v326: Vec<std::string::String> = match &v317 {
                                Spiral::US12::US12_0(v317_0_0) => match &v317 {
                                    Spiral::US12::US12_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => v323.clone(),
                            };
                            let v338: Result<Vec<u8>, std::io::Error> =
                                std::fs::read(&*v117.clone());
                            let v386: Vec<u8> = Spiral::method24(v338.unwrap());
                            let v388: Result<std::string::String, std::string::FromUtf8Error> =
                                std::string::String::from_utf8(v386);
                            let v392: std::string::String = v388.unwrap();
                            let v427: string = fable_library_rust::String_::fromString(v392);
                            let v438: string =
                                Spiral::method26(Spiral::method25(string("gleam"), v427.clone()));
                            let v440: Spiral::US5 = Spiral::method32(Spiral::method31());
                            let v446: Spiral::US5 = match &v440 {
                                Spiral::US5::US5_0(v440_0_0) => Spiral::US5::US5_0(
                                    match &v440 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => Spiral::method32(string(
                                    "c:\\home\\git\\polyglot\\target\\Builder\\spiral",
                                )),
                            };
                            let v452: Spiral::US5 = match &v446 {
                                Spiral::US5::US5_0(v446_0_0) => Spiral::US5::US5_0(
                                    match &v446 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => Spiral::method32(string("/workspaces")),
                            };
                            let v456: string = match &v452 {
                                Spiral::US5::US5_0(v452_0_0) => match &v452 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v471: string = Spiral::method33(
                                if string("deps") == (Spiral::method52(v456.clone())) {
                                    let v464: Spiral::US5 = Spiral::method32(
                                        Spiral::method38(v456.clone()).clone().unwrap(),
                                    );
                                    match &v464 {
                                        Spiral::US5::US5_0(v464_0_0) => match &v464 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    }
                                } else {
                                    v456
                                },
                                string("polyglot"),
                            );
                            let v475: string = toLower(Spiral::method31());
                            let v480: string = toLower(v471);
                            let v489: Spiral::US14 = if startsWith3(v475, v480.clone(), false) {
                                Spiral::US14::US14_1(v480.clone())
                            } else {
                                Spiral::US14::US14_0(v480)
                            };
                            let v501: Result<string, string> = match &v489 {
                                Spiral::US14::US14_0(v489_0_0) => {
                                    Ok::<string, string>(v489_0_0.clone())
                                }
                                Spiral::US14::US14_1(v489_1_0) => {
                                    Err::<string, string>(v489_1_0.clone())
                                }
                            };
                            let v503: bool = true;
                            let _result_unwrap_or_else = v501.unwrap_or_else(|x| {
                                //;
                                let v505: string = x;
                                let v507: bool = true;
                                v505
                            });
                            let v510: string = Spiral::method66(_result_unwrap_or_else);
                            let v518: string = Spiral::method66(defaultValue(
                                string(""),
                                Spiral::method38(v117.clone()),
                            ));
                            let v521: string =
                                Spiral::method66(Spiral::method33(v518.clone(), string("..")));
                            let v527 = Spiral::method70(v521.clone());
                            let v541_1: LrcPtr<dyn IDisposable> = interface_cast!(
                                Spiral::Disposable::_ctor__3A5B6456(Func0::new({
                                    let v527 = v527.clone();
                                    move || v527.clone()()
                                })),
                                Lrc<dyn IDisposable>,
                            );
                            {
                                let __finally__ = finally(Func0::new({
                                    let v541_1 = v541_1.clone();
                                    move || {
                                        if type_test::<_, LrcPtr<dyn IDisposable>>(
                                            &(v541_1.clone()),
                                        ) {
                                            v541_1.clone().Dispose();
                                        }
                                    }
                                }));
                                {
                                    let v550: string =
                                        Spiral::method33(v521.clone(), string("gleam.toml"));
                                    let v557: Array<string> = new_array(&[
                                        string("gleam_stdlib=\"0.57.0\""),
                                        string("gleam_time=\">=1.0.0 and <2.0.0\""),
                                        string("gleam_erlang=\">=0.34.0 and <1.0.0\""),
                                        string("envoy=\">=1.0.0 and <2.0.0\""),
                                        string("gary=\">=1.1.0 and <2.0.0\""),
                                        string("gtempo=\">=7.1.0 and <8.0.0\""),
                                    ]);
                                    let v559: Vec<string> = v557.to_vec();
                                    let v561: bool = true;
                                    let _vec_map: Vec<_> = v559
                                        .into_iter()
                                        .map(|x| {
                                            //;
                                            let v563: string = x;
                                            let v570: &str = &*v563;
                                            let v606: std::string::String = String::from(v570);
                                            let v637: bool = true;
                                            v606
                                        })
                                        .collect::<Vec<_>>();
                                    let v639: Vec<std::string::String> = _vec_map;
                                    let v640: Vec<std::string::String> = Spiral::method73(v326);
                                    let v641: Vec<std::string::String> = Spiral::method74(v639);
                                    let v643: bool = true;
                                    let mut v641 = v641;
                                    let v645: bool = true;
                                    v641.extend(v640);
                                    let v647: Vec<std::string::String> = v641;
                                    let v649: bool = true;
                                    let _vec_map: Vec<_> = v647
                                        .into_iter()
                                        .map(|x| {
                                            //;
                                            let v651: std::string::String = x;
                                            let v653: string =
                                                fable_library_rust::String_::fromString(v651);
                                            let v672: string =
                                                if contains(v653.clone(), string("=")) {
                                                    v653.clone()
                                                } else {
                                                    if endsWith3(v653.clone(), string("]"), false) {
                                                        concat(new_array(&[
                                                            replace(
                                                                v653.clone(),
                                                                string("["),
                                                                string(
                                                                    "={version=\'*\',features=[",
                                                                ),
                                                            ),
                                                            string("}"),
                                                        ]))
                                                    } else {
                                                        concat(new_array(&[v653, string("=\'*\'")]))
                                                    }
                                                };
                                            let v674: bool = true;
                                            v672
                                        })
                                        .collect::<Vec<_>>();
                                    let v676: Vec<string> = _vec_map;
                                    let v678: Array<string> =
                                        fable_library_rust::NativeArray_::array_from(v676.clone());
                                    let _let__v683: LrcPtr<dyn IEnumerable_1<string>> =
                                        delay(Func0::new({
                                            let v678 = v678.clone();
                                            move || {
                                                map_1(
                                                    Func1::new({
                                                        let v678 = v678.clone();
                                                        move |i: i32| v678[i].clone()
                                                    }),
                                                    rangeNumeric(
                                                        0_i32,
                                                        1_i32,
                                                        (get_Count(v678.clone())) - 1_i32,
                                                    ),
                                                )
                                            }
                                        }));
                                    let v697: string =
                                        join(Spiral::method75(), toArray_1(_let__v683));
                                    let v705: Spiral::US5 = if if let Spiral::US11::US11_0 = &v253 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral::US5::US5_0(string("Erlang"))
                                    } else {
                                        Spiral::US5::US5_1
                                    };
                                    let v719: Spiral::US5 = match &v705 {
                                        Spiral::US5::US5_0(v705_0_0) => Spiral::US5::US5_0(
                                            match &v705 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => {
                                            let v712: Spiral::US5 =
                                                if if let Spiral::US11::US11_1 = &v253 {
                                                    true
                                                } else {
                                                    false
                                                } {
                                                    Spiral::US5::US5_0(string("JavaScript"))
                                                } else {
                                                    Spiral::US5::US5_1
                                                };
                                            match &v712 {
                                                Spiral::US5::US5_0(v712_0_0) => Spiral::US5::US5_0(
                                                    match &v712 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => Spiral::US5::US5_1,
                                            }
                                        }
                                    };
                                    let v726: string = toLower(match &v719 {
                                        Spiral::US5::US5_0(v719_0_0) => match &v719 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    });
                                    Spiral::method76(
                                        v550,
                                        append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        (concat(new_array(&[
                                                                            string("name = \""),
                                                                            if contains(
                                                                                v117.clone(),
                                                                                string("_real"),
                                                                            ) {
                                                                                string("main_real")
                                                                            } else {
                                                                                string("main")
                                                                            },
                                                                            string("\""),
                                                                        ]))),
                                                                        string("\n"),
                                                                    )),
                                                                    (concat(new_array(&[
                                                                        string("target = \""),
                                                                        v726,
                                                                        string("\""),
                                                                    ]))),
                                                                )),
                                                                string("\n"),
                                                            )),
                                                            string(""),
                                                        )),
                                                        string("\n"),
                                                    )),
                                                    string("[dependencies]"),
                                                )),
                                                string("\n"),
                                            )),
                                            (v697),
                                        ),
                                    );
                                    {
                                        let patternInput: (i32, string) = Spiral::method90(
                                            string("gleam check"),
                                            None::<CancellationToken>,
                                            new_empty::<(string, string)>(),
                                            None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                            None::<
                                                Func1<
                                                    std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    >,
                                                    (),
                                                >,
                                            >,
                                            true,
                                            Some(v521.clone()),
                                            true,
                                        );
                                        let v801: i32 = patternInput.0.clone();
                                        let patternInput_6: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if (v801) != 0_i32 {
                                            let v1116: () = {
                                                Spiral::closure58(
                                                    v117.clone(),
                                                    patternInput.1.clone(),
                                                    v801,
                                                    (),
                                                );
                                                ()
                                            };
                                            (
                                                Spiral::US5::US5_0(string("gleam")),
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                            )
                                        } else {
                                            let v1434: string =
                                                if if let Spiral::US11::US11_0 = &v253 {
                                                    true
                                                } else {
                                                    false
                                                } {
                                                    concat(new_array(&[
                                                        string("gleam run --no-print-progress \""),
                                                        v117.clone(),
                                                        string("\""),
                                                    ]))
                                                } else {
                                                    string("gleam build --no-print-progress")
                                                };
                                            let v1438: Array<(string, string)> = new_array(&[
                                                (string("TRACE_LEVEL"), string("")),
                                                (string("GLEAM_LOG"), string("")),
                                                (string("GLEAM_LOG_NOCOLOUR"), string("")),
                                            ]);
                                            let patternInput_1: (i32, string) = Spiral::method90(
                                                v1434.clone(),
                                                None::<CancellationToken>,
                                                v1438.clone(),
                                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                                None::<
                                                    Func1<
                                                        std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        >,
                                                        (),
                                                    >,
                                                >,
                                                true,
                                                Some(v521.clone()),
                                                false,
                                            );
                                            let v1463: string = patternInput_1.1.clone();
                                            let v1462: i32 = patternInput_1.0.clone();
                                            let v1464: i32 = get_Count(v1438.clone());
                                            let v1465: Array<string> = new_init(&string(""), v1464);
                                            let v1466: LrcPtr<Spiral::Mut5> =
                                                LrcPtr::new(Spiral::Mut5 {
                                                    l0: MutCell::new(0_i32),
                                                });
                                            while Spiral::method29(v1464, v1466.clone()) {
                                                let v1468: i32 = v1466.l0.get().clone();
                                                let patternInput_2: (string, string) =
                                                    v1438[v1468].clone();
                                                let v1471: string = sprintf!(
                                                    "$env:{}=\'\'{}\'\'",
                                                    patternInput_2.0.clone(),
                                                    patternInput_2.1.clone()
                                                );
                                                v1465.get_mut()[v1468 as usize] = v1471;
                                                {
                                                    let v1472: i32 = (v1468) + 1_i32;
                                                    v1466.l0.set(v1472);
                                                    ()
                                                }
                                            }
                                            {
                                                let v1485: string = sprintf!(
                                                    "pwsh -c \'{}; {}\'",
                                                    join(
                                                        string(";"),
                                                        toArray_1(ofArray_1(v1465.clone()))
                                                    ),
                                                    v1434
                                                );
                                                let patternInput_5: (
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                ) = if (v1462) != 0_i32 {
                                                    let v1799: () = {
                                                        Spiral::closure59(
                                                            v117.clone(),
                                                            v1463.clone(),
                                                            v1462,
                                                            v1485.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        Spiral::US5::US5_0(string("gleam")),
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                    )
                                                } else {
                                                    let v3959: string =
                                                        if if let Spiral::US11::US11_0 = &v253 {
                                                            true
                                                        } else {
                                                            false
                                                        } {
                                                            v1463
                                                        } else {
                                                            let v2115: string = concat(new_array(
                                                                &[
                                                                    v521.clone(),
                                                                    string(
                                                                        "/build/dev/javascript/main/main.mjs",
                                                                    ),
                                                                ],
                                                            ));
                                                            let v2127: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v2115.clone());
                                                            let v2175: Vec<u8> =
                                                                Spiral::method24(v2127.unwrap());
                                                            let v2177: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v2175,
                                                            );
                                                            let v2181: std::string::String =
                                                                v2177.unwrap();
                                                            let v2227:
                                                                        string =
                                                                    replace(fable_library_rust::String_::fromString(v2181),
                                                                            string("#app_"),
                                                                            concat(new_array(&[string("#app_"),
                                                                                               v438.clone()])));
                                                            if (endsWith3(
                                                                v2227.clone(),
                                                                string("main()"),
                                                                false,
                                                            )) == false
                                                            {
                                                                Spiral::method76(
                                                                    v2115.clone(),
                                                                    concat(new_array(&[
                                                                        v2227,
                                                                        string("\nmain()"),
                                                                    ])),
                                                                );
                                                            }
                                                            {
                                                                let v2253: string = concat(
                                                                    new_array(&[
                                                                        string(
                                                                            "bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir=",
                                                                        ),
                                                                        v518.clone(),
                                                                        string(" "),
                                                                        v2115,
                                                                    ]),
                                                                );
                                                                let v2255: string =
                                                                    Spiral::method3(string("PATH"));
                                                                let v2294: Spiral::US5 = if (v2255
                                                                    .clone())
                                                                    == string("")
                                                                {
                                                                    Spiral::US5::US5_1
                                                                } else {
                                                                    Spiral::US5::US5_0(concat(
                                                                        new_array(&[
                                                                            string("~/.bun/bin"),
                                                                            if cfg!(windows) {
                                                                                string(";")
                                                                            } else {
                                                                                string(":")
                                                                            },
                                                                            v2255,
                                                                        ]),
                                                                    ))
                                                                };
                                                                let patternInput_3:
                                                                            (i32,
                                                                             string) =
                                                                        Spiral::method90(v2253,
                                                                                         None::<CancellationToken>,
                                                                                         match &v2294
                                                                                             {
                                                                                             Spiral::US5::US5_0(v2294_0_0)
                                                                                             =>
                                                                                             new_array(&[(string("PATH"),
                                                                                                          match &v2294
                                                                                                              {
                                                                                                              Spiral::US5::US5_0(x)
                                                                                                              =>
                                                                                                              x.clone(),
                                                                                                              _
                                                                                                              =>
                                                                                                              unreachable!(),
                                                                                                          }.clone())]),
                                                                                             _
                                                                                             =>
                                                                                             new_empty::<(string,
                                                                                                          string)>(),
                                                                                         },
                                                                                         None::<Func1<(i32,
                                                                                                       string,
                                                                                                       bool),
                                                                                                      Arc<Async<()>>>>,
                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                      ()>>,
                                                                                         true,
                                                                                         Some(v521),
                                                                                         true);
                                                                let v2306: i32 =
                                                                    patternInput_3.0.clone();
                                                                if (v2306) != 0_i32 {
                                                                    let v2621: () = {
                                                                        Spiral::closure60(
                                                                            v117.clone(),
                                                                            patternInput_3
                                                                                .1
                                                                                .clone(),
                                                                            v2306,
                                                                            (),
                                                                        );
                                                                        ()
                                                                    };
                                                                    string("")
                                                                } else {
                                                                    let v3110:
                                                                                string =
                                                                            append((append((append((append((append(string("<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      data-trunk\n      rel=\"inline\"\n      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\"\n    />\n    <link\n      data-trunk\n      rel=\"inline\"\n      type=\"module\"\n      href=\"main.js\"\n    />\n  </head>\n  <body>\n"),
                                                                                                                   (concat(new_array(&[string("    <div id=\"app_"),
                                                                                                                                       v438.clone(),
                                                                                                                                       string("\"></div>")]))))),
                                                                                                           string("\n"))),
                                                                                                   string("  </body>"))),
                                                                                           string("\n"))),
                                                                                   string("</html>"));
                                                                    let v3113: string =
                                                                        concat(new_array(&[
                                                                            v518.clone(),
                                                                            string("/index.html"),
                                                                        ]));
                                                                    Spiral::method76(
                                                                        v3113.clone(),
                                                                        v3110,
                                                                    );
                                                                    Spiral::method76(
                                                                        concat(new_array(&[
                                                                            v518.clone(),
                                                                            string("/spiral_"),
                                                                            v438.clone(),
                                                                            string(".rs"),
                                                                        ])),
                                                                        string(""),
                                                                    );
                                                                    {
                                                                        let v3194:
                                                                                    string =
                                                                                append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                                                                                       (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                                                                           v438.clone(),
                                                                                                                                                                                                                                           string("\"")]))))),
                                                                                                                                                                                                               string("\n"))),
                                                                                                                                                                                                       string(""))),
                                                                                                                                                                                               string("\n"))),
                                                                                                                                                                                       string("[workspace]"))),
                                                                                                                                                                               string("\n"))),
                                                                                                                                                                       string(""))),
                                                                                                                                                               string("\n"))),
                                                                                                                                                       string("[lib]"))),
                                                                                                                                               string("\n"))),
                                                                                                                                       string("crate-type = [\"cdylib\", \"rlib\"]"))),
                                                                                                                               string("\n"))),
                                                                                                                       (concat(new_array(&[string("path = \"spiral_"),
                                                                                                                                           v438,
                                                                                                                                           string(".rs\"")]))))),
                                                                                                               string("\n"))),
                                                                                                       string(""))),
                                                                                               string("\n"))),
                                                                                       string("[dependencies]"));
                                                                        Spiral::method76(
                                                                            concat(new_array(&[
                                                                                v518.clone(),
                                                                                string(
                                                                                    "/Cargo.toml",
                                                                                ),
                                                                            ])),
                                                                            v3194,
                                                                        );
                                                                        {
                                                                            let patternInput_4:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method90(concat(new_array(&[string("trunk build --release --minify --dist="),
                                                                                                                        v518.clone(),
                                                                                                                        string(" --public-url=./ --no-sri")])),
                                                                                                     None::<CancellationToken>,
                                                                                                     new_array(&[(string("TRUNK_TOOLS_WASM_BINDGEN"),
                                                                                                                  string("0.2.93"))]),
                                                                                                     None::<Func1<(i32,
                                                                                                                   string,
                                                                                                                   bool),
                                                                                                                  Arc<Async<()>>>>,
                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                  ()>>,
                                                                                                     true,
                                                                                                     Some(v518),
                                                                                                     true);
                                                                            let v3225: i32 =
                                                                                patternInput_4
                                                                                    .0
                                                                                    .clone();
                                                                            if (v3225) == 0_i32 {
                                                                                let v3239: Result<
                                                                                    Vec<u8>,
                                                                                    std::io::Error,
                                                                                > = std::fs::read(
                                                                                    &*v3113,
                                                                                );
                                                                                let v3287: Vec<u8> =
                                                                                    Spiral::method24(
                                                                                        v3239
                                                                                            .unwrap(
                                                                                            ),
                                                                                    );
                                                                                let v3289:
                                                                                            Result<std::string::String,
                                                                                                   std::string::FromUtf8Error> =
                                                                                        std::string::String::from_utf8(v3287);
                                                                                let v3293:
                                                                                            std::string::String =
                                                                                        v3289.unwrap();
                                                                                fable_library_rust::String_::fromString(v3293)
                                                                            } else {
                                                                                let v3646: () = {
                                                                                    Spiral::closure61(v117.clone(),
                                                                                                              patternInput_4.1.clone(),
                                                                                                              v3225,
                                                                                                              ());
                                                                                    ()
                                                                                };
                                                                                string("")
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                    let v3966: &str = &*v3959.clone();
                                                    let v4002: std::string::String =
                                                        String::from(v3966);
                                                    let result: LrcPtr<MutCell<Spiral::US5>> =
                                                        refCell(Spiral::US5::US5_1);
                                                    try_catch(
                                                        || {
                                                            result.set(Spiral::closure62(
                                                                (),
                                                                Spiral::closure63(v3959, ()),
                                                            ))
                                                        },
                                                        |ex: LrcPtr<Exception>| {
                                                            result.set(Spiral::closure65(
                                                                v117.clone(),
                                                                v1485,
                                                                v4002,
                                                                ex.clone(),
                                                            ))
                                                        },
                                                    );
                                                    {
                                                        let v4038: Spiral::US5 =
                                                            result.get().clone();
                                                        let v4052: Option<string> = match &v4038 {
                                                            Spiral::US5::US5_0(v4038_0_0) => Some(
                                                                match &v4038 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            ),
                                                            _ => None::<string>,
                                                        };
                                                        (
                                                            Spiral::US5::US5_0(string("gleam")),
                                                            Spiral::US5::US5_0(v427),
                                                            Spiral::US5::US5_0(v117),
                                                            Spiral::US5::US5_0(v4052.unwrap()),
                                                        )
                                                    }
                                                };
                                                (
                                                    patternInput_5.0.clone(),
                                                    patternInput_5.1.clone(),
                                                    patternInput_5.2.clone(),
                                                    patternInput_5.3.clone(),
                                                )
                                            }
                                        };
                                        let v4066: Spiral::US5 = patternInput_6.3.clone();
                                        let v4064: Spiral::US5 = patternInput_6.1.clone();
                                        let v4063: Spiral::US5 = patternInput_6.0.clone();
                                        let v4079: Array<(string, string)> = new_array(&[
                                            (
                                                string("extension"),
                                                match &v4063 {
                                                    Spiral::US5::US5_0(v4063_0_0) => match &v4063 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code"),
                                                match &v4064 {
                                                    Spiral::US5::US5_0(v4064_0_0) => match &v4064 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("output"),
                                                match &v4066 {
                                                    Spiral::US5::US5_0(v4066_0_0) => match &v4066 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                        ]);
                                        let v4081: Vec<(string, string)> = v4079.to_vec();
                                        let v4084: bool = true;
                                        let _func1_from_v4082 = Func1::from(move |value| {
                                            //;
                                            let patternInput_7: (string, string) = value;
                                            let v4094: &str = &*patternInput_7.0.clone();
                                            let v4130: std::string::String = String::from(v4094);
                                            let v4166: &str = &*patternInput_7.1.clone();
                                            let v4202: std::string::String = String::from(v4166);
                                            let v4238: bool = true;
                                            LrcPtr::new((v4130, v4202)) /*;
                                            let v4240: bool = */
                                        }); //;
                                        let v4242: Func1<
                                            (string, string),
                                            LrcPtr<(std::string::String, std::string::String)>,
                                        > = _func1_from_v4082;
                                        let v4245: Vec<
                                            LrcPtr<(std::string::String, std::string::String)>,
                                        > = v4081
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v4242 = v4242.clone();
                                                    move |arg10_0040_5: (string, string)| {
                                                        Spiral::closure67(
                                                            v4242.clone(),
                                                            arg10_0040_5,
                                                        )
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v4246: string = string(
                                            "std::collections::BTreeMap::from_iter(v4245.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))",
                                        );
                                        let v4247: std::collections::BTreeMap<
                                            std::string::String,
                                            std::string::String,
                                        > = std::collections::BTreeMap::from_iter(
                                            v4245
                                                .iter()
                                                .map(|x| x.as_ref())
                                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                                        );
                                        let v4249: Result<std::string::String, serde_json::Error> =
                                            serde_json::to_string(&v4247);
                                        let v4253: std::string::String = v4249.unwrap();
                                        new_array(&[(
                                            string("command_result"),
                                            fable_library_rust::String_::fromString(v4253),
                                        )])
                                    }
                                }
                            }
                        } else {
                            if (fable_library_rust::String_::fromString(v40.clone()))
                                == string("cuda")
                            {
                                let v4272: string = Spiral::method164();
                                let v4279: &str = &*v4272;
                                let v4310: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v41.clone(), v4279).cloned();
                                let v4335: Spiral::US8 = defaultValue(
                                    Spiral::US8::US8_1,
                                    map(Spiral::method20(), v4310),
                                );
                                let v4342: std::string::String = match &v4335 {
                                    Spiral::US8::US8_0(v4335_0_0) => match &v4335 {
                                        Spiral::US8::US8_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => panic!("{}", string("Option does not have a value."),),
                                };
                                let v4344: string = fable_library_rust::String_::fromString(v4342);
                                let v4345: string = Spiral::method165();
                                let v4352: &str = &*v4345;
                                let v4383: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v41.clone(), v4352).cloned();
                                let v4408: Spiral::US8 = defaultValue(
                                    Spiral::US8::US8_1,
                                    map(Spiral::method20(), v4383),
                                );
                                let v4469: Spiral::US36 = match &v4408 {
                                    Spiral::US8::US8_0(v4408_0_0) => {
                                        let v4414: string = fable_library_rust::String_::fromString(
                                            match &v4408 {
                                                Spiral::US8::US8_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v4419: string = toLower(string("Poetry"));
                                        let v4426: string = toLower(string("Pip"));
                                        let v4433: Spiral::US37 =
                                            if string("Pip") == (v4414.clone()) {
                                                Spiral::US37::US37_0(Spiral::US38::US38_0)
                                            } else {
                                                Spiral::US37::US37_1
                                            };
                                        Spiral::US36::US36_0(match &v4433 {
                                            Spiral::US37::US37_0(v4433_0_0) => {
                                                Spiral::US37::US37_0(
                                                    match &v4433 {
                                                        Spiral::US37::US37_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                )
                                            }
                                            _ => {
                                                let v4440: Spiral::US37 =
                                                    if string("Poetry") == (v4414.clone()) {
                                                        Spiral::US37::US37_0(Spiral::US38::US38_1)
                                                    } else {
                                                        Spiral::US37::US37_1
                                                    };
                                                match &v4440 {
                                                    Spiral::US37::US37_0(v4440_0_0) => {
                                                        Spiral::US37::US37_0(
                                                            match &v4440 {
                                                                Spiral::US37::US37_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => {
                                                        let v4447: Spiral::US37 =
                                                            if (v4426.clone()) == (v4414.clone()) {
                                                                Spiral::US37::US37_0(
                                                                    Spiral::US38::US38_0,
                                                                )
                                                            } else {
                                                                Spiral::US37::US37_1
                                                            };
                                                        match &v4447 {
                                                            Spiral::US37::US37_0(v4447_0_0) => {
                                                                Spiral::US37::US37_0(
                                                                    match &v4447 {
                                                                        Spiral::US37::US37_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone(),
                                                                )
                                                            }
                                                            _ => {
                                                                let v4454: Spiral::US37 = if (v4419
                                                                    .clone())
                                                                    == (v4414.clone())
                                                                {
                                                                    Spiral::US37::US37_0(
                                                                        Spiral::US38::US38_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US37::US37_1
                                                                };
                                                                match &v4454
                                                                                         {
                                                                                         Spiral::US37::US37_0(v4454_0_0)
                                                                                         =>
                                                                                         Spiral::US37::US37_0(match &v4454
                                                                                                                  {
                                                                                                                  Spiral::US37::US37_0(x)
                                                                                                                  =>
                                                                                                                  x.clone(),
                                                                                                                  _
                                                                                                                  =>
                                                                                                                  unreachable!(),
                                                                                                              }.clone()),
                                                                                         _
                                                                                         =>
                                                                                         Spiral::US37::US37_1,
                                                                                     }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        })
                                    }
                                    _ => Spiral::US36::US36_1,
                                };
                                let v4476: Spiral::US37 =
                                    if let Spiral::US36::US36_0(v4469_0_0) = &v4469 {
                                        let v4470: Spiral::US37 = v4469_0_0.clone();
                                        if let Spiral::US37::US37_0(v4470_0_0) = &v4470 {
                                            Spiral::US37::US37_0(v4470_0_0.clone())
                                        } else {
                                            Spiral::US37::US37_1
                                        }
                                    } else {
                                        Spiral::US37::US37_1
                                    };
                                let v4480: Spiral::US38 = match &v4476 {
                                    Spiral::US37::US37_0(v4476_0_0) => match &v4476 {
                                        Spiral::US37::US37_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => Spiral::US38::US38_0,
                                };
                                let v4481: string = Spiral::method22();
                                let v4488: &str = &*v4481;
                                let v4519: Option<Vec<std::string::String>> =
                                    clap::ArgMatches::get_many(&v41.clone(), v4488)
                                        .map(|x| x.cloned().into_iter().collect());
                                let v4544: Spiral::US12 = defaultValue(
                                    Spiral::US12::US12_1,
                                    map(Spiral::method23(), v4519),
                                );
                                let v4550: Vec<std::string::String> =
                                    new_empty::<std::string::String>().to_vec();
                                let v4553: Vec<std::string::String> = match &v4544 {
                                    Spiral::US12::US12_0(v4544_0_0) => match &v4544 {
                                        Spiral::US12::US12_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => v4550.clone(),
                                };
                                let v4565: Result<Vec<u8>, std::io::Error> =
                                    std::fs::read(&*v4344.clone());
                                let v4613: Vec<u8> = Spiral::method24(v4565.unwrap());
                                let v4615: Result<std::string::String, std::string::FromUtf8Error> =
                                    std::string::String::from_utf8(v4613);
                                let v4619: std::string::String = v4615.unwrap();
                                let v4632: string = fable_library_rust::String_::fromString(v4619);
                                let v4664: Spiral::US5 = Spiral::method32(Spiral::method31());
                                let v4670: Spiral::US5 = match &v4664 {
                                    Spiral::US5::US5_0(v4664_0_0) => Spiral::US5::US5_0(
                                        match &v4664 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::method32(string(
                                        "c:\\home\\git\\polyglot\\target\\Builder\\spiral",
                                    )),
                                };
                                let v4676: Spiral::US5 = match &v4670 {
                                    Spiral::US5::US5_0(v4670_0_0) => Spiral::US5::US5_0(
                                        match &v4670 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::method32(string("/workspaces")),
                                };
                                let v4680: string = match &v4676 {
                                    Spiral::US5::US5_0(v4676_0_0) => match &v4676 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => panic!("{}", string("Option does not have a value."),),
                                };
                                let v4695: string = Spiral::method33(
                                    if string("deps") == (Spiral::method52(v4680.clone())) {
                                        let v4688: Spiral::US5 = Spiral::method32(
                                            Spiral::method38(v4680.clone()).clone().unwrap(),
                                        );
                                        match &v4688 {
                                            Spiral::US5::US5_0(v4688_0_0) => match &v4688 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        }
                                    } else {
                                        v4680
                                    },
                                    string("polyglot"),
                                );
                                let v4699: string = toLower(Spiral::method31());
                                let v4704: string = toLower(v4695);
                                let v4713: Spiral::US14 =
                                    if startsWith3(v4699, v4704.clone(), false) {
                                        Spiral::US14::US14_1(v4704.clone())
                                    } else {
                                        Spiral::US14::US14_0(v4704)
                                    };
                                let v4725: Result<string, string> = match &v4713 {
                                    Spiral::US14::US14_0(v4713_0_0) => {
                                        Ok::<string, string>(v4713_0_0.clone())
                                    }
                                    Spiral::US14::US14_1(v4713_1_0) => {
                                        Err::<string, string>(v4713_1_0.clone())
                                    }
                                };
                                let v4727: bool = true;
                                let _result_unwrap_or_else = v4725.unwrap_or_else(|x| {
                                    //;
                                    let v4729: string = x;
                                    let v4731: bool = true;
                                    v4729
                                });
                                let v4733: string = _result_unwrap_or_else;
                                let v4738: string =
                                    defaultValue(string(""), Spiral::method38(v4344.clone()));
                                let v4746: string = match &v4480 {
                                    Spiral::US38::US38_1 => {
                                        Spiral::method33(v4738.clone(), string("pyproject.toml"))
                                    }
                                    _ => {
                                        Spiral::method33(v4738.clone(), string("requirements.txt"))
                                    }
                                };
                                let v4748: bool = true;
                                let _vec_map: Vec<_> = v4553
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v4750: std::string::String = x;
                                        let v4752: string =
                                            fable_library_rust::String_::fromString(v4750);
                                        let v4771: string = if contains(v4752.clone(), string("="))
                                        {
                                            v4752.clone()
                                        } else {
                                            if endsWith3(v4752.clone(), string("]"), false) {
                                                concat(new_array(&[
                                                    replace(
                                                        v4752.clone(),
                                                        string("["),
                                                        string("={version=\'*\',features=["),
                                                    ),
                                                    string("}"),
                                                ]))
                                            } else {
                                                concat(new_array(&[v4752, string("=\'*\'")]))
                                            }
                                        };
                                        let v4773: bool = true;
                                        v4771
                                    })
                                    .collect::<Vec<_>>();
                                let v4775: Vec<string> = _vec_map;
                                let v4777: Array<string> =
                                    fable_library_rust::NativeArray_::array_from(v4775.clone());
                                let _let__v4782: LrcPtr<dyn IEnumerable_1<string>> =
                                    delay(Func0::new({
                                        let v4777 = v4777.clone();
                                        move || {
                                            map_1(
                                                Func1::new({
                                                    let v4777 = v4777.clone();
                                                    move |i_1: i32| v4777[i_1].clone()
                                                }),
                                                rangeNumeric(
                                                    0_i32,
                                                    1_i32,
                                                    (get_Count(v4777.clone())) - 1_i32,
                                                ),
                                            )
                                        }
                                    }));
                                let v4796: string =
                                    join(Spiral::method75(), toArray_1(_let__v4782));
                                let patternInput_8: (i32, string) = if (v4796.clone()) == string("")
                                {
                                    (0_i32, string(""))
                                } else {
                                    Spiral::method76(
                                        v4746,
                                        match &v4480 {
                                            Spiral::US38::US38_1 => append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(
                                                                                    "[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n",
                                                                                ),
                                                                                (v4796.clone()),
                                                                            )),
                                                                            string("\n"),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string("\n"),
                                                                )),
                                                                string("[build-system]"),
                                                            )),
                                                            string("\n"),
                                                        )),
                                                        string("requires = [\"poetry-core\"]"),
                                                    )),
                                                    string("\n"),
                                                )),
                                                string(
                                                    "build-backend = \"poetry.core.masonry.api\"",
                                                ),
                                            ),
                                            _ => v4796.clone(),
                                        },
                                    );
                                    Spiral::method90(
                                        match &v4480 {
                                            Spiral::US38::US38_1 => string("poetry install"),
                                            _ => string("pip install -r requirements.txt"),
                                        },
                                        None::<CancellationToken>,
                                        new_empty::<(string, string)>(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v4738.clone()),
                                        true,
                                    )
                                };
                                let v4943: i32 = patternInput_8.0.clone();
                                let patternInput_12: (
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                ) = if (v4943) != 0_i32 {
                                    let v5260: () = {
                                        Spiral::closure68(
                                            v4480.clone(),
                                            v4344.clone(),
                                            patternInput_8.1.clone(),
                                            v4943,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral::US5::US5_0(string("py")),
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                    )
                                } else {
                                    let v5581: string = match &v4480 {
                                        Spiral::US38::US38_1 => concat(new_array(&[
                                            string("poetry run python \""),
                                            v4344.clone(),
                                            string("\""),
                                        ])),
                                        _ => concat(new_array(&[
                                            string("python \""),
                                            v4344.clone(),
                                            string("\""),
                                        ])),
                                    };
                                    let v5584: Array<(string, string)> =
                                        new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                                    let patternInput_9: (i32, string) = Spiral::method90(
                                        v5581.clone(),
                                        None::<CancellationToken>,
                                        v5584.clone(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v4738.clone()),
                                        true,
                                    );
                                    let v5609: string = patternInput_9.1.clone();
                                    let v5608: i32 = patternInput_9.0.clone();
                                    let v5610: i32 = get_Count(v5584.clone());
                                    let v5611: Array<string> = new_init(&string(""), v5610);
                                    let v5612: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v5610, v5612.clone()) {
                                        let v5614: i32 = v5612.l0.get().clone();
                                        let patternInput_10: (string, string) =
                                            v5584[v5614].clone();
                                        let v5617: string = sprintf!(
                                            "$env:{}=\'\'{}\'\'",
                                            patternInput_10.0.clone(),
                                            patternInput_10.1.clone()
                                        );
                                        v5611.get_mut()[v5614 as usize] = v5617;
                                        {
                                            let v5618: i32 = (v5614) + 1_i32;
                                            v5612.l0.set(v5618);
                                            ()
                                        }
                                    }
                                    {
                                        let v5631: string = sprintf!(
                                            "pwsh -c \'{}; {}\'",
                                            join(string(";"), toArray_1(ofArray_1(v5611.clone()))),
                                            v5581
                                        );
                                        let patternInput_11: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if if (v5608) == 0_i32 {
                                            true
                                        } else {
                                            contains(
                                                v5609.clone(),
                                                string(
                                                    "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver",
                                                ),
                                            )
                                        } {
                                            let result_1: LrcPtr<MutCell<Spiral::US5>> =
                                                refCell(Spiral::US5::US5_1);
                                            try_catch(
                                                || {
                                                    result_1.set(Spiral::closure62(
                                                        (),
                                                        Spiral::closure69(v5609.clone(), ()),
                                                    ))
                                                },
                                                |ex_1: LrcPtr<Exception>| {
                                                    result_1.set(Spiral::closure70(
                                                        v4344.clone(),
                                                        v5609.clone(),
                                                        v5631.clone(),
                                                        ex_1.clone(),
                                                    ))
                                                },
                                            );
                                            {
                                                let v5646: Spiral::US5 = result_1.get().clone();
                                                let v5660: Option<string> = match &v5646 {
                                                    Spiral::US5::US5_0(v5646_0_0) => Some(
                                                        match &v5646 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    ),
                                                    _ => None::<string>,
                                                };
                                                (
                                                    Spiral::US5::US5_0(string("py")),
                                                    Spiral::US5::US5_0(v4632),
                                                    Spiral::US5::US5_0(v4344.clone()),
                                                    Spiral::US5::US5_0(v5660.unwrap()),
                                                )
                                            }
                                        } else {
                                            let v5979: () = {
                                                Spiral::closure72(
                                                    v4344.clone(),
                                                    v5609,
                                                    v5608,
                                                    v5631,
                                                    (),
                                                );
                                                ()
                                            };
                                            (
                                                Spiral::US5::US5_0(string("py")),
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                            )
                                        };
                                        (
                                            patternInput_11.0.clone(),
                                            patternInput_11.1.clone(),
                                            patternInput_11.2.clone(),
                                            patternInput_11.3.clone(),
                                        )
                                    }
                                };
                                let v6304: Spiral::US5 = patternInput_12.3.clone();
                                let v6302: Spiral::US5 = patternInput_12.1.clone();
                                let v6301: Spiral::US5 = patternInput_12.0.clone();
                                let v6317: Array<(string, string)> = new_array(&[
                                    (
                                        string("extension"),
                                        match &v6301 {
                                            Spiral::US5::US5_0(v6301_0_0) => match &v6301 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v6302 {
                                            Spiral::US5::US5_0(v6302_0_0) => match &v6302 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v6304 {
                                            Spiral::US5::US5_0(v6304_0_0) => match &v6304 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                ]);
                                let v6319: Vec<(string, string)> = v6317.to_vec();
                                let v6322: bool = true;
                                let _func1_from_v6320 = Func1::from(move |value| {
                                    //;
                                    let patternInput_13: (string, string) = value;
                                    let v6332: &str = &*patternInput_13.0.clone();
                                    let v6368: std::string::String = String::from(v6332);
                                    let v6404: &str = &*patternInput_13.1.clone();
                                    let v6440: std::string::String = String::from(v6404);
                                    let v6476: bool = true;
                                    LrcPtr::new((v6368, v6440)) /*;
                                    let v6478: bool = */
                                }); //;
                                let v6480: Func1<
                                    (string, string),
                                    LrcPtr<(std::string::String, std::string::String)>,
                                > = _func1_from_v6320;
                                let v6483: Vec<LrcPtr<(std::string::String, std::string::String)>> =
                                    v6319
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v6480 = v6480.clone();
                                                move |arg10_0040_9: (string, string)| {
                                                    Spiral::closure67(v6480.clone(), arg10_0040_9)
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                let v6484: string = string(
                                    "std::collections::BTreeMap::from_iter(v6483.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))",
                                );
                                let v6485: std::collections::BTreeMap<
                                    std::string::String,
                                    std::string::String,
                                > = std::collections::BTreeMap::from_iter(
                                    v6483
                                        .iter()
                                        .map(|x| x.as_ref())
                                        .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                                );
                                let v6487: Result<std::string::String, serde_json::Error> =
                                    serde_json::to_string(&v6485);
                                let v6491: std::string::String = v6487.unwrap();
                                new_array(&[(
                                    string("command_result"),
                                    fable_library_rust::String_::fromString(v6491),
                                )])
                            } else {
                                if (fable_library_rust::String_::fromString(v40.clone()))
                                    == string("fable")
                                {
                                    let v6510: string = Spiral::method171();
                                    let v6517: &str = &*v6510;
                                    let v6548: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v41.clone(), v6517).cloned();
                                    let v6573: Spiral::US8 = defaultValue(
                                        Spiral::US8::US8_1,
                                        map(Spiral::method20(), v6548),
                                    );
                                    let v6580: std::string::String = match &v6573 {
                                        Spiral::US8::US8_0(v6573_0_0) => match &v6573 {
                                            Spiral::US8::US8_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v6582: string =
                                        fable_library_rust::String_::fromString(v6580);
                                    let v6583: string = Spiral::method172();
                                    let v6590: &str = &*v6583;
                                    let v6621: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v41.clone(), v6590).cloned();
                                    let v6646: Spiral::US8 = defaultValue(
                                        Spiral::US8::US8_1,
                                        map(Spiral::method20(), v6621),
                                    );
                                    let v6656: Spiral::US5 = match &v6646 {
                                        Spiral::US8::US8_0(v6646_0_0) => Spiral::US5::US5_0(
                                            fable_library_rust::String_::fromString(
                                                match &v6646 {
                                                    Spiral::US8::US8_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    };
                                    new_array(&[(
                                        string("command_result"),
                                        match &v6656 {
                                            Spiral::US5::US5_0(v6656_0_0) => {
                                                let v6658: clap::Command = Spiral::method0();
                                                let v6660: Spiral::US26 =
                                                    Spiral::method113(sprintf!(
                                                        "_ {} --fs-path \"{}\"",
                                                        match &v6656 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                        v6582.clone()
                                                    ));
                                                let v6669: Array<string> = match &v6660 {
                                                    Spiral::US26::US26_0(v6660_0_0) => {
                                                        v6660_0_0.clone()
                                                    }
                                                    Spiral::US26::US26_1(v6660_1_0) => panic!(
                                                        "{}",
                                                        concat(new_array(&[
                                                            string("resultm.get / Error x: "),
                                                            v6660_1_0.clone()
                                                        ])),
                                                    ),
                                                };
                                                let v6671: Vec<string> = v6669.to_vec();
                                                let v6673: bool = true;
                                                let _vec_map: Vec<_> = v6671
                                                    .into_iter()
                                                    .map(|x| {
                                                        //;
                                                        let v6675: string = x;
                                                        let v6682: &str = &*v6675;
                                                        let v6718: std::string::String =
                                                            String::from(v6682);
                                                        let v6749: bool = true;
                                                        v6718
                                                    })
                                                    .collect::<Vec<_>>();
                                                let v6751: Vec<std::string::String> = _vec_map;
                                                let v6754: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                                Output = Result<string, string>,
                                                            >,
                                                    >,
                                                > = Spiral::method17(
                                                    v0_1.clone(),
                                                    clap::Command::get_matches_from(v6658, v6751),
                                                );
                                                let v6756: Result<string, string> = v6754.await;
                                                v6756.unwrap()
                                            }
                                            _ => string("{}"),
                                        },
                                    )])
                                } else {
                                    if (fable_library_rust::String_::fromString(v40.clone()))
                                        == string("dib")
                                    {
                                        let v6780: string = Spiral::method173();
                                        let v6787: &str = &*v6780;
                                        let v6818: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v41.clone(), v6787).cloned();
                                        let v6822: Option<string> = map(Spiral::method174(), v6818);
                                        let v6843: string = v6822.unwrap();
                                        let v6844: string = Spiral::method176();
                                        let v6851: &str = &*v6844;
                                        let v6884: u8 = defaultValue(
                                            1_u8,
                                            clap::ArgMatches::get_one(&v41.clone(), v6851).cloned(),
                                        );
                                        let v6887: string = Spiral::method177();
                                        let v6894: &str = &*v6887;
                                        let v6925: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v41.clone(), v6894).cloned();
                                        let v6950: Spiral::US8 = defaultValue(
                                            Spiral::US8::US8_1,
                                            map(Spiral::method20(), v6925),
                                        );
                                        let v6960: Spiral::US5 = match &v6950 {
                                            Spiral::US8::US8_0(v6950_0_0) => Spiral::US5::US5_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v6950 {
                                                        Spiral::US8::US8_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                            ),
                                            _ => Spiral::US5::US5_1,
                                        };
                                        let v6961: string =
                                            concat(new_array(&[v6843.clone(), string(".html")]));
                                        let v6962: string =
                                            concat(new_array(&[v6843.clone(), string(".ipynb")]));
                                        let patternInput_14: (i32, string) = Spiral::method178(
                                            v6960,
                                            v6884,
                                            v6843,
                                            v6962.clone(),
                                            1_u8,
                                        );
                                        let v6965: string = patternInput_14.1.clone();
                                        let v6964: i32 = patternInput_14.0.clone();
                                        let patternInput_17: (i32, string) = if (v6964) != 0_i32 {
                                            (v6964, v6965.clone())
                                        } else {
                                            let patternInput_15: (i32, string) = Spiral::method90(
                                                concat(new_array(&[
                                                    string("jupyter nbconvert \""),
                                                    v6962.clone(),
                                                    string(
                                                        "\" --to html --HTMLExporter.theme=dark",
                                                    ),
                                                ])),
                                                None::<CancellationToken>,
                                                new_empty::<(string, string)>(),
                                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                                None::<
                                                    Func1<
                                                        std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        >,
                                                        (),
                                                    >,
                                                >,
                                                true,
                                                None::<string>,
                                                true,
                                            );
                                            let v6991: string = patternInput_15.1.clone();
                                            let v6990: i32 = patternInput_15.0.clone();
                                            let v7306: () = {
                                                Spiral::closure75(v6991.clone(), v6990, ());
                                                ()
                                            };
                                            if (v6990) != 0_i32 {
                                                (
                                                    v6990,
                                                    concat(new_array(&[
                                                        string("repl_result: "),
                                                        v6965.clone(),
                                                        string("\n\njupyter_result: "),
                                                        v6991.clone(),
                                                    ])),
                                                )
                                            } else {
                                                let v7638: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v6961.clone());
                                                let v7686: Vec<u8> =
                                                    Spiral::method24(v7638.unwrap());
                                                let v7688: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v7686);
                                                let v7692: std::string::String = v7688.unwrap();
                                                let v7738: string = replace(
                                                    fable_library_rust::String_::fromString(v7692),
                                                    string("\r\n"),
                                                    string("\n"),
                                                );
                                                std::fs::write(&*v6961.clone(), &*v7738).unwrap();
                                                {
                                                    let patternInput_16:
                                                            (i32, string) =
                                                        Spiral::method90(concat(new_array(&[string("pwsh -c \"$counter = 1; $path = \'"),
                                                                                            replace(v6961.clone(),
                                                                                                    string("\'"),
                                                                                                    string("\'\'")),
                                                                                            string("\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{8}\', { $_.Groups[1].Value + $counter++ } | Set-Content $path\"")])),
                                                                         None::<CancellationToken>,
                                                                         new_empty::<(string,
                                                                                      string)>(),
                                                                         None::<Func1<(i32,
                                                                                       string,
                                                                                       bool),
                                                                                      Arc<Async<()>>>>,
                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                      ()>>,
                                                                         true,
                                                                         None::<string>,
                                                                         true);
                                                    let v7765: string = patternInput_16.1.clone();
                                                    let v7764: i32 = patternInput_16.0.clone();
                                                    let v8078: () = {
                                                        Spiral::closure76(v7765.clone(), v7764, ());
                                                        ()
                                                    };
                                                    (
                                                        v7764,
                                                        sprintf!(
                                                            "repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                            v6965,
                                                            v6991,
                                                            v7765
                                                        ),
                                                    )
                                                }
                                            }
                                        };
                                        let v8396: string = patternInput_17.1.clone();
                                        let v8395: i32 = patternInput_17.0.clone();
                                        if (Spiral::method3(string("CI"))) == string("") {
                                            let v8402: Result<(), std::io::Error> =
                                                std::fs::remove_file(&*v6962);
                                            let v8403 = Spiral::method46();
                                            let v8416: Result<(), string> =
                                                v8402.map_err(|x| v8403(x));
                                            let v8419 = Spiral::method185();
                                            let v8420 = Spiral::method186();
                                            let v8422: Spiral::US39 = match &v8416 {
                                                Err(v8416_1_0) => v8420(v8416_1_0.clone()),
                                                _ => v8419(),
                                            };
                                            match &v8422 {
                                                Spiral::US39::US39_0 => (),
                                                Spiral::US39::US39_1(v8422_1_0) => {
                                                    let v8739: () = {
                                                        Spiral::closure79(
                                                            match &v8422 {
                                                                Spiral::US39::US39_1(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    ()
                                                }
                                            }
                                            {
                                                let v9057: Result<(), std::io::Error> =
                                                    std::fs::remove_file(&*v6961);
                                                let v9058 = Spiral::method46();
                                                let v9071: Result<(), string> =
                                                    v9057.map_err(|x| v9058(x));
                                                let v9074 = Spiral::method185();
                                                let v9075 = Spiral::method186();
                                                let v9077: Spiral::US39 = match &v9071 {
                                                    Err(v9071_1_0) => v9075(v9071_1_0.clone()),
                                                    _ => v9074(),
                                                };
                                                match &v9077 {
                                                    Spiral::US39::US39_0 => (),
                                                    Spiral::US39::US39_1(v9077_1_0) => {
                                                        let v9394: () = {
                                                            Spiral::closure79(
                                                                match &v9077 {
                                                                    Spiral::US39::US39_1(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                }
                                                ()
                                            }
                                        }
                                        {
                                            let v10024: () = {
                                                Spiral::closure80(v8396.clone(), v8395, ());
                                                ()
                                            };
                                            if (v8395) != 0_i32 {
                                                panic!(
                                                    "{}",
                                                    sprintf!(
                                                        "spiral.process_dib / dib / exit_code: {} / result: \'{}\'",
                                                        v8395,
                                                        v8396.clone()
                                                    )
                                                );
                                            }
                                            new_array(&[(string("stdio"), v8396)])
                                        }
                                    } else {
                                        let patternInput_40: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if (fable_library_rust::String_::fromString(
                                            v40.clone(),
                                        )) == string("rust")
                                        {
                                            let v10350: string = Spiral::method171();
                                            let v10357: &str = &*v10350;
                                            let v10388: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v10357)
                                                    .cloned();
                                            let v10413: Spiral::US8 = defaultValue(
                                                Spiral::US8::US8_1,
                                                map(Spiral::method20(), v10388),
                                            );
                                            let v10420: std::string::String = match &v10413 {
                                                Spiral::US8::US8_0(v10413_0_0) => match &v10413 {
                                                    Spiral::US8::US8_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v10422: string =
                                                fable_library_rust::String_::fromString(v10420);
                                            let v10423: string = Spiral::method22();
                                            let v10430: &str = &*v10423;
                                            let v10461: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v41.clone(), v10430)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let v10486: Spiral::US12 = defaultValue(
                                                Spiral::US12::US12_1,
                                                map(Spiral::method23(), v10461),
                                            );
                                            let v10492: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v10495: Vec<std::string::String> = match &v10486 {
                                                Spiral::US12::US12_0(v10486_0_0) => match &v10486 {
                                                    Spiral::US12::US12_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => v10492.clone(),
                                            };
                                            let v10496: string = Spiral::method191();
                                            let v10503: &str = &*v10496;
                                            let v10534: bool =
                                                clap::ArgMatches::get_flag(&v41.clone(), v10503);
                                            let v10535: string = Spiral::method192();
                                            let v10542: &str = &*v10535;
                                            let v10573: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v10542)
                                                    .cloned();
                                            let v10598: Spiral::US8 = defaultValue(
                                                Spiral::US8::US8_1,
                                                map(Spiral::method20(), v10573),
                                            );
                                            let v10608: Spiral::US5 = match &v10598 {
                                                Spiral::US8::US8_0(v10598_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v10598 {
                                                                Spiral::US8::US8_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            };
                                            let v10609: string = Spiral::method193();
                                            let v10616: &str = &*v10609;
                                            let v10647: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v10616)
                                                    .cloned();
                                            let v10672: Spiral::US8 = defaultValue(
                                                Spiral::US8::US8_1,
                                                map(Spiral::method20(), v10647),
                                            );
                                            let v10682: Spiral::US5 = match &v10672 {
                                                Spiral::US8::US8_0(v10672_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v10672 {
                                                                Spiral::US8::US8_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            };
                                            let v10691: Spiral::US40 =
                                                if let Spiral::US5::US5_0(v10608_0_0) = &v10608 {
                                                    Spiral::US40::US40_0(Spiral::US41::US41_0(
                                                        v10608_0_0.clone(),
                                                    ))
                                                } else {
                                                    if let Spiral::US5::US5_0(v10682_0_0) = &v10682
                                                    {
                                                        Spiral::US40::US40_0(Spiral::US41::US41_1(
                                                            v10682_0_0.clone(),
                                                        ))
                                                    } else {
                                                        Spiral::US40::US40_1
                                                    }
                                                };
                                            let v10703: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v10422);
                                            let v10751: Vec<u8> = Spiral::method24(v10703.unwrap());
                                            let v10753: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v10751);
                                            let v10757: std::string::String = v10753.unwrap();
                                            let v10792: string =
                                                fable_library_rust::String_::fromString(v10757);
                                            let v10803: string =
                                                Spiral::method26(Spiral::method194(
                                                    string("rs"),
                                                    v10792.clone(),
                                                    v10691.clone(),
                                                ));
                                            let v10805: Spiral::US5 =
                                                Spiral::method32(Spiral::method31());
                                            let v10811: Spiral::US5 = match &v10805 {
                                                Spiral::US5::US5_0(v10805_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        match &v10805 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    )
                                                }
                                                _ => Spiral::method32(string(
                                                    "c:\\home\\git\\polyglot\\target\\Builder\\spiral",
                                                )),
                                            };
                                            let v10817: Spiral::US5 = match &v10811 {
                                                Spiral::US5::US5_0(v10811_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        match &v10811 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    )
                                                }
                                                _ => Spiral::method32(string("/workspaces")),
                                            };
                                            let v10821: string = match &v10817 {
                                                Spiral::US5::US5_0(v10817_0_0) => match &v10817 {
                                                    Spiral::US5::US5_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v10836: string = Spiral::method33(
                                                if string("deps")
                                                    == (Spiral::method52(v10821.clone()))
                                                {
                                                    let v10829: Spiral::US5 = Spiral::method32(
                                                        Spiral::method38(v10821.clone())
                                                            .clone()
                                                            .unwrap(),
                                                    );
                                                    match &v10829 {
                                                        Spiral::US5::US5_0(v10829_0_0) => {
                                                            match &v10829 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    }
                                                } else {
                                                    v10821
                                                },
                                                string("polyglot"),
                                            );
                                            let v10840: string = toLower(Spiral::method31());
                                            let v10845: string = toLower(v10836);
                                            let v10854: Spiral::US14 =
                                                if startsWith3(v10840, v10845.clone(), false) {
                                                    Spiral::US14::US14_1(v10845.clone())
                                                } else {
                                                    Spiral::US14::US14_0(v10845)
                                                };
                                            let v10866: Result<string, string> = match &v10854 {
                                                Spiral::US14::US14_0(v10854_0_0) => {
                                                    Ok::<string, string>(v10854_0_0.clone())
                                                }
                                                Spiral::US14::US14_1(v10854_1_0) => {
                                                    Err::<string, string>(v10854_1_0.clone())
                                                }
                                            };
                                            let v10868: bool = true;
                                            let _result_unwrap_or_else =
                                                v10866.unwrap_or_else(|x| {
                                                    //;
                                                    let v10870: string = x;
                                                    let v10872: bool = true;
                                                    v10870
                                                });
                                            let v10874: string = _result_unwrap_or_else;
                                            let v10879: string = Spiral::method195(
                                                Spiral::US5::US5_0(v10803.clone()),
                                                string("spiral"),
                                                Spiral::US43::US43_0(Spiral::US42::US42_0),
                                                v10874.clone(),
                                            );
                                            let v10885: string = Spiral::method196(
                                                v10792,
                                                string("spiral"),
                                                LrcPtr::new(Spiral::UH2::UH2_0),
                                                LrcPtr::new(Spiral::UH4::UH4_1(
                                                    string("Fable.Core"),
                                                    string("4.3.0"),
                                                    LrcPtr::new(Spiral::UH4::UH4_0),
                                                )),
                                                v10879.clone(),
                                                v10874.clone(),
                                            );
                                            let v10887: string = Spiral::method33(
                                                v10879.clone(),
                                                string("../../.."),
                                            );
                                            let v10889: string = Spiral::method33(
                                                v10887.clone(),
                                                string("Cargo.toml"),
                                            );
                                            if (Spiral::method35(v10889.clone())) == false {
                                                let v10899: DateTime = DateTime::now();
                                                let v10922: string =
                                                    toString(Spiral::method199(new_guid(), v10899));
                                                let v10988: string =
                                                    append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                               v10922.clone(),
                                                                                                                                                                               string("\"")]))))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("version = \"0.0.1\""))),
                                                                                                                                   string("\n"))),
                                                                                                                           string("edition = \"2021\""))),
                                                                                                                   string("\n"))),
                                                                                                           string(""))),
                                                                                                   string("\n"))),
                                                                                           string("[[bin]]"))),
                                                                                   string("\n"))),
                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                               v10922,
                                                                                               string("\"")]))))),
                                                                   string("\n"))),
                                                           string("path = \"spiral.rs\""));
                                                std::fs::write(&*v10889.clone(), &*v10988).unwrap();
                                                ()
                                            }
                                            {
                                                let v10993: string = Spiral::method33(
                                                    v10879.clone(),
                                                    string("Cargo.toml"),
                                                );
                                                if (Spiral::method35(v10993.clone())) == false {
                                                    let v11003: DateTime = DateTime::now();
                                                    let v11026: string = toString(
                                                        Spiral::method199(new_guid(), v11003),
                                                    );
                                                    let v11092: string =
                                                        append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                   v11026.clone(),
                                                                                                                                                                                   string("\"")]))))),
                                                                                                                                                       string("\n"))),
                                                                                                                                               string("version = \"0.0.1\""))),
                                                                                                                                       string("\n"))),
                                                                                                                               string("edition = \"2021\""))),
                                                                                                                       string("\n"))),
                                                                                                               string(""))),
                                                                                                       string("\n"))),
                                                                                               string("[[bin]]"))),
                                                                                       string("\n"))),
                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                   v11026,
                                                                                                   string("\"")]))))),
                                                                       string("\n"))),
                                                               string("path = \"spiral.rs\""));
                                                    std::fs::write(&*v10993.clone(), &*v11092)
                                                        .unwrap();
                                                    ()
                                                }
                                                {
                                                    let v11098: string = Spiral::method33(
                                                        v10874.clone(),
                                                        string(
                                                            "lib/rust/fable/fable_modules/fable-library-rust",
                                                        ),
                                                    );
                                                    let v11100: string = Spiral::method33(
                                                        v10879.clone(),
                                                        string("fable_modules/fable-library-rust"),
                                                    );
                                                    Spiral::method204(v11098, v11100.clone());
                                                    {
                                                        let patternInput_18: (i32, string) =
                                                            Spiral::method205(
                                                                v10691.clone(),
                                                                v10879.clone(),
                                                                string("rs"),
                                                                v10885,
                                                                v10854.clone(),
                                                            );
                                                        let v11102: string =
                                                            patternInput_18.1.clone();
                                                        let v11101: i32 = patternInput_18.0.clone();
                                                        let patternInput_27: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v11101) != 0_i32 {
                                                            let v11420: () = {
                                                                Spiral::closure83(
                                                                    v11102.clone(),
                                                                    v11101,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("rs")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v11102),
                                                            )
                                                        } else {
                                                            let v11929: Vec<std::string::String> =
                                                                if if let Spiral::US40::US40_1 =
                                                                    &v10691
                                                                {
                                                                    true
                                                                } else {
                                                                    false
                                                                } {
                                                                    v10495.clone()
                                                                } else {
                                                                    let v11740 =
                                                                        Spiral::method215();
                                                                    let v11741: Vec<
                                                                        std::string::String,
                                                                    > = Spiral::method216(
                                                                        v10495.clone(),
                                                                    );
                                                                    let v11743: Vec<
                                                                        std::string::String,
                                                                    > = v11741
                                                                        .into_iter()
                                                                        .filter(|x| {
                                                                            v11740(
                                                                                x.clone().clone(),
                                                                            )
                                                                        })
                                                                        .collect::<Vec<_>>();
                                                                    let v11844: Vec<
                                                                        std::string::String,
                                                                    > = if (v11743.len() as i32)
                                                                        > 0_i32
                                                                    {
                                                                        v10495.clone()
                                                                    } else {
                                                                        let v11767: &str =
                                                                            &*string("near-sdk");
                                                                        let v11833: Array<
                                                                            std::string::String,
                                                                        > = new_array(&[
                                                                            String::from(v11767),
                                                                        ]);
                                                                        let v11836: Vec<
                                                                            std::string::String,
                                                                        > = Spiral::method73(
                                                                            v11833.to_vec(),
                                                                        );
                                                                        let v11837: Vec<
                                                                            std::string::String,
                                                                        > = Spiral::method74(
                                                                            v10495,
                                                                        );
                                                                        let v11839: bool = true;
                                                                        let mut v11837 = v11837;
                                                                        let v11841: bool = true;
                                                                        v11837.extend(v11836);
                                                                        v11837
                                                                    };
                                                                    let v11852: &str = &*string(
                                                                        "indexmap=\"=2.11.4\"",
                                                                    );
                                                                    let v11918: Array<
                                                                        std::string::String,
                                                                    > = new_array(&[String::from(
                                                                        v11852,
                                                                    )]);
                                                                    let v11921: Vec<
                                                                        std::string::String,
                                                                    > = Spiral::method73(
                                                                        v11918.to_vec(),
                                                                    );
                                                                    let v11922: Vec<
                                                                        std::string::String,
                                                                    > = Spiral::method74(v11844);
                                                                    let v11924: bool = true;
                                                                    let mut v11922 = v11922;
                                                                    let v11926: bool = true;
                                                                    v11922.extend(v11921);
                                                                    v11922
                                                                };
                                                            let v11931: bool = true;
                                                            let _vec_map : Vec<_> = v11929.into_iter().map(|x| { //;
                                                                let v11933:
                                                                        std::string::String =
                                                                    x;
                                                                let v11935:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v11933);
                                                                let v11954:
                                                                        string =
                                                                    if contains(v11935.clone(),
                                                                                string("="))
                                                                       {
                                                                        v11935.clone()
                                                                    } else {
                                                                        if endsWith3(v11935.clone(),
                                                                                     string("]"),
                                                                                     false)
                                                                           {
                                                                            concat(new_array(&[replace(v11935.clone(),
                                                                                                       string("["),
                                                                                                       string("={version=\'*\',features=[")),
                                                                                               string("}")]))
                                                                        } else {
                                                                            concat(new_array(&[v11935,
                                                                                               string("=\'*\'")]))
                                                                        }
                                                                    };
                                                                let v11956:
                                                                        bool =
                                                                    true; v11954 }).collect::<Vec<_>>();
                                                            let v11958: Vec<string> = _vec_map;
                                                            let v11960:
                                                                        Array<string> =
                                                                    fable_library_rust::NativeArray_::array_from(v11958.clone());
                                                            let _let__v11965: LrcPtr<
                                                                dyn IEnumerable_1<string>,
                                                            > = delay(Func0::new({
                                                                let v11960 = v11960.clone();
                                                                move || {
                                                                    map_1(
                                                                        Func1::new({
                                                                            let v11960 =
                                                                                v11960.clone();
                                                                            move |i_2: i32| {
                                                                                v11960[i_2].clone()
                                                                            }
                                                                        }),
                                                                        rangeNumeric(
                                                                            0_i32,
                                                                            1_i32,
                                                                            (get_Count(
                                                                                v11960.clone(),
                                                                            )) - 1_i32,
                                                                        ),
                                                                    )
                                                                }
                                                            }));
                                                            let v11979: string = join(
                                                                Spiral::method75(),
                                                                toArray_1(_let__v11965),
                                                            );
                                                            let v11984: string = Spiral::method33(
                                                                v10879.clone(),
                                                                concat(new_array(&[
                                                                    string("spiral"),
                                                                    string("."),
                                                                    string("rs"),
                                                                ])),
                                                            );
                                                            let v11996: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v11984.clone());
                                                            let v12044: Vec<u8> =
                                                                Spiral::method24(v11996.unwrap());
                                                            let v12046: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v12044,
                                                            );
                                                            let v12050: std::string::String =
                                                                v12046.unwrap();
                                                            let v12085:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v12050);
                                                            let v12098: string = append(
                                                                string("on_startup!"),
                                                                (Spiral::method217()),
                                                            );
                                                            let v12105: string = append(
                                                                string(" method0"),
                                                                (Spiral::method218()),
                                                            );
                                                            let v12117: bool = if contains(
                                                                v12085.clone(),
                                                                v12098.clone(),
                                                            ) {
                                                                (contains(v12085, v12105)) == false
                                                            } else {
                                                                false
                                                            };
                                                            let v12277:
                                                                        string =
                                                                    append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("cargo-features = [\"edition2024\"]\n\n[package]\n"),
                                                                                                                                                                                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                                                                                               v10803.clone(),
                                                                                                                                                                                                                                                               string("\"")]))))),
                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                           string("version = \"0.0.1\""))),
                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                           string("edition = \"2024\""))),
                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                           string(""))),
                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                           string("[dependencies]"))),
                                                                                                                                                                   string("\n"))),
                                                                                                                                                           (if !((v10691.clone())
                                                                                                                                                                     ==
                                                                                                                                                                     Spiral::US40::US40_1)
                                                                                                                                                               {
                                                                                                                                                                string("fable_library_rust = { workspace = true }")
                                                                                                                                                            } else {
                                                                                                                                                                append((append((append(string("fable_library_rust = { workspace = true, features = ["),
                                                                                                                                                                                       (if v12117
                                                                                                                                                                                           {
                                                                                                                                                                                            string("\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                                        } else {
                                                                                                                                                                                            string("\"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                                        }))),
                                                                                                                                                                               string("]"))),
                                                                                                                                                                       string("}"))
                                                                                                                                                            }))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("inline_colorization = { workspace = true }"))),
                                                                                                                                   string("\n"))),
                                                                                                                           (v11979))),
                                                                                                                   string("\n"))),
                                                                                                           string(""))),
                                                                                                   string("\n"))),
                                                                                           (if if let Spiral::US40::US40_1
                                                                                                      =
                                                                                                      &v10691
                                                                                                  {
                                                                                                   true
                                                                                               } else {
                                                                                                   false
                                                                                               }
                                                                                               {
                                                                                                append(string("[[bin]]\n"),
                                                                                                       (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                           v10803.clone(),
                                                                                                                           string("\"")]))))
                                                                                            } else {
                                                                                                string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                            }))),
                                                                                   string("\n"))),
                                                                           string("path = \"spiral.rs\""));
                                                            let v12468:
                                                                        string =
                                                                    append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                                           (concat(new_array(&[string("path = \""),
                                                                                                                                                                                                                                                                                                                               Spiral::method43(v10874.clone()),
                                                                                                                                                                                                                                                                                                                               string("/lib/rust/fable/fable_modules/fable-library-rust\"")]))))),
                                                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                                                           string("default-features = false"))),
                                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                                           string("features = []"))),
                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                           string(""))),
                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                           string("[workspace.dependencies]"))),
                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                           string("inline_colorization = \"~0.1\""))),
                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                           string(""))),
                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                           string("[profile.release]"))),
                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                           string("codegen-units = 1"))),
                                                                                                                                                                   string("\n"))),
                                                                                                                                                           string("opt-level = \"z\""))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("lto = true"))),
                                                                                                                                   string("\n"))),
                                                                                                                           string("debug = false"))),
                                                                                                                   string("\n"))),
                                                                                                           string("panic = \"abort\""))),
                                                                                                   string("\n"))),
                                                                                           string("overflow-checks = true"))),
                                                                                   string("\n"))),
                                                                           string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                            Spiral::method76(
                                                                v10993.clone(),
                                                                v12277,
                                                            );
                                                            Spiral::method76(v10889, v12468);
                                                            {
                                                                let v12472: string =
                                                                    Spiral::method33(
                                                                        v11100,
                                                                        string("src/Range.rs"),
                                                                    );
                                                                if Spiral::method35(v12472.clone())
                                                                {
                                                                    let v12485: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(
                                                                        &*v12472.clone(),
                                                                    );
                                                                    let v12533: Vec<u8> =
                                                                        Spiral::method24(
                                                                            v12485.unwrap(),
                                                                        );
                                                                    let v12535:
                                                                                Result<std::string::String,
                                                                                       std::string::FromUtf8Error> =
                                                                            std::string::String::from_utf8(v12533);
                                                                    let v12539:
                                                                                std::string::String =
                                                                            v12535.unwrap();
                                                                    Spiral::method76(v12472,
                                                                                         replace(replace(fable_library_rust::String_::fromString(v12539),
                                                                                                         string("use crate::String_::fromCharCode;"),
                                                                                                         string("use crate::String_::fromChar;")),
                                                                                                 string("fromCharCode(c)"),
                                                                                                 string("std::char::from_u32(c).unwrap()")))
                                                                }
                                                                {
                                                                    let patternInput_19: (
                                                                        i32,
                                                                        string,
                                                                    ) = Spiral::method219(
                                                                        v10854.clone(),
                                                                        v10993.clone(),
                                                                        1_u8,
                                                                    );
                                                                    let v12590: i32 =
                                                                        patternInput_19.0.clone();
                                                                    if (v12590) != 0_i32 {
                                                                        let v12907: () = {
                                                                            Spiral::closure87(
                                                                                patternInput_19
                                                                                    .1
                                                                                    .clone(),
                                                                                v12590,
                                                                                (),
                                                                            );
                                                                            ()
                                                                        };
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v13231: Result<
                                                                            Vec<u8>,
                                                                            std::io::Error,
                                                                        > = std::fs::read(
                                                                            &*v11984.clone(),
                                                                        );
                                                                        let v13279: Vec<u8> =
                                                                            Spiral::method24(
                                                                                v13231.unwrap(),
                                                                            );
                                                                        let v13281:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v13279);
                                                                        let v13285:
                                                                                    std::string::String =
                                                                                v13281.unwrap();
                                                                        let v13320:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v13285);
                                                                        let v13333: string = append(
                                                                            string(
                                                                                "pub fn main() -> Result<(), String> ",
                                                                            ),
                                                                            (Spiral::method225()),
                                                                        );
                                                                        let v13450:
                                                                                    string =
                                                                                append((append((if if let Spiral::US40::US40_1
                                                                                                          =
                                                                                                          &v10691
                                                                                                      {
                                                                                                       true
                                                                                                   } else {
                                                                                                       false
                                                                                                   }
                                                                                                   {
                                                                                                    string("")
                                                                                                } else {
                                                                                                    string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral::method0();\n    }\n}")
                                                                                                }),
                                                                                               string("\n"))),
                                                                                       (if if if let Spiral::US40::US40_1
                                                                                                     =
                                                                                                     &v10691
                                                                                                 {
                                                                                                  true
                                                                                              } else {
                                                                                                  false
                                                                                              }
                                                                                              {
                                                                                               contains(v13320.clone(),
                                                                                                        append((v12098.clone()),
                                                                                                               string("Spiral::method0()")))
                                                                                           } else {
                                                                                               false
                                                                                           }
                                                                                           {
                                                                                            concat(new_array(&[v13333.clone(),
                                                                                                               string(" Ok(Spiral::method0()) }")]))
                                                                                        } else {
                                                                                            concat(new_array(&[v13333.clone(),
                                                                                                               string(" Ok(()) }")]))
                                                                                        }));
                                                                        let v13454: bool = contains(
                                                                            v13320.clone(),
                                                                            v13333,
                                                                        );
                                                                        let v13650: string =
                                                                            if v13454 {
                                                                                v13320.clone()
                                                                            } else {
                                                                                (if (if let Spiral::US40::US40_0(v10691_0_0)
                                                                                                =
                                                                                                &v10691
                                                                                            {
                                                                                             if let Spiral::US41::US41_1(v10691_1_0)
                                                                                                    =
                                                                                                    &v10691_0_0
                                                                                                {
                                                                                                 true
                                                                                             } else {
                                                                                                 false
                                                                                             }
                                                                                         } else {
                                                                                             false
                                                                                         })
                                                                                            ==
                                                                                            false
                                                                                        {
                                                                                         Func1::new(move
                                                                                                        |v_7:
                                                                                                             string|
                                                                                                        Spiral::closure88((),
                                                                                                                          v_7))
                                                                                     } else {
                                                                                         let v13644:
                                                                                                 string =
                                                                                             string("use fable_library_rust::DateTime_::DateTime;");
                                                                                         Func1::new({
                                                                                                        let v13644
                                                                                                            =
                                                                                                            v13644.clone();
                                                                                                        move
                                                                                                            |v_8:
                                                                                                                 string|
                                                                                                            Spiral::closure90(v13644.clone(),
                                                                                                                              v_8)
                                                                                                    })
                                                                                     })((if v12117
                                                                                            {
                                                                                             Func1::new(move
                                                                                                            |v_5:
                                                                                                                 string|
                                                                                                            Spiral::closure88((),
                                                                                                                              v_5))
                                                                                         } else {
                                                                                             let v13631:
                                                                                                     string =
                                                                                                 append(string("// "),
                                                                                                        (v12098.clone()));
                                                                                             Func1::new({
                                                                                                            let v12098
                                                                                                                =
                                                                                                                v12098.clone();
                                                                                                            let v13631
                                                                                                                =
                                                                                                                v13631.clone();
                                                                                                            move
                                                                                                                |v_6:
                                                                                                                     string|
                                                                                                                Spiral::closure89(v12098.clone(),
                                                                                                                                  v13631.clone(),
                                                                                                                                  v_6)
                                                                                                        })
                                                                                         })(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(Spiral::method63(string("\\(gen,"),
                                                                                                                                                                                             string("(f,"),
                                                                                                                                                                                             Spiral::method63(string("\\(gen\\("),
                                                                                                                                                                                                              string("(f("),
                                                                                                                                                                                                              replace(Spiral::method63(string("\\s\\sfable_library_rust::Native_::getZero\\(\\);"),
                                                                                                                                                                                                                                       string(" fable_library_rust::Native_::getZero::<()>();"),
                                                                                                                                                                                                                                       Spiral::method63(string("null\\(\\)"),
                                                                                                                                                                                                                                                        string("fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                        Spiral::method63(string("unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"),
                                                                                                                                                                                                                                                                         string("0"),
                                                                                                                                                                                                                                                                         Spiral::method63(string("unbox::<i32>\\(null\\(\\)"),
                                                                                                                                                                                                                                                                                          string("0"),
                                                                                                                                                                                                                                                                                          Spiral::method63(string("unbox::<string>\\(null\\(\\)"),
                                                                                                                                                                                                                                                                                                           string("fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                           Spiral::method63(string("unbox::<bool>\\(null\\(\\)"),
                                                                                                                                                                                                                                                                                                                            string("false"),
                                                                                                                                                                                                                                                                                                                            Spiral::method63(string(" null::<\\(\\)>\\(\\)"),
                                                                                                                                                                                                                                                                                                                                             string(" fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                                                             Spiral::method63(string("\\(null::<\\(\\)>\\(\\)"),
                                                                                                                                                                                                                                                                                                                                                              string("(fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                                                                              Spiral::method63(string("null::<\\(\\)>\\(\\)"),
                                                                                                                                                                                                                                                                                                                                                                               string("fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                                                                                               replace(replace(replace(Spiral::method63(string("\\s\\sgetZero\\(\\);"),
                                                                                                                                                                                                                                                                                                                                                                                                                        string(" getZero::<()>();"),
                                                                                                                                                                                                                                                                                                                                                                                                                        Spiral::method63(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                                                                                                                                                                                                                                                                                                                                                         string(" defaultOf::<()>();"),
                                                                                                                                                                                                                                                                                                                                                                                                                                         replace(replace(concat(new_array(&[v13320,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            string("\n\n"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            v13450,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            string("\n")])),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         append(string("),)"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (";".into())),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         string("));")),
                                                                                                                                                                                                                                                                                                                                                                                                                                                 append(string("},)"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                        (";".into())),
                                                                                                                                                                                                                                                                                                                                                                                                                                                 string("});")))),
                                                                                                                                                                                                                                                                                                                                                                                                       append(string("(&e.get_Curren"),
                                                                                                                                                                                                                                                                                                                                                                                                              ("t".into())),
                                                                                                                                                                                                                                                                                                                                                                                                       string("(e.get_Current")),
                                                                                                                                                                                                                                                                                                                                                                                               append(string("getNull"),
                                                                                                                                                                                                                                                                                                                                                                                                      ("::<()>()".into())),
                                                                                                                                                                                                                                                                                                                                                                                               string("fable_library_rust::Native_::getZero()")),
                                                                                                                                                                                                                                                                                                                                                                                       append(string("null::<()>("),
                                                                                                                                                                                                                                                                                                                                                                                              (")".into())),
                                                                                                                                                                                                                                                                                                                                                                                       string("fable_library_rust::Native_::getZero()"))))))))))),
                                                                                                                                                                                                                      string(" gen:"),
                                                                                                                                                                                                                      string(" f:")))),
                                                                                                                                                                            string(" gen "),
                                                                                                                                                                            string(" f ")),
                                                                                                                                                                    string("::Slice\'_"),
                                                                                                                                                                    string("::Slice__")),
                                                                                                                                                            string(" Slice\'_"),
                                                                                                                                                            string(" Slice__")),
                                                                                                                                                    append(string("defaultOf()"),
                                                                                                                                                           (",".into())),
                                                                                                                                                    string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                            append(string("__self"),
                                                                                                                                                   ("__.".into())),
                                                                                                                                            string("self.")),
                                                                                                                                    append(string("_self"),
                                                                                                                                           ("_.".into())),
                                                                                                                                    string("self.")),
                                                                                                                            append(string("get_or_insert_wit"),
                                                                                                                                   ("h".into())),
                                                                                                                            string("get_or_init")),
                                                                                                                    append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                           (";".into())),
                                                                                                                    string("type ConcurrentStack_1<T> = T;")),
                                                                                                            append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                                   (";".into())),
                                                                                                            string("type TimeZoneInfo = i64;")),
                                                                                                    append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                           (";".into())),
                                                                                                    string("type TaskCanceledException = ();"))))
                                                                            };
                                                                        if (v13454) == false {
                                                                            Spiral::method76(
                                                                                v11984.clone(),
                                                                                v13650.clone(),
                                                                            );
                                                                        }
                                                                        {
                                                                            let v13656:
                                                                                        string =
                                                                                    if (if let Spiral::US40::US40_1
                                                                                               =
                                                                                               &v10691
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        concat(new_array(&[string("cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \""),
                                                                                                           v10993.clone(),
                                                                                                           string("\"")]))
                                                                                    } else {
                                                                                        concat(new_array(&[string("cargo run --manifest-path \""),
                                                                                                           v10993,
                                                                                                           string("\"")]))
                                                                                    };
                                                                            let v13669:
                                                                                        Array<(string,
                                                                                               string)> =
                                                                                    if (if let Spiral::US40::US40_1
                                                                                               =
                                                                                               &v10691
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        new_empty::<(string,
                                                                                                     string)>()
                                                                                    } else {
                                                                                        new_array(&[(string("TRACE_LEVEL"),
                                                                                                     string("Verbose")),
                                                                                                    (string("RUSTC_WRAPPER"),
                                                                                                     string("sccache")),
                                                                                                    (string("RUST_BACKTRACE"),
                                                                                                     string("full")),
                                                                                                    (string("RUSTFLAGS"),
                                                                                                     string("-C prefer-dynamic"))])
                                                                                    };
                                                                            let v13698:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v10854
                                                                                        {
                                                                                        Spiral::US14::US14_0(v10854_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v10854_0_0.clone()),
                                                                                        Spiral::US14::US14_1(v10854_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v10854_1_0.clone()),
                                                                                    };
                                                                            let patternInput_20:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method90(v13656.clone(),
                                                                                                     None::<CancellationToken>,
                                                                                                     v13669.clone(),
                                                                                                     None::<Func1<(i32,
                                                                                                                   string,
                                                                                                                   bool),
                                                                                                                  Arc<Async<()>>>>,
                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                  ()>>,
                                                                                                     true,
                                                                                                     v13698.ok(),
                                                                                                     true);
                                                                            let v13717: string =
                                                                                patternInput_20
                                                                                    .1
                                                                                    .clone();
                                                                            let v13716: i32 =
                                                                                patternInput_20
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_26:
                                                                                        (Spiral::US5,
                                                                                         Spiral::US5,
                                                                                         Spiral::US5,
                                                                                         Spiral::US5) =
                                                                                    if if let Spiral::US40::US40_1
                                                                                              =
                                                                                              &v10691
                                                                                          {
                                                                                           true
                                                                                       } else {
                                                                                           false
                                                                                       }
                                                                                       {
                                                                                        let v13719:
                                                                                                i32 =
                                                                                            get_Count(v13669.clone());
                                                                                        let v13720:
                                                                                                Array<string> =
                                                                                            new_init(&string(""),
                                                                                                     v13719);
                                                                                        let v13721:
                                                                                                LrcPtr<Spiral::Mut5> =
                                                                                            LrcPtr::new(Spiral::Mut5{l0:
                                                                                                                         MutCell::new(0_i32),});
                                                                                        while Spiral::method29(v13719,
                                                                                                               v13721.clone())
                                                                                              {
                                                                                            let v13723:
                                                                                                    i32 =
                                                                                                v13721.l0.get().clone();
                                                                                            let patternInput_21:
                                                                                                    (string,
                                                                                                     string) =
                                                                                                v13669[v13723].clone();
                                                                                            let v13726:
                                                                                                    string =
                                                                                                sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                         patternInput_21.0.clone(),
                                                                                                         patternInput_21.1.clone());
                                                                                            v13720.get_mut()[v13723
                                                                                                                 as
                                                                                                                 usize]
                                                                                                =
                                                                                                v13726;
                                                                                            {
                                                                                                let v13727:
                                                                                                        i32 =
                                                                                                    (v13723)
                                                                                                        +
                                                                                                        1_i32;
                                                                                                v13721.l0.set(v13727);
                                                                                                ()
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            let v13751:
                                                                                                    string =
                                                                                                concat(new_array(&[string("pwsh -c \'"),
                                                                                                                   join(string(";"),
                                                                                                                        toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                             toArray_1(ofArray_1(v13720.clone()))),
                                                                                                                                                        v13656])))),
                                                                                                                   string("\'")]));
                                                                                            let patternInput_22:
                                                                                                    (Spiral::US5,
                                                                                                     Spiral::US5,
                                                                                                     Spiral::US5,
                                                                                                     Spiral::US5) =
                                                                                                if (v13716)
                                                                                                       !=
                                                                                                       0_i32
                                                                                                   {
                                                                                                    let v14067:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral::closure91(v10534,
                                                                                                                              v11984.clone(),
                                                                                                                              v13717.clone(),
                                                                                                                              v13716,
                                                                                                                              v13751.clone(),
                                                                                                                              ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral::US5::US5_0(string("rs")),
                                                                                                     Spiral::US5::US5_1,
                                                                                                     Spiral::US5::US5_1,
                                                                                                     Spiral::US5::US5_1)
                                                                                                } else {
                                                                                                    let result_2:
                                                                                                            LrcPtr<MutCell<Spiral::US5>> =
                                                                                                        refCell(Spiral::US5::US5_1);
                                                                                                    try_catch(||
                                                                                                                  result_2.set(Spiral::closure62((),
                                                                                                                                                 Spiral::closure92(v13717.clone(),
                                                                                                                                                                   ()))),
                                                                                                              |ex_2:
                                                                                                                   LrcPtr<Exception>|
                                                                                                                  result_2.set(Spiral::closure94(v11984.clone(),
                                                                                                                                                 v13717.clone(),
                                                                                                                                                 v13751,
                                                                                                                                                 ex_2.clone())));
                                                                                                    {
                                                                                                        let v14390:
                                                                                                                Spiral::US5 =
                                                                                                            result_2.get().clone();
                                                                                                        let v14404:
                                                                                                                Option<string> =
                                                                                                            match &v14390
                                                                                                                {
                                                                                                                Spiral::US5::US5_0(v14390_0_0)
                                                                                                                =>
                                                                                                                Some(match &v14390
                                                                                                                         {
                                                                                                                         Spiral::US5::US5_0(x)
                                                                                                                         =>
                                                                                                                         x.clone(),
                                                                                                                         _
                                                                                                                         =>
                                                                                                                         unreachable!(),
                                                                                                                     }.clone()),
                                                                                                                _
                                                                                                                =>
                                                                                                                None::<string>,
                                                                                                            };
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_0(v13650.clone()),
                                                                                                         Spiral::US5::US5_0(v11984.clone()),
                                                                                                         Spiral::US5::US5_0(v14404.unwrap()))
                                                                                                    }
                                                                                                };
                                                                                            (patternInput_22.0.clone(),
                                                                                             patternInput_22.1.clone(),
                                                                                             patternInput_22.2.clone(),
                                                                                             patternInput_22.3.clone())
                                                                                        }
                                                                                    } else {
                                                                                        let v14415:
                                                                                                string =
                                                                                            sprintf!("target/spiral/{}/target/wasm32-unknown-unknown/release/spiral_{}.wasm",
                                                                                                     string("spiral"),
                                                                                                     v10803.clone());
                                                                                        let v14427:
                                                                                                string =
                                                                                            sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables AUTOMATION={}`nNEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                     string("scripts/invoke-block.ps1"),
                                                                                                     sprintf!("\'deps/spiral/workspace/target/release/spiral_wasm -w {} -t debug {}\'",
                                                                                                              v14415.clone(),
                                                                                                              if let Spiral::US40::US40_0(v10691_0_0)
                                                                                                                     =
                                                                                                                     &v10691
                                                                                                                 {
                                                                                                                  let v14416:
                                                                                                                          Spiral::US41 =
                                                                                                                      v10691_0_0.clone();
                                                                                                                  match &v14416
                                                                                                                      {
                                                                                                                      Spiral::US41::US41_0(v14416_0_0)
                                                                                                                      =>
                                                                                                                      v14416_0_0.clone(),
                                                                                                                      Spiral::US41::US41_1(v14416_1_0)
                                                                                                                      =>
                                                                                                                      v14416_1_0.clone(),
                                                                                                                  }
                                                                                                              } else {
                                                                                                                  string("")
                                                                                                              }),
                                                                                                     Spiral::method3(string("AUTOMATION")));
                                                                                        let patternInput_25:
                                                                                                (Spiral::US5,
                                                                                                 Spiral::US5,
                                                                                                 Spiral::US5,
                                                                                                 Spiral::US5) =
                                                                                            if (v13716)
                                                                                                   ==
                                                                                                   0_i32
                                                                                               {
                                                                                                let patternInput_23:
                                                                                                        (i32,
                                                                                                         string) =
                                                                                                    Spiral::method90(v14427.clone(),
                                                                                                                     None::<CancellationToken>,
                                                                                                                     new_empty::<(string,
                                                                                                                                  string)>(),
                                                                                                                     None::<Func1<(i32,
                                                                                                                                   string,
                                                                                                                                   bool),
                                                                                                                                  Arc<Async<()>>>>,
                                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                  ()>>,
                                                                                                                     true,
                                                                                                                     Some(v10874),
                                                                                                                     true);
                                                                                                let v14453:
                                                                                                        string =
                                                                                                    patternInput_23.1.clone();
                                                                                                let v14452:
                                                                                                        i32 =
                                                                                                    patternInput_23.0.clone();
                                                                                                let patternInput_24:
                                                                                                        (Spiral::US5,
                                                                                                         Spiral::US5,
                                                                                                         Spiral::US5,
                                                                                                         Spiral::US5) =
                                                                                                    if (v14452)
                                                                                                           ==
                                                                                                           0_i32
                                                                                                       {
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_0(v13650),
                                                                                                         Spiral::US5::US5_0(v11984.clone()),
                                                                                                         Spiral::US5::US5_0(v14453.clone()))
                                                                                                    } else {
                                                                                                        let v14771:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral::closure96(v10534,
                                                                                                                                  v11984.clone(),
                                                                                                                                  v13717.clone(),
                                                                                                                                  v14453,
                                                                                                                                  v14452,
                                                                                                                                  ());
                                                                                                                ()
                                                                                                            };
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_1,
                                                                                                         Spiral::US5::US5_1,
                                                                                                         Spiral::US5::US5_1)
                                                                                                    };
                                                                                                (patternInput_24.0.clone(),
                                                                                                 patternInput_24.1.clone(),
                                                                                                 patternInput_24.2.clone(),
                                                                                                 patternInput_24.3.clone())
                                                                                            } else {
                                                                                                let v15405:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral::closure97(v10534,
                                                                                                                          v11984.clone(),
                                                                                                                          v13717,
                                                                                                                          v13716,
                                                                                                                          v14415,
                                                                                                                          v14427,
                                                                                                                          ());
                                                                                                        ()
                                                                                                    };
                                                                                                (Spiral::US5::US5_0(string("rs")),
                                                                                                 Spiral::US5::US5_1,
                                                                                                 Spiral::US5::US5_1,
                                                                                                 Spiral::US5::US5_1)
                                                                                            };
                                                                                        (patternInput_25.0.clone(),
                                                                                         patternInput_25.1.clone(),
                                                                                         patternInput_25.2.clone(),
                                                                                         patternInput_25.3.clone())
                                                                                    };
                                                                            if if v10534 {
                                                                                true
                                                                            } else {
                                                                                ((Spiral::method3(
                                                                                    string("CI"),
                                                                                )) == string(""))
                                                                                    != true
                                                                            } {
                                                                                Spiral::method71(
                                                                                    true, v10879,
                                                                                );
                                                                                {
                                                                                    let v15741:
                                                                                                string =
                                                                                            if (if let Spiral::US40::US40_1
                                                                                                       =
                                                                                                       &v10691
                                                                                                   {
                                                                                                    true
                                                                                                } else {
                                                                                                    false
                                                                                                })
                                                                                                   !=
                                                                                                   true
                                                                                               {
                                                                                                string("wasm32-unknown-unknown/release")
                                                                                            } else {
                                                                                                string("debug")
                                                                                            };
                                                                                    let v15744:
                                                                                                string =
                                                                                            Spiral::method33(v10887.clone(),
                                                                                                             sprintf!("target/{}/spiral_{}{}",
                                                                                                                      v15741.clone(),
                                                                                                                      v10803.clone(),
                                                                                                                      string("")));
                                                                                    let v15747:
                                                                                                string =
                                                                                            Spiral::method33(v10887.clone(),
                                                                                                             sprintf!("target/{}/spiral_{}{}",
                                                                                                                      v15741.clone(),
                                                                                                                      v10803.clone(),
                                                                                                                      string(".wasm")));
                                                                                    let v15750:
                                                                                                string =
                                                                                            Spiral::method33(v10887.clone(),
                                                                                                             sprintf!("target/{}/spiral_{}{}",
                                                                                                                      v15741.clone(),
                                                                                                                      v10803.clone(),
                                                                                                                      string(".pdb")));
                                                                                    let v15753:
                                                                                                string =
                                                                                            Spiral::method33(v10887.clone(),
                                                                                                             sprintf!("target/{}/spiral_{}{}",
                                                                                                                      v15741.clone(),
                                                                                                                      v10803.clone(),
                                                                                                                      string(".exe")));
                                                                                    let v15756:
                                                                                                string =
                                                                                            Spiral::method33(v10887,
                                                                                                             sprintf!("target/{}/spiral_{}{}",
                                                                                                                      v15741,
                                                                                                                      v10803,
                                                                                                                      string(".d")));
                                                                                    let v15757:
                                                                                                bool =
                                                                                            Spiral::method35(v15744.clone());
                                                                                    let v15758:
                                                                                                bool =
                                                                                            Spiral::method35(v15747.clone());
                                                                                    let v15759:
                                                                                                bool =
                                                                                            Spiral::method35(v15750.clone());
                                                                                    let v15760:
                                                                                                bool =
                                                                                            Spiral::method35(v15753.clone());
                                                                                    let v15761:
                                                                                                bool =
                                                                                            Spiral::method35(v15756.clone());
                                                                                    let v16071: () = {
                                                                                        Spiral::closure98(v11984,
                                                                                                                  v15756.clone(),
                                                                                                                  v15761,
                                                                                                                  v15753.clone(),
                                                                                                                  v15760,
                                                                                                                  v15750.clone(),
                                                                                                                  v15759,
                                                                                                                  v15747.clone(),
                                                                                                                  v15758,
                                                                                                                  v15744.clone(),
                                                                                                                  v15757,
                                                                                                                  ());
                                                                                        ()
                                                                                    };
                                                                                    let v16385:
                                                                                                LrcPtr<Spiral::UH5> =
                                                                                            if v15757
                                                                                               {
                                                                                                LrcPtr::new(Spiral::UH5::UH5_1(v15744,
                                                                                                                               v15757,
                                                                                                                               LrcPtr::new(Spiral::UH5::UH5_0)))
                                                                                            } else {
                                                                                                LrcPtr::new(Spiral::UH5::UH5_0)
                                                                                            };
                                                                                    let v16387:
                                                                                                LrcPtr<Spiral::UH5> =
                                                                                            if v15758
                                                                                               {
                                                                                                LrcPtr::new(Spiral::UH5::UH5_1(v15747,
                                                                                                                               v15758,
                                                                                                                               v16385.clone()))
                                                                                            } else {
                                                                                                v16385
                                                                                            };
                                                                                    let v16389:
                                                                                                LrcPtr<Spiral::UH5> =
                                                                                            if v15759
                                                                                               {
                                                                                                LrcPtr::new(Spiral::UH5::UH5_1(v15750,
                                                                                                                               v15759,
                                                                                                                               v16387.clone()))
                                                                                            } else {
                                                                                                v16387
                                                                                            };
                                                                                    let v16391:
                                                                                                LrcPtr<Spiral::UH5> =
                                                                                            if v15760
                                                                                               {
                                                                                                LrcPtr::new(Spiral::UH5::UH5_1(v15753,
                                                                                                                               v15760,
                                                                                                                               v16389.clone()))
                                                                                            } else {
                                                                                                v16389
                                                                                            };
                                                                                    Spiral::method236(if v15761
                                                                                                             {
                                                                                                              LrcPtr::new(Spiral::UH5::UH5_1(v15756,
                                                                                                                                             v15761,
                                                                                                                                             v16391.clone()))
                                                                                                          } else {
                                                                                                              v16391
                                                                                                          })
                                                                                }
                                                                            }
                                                                            (
                                                                                patternInput_26
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .2
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .3
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_27.0.clone(),
                                                            patternInput_27.1.clone(),
                                                            patternInput_27.2.clone(),
                                                            patternInput_27.3.clone(),
                                                        )
                                                    }
                                                }
                                            }
                                        } else {
                                            let patternInput_39: (
                                                Spiral::US5,
                                                Spiral::US5,
                                                Spiral::US5,
                                                Spiral::US5,
                                            ) = if (fable_library_rust::String_::fromString(
                                                v40.clone(),
                                            )) == string("typescript")
                                            {
                                                let v16401: string = Spiral::method171();
                                                let v16408: &str = &*v16401;
                                                let v16439: Option<std::string::String> =
                                                    clap::ArgMatches::get_one(&v41.clone(), v16408)
                                                        .cloned();
                                                let v16464: Spiral::US8 = defaultValue(
                                                    Spiral::US8::US8_1,
                                                    map(Spiral::method20(), v16439),
                                                );
                                                let v16471: std::string::String = match &v16464 {
                                                    Spiral::US8::US8_0(v16464_0_0) => match &v16464
                                                    {
                                                        Spiral::US8::US8_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v16473: string =
                                                    fable_library_rust::String_::fromString(v16471);
                                                let v16474: string = Spiral::method22();
                                                let v16481: &str = &*v16474;
                                                let v16512: Option<Vec<std::string::String>> =
                                                    clap::ArgMatches::get_many(
                                                        &v41.clone(),
                                                        v16481,
                                                    )
                                                    .map(|x| x.cloned().into_iter().collect());
                                                let v16537: Spiral::US12 = defaultValue(
                                                    Spiral::US12::US12_1,
                                                    map(Spiral::method23(), v16512),
                                                );
                                                let v16543: Vec<std::string::String> =
                                                    new_empty::<std::string::String>().to_vec();
                                                let v16546: Vec<std::string::String> = match &v16537
                                                {
                                                    Spiral::US12::US12_0(v16537_0_0) => {
                                                        match &v16537 {
                                                            Spiral::US12::US12_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone()
                                                    }
                                                    _ => v16543.clone(),
                                                };
                                                let v16558: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v16473);
                                                let v16606: Vec<u8> =
                                                    Spiral::method24(v16558.unwrap());
                                                let v16608: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v16606);
                                                let v16612: std::string::String = v16608.unwrap();
                                                let v16647: string =
                                                    fable_library_rust::String_::fromString(v16612);
                                                let v16658: string = Spiral::method26(
                                                    Spiral::method237(string("ts"), v16647.clone()),
                                                );
                                                let v16660: Spiral::US5 =
                                                    Spiral::method32(Spiral::method31());
                                                let v16666: Spiral::US5 = match &v16660 {
                                                    Spiral::US5::US5_0(v16660_0_0) => {
                                                        Spiral::US5::US5_0(
                                                            match &v16660 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => Spiral::method32(string(
                                                        "c:\\home\\git\\polyglot\\target\\Builder\\spiral",
                                                    )),
                                                };
                                                let v16672: Spiral::US5 = match &v16666 {
                                                    Spiral::US5::US5_0(v16666_0_0) => {
                                                        Spiral::US5::US5_0(
                                                            match &v16666 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => Spiral::method32(string("/workspaces")),
                                                };
                                                let v16676: string = match &v16672 {
                                                    Spiral::US5::US5_0(v16672_0_0) => match &v16672
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v16691: string = Spiral::method33(
                                                    if string("deps")
                                                        == (Spiral::method52(v16676.clone()))
                                                    {
                                                        let v16684: Spiral::US5 = Spiral::method32(
                                                            Spiral::method38(v16676.clone())
                                                                .clone()
                                                                .unwrap(),
                                                        );
                                                        match &v16684 {
                                                            Spiral::US5::US5_0(v16684_0_0) => {
                                                                match &v16684 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone()
                                                            }
                                                            _ => panic!(
                                                                "{}",
                                                                string(
                                                                    "Option does not have a value."
                                                                ),
                                                            ),
                                                        }
                                                    } else {
                                                        v16676
                                                    },
                                                    string("polyglot"),
                                                );
                                                let v16695: string = toLower(Spiral::method31());
                                                let v16700: string = toLower(v16691);
                                                let v16709: Spiral::US14 =
                                                    if startsWith3(v16695, v16700.clone(), false) {
                                                        Spiral::US14::US14_1(v16700.clone())
                                                    } else {
                                                        Spiral::US14::US14_0(v16700)
                                                    };
                                                let v16721: Result<string, string> = match &v16709 {
                                                    Spiral::US14::US14_0(v16709_0_0) => {
                                                        Ok::<string, string>(v16709_0_0.clone())
                                                    }
                                                    Spiral::US14::US14_1(v16709_1_0) => {
                                                        Err::<string, string>(v16709_1_0.clone())
                                                    }
                                                };
                                                let v16723: bool = true;
                                                let _result_unwrap_or_else =
                                                    v16721.unwrap_or_else(|x| {
                                                        //;
                                                        let v16725: string = x;
                                                        let v16727: bool = true;
                                                        v16725
                                                    });
                                                let v16729: string = _result_unwrap_or_else;
                                                let v16734: string = Spiral::method195(
                                                    Spiral::US5::US5_0(v16658.clone()),
                                                    string("spiral"),
                                                    Spiral::US43::US43_0(Spiral::US42::US42_1),
                                                    v16729.clone(),
                                                );
                                                let v16740: string = Spiral::method196(
                                                    v16647,
                                                    string("spiral"),
                                                    LrcPtr::new(Spiral::UH2::UH2_0),
                                                    LrcPtr::new(Spiral::UH4::UH4_1(
                                                        string("Fable.Core"),
                                                        string("4.3.0"),
                                                        LrcPtr::new(Spiral::UH4::UH4_0),
                                                    )),
                                                    v16734.clone(),
                                                    v16729.clone(),
                                                );
                                                let v16742: string = Spiral::method33(
                                                    v16729.clone(),
                                                    string("lib/typescript/fable/fable_modules"),
                                                );
                                                let v16743: string = concat(new_array(&[
                                                    string("fable-library-"),
                                                    string("ts"),
                                                ]));
                                                let v16744: string =
                                                    Spiral::method238(v16743.clone());
                                                let v16746: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::new(&*v16742.clone());
                                                let v16749: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::filter(
                                                        v16746,
                                                        move |x| {
                                                            Func1::new({
                                                                let v16743 = v16743.clone();
                                                                move
                                                                                                                           |v_11:
                                                                                                                                async_walkdir::DirEntry|
                                                                                                                           Spiral::closure99(v16743.clone(),
                                                                                                                                             v_11)
                                                            })(
                                                                x
                                                            )
                                                        },
                                                    );
                                                let v16750 = Spiral::method242(v16744);
                                                let v16752 = futures::stream::StreamExt::filter_map(
                                                    v16749,
                                                    |x| async { v16750(x) },
                                                );
                                                let v16754: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                                Output = Vec<(string, string)>,
                                                            >,
                                                    >,
                                                > = Box::pin(futures::stream::StreamExt::collect(
                                                    v16752,
                                                ));
                                                let v16756: Vec<(string, string)> = v16754.await;
                                                let v16758: rayon::vec::IntoIter<(string, string)> =
                                                    rayon::iter::IntoParallelIterator::into_par_iter(
                                                        v16756,
                                                    );
                                                let v16761: rayon::iter::Map<
                                                    rayon::vec::IntoIter<(string, string)>,
                                                    _,
                                                > = rayon::iter::ParallelIterator::map(
                                                    v16758,
                                                    |x| {
                                                        Func1::new(move
                                                                                                                      |arg10_0040_22:
                                                                                                                           (string,
                                                                                                                            string)|
                                                                                                                      Spiral::closure107((),
                                                                                                                                         arg10_0040_22))(x)
                                                    },
                                                );
                                                let v16763: Vec<(string, string)> =
                                                    rayon::iter::ParallelIterator::collect(v16761);
                                                let v16766: Option<(string, string)> = tryItem(
                                                    0_i32,
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v16763.clone(),
                                                    ),
                                                );
                                                let v16792: Spiral::US50 = defaultValue(
                                                    Spiral::US50::US50_1,
                                                    map(Spiral::method248(), v16766),
                                                );
                                                let v17109: () = {
                                                    Spiral::closure109(v16792.clone(), ());
                                                    ()
                                                };
                                                Spiral::method251(
                                                    v16734.clone(),
                                                    v16742.clone(),
                                                    v16792.clone(),
                                                );
                                                {
                                                    let patternInput_28: (i32, string) =
                                                        Spiral::method205(
                                                            Spiral::US40::US40_1,
                                                            v16734.clone(),
                                                            string("ts"),
                                                            v16740,
                                                            v16709.clone(),
                                                        );
                                                    let v17426: string = patternInput_28.1.clone();
                                                    let v17425: i32 = patternInput_28.0.clone();
                                                    Spiral::method251(
                                                        v16734.clone(),
                                                        v16742,
                                                        v16792.clone(),
                                                    );
                                                    {
                                                        let patternInput_32: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v17425) != 0_i32 {
                                                            let v17744: () = {
                                                                Spiral::closure110(
                                                                    v17426.clone(),
                                                                    v17425,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("ts")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v17426),
                                                            )
                                                        } else {
                                                            let v18064: bool = true;
                                                            let _vec_map : Vec<_> = v16546.into_iter().map(|x| { //;
                                                                    let v18066:
                                                                            std::string::String =
                                                                        x;
                                                                    let v18068:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v18066);
                                                                    let v18076:
                                                                            string =
                                                                        if contains(v18068.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v18068.clone()
                                                                        } else {
                                                                            concat(new_array(&[string("\""),
                                                                                               v18068,
                                                                                               string("\":\"*\"")]))
                                                                        };
                                                                    let v18078:
                                                                            bool =
                                                                        true; v18076 }).collect::<Vec<_>>();
                                                            let v18080: Vec<string> = _vec_map;
                                                            let v18082:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v18080.clone());
                                                            let v18101: string = join(
                                                                string(",\n"),
                                                                toArray_1(delay(Func0::new({
                                                                    let v18082 = v18082.clone();
                                                                    move || {
                                                                        map_1(
                                                                            Func1::new({
                                                                                let v18082 =
                                                                                    v18082.clone();
                                                                                move |i_3: i32| {
                                                                                    v18082[i_3]
                                                                                        .clone()
                                                                                }
                                                                            }),
                                                                            rangeNumeric(
                                                                                0_i32,
                                                                                1_i32,
                                                                                (get_Count(
                                                                                    v18082.clone(),
                                                                                )) - 1_i32,
                                                                            ),
                                                                        )
                                                                    }
                                                                }))),
                                                            );
                                                            let v18117:
                                                                            string =
                                                                        append((append((append((append((append((append((append(string("{"),
                                                                                                                               (concat(new_array(&[string("  \"name\": \"spiral_"),
                                                                                                                                                   v16658,
                                                                                                                                                   string("\",")]))))),
                                                                                                                       string("  \"dependencies\": {"))),
                                                                                                               (v18101))),
                                                                                                       string("  },"))),
                                                                                               string("    \"devDependencies\": {"))),
                                                                                       string("  },"))),
                                                                               string("}"));
                                                            let v18119: string = Spiral::method33(
                                                                v16734.clone(),
                                                                string("package.json"),
                                                            );
                                                            let v18122: string = Spiral::method33(
                                                                Spiral::method33(
                                                                    v16734.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                            Spiral::method76(v18119, v18117);
                                                            Spiral::method76(v18122, string(""));
                                                            {
                                                                let v18125: string =
                                                                    Spiral::method33(
                                                                        v16734,
                                                                        concat(new_array(&[
                                                                            string("spiral"),
                                                                            string("."),
                                                                            string("ts"),
                                                                        ])),
                                                                    );
                                                                let v18437: () = {
                                                                    Spiral::closure111(
                                                                        v18125.clone(),
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                let v18761: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v18125.clone());
                                                                let v18809: Vec<u8> =
                                                                    Spiral::method24(
                                                                        v18761.unwrap(),
                                                                    );
                                                                let v18811: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v18809,
                                                                );
                                                                let v18815: std::string::String =
                                                                    v18811.unwrap();
                                                                let v18850:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v18815);
                                                                let v18862: bool = contains(
                                                                    v18850.clone(),
                                                                    string(
                                                                        "// spiral.process_typescript",
                                                                    ),
                                                                );
                                                                let v18871: string = if v18862 {
                                                                    v18850.clone()
                                                                } else {
                                                                    Spiral::method63(
                                                                        string(
                                                                            "\\s\\sdefaultOf\\(\\);",
                                                                        ),
                                                                        string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                        replace(
                                                                            v18850,
                                                                            sprintf!(
                                                                                "\"./fable_modules/fable-library-ts.{}/",
                                                                                v16792.clone()
                                                                            ),
                                                                            sprintf!(
                                                                                "\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                v16729,
                                                                                v16792
                                                                            ),
                                                                        ),
                                                                    )
                                                                };
                                                                if (v18862) == false {
                                                                    Spiral::method76(
                                                                        v18125.clone(),
                                                                        concat(new_array(&[
                                                                            v18871.clone(),
                                                                            string("\n\n"),
                                                                            string(
                                                                                "// spiral.process_typescript",
                                                                            ),
                                                                            string("\n"),
                                                                        ])),
                                                                    );
                                                                }
                                                                {
                                                                    let v18874: string =
                                                                        concat(new_array(&[
                                                                            string(
                                                                                "bun --bun run \"",
                                                                            ),
                                                                            v18125.clone(),
                                                                            string("\""),
                                                                        ]));
                                                                    let v18876: string =
                                                                        Spiral::method3(string(
                                                                            "PATH",
                                                                        ));
                                                                    let v18916: Spiral::US5 =
                                                                        if (v18876.clone())
                                                                            == string("")
                                                                        {
                                                                            Spiral::US5::US5_1
                                                                        } else {
                                                                            Spiral::US5::US5_0(
                                                                                concat(new_array(
                                                                                    &[
                                                                                        string(
                                                                                            "~/.bun/bin",
                                                                                        ),
                                                                                        if cfg!(
                                                                                            windows
                                                                                        ) {
                                                                                            string(
                                                                                                ";",
                                                                                            )
                                                                                        } else {
                                                                                            string(
                                                                                                ":",
                                                                                            )
                                                                                        },
                                                                                        v18876,
                                                                                    ],
                                                                                )),
                                                                            )
                                                                        };
                                                                    let v18940:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                toArray(Spiral::method256(Spiral::method255(match &v18916
                                                                                                                                {
                                                                                                                                Spiral::US5::US5_0(v18916_0_0)
                                                                                                                                =>
                                                                                                                                LrcPtr::new(Spiral::UH4::UH4_1(string("PATH"),
                                                                                                                                                               match &v18916
                                                                                                                                                                   {
                                                                                                                                                                   Spiral::US5::US5_0(x)
                                                                                                                                                                   =>
                                                                                                                                                                   x.clone(),
                                                                                                                                                                   _
                                                                                                                                                                   =>
                                                                                                                                                                   unreachable!(),
                                                                                                                                                               }.clone(),
                                                                                                                                                               LrcPtr::new(Spiral::UH4::UH4_0))),
                                                                                                                                _
                                                                                                                                =>
                                                                                                                                LrcPtr::new(Spiral::UH4::UH4_0),
                                                                                                                            },
                                                                                                                            LrcPtr::new(Spiral::UH4::UH4_1(string("TRACE_LEVEL"),
                                                                                                                                                           string("Verbose"),
                                                                                                                                                           LrcPtr::new(Spiral::UH4::UH4_0)))),
                                                                                                          empty::<(string,
                                                                                                                   string)>()));
                                                                    let v18971: Result<
                                                                        string,
                                                                        string,
                                                                    > = match &v16709 {
                                                                        Spiral::US14::US14_0(
                                                                            v16709_0_0,
                                                                        ) => Ok::<string, string>(
                                                                            v16709_0_0.clone(),
                                                                        ),
                                                                        Spiral::US14::US14_1(
                                                                            v16709_1_0,
                                                                        ) => Err::<string, string>(
                                                                            v16709_1_0.clone(),
                                                                        ),
                                                                    };
                                                                    let patternInput_29:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral::method90(v18874.clone(),
                                                                                                 None::<CancellationToken>,
                                                                                                 v18940.clone(),
                                                                                                 None::<Func1<(i32,
                                                                                                               string,
                                                                                                               bool),
                                                                                                              Arc<Async<()>>>>,
                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                              ()>>,
                                                                                                 true,
                                                                                                 v18971.ok(),
                                                                                                 true);
                                                                    let v18990: string =
                                                                        patternInput_29.1.clone();
                                                                    let v18989: i32 =
                                                                        patternInput_29.0.clone();
                                                                    let v18991: i32 =
                                                                        get_Count(v18940.clone());
                                                                    let v18992: Array<string> =
                                                                        new_init(
                                                                            &string(""),
                                                                            v18991,
                                                                        );
                                                                    let v18993: LrcPtr<
                                                                        Spiral::Mut5,
                                                                    > = LrcPtr::new(Spiral::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    });
                                                                    while Spiral::method29(
                                                                        v18991,
                                                                        v18993.clone(),
                                                                    ) {
                                                                        let v18995: i32 =
                                                                            v18993.l0.get().clone();
                                                                        let patternInput_30: (
                                                                            string,
                                                                            string,
                                                                        ) = v18940[v18995].clone();
                                                                        let v18998: string = sprintf!(
                                                                            "$env:{}=\'\'{}\'\'",
                                                                            patternInput_30
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_30
                                                                                .1
                                                                                .clone()
                                                                        );
                                                                        v18992.get_mut()
                                                                            [v18995 as usize] =
                                                                            v18998;
                                                                        {
                                                                            let v18999: i32 =
                                                                                (v18995) + 1_i32;
                                                                            v18993.l0.set(v18999);
                                                                            ()
                                                                        }
                                                                    }
                                                                    {
                                                                        let v19012: string = sprintf!(
                                                                            "pwsh -c \'{}; {}\'",
                                                                            join(
                                                                                string(";"),
                                                                                toArray_1(
                                                                                    ofArray_1(
                                                                                        v18992
                                                                                            .clone(
                                                                                            )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            v18874
                                                                        );
                                                                        let patternInput_31: (
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                        ) = if (v18989) == 0_i32 {
                                                                            let result_3: LrcPtr<
                                                                                MutCell<
                                                                                    Spiral::US5,
                                                                                >,
                                                                            > = refCell(
                                                                                Spiral::US5::US5_1,
                                                                            );
                                                                            try_catch(||
                                                                                                      result_3.set(Spiral::closure62((),
                                                                                                                                     Spiral::closure112(v18990.clone(),
                                                                                                                                                        ()))),
                                                                                                  |ex_3:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_3.set(Spiral::closure113(v18125.clone(),
                                                                                                                                      v18990.clone(),
                                                                                                                                      v19012.clone(),
                                                                                                                                      ex_3.clone())));
                                                                            {
                                                                                let v19020:
                                                                                                    Spiral::US5 =
                                                                                                result_3.get().clone();
                                                                                let v19034:
                                                                                                    Option<string> =
                                                                                                match &v19020
                                                                                                    {
                                                                                                    Spiral::US5::US5_0(v19020_0_0)
                                                                                                    =>
                                                                                                    Some(match &v19020
                                                                                                             {
                                                                                                             Spiral::US5::US5_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }.clone()),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                                (Spiral::US5::US5_0(string("ts")),
                                                                                             Spiral::US5::US5_0(v18871),
                                                                                             Spiral::US5::US5_0(v18125.clone()),
                                                                                             Spiral::US5::US5_0(v19034.unwrap()))
                                                                            }
                                                                        } else {
                                                                            let v19352: () = {
                                                                                Spiral::closure115(
                                                                                    v18125,
                                                                                    v18990,
                                                                                    v18989,
                                                                                    v19012,
                                                                                    (),
                                                                                );
                                                                                ()
                                                                            };
                                                                            (
                                                                                Spiral::US5::US5_0(
                                                                                    string("ts"),
                                                                                ),
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                            )
                                                                        };
                                                                        (
                                                                            patternInput_31
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .1
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .2
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .3
                                                                                .clone(),
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_32.0.clone(),
                                                            patternInput_32.1.clone(),
                                                            patternInput_32.2.clone(),
                                                            patternInput_32.3.clone(),
                                                        )
                                                    }
                                                }
                                            } else {
                                                let patternInput_38: (
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                ) = if (fable_library_rust::String_::fromString(
                                                    v40.clone(),
                                                )) == string("python")
                                                {
                                                    let v19680: string = Spiral::method171();
                                                    let v19687: &str = &*v19680;
                                                    let v19718: Option<std::string::String> =
                                                        clap::ArgMatches::get_one(
                                                            &v41.clone(),
                                                            v19687,
                                                        )
                                                        .cloned();
                                                    let v19743: Spiral::US8 = defaultValue(
                                                        Spiral::US8::US8_1,
                                                        map(Spiral::method20(), v19718),
                                                    );
                                                    let v19750: std::string::String = match &v19743
                                                    {
                                                        Spiral::US8::US8_0(v19743_0_0) => {
                                                            match &v19743 {
                                                                Spiral::US8::US8_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v19752: string =
                                                        fable_library_rust::String_::fromString(
                                                            v19750,
                                                        );
                                                    let v19753: string = Spiral::method22();
                                                    let v19760: &str = &*v19753;
                                                    let v19791: Option<Vec<std::string::String>> =
                                                        clap::ArgMatches::get_many(
                                                            &v41.clone(),
                                                            v19760,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                    let v19816: Spiral::US12 = defaultValue(
                                                        Spiral::US12::US12_1,
                                                        map(Spiral::method23(), v19791),
                                                    );
                                                    let v19822: Vec<std::string::String> =
                                                        new_empty::<std::string::String>().to_vec();
                                                    let v19825: Vec<std::string::String> =
                                                        match &v19816 {
                                                            Spiral::US12::US12_0(v19816_0_0) => {
                                                                match &v19816 {
                                                                    Spiral::US12::US12_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone()
                                                            }
                                                            _ => v19822.clone(),
                                                        };
                                                    let v19826: bool =
                                                        if let Spiral::US0::US0_0 = &v0_1 {
                                                            true
                                                        } else {
                                                            false
                                                        };
                                                    let v19838: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v19752);
                                                    let v19886: Vec<u8> =
                                                        Spiral::method24(v19838.unwrap());
                                                    let v19888: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v19886);
                                                    let v19892: std::string::String =
                                                        v19888.unwrap();
                                                    let v19927: string =
                                                        fable_library_rust::String_::fromString(
                                                            v19892,
                                                        );
                                                    let v19938: string =
                                                        Spiral::method26(Spiral::method237(
                                                            string("py"),
                                                            v19927.clone(),
                                                        ));
                                                    let v19940: Spiral::US5 =
                                                        Spiral::method32(Spiral::method31());
                                                    let v19946: Spiral::US5 = match &v19940 {
                                                        Spiral::US5::US5_0(v19940_0_0) => {
                                                            Spiral::US5::US5_0(
                                                                match &v19940 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => Spiral::method32(string(
                                                            "c:\\home\\git\\polyglot\\target\\Builder\\spiral",
                                                        )),
                                                    };
                                                    let v19952: Spiral::US5 = match &v19946 {
                                                        Spiral::US5::US5_0(v19946_0_0) => {
                                                            Spiral::US5::US5_0(
                                                                match &v19946 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => {
                                                            Spiral::method32(string("/workspaces"))
                                                        }
                                                    };
                                                    let v19956: string = match &v19952 {
                                                        Spiral::US5::US5_0(v19952_0_0) => {
                                                            match &v19952 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v19971: string = Spiral::method33(
                                                        if string("deps")
                                                            == (Spiral::method52(v19956.clone()))
                                                        {
                                                            let v19964: Spiral::US5 =
                                                                Spiral::method32(
                                                                    Spiral::method38(
                                                                        v19956.clone(),
                                                                    )
                                                                    .clone()
                                                                    .unwrap(),
                                                                );
                                                            match &v19964 {
                                                                Spiral::US5::US5_0(v19964_0_0) => {
                                                                    match &v19964 {
                                                                        Spiral::US5::US5_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone()
                                                                }
                                                                _ => panic!(
                                                                    "{}",
                                                                    string(
                                                                        "Option does not have a value."
                                                                    ),
                                                                ),
                                                            }
                                                        } else {
                                                            v19956
                                                        },
                                                        string("polyglot"),
                                                    );
                                                    let v19975: string =
                                                        toLower(Spiral::method31());
                                                    let v19980: string = toLower(v19971);
                                                    let v19989: Spiral::US14 = if startsWith3(
                                                        v19975,
                                                        v19980.clone(),
                                                        false,
                                                    ) {
                                                        Spiral::US14::US14_1(v19980.clone())
                                                    } else {
                                                        Spiral::US14::US14_0(v19980)
                                                    };
                                                    let v20001: Result<string, string> =
                                                        match &v19989 {
                                                            Spiral::US14::US14_0(v19989_0_0) => {
                                                                Ok::<string, string>(
                                                                    v19989_0_0.clone(),
                                                                )
                                                            }
                                                            Spiral::US14::US14_1(v19989_1_0) => {
                                                                Err::<string, string>(
                                                                    v19989_1_0.clone(),
                                                                )
                                                            }
                                                        };
                                                    let v20003: bool = true;
                                                    let _result_unwrap_or_else = v20001
                                                        .unwrap_or_else(|x| {
                                                            //;
                                                            let v20005: string = x;
                                                            let v20007: bool = true;
                                                            v20005
                                                        });
                                                    let v20009: string = _result_unwrap_or_else;
                                                    let v20014: string = Spiral::method195(
                                                        Spiral::US5::US5_0(v19938.clone()),
                                                        string("spiral"),
                                                        Spiral::US43::US43_0(Spiral::US42::US42_2),
                                                        v20009.clone(),
                                                    );
                                                    let v20020: string = Spiral::method196(
                                                        v19927,
                                                        string("spiral"),
                                                        LrcPtr::new(Spiral::UH2::UH2_0),
                                                        LrcPtr::new(Spiral::UH4::UH4_1(
                                                            string("Fable.Core"),
                                                            string("4.3.0"),
                                                            LrcPtr::new(Spiral::UH4::UH4_0),
                                                        )),
                                                        v20014.clone(),
                                                        v20009.clone(),
                                                    );
                                                    Spiral::method204(
                                                        Spiral::method33(
                                                            Spiral::method33(
                                                                v20009,
                                                                string(
                                                                    "lib/python/fable/fable_modules",
                                                                ),
                                                            ),
                                                            string("fable_library"),
                                                        ),
                                                        Spiral::method33(
                                                            v20014.clone(),
                                                            string("fable_modules/fable_library"),
                                                        ),
                                                    );
                                                    {
                                                        let patternInput_33: (i32, string) =
                                                            Spiral::method205(
                                                                Spiral::US40::US40_1,
                                                                v20014.clone(),
                                                                string("py"),
                                                                v20020,
                                                                v19989.clone(),
                                                            );
                                                        let v20029: string =
                                                            patternInput_33.1.clone();
                                                        let v20028: i32 = patternInput_33.0.clone();
                                                        let patternInput_37: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v20028) != 0_i32 {
                                                            let v20347: () = {
                                                                Spiral::closure116(
                                                                    v20029.clone(),
                                                                    v20028,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("py")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v20029),
                                                            )
                                                        } else {
                                                            let v20667: bool = true;
                                                            let _vec_map : Vec<_> = v19825.into_iter().map(|x| { //;
                                                                        let v20669:
                                                                                std::string::String =
                                                                            x;
                                                                        let v20671:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v20669);
                                                                        let v20679:
                                                                                string =
                                                                            if contains(v20671.clone(),
                                                                                        string("="))
                                                                               {
                                                                                v20671.clone()
                                                                            } else {
                                                                                concat(new_array(&[string("\""),
                                                                                                   v20671,
                                                                                                   string("\":\"*\"")]))
                                                                            };
                                                                        let v20681:
                                                                                bool =
                                                                            true; v20679 }).collect::<Vec<_>>();
                                                            let v20683: Vec<string> = _vec_map;
                                                            let v20685:
                                                                                Array<string> =
                                                                            fable_library_rust::NativeArray_::array_from(v20683.clone());
                                                            let v20704: string = join(
                                                                string(",\n"),
                                                                toArray_1(delay(Func0::new({
                                                                    let v20685 = v20685.clone();
                                                                    move || {
                                                                        map_1(
                                                                            Func1::new({
                                                                                let v20685 =
                                                                                    v20685.clone();
                                                                                move |i_4: i32| {
                                                                                    v20685[i_4]
                                                                                        .clone()
                                                                                }
                                                                            }),
                                                                            rangeNumeric(
                                                                                0_i32,
                                                                                1_i32,
                                                                                (get_Count(
                                                                                    v20685.clone(),
                                                                                )) - 1_i32,
                                                                            ),
                                                                        )
                                                                    }
                                                                }))),
                                                            );
                                                            let v20720:
                                                                                string =
                                                                            append((append((append((append((append((append((append(string("{"),
                                                                                                                                   (concat(new_array(&[string("  \"name\": \"spiral_"),
                                                                                                                                                       v19938,
                                                                                                                                                       string("\",")]))))),
                                                                                                                           string("  \"dependencies\": {"))),
                                                                                                                   (v20704))),
                                                                                                           string("  },"))),
                                                                                                   string("    \"devDependencies\": {"))),
                                                                                           string("  },"))),
                                                                                   string("}"));
                                                            let v20722: string = Spiral::method33(
                                                                v20014.clone(),
                                                                string("package.json"),
                                                            );
                                                            let v20725: string = Spiral::method33(
                                                                Spiral::method33(
                                                                    v20014.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                            Spiral::method76(v20722, v20720);
                                                            Spiral::method76(v20725, string(""));
                                                            {
                                                                let v20728: string =
                                                                    Spiral::method33(
                                                                        v20014,
                                                                        concat(new_array(&[
                                                                            string("spiral"),
                                                                            string("."),
                                                                            string("py"),
                                                                        ])),
                                                                    );
                                                                let v21040: () = {
                                                                    Spiral::closure117(
                                                                        v20728.clone(),
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                let v21364: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v20728.clone());
                                                                let v21412: Vec<u8> =
                                                                    Spiral::method24(
                                                                        v21364.unwrap(),
                                                                    );
                                                                let v21414: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v21412,
                                                                );
                                                                let v21418: std::string::String =
                                                                    v21414.unwrap();
                                                                let v21453:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v21418);
                                                                let v21465: bool = contains(
                                                                    v21453.clone(),
                                                                    string(
                                                                        "# spiral.process_python",
                                                                    ),
                                                                );
                                                                let v21477: string = if v21465 {
                                                                    v21453.clone()
                                                                } else {
                                                                    Spiral::method63(
                                                                        string(
                                                                            "\\s\\sdefaultOf\\(\\);",
                                                                        ),
                                                                        string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                        replace(
                                                                            v21453,
                                                                            append(
                                                                                string("),)"),
                                                                                (";".into()),
                                                                            ),
                                                                            string("));"),
                                                                        ),
                                                                    )
                                                                };
                                                                if (v21465) == false {
                                                                    Spiral::method76(
                                                                        v20728.clone(),
                                                                        concat(new_array(&[
                                                                            v21477.clone(),
                                                                            string("\n\n"),
                                                                            string(
                                                                                "# spiral.process_python",
                                                                            ),
                                                                            string("\n"),
                                                                        ])),
                                                                    );
                                                                }
                                                                {
                                                                    let v21480: string =
                                                                        concat(new_array(&[
                                                                            string("python \""),
                                                                            v20728.clone(),
                                                                            string("\""),
                                                                        ]));
                                                                    let v21483: Array<(
                                                                        string,
                                                                        string,
                                                                    )> = new_array(&[(
                                                                        string("TRACE_LEVEL"),
                                                                        string("Verbose"),
                                                                    )]);
                                                                    let v21512: Result<
                                                                        string,
                                                                        string,
                                                                    > = match &v19989 {
                                                                        Spiral::US14::US14_0(
                                                                            v19989_0_0,
                                                                        ) => Ok::<string, string>(
                                                                            v19989_0_0.clone(),
                                                                        ),
                                                                        Spiral::US14::US14_1(
                                                                            v19989_1_0,
                                                                        ) => Err::<string, string>(
                                                                            v19989_1_0.clone(),
                                                                        ),
                                                                    };
                                                                    let patternInput_34:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method90(v21480.clone(),
                                                                                                     None::<CancellationToken>,
                                                                                                     v21483.clone(),
                                                                                                     None::<Func1<(i32,
                                                                                                                   string,
                                                                                                                   bool),
                                                                                                                  Arc<Async<()>>>>,
                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                  ()>>,
                                                                                                     true,
                                                                                                     v21512.ok(),
                                                                                                     true);
                                                                    let v21531: string =
                                                                        patternInput_34.1.clone();
                                                                    let v21530: i32 =
                                                                        patternInput_34.0.clone();
                                                                    let v21532: i32 =
                                                                        get_Count(v21483.clone());
                                                                    let v21533: Array<string> =
                                                                        new_init(
                                                                            &string(""),
                                                                            v21532,
                                                                        );
                                                                    let v21534: LrcPtr<
                                                                        Spiral::Mut5,
                                                                    > = LrcPtr::new(Spiral::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    });
                                                                    while Spiral::method29(
                                                                        v21532,
                                                                        v21534.clone(),
                                                                    ) {
                                                                        let v21536: i32 =
                                                                            v21534.l0.get().clone();
                                                                        let patternInput_35: (
                                                                            string,
                                                                            string,
                                                                        ) = v21483[v21536].clone();
                                                                        let v21539: string = sprintf!(
                                                                            "$env:{}=\'\'{}\'\'",
                                                                            patternInput_35
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_35
                                                                                .1
                                                                                .clone()
                                                                        );
                                                                        v21533.get_mut()
                                                                            [v21536 as usize] =
                                                                            v21539;
                                                                        {
                                                                            let v21540: i32 =
                                                                                (v21536) + 1_i32;
                                                                            v21534.l0.set(v21540);
                                                                            ()
                                                                        }
                                                                    }
                                                                    {
                                                                        let v21553: string = sprintf!(
                                                                            "pwsh -c \'{}; {}\'",
                                                                            join(
                                                                                string(";"),
                                                                                toArray_1(
                                                                                    ofArray_1(
                                                                                        v21533
                                                                                            .clone(
                                                                                            )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            v21480
                                                                        );
                                                                        let patternInput_36: (
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                        ) = if (v21530) == 0_i32 {
                                                                            let result_4: LrcPtr<
                                                                                MutCell<
                                                                                    Spiral::US5,
                                                                                >,
                                                                            > = refCell(
                                                                                Spiral::US5::US5_1,
                                                                            );
                                                                            try_catch(||
                                                                                                          result_4.set(Spiral::closure62((),
                                                                                                                                         Spiral::closure118(v21531.clone(),
                                                                                                                                                            ()))),
                                                                                                      |ex_4:
                                                                                                           LrcPtr<Exception>|
                                                                                                          result_4.set(Spiral::closure119(v20728.clone(),
                                                                                                                                          v21531.clone(),
                                                                                                                                          v21553.clone(),
                                                                                                                                          ex_4.clone())));
                                                                            {
                                                                                let v21561:
                                                                                                        Spiral::US5 =
                                                                                                    result_4.get().clone();
                                                                                let v21575:
                                                                                                        Option<string> =
                                                                                                    match &v21561
                                                                                                        {
                                                                                                        Spiral::US5::US5_0(v21561_0_0)
                                                                                                        =>
                                                                                                        Some(match &v21561
                                                                                                                 {
                                                                                                                 Spiral::US5::US5_0(x)
                                                                                                                 =>
                                                                                                                 x.clone(),
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 unreachable!(),
                                                                                                             }.clone()),
                                                                                                        _
                                                                                                        =>
                                                                                                        None::<string>,
                                                                                                    };
                                                                                (Spiral::US5::US5_0(string("py")),
                                                                                                 Spiral::US5::US5_0(v21477),
                                                                                                 Spiral::US5::US5_0(v20728.clone()),
                                                                                                 Spiral::US5::US5_0(v21575.unwrap()))
                                                                            }
                                                                        } else {
                                                                            let v21893: () = {
                                                                                Spiral::closure121(
                                                                                    v20728,
                                                                                    v21531,
                                                                                    v21530,
                                                                                    v21553,
                                                                                    (),
                                                                                );
                                                                                ()
                                                                            };
                                                                            (
                                                                                Spiral::US5::US5_0(
                                                                                    string("py"),
                                                                                ),
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                            )
                                                                        };
                                                                        (
                                                                            patternInput_36
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .1
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .2
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .3
                                                                                .clone(),
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_37.0.clone(),
                                                            patternInput_37.1.clone(),
                                                            patternInput_37.2.clone(),
                                                            patternInput_37.3.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v22531: () = {
                                                        Spiral::closure122(v41, v40, ());
                                                        ()
                                                    };
                                                    (
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                    )
                                                };
                                                (
                                                    patternInput_38.0.clone(),
                                                    patternInput_38.1.clone(),
                                                    patternInput_38.2.clone(),
                                                    patternInput_38.3.clone(),
                                                )
                                            };
                                            (
                                                patternInput_39.0.clone(),
                                                patternInput_39.1.clone(),
                                                patternInput_39.2.clone(),
                                                patternInput_39.3.clone(),
                                            )
                                        };
                                        let v22861: Spiral::US5 = patternInput_40.3.clone();
                                        let v22860: Spiral::US5 = patternInput_40.2.clone();
                                        let v22859: Spiral::US5 = patternInput_40.1.clone();
                                        let v22858: Spiral::US5 = patternInput_40.0.clone();
                                        new_array(&[
                                            (
                                                string("extension"),
                                                match &v22858 {
                                                    Spiral::US5::US5_0(v22858_0_0) => match &v22858
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code"),
                                                match &v22859 {
                                                    Spiral::US5::US5_0(v22859_0_0) => match &v22859
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code_path"),
                                                match &v22860 {
                                                    Spiral::US5::US5_0(v22860_0_0) => match &v22860
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("output"),
                                                match &v22861 {
                                                    Spiral::US5::US5_0(v22861_0_0) => match &v22861
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                        ])
                                    }
                                }
                            }
                        }
                    } else {
                        new_array(&[
                            (string("extension"), string("")),
                            (string("code"), string("")),
                            (string("code_path"), string("")),
                            (string("output"), string("")),
                        ])
                    };
                    let v22895: Vec<(string, string)> = v22893.to_vec();
                    let v22898: bool = true;
                    let _func1_from_v22896 = Func1::from(move |value| {
                        //;
                        let patternInput_41: (string, string) = value;
                        let v22908: &str = &*patternInput_41.0.clone();
                        let v22944: std::string::String = String::from(v22908);
                        let v22980: &str = &*patternInput_41.1.clone();
                        let v23016: std::string::String = String::from(v22980);
                        let v23052: bool = true;
                        LrcPtr::new((v22944, v23016)) /*;
                        let v23054: bool = */
                    }); //;
                    let v23056: Func1<
                        (string, string),
                        LrcPtr<(std::string::String, std::string::String)>,
                    > = _func1_from_v22896;
                    let v23059: Vec<LrcPtr<(std::string::String, std::string::String)>> = v22895
                        .into_iter()
                        .map(|x| {
                            Func1::new({
                                let v23056 = v23056.clone();
                                move |arg10_0040_33: (string, string)| {
                                    Spiral::closure67(v23056.clone(), arg10_0040_33)
                                }
                            })(x.clone())
                        })
                        .collect::<Vec<_>>();
                    let v23060: string = string(
                        "std::collections::BTreeMap::from_iter(v23059.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))",
                    );
                    let v23061: std::collections::BTreeMap<
                        std::string::String,
                        std::string::String,
                    > = std::collections::BTreeMap::from_iter(
                        v23059
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                    let v23063: Result<std::string::String, serde_json::Error> =
                        serde_json::to_string(&v23061);
                    let v23064 = Spiral::method266();
                    let v23068: Result<std::string::String, string> = v23063.map_err(|x| v23064(x));
                    let v23081: bool = true;
                    let _result_map_ = v23068.map(|x| {
                        //;
                        let v23083: std::string::String = x;
                        let v23085: string = fable_library_rust::String_::fromString(v23083);
                        let v23087: bool = true;
                        v23085
                    });
                    let v23089: Result<string, string> = _result_map_;
                    let v23092: string = string("}");
                    let v23097: bool = true;
                    let _fix_closure_v23094 = v23089;
                    let v23103: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v23094 "), (v23092))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v23104: bool = true;
                    _fix_closure_v23094
                },
            ); // rust.fix_closure';
            let v23106 = __future_init;
            v23106
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v17: () = {
                Spiral::closure2((), ());
                ()
            };
            let v44: LrcPtr<Spiral::Mut4> =
                (Spiral::TraceState::trace_state().get().clone().unwrap())
                    .4
                    .clone();
            let v368: () = {
                Spiral::closure5(v0_1, ());
                ()
            };
            let v680: clap::Command = Spiral::method0();
            let v682: clap::ArgMatches = clap::Command::get_matches(v680);
            let v684: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral::method17(v44.l0.get().clone(), v682);
            let v686: Result<string, string> = futures::executor::block_on(v684);
            let v690: string = v686.unwrap();
            if if let Spiral::US0::US0_2 = &v44.l0.get().clone() {
                true
            } else {
                false
            } {
                let v707: () = {
                    Spiral::closure10(v690, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral::v1())(args)
        }
    }
}
pub use module_1216f6c3::*;
#[path = "../../lib/spiral/async_.rs"]
mod module_763b9e6c;
pub use module_763b9e6c::*;
#[path = "../../lib/spiral/common.rs"]
mod module_18f1c018;
pub use module_18f1c018::*;
#[path = "../../lib/spiral/crypto.rs"]
mod module_c0301e36;
pub use module_c0301e36::*;
#[path = "../../lib/spiral/date_time.rs"]
mod module_e5abed0b;
pub use module_e5abed0b::*;
#[path = "../../lib/spiral/file_system.rs"]
mod module_336d1dc9;
pub use module_336d1dc9::*;
#[path = "../../lib/spiral/lib.rs"]
mod module_12dde172;
pub use module_12dde172::*;
#[path = "../../lib/spiral/networking.rs"]
mod module_7e35832b;
pub use module_7e35832b::*;
#[path = "../../lib/spiral/platform.rs"]
mod module_afd02cca;
pub use module_afd02cca::*;
#[path = "../../lib/spiral/runtime.rs"]
mod module_a3c64389;
pub use module_a3c64389::*;
#[path = "../../lib/spiral/sm.rs"]
mod module_8f227ecb;
pub use module_8f227ecb::*;
#[path = "../../lib/spiral/threading.rs"]
mod module_e08c16fb;
pub use module_e08c16fb::*;
#[path = "../../lib/spiral/trace.rs"]
mod module_702ddcb4;
pub use module_702ddcb4::*;
#[path = "../../deps/polyglot/lib/fsharp/Common.rs"]
mod module_eb7e4788;
pub use module_eb7e4788::*;
pub mod Polyglot {
    pub use crate::module_eb7e4788::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral::main(array_from(args));
}
