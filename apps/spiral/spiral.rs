#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_6ff740fe {
    pub mod Spiral {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::List_::List;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith3;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::IDisposable;
        use fable_library_rust::System::Text::StringBuilder;
        use fable_library_rust::System::Threading::CancellationToken;
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral::Mut0>,
                        LrcPtr<Spiral::Mut1>,
                        LrcPtr<Spiral::Mut2>,
                        LrcPtr<Spiral::Mut3>,
                        LrcPtr<Spiral::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral::Mut0>,
                                LrcPtr<Spiral::Mut1>,
                                LrcPtr<Spiral::Mut2>,
                                LrcPtr<Spiral::Mut3>,
                                LrcPtr<Spiral::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral::Mut0>,
                                LrcPtr<Spiral::Mut1>,
                                LrcPtr<Spiral::Mut2>,
                                LrcPtr<Spiral::Mut3>,
                                LrcPtr<Spiral::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron: core::fmt::Debug + core::fmt::Display {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + core::fmt::Debug + core::fmt::Display> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait ICryptoCreateHash: core::fmt::Debug + core::fmt::Display {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + core::fmt::Debug + core::fmt::Display> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256: core::fmt::Debug + core::fmt::Display {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + core::fmt::Debug + core::fmt::Display> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        pub trait IFs: core::fmt::Debug + core::fmt::Display {
            fn realpathSync(&self, path: string) -> string;
        }
        impl<V: IFs + core::fmt::Debug + core::fmt::Display> IFs for LrcPtr<V> {
            #[inline]
            fn realpathSync(&self, path: string) -> string {
                (**self).realpathSync(path)
            }
        }
        pub trait IPathJoin: core::fmt::Debug + core::fmt::Display {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + core::fmt::Debug + core::fmt::Display> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync: core::fmt::Debug + core::fmt::Display {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + core::fmt::Debug + core::fmt::Display> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname: core::fmt::Debug + core::fmt::Display {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + core::fmt::Debug + core::fmt::Display> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        pub trait IPathBasename: core::fmt::Debug + core::fmt::Display {
            fn basename(&self, path: string) -> string;
        }
        impl<V: IPathBasename + core::fmt::Debug + core::fmt::Display> IPathBasename for LrcPtr<V> {
            #[inline]
            fn basename(&self, path: string) -> string {
                (**self).basename(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral::US0>,
        }
        impl core::fmt::Display for Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US1 {
            US1_0(Spiral::US0),
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US2 {
            US2_0(i64),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US3 {
            US3_0,
            US3_1,
            US3_2,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US4 {
            US4_0(Spiral::US3),
            US4_1(Spiral::US3),
            US4_2(Spiral::US3),
            US4_3(Spiral::US3),
            US4_4(Spiral::US3),
            US4_5(Spiral::US3),
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US5 {
            US5_0(string),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(std::string::String, clap::ArgMatches),
            US6_1,
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(std::string::String),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US10 {
            US10_0,
            US10_1,
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US9 {
            US9_0(Spiral::US10),
            US9_1,
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US8 {
            US8_0(Spiral::US9),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Vec<std::string::String>),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US12 {
            US12_0,
            US12_1,
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US13 {
            US13_0(string),
            US13_1(string),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::path::PathBuf),
            US14_1(string),
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::path::PathBuf),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0,
            US16_1(std::string::String),
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(string, Spiral::US5),
            US17_1(string),
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral::UH0>),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral::US18>,
                LrcPtr<Spiral::UH1>,
            ),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US19_1(string),
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US20 {
            US20_0(char),
            US20_1,
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(string, Spiral::US5, string, LrcPtr<StringBuilder>, i32, i32),
            US22_1(string),
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(Spiral::US20, string, LrcPtr<StringBuilder>, i32, i32),
            US23_1(string),
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Spiral::US5, string, LrcPtr<StringBuilder>, i32, i32),
            US24_1(string),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US25 {
            US25_0(Array<string>),
            US25_1(string),
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral::UH2>),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(LrcPtr<Spiral::UH2>, string, LrcPtr<StringBuilder>, i32, i32),
            US26_1(string),
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral::US19>,
                LrcPtr<Spiral::UH3>,
            ),
        }
        impl core::fmt::Display for UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US27_1(std::string::String),
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US28_1,
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::string::String),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US30_1,
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(std::process::Output),
            US32_1(std::string::String),
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US33 {
            US33_0(i32),
            US33_1,
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US34_1,
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US35 {
            US35_0(CancellationToken),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US38 {
            US38_0,
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Spiral::US38),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US36 {
            US36_0(Spiral::US37),
            US36_1,
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US40 {
            US40_0(string),
            US40_1(string),
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US39 {
            US39_0(Spiral::US40),
            US39_1,
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US41 {
            US41_0,
            US41_1,
            US41_2,
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Spiral::US41),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, string, LrcPtr<Spiral::UH4>),
        }
        impl core::fmt::Display for UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(chrono::DateTime<chrono::Utc>),
            US43_1,
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US44 {
            US44_0(i32, string),
            US44_1(i32, string),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(std::collections::HashMap<string, string>),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US46 {
            US46_0(Spiral::US5),
            US46_1,
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, bool, LrcPtr<Spiral::UH5>),
        }
        impl core::fmt::Display for UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US47 {
            US47_0,
            US47_1(string),
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(std::fs::FileType),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US49 {
            US49_0,
            US49_1,
            US49_2,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(async_walkdir::DirEntry),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US51 {
            US51_0(string, string),
            US51_1,
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"gleam\"#");
            let v31: &'static str = r#"gleam"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"gleam-path\"#");
            let v36: &'static str = r#"gleam-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('g');
            let v41: string = string("r#\"gleam-path\"#");
            let v42: &'static str = r#"gleam-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"target\"#");
            let v51: &'static str = r#"target"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('t');
            let v56: string = string("r#\"target\"#");
            let v57: &'static str = r#"target"#;
            let v59: clap::Arg = v55.long(v57);
            let v64: string = toLower(string("JavaScript"));
            let v85: Array<string> = toArray(ofArray(new_array(&[toLower(string("Erlang")), v64])));
            let v89: Vec<string> = v85.to_vec();
            let v91: bool = true;
            let _vec_map: Vec<_> = v89
                .into_iter()
                .map(|x| {
                    //;
                    let v93: string = x;
                    let v100: &str = &*v93;
                    let v133: std::string::String = String::from(v100);
                    let v161: Box<std::string::String> = Box::new(v133);
                    let v163: &'static mut std::string::String = Box::leak(v161);
                    let v165: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v163);
                    let v167: bool = true;
                    v165
                })
                .collect::<Vec<_>>();
            let v169: Vec<clap::builder::PossibleValue> = _vec_map;
            let v171: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v169),
            );
            let v173: clap::Arg = v59.value_parser(v171);
            let v175: clap::Command = clap::Command::arg(v48, v173);
            let v177: string = string("r#\"NAME\"#");
            let v180: string = string("r#\"VERSION\"#");
            let v182: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v184: usize = 1_i32 as usize;
            let v188: usize = 0_i32 as usize;
            let v204: clap::builder::ValueRange = if (v188) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v184..)
            } else {
                let v202: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v184..v188)
            };
            let v206: string = string("r#\"deps\"#");
            let v207: &'static str = r#"deps"#;
            let v209: clap::Arg = clap::Arg::new(v207);
            let v211: clap::Arg = v209.short('d');
            let v212: string = string("r#\"deps\"#");
            let v213: &'static str = r#"deps"#;
            let v215: clap::Arg = v211.long(v213);
            let v217: Vec<&'static str> = v182.to_vec();
            let v219: clap::Arg = v215.value_names(v217);
            let v221: clap::Arg = v219.num_args(v204);
            let v223: clap::ArgAction = clap::ArgAction::Append;
            let v225: clap::Arg = v221.action(v223);
            let v227: clap::Command = clap::Command::arg(v175, v225);
            let v229: clap::Command = clap::Command::subcommand(v28, v227);
            let v231: string = string("r#\"cuda\"#");
            let v232: &'static str = r#"cuda"#;
            let v234: clap::Command = clap::Command::new(v232);
            let v236: string = string("r#\"py-path\"#");
            let v237: &'static str = r#"py-path"#;
            let v239: clap::Arg = clap::Arg::new(v237);
            let v241: clap::Arg = v239.short('p');
            let v242: string = string("r#\"py-path\"#");
            let v243: &'static str = r#"py-path"#;
            let v245: clap::Arg = v241.long(v243);
            let v247: clap::Arg = v245.required(true);
            let v249: clap::Command = clap::Command::arg(v234, v247);
            let v251: string = string("r#\"env\"#");
            let v252: &'static str = r#"env"#;
            let v254: clap::Arg = clap::Arg::new(v252);
            let v256: clap::Arg = v254.short('e');
            let v257: string = string("r#\"env\"#");
            let v258: &'static str = r#"env"#;
            let v260: clap::Arg = v256.long(v258);
            let v265: string = toLower(string("Poetry"));
            let v286: Array<string> = toArray(ofArray(new_array(&[toLower(string("Pip")), v265])));
            let v290: Vec<string> = v286.to_vec();
            let v292: bool = true;
            let _vec_map: Vec<_> = v290
                .into_iter()
                .map(|x| {
                    //;
                    let v294: string = x;
                    let v301: &str = &*v294;
                    let v334: std::string::String = String::from(v301);
                    let v362: Box<std::string::String> = Box::new(v334);
                    let v364: &'static mut std::string::String = Box::leak(v362);
                    let v366: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v364);
                    let v368: bool = true;
                    v366
                })
                .collect::<Vec<_>>();
            let v370: Vec<clap::builder::PossibleValue> = _vec_map;
            let v372: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v370),
            );
            let v374: clap::Arg = v260.value_parser(v372);
            let v376: clap::Command = clap::Command::arg(v249, v374);
            let v377: string = string("r#\"NAME\"#");
            let v379: string = string("r#\"VERSION\"#");
            let v381: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v383: usize = 1_i32 as usize;
            let v387: usize = 0_i32 as usize;
            let v403: clap::builder::ValueRange = if (v387) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v383..)
            } else {
                let v401: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v383..v387)
            };
            let v404: string = string("r#\"deps\"#");
            let v405: &'static str = r#"deps"#;
            let v407: clap::Arg = clap::Arg::new(v405);
            let v409: clap::Arg = v407.short('d');
            let v410: string = string("r#\"deps\"#");
            let v411: &'static str = r#"deps"#;
            let v413: clap::Arg = v409.long(v411);
            let v415: Vec<&'static str> = v381.to_vec();
            let v417: clap::Arg = v413.value_names(v415);
            let v419: clap::Arg = v417.num_args(v403);
            let v421: clap::ArgAction = clap::ArgAction::Append;
            let v423: clap::Arg = v419.action(v421);
            let v425: clap::Command = clap::Command::arg(v376, v423);
            let v427: clap::Command = clap::Command::subcommand(v229, v425);
            let v429: string = string("r#\"fable\"#");
            let v430: &'static str = r#"fable"#;
            let v432: clap::Command = clap::Command::new(v430);
            let v434: string = string("r#\"fs-path\"#");
            let v435: &'static str = r#"fs-path"#;
            let v437: clap::Arg = clap::Arg::new(v435);
            let v439: clap::Arg = v437.short('f');
            let v440: string = string("r#\"fs-path\"#");
            let v441: &'static str = r#"fs-path"#;
            let v443: clap::Arg = v439.long(v441);
            let v445: clap::Arg = v443.required(true);
            let v447: clap::Command = clap::Command::arg(v432, v445);
            let v448: string = string("r#\"command\"#");
            let v449: &'static str = r#"command"#;
            let v451: clap::Arg = clap::Arg::new(v449);
            let v453: clap::Arg = v451.short('c');
            let v454: string = string("r#\"command\"#");
            let v455: &'static str = r#"command"#;
            let v457: clap::Arg = v453.long(v455);
            let v459: clap::Command = clap::Command::arg(v447, v457);
            let v461: clap::Command = clap::Command::subcommand(v427, v459);
            let v463: string = string("r#\"rust\"#");
            let v464: &'static str = r#"rust"#;
            let v466: clap::Command = clap::Command::new(v464);
            let v467: string = string("r#\"fs-path\"#");
            let v468: &'static str = r#"fs-path"#;
            let v470: clap::Arg = clap::Arg::new(v468);
            let v472: clap::Arg = v470.short('f');
            let v473: string = string("r#\"fs-path\"#");
            let v474: &'static str = r#"fs-path"#;
            let v476: clap::Arg = v472.long(v474);
            let v478: clap::Arg = v476.required(true);
            let v480: clap::Command = clap::Command::arg(v466, v478);
            let v481: string = string("r#\"NAME\"#");
            let v483: string = string("r#\"VERSION\"#");
            let v485: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v487: usize = 1_i32 as usize;
            let v491: usize = 0_i32 as usize;
            let v507: clap::builder::ValueRange = if (v491) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v487..)
            } else {
                let v505: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v487..v491)
            };
            let v508: string = string("r#\"deps\"#");
            let v509: &'static str = r#"deps"#;
            let v511: clap::Arg = clap::Arg::new(v509);
            let v513: clap::Arg = v511.short('d');
            let v514: string = string("r#\"deps\"#");
            let v515: &'static str = r#"deps"#;
            let v517: clap::Arg = v513.long(v515);
            let v519: Vec<&'static str> = v485.to_vec();
            let v521: clap::Arg = v517.value_names(v519);
            let v523: clap::Arg = v521.num_args(v507);
            let v525: clap::ArgAction = clap::ArgAction::Append;
            let v527: clap::Arg = v523.action(v525);
            let v529: clap::Command = clap::Command::arg(v480, v527);
            let v531: usize = 0_i32 as usize;
            let v535: usize = 1_i32 as usize;
            let v551: clap::builder::ValueRange = if (v535) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v531..)
            } else {
                let v549: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v531..=v535)
            };
            let v553: string = string("r#\"wasm\"#");
            let v554: &'static str = r#"wasm"#;
            let v556: clap::Arg = clap::Arg::new(v554);
            let v558: clap::Arg = v556.short('w');
            let v559: string = string("r#\"wasm\"#");
            let v560: &'static str = r#"wasm"#;
            let v562: clap::Arg = v558.long(v560);
            let v564: clap::Arg = v562.num_args(v551);
            let v566: clap::Arg = v564.require_equals(true);
            let v568: string = string("r#\"\"#");
            let v569: &str = r#""#;
            let v571: clap::Arg = v566.default_missing_value(v569);
            let v573: clap::Command = clap::Command::arg(v529, v571);
            let v575: usize = 0_i32 as usize;
            let v579: usize = 1_i32 as usize;
            let v595: clap::builder::ValueRange = if (v579) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v575..)
            } else {
                let v593: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v575..=v579)
            };
            let v597: string = string("r#\"contract\"#");
            let v598: &'static str = r#"contract"#;
            let v600: clap::Arg = clap::Arg::new(v598);
            let v602: clap::Arg = v600.short('c');
            let v603: string = string("r#\"contract\"#");
            let v604: &'static str = r#"contract"#;
            let v606: clap::Arg = v602.long(v604);
            let v608: clap::Arg = v606.num_args(v595);
            let v610: clap::Arg = v608.require_equals(true);
            let v611: string = string("r#\"\"#");
            let v612: &str = r#""#;
            let v614: clap::Arg = v610.default_missing_value(v612);
            let v616: clap::Command = clap::Command::arg(v573, v614);
            let v618: string = string("r#\"cleanup\"#");
            let v619: &'static str = r#"cleanup"#;
            let v621: clap::Arg = clap::Arg::new(v619);
            let v623: clap::Arg = v621.short('l');
            let v624: string = string("r#\"cleanup\"#");
            let v625: &'static str = r#"cleanup"#;
            let v627: clap::Arg = v623.long(v625);
            let v629: string = string("r#\"true\"#");
            let v630: &str = r#"true"#;
            let v632: clap::Arg = v627.default_value(v630);
            let v634: clap::ArgAction = clap::ArgAction::SetFalse;
            let v636: clap::Arg = v632.action(v634);
            let v638: clap::Command = clap::Command::arg(v616, v636);
            let v640: clap::Command = clap::Command::subcommand(v461, v638);
            let v642: string = string("r#\"typescript\"#");
            let v643: &'static str = r#"typescript"#;
            let v645: clap::Command = clap::Command::new(v643);
            let v646: string = string("r#\"fs-path\"#");
            let v647: &'static str = r#"fs-path"#;
            let v649: clap::Arg = clap::Arg::new(v647);
            let v651: clap::Arg = v649.short('f');
            let v652: string = string("r#\"fs-path\"#");
            let v653: &'static str = r#"fs-path"#;
            let v655: clap::Arg = v651.long(v653);
            let v657: clap::Arg = v655.required(true);
            let v659: clap::Command = clap::Command::arg(v645, v657);
            let v660: string = string("r#\"NAME\"#");
            let v662: string = string("r#\"VERSION\"#");
            let v664: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v666: usize = 1_i32 as usize;
            let v670: usize = 0_i32 as usize;
            let v685: clap::builder::ValueRange = if (v670) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v666..)
            } else {
                let v683: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v666..v670)
            };
            let v686: string = string("r#\"deps\"#");
            let v687: &'static str = r#"deps"#;
            let v689: clap::Arg = clap::Arg::new(v687);
            let v691: clap::Arg = v689.short('d');
            let v692: string = string("r#\"deps\"#");
            let v693: &'static str = r#"deps"#;
            let v695: clap::Arg = v691.long(v693);
            let v697: Vec<&'static str> = v664.to_vec();
            let v699: clap::Arg = v695.value_names(v697);
            let v701: clap::Arg = v699.num_args(v685);
            let v703: clap::ArgAction = clap::ArgAction::Append;
            let v705: clap::Arg = v701.action(v703);
            let v707: clap::Command = clap::Command::arg(v659, v705);
            let v709: clap::Command = clap::Command::subcommand(v640, v707);
            let v711: string = string("r#\"python\"#");
            let v712: &'static str = r#"python"#;
            let v714: clap::Command = clap::Command::new(v712);
            let v715: string = string("r#\"fs-path\"#");
            let v716: &'static str = r#"fs-path"#;
            let v718: clap::Arg = clap::Arg::new(v716);
            let v720: clap::Arg = v718.short('f');
            let v721: string = string("r#\"fs-path\"#");
            let v722: &'static str = r#"fs-path"#;
            let v724: clap::Arg = v720.long(v722);
            let v726: clap::Arg = v724.required(true);
            let v728: clap::Command = clap::Command::arg(v714, v726);
            let v729: string = string("r#\"NAME\"#");
            let v731: string = string("r#\"VERSION\"#");
            let v733: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v735: usize = 1_i32 as usize;
            let v739: usize = 0_i32 as usize;
            let v754: clap::builder::ValueRange = if (v739) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v735..)
            } else {
                let v752: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v735..v739)
            };
            let v755: string = string("r#\"deps\"#");
            let v756: &'static str = r#"deps"#;
            let v758: clap::Arg = clap::Arg::new(v756);
            let v760: clap::Arg = v758.short('d');
            let v761: string = string("r#\"deps\"#");
            let v762: &'static str = r#"deps"#;
            let v764: clap::Arg = v760.long(v762);
            let v766: Vec<&'static str> = v733.to_vec();
            let v768: clap::Arg = v764.value_names(v766);
            let v770: clap::Arg = v768.num_args(v754);
            let v772: clap::ArgAction = clap::ArgAction::Append;
            let v774: clap::Arg = v770.action(v772);
            let v776: clap::Command = clap::Command::arg(v728, v774);
            let v778: clap::Command = clap::Command::subcommand(v709, v776);
            let v780: string = string("r#\"dib\"#");
            let v781: &'static str = r#"dib"#;
            let v783: clap::Command = clap::Command::new(v781);
            let v785: string = string("r#\"path\"#");
            let v786: &'static str = r#"path"#;
            let v788: clap::Arg = clap::Arg::new(v786);
            let v790: clap::Arg = v788.short('p');
            let v791: string = string("r#\"path\"#");
            let v792: &'static str = r#"path"#;
            let v794: clap::Arg = v790.long(v792);
            let v796: clap::Arg = v794.required(true);
            let v798: clap::Command = clap::Command::arg(v783, v796);
            let v800: string = string("clap::value_parser!(u8).into()");
            let v801: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v803: string = string("r#\"retries\"#");
            let v804: &'static str = r#"retries"#;
            let v806: clap::Arg = clap::Arg::new(v804);
            let v808: clap::Arg = v806.short('r');
            let v809: string = string("r#\"retries\"#");
            let v810: &'static str = r#"retries"#;
            let v812: clap::Arg = v808.long(v810);
            let v814: clap::Arg = v812.value_parser(v801);
            let v816: clap::Command = clap::Command::arg(v798, v814);
            let v818: string = string("r#\"working-directory\"#");
            let v819: &'static str = r#"working-directory"#;
            let v821: clap::Arg = clap::Arg::new(v819);
            let v823: clap::Arg = v821.short('w');
            let v824: string = string("r#\"working-directory\"#");
            let v825: &'static str = r#"working-directory"#;
            let v827: clap::Arg = v823.long(v825);
            let v829: clap::Command = clap::Command::arg(v816, v827);
            clap::Command::subcommand(v778, v829)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
        {
        let v4: string = string("*/ #[test] fn verify_app() { //");
        let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method4(v0_1: string) -> string {
            v0_1
        }
        pub fn method5() -> string {
            string("")
        }
        pub fn closure3(unitVar: (), v0_1: string) -> Spiral::US5 {
            Spiral::US5::US5_0(v0_1)
        }
        pub fn method6() -> Func1<string, Spiral::US5> {
            Func1::new(move |v: string| Spiral::closure3((), v))
        }
        pub fn method3(v0_1: string) -> string {
            let v3: string = Spiral::method4(v0_1);
            let v5: Result<std::string::String, std::env::VarError> = std::env::var(&*v3);
            let v7: bool = true;
            let _result_map_ = v5.map(|x| {
                //;
                let v9: std::string::String = x;
                let v11: string = fable_library_rust::String_::fromString(v9);
                let v13: bool = true;
                v11
            });
            let v15: Result<string, std::env::VarError> = _result_map_;
            let v16: string = Spiral::method5();
            v15.unwrap_or(v16)
        }
        pub fn method2() -> (Spiral::US1, Spiral::US2) {
            let v1_1: string = Spiral::method3(string("TRACE_LEVEL"));
            let v6: string = toLower(string("Critical"));
            let v13: string = toLower(string("Warning"));
            let v20: string = toLower(string("Info"));
            let v27: string = toLower(string("Debug"));
            let v34: string = toLower(string("Verbose"));
            let v41: Spiral::US1 = if string("Verbose") == (v1_1.clone()) {
                Spiral::US1::US1_0(Spiral::US0::US0_0)
            } else {
                Spiral::US1::US1_1
            };
            (
                match &v41 {
                    Spiral::US1::US1_0(v41_0_0) => Spiral::US1::US1_0(
                        match &v41 {
                            Spiral::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    _ => {
                        let v48: Spiral::US1 = if string("Debug") == (v1_1.clone()) {
                            Spiral::US1::US1_0(Spiral::US0::US0_1)
                        } else {
                            Spiral::US1::US1_1
                        };
                        match &v48 {
                            Spiral::US1::US1_0(v48_0_0) => Spiral::US1::US1_0(
                                match &v48 {
                                    Spiral::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v55: Spiral::US1 = if string("Info") == (v1_1.clone()) {
                                    Spiral::US1::US1_0(Spiral::US0::US0_2)
                                } else {
                                    Spiral::US1::US1_1
                                };
                                match &v55 {
                                    Spiral::US1::US1_0(v55_0_0) => Spiral::US1::US1_0(
                                        match &v55 {
                                            Spiral::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => {
                                        let v62: Spiral::US1 =
                                            if string("Warning") == (v1_1.clone()) {
                                                Spiral::US1::US1_0(Spiral::US0::US0_3)
                                            } else {
                                                Spiral::US1::US1_1
                                            };
                                        match &v62 {
                                            Spiral::US1::US1_0(v62_0_0) => Spiral::US1::US1_0(
                                                match &v62 {
                                                    Spiral::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => {
                                                let v69: Spiral::US1 =
                                                    if string("Critical") == (v1_1.clone()) {
                                                        Spiral::US1::US1_0(Spiral::US0::US0_4)
                                                    } else {
                                                        Spiral::US1::US1_1
                                                    };
                                                match &v69 {
                                                    Spiral::US1::US1_0(v69_0_0) => {
                                                        Spiral::US1::US1_0(
                                                            match &v69 {
                                                                Spiral::US1::US1_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => {
                                                        let v76: Spiral::US1 = if (v34.clone())
                                                            == (v1_1.clone())
                                                        {
                                                            Spiral::US1::US1_0(Spiral::US0::US0_0)
                                                        } else {
                                                            Spiral::US1::US1_1
                                                        };
                                                        match &v76 {
                                                            Spiral::US1::US1_0(v76_0_0) => {
                                                                Spiral::US1::US1_0(
                                                                    match &v76 {
                                                                        Spiral::US1::US1_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone(),
                                                                )
                                                            }
                                                            _ => {
                                                                let v83: Spiral::US1 = if (v27
                                                                    .clone())
                                                                    == (v1_1.clone())
                                                                {
                                                                    Spiral::US1::US1_0(
                                                                        Spiral::US0::US0_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US1::US1_1
                                                                };
                                                                match &v83 {
                                                                 Spiral::US1::US1_0(v83_0_0)
                                                                 =>
                                                                 Spiral::US1::US1_0(match &v83
                                                                                        {
                                                                                        Spiral::US1::US1_0(x)
                                                                                        =>
                                                                                        x.clone(),
                                                                                        _
                                                                                        =>
                                                                                        unreachable!(),
                                                                                    }.clone()),
                                                                 _ => {
                                                                     let v90:
                                                                             Spiral::US1 =
                                                                         if (v20.clone())
                                                                                ==
                                                                                (v1_1.clone())
                                                                            {
                                                                             Spiral::US1::US1_0(Spiral::US0::US0_2)
                                                                         } else {
                                                                             Spiral::US1::US1_1
                                                                         };
                                                                     match &v90
                                                                         {
                                                                         Spiral::US1::US1_0(v90_0_0)
                                                                         =>
                                                                         Spiral::US1::US1_0(match &v90
                                                                                                {
                                                                                                Spiral::US1::US1_0(x)
                                                                                                =>
                                                                                                x.clone(),
                                                                                                _
                                                                                                =>
                                                                                                unreachable!(),
                                                                                            }.clone()),
                                                                         _ =>
                                                                         {
                                                                             let v97:
                                                                                     Spiral::US1 =
                                                                                 if (v13.clone())
                                                                                        ==
                                                                                        (v1_1.clone())
                                                                                    {
                                                                                     Spiral::US1::US1_0(Spiral::US0::US0_3)
                                                                                 } else {
                                                                                     Spiral::US1::US1_1
                                                                                 };
                                                                             match &v97
                                                                                 {
                                                                                 Spiral::US1::US1_0(v97_0_0)
                                                                                 =>
                                                                                 Spiral::US1::US1_0(match &v97
                                                                                                        {
                                                                                                        Spiral::US1::US1_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    }.clone()),
                                                                                 _
                                                                                 =>
                                                                                 {
                                                                                     let v104:
                                                                                             Spiral::US1 =
                                                                                         if (v6.clone())
                                                                                                ==
                                                                                                (v1_1.clone())
                                                                                            {
                                                                                             Spiral::US1::US1_0(Spiral::US0::US0_4)
                                                                                         } else {
                                                                                             Spiral::US1::US1_1
                                                                                         };
                                                                                     match &v104
                                                                                         {
                                                                                         Spiral::US1::US1_0(v104_0_0)
                                                                                         =>
                                                                                         Spiral::US1::US1_0(match &v104
                                                                                                                {
                                                                                                                Spiral::US1::US1_0(x)
                                                                                                                =>
                                                                                                                x.clone(),
                                                                                                                _
                                                                                                                =>
                                                                                                                unreachable!(),
                                                                                                            }.clone()),
                                                                                         _
                                                                                         =>
                                                                                         Spiral::US1::US1_1,
                                                                                     }
                                                                                 }
                                                                             }
                                                                         }
                                                                     }
                                                                 }
                                                             }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if (Spiral::method3(string("AUTOMATION"))) != string("True") {
                    Spiral::US2::US2_1
                } else {
                    Spiral::US2::US2_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                },
            )
        }
        pub fn closure4(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral::US0,
        ) -> (
            LrcPtr<Spiral::Mut0>,
            LrcPtr<Spiral::Mut1>,
            LrcPtr<Spiral::Mut2>,
            LrcPtr<Spiral::Mut3>,
            LrcPtr<Spiral::Mut4>,
            Option<i64>,
        ) {
            let patternInput: (Spiral::US1, Spiral::US2) = Spiral::method2();
            let _run_target_args__v3: (Spiral::US1, Spiral::US2) =
                (patternInput.0.clone(), patternInput.1.clone());
            let v173: Spiral::US2 = _run_target_args__v3.1.clone();
            let v172: Spiral::US1 = _run_target_args__v3.0.clone();
            (
                LrcPtr::new(Spiral::Mut0 {
                    l0: MutCell::new(1_i64),
                }),
                LrcPtr::new(Spiral::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral::closure4((), v))),
                }),
                LrcPtr::new(Spiral::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral::Mut4 {
                    l0: MutCell::new(match &v172 {
                        Spiral::US1::US1_0(v172_0_0) => match &v172 {
                            Spiral::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        _ => v0_1.clone(),
                    }),
                }),
                match &v173 {
                    Spiral::US2::US2_0(v173_0_0) => Some(match &v173 {
                        Spiral::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral::TraceState::trace_state().get().clone().is_none() {
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::method1(Spiral::US0::US0_0);
                Spiral::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn method7(v0_1: Spiral::US0) -> bool {
            let v17: () = {
                Spiral::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v56: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                (find(
                    v0_1,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                    ])))),
                )) >= (find(
                    v56,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                    ])))),
                ))
            }
        }
        pub fn closure6(unitVar: (), v0_1: i64) -> Spiral::US2 {
            Spiral::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<i64, Spiral::US2> {
            Func1::new(move |v: i64| Spiral::closure6((), v))
        }
        pub fn method10() -> string {
            string("hh:mm:ss")
        }
        pub fn method11() -> string {
            string("HH:mm:ss")
        }
        pub fn method8(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
        ) -> string {
            let v212: Spiral::US2 = defaultValue(Spiral::US2::US2_1, map(Spiral::method9(), v5));
            let v344: DateTime = match &v212 {
                Spiral::US2::US2_0(v212_0_0) => {
                    let v292: TimeSpan = TimeSpan::new_ticks(
                        ({
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        }) - (match &v212 {
                            Spiral::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                    );
                    DateTime::new_ymdhms_milli(
                        1_i32,
                        1_i32,
                        1_i32,
                        v292.hours(),
                        v292.minutes(),
                        v292.seconds(),
                        v292.milliseconds(),
                    )
                }
                _ => DateTime::now(),
            };
            let v346: string = Spiral::method10();
            let provider: string = if (v346.clone()) == string("") {
                string("M-d-y hh:mm:ss tt")
            } else {
                v346
            };
            v344.toString(provider)
        }
        pub fn method13() -> string {
            string("")
        }
        pub fn closure7(v0_1: LrcPtr<Spiral::Mut3>, v1_1: string, unitVar: ()) {
            let v4: string = append((v0_1.l0.get().clone()), (v1_1));
            v0_1.l0.set(v4);
            ()
        }
        pub fn method14() -> string {
            string("\u{001b}[0m")
        }
        pub fn method12() -> string {
            let v7: char = getCharAt(toLower(string("Debug")), 0_i32);
            let v9: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v9.clone(), sprintf!("{}", v7), ());
                ()
            };
            let v30: string = v9.l0.get().clone();
            let v49: &str = inline_colorization::color_bright_blue;
            let v56: &str = &*v30;
            let v84: &str = inline_colorization::color_reset;
            let v86: std::string::String = format!("{}{}{}", v49, v56, v84);
            fable_library_rust::String_::fromString(v86)
        }
        pub fn method16(v0_1: string) -> string {
            trimEndChars(
                trimStartChars(v0_1, toArray(empty::<char>())),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn method15(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Array<string>,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("args"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v10.clone(), sprintf!("{:?}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v108: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.main"),
                    )),
                    string(" / "),
                )),
                (v108),
            ))
        }
        pub fn closure8(v0_1: LrcPtr<Spiral::Mut0>, unitVar: ()) {
            let v2: i64 = (v0_1.l0.get().clone()) + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure9(unitVar: (), v0_1: string) {
            let v4: () = {
                Spiral::closure10(v0_1, ());
                ()
            };
            ()
        }
        pub fn method17(v0_1: string) {
            let v17: () = {
                Spiral::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v60: () = {
                Spiral::closure8(patternInput.0.clone(), ());
                ()
            };
            println!("{}", v0_1.clone());
            ((patternInput.1.clone()).l0.get().clone())(v0_1)
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method15(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure11(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure12(
            unitVar: (),
            _arg: (std::string::String, clap::ArgMatches),
        ) -> Spiral::US6 {
            Spiral::US6::US6_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method19() -> Func1<(std::string::String, clap::ArgMatches), Spiral::US6> {
            Func1::new(move |arg10_0040: (std::string::String, clap::ArgMatches)| {
                Spiral::closure12((), arg10_0040)
            })
        }
        pub fn method20() -> string {
            string("gleam-path")
        }
        pub fn closure13(unitVar: (), v0_1: std::string::String) -> Spiral::US7 {
            Spiral::US7::US7_0(v0_1)
        }
        pub fn method21() -> Func1<std::string::String, Spiral::US7> {
            Func1::new(move |v: std::string::String| Spiral::closure13((), v))
        }
        pub fn method22() -> string {
            string("target")
        }
        pub fn method23() -> string {
            string("deps")
        }
        pub fn closure14(unitVar: (), v0_1: Vec<std::string::String>) -> Spiral::US11 {
            Spiral::US11::US11_0(v0_1)
        }
        pub fn method24() -> Func1<Vec<std::string::String>, Spiral::US11> {
            Func1::new(move |v: Vec<std::string::String>| Spiral::closure14((), v))
        }
        pub fn method25(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method27() -> string {
            string("")
        }
        pub fn method28(v0_1: string) -> string {
            v0_1
        }
        pub fn method29(v0_1: i32, v1_1: LrcPtr<Spiral::Mut5>) -> bool {
            (v1_1.l0.get().clone()) < (v0_1)
        }
        pub fn method30() -> string {
            string("")
        }
        pub fn method26(v0_1: string) -> string {
            let v9: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v11: Vec<u8> = v9.to_vec();
            let v13: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v11);
            let v15: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v13);
            let v17: bool = true;
            let mut v15 = v15;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v20: sha2::Sha256 = result;
                let v22: bool = true;
                let mut v20 = v20;
                let v24: usize = 0_i32 as usize;
                let v28: _ = [0_u8; 1024];
                let v30: bool = true;
                loop {
                    // rust.loop;
                    let v32: bool = true;
                    let mut v28 = v28;
                    let v34: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v15, &mut v28);
                    let v47: usize = v34.unwrap();
                    if (v47) == (v24) {
                        let v55: bool = true;
                        break;
                        ()
                    }
                    {
                        let v57: usize = v47;
                        let v74: &_ = if (v57) == (v28.len()) {
                            &v28[v24..]
                        } else {
                            &v28[v24..v57]
                        };
                        sha2::Digest::update(&mut v20, v74);
                        {
                            let v77: bool = true;
                        } // rust.loop;
                        let v79: bool = true;
                    } // rust.loop;
                    let v81: bool = true;
                } // rust.loop;
                let v83: bool = true;
                {
                    // rust.loop;
                    let v85: bool = true;
                    {
                        // rust.loop;
                        let v87: &[u8] = &sha2::Digest::finalize(v20);
                        let v89: Vec<u8> = v87.iter().map(|x| *x).collect::<Vec<_>>();
                        let v91: bool = true;
                        let _vec_map: Vec<_> = v89
                            .into_iter()
                            .map(|x| {
                                //;
                                let v93: u8 = x;
                                let v95: std::string::String = format!("{:02x}", v93);
                                let v97: string = fable_library_rust::String_::fromString(v95);
                                let v99: bool = true;
                                v97
                            })
                            .collect::<Vec<_>>();
                        let v101: Vec<string> = _vec_map;
                        let v103: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v101.clone());
                        let _let__v108: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v103 = v103.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v103 = v103.clone();
                                        move |i: i32| v103[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, (get_Count(v103.clone())) - 1_i32),
                                )
                            }
                        }));
                        let v117: string = Spiral::method27();
                        let v124: string = join(
                            if (v117.clone()) == string("\n") {
                                Spiral::method28(v117.clone())
                            } else {
                                v117
                            },
                            toArray_1(_let__v108),
                        );
                        Ok::<string, std::io::Error>(v124).unwrap()
                    }
                }
            }
        }
        pub fn method31() -> string {
            let v6: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v10: std::path::PathBuf = v6.unwrap();
            let v28: std::path::Display = v10.display();
            let v61: std::string::String = format!("{}", v28);
            fable_library_rust::String_::fromString(v61)
        }
        pub fn method33(v0_1: string, v1_1: string) -> string {
            let v13: &str = &*v0_1;
            let v46: std::string::String = String::from(v13);
            let v79: std::path::PathBuf = std::path::PathBuf::from(v46);
            let v112: &str = &*v1_1;
            let v145: std::string::String = String::from(v112);
            let v173: std::path::PathBuf = v79.join(v145);
            let v180: std::path::Display = v173.display();
            let v213: std::string::String = format!("{}", v180);
            fable_library_rust::String_::fromString(v213)
        }
        pub fn method35(v0_1: string) -> bool {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v99: std::path::PathBuf = std::path::PathBuf::from(v45);
            if v99.clone().exists() {
                v99.is_file()
            } else {
                false
            }
        }
        pub fn closure15(unitVar: (), v0_1: string) -> bool {
            Spiral::method35(v0_1)
        }
        pub fn method36(v0_1: string) -> bool {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v99: std::path::PathBuf = std::path::PathBuf::from(v45);
            if v99.clone().exists() {
                v99.is_dir()
            } else {
                false
            }
        }
        pub fn closure16(unitVar: (), v0_1: string) -> bool {
            Spiral::method36(v0_1)
        }
        pub fn method38(v0_1: string) -> Option<string> {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            let v106: Option<std::path::PathBuf> = v78.parent().map(std::path::PathBuf::from);
            let v108: bool = true;
            let _optionm_map_ = v106.map(|x| {
                //;
                let v110: std::path::PathBuf = x;
                let v117: std::path::Display = v110.display();
                let v150: std::string::String = format!("{}", v117);
                let v178: string = fable_library_rust::String_::fromString(v150);
                let v180: bool = true;
                v178
            });
            _optionm_map_
        }
        pub fn method39(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: Func1<string, bool>,
            v4: string,
        ) -> Spiral::US13 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<bool> = MutCell::new(v2);
            let v3 = MutCell::new(v3.clone());
            let v4: MutCell<string> = MutCell::new(v4.clone());
            '_method39: loop {
                break '_method39 (if v3(Spiral::method33(v4.get().clone(), v0_1.get().clone())) {
                    Spiral::US13::US13_0(v4.get().clone())
                } else {
                    let v8: Option<string> = Spiral::method38(v4.get().clone());
                    let v33: Spiral::US5 =
                        defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v8));
                    match &v33 {
                        Spiral::US5::US5_0(v33_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: bool = v2.get().clone();
                            let v3_temp = v3.get().clone();
                            let v4_temp: string = match &v33 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method39;
                        }
                        _ => Spiral::US13::US13_1(append(
                            (concat(new_array(&[
                                string("file_system.find_parent / No parent for "),
                                if v2.get().clone() {
                                    string("file")
                                } else {
                                    string("dir")
                                },
                            ]))),
                            sprintf!(
                                " \'{}\' at \'{}\' (until \'{}\')",
                                v0_1.get().clone(),
                                v1_1.get().clone(),
                                v4.get().clone()
                            ),
                        )),
                    }
                });
            }
        }
        pub fn method37(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: Func1<string, bool>,
        ) -> Spiral::US13 {
            if v3(Spiral::method33(v1_1.clone(), v0_1.clone())) {
                Spiral::US13::US13_0(v1_1.clone())
            } else {
                let v7: Option<string> = Spiral::method38(v1_1.clone());
                let v32: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v7));
                match &v32 {
                    Spiral::US5::US5_0(v32_0_0) => Spiral::method39(
                        v0_1.clone(),
                        v1_1.clone(),
                        v2,
                        v3.clone(),
                        match &v32 {
                            Spiral::US5::US5_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    _ => Spiral::US13::US13_1(append(
                        (concat(new_array(&[
                            string("file_system.find_parent / No parent for "),
                            if v2 { string("file") } else { string("dir") },
                        ]))),
                        sprintf!(
                            " \'{}\' at \'{}\' (until \'{}\')",
                            v0_1.clone(),
                            v1_1.clone(),
                            v1_1.clone()
                        ),
                    )),
                }
            }
        }
        pub fn method34(v0_1: Spiral::US12, v1_1: string, v2: string) -> Spiral::US13 {
            let v3: bool = if let Spiral::US12::US12_0 = &v0_1 {
                true
            } else {
                false
            };
            Spiral::method37(
                v1_1,
                v2,
                v3,
                if v3 {
                    Func1::new(move |v: string| Spiral::closure15((), v))
                } else {
                    Func1::new(move |v_1: string| Spiral::closure16((), v_1))
                },
            )
        }
        pub fn method40() -> string {
            let v7: char = getCharAt(toLower(string("Warning")), 0_i32);
            let v9: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v9.clone(), sprintf!("{}", v7), ());
                ()
            };
            let v30: string = v9.l0.get().clone();
            let v49: &str = inline_colorization::color_yellow;
            let v56: &str = &*v30;
            let v84: &str = inline_colorization::color_reset;
            let v86: std::string::String = format!("{}{}{}", v49, v56, v84);
            fable_library_rust::String_::fromString(v86)
        }
        pub fn method41(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("dir"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v80: () = {
                Spiral::closure7(v11.clone(), v8, ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v118: () = {
                Spiral::closure7(v11.clone(), string("error"), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v177: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.get_workspace_root"),
                    )),
                    string(" / "),
                )),
                (v177),
            ))
        }
        pub fn closure17(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_3) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method41(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method40(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn closure18(unitVar: (), v0_1: std::io::Error) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v9: std::string::String = format!("{:#?}", v0_1);
            let v53: () = {
                Spiral::closure7(v2.clone(), fable_library_rust::String_::fromString(v9), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method45() -> Func1<std::io::Error, string> {
            Func1::new(move |v: std::io::Error| Spiral::closure18((), v))
        }
        pub fn closure19(unitVar: (), v0_1: std::path::PathBuf) -> Spiral::US14 {
            Spiral::US14::US14_0(v0_1)
        }
        pub fn method46() -> Func1<std::path::PathBuf, Spiral::US14> {
            Func1::new(move |v: std::path::PathBuf| Spiral::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: string) -> Spiral::US14 {
            Spiral::US14::US14_1(v0_1)
        }
        pub fn method47() -> Func1<string, Spiral::US14> {
            Func1::new(move |v: string| Spiral::closure20((), v))
        }
        pub fn method50(v0_1: string) -> string {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            let v106: Option<&std::ffi::OsStr> = v78.file_name();
            let v108: bool = true;
            let _optionm_map_ = v106.map(|x| {
                //;
                let v110: &std::ffi::OsStr = x;
                let v112: std::ffi::OsString = v110.to_os_string();
                let v114: Option<&str> = v112.to_str();
                let v116: &str = v114.unwrap();
                let v123: std::string::String = String::from(v116);
                let v151: string = fable_library_rust::String_::fromString(v123);
                let v153: bool = true;
                v151
            });
            let v155: Option<string> = _optionm_map_;
            let v180: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v155));
            match &v180 {
                Spiral::US5::US5_0(v180_0_0) => match &v180 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            }
        }
        pub fn method49(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: string,
            v4: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v5: string = Spiral::method50(v4.clone());
            let v6: Option<string> = Spiral::method38(v4.clone());
            let v31: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6));
            let v36: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v48: () = {
                Spiral::closure7(v36.clone(), v3, ());
                ()
            };
            let v54: string = v36.l0.get().clone();
            if (v2) >= 11_u8 {
                let v58: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v4.clone(),
                        v5.clone()
                    ),
                );
                let v65: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v58);
                Err(v65)
            } else {
                if let Spiral::US5::US5_0(v31_0_0) = &v31 {
                    if (v4.clone()) != string("") {
                        let v116: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v31_0_0.clone());
                        let v117 = Spiral::method45();
                        let v130: Result<std::path::PathBuf, string> = v116.map_err(|x| v117(x));
                        let v133 = Spiral::method46();
                        let v134 = Spiral::method47();
                        let v136: Spiral::US14 = match &v130 {
                            Err(v130_1_0) => v134(v130_1_0.clone()),
                            Ok(v130_0_0) => v133(v130_0_0.clone()),
                        };
                        match &v136 {
                            Spiral::US14::US14_0(v136_0_0) => {
                                let v177: string = Spiral::method33(
                                    toString(v136_0_0.clone().display()),
                                    v5.clone(),
                                );
                                let v184: &str = &*v177;
                                let v217: std::string::String = String::from(v184);
                                let v250: std::path::PathBuf = std::path::PathBuf::from(v217);
                                Ok(v250)
                            }
                            Spiral::US14::US14_1(v136_1_0) => {
                                let v295: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v136_1_0.clone(),
                                        v54.clone(),
                                        v5.clone()
                                    ),
                                );
                                let v302: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v295);
                                Err(v302)
                            }
                        }
                    } else {
                        let v348: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v54.clone(),
                                v4.clone(),
                                v5.clone()
                            ),
                        );
                        let v355: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v348);
                        Err(v355)
                    }
                } else {
                    let v400: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1,
                            v54.clone(),
                            v4,
                            v5.clone()
                        ),
                    );
                    let v407: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v400);
                    Err(v407)
                }
            }
        }
        pub fn method48(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v9: Result<std::path::PathBuf, std::io::Error> = std::fs::read_link(&*v2.clone());
            let v10 = Spiral::method45();
            let v23: Result<std::path::PathBuf, string> = v9.map_err(|x| v10(x));
            let v26 = Spiral::method46();
            let v27 = Spiral::method47();
            let v29: Spiral::US14 = match &v23 {
                Err(v23_1_0) => v27(v23_1_0.clone()),
                Ok(v23_0_0) => v26(v23_0_0.clone()),
            };
            match &v29 {
                Spiral::US14::US14_0(v29_0_0) => Ok(v29_0_0.clone()),
                Spiral::US14::US14_1(v29_1_0) => Spiral::method49(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure21(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    v29_1_0.clone(),
                    v2.clone(),
                ),
            }
        }
        pub fn closure22(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            Spiral::method48(v0_1, v1_1, v2)
        }
        pub fn closure21(
            v0_1: string,
            v1_1: u8,
        ) -> Func1<string, Result<std::path::PathBuf, std::io::Error>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure22(v0_1.clone(), v1_1, v)
            })
        }
        pub fn method51(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v4: string = Spiral::method50(v0_1.clone());
            let v5: Option<string> = Spiral::method38(v0_1.clone());
            let v30: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5));
            let v35: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v47: () = {
                Spiral::closure7(v35.clone(), v3, ());
                ()
            };
            let v53: string = v35.l0.get().clone();
            if (v2) >= 11_u8 {
                let v57: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v0_1.clone(),
                        v4.clone()
                    ),
                );
                let v64: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v57);
                Err(v64)
            } else {
                if let Spiral::US5::US5_0(v30_0_0) = &v30 {
                    if (v0_1.clone()) != string("") {
                        let v115: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v30_0_0.clone());
                        let v116 = Spiral::method45();
                        let v129: Result<std::path::PathBuf, string> = v115.map_err(|x| v116(x));
                        let v132 = Spiral::method46();
                        let v133 = Spiral::method47();
                        let v135: Spiral::US14 = match &v129 {
                            Err(v129_1_0) => v133(v129_1_0.clone()),
                            Ok(v129_0_0) => v132(v129_0_0.clone()),
                        };
                        match &v135 {
                            Spiral::US14::US14_0(v135_0_0) => {
                                let v176: string = Spiral::method33(
                                    toString(v135_0_0.clone().display()),
                                    v4.clone(),
                                );
                                let v183: &str = &*v176;
                                let v216: std::string::String = String::from(v183);
                                let v249: std::path::PathBuf = std::path::PathBuf::from(v216);
                                Ok(v249)
                            }
                            Spiral::US14::US14_1(v135_1_0) => {
                                let v294: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v135_1_0.clone(),
                                        v53.clone(),
                                        v4.clone()
                                    ),
                                );
                                let v301: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v294);
                                Err(v301)
                            }
                        }
                    } else {
                        let v347: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v53.clone(),
                                v0_1.clone(),
                                v4.clone()
                            ),
                        );
                        let v354: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v347);
                        Err(v354)
                    }
                } else {
                    let v399: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1.clone(),
                            v53.clone(),
                            v0_1,
                            v4.clone()
                        ),
                    );
                    let v406: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v399);
                    Err(v406)
                }
            }
        }
        pub fn method44(v0_1: string, v1_1: u8) -> Result<std::path::PathBuf, std::io::Error> {
            let v8: Result<std::path::PathBuf, std::io::Error> = std::fs::read_link(&*v0_1.clone());
            let v9 = Spiral::method45();
            let v22: Result<std::path::PathBuf, string> = v8.map_err(|x| v9(x));
            let v25 = Spiral::method46();
            let v26 = Spiral::method47();
            let v28: Spiral::US14 = match &v22 {
                Err(v22_1_0) => v26(v22_1_0.clone()),
                Ok(v22_0_0) => v25(v22_0_0.clone()),
            };
            match &v28 {
                Spiral::US14::US14_0(v28_0_0) => Ok(v28_0_0.clone()),
                Spiral::US14::US14_1(v28_1_0) => Spiral::method51(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure21(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    v28_1_0.clone(),
                ),
            }
        }
        pub fn method53(v0_1: bool) -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn method54() -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn method55(v0_1: i32, v1_1: i32) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method57(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: std::io::Error,
            v4: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v5: string = Spiral::method50(v4.clone());
            let v6: Option<string> = Spiral::method38(v4.clone());
            let v31: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6));
            let v36: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v43: std::string::String = format!("{:#?}", v3);
            let v87: () = {
                Spiral::closure7(
                    v36.clone(),
                    fable_library_rust::String_::fromString(v43),
                    (),
                );
                ()
            };
            let v93: string = v36.l0.get().clone();
            if (v2) >= 11_u8 {
                let v97: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v4.clone(),
                        v5.clone()
                    ),
                );
                let v104: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v97);
                Err(v104)
            } else {
                if let Spiral::US5::US5_0(v31_0_0) = &v31 {
                    if (v4.clone()) != string("") {
                        let v155: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v31_0_0.clone());
                        let v156 = Spiral::method45();
                        let v169: Result<std::path::PathBuf, string> = v155.map_err(|x| v156(x));
                        let v172 = Spiral::method46();
                        let v173 = Spiral::method47();
                        let v175: Spiral::US14 = match &v169 {
                            Err(v169_1_0) => v173(v169_1_0.clone()),
                            Ok(v169_0_0) => v172(v169_0_0.clone()),
                        };
                        match &v175 {
                            Spiral::US14::US14_0(v175_0_0) => {
                                let v216: string = Spiral::method33(
                                    toString(v175_0_0.clone().display()),
                                    v5.clone(),
                                );
                                let v223: &str = &*v216;
                                let v256: std::string::String = String::from(v223);
                                let v289: std::path::PathBuf = std::path::PathBuf::from(v256);
                                Ok(v289)
                            }
                            Spiral::US14::US14_1(v175_1_0) => {
                                let v334: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v175_1_0.clone(),
                                        v93.clone(),
                                        v5.clone()
                                    ),
                                );
                                let v341: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v334);
                                Err(v341)
                            }
                        }
                    } else {
                        let v387: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v93.clone(),
                                v4.clone(),
                                v5.clone()
                            ),
                        );
                        let v394: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v387);
                        Err(v394)
                    }
                } else {
                    let v439: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1,
                            v93.clone(),
                            v4,
                            v5.clone()
                        ),
                    );
                    let v446: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v439);
                    Err(v446)
                }
            }
        }
        pub fn method56(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v42: i32 = Spiral::method53(unbox::<bool>(fable_library_rust::Native_::getZero()));
            let v44: bool = Spiral::method55(Spiral::method54(), v42);
            if v44 {
                let v51: bool = unbox::<bool>(fable_library_rust::Native_::getZero());
                let v122: std::path::PathBuf = fable_library_rust::Native_::getZero();
                Ok(v122)
            } else {
                let v144: string = append(
                    string(
                        "file_system.read_link / Fsharp / The file or directory is not a reparse point. / ",
                    ),
                    sprintf!(
                        "path: {} / result: {} / path\': {} / n: {}",
                        v0_1.clone(),
                        v44,
                        v2.clone(),
                        v1_1
                    ),
                );
                Spiral::method57(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure23(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    std::io::Error::new(std::io::ErrorKind::Other, &*v144),
                    v2,
                )
            }
        }
        pub fn closure24(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            Spiral::method56(v0_1, v1_1, v2)
        }
        pub fn closure23(
            v0_1: string,
            v1_1: u8,
        ) -> Func1<string, Result<std::path::PathBuf, std::io::Error>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure24(v0_1.clone(), v1_1, v)
            })
        }
        pub fn method58(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: std::io::Error,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v4: string = Spiral::method50(v0_1.clone());
            let v5: Option<string> = Spiral::method38(v0_1.clone());
            let v30: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5));
            let v35: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v42: std::string::String = format!("{:#?}", v3);
            let v86: () = {
                Spiral::closure7(
                    v35.clone(),
                    fable_library_rust::String_::fromString(v42),
                    (),
                );
                ()
            };
            let v92: string = v35.l0.get().clone();
            if (v2) >= 11_u8 {
                let v96: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v0_1.clone(),
                        v4.clone()
                    ),
                );
                let v103: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v96);
                Err(v103)
            } else {
                if let Spiral::US5::US5_0(v30_0_0) = &v30 {
                    if (v0_1.clone()) != string("") {
                        let v154: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v30_0_0.clone());
                        let v155 = Spiral::method45();
                        let v168: Result<std::path::PathBuf, string> = v154.map_err(|x| v155(x));
                        let v171 = Spiral::method46();
                        let v172 = Spiral::method47();
                        let v174: Spiral::US14 = match &v168 {
                            Err(v168_1_0) => v172(v168_1_0.clone()),
                            Ok(v168_0_0) => v171(v168_0_0.clone()),
                        };
                        match &v174 {
                            Spiral::US14::US14_0(v174_0_0) => {
                                let v215: string = Spiral::method33(
                                    toString(v174_0_0.clone().display()),
                                    v4.clone(),
                                );
                                let v222: &str = &*v215;
                                let v255: std::string::String = String::from(v222);
                                let v288: std::path::PathBuf = std::path::PathBuf::from(v255);
                                Ok(v288)
                            }
                            Spiral::US14::US14_1(v174_1_0) => {
                                let v333: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v174_1_0.clone(),
                                        v92.clone(),
                                        v4.clone()
                                    ),
                                );
                                let v340: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v333);
                                Err(v340)
                            }
                        }
                    } else {
                        let v386: string = append(
                            string(
                                "file_system.read_link / run / The file or directory is not a reparse point. / ",
                            ),
                            sprintf!(
                                "path: {} / error: {} / path\': {} / name: {}",
                                v0_1.clone(),
                                v92.clone(),
                                v0_1.clone(),
                                v4.clone()
                            ),
                        );
                        let v393: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v386);
                        Err(v393)
                    }
                } else {
                    let v438: string = append(
                        string(
                            "file_system.read_link / run / The file or directory is not a reparse point. / ",
                        ),
                        sprintf!(
                            "path: {} / error: {} / path\': {} / name: {}",
                            v0_1.clone(),
                            v92.clone(),
                            v0_1,
                            v4.clone()
                        ),
                    );
                    let v445: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v438);
                    Err(v445)
                }
            }
        }
        pub fn method52(v0_1: string, v1_1: u8) -> Result<std::path::PathBuf, std::io::Error> {
            let v41: i32 = Spiral::method53(unbox::<bool>(fable_library_rust::Native_::getZero()));
            let v43: bool = Spiral::method55(Spiral::method54(), v41);
            if v43 {
                let v50: bool = unbox::<bool>(fable_library_rust::Native_::getZero());
                let v121: std::path::PathBuf = fable_library_rust::Native_::getZero();
                Ok(v121)
            } else {
                let v143: string = append(
                    string(
                        "file_system.read_link / Fsharp / The file or directory is not a reparse point. / ",
                    ),
                    sprintf!(
                        "path: {} / result: {} / path\': {} / n: {}",
                        v0_1.clone(),
                        v43,
                        v0_1.clone(),
                        v1_1
                    ),
                );
                Spiral::method58(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure23(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    std::io::Error::new(std::io::ErrorKind::Other, &*v143),
                )
            }
        }
        pub fn method43(v0_1: string) -> Result<std::path::PathBuf, std::io::Error> {
            if Spiral::method36(v0_1.clone()) {
                std::fs::read_link(&*v0_1.clone())
            } else {
                Spiral::method44(v0_1, 0_u8)
            }
        }
        pub fn closure25(unitVar: (), v0_1: std::path::PathBuf) -> Spiral::US15 {
            Spiral::US15::US15_0(v0_1)
        }
        pub fn method59() -> Func1<std::path::PathBuf, Spiral::US15> {
            Func1::new(move |v: std::path::PathBuf| Spiral::closure25((), v))
        }
        pub fn method61(v0_1: string) -> string {
            v0_1
        }
        pub fn method62() -> string {
            string("")
        }
        pub fn method60(v0_1: string, v1_1: string, v2: string) -> string {
            let v6: Result<regex::Regex, regex::Error> = regex::Regex::new(&v0_1);
            let v10: regex::Regex = v6.unwrap();
            let v22: string = Spiral::method61(v2);
            let v24: std::borrow::Cow<str> = v10.replace_all(&*v22, &*v1_1);
            let v26: std::string::String = String::from(v24);
            fable_library_rust::String_::fromString(v26)
        }
        pub fn method42(v0_1: string) -> string {
            if (v0_1.clone()) == string("") {
                string("")
            } else {
                let v3: Result<std::path::PathBuf, std::io::Error> = Spiral::method43(v0_1.clone());
                let v7: Option<std::path::PathBuf> = v3.ok();
                let v43: Spiral::US15 =
                    defaultValue(Spiral::US15::US15_1, map(Spiral::method59(), v7));
                let v86: string = match &v43 {
                    Spiral::US15::US15_0(v43_0_0) => toString(
                        match &v43 {
                            Spiral::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone()
                        .display(),
                    ),
                    _ => v0_1.clone(),
                };
                let v91: string = Spiral::method60(
                    string("^\\\\\\\\\\?\\\\"),
                    string(""),
                    if (v86.clone()) == string("") {
                        v0_1.clone()
                    } else {
                        v86
                    },
                );
                if (length(v91.clone())) < 2_i32 {
                    v0_1.clone()
                } else {
                    replace(
                        concat(new_array(&[
                            toLower(ofChar(getCharAt(v91.clone(), 0_i32))),
                            getSlice(v91, Some(1_i32), None::<i32>),
                        ])),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method32(v0_1: string) -> Spiral::US5 {
            let v5: Spiral::US13 = Spiral::method34(
                Spiral::US12::US12_1,
                Spiral::method33(string("spiral"), string("workspace")),
                v0_1.clone(),
            );
            match &v5 {
                Spiral::US13::US13_0(v5_0_0) => {
                    Spiral::US5::US5_0(Spiral::method42(v5_0_0.clone()))
                }
                Spiral::US13::US13_1(v5_1_0) => {
                    let v72: () = {
                        Spiral::closure17(v0_1.clone(), v5_1_0.clone(), ());
                        ()
                    };
                    Spiral::US5::US5_1
                }
            }
        }
        pub fn method65(v0_1: i32, v1_1: LrcPtr<Spiral::Mut6>) -> bool {
            (v1_1.l0.get().clone()) < (v0_1)
        }
        pub fn method66() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method64(v0_1: string) -> string {
            let v12: &str = &*v0_1.clone();
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            if (v78.exists()) == false {
                let v108: string = Spiral::method31();
                let v119: Array<string> = split(
                    Spiral::method42(Spiral::method33(v108.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v123: i32 = get_Count(v119.clone());
                let v124: LrcPtr<Spiral::Mut6> = LrcPtr::new(Spiral::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral::method65(v123, v124.clone()) {
                    let v126: i32 = v124.l0.get().clone();
                    let v129: i32 = ((v126.wrapping_neg()) + (v123)) - 1_i32;
                    let matchValue: i32 = v124.l1.get().clone();
                    let v131: Array<string> = v124.l2.get().clone();
                    let v130: i32 = matchValue;
                    let v132: string = v119[v129].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == (v132.clone()) {
                        ((v130) + 1_i32, v131.clone())
                    } else {
                        if string(".") == (v132.clone()) {
                            (v130, v131.clone())
                        } else {
                            if 0_i32 == (v130) {
                                if endsWith3(v132.clone(), string(":"), false) {
                                    let v144: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v108.clone(), 0_i32)
                                    )]);
                                    let v145: i32 = get_Count(v144.clone());
                                    let v147: i32 = (v145) + (get_Count(v131.clone()));
                                    let v148: Array<string> = new_init(&string(""), v147);
                                    let v149: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v147, v149.clone()) {
                                        let v151: i32 = v149.l0.get().clone();
                                        let v156: string = if (v151) < (v145) {
                                            v144[v151].clone()
                                        } else {
                                            let v154: i32 = (v151) - (v145);
                                            v131[v154].clone()
                                        };
                                        v148.get_mut()[v151 as usize] = v156;
                                        {
                                            let v157: i32 = (v151) + 1_i32;
                                            v149.l0.set(v157);
                                            ()
                                        }
                                    }
                                    (0_i32, v148.clone())
                                } else {
                                    let v158: Array<string> = new_array(&[v132]);
                                    let v159: i32 = get_Count(v158.clone());
                                    let v161: i32 = (v159) + (get_Count(v131.clone()));
                                    let v162: Array<string> = new_init(&string(""), v161);
                                    let v163: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v161, v163.clone()) {
                                        let v165: i32 = v163.l0.get().clone();
                                        let v170: string = if (v165) < (v159) {
                                            v158[v165].clone()
                                        } else {
                                            let v168: i32 = (v165) - (v159);
                                            v131[v168].clone()
                                        };
                                        v162.get_mut()[v165 as usize] = v170;
                                        {
                                            let v171: i32 = (v165) + 1_i32;
                                            v163.l0.set(v171);
                                            ()
                                        }
                                    }
                                    (0_i32, v162.clone())
                                }
                            } else {
                                ((v130) - 1_i32, v131.clone())
                            }
                        }
                    };
                    let v181: i32 = (v126) + 1_i32;
                    v124.l0.set(v181);
                    v124.l1.set(patternInput_1.0.clone());
                    v124.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v124.l1.get().clone();
                    let v183: Array<string> = v124.l2.get().clone();
                    let _let__v188: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v183 = v183.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v183 = v183.clone();
                                    move |i: i32| v183[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, (get_Count(v183.clone())) - 1_i32),
                            )
                        }
                    }));
                    let v200: string = ofChar(Spiral::method66());
                    join(
                        if (v200.clone()) == string("\n") {
                            Spiral::method28(v200.clone())
                        } else {
                            v200
                        },
                        toArray_1(_let__v188),
                    )
                }
            } else {
                let v213: Result<std::path::PathBuf, std::io::Error> =
                    std::fs::canonicalize(&*v0_1);
                let v217: std::path::PathBuf = v213.unwrap();
                let v235: std::path::Display = v217.display();
                let v268: std::string::String = format!("{}", v235);
                fable_library_rust::String_::fromString(v268)
            }
        }
        pub fn method63(v0_1: string) -> string {
            Spiral::method42(Spiral::method64(v0_1))
        }
        pub fn method67(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method68(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method69() -> string {
            string("\n")
        }
        pub fn method71(v0_1: string, v1_1: string) -> bool {
            if (Spiral::method35(v0_1.clone())) == false {
                false
            } else {
                let v20: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v65: Vec<u8> = Spiral::method25(v20.unwrap());
                let v67: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v65);
                let v71: std::string::String = v67.unwrap();
                (v1_1) == (fable_library_rust::String_::fromString(v71))
            }
        }
        pub fn closure26(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method73() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral::closure26((), v))
        }
        pub fn closure27(unitVar: (), unitVar_1: ()) -> Spiral::US16 {
            Spiral::US16::US16_0
        }
        pub fn method74() -> Func0<Spiral::US16> {
            Func0::new(move || Spiral::closure27((), ()))
        }
        pub fn closure28(unitVar: (), v0_1: std::string::String) -> Spiral::US16 {
            Spiral::US16::US16_1(v0_1)
        }
        pub fn method75() -> Func1<std::string::String, Spiral::US16> {
            Func1::new(move |v: std::string::String| Spiral::closure28((), v))
        }
        pub fn method76() -> string {
            let v7: char = getCharAt(toLower(string("Critical")), 0_i32);
            let v9: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v9.clone(), sprintf!("{}", v7), ());
                ()
            };
            let v30: string = v9.l0.get().clone();
            let v49: &str = inline_colorization::color_bright_red;
            let v56: &str = &*v30;
            let v84: &str = inline_colorization::color_reset;
            let v86: std::string::String = format!("{}{}{}", v49, v56, v84);
            fable_library_rust::String_::fromString(v86)
        }
        pub fn method77(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: std::string::String,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("dir"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v80: () = {
                Spiral::closure7(v11.clone(), v8, ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v118: () = {
                Spiral::closure7(v11.clone(), string("error"), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v147: std::string::String = format!("{:#?}", v9);
            let v191: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v147),
                    (),
                );
                ()
            };
            let v210: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v216: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.create_dir"),
                    )),
                    string(" / "),
                )),
                (v216),
            ))
        }
        pub fn closure29(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method77(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method76(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method78() -> string {
            let v7: char = getCharAt(toLower(string("Verbose")), 0_i32);
            let v9: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v9.clone(), sprintf!("{}", v7), ());
                ()
            };
            let v30: string = v9.l0.get().clone();
            let v49: &str = inline_colorization::color_bright_black;
            let v56: &str = &*v30;
            let v84: &str = inline_colorization::color_reset;
            let v86: std::string::String = format!("{}{}{}", v49, v56, v84);
            fable_library_rust::String_::fromString(v86)
        }
        pub fn method79(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("dir"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v79: () = {
                Spiral::closure7(v10.clone(), v8, ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v104: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.create_dir"),
                    )),
                    string(" / "),
                )),
                (v104),
            ))
        }
        pub fn closure30(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method79(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method78(),
                    v0_1,
                ))
            };
        }
        pub fn method81(v0_1: bool, v1_1: string) {
            if Spiral::method36(v1_1.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v1_1.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v1_1).unwrap();
                    ()
                };
            }
            ()
        }
        pub fn closure31(v0_1: string, unitVar: ()) {
            Spiral::method81(true, v0_1);
        }
        pub fn method80(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure31(v0_1.clone(), ())
            })
        }
        pub fn method82(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure31(v0_1.clone(), ())
            })
        }
        pub fn method83(v0_1: string) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method84(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("dir"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v80: () = {
                Spiral::closure7(v11.clone(), v8, ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v118: () = {
                Spiral::closure7(v11.clone(), string("result"), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v177: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.create_dir"),
                    )),
                    string(" / "),
                )),
                (v177),
            ))
        }
        pub fn closure32(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method84(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method12(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method89(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("ex"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v80: () = {
                Spiral::closure7(v11.clone(), v8, ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v118: () = {
                Spiral::closure7(v11.clone(), string("path"), ());
                ()
            };
            let v135: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v177: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.delete_directory_async"),
                    )),
                    string(" / "),
                )),
                (v177),
            ))
        }
        pub fn closure34(v0_1: string, v1_1: LrcPtr<Exception>, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method89(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method12(),
                    sprintf!("{:?}", v1_1),
                    Spiral::method50(v0_1),
                ))
            };
        }
        pub fn method88(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method87(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method86(v0_1: string) -> Arc<Async<i64>> {
            Spiral::method87(v0_1, 0_i64)
        }
        pub fn closure33(v0_1: string, unitVar: ()) {
            let v1_1: Arc<Async<i64>> = Spiral::method86(v0_1);
            let v8: Arc<Async<()>> = fable_library_rust::Native_::getZero();
            fable_library_rust::Native_::getZero::<()>();
            ()
        }
        pub fn method85(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure33(v0_1.clone(), ())
            })
        }
        pub fn method90(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure33(v0_1.clone(), ())
            })
        }
        pub fn method72(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v230: Result<(), std::io::Error> = std::fs::create_dir_all(&*v0_1.clone());
            let v231 = Spiral::method73();
            let v244: Result<(), std::string::String> = v230.map_err(|x| v231(x));
            let v247 = Spiral::method74();
            let v248 = Spiral::method75();
            let v250: Spiral::US16 = match &v244 {
                Err(v244_1_0) => v248(v244_1_0.clone()),
                _ => v247(),
            };
            match &v250 {
                Spiral::US16::US16_0 => {
                    let v315: () = {
                        Spiral::closure30(v0_1.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral::US16::US16_1(v250_1_0) => {
                    let v439: () = {
                        Spiral::closure29(
                            v0_1.clone(),
                            match &v250 {
                                Spiral::US16::US16_1(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v505 = Spiral::method80(v0_1.clone());
                interface_cast!(
                    Spiral::Disposable::_ctor__3A5B6456(Func0::new({
                        let v505 = v505.clone();
                        move || v505.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method70(v0_1: string, v1_1: string) {
            if (Spiral::method71(v0_1.clone(), v1_1.clone())) == false {
                let v8: string = defaultValue(string(""), Spiral::method38(v0_1.clone()));
                if (Spiral::method36(v8.clone())) == false {
                    let v13: LrcPtr<dyn IDisposable> = Spiral::method72(v8);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ()
            };
        }
        pub fn method92(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method94() -> string {
            string("")
        }
        pub fn method95(v0_1: i64, v1_1: string, v2: i64) -> LrcPtr<Spiral::UH0> {
            if (v2) < (v0_1) {
                LrcPtr::new(Spiral::UH0::UH0_1(
                    getCharAt(v1_1.clone(), v2 as i32),
                    Spiral::method95(v0_1, v1_1, (v2) + 1_i64),
                ))
            } else {
                LrcPtr::new(Spiral::UH0::UH0_0)
            }
        }
        pub fn method96(
            v0_1: LrcPtr<Spiral::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method96: loop {
                break '_method96 (match v0_1.get().clone().as_ref() {
                    Spiral::UH0::UH0_0 => (v1_1.get().clone(), v2.get().clone(), v3.get().clone()),
                    Spiral::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == (v4);
                        let patternInput: (i32, i32) = if v6 {
                            ((v2.get().clone()) + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), (v3.get().clone()) + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v13: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v24: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method96;
                        }
                    }
                });
            }
        }
        pub fn closure36(v0_1: i32, v1_1: i32, v2: string) -> string {
            if (v1_1) >= (v0_1) {
                v2.clone()
            } else {
                (Spiral::method97(v0_1, (v1_1) + 1_i32))(append((v2), string(" ")))
            }
        }
        pub fn method97(v0_1: i32, v1_1: i32) -> Func1<string, string> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure36(v0_1, v1_1, v)
            })
        }
        pub fn closure35(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US18 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '\"',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '\"' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method97((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            }
        }
        pub fn closure37(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US18 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '\'',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '\'' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method97((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            }
        }
        pub fn method98(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral::UH1>,
        ) -> Spiral::US18 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral::UH1>> = MutCell::new(v2.clone());
            '_method98: loop {
                break '_method98 (match v2.get().clone().as_ref() {
                    Spiral::UH1::UH1_0 => {
                        Spiral::US18::US18_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral::US18 = (match v2.get().clone().as_ref() {
                            Spiral::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral::US18::US18_0(v7_0_0, v7_0_1, v7_0_2, v7_0_3, v7_0_4) => {
                                v7.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method98;
                            }
                        }
                    }
                });
            }
        }
        pub fn method99(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method99: loop {
                break '_method99 (if (v1_1.get().clone()) >= 2_i64 {
                    false
                } else {
                    let v11: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\"')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('\'')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            Spiral::US20::US20_1
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v11 {
                            Spiral::US20::US20_0(v11_0_0) => match &v11 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method99;
                    }
                });
            }
        }
        pub fn method100(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method100: loop {
                break '_method100 ({
                    let v98: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method99(v25, 0_i64)) == false {
                            let v62: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v68: string = ofChar(v25);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v68.clone()) as i64, v68, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v25,
                                v62,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v110: Spiral::US18 = match &v98 {
                        Spiral::US18::US18_0(v98_0_0, v98_0_1, v98_0_2, v98_0_3, v98_0_4) => {
                            let v99: char = v98_0_0.clone();
                            Spiral::US18::US18_0(
                                if '\\' == (v99) { '/' } else { v99 },
                                v98_0_1.clone(),
                                v98_0_2.clone(),
                                v98_0_3.clone(),
                                v98_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v98_1_0) => Spiral::US18::US18_1(v98_1_0.clone()),
                    };
                    match &v110 {
                        Spiral::US18::US18_0(v110_0_0, v110_0_1, v110_0_2, v110_0_3, v110_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v110_0_0.clone())));
                            let v1_1_temp: string = v110_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v110_0_2.clone();
                            let v3_temp: i32 = v110_0_3.clone();
                            let v4_temp: i32 = v110_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method100;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method101(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral::UH1>,
        ) -> Spiral::US18 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral::UH1>> = MutCell::new(v4.clone());
            '_method101: loop {
                break '_method101 (match v4.get().clone().as_ref() {
                    Spiral::UH1::UH1_0 => {
                        Spiral::US18::US18_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral::US18 = (match v4.get().clone().as_ref() {
                            Spiral::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral::US18::US18_0(v9_0_0, v9_0_1, v9_0_2, v9_0_3, v9_0_4) => {
                                v9.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method101;
                            }
                        }
                    }
                });
            }
        }
        pub fn method102(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method102: loop {
                break '_method102 (if (v1_1.get().clone()) >= 3_i64 {
                    false
                } else {
                    let v15: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\"')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('\'')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US20::US20_0(' ')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                Spiral::US20::US20_1
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v15 {
                            Spiral::US20::US20_0(v15_0_0) => match &v15 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method102;
                    }
                });
            }
        }
        pub fn method103(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method103: loop {
                break '_method103 ({
                    let v106: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v29: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method102(v29, 0_i64)) == false {
                            let v66: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v72: string = ofChar(v29);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v72.clone()) as i64, v72, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v29,
                                v66,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v29,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v118: Spiral::US18 = match &v106 {
                        Spiral::US18::US18_0(v106_0_0, v106_0_1, v106_0_2, v106_0_3, v106_0_4) => {
                            let v107: char = v106_0_0.clone();
                            Spiral::US18::US18_0(
                                if '\\' == (v107) { '/' } else { v107 },
                                v106_0_1.clone(),
                                v106_0_2.clone(),
                                v106_0_3.clone(),
                                v106_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v106_1_0) => Spiral::US18::US18_1(v106_1_0.clone()),
                    };
                    match &v118 {
                        Spiral::US18::US18_0(v118_0_0, v118_0_1, v118_0_2, v118_0_3, v118_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v118_0_0.clone())));
                            let v1_1_temp: string = v118_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v118_0_2.clone();
                            let v3_temp: i32 = v118_0_3.clone();
                            let v4_temp: i32 = v118_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method103;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method104(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method104: loop {
                break '_method104 (if (v1_1.get().clone()) >= (length(v0_1.get().clone())) {
                    v1_1.get().clone()
                } else {
                    if ' ' == (getCharAt(v0_1.get().clone(), v1_1.get().clone())) {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = (v1_1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method104;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method105(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method105: loop {
                break '_method105 ({
                    let v66: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v16: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v50: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some((length(v1_1.get().clone())) - 1_i32),
                        );
                        let v56: string = ofChar(v16);
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                            Spiral::method95(length(v56.clone()) as i64, v56, 0_i64),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        );
                        Spiral::US18::US18_0(
                            v16,
                            v50,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    };
                    match &v66 {
                        Spiral::US18::US18_0(v66_0_0, v66_0_1, v66_0_2, v66_0_3, v66_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v66_0_0.clone())));
                            let v1_1_temp: string = v66_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v66_0_2.clone();
                            let v3_temp: i32 = v66_0_3.clone();
                            let v4_temp: i32 = v66_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method105;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method93(v0_1: string) -> Spiral::US17 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v10: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v16: LrcPtr<StringBuilder> =
                    StringBuilder::_ctor__Z721C83C5(Spiral::method94());
                fn v19(arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)) -> Spiral::US18 {
                    Spiral::closure35((), arg10_0040)
                }
                fn v20(arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32)) -> Spiral::US18 {
                    Spiral::closure37((), arg10_0040_1)
                }
                let v24: Spiral::US18 = Spiral::method98(
                    v10.clone(),
                    v16.clone(),
                    LrcPtr::new(Spiral::UH1::UH1_1(
                        Func1::from(v19),
                        LrcPtr::new(Spiral::UH1::UH1_1(
                            Func1::from(v20),
                            LrcPtr::new(Spiral::UH1::UH1_0),
                        )),
                    )),
                );
                let v197: Spiral::US19 = match &v24 {
                    Spiral::US18::US18_0(v24_0_0, v24_0_1, v24_0_2, v24_0_3, v24_0_4) => {
                        let v29: i32 = v24_0_4.clone();
                        let v28: i32 = v24_0_3.clone();
                        let v27: LrcPtr<StringBuilder> = v24_0_2.clone();
                        let v26: string = v24_0_1.clone();
                        let v123: Spiral::US18 = if string("") == (v26.clone()) {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v27.clone(), v28, v29)
                            ))
                        } else {
                            let v50: char = getCharAt(v26.clone(), 0_i32);
                            if (Spiral::method99(v50, 0_i64)) == false {
                                let v87: string = getSlice(
                                    v26.clone(),
                                    Some(1_i32),
                                    Some((length(v26.clone())) - 1_i32),
                                );
                                let v93: string = ofChar(v50);
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method96(
                                        Spiral::method95(length(v93.clone()) as i64, v93, 0_i64),
                                        v27.clone(),
                                        v28,
                                        v29,
                                    );
                                Spiral::US18::US18_0(
                                    v50,
                                    v87,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            } else {
                                Spiral::US18::US18_1(sprintf!(
                                    "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                    v50,
                                    toArray(ofArray(new_array(&['\"', '\'']))),
                                    (v27.clone(), v28, v29)
                                ))
                            }
                        };
                        let v135: Spiral::US18 = match &v123 {
                            Spiral::US18::US18_0(
                                v123_0_0,
                                v123_0_1,
                                v123_0_2,
                                v123_0_3,
                                v123_0_4,
                            ) => {
                                let v124: char = v123_0_0.clone();
                                Spiral::US18::US18_0(
                                    if '\\' == (v124) { '/' } else { v124 },
                                    v123_0_1.clone(),
                                    v123_0_2.clone(),
                                    v123_0_3.clone(),
                                    v123_0_4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v123_1_0) => {
                                Spiral::US18::US18_1(v123_1_0.clone())
                            }
                        };
                        let v155: Spiral::US19 = match &v135 {
                            Spiral::US18::US18_0(
                                v135_0_0,
                                v135_0_1,
                                v135_0_2,
                                v135_0_3,
                                v135_0_4,
                            ) => {
                                let patternInput_1: (
                                    string,
                                    string,
                                    LrcPtr<StringBuilder>,
                                    i32,
                                    i32,
                                ) = Spiral::method100(
                                    ofChar(v135_0_0.clone()),
                                    v135_0_1.clone(),
                                    v135_0_2.clone(),
                                    v135_0_3.clone(),
                                    v135_0_4.clone(),
                                );
                                Spiral::US19::US19_0(
                                    patternInput_1.0.clone(),
                                    patternInput_1.1.clone(),
                                    patternInput_1.2.clone(),
                                    patternInput_1.3.clone(),
                                    patternInput_1.4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v135_1_0) => {
                                Spiral::US19::US19_1(v135_1_0.clone())
                            }
                        };
                        let v165: Spiral::US19 = match &v155 {
                            Spiral::US19::US19_0(
                                v155_0_0,
                                v155_0_1,
                                v155_0_2,
                                v155_0_3,
                                v155_0_4,
                            ) => Spiral::US19::US19_0(
                                v155_0_0.clone(),
                                v155_0_1.clone(),
                                v155_0_2.clone(),
                                v155_0_3.clone(),
                                v155_0_4.clone(),
                            ),
                            _ => {
                                Spiral::US19::US19_0(string(""), v26.clone(), v27.clone(), v28, v29)
                            }
                        };
                        match &v165 {
                            Spiral::US19::US19_0(
                                v165_0_0,
                                v165_0_1,
                                v165_0_2,
                                v165_0_3,
                                v165_0_4,
                            ) => {
                                let v170: i32 = v165_0_4.clone();
                                let v169: i32 = v165_0_3.clone();
                                let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                let v167: string = v165_0_1.clone();
                                let v174: Spiral::US18 = Spiral::method101(
                                    v167.clone(),
                                    v168.clone(),
                                    v169,
                                    v170,
                                    LrcPtr::new(Spiral::UH1::UH1_1(
                                        Func1::from(v19),
                                        LrcPtr::new(Spiral::UH1::UH1_1(
                                            Func1::from(v20),
                                            LrcPtr::new(Spiral::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v174 {
                                    Spiral::US18::US18_0(
                                        v174_0_0,
                                        v174_0_1,
                                        v174_0_2,
                                        v174_0_3,
                                        v174_0_4,
                                    ) => Spiral::US19::US19_0(
                                        v165_0_0.clone(),
                                        v174_0_1.clone(),
                                        v174_0_2.clone(),
                                        v174_0_3.clone(),
                                        v174_0_4.clone(),
                                    ),
                                    Spiral::US18::US18_1(v174_1_0) => {
                                        Spiral::US19::US19_1(sprintf!(
                                            "parsing.between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                            v174_1_0.clone(),
                                            (v10.clone(), v16.clone(), 1_i32, 1_i32),
                                            (v26.clone(), v27.clone(), v28, v29),
                                            (v167.clone(), v168.clone(), v169, v170)
                                        ))
                                    }
                                }
                            }
                            _ => Spiral::US19::US19_1(string("parsing.between / expected content")),
                        }
                    }
                    Spiral::US18::US18_1(v24_1_0) => Spiral::US19::US19_1(v24_1_0.clone()),
                };
                let v416: Spiral::US19 = match &v197 {
                    Spiral::US19::US19_0(v197_0_0, v197_0_1, v197_0_2, v197_0_3, v197_0_4) => {
                        v197.clone()
                    }
                    _ => {
                        let v307: Spiral::US18 = if string("") == (v10.clone()) {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v16.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v228: char = getCharAt(v10.clone(), 0_i32);
                            if (Spiral::method102(v228, 0_i64)) == false {
                                let v265: string = getSlice(
                                    v10.clone(),
                                    Some(1_i32),
                                    Some((length(v10.clone())) - 1_i32),
                                );
                                let v271: string = ofChar(v228);
                                let patternInput_2: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method96(
                                        Spiral::method95(length(v271.clone()) as i64, v271, 0_i64),
                                        v16.clone(),
                                        1_i32,
                                        1_i32,
                                    );
                                Spiral::US18::US18_0(
                                    v228,
                                    v265,
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone(),
                                    patternInput_2.2.clone(),
                                )
                            } else {
                                Spiral::US18::US18_1(sprintf!(
                                    "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                    v228,
                                    toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                    (v16.clone(), 1_i32, 1_i32)
                                ))
                            }
                        };
                        let v319: Spiral::US18 = match &v307 {
                            Spiral::US18::US18_0(
                                v307_0_0,
                                v307_0_1,
                                v307_0_2,
                                v307_0_3,
                                v307_0_4,
                            ) => {
                                let v308: char = v307_0_0.clone();
                                Spiral::US18::US18_0(
                                    if '\\' == (v308) { '/' } else { v308 },
                                    v307_0_1.clone(),
                                    v307_0_2.clone(),
                                    v307_0_3.clone(),
                                    v307_0_4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v307_1_0) => {
                                Spiral::US18::US18_1(v307_1_0.clone())
                            }
                        };
                        let v339: Spiral::US19 = match &v319 {
                            Spiral::US18::US18_0(
                                v319_0_0,
                                v319_0_1,
                                v319_0_2,
                                v319_0_3,
                                v319_0_4,
                            ) => {
                                let patternInput_3: (
                                    string,
                                    string,
                                    LrcPtr<StringBuilder>,
                                    i32,
                                    i32,
                                ) = Spiral::method103(
                                    ofChar(v319_0_0.clone()),
                                    v319_0_1.clone(),
                                    v319_0_2.clone(),
                                    v319_0_3.clone(),
                                    v319_0_4.clone(),
                                );
                                Spiral::US19::US19_0(
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                    patternInput_3.3.clone(),
                                    patternInput_3.4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v319_1_0) => {
                                Spiral::US19::US19_1(v319_1_0.clone())
                            }
                        };
                        match &v339 {
                            Spiral::US19::US19_0(
                                v339_0_0,
                                v339_0_1,
                                v339_0_2,
                                v339_0_3,
                                v339_0_4,
                            ) => v339.clone(),
                            _ => {
                                let v354: Spiral::US21 = if (length(v10.clone())) == 0_i32 {
                                    Spiral::US21::US21_0(v10.clone(), v16.clone(), 1_i32, 1_i32)
                                } else {
                                    Spiral::US21::US21_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v10.clone()
                                    ))
                                };
                                let v363: Spiral::US19 = match &v354 {
                                    Spiral::US21::US21_0(
                                        v354_0_0,
                                        v354_0_1,
                                        v354_0_2,
                                        v354_0_3,
                                    ) => Spiral::US19::US19_0(
                                        string(""),
                                        v354_0_0.clone(),
                                        v354_0_1.clone(),
                                        v354_0_2.clone(),
                                        v354_0_3.clone(),
                                    ),
                                    Spiral::US21::US21_1(v354_1_0) => {
                                        Spiral::US19::US19_1(v354_1_0.clone())
                                    }
                                };
                                match &v363 {
                                    Spiral::US19::US19_0(
                                        v363_0_0,
                                        v363_0_1,
                                        v363_0_2,
                                        v363_0_3,
                                        v363_0_4,
                                    ) => {
                                        let v365: string = v363_0_1.clone();
                                        Spiral::US19::US19_0(
                                            v363_0_0.clone(),
                                            getSlice(
                                                v365.clone(),
                                                Some(Spiral::method104(v365.clone(), 0_i32)),
                                                Some((length(v365)) - 1_i32),
                                            ),
                                            v363_0_2.clone(),
                                            v363_0_3.clone(),
                                            v363_0_4.clone(),
                                        )
                                    }
                                    Spiral::US19::US19_1(v363_1_0) => {
                                        Spiral::US19::US19_1(v363_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v671: Spiral::US22 = match &v416 {
                    Spiral::US19::US19_0(v416_0_0, v416_0_1, v416_0_2, v416_0_3, v416_0_4) => {
                        let v421: i32 = v416_0_4.clone();
                        let v420: i32 = v416_0_3.clone();
                        let v419: LrcPtr<StringBuilder> = v416_0_2.clone();
                        let v418: string = v416_0_1.clone();
                        let v542: Spiral::US18 = if string("") == (v418.clone()) {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                                ' ',
                                (v419.clone(), v420, v421)
                            ))
                        } else {
                            let v428: char = getCharAt(v418.clone(), 0_i32);
                            if (v428) == ' ' {
                                let v463: string = getSlice(
                                    v418.clone(),
                                    Some(1_i32),
                                    Some((length(v418.clone())) - 1_i32),
                                );
                                let v469: string = ofChar(v428);
                                let patternInput_4: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method96(
                                        Spiral::method95(length(v469.clone()) as i64, v469, 0_i64),
                                        v419.clone(),
                                        v420,
                                        v421,
                                    );
                                Spiral::US18::US18_0(
                                    v428,
                                    v463,
                                    patternInput_4.0.clone(),
                                    patternInput_4.1.clone(),
                                    patternInput_4.2.clone(),
                                )
                            } else {
                                let v484: i32 = (indexOf(v418.clone(), string("\n"))) - 1_i32;
                                Spiral::US18::US18_1(concat(new_array(&[
                                    sprintf!(
                                        "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                        ' ',
                                        v420,
                                        v421,
                                        v419.clone(),
                                        getSlice(
                                            v418.clone(),
                                            Some(0_i32),
                                            Some(
                                                (if -2_i32 == (v484) {
                                                    (length(v418.clone())) + 1_i32
                                                } else {
                                                    (v484) + 1_i32
                                                }) - 1_i32
                                            )
                                        )
                                    ),
                                    string("\n"),
                                    append(
                                        ((Spiral::method97((v421) - 1_i32, 0_i32))(string(""))),
                                        string("^"),
                                    ),
                                    string("\n"),
                                ])))
                            }
                        };
                        let v554: Spiral::US23 = match &v542 {
                            Spiral::US18::US18_0(
                                v542_0_0,
                                v542_0_1,
                                v542_0_2,
                                v542_0_3,
                                v542_0_4,
                            ) => Spiral::US23::US23_0(
                                Spiral::US20::US20_0(v542_0_0.clone()),
                                v542_0_1.clone(),
                                v542_0_2.clone(),
                                v542_0_3.clone(),
                                v542_0_4.clone(),
                            ),
                            _ => Spiral::US23::US23_0(
                                Spiral::US20::US20_1,
                                v418.clone(),
                                v419.clone(),
                                v420,
                                v421,
                            ),
                        };
                        let v645: Spiral::US19 = match &v554 {
                            Spiral::US23::US23_0(
                                v554_0_0,
                                v554_0_1,
                                v554_0_2,
                                v554_0_3,
                                v554_0_4,
                            ) => {
                                let v559: i32 = v554_0_4.clone();
                                let v558: i32 = v554_0_3.clone();
                                let v557: LrcPtr<StringBuilder> = v554_0_2.clone();
                                let v556: string = v554_0_1.clone();
                                let v621: Spiral::US18 = if string("") == (v556.clone()) {
                                    Spiral::US18::US18_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v557.clone(), v558, v559)
                                    ))
                                } else {
                                    let v571: char = getCharAt(v556.clone(), 0_i32);
                                    let v605: string = getSlice(
                                        v556.clone(),
                                        Some(1_i32),
                                        Some((length(v556)) - 1_i32),
                                    );
                                    let v611: string = ofChar(v571);
                                    let patternInput_5: (LrcPtr<StringBuilder>, i32, i32) =
                                        Spiral::method96(
                                            Spiral::method95(
                                                length(v611.clone()) as i64,
                                                v611,
                                                0_i64,
                                            ),
                                            v557,
                                            v558,
                                            v559,
                                        );
                                    Spiral::US18::US18_0(
                                        v571,
                                        v605,
                                        patternInput_5.0.clone(),
                                        patternInput_5.1.clone(),
                                        patternInput_5.2.clone(),
                                    )
                                };
                                match &v621 {
                                    Spiral::US18::US18_0(
                                        v621_0_0,
                                        v621_0_1,
                                        v621_0_2,
                                        v621_0_3,
                                        v621_0_4,
                                    ) => {
                                        let patternInput_6: (
                                            string,
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        ) = Spiral::method105(
                                            ofChar(v621_0_0.clone()),
                                            v621_0_1.clone(),
                                            v621_0_2.clone(),
                                            v621_0_3.clone(),
                                            v621_0_4.clone(),
                                        );
                                        Spiral::US19::US19_0(
                                            patternInput_6.0.clone(),
                                            patternInput_6.1.clone(),
                                            patternInput_6.2.clone(),
                                            patternInput_6.3.clone(),
                                            patternInput_6.4.clone(),
                                        )
                                    }
                                    Spiral::US18::US18_1(v621_1_0) => {
                                        Spiral::US19::US19_1(v621_1_0.clone())
                                    }
                                }
                            }
                            Spiral::US23::US23_1(v554_1_0) => {
                                Spiral::US19::US19_1(v554_1_0.clone())
                            }
                        };
                        let v657: Spiral::US24 = match &v645 {
                            Spiral::US19::US19_0(
                                v645_0_0,
                                v645_0_1,
                                v645_0_2,
                                v645_0_3,
                                v645_0_4,
                            ) => Spiral::US24::US24_0(
                                Spiral::US5::US5_0(v645_0_0.clone()),
                                v645_0_1.clone(),
                                v645_0_2.clone(),
                                v645_0_3.clone(),
                                v645_0_4.clone(),
                            ),
                            _ => Spiral::US24::US24_0(
                                Spiral::US5::US5_1,
                                v418.clone(),
                                v419.clone(),
                                v420,
                                v421,
                            ),
                        };
                        match &v657 {
                            Spiral::US24::US24_0(
                                v657_0_0,
                                v657_0_1,
                                v657_0_2,
                                v657_0_3,
                                v657_0_4,
                            ) => Spiral::US22::US22_0(
                                v416_0_0.clone(),
                                v657_0_0.clone(),
                                v657_0_1.clone(),
                                v657_0_2.clone(),
                                v657_0_3.clone(),
                                v657_0_4.clone(),
                            ),
                            Spiral::US24::US24_1(v657_1_0) => {
                                Spiral::US22::US22_1(v657_1_0.clone())
                            }
                        }
                    }
                    Spiral::US19::US19_1(v416_1_0) => Spiral::US22::US22_1(v416_1_0.clone()),
                };
                match &v671 {
                    Spiral::US22::US22_0(
                        v671_0_0,
                        v671_0_1,
                        v671_0_2,
                        v671_0_3,
                        v671_0_4,
                        v671_0_5,
                    ) => Spiral::US17::US17_0(v671_0_0.clone(), v671_0_1.clone()),
                    Spiral::US22::US22_1(v671_1_0) => Spiral::US17::US17_1(v671_1_0.clone()),
                }
            }
        }
        pub fn method108(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method108: loop {
                break '_method108 (if (v1_1.get().clone()) >= 4_i64 {
                    false
                } else {
                    let v19: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\\')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('`')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US20::US20_0('\"')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                if (v11) == 0_i64 {
                                    Spiral::US20::US20_0(' ')
                                } else {
                                    let v14: i64 = (v11) - 1_i64;
                                    Spiral::US20::US20_1
                                }
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v19 {
                            Spiral::US20::US20_0(v19_0_0) => match &v19 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method108;
                    }
                });
            }
        }
        pub fn method109(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method109: loop {
                break '_method109 ({
                    let v114: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v33: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method108(v33, 0_i64)) == false {
                            let v70: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v76: string = ofChar(v33);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v76.clone()) as i64, v76, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v33,
                                v70,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v33,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v114 {
                        Spiral::US18::US18_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v114_0_0.clone())));
                            let v1_1_temp: string = v114_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v114_0_2.clone();
                            let v3_temp: i32 = v114_0_3.clone();
                            let v4_temp: i32 = v114_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method109;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method111(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method111: loop {
                break '_method111 (if (v1_1.get().clone()) >= 3_i64 {
                    false
                } else {
                    let v15: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\\')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('`')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US20::US20_0('\"')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                Spiral::US20::US20_1
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v15 {
                            Spiral::US20::US20_0(v15_0_0) => match &v15 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method111;
                    }
                });
            }
        }
        pub fn closure38(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US19 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v125: Spiral::US18 = if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '\\',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '\\' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method97((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            };
            let v196: Spiral::US18 = match &v125 {
                Spiral::US18::US18_0(v125_0_0, v125_0_1, v125_0_2, v125_0_3, v125_0_4) => {
                    let v130: i32 = v125_0_4.clone();
                    let v129: i32 = v125_0_3.clone();
                    let v128: LrcPtr<StringBuilder> = v125_0_2.clone();
                    let v127: string = v125_0_1.clone();
                    if string("") == (v127.clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v128.clone(), v129, v130)
                        ))
                    } else {
                        let v142: char = getCharAt(v127.clone(), 0_i32);
                        let v176: string =
                            getSlice(v127.clone(), Some(1_i32), Some((length(v127)) - 1_i32));
                        let v182: string = ofChar(v142);
                        let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                            Spiral::method95(length(v182.clone()) as i64, v182, 0_i64),
                            v128,
                            v129,
                            v130,
                        );
                        Spiral::US18::US18_0(
                            v142,
                            v176,
                            patternInput_1.0.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                        )
                    }
                }
                Spiral::US18::US18_1(v125_1_0) => Spiral::US18::US18_1(v125_1_0.clone()),
            };
            match &v196 {
                Spiral::US18::US18_0(v196_0_0, v196_0_1, v196_0_2, v196_0_3, v196_0_4) => {
                    Spiral::US19::US19_0(
                        append((ofChar('\\')), (ofChar(v196_0_0.clone()))),
                        v196_0_1.clone(),
                        v196_0_2.clone(),
                        v196_0_3.clone(),
                        v196_0_4.clone(),
                    )
                }
                Spiral::US18::US18_1(v196_1_0) => Spiral::US19::US19_1(v196_1_0.clone()),
            }
        }
        pub fn closure39(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US19 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v125: Spiral::US18 = if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '`',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '`' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                        Spiral::method95(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method97((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            };
            let v196: Spiral::US18 = match &v125 {
                Spiral::US18::US18_0(v125_0_0, v125_0_1, v125_0_2, v125_0_3, v125_0_4) => {
                    let v130: i32 = v125_0_4.clone();
                    let v129: i32 = v125_0_3.clone();
                    let v128: LrcPtr<StringBuilder> = v125_0_2.clone();
                    let v127: string = v125_0_1.clone();
                    if string("") == (v127.clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v128.clone(), v129, v130)
                        ))
                    } else {
                        let v142: char = getCharAt(v127.clone(), 0_i32);
                        let v176: string =
                            getSlice(v127.clone(), Some(1_i32), Some((length(v127)) - 1_i32));
                        let v182: string = ofChar(v142);
                        let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                            Spiral::method95(length(v182.clone()) as i64, v182, 0_i64),
                            v128,
                            v129,
                            v130,
                        );
                        Spiral::US18::US18_0(
                            v142,
                            v176,
                            patternInput_1.0.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                        )
                    }
                }
                Spiral::US18::US18_1(v125_1_0) => Spiral::US18::US18_1(v125_1_0.clone()),
            };
            match &v196 {
                Spiral::US18::US18_0(v196_0_0, v196_0_1, v196_0_2, v196_0_3, v196_0_4) => {
                    Spiral::US19::US19_0(
                        append((ofChar('`')), (ofChar(v196_0_0.clone()))),
                        v196_0_1.clone(),
                        v196_0_2.clone(),
                        v196_0_3.clone(),
                        v196_0_4.clone(),
                    )
                }
                Spiral::US18::US18_1(v196_1_0) => Spiral::US19::US19_1(v196_1_0.clone()),
            }
        }
        pub fn method112(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral::UH3>,
        ) -> Spiral::US19 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral::UH3>> = MutCell::new(v4.clone());
            '_method112: loop {
                break '_method112 (match v4.get().clone().as_ref() {
                    Spiral::UH3::UH3_0 => {
                        Spiral::US19::US19_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral::US19 = (match v4.get().clone().as_ref() {
                            Spiral::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral::US19::US19_0(v9_0_0, v9_0_1, v9_0_2, v9_0_3, v9_0_4) => {
                                v9.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method112;
                            }
                        }
                    }
                });
            }
        }
        pub fn method113(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v1_1.clone());
            '_method113: loop {
                break '_method113 (match v0_1.get().clone().as_ref() {
                    Spiral::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral::UH2> = match v0_1.get().clone().as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v1_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                            match v0_1.get().clone().as_ref() {
                                Spiral::UH2::UH2_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.get().clone(),
                        ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method113;
                    }
                });
            }
        }
        pub fn method110(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US26 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method110: loop {
                break '_method110 ({
                    let v106: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v29: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method111(v29, 0_i64)) == false {
                            let v66: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v72: string = ofChar(v29);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v72.clone()) as i64, v72, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v29,
                                v66,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v29,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v121: Spiral::US19 = match &v106 {
                        Spiral::US18::US18_0(v106_0_0, v106_0_1, v106_0_2, v106_0_3, v106_0_4) => {
                            Spiral::US19::US19_0(
                                ofChar(v106_0_0.clone()),
                                v106_0_1.clone(),
                                v106_0_2.clone(),
                                v106_0_3.clone(),
                                v106_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v106_1_0) => Spiral::US19::US19_1(v106_1_0.clone()),
                    };
                    let v135: Spiral::US19 = match &v121 {
                        Spiral::US19::US19_0(v121_0_0, v121_0_1, v121_0_2, v121_0_3, v121_0_4) => {
                            v121.clone()
                        }
                        _ => Spiral::method112(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral::closure38((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral::closure39((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v135 {
                        Spiral::US19::US19_0(v135_0_0, v135_0_1, v135_0_2, v135_0_3, v135_0_4) => {
                            let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                                v135_0_0.clone(),
                                v0_1.get().clone(),
                            ));
                            let v1_1_temp: string = v135_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v135_0_2.clone();
                            let v3_temp: i32 = v135_0_3.clone();
                            let v4_temp: i32 = v135_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method110;
                        }
                        _ => Spiral::US26::US26_0(
                            Spiral::method113(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method114(v0_1: LrcPtr<Spiral::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral::UH2::UH2_0 => v1_1.clone(),
                Spiral::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                    Spiral::method114(
                        match v0_1.as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method115(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US26 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method115: loop {
                break '_method115 ({
                    let v106: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v29: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method111(v29, 0_i64)) == false {
                            let v66: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v72: string = ofChar(v29);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v72.clone()) as i64, v72, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v29,
                                v66,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v29,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v121: Spiral::US19 = match &v106 {
                        Spiral::US18::US18_0(v106_0_0, v106_0_1, v106_0_2, v106_0_3, v106_0_4) => {
                            Spiral::US19::US19_0(
                                ofChar(v106_0_0.clone()),
                                v106_0_1.clone(),
                                v106_0_2.clone(),
                                v106_0_3.clone(),
                                v106_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v106_1_0) => Spiral::US19::US19_1(v106_1_0.clone()),
                    };
                    match &v121 {
                        Spiral::US19::US19_0(v121_0_0, v121_0_1, v121_0_2, v121_0_3, v121_0_4) => {
                            let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                                v121_0_0.clone(),
                                v0_1.get().clone(),
                            ));
                            let v1_1_temp: string = v121_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v121_0_2.clone();
                            let v3_temp: i32 = v121_0_3.clone();
                            let v4_temp: i32 = v121_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method115;
                        }
                        _ => Spiral::US26::US26_0(
                            Spiral::method113(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method107(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US26 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method107: loop {
                break '_method107 ({
                    let v5: bool = string("") == (v1_1.get().clone());
                    let v114: Spiral::US18 = if v5 {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v33: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method108(v33, 0_i64)) == false {
                            let v70: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v76: string = ofChar(v33);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method96(
                                Spiral::method95(length(v76.clone()) as i64, v76, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v33,
                                v70,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v33,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v134: Spiral::US19 = match &v114 {
                        Spiral::US18::US18_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                            let patternInput_1: (string, string, LrcPtr<StringBuilder>, i32, i32) =
                                Spiral::method109(
                                    ofChar(v114_0_0.clone()),
                                    v114_0_1.clone(),
                                    v114_0_2.clone(),
                                    v114_0_3.clone(),
                                    v114_0_4.clone(),
                                );
                            Spiral::US19::US19_0(
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v114_1_0) => Spiral::US19::US19_1(v114_1_0.clone()),
                    };
                    let v522: Spiral::US19 = match &v134 {
                        Spiral::US19::US19_0(v134_0_0, v134_0_1, v134_0_2, v134_0_3, v134_0_4) => {
                            v134.clone()
                        }
                        _ => {
                            let v261: Spiral::US18 = if v5 {
                                Spiral::US18::US18_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                                    '\"',
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v146: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if (v146) == '\"' {
                                    let v181: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some((length(v1_1.get().clone())) - 1_i32),
                                    );
                                    let v187: string = ofChar(v146);
                                    let patternInput_2: (LrcPtr<StringBuilder>, i32, i32) =
                                        Spiral::method96(
                                            Spiral::method95(
                                                length(v187.clone()) as i64,
                                                v187,
                                                0_i64,
                                            ),
                                            v2.get().clone(),
                                            v3.get().clone(),
                                            v4.get().clone(),
                                        );
                                    Spiral::US18::US18_0(
                                        v146,
                                        v181,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                } else {
                                    let v202: i32 =
                                        (indexOf(v1_1.get().clone(), string("\n"))) - 1_i32;
                                    Spiral::US18::US18_1(concat(new_array(&[
                                        sprintf!(
                                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                            '\"',
                                            v3.get().clone(),
                                            v4.get().clone(),
                                            v2.get().clone(),
                                            getSlice(
                                                v1_1.get().clone(),
                                                Some(0_i32),
                                                Some(
                                                    (if -2_i32 == (v202) {
                                                        (length(v1_1.get().clone())) + 1_i32
                                                    } else {
                                                        (v202) + 1_i32
                                                    }) - 1_i32
                                                )
                                            )
                                        ),
                                        string("\n"),
                                        append(
                                            ((Spiral::method97((v4.get().clone()) - 1_i32, 0_i32))(
                                                string(""),
                                            )),
                                            string("^"),
                                        ),
                                        string("\n"),
                                    ])))
                                }
                            };
                            let v451: Spiral::US19 = match &v261 {
                                Spiral::US18::US18_0(
                                    v261_0_0,
                                    v261_0_1,
                                    v261_0_2,
                                    v261_0_3,
                                    v261_0_4,
                                ) => {
                                    let v266: i32 = v261_0_4.clone();
                                    let v265: i32 = v261_0_3.clone();
                                    let v264: LrcPtr<StringBuilder> = v261_0_2.clone();
                                    let v263: string = v261_0_1.clone();
                                    let v268: Spiral::US26 = Spiral::method110(
                                        LrcPtr::new(Spiral::UH2::UH2_0),
                                        v263.clone(),
                                        v264.clone(),
                                        v265,
                                        v266,
                                    );
                                    let v301: Spiral::US19 = match &v268 {
                                        Spiral::US26::US26_0(
                                            v268_0_0,
                                            v268_0_1,
                                            v268_0_2,
                                            v268_0_3,
                                            v268_0_4,
                                        ) => {
                                            let v275: List<string> = Spiral::method114(
                                                v268_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral::US19::US19_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v275 = v275.clone();
                                                        move || ofList(v275.clone()).clone()
                                                    }))),
                                                ),
                                                v268_0_1.clone(),
                                                v268_0_2.clone(),
                                                v268_0_3.clone(),
                                                v268_0_4.clone(),
                                            )
                                        }
                                        Spiral::US26::US26_1(v268_1_0) => {
                                            Spiral::US19::US19_1(v268_1_0.clone())
                                        }
                                    };
                                    match &v301 {
                                        Spiral::US19::US19_0(
                                            v301_0_0,
                                            v301_0_1,
                                            v301_0_2,
                                            v301_0_3,
                                            v301_0_4,
                                        ) => {
                                            let v306: i32 = v301_0_4.clone();
                                            let v305: i32 = v301_0_3.clone();
                                            let v304: LrcPtr<StringBuilder> = v301_0_2.clone();
                                            let v303: string = v301_0_1.clone();
                                            let v428: Spiral::US18 = if string("") == (v303.clone())
                                            {
                                                Spiral::US18::US18_1(sprintf!(
                                                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                                                    '\"',
                                                    (v304.clone(), v305, v306)
                                                ))
                                            } else {
                                                let v313: char = getCharAt(v303.clone(), 0_i32);
                                                if (v313) == '\"' {
                                                    let v348: string = getSlice(
                                                        v303.clone(),
                                                        Some(1_i32),
                                                        Some((length(v303.clone())) - 1_i32),
                                                    );
                                                    let v354: string = ofChar(v313);
                                                    let patternInput_3: (
                                                        LrcPtr<StringBuilder>,
                                                        i32,
                                                        i32,
                                                    ) = Spiral::method96(
                                                        Spiral::method95(
                                                            length(v354.clone()) as i64,
                                                            v354,
                                                            0_i64,
                                                        ),
                                                        v304.clone(),
                                                        v305,
                                                        v306,
                                                    );
                                                    Spiral::US18::US18_0(
                                                        v313,
                                                        v348,
                                                        patternInput_3.0.clone(),
                                                        patternInput_3.1.clone(),
                                                        patternInput_3.2.clone(),
                                                    )
                                                } else {
                                                    let v369: i32 =
                                                        (indexOf(v303.clone(), string("\n")))
                                                            - 1_i32;
                                                    Spiral::US18::US18_1(concat(new_array(&[
                                                        sprintf!(
                                                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                            '\"',
                                                            v305,
                                                            v306,
                                                            v304.clone(),
                                                            getSlice(
                                                                v303.clone(),
                                                                Some(0_i32),
                                                                Some(
                                                                    (if -2_i32 == (v369) {
                                                                        (length(v303.clone()))
                                                                            + 1_i32
                                                                    } else {
                                                                        (v369) + 1_i32
                                                                    }) - 1_i32
                                                                )
                                                            )
                                                        ),
                                                        string("\n"),
                                                        append(
                                                            ((Spiral::method97(
                                                                (v306) - 1_i32,
                                                                0_i32,
                                                            ))(
                                                                string("")
                                                            )),
                                                            string("^"),
                                                        ),
                                                        string("\n"),
                                                    ])))
                                                }
                                            };
                                            match &v428 {
                                                Spiral::US18::US18_0(
                                                    v428_0_0,
                                                    v428_0_1,
                                                    v428_0_2,
                                                    v428_0_3,
                                                    v428_0_4,
                                                ) => Spiral::US19::US19_0(
                                                    v301_0_0.clone(),
                                                    v428_0_1.clone(),
                                                    v428_0_2.clone(),
                                                    v428_0_3.clone(),
                                                    v428_0_4.clone(),
                                                ),
                                                Spiral::US18::US18_1(v428_1_0) => {
                                                    Spiral::US19::US19_1(sprintf!(
                                                        "parsing.between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                        v428_1_0.clone(),
                                                        (
                                                            v1_1.get().clone(),
                                                            v2.get().clone(),
                                                            v3.get().clone(),
                                                            v4.get().clone()
                                                        ),
                                                        (v263.clone(), v264.clone(), v265, v266),
                                                        (v303.clone(), v304.clone(), v305, v306)
                                                    ))
                                                }
                                            }
                                        }
                                        _ => Spiral::US19::US19_1(string(
                                            "parsing.between / expected content",
                                        )),
                                    }
                                }
                                Spiral::US18::US18_1(v261_1_0) => {
                                    Spiral::US19::US19_1(v261_1_0.clone())
                                }
                            };
                            match &v451 {
                                Spiral::US19::US19_0(
                                    v451_0_0,
                                    v451_0_1,
                                    v451_0_2,
                                    v451_0_3,
                                    v451_0_4,
                                ) => v451.clone(),
                                _ => {
                                    let v463: Spiral::US19 =
                                                     Spiral::method112(v1_1.get().clone(),
                                                                       v2.get().clone(),
                                                                       v3.get().clone(),
                                                                       v4.get().clone(),
                                                                       LrcPtr::new(Spiral::UH3::UH3_1(Func1::new(move
                                                                                                                     |arg10_0040:
                                                                                                                          (string,
                                                                                                                           LrcPtr<StringBuilder>,
                                                                                                                           i32,
                                                                                                                           i32)|
                                                                                                                     Spiral::closure38((),
                                                                                                                                       arg10_0040)),
                                                                                                      LrcPtr::new(Spiral::UH3::UH3_1(Func1::new(move
                                                                                                                                                    |arg10_0040_1:
                                                                                                                                                         (string,
                                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                                          i32,
                                                                                                                                                          i32)|
                                                                                                                                                    Spiral::closure39((),
                                                                                                                                                                      arg10_0040_1)),
                                                                                                                                     LrcPtr::new(Spiral::UH3::UH3_0))))));
                                    let v474: Spiral::US19 = match &v463 {
                                        Spiral::US19::US19_0(
                                            v463_0_0,
                                            v463_0_1,
                                            v463_0_2,
                                            v463_0_3,
                                            v463_0_4,
                                        ) => Spiral::US19::US19_0(
                                            string(""),
                                            v463_0_1.clone(),
                                            v463_0_2.clone(),
                                            v463_0_3.clone(),
                                            v463_0_4.clone(),
                                        ),
                                        Spiral::US19::US19_1(v463_1_0) => {
                                            Spiral::US19::US19_1(v463_1_0.clone())
                                        }
                                    };
                                    let v485: Spiral::US26 = match &v474 {
                                        Spiral::US19::US19_0(
                                            v474_0_0,
                                            v474_0_1,
                                            v474_0_2,
                                            v474_0_3,
                                            v474_0_4,
                                        ) => Spiral::method115(
                                            LrcPtr::new(Spiral::UH2::UH2_0),
                                            v474_0_1.clone(),
                                            v474_0_2.clone(),
                                            v474_0_3.clone(),
                                            v474_0_4.clone(),
                                        ),
                                        Spiral::US19::US19_1(v474_1_0) => {
                                            Spiral::US26::US26_1(v474_1_0.clone())
                                        }
                                    };
                                    match &v485 {
                                        Spiral::US26::US26_0(
                                            v485_0_0,
                                            v485_0_1,
                                            v485_0_2,
                                            v485_0_3,
                                            v485_0_4,
                                        ) => {
                                            let v492: List<string> = Spiral::method114(
                                                v485_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral::US19::US19_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v492 = v492.clone();
                                                        move || ofList(v492.clone()).clone()
                                                    }))),
                                                ),
                                                v485_0_1.clone(),
                                                v485_0_2.clone(),
                                                v485_0_3.clone(),
                                                v485_0_4.clone(),
                                            )
                                        }
                                        Spiral::US26::US26_1(v485_1_0) => {
                                            Spiral::US19::US19_1(v485_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v522 {
                        Spiral::US19::US19_0(v522_0_0, v522_0_1, v522_0_2, v522_0_3, v522_0_4) => {
                            let v527: i32 = v522_0_4.clone();
                            let v526: i32 = v522_0_3.clone();
                            let v525: LrcPtr<StringBuilder> = v522_0_2.clone();
                            let v524: string = v522_0_1.clone();
                            let v523: string = v522_0_0.clone();
                            let v529: i32 = Spiral::method104(v524.clone(), 0_i32);
                            let v571: Spiral::US21 = if 0_i32 == (v529) {
                                Spiral::US21::US21_1(string(
                                    "parsing.spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral::US21::US21_0(
                                    getSlice(
                                        v524.clone(),
                                        Some(v529),
                                        Some((length(v524.clone())) - 1_i32),
                                    ),
                                    v525.clone(),
                                    v526,
                                    v527,
                                )
                            };
                            match &v571 {
                                Spiral::US21::US21_0(v571_0_0, v571_0_1, v571_0_2, v571_0_3) => {
                                    let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(
                                        Spiral::UH2::UH2_1(v523.clone(), v0_1.get().clone()),
                                    );
                                    let v1_1_temp: string = v571_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v571_0_1.clone();
                                    let v3_temp: i32 = v571_0_2.clone();
                                    let v4_temp: i32 = v571_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method107;
                                }
                                _ => Spiral::US26::US26_0(
                                    Spiral::method113(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral::UH2::UH2_1(
                                            v523.clone(),
                                            LrcPtr::new(Spiral::UH2::UH2_0),
                                        )),
                                    ),
                                    v524.clone(),
                                    v525.clone(),
                                    v526,
                                    v527,
                                ),
                            }
                        }
                        _ => Spiral::US26::US26_0(
                            Spiral::method113(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method106(v0_1: string) -> Spiral::US25 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v22: Spiral::US26 = Spiral::method107(
                    LrcPtr::new(Spiral::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(Spiral::method94()),
                    1_i32,
                    1_i32,
                );
                match &v22 {
                    Spiral::US26::US26_0(v22_0_0, v22_0_1, v22_0_2, v22_0_3, v22_0_4) => {
                        Spiral::US25::US25_0(toArray(Spiral::method114(
                            v22_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral::US26::US26_1(v22_1_0) => Spiral::US25::US25_1(v22_1_0.clone()),
                }
            }
        }
        pub fn method116(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v18: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v32: () = {
                Spiral::closure7(v18.clone(), string("{ "), ());
                ()
            };
            let v51: () = {
                Spiral::closure7(v18.clone(), string("file_name"), ());
                ()
            };
            let v70: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v87: () = {
                Spiral::closure7(v18.clone(), v8, ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v125: () = {
                Spiral::closure7(v18.clone(), string("arguments"), ());
                ()
            };
            let v142: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v18.clone(), v9, ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v195: () = {
                Spiral::closure7(v18.clone(), string("options"), ());
                ()
            };
            let v212: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v229: () = {
                Spiral::closure7(v18.clone(), string("{ "), ());
                ()
            };
            let v248: () = {
                Spiral::closure7(v18.clone(), string("command"), ());
                ()
            };
            let v265: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v282: () = {
                Spiral::closure7(v18.clone(), v10, ());
                ()
            };
            let v299: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v318: () = {
                Spiral::closure7(v18.clone(), string("cancellation_token"), ());
                ()
            };
            let v335: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v347: std::string::String = format!("{:#?}", v11);
            let v391: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v347),
                    (),
                );
                ()
            };
            let v408: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v427: () = {
                Spiral::closure7(v18.clone(), string("environment_variables"), ());
                ()
            };
            let v444: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v465: () = {
                Spiral::closure7(v18.clone(), sprintf!("{:?}", v12), ());
                ()
            };
            let v482: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v501: () = {
                Spiral::closure7(v18.clone(), string("on_line"), ());
                ()
            };
            let v518: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v530: std::string::String = format!("{:#?}", v13);
            let v574: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v530),
                    (),
                );
                ()
            };
            let v591: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v610: () = {
                Spiral::closure7(v18.clone(), string("stdin"), ());
                ()
            };
            let v627: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v639: std::string::String = format!("{:#?}", v14);
            let v683: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v639),
                    (),
                );
                ()
            };
            let v700: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v719: () = {
                Spiral::closure7(v18.clone(), string("trace"), ());
                ()
            };
            let v736: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v756: () = {
                Spiral::closure7(
                    v18.clone(),
                    if v15 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v773: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v792: () = {
                Spiral::closure7(v18.clone(), string("working_directory"), ());
                ()
            };
            let v809: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v821: std::string::String = format!("{:#?}", v16);
            let v865: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v821),
                    (),
                );
                ()
            };
            let v884: () = {
                Spiral::closure7(v18.clone(), string(" }"), ());
                ()
            };
            let v901: () = {
                Spiral::closure7(v18.clone(), string(" }"), ());
                ()
            };
            let v907: string = v18.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options"),
                    )),
                    string(" / "),
                )),
                (v907),
            ))
        }
        pub fn closure40(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v27: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v53: Option<i64> = patternInput.5.clone();
                let v52: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v51: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v50: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v49: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v48: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method116(
                    v48.clone(),
                    v49.clone(),
                    v50.clone(),
                    v51.clone(),
                    v52.clone(),
                    v53.clone(),
                    Spiral::method8(v48, v49, v50, v51, v52, v53),
                    Spiral::method12(),
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure41(
            unitVar: (),
            v0_1: Option<std::process::Child>,
        ) -> Option<std::process::Child> {
            v0_1
        }
        pub fn method117() -> Func1<Option<std::process::Child>, Option<std::process::Child>> {
            Func1::new(move |v: Option<std::process::Child>| Spiral::closure41((), v))
        }
        pub fn closure42(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral::US27 {
            Spiral::US27::US27_0(v0_1)
        }
        pub fn method118()
        -> Func1<std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>, Spiral::US27>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral::closure42((), v)
                },
            )
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Spiral::US27 {
            Spiral::US27::US27_1(v0_1)
        }
        pub fn method119() -> Func1<std::string::String, Spiral::US27> {
            Func1::new(move |v: std::string::String| Spiral::closure43((), v))
        }
        pub fn method120(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: string,
            v10: string,
            v11: string,
            v12: Option<CancellationToken>,
            v13: Array<(string, string)>,
            v14: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v15: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v16: bool,
            v17: Option<string>,
        ) -> string {
            let v19: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v33: () = {
                Spiral::closure7(v19.clone(), string("{ "), ());
                ()
            };
            let v52: () = {
                Spiral::closure7(v19.clone(), string("error"), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v83: std::string::String = format!("{:#?}", v8);
            let v127: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v83),
                    (),
                );
                ()
            };
            let v146: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v19.clone(), string("file_name"), ());
                ()
            };
            let v182: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v199: () = {
                Spiral::closure7(v19.clone(), v9, ());
                ()
            };
            let v216: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v235: () = {
                Spiral::closure7(v19.clone(), string("arguments"), ());
                ()
            };
            let v252: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v269: () = {
                Spiral::closure7(v19.clone(), v10, ());
                ()
            };
            let v286: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v305: () = {
                Spiral::closure7(v19.clone(), string("options"), ());
                ()
            };
            let v322: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v339: () = {
                Spiral::closure7(v19.clone(), string("{ "), ());
                ()
            };
            let v358: () = {
                Spiral::closure7(v19.clone(), string("command"), ());
                ()
            };
            let v375: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v392: () = {
                Spiral::closure7(v19.clone(), v11, ());
                ()
            };
            let v409: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v428: () = {
                Spiral::closure7(v19.clone(), string("cancellation_token"), ());
                ()
            };
            let v445: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v457: std::string::String = format!("{:#?}", v12);
            let v501: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v457),
                    (),
                );
                ()
            };
            let v518: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v537: () = {
                Spiral::closure7(v19.clone(), string("environment_variables"), ());
                ()
            };
            let v554: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v575: () = {
                Spiral::closure7(v19.clone(), sprintf!("{:?}", v13), ());
                ()
            };
            let v592: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v611: () = {
                Spiral::closure7(v19.clone(), string("on_line"), ());
                ()
            };
            let v628: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v640: std::string::String = format!("{:#?}", v14);
            let v684: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v640),
                    (),
                );
                ()
            };
            let v701: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v720: () = {
                Spiral::closure7(v19.clone(), string("stdin"), ());
                ()
            };
            let v737: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v749: std::string::String = format!("{:#?}", v15);
            let v793: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v749),
                    (),
                );
                ()
            };
            let v810: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v829: () = {
                Spiral::closure7(v19.clone(), string("trace"), ());
                ()
            };
            let v846: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v866: () = {
                Spiral::closure7(
                    v19.clone(),
                    if v16 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v883: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v902: () = {
                Spiral::closure7(v19.clone(), string("working_directory"), ());
                ()
            };
            let v919: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v931: std::string::String = format!("{:#?}", v17);
            let v975: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v931),
                    (),
                );
                ()
            };
            let v994: () = {
                Spiral::closure7(v19.clone(), string(" }"), ());
                ()
            };
            let v1011: () = {
                Spiral::closure7(v19.clone(), string(" }"), ());
                ()
            };
            let v1017: string = v19.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options / child error"),
                    )),
                    string(" / "),
                )),
                (v1017),
            ))
        }
        pub fn closure44(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            v9: std::string::String,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v28: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v54: Option<i64> = patternInput.5.clone();
                let v53: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v52: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v51: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v50: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v49: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method120(
                    v49.clone(),
                    v50.clone(),
                    v51.clone(),
                    v52.clone(),
                    v53.clone(),
                    v54.clone(),
                    Spiral::method8(v49, v50, v51, v52, v53, v54),
                    Spiral::method76(),
                    v9,
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method121(
            v0_1: std::sync::MutexGuard<Option<std::process::Child>>,
        ) -> std::sync::MutexGuard<Option<std::process::Child>> {
            v0_1
        }
        pub fn closure45(
            unitVar: (),
            v0_1: Option<std::process::ChildStdin>,
        ) -> Option<std::process::ChildStdin> {
            v0_1
        }
        pub fn method122()
        -> Func1<Option<std::process::ChildStdin>, Option<std::process::ChildStdin>> {
            Func1::new(move |v: Option<std::process::ChildStdin>| Spiral::closure45((), v))
        }
        pub fn closure46(
            unitVar: (),
            v0_1: std::sync::mpsc::Sender<std::string::String>,
        ) -> std::sync::mpsc::Sender<std::string::String> {
            v0_1
        }
        pub fn method123() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral::closure46((), v)
            })
        }
        pub fn method124() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral::closure46((), v)
            })
        }
        pub fn closure47(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        ) -> std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>> {
            v0_1
        }
        pub fn method125() -> Func1<
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>| {
                    Spiral::closure47((), v)
                },
            )
        }
        pub fn closure48(unitVar: (), v0_1: std::string::String) -> Spiral::US29 {
            Spiral::US29::US29_0(v0_1)
        }
        pub fn method126() -> Func1<std::string::String, Spiral::US29> {
            Func1::new(move |v: std::string::String| Spiral::closure48((), v))
        }
        pub fn closure49(unitVar: (), v0_1: std::string::String) -> Spiral::US29 {
            Spiral::US29::US29_1(v0_1)
        }
        pub fn method127() -> Func1<std::string::String, Spiral::US29> {
            Func1::new(move |v: std::string::String| Spiral::closure49((), v))
        }
        pub fn method128(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: std::string::String,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("trace\'"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(
                    v11.clone(),
                    if v8 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("e"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v150: std::string::String = format!("{:#?}", v9);
            let v194: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v150),
                    (),
                );
                ()
            };
            let v213: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v219: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.stdio_line"),
                    )),
                    string(" / "),
                )),
                (v219),
            ))
        }
        pub fn closure50(v0_1: bool, v1_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method128(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method76(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method129(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v11: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        (v8),
                    )),
                    string(" / "),
                )),
                (v11),
            ))
        }
        pub fn closure51(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(if (v0_1.clone()) == string("") {
                    string("")
                } else {
                    Spiral::method129(
                        v40.clone(),
                        v41.clone(),
                        v42.clone(),
                        v43.clone(),
                        v44.clone(),
                        v45.clone(),
                        Spiral::method8(v40, v41, v42, v43, v44, v45),
                        Spiral::method78(),
                        v0_1,
                    )
                })
            };
        }
        pub fn closure52(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method130()
        -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral::closure52((), v)
            })
        }
        pub fn method131(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
        ) -> Spiral::US30 {
            Spiral::US30::US30_0(v0_1)
        }
        pub fn method132() -> Func1<
            Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
            Spiral::US30,
        > {
            Func1::new(
                move |v: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>| {
                    Spiral::closure53((), v)
                },
            )
        }
        pub fn method133(
            v0_1: std::sync::MutexGuard<Option<std::process::ChildStdin>>,
        ) -> std::sync::MutexGuard<Option<std::process::ChildStdin>> {
            v0_1
        }
        pub fn closure54(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> Spiral::US31 {
            Spiral::US31::US31_0(v0_1)
        }
        pub fn method134()
        -> Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, Spiral::US31> {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>| {
                    Spiral::closure54((), v)
                },
            )
        }
        pub fn method135(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn closure55(unitVar: (), v0_1: std::process::Output) -> Spiral::US32 {
            Spiral::US32::US32_0(v0_1)
        }
        pub fn method136() -> Func1<std::process::Output, Spiral::US32> {
            Func1::new(move |v: std::process::Output| Spiral::closure55((), v))
        }
        pub fn closure56(unitVar: (), v0_1: std::string::String) -> Spiral::US32 {
            Spiral::US32::US32_1(v0_1)
        }
        pub fn method137() -> Func1<std::string::String, Spiral::US32> {
            Func1::new(move |v: std::string::String| Spiral::closure56((), v))
        }
        pub fn method138(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: string,
            v10: string,
            v11: string,
            v12: Option<CancellationToken>,
            v13: Array<(string, string)>,
            v14: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v15: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v16: bool,
            v17: Option<string>,
        ) -> string {
            let v19: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v33: () = {
                Spiral::closure7(v19.clone(), string("{ "), ());
                ()
            };
            let v52: () = {
                Spiral::closure7(v19.clone(), string("error"), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v83: std::string::String = format!("{:#?}", v8);
            let v127: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v83),
                    (),
                );
                ()
            };
            let v146: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v19.clone(), string("file_name"), ());
                ()
            };
            let v182: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v199: () = {
                Spiral::closure7(v19.clone(), v9, ());
                ()
            };
            let v216: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v235: () = {
                Spiral::closure7(v19.clone(), string("arguments"), ());
                ()
            };
            let v252: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v269: () = {
                Spiral::closure7(v19.clone(), v10, ());
                ()
            };
            let v286: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v305: () = {
                Spiral::closure7(v19.clone(), string("options"), ());
                ()
            };
            let v322: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v339: () = {
                Spiral::closure7(v19.clone(), string("{ "), ());
                ()
            };
            let v358: () = {
                Spiral::closure7(v19.clone(), string("command"), ());
                ()
            };
            let v375: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v392: () = {
                Spiral::closure7(v19.clone(), v11, ());
                ()
            };
            let v409: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v428: () = {
                Spiral::closure7(v19.clone(), string("cancellation_token"), ());
                ()
            };
            let v445: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v457: std::string::String = format!("{:#?}", v12);
            let v501: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v457),
                    (),
                );
                ()
            };
            let v518: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v537: () = {
                Spiral::closure7(v19.clone(), string("environment_variables"), ());
                ()
            };
            let v554: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v575: () = {
                Spiral::closure7(v19.clone(), sprintf!("{:?}", v13), ());
                ()
            };
            let v592: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v611: () = {
                Spiral::closure7(v19.clone(), string("on_line"), ());
                ()
            };
            let v628: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v640: std::string::String = format!("{:#?}", v14);
            let v684: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v640),
                    (),
                );
                ()
            };
            let v701: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v720: () = {
                Spiral::closure7(v19.clone(), string("stdin"), ());
                ()
            };
            let v737: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v749: std::string::String = format!("{:#?}", v15);
            let v793: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v749),
                    (),
                );
                ()
            };
            let v810: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v829: () = {
                Spiral::closure7(v19.clone(), string("trace"), ());
                ()
            };
            let v846: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v866: () = {
                Spiral::closure7(
                    v19.clone(),
                    if v16 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v883: () = {
                Spiral::closure7(v19.clone(), string("; "), ());
                ()
            };
            let v902: () = {
                Spiral::closure7(v19.clone(), string("working_directory"), ());
                ()
            };
            let v919: () = {
                Spiral::closure7(v19.clone(), string(" = "), ());
                ()
            };
            let v931: std::string::String = format!("{:#?}", v17);
            let v975: () = {
                Spiral::closure7(
                    v19.clone(),
                    fable_library_rust::String_::fromString(v931),
                    (),
                );
                ()
            };
            let v994: () = {
                Spiral::closure7(v19.clone(), string(" }"), ());
                ()
            };
            let v1011: () = {
                Spiral::closure7(v19.clone(), string(" }"), ());
                ()
            };
            let v1017: string = v19.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options / output error"),
                    )),
                    string(" / "),
                )),
                (v1017),
            ))
        }
        pub fn closure57(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            v9: std::string::String,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v28: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v54: Option<i64> = patternInput.5.clone();
                let v53: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v52: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v51: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v50: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v49: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method138(
                    v49.clone(),
                    v50.clone(),
                    v51.clone(),
                    v52.clone(),
                    v53.clone(),
                    v54.clone(),
                    Spiral::method8(v49, v50, v51, v52, v53, v54),
                    Spiral::method76(),
                    v9,
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure58(unitVar: (), v0_1: i32) -> Spiral::US33 {
            Spiral::US33::US33_0(v0_1)
        }
        pub fn method139() -> Func1<i32, Spiral::US33> {
            Func1::new(move |v: i32| Spiral::closure58((), v))
        }
        pub fn method140(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("std_trace_length"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v158: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v9), ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v183: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options / result"),
                    )),
                    string(" / "),
                )),
                (v183),
            ))
        }
        pub fn closure59(v0_1: i32, v1_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method140(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method78(),
                    v0_1,
                    length(v1_1),
                ))
            };
        }
        pub fn method143(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: Spiral::US5,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v18: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v32: () = {
                Spiral::closure7(v18.clone(), string("{ "), ());
                ()
            };
            let v51: () = {
                Spiral::closure7(v18.clone(), string("file_name"), ());
                ()
            };
            let v70: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v87: () = {
                Spiral::closure7(v18.clone(), v8, ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v125: () = {
                Spiral::closure7(v18.clone(), string("arguments"), ());
                ()
            };
            let v142: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v163: () = {
                Spiral::closure7(v18.clone(), sprintf!("{:?}", v9), ());
                ()
            };
            let v180: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v199: () = {
                Spiral::closure7(v18.clone(), string("options"), ());
                ()
            };
            let v216: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v233: () = {
                Spiral::closure7(v18.clone(), string("{ "), ());
                ()
            };
            let v252: () = {
                Spiral::closure7(v18.clone(), string("command"), ());
                ()
            };
            let v269: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v286: () = {
                Spiral::closure7(v18.clone(), v10, ());
                ()
            };
            let v303: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v322: () = {
                Spiral::closure7(v18.clone(), string("cancellation_token"), ());
                ()
            };
            let v339: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v351: std::string::String = format!("{:#?}", v11);
            let v395: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v351),
                    (),
                );
                ()
            };
            let v412: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v431: () = {
                Spiral::closure7(v18.clone(), string("environment_variables"), ());
                ()
            };
            let v448: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v469: () = {
                Spiral::closure7(v18.clone(), sprintf!("{:?}", v12), ());
                ()
            };
            let v486: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v505: () = {
                Spiral::closure7(v18.clone(), string("on_line"), ());
                ()
            };
            let v522: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v534: std::string::String = format!("{:#?}", v13);
            let v578: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v534),
                    (),
                );
                ()
            };
            let v595: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v614: () = {
                Spiral::closure7(v18.clone(), string("stdin"), ());
                ()
            };
            let v631: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v643: std::string::String = format!("{:#?}", v14);
            let v687: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v643),
                    (),
                );
                ()
            };
            let v704: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v723: () = {
                Spiral::closure7(v18.clone(), string("trace"), ());
                ()
            };
            let v740: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v760: () = {
                Spiral::closure7(
                    v18.clone(),
                    if v15 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v777: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v796: () = {
                Spiral::closure7(v18.clone(), string("working_directory"), ());
                ()
            };
            let v813: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v825: std::string::String = format!("{:#?}", v16);
            let v869: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v825),
                    (),
                );
                ()
            };
            let v888: () = {
                Spiral::closure7(v18.clone(), string(" }"), ());
                ()
            };
            let v905: () = {
                Spiral::closure7(v18.clone(), string(" }"), ());
                ()
            };
            let v911: string = v18.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options_async"),
                    )),
                    string(" / "),
                )),
                (v911),
            ))
        }
        pub fn closure60(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: Spiral::US5,
            v8: string,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v27: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v53: Option<i64> = patternInput.5.clone();
                let v52: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v51: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v50: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v49: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v48: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method143(
                    v48.clone(),
                    v49.clone(),
                    v50.clone(),
                    v51.clone(),
                    v52.clone(),
                    v53.clone(),
                    Spiral::method8(v48, v49, v50, v51, v52, v53),
                    Spiral::method12(),
                    v8,
                    v7,
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method144(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Array<(string, string)> {
            v2
        }
        pub fn method147(v0_1: bool) -> string {
            unbox::<string>(fable_library_rust::Native_::getZero())
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Func1<(i32, string, bool), Arc<Async<()>>>,
        ) -> Spiral::US34 {
            Spiral::US34::US34_0(v0_1)
        }
        pub fn method148() -> Func1<Func1<(i32, string, bool), Arc<Async<()>>>, Spiral::US34> {
            Func1::new(move |v: Func1<(i32, string, bool), Arc<Async<()>>>| {
                Spiral::closure62((), v)
            })
        }
        pub fn method149(v0_1: bool) -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn closure63(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(if (v0_1.clone()) == string("") {
                    string("")
                } else {
                    Spiral::method129(
                        v40.clone(),
                        v41.clone(),
                        v42.clone(),
                        v43.clone(),
                        v44.clone(),
                        v45.clone(),
                        Spiral::method8(v40, v41, v42, v43, v44, v45),
                        Spiral::method78(),
                        v0_1,
                    )
                })
            };
        }
        pub fn method146(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: bool,
            v10: bool,
        ) -> Arc<Async<()>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method145(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: bool,
            v10: bool,
        ) -> Arc<Async<()>> {
            Spiral::method146(v0_1, v1_1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        }
        pub fn closure61(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: bool,
            v10: bool,
        ) {
            let v11: Arc<Async<()>> =
                Spiral::method145(v0_1, v1_1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
            fable_library_rust::Native_::getZero::<()>();
            ()
        }
        pub fn closure64(unitVar: (), v0_1: CancellationToken) -> Spiral::US35 {
            Spiral::US35::US35_0(v0_1)
        }
        pub fn method150() -> Func1<CancellationToken, Spiral::US35> {
            Func1::new(move |v: CancellationToken| Spiral::closure64((), v))
        }
        pub fn method151(v0_1: CancellationToken) -> Arc<Async<CancellationToken>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method152(v0_1: bool) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method153(v0_1: bool) {
            ();
        }
        pub fn closure65(v0_1: bool, unitVar: ()) {
            if (Spiral::method152(v0_1)) == false {
                Spiral::method153(v0_1);
            };
        }
        pub fn method155(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<TaskCanceledException>,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("ex"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v74: std::string::String = format!("{:#?}", v8);
            let v118: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v74),
                    (),
                );
                ()
            };
            let v137: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v143: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options_async / WaitForExitAsync"),
                    )),
                    string(" / "),
                )),
                (v143),
            ))
        }
        pub fn closure66(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_3) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method155(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method40(),
                    v0_1,
                ))
            };
        }
        pub fn method154(
            v0_1: bool,
            v1_1: LrcPtr<ConcurrentStack_1<string>>,
            v2: CancellationToken,
        ) -> Arc<Async<i32>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method156(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v18: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v32: () = {
                Spiral::closure7(v18.clone(), string("{ "), ());
                ()
            };
            let v51: () = {
                Spiral::closure7(v18.clone(), string("exit_code"), ());
                ()
            };
            let v70: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v18.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v109: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v128: () = {
                Spiral::closure7(v18.clone(), string("output_length"), ());
                ()
            };
            let v145: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v18.clone(), sprintf!("{}", v9), ());
                ()
            };
            let v182: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v201: () = {
                Spiral::closure7(v18.clone(), string("options"), ());
                ()
            };
            let v218: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v235: () = {
                Spiral::closure7(v18.clone(), string("{ "), ());
                ()
            };
            let v254: () = {
                Spiral::closure7(v18.clone(), string("command"), ());
                ()
            };
            let v271: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v288: () = {
                Spiral::closure7(v18.clone(), v10, ());
                ()
            };
            let v305: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v324: () = {
                Spiral::closure7(v18.clone(), string("cancellation_token"), ());
                ()
            };
            let v341: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v353: std::string::String = format!("{:#?}", v11);
            let v397: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v353),
                    (),
                );
                ()
            };
            let v414: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v433: () = {
                Spiral::closure7(v18.clone(), string("environment_variables"), ());
                ()
            };
            let v450: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v471: () = {
                Spiral::closure7(v18.clone(), sprintf!("{:?}", v12), ());
                ()
            };
            let v488: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v507: () = {
                Spiral::closure7(v18.clone(), string("on_line"), ());
                ()
            };
            let v524: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v536: std::string::String = format!("{:#?}", v13);
            let v580: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v536),
                    (),
                );
                ()
            };
            let v597: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v616: () = {
                Spiral::closure7(v18.clone(), string("stdin"), ());
                ()
            };
            let v633: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v645: std::string::String = format!("{:#?}", v14);
            let v689: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v645),
                    (),
                );
                ()
            };
            let v706: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v725: () = {
                Spiral::closure7(v18.clone(), string("trace"), ());
                ()
            };
            let v742: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v762: () = {
                Spiral::closure7(
                    v18.clone(),
                    if v15 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v779: () = {
                Spiral::closure7(v18.clone(), string("; "), ());
                ()
            };
            let v798: () = {
                Spiral::closure7(v18.clone(), string("working_directory"), ());
                ()
            };
            let v815: () = {
                Spiral::closure7(v18.clone(), string(" = "), ());
                ()
            };
            let v827: std::string::String = format!("{:#?}", v16);
            let v871: () = {
                Spiral::closure7(
                    v18.clone(),
                    fable_library_rust::String_::fromString(v827),
                    (),
                );
                ()
            };
            let v890: () = {
                Spiral::closure7(v18.clone(), string(" }"), ());
                ()
            };
            let v907: () = {
                Spiral::closure7(v18.clone(), string(" }"), ());
                ()
            };
            let v913: string = v18.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("runtime.execute_with_options_async"),
                    )),
                    string(" / "),
                )),
                (v913),
            ))
        }
        pub fn closure67(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: i32,
            v8: string,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v27: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v53: Option<i64> = patternInput.5.clone();
                let v52: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v51: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v50: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v49: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v48: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method156(
                    v48.clone(),
                    v49.clone(),
                    v50.clone(),
                    v51.clone(),
                    v52.clone(),
                    v53.clone(),
                    Spiral::method8(v48, v49, v50, v51, v52, v53),
                    Spiral::method12(),
                    v7,
                    length(v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method142(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method141(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            Spiral::method142(v0_1, v1_1, v2, v3, v4, v5, v6)
        }
        pub fn method91(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v17: Spiral::US17 = Spiral::method93(Spiral::method92(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral::US5) = match &v17 {
                Spiral::US17::US17_0(v17_0_0, v17_0_1) => (v17_0_0.clone(), v17_0_1.clone()),
                Spiral::US17::US17_1(v17_1_0) => panic!(
                    "{}",
                    concat(new_array(&[
                        string("resultm.get / Result value was Error: "),
                        v17_1_0.clone()
                    ])),
                ),
            };
            let v30: Spiral::US5 = patternInput.1.clone();
            let v29: string = patternInput.0.clone();
            let v35: Spiral::US25 = Spiral::method106(match &v30 {
                Spiral::US5::US5_0(v30_0_0) => match &v30 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            });
            let v44: Array<string> = match &v35 {
                Spiral::US25::US25_0(v35_0_0) => v35_0_0.clone(),
                Spiral::US25::US25_1(v35_1_0) => panic!(
                    "{}",
                    concat(new_array(&[
                        string("resultm.get / Result value was Error: "),
                        v35_1_0.clone()
                    ])),
                ),
            };
            let v46: Vec<string> = v44.to_vec();
            let v48: bool = true;
            let _vec_map: Vec<_> = v46
                .into_iter()
                .map(|x| {
                    //;
                    let v50: string = x;
                    let v57: &str = &*v50;
                    let v90: std::string::String = String::from(v57);
                    let v118: bool = true;
                    v90
                })
                .collect::<Vec<_>>();
            let v120: Vec<std::string::String> = _vec_map;
            let v187: () = {
                Spiral::closure40(
                    v0_1.clone(),
                    v1_1.clone(),
                    v2.clone(),
                    v3.clone(),
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v29.clone(),
                    v120.clone(),
                    (),
                );
                ()
            };
            let _capture_v253: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_5: LrcPtr<(i32, string)> = (Func0::new({
                    let v0_1 = v0_1.clone();
                    let v120 = v120.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v29 = v29.clone();
                    let v3 = v3.clone();
                    let v4 = v4.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    move || {
                        let v255: std::process::Command = std::process::Command::new(&*v29.clone());
                        let v257: bool = true;
                        let mut v255 = v255;
                        let v259: bool = true;
                        std::process::Command::args(&mut v255, &*v120.clone());
                        let v261: std::process::Command = v255;
                        let v263: std::process::Stdio = std::process::Stdio::piped();
                        let v265: bool = true;
                        let mut v261 = v261;
                        let v267: bool = true;
                        std::process::Command::stdout(&mut v261, std::process::Stdio::piped());
                        let v269: std::process::Command = v261;
                        let v271: std::process::Stdio = std::process::Stdio::piped();
                        let v273: bool = true;
                        let mut v269 = v269;
                        let v275: bool = true;
                        std::process::Command::stderr(&mut v269, std::process::Stdio::piped());
                        let v277: std::process::Command = v269;
                        let v279: std::process::Stdio = std::process::Stdio::piped();
                        let v281: bool = true;
                        let mut v277 = v277;
                        let v283: bool = true;
                        std::process::Command::stdin(&mut v277, std::process::Stdio::piped());
                        let v285: std::process::Command = v277;
                        let v310: Spiral::US5 =
                            defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6.clone()));
                        let v324: std::process::Command = match &v310 {
                            Spiral::US5::US5_0(v310_0_0) => {
                                let v316: bool = true;
                                let mut v285 = v285;
                                let v318: bool = true;
                                std::process::Command::current_dir(
                                    &mut v285,
                                    &*match &v310 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                );
                                v285
                            }
                            _ => v285,
                        };
                        let v346: std::process::Command = if (get_Count(v2.clone()) as u64) == 0_u64
                        {
                            v324
                        } else {
                            let v328: Vec<(string, string)> = v2.clone().to_vec();
                            let v330: bool = true;
                            let _vec_fold_ = v328.into_iter().fold(v324, |acc, x| {
                                //;
                                let v332: std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v337: bool = true;
                                let mut v332 = v332;
                                let v339: bool = true;
                                std::process::Command::env(
                                    &mut v332,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v341: std::process::Command = v332;
                                let v343: bool = true;
                                v341
                            });
                            _vec_fold_
                        };
                        let v348: bool = true;
                        let mut v346 = v346;
                        let v350: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(&mut v346);
                        let v351 = Spiral::method73();
                        let v355: Result<std::process::Child, std::string::String> =
                            v350.map_err(|x| v351(x));
                        let v367 = Spiral::method117();
                        let v369: bool = true;
                        let _result_map_ = v355.map(|x| {
                            //;
                            let v376: Option<std::process::Child> = v367(Some(x));
                            let v378: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(v376);
                            let v380: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v378);
                            let v382: bool = true;
                            v380
                        });
                        let v384: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v385 = Spiral::method118();
                        let v386 = Spiral::method119();
                        let v388: Spiral::US27 = match v384 {
                            Ok(x) => v385(x),
                            Err(e) => v386(e),
                        };
                        let patternInput_3: (i32, Spiral::US7, Spiral::US28) = match &v388 {
                            Spiral::US27::US27_0(v388_0_0) => {
                                let v389: std::sync::Arc<
                                    std::sync::Mutex<Option<std::process::Child>>,
                                > = v388_0_0.clone();
                                let v391: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v393: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v389.clone();
                                    let v395: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v393.lock();
                                    let v411: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method121(v395.unwrap());
                                    let v413: bool = true;
                                    let mut v411 = v411;
                                    let v415: &mut Option<std::process::Child> = &mut v411;
                                    let v417: Option<&mut std::process::Child> = v415.as_mut();
                                    let v419: &mut std::process::Child = v417.unwrap();
                                    let v421: &mut Option<std::process::ChildStdout> =
                                        &mut v419.stdout;
                                    let v423: Option<std::process::ChildStdout> =
                                        Option::take(v421);
                                    let v425: std::process::ChildStdout = v423.unwrap();
                                    let v427: bool = true;
                                    v425
                                })();
                                let v429: std::process::ChildStdout = _capture;
                                let v431: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v433: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v389.clone();
                                    let v435: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v433.lock();
                                    let v451: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method121(v435.unwrap());
                                    let v453: bool = true;
                                    let mut v451 = v451;
                                    let v455: &mut Option<std::process::Child> = &mut v451;
                                    let v457: Option<&mut std::process::Child> = v455.as_mut();
                                    let v459: &mut std::process::Child = v457.unwrap();
                                    let v461: &mut Option<std::process::ChildStderr> =
                                        &mut v459.stderr;
                                    let v463: Option<std::process::ChildStderr> =
                                        Option::take(v461);
                                    let v465: std::process::ChildStderr = v463.unwrap();
                                    let v467: bool = true;
                                    v465
                                })();
                                let v469: std::process::ChildStderr = _capture;
                                let v471: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v473: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v389.clone();
                                    let v475: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v473.lock();
                                    let v491: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method121(v475.unwrap());
                                    let v493: bool = true;
                                    let mut v491 = v491;
                                    let v495: &mut Option<std::process::Child> = &mut v491;
                                    let v497: Option<&mut std::process::Child> = v495.as_mut();
                                    let v499: &mut std::process::Child = v497.unwrap();
                                    let v501: &mut Option<std::process::ChildStdin> =
                                        &mut v499.stdin;
                                    let v503: Option<std::process::ChildStdin> = Option::take(v501);
                                    let v505: std::process::ChildStdin = v503.unwrap();
                                    let v511: Option<std::process::ChildStdin> =
                                        (Spiral::method122())(Some(v505));
                                    let v513: std::sync::Mutex<Option<std::process::ChildStdin>> =
                                        std::sync::Mutex::new(v511);
                                    let v515: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = std::sync::Arc::new(v513);
                                    let v517: bool = true;
                                    v515
                                })();
                                let v519: std::sync::Arc<
                                    std::sync::Mutex<Option<std::process::ChildStdin>>,
                                > = _capture;
                                let patternInput_2: (
                                    std::sync::mpsc::Sender<std::string::String>,
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                ) = {
                                    let (sender, receiver) = std::sync::mpsc::channel();
                                    (sender, std::sync::Arc::new(receiver))
                                };
                                let v521: std::sync::mpsc::Sender<std::string::String> =
                                    patternInput_2.0.clone();
                                let v524: std::sync::mpsc::Sender<std::string::String> =
                                    (Spiral::method123())(v521.clone());
                                let v526: std::sync::Mutex<
                                    std::sync::mpsc::Sender<std::string::String>,
                                > = std::sync::Mutex::new(v524);
                                let v528: std::sync::Arc<
                                    std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>,
                                > = std::sync::Arc::new(v526);
                                let v530: std::sync::mpsc::Sender<std::string::String> =
                                    (Spiral::method124())(v521);
                                let v532: std::sync::Mutex<
                                    std::sync::mpsc::Sender<std::string::String>,
                                > = std::sync::Mutex::new(v530);
                                let v534: std::sync::Arc<
                                    std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>,
                                > = std::sync::Arc::new(v532);
                                let v536: std::sync::Arc<
                                    std::sync::mpsc::Receiver<std::string::String>,
                                > = (Spiral::method125())(patternInput_2.1.clone());
                                let v538: std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                > = std::sync::Mutex::new(v536);
                                let v540: std::sync::Arc<
                                    std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                > = std::sync::Arc::new(v538);
                                let v542: bool = true;
                                let __spawn = std::thread::spawn(move || {
                                    //;
                                    let v544: encoding_rs_io::DecodeReaderBytes<
                                        std::process::ChildStdout,
                                        Vec<u8>,
                                    > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                        .utf8_passthru(true)
                                        .build(v429);
                                    let v546: std::io::BufReader<
                                        encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        >,
                                    > = std::io::BufReader::new(v544);
                                    let v548: std::io::Lines<
                                        std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        >,
                                    > = std::io::BufRead::lines(v546);
                                    let v550: bool = true;
                                    let mut v548 = v548;
                                    let _iter_try_for_each = v548.try_for_each(|x| {
                                        //;
                                        let v552: Result<std::string::String, std::io::Error> = x;
                                        let v554: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v528.clone();
                                        let v555 = Spiral::method73();
                                        let v559: Result<std::string::String, std::string::String> =
                                            v552.map_err(|x| v555(x));
                                        let v571 = Spiral::method126();
                                        let v572 = Spiral::method127();
                                        let v574: Spiral::US29 = match v559 {
                                            Ok(x) => v571(x),
                                            Err(e) => v572(e),
                                        };
                                        let v963: std::string::String = match &v574 {
                                            Spiral::US29::US29_0(v574_0_0) => {
                                                let v577: string =
                                                    fable_library_rust::String_::fromString(
                                                        v574_0_0.clone(),
                                                    );
                                                let v579: &encoding_rs::Encoding =
                                                    encoding_rs::UTF_8;
                                                let v581: std::borrow::Cow<[u8]> =
                                                    v579.encode(&*v577).0;
                                                let v583: &[u8] = v581.as_ref();
                                                let v585: Result<&str, std::str::Utf8Error> =
                                                    std::str::from_utf8(v583);
                                                let v589: &str = v585.unwrap();
                                                let v628: std::string::String = String::from(v589);
                                                let v636: string = concat(new_array(&[
                                                    string("> "),
                                                    fable_library_rust::String_::fromString(
                                                        v628.clone(),
                                                    ),
                                                ]));
                                                if v5 {
                                                    let v702: () = {
                                                        Spiral::closure51(v636.clone(), ());
                                                        ()
                                                    };
                                                    ()
                                                } else {
                                                    let v769: () = {
                                                        Spiral::closure10(v636, ());
                                                        ()
                                                    };
                                                    ()
                                                }
                                                v628
                                            }
                                            Spiral::US29::US29_1(v574_1_0) => {
                                                let v771: std::string::String = v574_1_0.clone();
                                                let v834: () = {
                                                    Spiral::closure50(v5, v771.clone(), ());
                                                    ()
                                                };
                                                let v895: string =
                                                    sprintf!("\u{001b}[4;7m{}\u{001b}[0m", v771);
                                                let v902: &str = &*v895;
                                                String::from(v902)
                                            }
                                        };
                                        let v965: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v554;
                                        let v967: Result<
                                            std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            >,
                                        > = v965.lock();
                                        let v971: std::sync::MutexGuard<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = v967.unwrap();
                                        let v984: &std::sync::mpsc::Sender<std::string::String> =
                                            &v971;
                                        let v986: Result<
                                            (),
                                            std::sync::mpsc::SendError<std::string::String>,
                                        > = v984.send(v963);
                                        let v987 = Spiral::method130();
                                        let v991: Result<(), std::string::String> =
                                            v986.map_err(|x| v987(x));
                                        let v1004: _ = v991;
                                        let v1006: bool = true;
                                        v1004
                                    }); //;
                                    let v1009: Result<(), string> =
                                        Spiral::method131(_iter_try_for_each.map_err(|x| x.into()));
                                    let v1012: string = string("}");
                                    let v1017: bool = true;
                                    let _fix_closure_v1014 = v1009;
                                    let v1024: string = append(
                                        (append(
                                            (append(
                                                (append(
                                                    string("true; _fix_closure_v1014 "),
                                                    (v1012),
                                                )),
                                                string("); "),
                                            )),
                                            string(""),
                                        )),
                                        string(" // rust.fix_closure\'"),
                                    );
                                    let v1025: bool = true;
                                    _fix_closure_v1014
                                }); // rust.fix_closure';
                                let v1027: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                let v1029: bool = true;
                                let __spawn = std::thread::spawn(move || {
                                    //;
                                    let v1031: encoding_rs_io::DecodeReaderBytes<
                                        std::process::ChildStderr,
                                        Vec<u8>,
                                    > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                        .utf8_passthru(true)
                                        .build(v469);
                                    let v1033: std::io::BufReader<
                                        encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        >,
                                    > = std::io::BufReader::new(v1031);
                                    let v1035: std::io::Lines<
                                        std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        >,
                                    > = std::io::BufRead::lines(v1033);
                                    let v1037: bool = true;
                                    let mut v1035 = v1035;
                                    let _iter_try_for_each = v1035.try_for_each(|x| {
                                        //;
                                        let v1039: Result<std::string::String, std::io::Error> = x;
                                        let v1041: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v534.clone();
                                        let v1042 = Spiral::method73();
                                        let v1046: Result<
                                            std::string::String,
                                            std::string::String,
                                        > = v1039.map_err(|x| v1042(x));
                                        let v1058 = Spiral::method126();
                                        let v1059 = Spiral::method127();
                                        let v1061: Spiral::US29 = match v1046 {
                                            Ok(x) => v1058(x),
                                            Err(e) => v1059(e),
                                        };
                                        let v1515: std::string::String = match &v1061 {
                                            Spiral::US29::US29_0(v1061_0_0) => {
                                                let v1064: string =
                                                    fable_library_rust::String_::fromString(
                                                        v1061_0_0.clone(),
                                                    );
                                                let v1066: &encoding_rs::Encoding =
                                                    encoding_rs::UTF_8;
                                                let v1068: std::borrow::Cow<[u8]> =
                                                    v1066.encode(&*v1064).0;
                                                let v1070: &[u8] = v1068.as_ref();
                                                let v1072: Result<&str, std::str::Utf8Error> =
                                                    std::str::from_utf8(v1070);
                                                let v1076: &str = v1072.unwrap();
                                                let v1115: std::string::String =
                                                    String::from(v1076);
                                                let v1123: string = concat(new_array(&[
                                                    string("! "),
                                                    fable_library_rust::String_::fromString(
                                                        v1115.clone(),
                                                    ),
                                                ]));
                                                if v5 {
                                                    let v1188: () = {
                                                        Spiral::closure51(v1123.clone(), ());
                                                        ()
                                                    };
                                                    ()
                                                } else {
                                                    let v1254: () = {
                                                        Spiral::closure10(v1123, ());
                                                        ()
                                                    };
                                                    ()
                                                }
                                                {
                                                    let v1256: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v1115
                                                    );
                                                    let v1263: &str = &*v1256;
                                                    String::from(v1263)
                                                }
                                            }
                                            Spiral::US29::US29_1(v1061_1_0) => {
                                                let v1323: std::string::String = v1061_1_0.clone();
                                                let v1386: () = {
                                                    Spiral::closure50(v5, v1323.clone(), ());
                                                    ()
                                                };
                                                let v1447: string =
                                                    sprintf!("\u{001b}[4;7m{}\u{001b}[0m", v1323);
                                                let v1454: &str = &*v1447;
                                                String::from(v1454)
                                            }
                                        };
                                        let v1517: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v1041;
                                        let v1519: Result<
                                            std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            >,
                                        > = v1517.lock();
                                        let v1523: std::sync::MutexGuard<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = v1519.unwrap();
                                        let v1536: &std::sync::mpsc::Sender<std::string::String> =
                                            &v1523;
                                        let v1538: Result<
                                            (),
                                            std::sync::mpsc::SendError<std::string::String>,
                                        > = v1536.send(v1515);
                                        let v1539 = Spiral::method130();
                                        let v1543: Result<(), std::string::String> =
                                            v1538.map_err(|x| v1539(x));
                                        let v1556: _ = v1543;
                                        let v1558: bool = true;
                                        v1556
                                    }); //;
                                    let v1561: Result<(), string> =
                                        Spiral::method131(_iter_try_for_each.map_err(|x| x.into()));
                                    let v1562: string = string("}");
                                    let v1567: bool = true;
                                    let _fix_closure_v1564 = v1561;
                                    let v1574: string = append(
                                        (append(
                                            (append(
                                                (append(
                                                    string("true; _fix_closure_v1564 "),
                                                    (v1562),
                                                )),
                                                string("); "),
                                            )),
                                            string(""),
                                        )),
                                        string(" // rust.fix_closure\'"),
                                    );
                                    let v1575: bool = true;
                                    _fix_closure_v1564
                                }); // rust.fix_closure';
                                let v1577: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                let v1602: Spiral::US30 = defaultValue(
                                    Spiral::US30::US30_1,
                                    map(Spiral::method132(), v4.clone()),
                                );
                                match &v1602 {
                                    Spiral::US30::US30_0(v1602_0_0) => {
                                        let v1608: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = v519.clone();
                                        let v1610: Result<
                                            std::sync::MutexGuard<Option<std::process::ChildStdin>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                            >,
                                        > = v1608.lock();
                                        let v1626: std::sync::MutexGuard<
                                            Option<std::process::ChildStdin>,
                                        > = Spiral::method133(v1610.unwrap());
                                        let v1628: bool = true;
                                        let mut v1626 = v1626;
                                        let v1630: &mut Option<std::process::ChildStdin> =
                                            &mut v1626;
                                        let v1632: Option<std::process::ChildStdin> =
                                            Option::take(v1630);
                                        let v1634: bool = true;
                                        let _optionm_map_ = v1632.map(|x| {
                                            //;
                                            let v1636: std::process::ChildStdin = x;
                                            let v1638: std::sync::Mutex<std::process::ChildStdin> =
                                                std::sync::Mutex::new(v1636);
                                            let v1640: std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            > = std::sync::Arc::new(v1638);
                                            let v1642: bool = true;
                                            v1640
                                        });
                                        let v1644: Option<
                                            std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            >,
                                        > = _optionm_map_;
                                        let v1669: Spiral::US31 = defaultValue(
                                            Spiral::US31::US31_1,
                                            map(Spiral::method134(), v1644),
                                        );
                                        match &v1669 {
                                            Spiral::US31::US31_0(v1669_0_0) => {
                                                let v1673: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = match &v1669 {
                                                    Spiral::US31::US31_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone();
                                                (match &v1602 {
                                                    Spiral::US30::US30_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })(
                                                    v1673.clone()
                                                );
                                                {
                                                    let v1675: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = v1673;
                                                    let v1677: Result<
                                                        std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        >,
                                                        std::sync::PoisonError<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                        >,
                                                    > = v1675.lock();
                                                    let v1693: std::sync::MutexGuard<
                                                        std::process::ChildStdin,
                                                    > = Spiral::method135(v1677.unwrap());
                                                    let v1695: bool = true;
                                                    let mut v1693 = v1693;
                                                    let v1697: bool = true;
                                                    std::io::Write::flush(&mut *v1693).unwrap();
                                                    ()
                                                }
                                            }
                                            _ => (),
                                        }
                                    }
                                    _ => (),
                                }
                                {
                                    let v1699: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v389;
                                    let v1701: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v1699.lock();
                                    let v1717: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method121(v1701.unwrap());
                                    let v1719: bool = true;
                                    let mut v1717 = v1717;
                                    let v1721: &mut Option<std::process::Child> = &mut v1717;
                                    let v1723: Option<std::process::Child> = Option::take(v1721);
                                    let v1725: std::process::Child = v1723.unwrap();
                                    let v1727: Result<std::process::Output, std::io::Error> =
                                        v1725.wait_with_output();
                                    let v1728 = Spiral::method73();
                                    let v1741: Result<std::process::Output, std::string::String> =
                                        v1727.map_err(|x| v1728(x));
                                    let v1751: string = string("vec![v1027, v1577]");
                                    let v1752: Vec<std::thread::JoinHandle<Result<(), string>>> =
                                        vec![v1027, v1577];
                                    let v1754: bool = true;
                                    v1752.into_iter().for_each(|x| {
                                        //;
                                        let v1756: std::thread::JoinHandle<Result<(), string>> = x;
                                        let v1758: Result<
                                            Result<(), string>,
                                            Box<dyn core::any::Any + 'static + Send>,
                                        > = std::thread::JoinHandle::join(v1756);
                                        let v1762: Result<(), string> = v1758.unwrap();
                                        v1762.unwrap();
                                        {
                                            let v1779: bool = true;
                                            let v1781: bool = true;
                                        }
                                    });
                                    {
                                        //;
                                        let v1782 = Spiral::method136();
                                        let v1783 = Spiral::method137();
                                        let v1785: Spiral::US32 = match &v1741 {
                                            Err(v1741_1_0) => v1783(v1741_1_0.clone()),
                                            Ok(v1741_0_0) => v1782(v1741_0_0.clone()),
                                        };
                                        match &v1785 {
                                            Spiral::US32::US32_0(v1785_0_0) => {
                                                let v1790: std::process::ExitStatus =
                                                    v1785_0_0.clone().status;
                                                let v1792: Option<i32> = v1790.code();
                                                let v1817: Spiral::US33 = defaultValue(
                                                    Spiral::US33::US33_1,
                                                    map(Spiral::method139(), v1792),
                                                );
                                                match &v1817 {
                                                    Spiral::US33::US33_0(v1817_0_0) => (
                                                        match &v1817 {
                                                            Spiral::US33::US33_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        },
                                                        Spiral::US7::US7_1,
                                                        Spiral::US28::US28_0(v540.clone()),
                                                    ),
                                                    _ => {
                                                        let v1831: &str = &*string(
                                                            "runtime.execute_with_options / exit_code=None",
                                                        );
                                                        (
                                                            -1_i32,
                                                            Spiral::US7::US7_0(String::from(v1831)),
                                                            Spiral::US28::US28_0(v540.clone()),
                                                        )
                                                    }
                                                }
                                            }
                                            Spiral::US32::US32_1(v1785_1_0) => {
                                                let v1899: std::string::String = v1785_1_0.clone();
                                                let v1966: () = {
                                                    Spiral::closure57(
                                                        v0_1.clone(),
                                                        v1_1.clone(),
                                                        v2.clone(),
                                                        v3.clone(),
                                                        v4.clone(),
                                                        v5,
                                                        v6.clone(),
                                                        v29.clone(),
                                                        v120.clone(),
                                                        v1899.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                (
                                                    -2_i32,
                                                    Spiral::US7::US7_0(v1899),
                                                    Spiral::US28::US28_1,
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                            Spiral::US27::US27_1(v388_1_0) => {
                                let v2039: std::string::String = v388_1_0.clone();
                                let v2106: () = {
                                    Spiral::closure44(
                                        v0_1.clone(),
                                        v1_1.clone(),
                                        v2.clone(),
                                        v3.clone(),
                                        v4.clone(),
                                        v5,
                                        v6.clone(),
                                        v29.clone(),
                                        v120.clone(),
                                        v2039.clone(),
                                        (),
                                    );
                                    ()
                                };
                                (-1_i32, Spiral::US7::US7_0(v2039), Spiral::US28::US28_1)
                            }
                        };
                        let v2178: Spiral::US28 = patternInput_3.2.clone();
                        let v2177: Spiral::US7 = patternInput_3.1.clone();
                        let v2176: i32 = patternInput_3.0.clone();
                        let v2189: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v2178 {
                            Spiral::US28::US28_0(v2178_0_0) => Some(
                                match &v2178 {
                                    Spiral::US28::US28_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v2191: bool = true;
                        let _optionm_map_ = v2189.map(|x| {
                            //;
                            let v2193: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v2195: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v2193;
                            let v2197: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v2195.lock();
                            let v2201: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v2197.unwrap();
                            let v2214 = v2201.iter();
                            let v2216: Vec<std::string::String> = v2214.collect::<Vec<_>>();
                            let v2218: bool = true;
                            let _vec_map: Vec<_> = v2216
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v2220: std::string::String = x;
                                    let v2222: string =
                                        fable_library_rust::String_::fromString(v2220);
                                    let v2224: bool = true;
                                    v2222
                                })
                                .collect::<Vec<_>>();
                            let v2226: Vec<string> = _vec_map;
                            let v2230: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(
                                fable_library_rust::NativeArray_::array_from(v2226.clone()),
                            );
                            let v2238: string = join(Spiral::method69(), toArray_1(v2230));
                            let v2243: bool = true;
                            v2238
                        });
                        let v2245: Option<string> = _optionm_map_;
                        let v2252: Spiral::US5 = match &v2177 {
                            Spiral::US7::US7_0(v2177_0_0) => {
                                Spiral::US5::US5_0(fable_library_rust::String_::fromString(
                                    match &v2177 {
                                        Spiral::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ))
                            }
                            _ => Spiral::US5::US5_1,
                        };
                        let v2258: string = defaultValue(
                            match &v2252 {
                                Spiral::US5::US5_0(v2252_0_0) => match &v2252 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => string(""),
                            },
                            v2245,
                        );
                        let v2324: () = {
                            Spiral::closure59(v2176, v2258.clone(), ());
                            ()
                        };
                        LrcPtr::new((v2176, v2258))
                    }
                }))();
                _capture_v253.set(Some(x_5))
            }
            {
                let v2390: LrcPtr<(i32, string)> = match &_capture_v253.get().clone() {
                    None => panic!("{}", string("base.capture / _capture_v253=None"),),
                    Some(_capture_v253_0_0) => _capture_v253_0_0.clone(),
                };
                let _run_target_args__v15: (i32, string) = (v2390.0.clone(), v2390.1.clone());
                (
                    _run_target_args__v15.0.clone(),
                    _run_target_args__v15.1.clone(),
                )
            }
        }
        pub fn method157(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v12: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v26: () = {
                Spiral::closure7(v12.clone(), string("{ "), ());
                ()
            };
            let v45: () = {
                Spiral::closure7(v12.clone(), string("exit_code"), ());
                ()
            };
            let v64: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v12.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v103: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v122: () = {
                Spiral::closure7(v12.clone(), string("run_result"), ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v156: () = {
                Spiral::closure7(v12.clone(), v9, ());
                ()
            };
            let v173: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v192: () = {
                Spiral::closure7(v12.clone(), string("new_code_path"), ());
                ()
            };
            let v209: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v226: () = {
                Spiral::closure7(v12.clone(), v10, ());
                ()
            };
            let v245: () = {
                Spiral::closure7(v12.clone(), string(" }"), ());
                ()
            };
            let v251: string = v12.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / check error"),
                    )),
                    string(" / "),
                )),
                (v251),
            ))
        }
        pub fn closure68(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v21: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v47: Option<i64> = patternInput.5.clone();
                let v46: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v45: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v44: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v43: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v42: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method157(
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    Spiral::method8(v42, v43, v44, v45, v46, v47),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method158(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("exit_code"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v85: () = {
                Spiral::closure7(v13.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v227: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v244: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v297: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v322: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / error"),
                    )),
                    string(" / "),
                )),
                (v322),
            ))
        }
        pub fn closure69(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method158(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method159(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v12: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v26: () = {
                Spiral::closure7(v12.clone(), string("{ "), ());
                ()
            };
            let v45: () = {
                Spiral::closure7(v12.clone(), string("exit_code"), ());
                ()
            };
            let v64: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v12.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v103: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v122: () = {
                Spiral::closure7(v12.clone(), string("run_result"), ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v156: () = {
                Spiral::closure7(v12.clone(), v9, ());
                ()
            };
            let v173: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v192: () = {
                Spiral::closure7(v12.clone(), string("new_code_path"), ());
                ()
            };
            let v209: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v226: () = {
                Spiral::closure7(v12.clone(), v10, ());
                ()
            };
            let v245: () = {
                Spiral::closure7(v12.clone(), string(" }"), ());
                ()
            };
            let v251: string = v12.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / esbuild error"),
                    )),
                    string(" / "),
                )),
                (v251),
            ))
        }
        pub fn closure70(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v21: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v47: Option<i64> = patternInput.5.clone();
                let v46: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v45: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v44: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v43: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v42: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method159(
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    Spiral::method8(v42, v43, v44, v45, v46, v47),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method160(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v12: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v26: () = {
                Spiral::closure7(v12.clone(), string("{ "), ());
                ()
            };
            let v45: () = {
                Spiral::closure7(v12.clone(), string("exit_code"), ());
                ()
            };
            let v64: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v12.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v103: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v122: () = {
                Spiral::closure7(v12.clone(), string("run_result"), ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v156: () = {
                Spiral::closure7(v12.clone(), v9, ());
                ()
            };
            let v173: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v192: () = {
                Spiral::closure7(v12.clone(), string("new_code_path"), ());
                ()
            };
            let v209: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v226: () = {
                Spiral::closure7(v12.clone(), v10, ());
                ()
            };
            let v245: () = {
                Spiral::closure7(v12.clone(), string(" }"), ());
                ()
            };
            let v251: string = v12.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / trunk error"),
                    )),
                    string(" / "),
                )),
                (v251),
            ))
        }
        pub fn closure71(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v21: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v47: Option<i64> = patternInput.5.clone();
                let v46: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v45: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v44: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v43: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v42: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method160(
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    Spiral::method8(v42, v43, v44, v45, v46, v47),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure72(unitVar: (), v0_1: string) -> Spiral::US5 {
            Spiral::US5::US5_0(v0_1)
        }
        pub fn closure73(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method69(), toArray_1(v13))
        }
        pub fn method161(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: std::string::String,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("ex"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v77: std::string::String = format!("{:#?}", v8);
            let v121: () = {
                Spiral::closure7(
                    v13.clone(),
                    fable_library_rust::String_::fromString(v77),
                    (),
                );
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v13.clone(), string("run_result\'"), ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v188: std::string::String = format!("{:#?}", v9);
            let v232: () = {
                Spiral::closure7(
                    v13.clone(),
                    fable_library_rust::String_::fromString(v188),
                    (),
                );
                ()
            };
            let v249: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v268: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v285: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v302: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v319: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v338: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v355: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v372: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v391: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v397: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_gleam / Exception"),
                    )),
                    string(" / "),
                )),
                (v397),
            ))
        }
        pub fn closure75(
            v0_1: string,
            v1_1: string,
            v2: std::string::String,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method161(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v3,
                    v2,
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn closure74(
            v0_1: string,
            v1_1: string,
            v2: std::string::String,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v66: () = {
                Spiral::closure75(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method162(
            v0_1: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>>,
        ) -> Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>> {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>>,
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>> =
                Spiral::method162(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method163() -> string {
            string("py-path")
        }
        pub fn method164() -> string {
            string("env")
        }
        pub fn method165(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral::US38,
            v9: i32,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("env"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v86: () = {
                Spiral::closure7(v13.clone(), sprintf!("{:?}", v8), ());
                ()
            };
            let v105: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v13.clone(), string("exit_code"), ());
                ()
            };
            let v141: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v161: () = {
                Spiral::closure7(v13.clone(), sprintf!("{}", v9), ());
                ()
            };
            let v178: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v197: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v214: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v231: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v248: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v267: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v284: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v301: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v320: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v326: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_cuda / env install error"),
                    )),
                    string(" / "),
                )),
                (v326),
            ))
        }
        pub fn closure77(v0_1: Spiral::US38, v1_1: string, v2: string, v3: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method165(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v0_1,
                    v3,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure78(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method69(), toArray_1(v13))
        }
        pub fn method166(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("ex"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v77: std::string::String = format!("{:#?}", v8);
            let v121: () = {
                Spiral::closure7(
                    v13.clone(),
                    fable_library_rust::String_::fromString(v77),
                    (),
                );
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v229: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v246: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v299: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v333: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v352: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v358: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_cuda / Exception"),
                    )),
                    string(" / "),
                )),
                (v358),
            ))
        }
        pub fn closure80(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method166(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v3,
                    v1_1,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure79(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v66: () = {
                Spiral::closure80(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method167(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("exit_code"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v85: () = {
                Spiral::closure7(v13.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v227: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v244: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v297: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v322: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_cuda / error"),
                    )),
                    string(" / "),
                )),
                (v322),
            ))
        }
        pub fn closure81(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method167(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method168() -> string {
            string("fs-path")
        }
        pub fn method169() -> string {
            string("command")
        }
        pub fn method170() -> string {
            string("path")
        }
        pub fn method172(v0_1: string) -> string {
            Spiral::method63(Spiral::method33(Spiral::method31(), v0_1))
        }
        pub fn closure82(unitVar: (), v0_1: std::string::String) -> string {
            Spiral::method172(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method171() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Spiral::closure82((), v))
        }
        pub fn method173() -> string {
            string("retries")
        }
        pub fn method174() -> string {
            string("working-directory")
        }
        pub fn method176(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v12: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v26: () = {
                Spiral::closure7(v12.clone(), string("{ "), ());
                ()
            };
            let v45: () = {
                Spiral::closure7(v12.clone(), string("exit_code"), ());
                ()
            };
            let v64: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v12.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v103: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v122: () = {
                Spiral::closure7(v12.clone(), string("repl_result"), ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v156: () = {
                Spiral::closure7(v12.clone(), v9, ());
                ()
            };
            let v173: () = {
                Spiral::closure7(v12.clone(), string("; "), ());
                ()
            };
            let v192: () = {
                Spiral::closure7(v12.clone(), string("retry"), ());
                ()
            };
            let v209: () = {
                Spiral::closure7(v12.clone(), string(" = "), ());
                ()
            };
            let v226: () = {
                Spiral::closure7(v12.clone(), v10, ());
                ()
            };
            let v245: () = {
                Spiral::closure7(v12.clone(), string(" }"), ());
                ()
            };
            let v251: string = v12.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / repl error"),
                    )),
                    string(" / "),
                )),
                (v251),
            ))
        }
        pub fn closure83(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method176(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method12(),
                    v3,
                    v2,
                    sprintf!("{}/{}", v1_1, v0_1),
                ))
            };
        }
        pub fn method175(v0_1: Spiral::US5, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral::US5> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method175: loop {
                break '_method175 ({
                    let patternInput: (i32, string) = Spiral::method91(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral::US5::US5_0(v0_1_0_0) => Some(
                                match &v0_1.get().clone() {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => None::<string>,
                        },
                    );
                    let v40: string = patternInput.1.clone();
                    let v39: i32 = patternInput.0.clone();
                    if if (v39) == 0_i32 {
                        true
                    } else {
                        (v3.get().clone()) >= (v1_1.get().clone())
                    } {
                        (v39, v40.clone())
                    } else {
                        let v107: () = {
                            Spiral::closure83(v1_1.get().clone(), v3.get().clone(), v40, v39, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral::US5 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = (v3.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method175;
                        }
                    }
                });
            }
        }
        pub fn method177(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("jupyter_result_length"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v158: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v9), ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v183: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / dib / jupyter nbconvert"),
                    )),
                    string(" / "),
                )),
                (v183),
            ))
        }
        pub fn closure84(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method177(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method178(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("pwsh_replace_html_result_length"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v158: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v9), ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v183: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / dib / html cell ids"),
                    )),
                    string(" / "),
                )),
                (v183),
            ))
        }
        pub fn closure85(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method178(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method179(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("result_length"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v158: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v9), ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v183: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / dib"),
                    )),
                    string(" / "),
                )),
                (v183),
            ))
        }
        pub fn closure86(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method179(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method180() -> string {
            string("cleanup")
        }
        pub fn method181() -> string {
            string("wasm")
        }
        pub fn method182() -> string {
            string("contract")
        }
        pub fn method183(v0_1: Spiral::US5, v1_1: string, v2: Spiral::US42, v3: string) -> string {
            let v6: string = Spiral::method33(Spiral::method33(v3, string("target/spiral")), v1_1);
            if let Spiral::US5::US5_0(v0_1_0_0) = &v0_1 {
                if let Spiral::US42::US42_0(v2_0_0) = &v2 {
                    let v8: Spiral::US41 = v2_0_0.clone();
                    let v10: string = Spiral::method33(v6.clone(), string("packages"));
                    let v15: Spiral::US5 = if if let Spiral::US41::US41_0 = &v8 {
                        true
                    } else {
                        false
                    } {
                        Spiral::US5::US5_0(string("Rust"))
                    } else {
                        Spiral::US5::US5_1
                    };
                    let v38: Spiral::US5 = match &v15 {
                        Spiral::US5::US5_0(v15_0_0) => Spiral::US5::US5_0(
                            match &v15 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => {
                            let v22: Spiral::US5 = if if let Spiral::US41::US41_1 = &v8 {
                                true
                            } else {
                                false
                            } {
                                Spiral::US5::US5_0(string("TypeScript"))
                            } else {
                                Spiral::US5::US5_1
                            };
                            match &v22 {
                                Spiral::US5::US5_0(v22_0_0) => Spiral::US5::US5_0(
                                    match &v22 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => {
                                    let v29: Spiral::US5 = if if let Spiral::US41::US41_2 = &v8 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral::US5::US5_0(string("Python"))
                                    } else {
                                        Spiral::US5::US5_1
                                    };
                                    match &v29 {
                                        Spiral::US5::US5_0(v29_0_0) => Spiral::US5::US5_0(
                                            match &v29 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    }
                                }
                            }
                        }
                    };
                    Spiral::method33(
                        Spiral::method33(
                            v10,
                            match &v38 {
                                Spiral::US5::US5_0(v38_0_0) => match &v38 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                        ),
                        v0_1_0_0.clone(),
                    )
                } else {
                    v6.clone()
                }
            } else {
                v6
            }
        }
        pub fn method185(
            v0_1: string,
            v1_1: LrcPtr<Spiral::UH2>,
            v2: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            match v1_1.as_ref() {
                Spiral::UH2::UH2_0 => v2.clone(),
                Spiral::UH2::UH2_1(v1_1_1_0, v1_1_1_1) => {
                    let v5: LrcPtr<Spiral::UH2> = Spiral::method185(
                        v0_1.clone(),
                        match v1_1.as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v2.clone(),
                    );
                    LrcPtr::new(Spiral::UH2::UH2_1(
                        concat(new_array(&[
                            string("<Compile Include=\""),
                            Spiral::method33(
                                v0_1.clone(),
                                match v1_1.as_ref() {
                                    Spiral::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            string("\" />"),
                        ])),
                        v5,
                    ))
                }
            }
        }
        pub fn method186(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral::UH2::UH2_1(
                        sprintf!(
                            "<PackageReference Include=\"{}\" Version=\"{}\" />",
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                        ),
                        Spiral::method186(
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method184(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<Spiral::UH2>,
            v3: LrcPtr<Spiral::UH4>,
            v4: string,
            v5: string,
        ) -> string {
            let v6: LrcPtr<dyn IDisposable> = Spiral::method72(v4.clone());
            let v9: string = Spiral::method42(Spiral::method33(
                v4.clone(),
                concat(new_array(&[v1_1.clone(), string(".fs")])),
            ));
            Spiral::method70(v9.clone(), v0_1);
            {
                let v13: List<string> = Spiral::method114(
                    Spiral::method185(v5, v2, LrcPtr::new(Spiral::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v32: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v13 = v13.clone();
                        move || ofList(v13.clone()).clone()
                    }))),
                );
                let v38: List<string> = Spiral::method114(
                    Spiral::method186(v3, LrcPtr::new(Spiral::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v55: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v38 = v38.clone();
                        move || ofList(v38.clone()).clone()
                    }))),
                );
                let v60: string = Spiral::method42(Spiral::method33(
                    v4,
                    concat(new_array(&[v1_1, string(".fsproj")])),
                ));
                Spiral::method70(
                    v60.clone(),
                    append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        string(
                                                                            "<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n    <ServerGarbageCollection>true</ServerGarbageCollection>\n    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n",
                                                                        ),
                                                                        (concat(new_array(&[
                                                                            string("    "),
                                                                            v32,
                                                                        ]))),
                                                                    )),
                                                                    string("\n"),
                                                                )),
                                                                (concat(new_array(&[
                                                                    string(
                                                                        "    <Compile Include=\"",
                                                                    ),
                                                                    v9,
                                                                    string("\" />"),
                                                                ]))),
                                                            )),
                                                            string("\n"),
                                                        )),
                                                        string("</ItemGroup>"),
                                                    )),
                                                    string("\n"),
                                                )),
                                                string("<ItemGroup>"),
                                            )),
                                            string("\n"),
                                        )),
                                        (concat(new_array(&[string("    "), v55]))),
                                    )),
                                    string("\n"),
                                )),
                                string("</ItemGroup>"),
                            )),
                            string("\n"),
                        )),
                        string("</Project>"),
                    ),
                );
                v60
            }
        }
        pub fn closure87(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Spiral::US43 {
            Spiral::US43::US43_0(v0_1)
        }
        pub fn method188() -> Func1<chrono::DateTime<chrono::Utc>, Spiral::US43> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Spiral::closure87((), v))
        }
        pub fn method189() -> string {
            string("hh:mm")
        }
        pub fn method190() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method191() -> string {
            string("hhmm")
        }
        pub fn method187(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v610: DateTime = {
                let _arg: DateTime = DateTime::unixEpoch();
                _arg.toUniversalTime()
            };
            let v620: DateTime = {
                let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                _arg_1.toUniversalTime()
            };
            let v718: i64 = ((v620.ticks()) - (v610.ticks())) / 10_i64;
            let v720: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v718);
            let v745: Spiral::US43 =
                defaultValue(Spiral::US43::US43_1, map(Spiral::method188(), v720));
            let v765: Spiral::US5 = match &v745 {
                Spiral::US43::US43_0(v745_0_0) => {
                    let v751: chrono::NaiveDateTime = match &v745 {
                        Spiral::US43::US43_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v753: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v751);
                    let v755: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v756: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v758: std::string::String = v753.format(v756).to_string();
                    let v760: string = fable_library_rust::String_::fromString(v758);
                    Spiral::US5::US5_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v760.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v760.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v760, 22_i32)
                    ))
                }
                _ => Spiral::US5::US5_1,
            };
            let v769: string = match &v765 {
                Spiral::US5::US5_0(v765_0_0) => match &v765 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            };
            let v776: LrcPtr<TimeZoneInfo> = std::sync::Arc::new(
                chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64,
            );
            let v817: i64 = v620.ticks();
            let v852: string = string(
                "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))",
            );
            let v996: TimeSpan = TimeSpan::new_ticks(chrono::FixedOffset::local_minus_utc(
                &chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(
                    &chrono::DateTime::from_timestamp_nanos(v817),
                )),
            ) as i64);
            let v1011: u8 = if (v996.hours()) > 0_i32 { 1_u8 } else { 0_u8 };
            let v1012: string = Spiral::method189();
            let v1199: string = v996.toString(v1012);
            let v1260: string = sprintf!(
                "{}{}{}",
                v1011,
                getSlice(v1199.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v1199, Some(3_i32), Some(4_i32))
            );
            let v1263: string = toString(v0_1);
            parse(concat(new_array(&[
                v769.clone(),
                v1260.clone(),
                getSlice(
                    v1263.clone(),
                    Some((length(v769)) + (length(v1260))),
                    Some((length(v1263)) - 1_i32),
                ),
            ])))
        }
        pub fn method192(v0_1: string, v1_1: string) {
            if (Spiral::method36(v0_1.clone())) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral::method72(v0_1.clone());
                ()
            }
            {
                let v9: string = defaultValue(string(""), Spiral::method38(v1_1.clone()));
                if (Spiral::method36(v9.clone())) == false {
                    let v14: LrcPtr<dyn IDisposable> = Spiral::method72(v9);
                    ()
                }
                if if Spiral::method36(v1_1.clone()) {
                    let v16: Result<std::path::PathBuf, std::io::Error> =
                        Spiral::method43(v1_1.clone());
                    v16.is_err()
                } else {
                    false
                } {
                    Spiral::method81(true, v1_1.clone());
                }
                if (Spiral::method36(v1_1.clone())) == false {
                    let v32: bool = true;
                    #[cfg(windows)]
                    std::os::windows::fs::symlink_dir(&*v0_1.clone(), &*v1_1.clone()).unwrap();
                    let v34: bool = true;
                    #[cfg(unix)]
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1).unwrap();
                    ()
                }
            }
        }
        pub fn method194() -> string {
            string("(")
        }
        pub fn method195() -> string {
            string(" ")
        }
        pub fn method198(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: string,
            v10: i32,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("is_error"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v85: () = {
                Spiral::closure7(
                    v13.clone(),
                    if v8 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v104: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v13.clone(), string("retry"), ());
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), string("result"), ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v230: () = {
                Spiral::closure7(v13.clone(), sprintf!("{}", v10), ());
                ()
            };
            let v249: () = {
                Spiral::closure7(v13.clone(), string(", "), ());
                ()
            };
            let v266: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v285: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v291: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("common.retry_fn\' / loop"),
                    )),
                    string(" / "),
                )),
                (v291),
            ))
        }
        pub fn closure88(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v23: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v49: Option<i64> = patternInput.5.clone();
                let v48: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v47: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v46: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v45: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v44: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method198(
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    v49.clone(),
                    Spiral::method8(v44, v45, v46, v47, v48, v49),
                    Spiral::method12(),
                    v4,
                    sprintf!("{}/{}", v1_1, v0_1),
                    v2,
                    v3,
                ))
            };
        }
        pub fn method197(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method197: loop {
                break '_method197 ({
                    let patternInput: (i32, string) = Spiral::method91(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral::US44 = if (v9) == 0_i32 {
                        Spiral::US44::US44_0(v9, v10.clone())
                    } else {
                        Spiral::US44::US44_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral::US44::US44_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral::US44::US44_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if (v22) == false {
                        true
                    } else {
                        (v8.get().clone()) >= (v0_1.get().clone())
                    } {
                        (v23, v24.clone())
                    } else {
                        let v91: () = {
                            Spiral::closure88(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = (v8.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method197;
                        }
                    }
                });
            }
        }
        pub fn method196(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral::method197(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method193(
            v0_1: Spiral::US39,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral::US13,
        ) -> (i32, string) {
            let v268: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                concat(new_array(&[
                    string(" --define "),
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ])),
                match &v0_1 {
                    Spiral::US39::US39_0(v0_1_0_0) => {
                        let v54: Spiral::US40 = match &v0_1 {
                            Spiral::US39::US39_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v155: Spiral::US5 = if if let Spiral::US40::US40_0(v54_0_0) = &v54 {
                            string("") == (v54_0_0.clone())
                        } else {
                            false
                        } {
                            Spiral::US5::US5_0(string("Wasm"))
                        } else {
                            let v71: string = Spiral::method194();
                            let v84: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                                l0: MutCell::new(Spiral::method13()),
                            });
                            let v103: () = {
                                Spiral::closure7(
                                    v84.clone(),
                                    sprintf!("{:?}", Spiral::US40::US40_0(string(""))),
                                    (),
                                );
                                ()
                            };
                            let v116: Array<string> =
                                split(v84.l0.get().clone(), v71, -1_i32, 0_i32);
                            let v120: string = v116[0_i32].clone();
                            let v124: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                                l0: MutCell::new(Spiral::method13()),
                            });
                            let v140: () = {
                                Spiral::closure7(v124.clone(), sprintf!("{:?}", v54.clone()), ());
                                ()
                            };
                            if startsWith3(v124.l0.get().clone(), v120, false) {
                                Spiral::US5::US5_0(string("Wasm"))
                            } else {
                                Spiral::US5::US5_1
                            }
                        };
                        let v257: Spiral::US5 = match &v155 {
                            Spiral::US5::US5_0(v155_0_0) => Spiral::US5::US5_0(
                                match &v155 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v250: Spiral::US5 = if if let Spiral::US40::US40_1(v54_1_0) =
                                    &v54
                                {
                                    string("") == (v54_1_0.clone())
                                } else {
                                    false
                                } {
                                    Spiral::US5::US5_0(string("Contract"))
                                } else {
                                    let v166: string = Spiral::method194();
                                    let v179: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                                        l0: MutCell::new(Spiral::method13()),
                                    });
                                    let v198: () = {
                                        Spiral::closure7(
                                            v179.clone(),
                                            sprintf!("{:?}", Spiral::US40::US40_1(string(""))),
                                            (),
                                        );
                                        ()
                                    };
                                    let v211: Array<string> =
                                        split(v179.l0.get().clone(), v166, -1_i32, 0_i32);
                                    let v215: string = v211[0_i32].clone();
                                    let v219: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                                        l0: MutCell::new(Spiral::method13()),
                                    });
                                    let v235: () = {
                                        Spiral::closure7(
                                            v219.clone(),
                                            sprintf!("{:?}", v54.clone()),
                                            (),
                                        );
                                        ()
                                    };
                                    if startsWith3(v219.l0.get().clone(), v215, false) {
                                        Spiral::US5::US5_0(string("Contract"))
                                    } else {
                                        Spiral::US5::US5_1
                                    }
                                };
                                match &v250 {
                                    Spiral::US5::US5_0(v250_0_0) => Spiral::US5::US5_0(
                                        match &v250 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::US5::US5_1,
                                }
                            }
                        };
                        concat(new_array(&[
                            string(" --define "),
                            toUpper(match &v257 {
                                Spiral::US5::US5_0(v257_0_0) => match &v257 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                        ]))
                    }
                    _ => string(""),
                }
            );
            let v280: Result<string, string> = match &v4 {
                Spiral::US13::US13_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral::US13::US13_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral::method196(
                3_u8,
                v268,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v280.ok(),
            )
        }
        pub fn method199(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("dotnet_fable_result"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v155: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v180: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / dotnet fable error"),
                    )),
                    string(" / "),
                )),
                (v180),
            ))
        }
        pub fn closure89(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method199(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method76(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure90(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method200() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral::closure90((), v))
        }
        pub fn method201(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method202() -> string {
            string("(")
        }
        pub fn method203() -> string {
            string("(")
        }
        pub fn method205(
            v0_1: string,
            v1_1: regex::Regex,
        ) -> Vec<std::collections::HashMap<string, string>> {
            let v8: &str = &*v0_1;
            let v41: std::string::String = String::from(v8);
            let v69: bool = true;
            let _capture_move = (move || {
                //;
                let v71: Box<std::string::String> = Box::new(v41);
                let v73: &'static mut std::string::String = Box::leak(v71);
                let v75: regex::Regex = v1_1.clone();
                let v77: regex::CaptureMatches = v75.captures_iter(v73);
                let v79: bool = true;
                let _regex_captures: Vec<_> = v77
                    .map(|x| {
                        //;
                        let v81: regex::Captures<'static> = x;
                        let v83: Box<regex::Captures<'static>> = Box::new(v81);
                        let v85: &'static mut regex::Captures<'static> = Box::leak(v83);
                        let v87: regex::CaptureNames = v1_1.capture_names();
                        let v89: bool = true;
                        let _regex_captures: std::collections::HashMap<_, _> = v87
                            .map(|x| {
                                //;
                                let v91: string = x.unwrap_or("").to_string().into();
                                let v93: string = v91.clone().clone();
                                let v95: string = v85
                                    .name(&v91)
                                    .map(|x| x.as_str())
                                    .unwrap_or("")
                                    .to_string()
                                    .into();
                                let v101: bool = true;
                                LrcPtr::new((v93, v95))
                            })
                            .map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone()))
                            .collect();
                        let v103: std::collections::HashMap<string, string> = _regex_captures;
                        let v105: bool = true;
                        v103
                    })
                    .collect::<Vec<_>>();
                let v107: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                let v109: bool = true;
                v107
            })();
            _capture_move
        }
        pub fn closure91(
            unitVar: (),
            v0_1: std::collections::HashMap<string, string>,
        ) -> Spiral::US45 {
            Spiral::US45::US45_0(v0_1)
        }
        pub fn method206() -> Func1<std::collections::HashMap<string, string>, Spiral::US45> {
            Func1::new(move |v: std::collections::HashMap<string, string>| Spiral::closure91((), v))
        }
        pub fn method207() -> string {
            string("a")
        }
        pub fn closure92(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method198(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method12(),
                    v3,
                    sprintf!("{}/{}", v0_1, 3_u8),
                    v1_1,
                    v2,
                ))
            };
        }
        pub fn method204(v0_1: Spiral::US13, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral::US13> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method204: loop {
                break '_method204 ({
                    let v20: string = concat(new_array(&[
                        string("cargo fmt --manifest-path \""),
                        v1_1.get().clone(),
                        string("\" --"),
                    ]));
                    let v32: Result<string, string> = match &v0_1.get().clone() {
                        Spiral::US13::US13_0(v0_1_0_0) => Ok::<string, string>(v0_1_0_0.clone()),
                        Spiral::US13::US13_1(v0_1_1_0) => Err::<string, string>(v0_1_1_0.clone()),
                    };
                    let patternInput: (i32, string) = Spiral::method91(
                        v20,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v32.ok(),
                    );
                    let v50: string = patternInput.1.clone();
                    let v49: i32 = patternInput.0.clone();
                    let v274: Spiral::US44 = if (contains(
                        v50.clone(),
                        string("failed to load manifest for workspace member"),
                    )) == false
                    {
                        if (v49) == 0_i32 {
                            Spiral::US44::US44_0(v49, v50.clone())
                        } else {
                            Spiral::US44::US44_1(v49, v50.clone())
                        }
                    } else {
                        let v64: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v80: Vec<std::collections::HashMap<string, string>> =
                            Spiral::method205(v50.clone(), v64.unwrap());
                        let v83: Option<std::collections::HashMap<string, string>> = tryItem(
                            0_i32,
                            fable_library_rust::NativeArray_::array_from(v80.clone()),
                        );
                        let v108: Spiral::US45 =
                            defaultValue(Spiral::US45::US45_1, map(Spiral::method206(), v83));
                        let v147: Spiral::US46 = match &v108 {
                            Spiral::US45::US45_0(v108_0_0) => {
                                let v113: string = Spiral::method207();
                                let v115: Option<string> = std::collections::HashMap::get(
                                    &match &v108 {
                                        Spiral::US45::US45_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    &v113,
                                )
                                .map(|x| x)
                                .cloned();
                                Spiral::US46::US46_0(defaultValue(
                                    Spiral::US5::US5_1,
                                    map(Spiral::method6(), v115),
                                ))
                            }
                            _ => Spiral::US46::US46_1,
                        };
                        let v154: Spiral::US5 = if let Spiral::US46::US46_0(v147_0_0) = &v147 {
                            let v148: Spiral::US5 = v147_0_0.clone();
                            if let Spiral::US5::US5_0(v148_0_0) = &v148 {
                                Spiral::US5::US5_0(v148_0_0.clone())
                            } else {
                                Spiral::US5::US5_1
                            }
                        } else {
                            Spiral::US5::US5_1
                        };
                        match &v154 {
                            Spiral::US5::US5_0(v154_0_0) => {
                                let v156: string = match &v154 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                if (Spiral::method35(v156.clone())) == false {
                                    let v166: LrcPtr<dyn IDisposable> = Spiral::method72(
                                        defaultValue(string(""), Spiral::method38(v156.clone())),
                                    );
                                    let v174: DateTime = DateTime::now();
                                    let v197: string =
                                        toString(Spiral::method187(new_guid(), v174));
                                    let v263: string =
                                                     append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                            (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                v197.clone(),
                                                                                                                                                                                string("\"")]))))),
                                                                                                                                                    string("\n"))),
                                                                                                                                            string("version = \"0.0.1\""))),
                                                                                                                                    string("\n"))),
                                                                                                                            string("edition = \"2021\""))),
                                                                                                                    string("\n"))),
                                                                                                            string(""))),
                                                                                                    string("\n"))),
                                                                                            string("[[bin]]"))),
                                                                                    string("\n"))),
                                                                            (concat(new_array(&[string("name = \"spiral_"),
                                                                                                v197,
                                                                                                string("\"")]))))),
                                                                    string("\n"))),
                                                            string("path = \"spiral.rs\""));
                                    std::fs::write(&*v156, &*v263).unwrap();
                                    ()
                                }
                                if (v49) == 0_i32 {
                                    Spiral::US44::US44_0(v49, v50.clone())
                                } else {
                                    Spiral::US44::US44_1(v49, v50.clone())
                                }
                            }
                            _ => Spiral::US44::US44_1(v49, v50.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v274 {
                        Spiral::US44::US44_0(v274_0_0, v274_0_1) => {
                            (false, v274_0_0.clone(), v274_0_1.clone())
                        }
                        Spiral::US44::US44_1(v274_1_0, v274_1_1) => {
                            (true, v274_1_0.clone(), v274_1_1.clone())
                        }
                    };
                    let v284: string = patternInput_1.2.clone();
                    let v283: i32 = patternInput_1.1.clone();
                    let v282: bool = patternInput_1.0.clone();
                    if if (v282) == false {
                        true
                    } else {
                        (v2.get().clone()) >= 3_u8
                    } {
                        (v283, v284.clone())
                    } else {
                        let v351: () = {
                            Spiral::closure92(v2.get().clone(), v283, v284, v282, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral::US13 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = (v2.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method204;
                        }
                    }
                });
            }
        }
        pub fn method208(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("cargo_fmt_result"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v155: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v180: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / cargo fmt error"),
                    )),
                    string(" / "),
                )),
                (v180),
            ))
        }
        pub fn closure93(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method208(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method76(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method209() -> string {
            string("{")
        }
        pub fn closure94(unitVar: (), v0_1: string) -> string {
            v0_1
        }
        pub fn closure95(v0_1: string, v1_1: string, v2: string) -> string {
            replace(v2, v0_1, v1_1)
        }
        pub fn closure96(v0_1: string, v1_1: string) -> string {
            replace(v1_1, v0_1, string("type DateTime = ();"))
        }
        pub fn method210(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v14: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v28: () = {
                Spiral::closure7(v14.clone(), string("{ "), ());
                ()
            };
            let v47: () = {
                Spiral::closure7(v14.clone(), string("exit_code"), ());
                ()
            };
            let v66: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v86: () = {
                Spiral::closure7(v14.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v105: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v14.clone(), string("new_code_path"), ());
                ()
            };
            let v141: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v158: () = {
                Spiral::closure7(v14.clone(), v9, ());
                ()
            };
            let v175: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v194: () = {
                Spiral::closure7(v14.clone(), string("external_command"), ());
                ()
            };
            let v211: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v228: () = {
                Spiral::closure7(v14.clone(), v10, ());
                ()
            };
            let v245: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v264: () = {
                Spiral::closure7(v14.clone(), string("cleanup"), ());
                ()
            };
            let v281: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v301: () = {
                Spiral::closure7(
                    v14.clone(),
                    if v11 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v318: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v337: () = {
                Spiral::closure7(v14.clone(), string("cargo_result"), ());
                ()
            };
            let v354: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v371: () = {
                Spiral::closure7(v14.clone(), v12, ());
                ()
            };
            let v390: () = {
                Spiral::closure7(v14.clone(), string(" }"), ());
                ()
            };
            let v396: string = v14.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / error"),
                    )),
                    string(" / "),
                )),
                (v396),
            ))
        }
        pub fn closure97(v0_1: bool, v1_1: string, v2: string, v3: i32, v4: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v23: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v49: Option<i64> = patternInput.5.clone();
                let v48: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v47: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v46: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v45: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v44: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method210(
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    v49.clone(),
                    Spiral::method8(v44, v45, v46, v47, v48, v49),
                    Spiral::method76(),
                    v3,
                    v1_1,
                    v4,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure99(unitVar: (), v0_1: string) -> bool {
            if (contains(v0_1.clone(), string("profile [optimized] target"))) == false {
                if (contains(v0_1.clone(), string("profile [unoptimized] target"))) == false {
                    (contains(v0_1, string("profile [unoptimized + debuginfo] target"))) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure98(v0_1: string, unitVar: ()) -> string {
            let v16: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(skip(
                2_i32,
                skipWhile(
                    Func1::new(move |v: string| Spiral::closure99((), v)),
                    split(v0_1, string("\n"), -1_i32, 0_i32),
                ),
            ));
            join(Spiral::method69(), toArray_1(v16))
        }
        pub fn method211(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("ex"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v77: std::string::String = format!("{:#?}", v8);
            let v121: () = {
                Spiral::closure7(
                    v13.clone(),
                    fable_library_rust::String_::fromString(v77),
                    (),
                );
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v229: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v246: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v299: () = {
                Spiral::closure7(v13.clone(), string("cargo_result"), ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v333: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v352: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v358: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / Exception"),
                    )),
                    string(" / "),
                )),
                (v358),
            ))
        }
        pub fn closure101(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method211(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure100(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v66: () = {
                Spiral::closure101(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method212(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v14: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v28: () = {
                Spiral::closure7(v14.clone(), string("{ "), ());
                ()
            };
            let v47: () = {
                Spiral::closure7(v14.clone(), string("exit_code"), ());
                ()
            };
            let v66: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v86: () = {
                Spiral::closure7(v14.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v105: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v14.clone(), string("new_code_path"), ());
                ()
            };
            let v141: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v158: () = {
                Spiral::closure7(v14.clone(), v9, ());
                ()
            };
            let v175: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v194: () = {
                Spiral::closure7(v14.clone(), string("cargo_result"), ());
                ()
            };
            let v211: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v228: () = {
                Spiral::closure7(v14.clone(), v10, ());
                ()
            };
            let v245: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v264: () = {
                Spiral::closure7(v14.clone(), string("cleanup"), ());
                ()
            };
            let v281: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v301: () = {
                Spiral::closure7(
                    v14.clone(),
                    if v11 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v318: () = {
                Spiral::closure7(v14.clone(), string("; "), ());
                ()
            };
            let v337: () = {
                Spiral::closure7(v14.clone(), string("spiral_wasm_result"), ());
                ()
            };
            let v354: () = {
                Spiral::closure7(v14.clone(), string(" = "), ());
                ()
            };
            let v371: () = {
                Spiral::closure7(v14.clone(), v12, ());
                ()
            };
            let v390: () = {
                Spiral::closure7(v14.clone(), string(" }"), ());
                ()
            };
            let v396: string = v14.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / wasm error"),
                    )),
                    string(" / "),
                )),
                (v396),
            ))
        }
        pub fn closure102(v0_1: bool, v1_1: string, v2: string, v3: string, v4: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v23: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v49: Option<i64> = patternInput.5.clone();
                let v48: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v47: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v46: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v45: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v44: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method212(
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    v49.clone(),
                    Spiral::method8(v44, v45, v46, v47, v48, v49),
                    Spiral::method76(),
                    v4,
                    v1_1,
                    v2,
                    v0_1,
                    concat(new_array(&[string("\n"), v3])),
                ))
            };
        }
        pub fn method213(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
            v12: bool,
            v13: string,
        ) -> string {
            let v15: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v29: () = {
                Spiral::closure7(v15.clone(), string("{ "), ());
                ()
            };
            let v48: () = {
                Spiral::closure7(v15.clone(), string("exit_code"), ());
                ()
            };
            let v67: () = {
                Spiral::closure7(v15.clone(), string(" = "), ());
                ()
            };
            let v87: () = {
                Spiral::closure7(v15.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v15.clone(), string("; "), ());
                ()
            };
            let v125: () = {
                Spiral::closure7(v15.clone(), string("new_code_path"), ());
                ()
            };
            let v142: () = {
                Spiral::closure7(v15.clone(), string(" = "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v15.clone(), v9, ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v15.clone(), string("; "), ());
                ()
            };
            let v195: () = {
                Spiral::closure7(v15.clone(), string("wasm_path"), ());
                ()
            };
            let v212: () = {
                Spiral::closure7(v15.clone(), string(" = "), ());
                ()
            };
            let v229: () = {
                Spiral::closure7(v15.clone(), v10, ());
                ()
            };
            let v246: () = {
                Spiral::closure7(v15.clone(), string("; "), ());
                ()
            };
            let v265: () = {
                Spiral::closure7(v15.clone(), string("command"), ());
                ()
            };
            let v282: () = {
                Spiral::closure7(v15.clone(), string(" = "), ());
                ()
            };
            let v299: () = {
                Spiral::closure7(v15.clone(), v11, ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v15.clone(), string("; "), ());
                ()
            };
            let v335: () = {
                Spiral::closure7(v15.clone(), string("cleanup"), ());
                ()
            };
            let v352: () = {
                Spiral::closure7(v15.clone(), string(" = "), ());
                ()
            };
            let v372: () = {
                Spiral::closure7(
                    v15.clone(),
                    if v12 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v389: () = {
                Spiral::closure7(v15.clone(), string("; "), ());
                ()
            };
            let v408: () = {
                Spiral::closure7(v15.clone(), string("cargo_result"), ());
                ()
            };
            let v425: () = {
                Spiral::closure7(v15.clone(), string(" = "), ());
                ()
            };
            let v442: () = {
                Spiral::closure7(v15.clone(), v13, ());
                ()
            };
            let v461: () = {
                Spiral::closure7(v15.clone(), string(" }"), ());
                ()
            };
            let v467: string = v15.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / cargo error"),
                    )),
                    string(" / "),
                )),
                (v467),
            ))
        }
        pub fn closure103(
            v0_1: bool,
            v1_1: string,
            v2: string,
            v3: i32,
            v4: string,
            v5: string,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v24: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v50: Option<i64> = patternInput.5.clone();
                let v49: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v48: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v47: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v46: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v45: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method213(
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    v49.clone(),
                    v50.clone(),
                    Spiral::method8(v45, v46, v47, v48, v49, v50),
                    Spiral::method76(),
                    v3,
                    v1_1,
                    v4,
                    v5,
                    v0_1,
                    concat(new_array(&[string("\n"), v2])),
                ))
            };
        }
        pub fn method214(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: bool,
            v11: string,
            v12: bool,
            v13: string,
            v14: bool,
            v15: string,
            v16: bool,
            v17: string,
            v18: bool,
        ) -> string {
            let v20: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v34: () = {
                Spiral::closure7(v20.clone(), string("{ "), ());
                ()
            };
            let v53: () = {
                Spiral::closure7(v20.clone(), string("new_code_path"), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v20.clone(), string(" = "), ());
                ()
            };
            let v89: () = {
                Spiral::closure7(v20.clone(), v8, ());
                ()
            };
            let v108: () = {
                Spiral::closure7(v20.clone(), string("; "), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v20.clone(), string("cleanup"), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v20.clone(), string(" = "), ());
                ()
            };
            let v183: () = {
                Spiral::closure7(
                    v20.clone(),
                    sprintf!(
                        "{:?}",
                        LrcPtr::new(Spiral::UH5::UH5_1(
                            v9,
                            v10,
                            LrcPtr::new(Spiral::UH5::UH5_1(
                                v11,
                                v12,
                                LrcPtr::new(Spiral::UH5::UH5_1(
                                    v13,
                                    v14,
                                    LrcPtr::new(Spiral::UH5::UH5_1(
                                        v15,
                                        v16,
                                        LrcPtr::new(Spiral::UH5::UH5_1(
                                            v17,
                                            v18,
                                            LrcPtr::new(Spiral::UH5::UH5_0)
                                        ))
                                    ))
                                ))
                            ))
                        ))
                    ),
                    (),
                );
                ()
            };
            let v202: () = {
                Spiral::closure7(v20.clone(), string(" }"), ());
                ()
            };
            let v208: string = v20.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_rust / cleanup"),
                    )),
                    string(" / "),
                )),
                (v208),
            ))
        }
        pub fn closure104(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v29: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v55: Option<i64> = patternInput.5.clone();
                let v54: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v53: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v52: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v51: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v50: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method214(
                    v50.clone(),
                    v51.clone(),
                    v52.clone(),
                    v53.clone(),
                    v54.clone(),
                    v55.clone(),
                    Spiral::method8(v50, v51, v52, v53, v54, v55),
                    Spiral::method78(),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                    v8,
                    v9,
                    v10,
                ))
            };
        }
        pub fn closure105(unitVar: (), unitVar_1: ()) -> Spiral::US47 {
            Spiral::US47::US47_0
        }
        pub fn method216() -> Func0<Spiral::US47> {
            Func0::new(move || Spiral::closure105((), ()))
        }
        pub fn closure106(unitVar: (), v0_1: string) -> Spiral::US47 {
            Spiral::US47::US47_1(v0_1)
        }
        pub fn method217() -> Func1<string, Spiral::US47> {
            Func1::new(move |v: string| Spiral::closure106((), v))
        }
        pub fn method218(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("error\'"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v79: () = {
                Spiral::closure7(v10.clone(), v8, ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v104: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("file_system.file_delete"),
                    )),
                    string(" / "),
                )),
                (v104),
            ))
        }
        pub fn closure107(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method218(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method76(),
                    v0_1,
                ))
            };
        }
        pub fn method215(v0_1: LrcPtr<Spiral::UH5>) {
            let v0_1: MutCell<LrcPtr<Spiral::UH5>> = MutCell::new(v0_1.clone());
            '_method215: loop {
                break '_method215 (match v0_1.get().clone().as_ref() {
                    Spiral::UH5::UH5_0 => (),
                    Spiral::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        let v6: Result<(), std::io::Error> = std::fs::remove_file(
                            &*match v0_1.get().clone().as_ref() {
                                Spiral::UH5::UH5_1(x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v7 = Spiral::method45();
                        let v20: Result<(), string> = v6.map_err(|x| v7(x));
                        let v23 = Spiral::method216();
                        let v24 = Spiral::method217();
                        let v26: Spiral::US47 = match &v20 {
                            Err(v20_1_0) => v24(v20_1_0.clone()),
                            _ => v23(),
                        };
                        match &v26 {
                            Spiral::US47::US47_0 => (),
                            Spiral::US47::US47_1(v26_1_0) => {
                                let v92: () = {
                                    Spiral::closure107(
                                        match &v26 {
                                            Spiral::US47::US47_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        (),
                                    );
                                    ()
                                };
                                ()
                            }
                        }
                        {
                            let v0_1_temp: LrcPtr<Spiral::UH5> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral::UH5::UH5_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                            v0_1.set(v0_1_temp);
                            continue '_method215;
                        }
                    }
                });
            }
        }
        pub fn method219(v0_1: string) -> string {
            v0_1
        }
        pub fn closure109(unitVar: (), v0_1: std::fs::FileType) -> Spiral::US48 {
            Spiral::US48::US48_0(v0_1)
        }
        pub fn method220() -> Func1<std::fs::FileType, Spiral::US48> {
            Func1::new(move |v: std::fs::FileType| Spiral::closure109((), v))
        }
        pub fn closure110(unitVar: (), v0_1: std::string::String) -> Spiral::US48 {
            Spiral::US48::US48_1(v0_1)
        }
        pub fn method221() -> Func1<std::string::String, Spiral::US48> {
            Func1::new(move |v: std::string::String| Spiral::closure110((), v))
        }
        pub fn method222(v0_1: string) -> string {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            let v106: Option<&std::ffi::OsStr> = v78.file_name();
            let v108: bool = true;
            let _optionm_map_ = v106.map(|x| {
                //;
                let v110: &std::ffi::OsStr = x;
                let v112: std::ffi::OsString = v110.to_os_string();
                let v114: Option<&str> = v112.to_str();
                let v116: &str = v114.unwrap();
                let v123: std::string::String = String::from(v116);
                let v151: string = fable_library_rust::String_::fromString(v123);
                let v153: bool = true;
                v151
            });
            let v155: Option<string> = _optionm_map_;
            let v180: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v155));
            match &v180 {
                Spiral::US5::US5_0(v180_0_0) => match &v180 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            }
        }
        pub fn closure108(
            v0_1: string,
            v1_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v3: bool = true;
            let __future_init = Box::pin(
                /*;
                let v5: bool = */
                async {
                    /*;
                    let v7: bool = */
                    ();
                    let v9: bool = true;
                    let __future_init = Box::pin(
                        /*;
                        let v11: bool = */
                        async move {
                            /*;
                            let v13: bool = */
                            ();
                            let v15: async_walkdir::DirEntry = v1_1.clone();
                            let v17: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<std::fs::FileType, std::io::Error>,
                                        > + Send,
                                >,
                            > = Box::pin(async_walkdir::DirEntry::file_type(&v15));
                            let v19: Result<std::fs::FileType, std::io::Error> = v17.await;
                            let v20 = Spiral::method73();
                            let v33: Result<std::fs::FileType, std::string::String> =
                                v19.map_err(|x| v20(x));
                            let v36 = Spiral::method220();
                            let v37 = Spiral::method221();
                            let v39: Spiral::US48 = match &v33 {
                                Err(v33_1_0) => v37(v33_1_0.clone()),
                                Ok(v33_0_0) => v36(v33_0_0.clone()),
                            };
                            let v284: Spiral::US49 = if let Spiral::US48::US48_0(v39_0_0) = &v39 {
                                if (std::fs::FileType::is_dir(&v39_0_0.clone())) == false {
                                    Spiral::US49::US49_0
                                } else {
                                    let v48: std::path::PathBuf =
                                        async_walkdir::DirEntry::path(&v1_1.clone());
                                    let v55: std::path::Display = v48.display();
                                    let v88: std::string::String = format!("{}", v55);
                                    let v116: string = fable_library_rust::String_::fromString(v88);
                                    if (startsWith3(
                                        Spiral::method222(v116.clone()),
                                        v0_1.clone(),
                                        false,
                                    )) == false
                                    {
                                        Spiral::US49::US49_1
                                    } else {
                                        let v124: Option<string> = Spiral::method38(v116);
                                        let v149: Spiral::US5 = defaultValue(
                                            Spiral::US5::US5_1,
                                            map(Spiral::method6(), v124),
                                        );
                                        if let Spiral::US5::US5_0(v149_0_0) = &v149 {
                                            if (contains(v149_0_0.clone(), v0_1.clone())) == false {
                                                Spiral::US49::US49_2
                                            } else {
                                                Spiral::US49::US49_1
                                            }
                                        } else {
                                            Spiral::US49::US49_1
                                        }
                                    }
                                }
                            } else {
                                let v167: std::path::PathBuf = async_walkdir::DirEntry::path(&v1_1);
                                let v174: std::path::Display = v167.display();
                                let v207: std::string::String = format!("{}", v174);
                                let v235: string = fable_library_rust::String_::fromString(v207);
                                if (startsWith3(
                                    Spiral::method222(v235.clone()),
                                    v0_1.clone(),
                                    false,
                                )) == false
                                {
                                    Spiral::US49::US49_1
                                } else {
                                    let v243: Option<string> = Spiral::method38(v235);
                                    let v268: Spiral::US5 = defaultValue(
                                        Spiral::US5::US5_1,
                                        map(Spiral::method6(), v243),
                                    );
                                    if let Spiral::US5::US5_0(v268_0_0) = &v268 {
                                        if (contains(v268_0_0.clone(), v0_1)) == false {
                                            Spiral::US49::US49_2
                                        } else {
                                            Spiral::US49::US49_1
                                        }
                                    } else {
                                        Spiral::US49::US49_1
                                    }
                                }
                            };
                            let v287: string = string("}");
                            let v292: bool = true;
                            let _fix_closure_v289 = v284;
                            let v299: string = append(
                                (append(
                                    (append(
                                        (append(string("true; _fix_closure_v289 "), (v287))),
                                        string("); "),
                                    )),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v300: bool = true;
                            _fix_closure_v289
                        },
                    ); // rust.fix_closure';
                    let v302 = __future_init;
                    let v304: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Spiral::US49> + Send>,
                    > = v302;
                    let v306: Spiral::US49 = v304.await;
                    let v315: async_walkdir::Filtering = match &v306 {
                        Spiral::US49::US49_0 => async_walkdir::Filtering::Ignore,
                        Spiral::US49::US49_1 => async_walkdir::Filtering::IgnoreDir,
                        _ => async_walkdir::Filtering::Continue,
                    };
                    let v316: string = string("}");
                    let v321: bool = true;
                    let _fix_closure_v318 = v315;
                    let v328: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v318 "), (v316))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v329: bool = true;
                    _fix_closure_v318
                },
            ); // rust.fix_closure';
            let v331 = __future_init;
            v331
        }
        pub fn closure112(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method224() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral::closure112((), v))
        }
        pub fn closure113(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral::US50 {
            Spiral::US50::US50_0(v0_1)
        }
        pub fn method225() -> Func1<async_walkdir::DirEntry, Spiral::US50> {
            Func1::new(move |v: async_walkdir::DirEntry| Spiral::closure113((), v))
        }
        pub fn closure114(unitVar: (), v0_1: std::string::String) -> Spiral::US50 {
            Spiral::US50::US50_1(v0_1)
        }
        pub fn method226() -> Func1<std::string::String, Spiral::US50> {
            Func1::new(move |v: std::string::String| Spiral::closure114((), v))
        }
        pub fn method227(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("error"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v74: std::string::String = format!("{:#?}", v8);
            let v118: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v74),
                    (),
                );
                ()
            };
            let v137: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v143: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript / stream_filter_map"),
                    )),
                    string(" / "),
                )),
                (v143),
            ))
        }
        pub fn closure115(v0_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method227(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method76(),
                    v0_1,
                ))
            };
        }
        pub fn closure111(
            v0_1: string,
            v1_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v2 = Spiral::method224();
            let v15: Result<async_walkdir::DirEntry, std::string::String> = v1_1.map_err(|x| v2(x));
            let v18 = Spiral::method225();
            let v19 = Spiral::method226();
            let v21: Spiral::US50 = match &v15 {
                Err(v15_1_0) => v19(v15_1_0.clone()),
                Ok(v15_0_0) => v18(v15_0_0.clone()),
            };
            let v319: Spiral::US51 = match &v21 {
                Spiral::US50::US50_0(v21_0_0) => {
                    let v26: std::path::PathBuf = async_walkdir::DirEntry::path(&v21_0_0.clone());
                    let v33: std::path::Display = v26.display();
                    let v66: std::string::String = format!("{}", v33);
                    let v94: string = fable_library_rust::String_::fromString(v66);
                    let v95: string =
                        concat(new_array(&[v0_1.clone(), string("\\.(?<a>[-\\d\\w.]+)$")]));
                    let v97: Result<regex::Regex, regex::Error> = regex::Regex::new(&v95);
                    let v113: Vec<std::collections::HashMap<string, string>> =
                        Spiral::method205(v94.clone(), v97.unwrap());
                    let v116: Option<std::collections::HashMap<string, string>> = tryItem(
                        0_i32,
                        fable_library_rust::NativeArray_::array_from(v113.clone()),
                    );
                    let v141: Spiral::US45 =
                        defaultValue(Spiral::US45::US45_1, map(Spiral::method206(), v116));
                    let v180: Spiral::US46 = match &v141 {
                        Spiral::US45::US45_0(v141_0_0) => {
                            let v146: string = Spiral::method207();
                            let v148: Option<string> = std::collections::HashMap::get(
                                &match &v141 {
                                    Spiral::US45::US45_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                &v146,
                            )
                            .map(|x| x)
                            .cloned();
                            Spiral::US46::US46_0(defaultValue(
                                Spiral::US5::US5_1,
                                map(Spiral::method6(), v148),
                            ))
                        }
                        _ => Spiral::US46::US46_1,
                    };
                    let v187: Spiral::US5 = if let Spiral::US46::US46_0(v180_0_0) = &v180 {
                        let v181: Spiral::US5 = v180_0_0.clone();
                        if let Spiral::US5::US5_0(v181_0_0) = &v181 {
                            Spiral::US5::US5_0(v181_0_0.clone())
                        } else {
                            Spiral::US5::US5_1
                        }
                    } else {
                        Spiral::US5::US5_1
                    };
                    match &v187 {
                        Spiral::US5::US5_0(v187_0_0) => Spiral::US51::US51_0(
                            v94.clone(),
                            match &v187 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => Spiral::US51::US51_1,
                    }
                }
                Spiral::US50::US50_1(v21_1_0) => {
                    let v256: () = {
                        Spiral::closure115(v21_1_0.clone(), ());
                        ()
                    };
                    Spiral::US51::US51_1
                }
            };
            match &v319 {
                Spiral::US51::US51_0(v319_0_0, v319_0_1) => Some((
                    match &v319 {
                        Spiral::US51::US51_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                    match &v319 {
                        Spiral::US51::US51_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method223(
            v0_1: string,
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral::closure111(v0_1.clone(), v)
                }
            })
        }
        pub fn closure116(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure117(unitVar: (), _arg: (string, string)) -> Spiral::US51 {
            Spiral::US51::US51_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method228() -> Func1<(string, string), Spiral::US51> {
            Func1::new(move |arg10_0040: (string, string)| Spiral::closure117((), arg10_0040))
        }
        pub fn method229(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral::US51,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("version"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v10.clone(), sprintf!("{:?}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v108: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript"),
                    )),
                    string(" / "),
                )),
                (v108),
            ))
        }
        pub fn closure118(v0_1: Spiral::US51, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method229(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method230(v0_1: string, v1_1: string, v2: Spiral::US51) {
            match &v2 {
                Spiral::US51::US51_0(v2_0_0, v2_0_1) => {
                    let v4: string = match &v2 {
                        Spiral::US51::US51_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Spiral::method192(
                        Spiral::method33(
                            v1_1.clone(),
                            concat(new_array(&[
                                string("fable-library-"),
                                string("ts"),
                                string("."),
                                v4.clone(),
                            ])),
                        ),
                        Spiral::method33(
                            v0_1.clone(),
                            concat(new_array(&[
                                string("fable_modules/fable-library-"),
                                string("ts"),
                                string("."),
                                v4,
                            ])),
                        ),
                    )
                }
                _ => panic!(
                    "{}",
                    concat(new_array(&[
                        string("spiral.process_typescript / fable library not found / lib_path: "),
                        v1_1.clone()
                    ])),
                ),
            };
        }
        pub fn method231(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("dotnet_fable_result"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v155: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v180: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript"),
                    )),
                    string(" / "),
                )),
                (v180),
            ))
        }
        pub fn closure119(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method231(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method76(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method232(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("new_code_path"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v79: () = {
                Spiral::closure7(v10.clone(), v8, ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v104: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript"),
                    )),
                    string(" / "),
                )),
                (v104),
            ))
        }
        pub fn closure120(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method232(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method233(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: LrcPtr<Spiral::UH4>,
        ) -> LrcPtr<Spiral::UH4> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral::UH4::UH4_1(
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        Spiral::method233(
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method234(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    Spiral::method234(
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure121(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method69(), toArray_1(v13))
        }
        pub fn method235(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("ex"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v77: std::string::String = format!("{:#?}", v8);
            let v121: () = {
                Spiral::closure7(
                    v13.clone(),
                    fable_library_rust::String_::fromString(v77),
                    (),
                );
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v229: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v246: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v299: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v333: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v352: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v358: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript / Exception"),
                    )),
                    string(" / "),
                )),
                (v358),
            ))
        }
        pub fn closure123(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method235(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure122(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v66: () = {
                Spiral::closure123(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method236(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("exit_code"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v85: () = {
                Spiral::closure7(v13.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v227: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v244: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v297: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v322: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_typescript / error"),
                    )),
                    string(" / "),
                )),
                (v322),
            ))
        }
        pub fn closure124(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method236(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method237(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("exit_code"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v11.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v102: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string("dotnet_fable_result"), ());
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v155: () = {
                Spiral::closure7(v11.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v180: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python"),
                    )),
                    string(" / "),
                )),
                (v180),
            ))
        }
        pub fn closure125(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method237(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method76(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method238(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v24: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v10.clone(), string("new_code_path"), ());
                ()
            };
            let v62: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v79: () = {
                Spiral::closure7(v10.clone(), v8, ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v104: string = v10.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python"),
                    )),
                    string(" / "),
                )),
                (v104),
            ))
        }
        pub fn closure126(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v19: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v45: Option<i64> = patternInput.5.clone();
                let v44: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v43: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v42: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v41: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v40: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method238(
                    v40.clone(),
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    Spiral::method8(v40, v41, v42, v43, v44, v45),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure127(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method69(), toArray_1(v13))
        }
        pub fn method239(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("ex"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v77: std::string::String = format!("{:#?}", v8);
            let v121: () = {
                Spiral::closure7(
                    v13.clone(),
                    fable_library_rust::String_::fromString(v77),
                    (),
                );
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v229: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v246: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v299: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v333: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v352: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v358: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python / Exception"),
                    )),
                    string(" / "),
                )),
                (v358),
            ))
        }
        pub fn closure129(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method239(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure128(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v66: () = {
                Spiral::closure129(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method240(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v13: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v27: () = {
                Spiral::closure7(v13.clone(), string("{ "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v13.clone(), string("exit_code"), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v85: () = {
                Spiral::closure7(v13.clone(), sprintf!("{}", v8), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v13.clone(), string("run_result"), ());
                ()
            };
            let v140: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v13.clone(), v9, ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v193: () = {
                Spiral::closure7(v13.clone(), string("new_code_path"), ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v227: () = {
                Spiral::closure7(v13.clone(), v10, ());
                ()
            };
            let v244: () = {
                Spiral::closure7(v13.clone(), string("; "), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v13.clone(), string("external_command"), ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v13.clone(), string(" = "), ());
                ()
            };
            let v297: () = {
                Spiral::closure7(v13.clone(), v11, ());
                ()
            };
            let v316: () = {
                Spiral::closure7(v13.clone(), string(" }"), ());
                ()
            };
            let v322: string = v13.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.process_python / error"),
                    )),
                    string(" / "),
                )),
                (v322),
            ))
        }
        pub fn closure130(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v22: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v48: Option<i64> = patternInput.5.clone();
                let v47: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v46: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v45: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v44: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v43: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method240(
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    v47.clone(),
                    v48.clone(),
                    Spiral::method8(v43, v44, v45, v46, v47, v48),
                    Spiral::method76(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method241(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: clap::ArgMatches,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method13()),
            });
            let v25: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v11.clone(), string("subcommand"), ());
                ()
            };
            let v63: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v75: std::string::String = format!("{:#?}", v8);
            let v119: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v75),
                    (),
                );
                ()
            };
            let v138: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v11.clone(), string("arg_matches"), ());
                ()
            };
            let v174: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v186: std::string::String = format!("{:#?}", v9);
            let v230: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v186),
                    (),
                );
                ()
            };
            let v249: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v255: string = v11.l0.get().clone();
            Spiral::method16(append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append((append((append((v6), string(" "))), (v7))), string(" #"))),
                                (toString(v0_1.l0.get().clone())),
                            )),
                            string(" "),
                        )),
                        string("spiral.run / invalid subcommand"),
                    )),
                    string(" / "),
                )),
                (v255),
            ))
        }
        pub fn closure131(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v20: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v46: Option<i64> = patternInput.5.clone();
                let v45: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v44: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v43: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v42: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v41: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method17(Spiral::method241(
                    v41.clone(),
                    v42.clone(),
                    v43.clone(),
                    v44.clone(),
                    v45.clone(),
                    v46.clone(),
                    Spiral::method8(v41, v42, v43, v44, v45, v46),
                    Spiral::method12(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure132(unitVar: (), v0_1: serde_json::Error) -> string {
            let v7: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v7)
        }
        pub fn method242() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral::closure132((), v))
        }
        pub fn method18(
            v0_1: Spiral::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(
                /*;
                let v5: bool = */
                async move {
                    /*;
                    let v7: bool = */
                    ();
                    let v10: Option<(std::string::String, clap::ArgMatches)> =
                        clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                            (
                                Func1::new(move |v: &str| Spiral::closure11((), v))(a),
                                b.clone(),
                            )
                        });
                    let v36: Spiral::US6 =
                        defaultValue(Spiral::US6::US6_1, map(Spiral::method19(), v10));
                    let v10245: Array<(string, string)> = if let Spiral::US6::US6_0(
                        v36_0_0,
                        v36_0_1,
                    ) = &v36
                    {
                        let v41: clap::ArgMatches = v36_0_1.clone();
                        let v40: std::string::String = v36_0_0.clone();
                        if (fable_library_rust::String_::fromString(v40.clone())) == string("gleam")
                        {
                            let v45: string = Spiral::method20();
                            let v52: &str = &*v45;
                            let v80: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v41.clone(), v52).cloned();
                            let v105: Spiral::US7 =
                                defaultValue(Spiral::US7::US7_1, map(Spiral::method21(), v80));
                            let v112: std::string::String = match &v105 {
                                Spiral::US7::US7_0(v105_0_0) => match &v105 {
                                    Spiral::US7::US7_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v114: string = fable_library_rust::String_::fromString(v112);
                            let v115: string = Spiral::method22();
                            let v122: &str = &*v115;
                            let v150: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v41.clone(), v122).cloned();
                            let v175: Spiral::US7 =
                                defaultValue(Spiral::US7::US7_1, map(Spiral::method21(), v150));
                            let v236: Spiral::US8 = match &v175 {
                                Spiral::US7::US7_0(v175_0_0) => {
                                    let v181: string = fable_library_rust::String_::fromString(
                                        match &v175 {
                                            Spiral::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    );
                                    let v186: string = toLower(string("JavaScript"));
                                    let v193: string = toLower(string("Erlang"));
                                    let v200: Spiral::US9 = if string("Erlang") == (v181.clone()) {
                                        Spiral::US9::US9_0(Spiral::US10::US10_0)
                                    } else {
                                        Spiral::US9::US9_1
                                    };
                                    Spiral::US8::US8_0(match &v200 {
                                        Spiral::US9::US9_0(v200_0_0) => Spiral::US9::US9_0(
                                            match &v200 {
                                                Spiral::US9::US9_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => {
                                            let v207: Spiral::US9 =
                                                if string("JavaScript") == (v181.clone()) {
                                                    Spiral::US9::US9_0(Spiral::US10::US10_1)
                                                } else {
                                                    Spiral::US9::US9_1
                                                };
                                            match &v207 {
                                                Spiral::US9::US9_0(v207_0_0) => Spiral::US9::US9_0(
                                                    match &v207 {
                                                        Spiral::US9::US9_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => {
                                                    let v214: Spiral::US9 =
                                                        if (v193.clone()) == (v181.clone()) {
                                                            Spiral::US9::US9_0(Spiral::US10::US10_0)
                                                        } else {
                                                            Spiral::US9::US9_1
                                                        };
                                                    match &v214 {
                                                        Spiral::US9::US9_0(v214_0_0) => {
                                                            Spiral::US9::US9_0(
                                                                match &v214 {
                                                                    Spiral::US9::US9_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => {
                                                            let v221: Spiral::US9 =
                                                                if (v186.clone()) == (v181.clone())
                                                                {
                                                                    Spiral::US9::US9_0(
                                                                        Spiral::US10::US10_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US9::US9_1
                                                                };
                                                            match &v221 {
                                                                Spiral::US9::US9_0(v221_0_0) => {
                                                                    Spiral::US9::US9_0(
                                                                        match &v221 {
                                                                            Spiral::US9::US9_0(
                                                                                x,
                                                                            ) => x.clone(),
                                                                            _ => unreachable!(),
                                                                        }
                                                                        .clone(),
                                                                    )
                                                                }
                                                                _ => Spiral::US9::US9_1,
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    })
                                }
                                _ => Spiral::US8::US8_1,
                            };
                            let v243: Spiral::US9 = if let Spiral::US8::US8_0(v236_0_0) = &v236 {
                                let v237: Spiral::US9 = v236_0_0.clone();
                                if let Spiral::US9::US9_0(v237_0_0) = &v237 {
                                    Spiral::US9::US9_0(v237_0_0.clone())
                                } else {
                                    Spiral::US9::US9_1
                                }
                            } else {
                                Spiral::US9::US9_1
                            };
                            let v247: Spiral::US10 = match &v243 {
                                Spiral::US9::US9_0(v243_0_0) => match &v243 {
                                    Spiral::US9::US9_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => Spiral::US10::US10_0,
                            };
                            let v248: string = Spiral::method23();
                            let v255: &str = &*v248;
                            let v283: Option<Vec<std::string::String>> =
                                clap::ArgMatches::get_many(&v41.clone(), v255)
                                    .map(|x| x.cloned().into_iter().collect());
                            let v308: Spiral::US11 =
                                defaultValue(Spiral::US11::US11_1, map(Spiral::method24(), v283));
                            let v314: Vec<std::string::String> =
                                new_empty::<std::string::String>().to_vec();
                            let v317: Vec<std::string::String> = match &v308 {
                                Spiral::US11::US11_0(v308_0_0) => match &v308 {
                                    Spiral::US11::US11_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => v314.clone(),
                            };
                            let v329: Result<Vec<u8>, std::io::Error> =
                                std::fs::read(&*v114.clone());
                            let v374: Vec<u8> = Spiral::method25(v329.unwrap());
                            let v376: Result<std::string::String, std::string::FromUtf8Error> =
                                std::string::String::from_utf8(v374);
                            let v380: std::string::String = v376.unwrap();
                            let v415: string = fable_library_rust::String_::fromString(v380);
                            let v422: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                                l0: MutCell::new(Spiral::method13()),
                            });
                            let v436: () = {
                                Spiral::closure7(v422.clone(), string("{ "), ());
                                ()
                            };
                            let v455: () = {
                                Spiral::closure7(v422.clone(), string("extension"), ());
                                ()
                            };
                            let v474: () = {
                                Spiral::closure7(v422.clone(), string(" = "), ());
                                ()
                            };
                            let v493: () = {
                                Spiral::closure7(v422.clone(), string("gleam"), ());
                                ()
                            };
                            let v512: () = {
                                Spiral::closure7(v422.clone(), string("; "), ());
                                ()
                            };
                            let v531: () = {
                                Spiral::closure7(v422.clone(), string("new_code"), ());
                                ()
                            };
                            let v548: () = {
                                Spiral::closure7(v422.clone(), string(" = "), ());
                                ()
                            };
                            let v565: () = {
                                Spiral::closure7(v422.clone(), v415.clone(), ());
                                ()
                            };
                            let v584: () = {
                                Spiral::closure7(v422.clone(), string(" }"), ());
                                ()
                            };
                            let v591: string = Spiral::method26(v422.l0.get().clone());
                            let v593: Spiral::US5 = Spiral::method32(Spiral::method31());
                            let v599: Spiral::US5 = match &v593 {
                                Spiral::US5::US5_0(v593_0_0) => Spiral::US5::US5_0(
                                    match &v593 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => Spiral::method32(string(
                                    "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                )),
                            };
                            let v605: Spiral::US5 = match &v599 {
                                Spiral::US5::US5_0(v599_0_0) => Spiral::US5::US5_0(
                                    match &v599 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => Spiral::method32(string("/workspaces")),
                            };
                            let v609: string = match &v605 {
                                Spiral::US5::US5_0(v605_0_0) => match &v605 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v624: string = Spiral::method33(
                                if string("deps") == (Spiral::method50(v609.clone())) {
                                    let v617: Spiral::US5 = Spiral::method32(
                                        Spiral::method38(v609.clone()).clone().unwrap(),
                                    );
                                    match &v617 {
                                        Spiral::US5::US5_0(v617_0_0) => match &v617 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    }
                                } else {
                                    v609
                                },
                                string("polyglot"),
                            );
                            let v628: string = toLower(Spiral::method31());
                            let v633: string = toLower(v624);
                            let v642: Spiral::US13 = if startsWith3(v628, v633.clone(), false) {
                                Spiral::US13::US13_1(v633.clone())
                            } else {
                                Spiral::US13::US13_0(v633)
                            };
                            let v654: Result<string, string> = match &v642 {
                                Spiral::US13::US13_0(v642_0_0) => {
                                    Ok::<string, string>(v642_0_0.clone())
                                }
                                Spiral::US13::US13_1(v642_1_0) => {
                                    Err::<string, string>(v642_1_0.clone())
                                }
                            };
                            let v656: bool = true;
                            let _result_unwrap_or_else = v654.unwrap_or_else(|x| {
                                //;
                                let v658: string = x;
                                let v660: bool = true;
                                v658
                            });
                            let v663: string = Spiral::method63(_result_unwrap_or_else);
                            let v671: string = Spiral::method63(defaultValue(
                                string(""),
                                Spiral::method38(v114.clone()),
                            ));
                            let v674: string =
                                Spiral::method63(Spiral::method33(v671.clone(), string("..")));
                            let v676: string = Spiral::method33(v674.clone(), string("gleam.toml"));
                            let v682: Array<string> = new_array(&[
                                string("gleam_stdlib=\"0.57.0\""),
                                string("gleam_time=\">=1.0.0 and <2.0.0\""),
                                string("gleam_erlang=\">=0.34.0 and <1.0.0\""),
                                string("envoy=\">=1.0.0 and <2.0.0\""),
                                string("gary=\">=1.1.0 and <2.0.0\""),
                            ]);
                            let v684: Vec<string> = v682.to_vec();
                            let v686: bool = true;
                            let _vec_map: Vec<_> = v684
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v688: string = x;
                                    let v695: &str = &*v688;
                                    let v728: std::string::String = String::from(v695);
                                    let v756: bool = true;
                                    v728
                                })
                                .collect::<Vec<_>>();
                            let v758: Vec<std::string::String> = _vec_map;
                            let v759: Vec<std::string::String> = Spiral::method67(v317);
                            let v760: Vec<std::string::String> = Spiral::method68(v758);
                            let v762: bool = true;
                            let mut v760 = v760;
                            let v764: bool = true;
                            v760.extend(v759);
                            let v766: Vec<std::string::String> = v760;
                            let v768: bool = true;
                            let _vec_map: Vec<_> = v766
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v770: std::string::String = x;
                                    let v772: string =
                                        fable_library_rust::String_::fromString(v770);
                                    let v791: string = if contains(v772.clone(), string("=")) {
                                        v772.clone()
                                    } else {
                                        if endsWith3(v772.clone(), string("]"), false) {
                                            concat(new_array(&[
                                                replace(
                                                    v772.clone(),
                                                    string("["),
                                                    string("={version=\'*\',features=["),
                                                ),
                                                string("}"),
                                            ]))
                                        } else {
                                            concat(new_array(&[v772, string("=\'*\'")]))
                                        }
                                    };
                                    let v793: bool = true;
                                    v791
                                })
                                .collect::<Vec<_>>();
                            let v795: Vec<string> = _vec_map;
                            let v797: Array<string> =
                                fable_library_rust::NativeArray_::array_from(v795.clone());
                            let _let__v802: LrcPtr<dyn IEnumerable_1<string>> =
                                delay(Func0::new({
                                    let v797 = v797.clone();
                                    move || {
                                        map_1(
                                            Func1::new({
                                                let v797 = v797.clone();
                                                move |i: i32| v797[i].clone()
                                            }),
                                            rangeNumeric(
                                                0_i32,
                                                1_i32,
                                                (get_Count(v797.clone())) - 1_i32,
                                            ),
                                        )
                                    }
                                }));
                            let v816: string = join(Spiral::method69(), toArray_1(_let__v802));
                            let v824: Spiral::US5 = if if let Spiral::US10::US10_0 = &v247 {
                                true
                            } else {
                                false
                            } {
                                Spiral::US5::US5_0(string("Erlang"))
                            } else {
                                Spiral::US5::US5_1
                            };
                            let v838: Spiral::US5 = match &v824 {
                                Spiral::US5::US5_0(v824_0_0) => Spiral::US5::US5_0(
                                    match &v824 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => {
                                    let v831: Spiral::US5 = if if let Spiral::US10::US10_1 = &v247 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral::US5::US5_0(string("JavaScript"))
                                    } else {
                                        Spiral::US5::US5_1
                                    };
                                    match &v831 {
                                        Spiral::US5::US5_0(v831_0_0) => Spiral::US5::US5_0(
                                            match &v831 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    }
                                }
                            };
                            let v845: string = toLower(match &v838 {
                                Spiral::US5::US5_0(v838_0_0) => match &v838 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            });
                            Spiral::method70(
                                v676,
                                append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (concat(new_array(&[
                                                                    string("name = \""),
                                                                    if contains(
                                                                        v114.clone(),
                                                                        string("_real"),
                                                                    ) {
                                                                        string("main_real")
                                                                    } else {
                                                                        string("main")
                                                                    },
                                                                    string("\""),
                                                                ]))),
                                                                string("\n"),
                                                            )),
                                                            (concat(new_array(&[
                                                                string("target = \""),
                                                                v845,
                                                                string("\""),
                                                            ]))),
                                                        )),
                                                        string("\n"),
                                                    )),
                                                    string(""),
                                                )),
                                                string("\n"),
                                            )),
                                            string("[dependencies]"),
                                        )),
                                        string("\n"),
                                    )),
                                    (v816),
                                ),
                            );
                            {
                                let patternInput: (i32, string) = Spiral::method91(
                                    string("gleam check"),
                                    None::<CancellationToken>,
                                    new_empty::<(string, string)>(),
                                    None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                    None::<
                                        Func1<
                                            std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            >,
                                            (),
                                        >,
                                    >,
                                    true,
                                    Some(v674.clone()),
                                );
                                let v919: i32 = patternInput.0.clone();
                                let patternInput_6: (
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                ) = if (v919) != 0_i32 {
                                    let v987: () = {
                                        Spiral::closure68(
                                            v114.clone(),
                                            patternInput.1.clone(),
                                            v919,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral::US5::US5_0(string("gleam")),
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                    )
                                } else {
                                    let v1055: string = if if let Spiral::US10::US10_0 = &v247 {
                                        true
                                    } else {
                                        false
                                    } {
                                        concat(new_array(&[
                                            string("gleam run --no-print-progress \""),
                                            v114.clone(),
                                            string("\""),
                                        ]))
                                    } else {
                                        string("gleam build --no-print-progress")
                                    };
                                    let v1059: Array<(string, string)> = new_array(&[
                                        (string("TRACE_LEVEL"), string("")),
                                        (string("GLEAM_LOG"), string("")),
                                        (string("GLEAM_LOG_NOCOLOUR"), string("")),
                                    ]);
                                    let patternInput_1: (i32, string) = Spiral::method91(
                                        v1055.clone(),
                                        None::<CancellationToken>,
                                        v1059.clone(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v674.clone()),
                                    );
                                    let v1083: string = patternInput_1.1.clone();
                                    let v1082: i32 = patternInput_1.0.clone();
                                    let v1084: i32 = get_Count(v1059.clone());
                                    let v1085: Array<string> = new_init(&string(""), v1084);
                                    let v1086: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v1084, v1086.clone()) {
                                        let v1088: i32 = v1086.l0.get().clone();
                                        let patternInput_2: (string, string) = v1059[v1088].clone();
                                        let v1091: string = sprintf!(
                                            "$env:{}=\'\'{}\'\'",
                                            patternInput_2.0.clone(),
                                            patternInput_2.1.clone()
                                        );
                                        v1085.get_mut()[v1088 as usize] = v1091;
                                        {
                                            let v1092: i32 = (v1088) + 1_i32;
                                            v1086.l0.set(v1092);
                                            ()
                                        }
                                    }
                                    {
                                        let v1105: string = sprintf!(
                                            "pwsh -c \'{}; {}\'",
                                            join(string(";"), toArray_1(ofArray_1(v1085.clone()))),
                                            v1055
                                        );
                                        let patternInput_5: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if (v1082) != 0_i32 {
                                            let v1172: () = {
                                                Spiral::closure69(
                                                    v114.clone(),
                                                    v1083.clone(),
                                                    v1082,
                                                    v1105.clone(),
                                                    (),
                                                );
                                                ()
                                            };
                                            (
                                                Spiral::US5::US5_0(string("gleam")),
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                            )
                                        } else {
                                            let v2074: string = if if let Spiral::US10::US10_0 =
                                                &v247
                                            {
                                                true
                                            } else {
                                                false
                                            } {
                                                v1083
                                            } else {
                                                let v1238: string = concat(new_array(&[
                                                    v674.clone(),
                                                    string("/build/dev/javascript/main/main.mjs"),
                                                ]));
                                                let v1250: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v1238.clone());
                                                let v1295: Vec<u8> =
                                                    Spiral::method25(v1250.unwrap());
                                                let v1297: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v1295);
                                                let v1301: std::string::String = v1297.unwrap();
                                                let v1344: string = replace(
                                                    fable_library_rust::String_::fromString(v1301),
                                                    string("#app_"),
                                                    concat(new_array(&[
                                                        string("#app_"),
                                                        v591.clone(),
                                                    ])),
                                                );
                                                if (endsWith3(
                                                    v1344.clone(),
                                                    string("main()"),
                                                    false,
                                                )) == false
                                                {
                                                    Spiral::method70(
                                                        v1238.clone(),
                                                        concat(new_array(&[
                                                            v1344,
                                                            string("\nmain()"),
                                                        ])),
                                                    );
                                                }
                                                {
                                                    let v1370: string = concat(new_array(&[
                                                        string(
                                                            "bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir=",
                                                        ),
                                                        v671.clone(),
                                                        string(" "),
                                                        v1238,
                                                    ]));
                                                    let v1372: string =
                                                        Spiral::method3(string("PATH"));
                                                    let v1408: Spiral::US5 = if (v1372.clone())
                                                        == string("")
                                                    {
                                                        Spiral::US5::US5_1
                                                    } else {
                                                        Spiral::US5::US5_0(concat(new_array(&[
                                                            string("~/.bun/bin"),
                                                            if cfg!(windows) {
                                                                string(";")
                                                            } else {
                                                                string(":")
                                                            },
                                                            v1372,
                                                        ])))
                                                    };
                                                    let patternInput_3:
                                                                    (i32,
                                                                     string) =
                                                                Spiral::method91(v1370,
                                                                                 None::<CancellationToken>,
                                                                                 match &v1408
                                                                                     {
                                                                                     Spiral::US5::US5_0(v1408_0_0)
                                                                                     =>
                                                                                     new_array(&[(string("PATH"),
                                                                                                  match &v1408
                                                                                                      {
                                                                                                      Spiral::US5::US5_0(x)
                                                                                                      =>
                                                                                                      x.clone(),
                                                                                                      _
                                                                                                      =>
                                                                                                      unreachable!(),
                                                                                                  }.clone())]),
                                                                                     _
                                                                                     =>
                                                                                     new_empty::<(string,
                                                                                                  string)>(),
                                                                                 },
                                                                                 None::<Func1<(i32,
                                                                                               string,
                                                                                               bool),
                                                                                              Arc<Async<()>>>>,
                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                              ()>>,
                                                                                 true,
                                                                                 Some(v674));
                                                    let v1419: i32 = patternInput_3.0.clone();
                                                    if (v1419) != 0_i32 {
                                                        let v1487: () = {
                                                            Spiral::closure70(
                                                                v114.clone(),
                                                                patternInput_3.1.clone(),
                                                                v1419,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        string("")
                                                    } else {
                                                        let v1726: string = append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(
                                                                                "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      data-trunk\n      rel=\"inline\"\n      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\"\n    />\n    <link\n      data-trunk\n      rel=\"inline\"\n      type=\"module\"\n      href=\"main.js\"\n    />\n  </head>\n  <body>\n",
                                                                            ),
                                                                            (concat(new_array(&[
                                                                                string(
                                                                                    "    <div id=\"app_",
                                                                                ),
                                                                                v591.clone(),
                                                                                string("\"></div>"),
                                                                            ]))),
                                                                        )),
                                                                        string("\n"),
                                                                    )),
                                                                    string("  </body>"),
                                                                )),
                                                                string("\n"),
                                                            )),
                                                            string("</html>"),
                                                        );
                                                        let v1729: string = concat(new_array(&[
                                                            v671.clone(),
                                                            string("/index.html"),
                                                        ]));
                                                        Spiral::method70(v1729.clone(), v1726);
                                                        Spiral::method70(
                                                            concat(new_array(&[
                                                                v671.clone(),
                                                                string("/spiral_"),
                                                                v591.clone(),
                                                                string(".rs"),
                                                            ])),
                                                            string(""),
                                                        );
                                                        {
                                                            let v1810:
                                                                            string =
                                                                        append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                                                                   v591.clone(),
                                                                                                                                                                                                                                   string("\"")]))))),
                                                                                                                                                                                                       string("\n"))),
                                                                                                                                                                                               string(""))),
                                                                                                                                                                                       string("\n"))),
                                                                                                                                                                               string("[workspace]"))),
                                                                                                                                                                       string("\n"))),
                                                                                                                                                               string(""))),
                                                                                                                                                       string("\n"))),
                                                                                                                                               string("[lib]"))),
                                                                                                                                       string("\n"))),
                                                                                                                               string("crate-type = [\"cdylib\", \"rlib\"]"))),
                                                                                                                       string("\n"))),
                                                                                                               (concat(new_array(&[string("path = \"spiral_"),
                                                                                                                                   v591,
                                                                                                                                   string(".rs\"")]))))),
                                                                                                       string("\n"))),
                                                                                               string(""))),
                                                                                       string("\n"))),
                                                                               string("[dependencies]"));
                                                            Spiral::method70(
                                                                concat(new_array(&[
                                                                    v671.clone(),
                                                                    string("/Cargo.toml"),
                                                                ])),
                                                                v1810,
                                                            );
                                                            {
                                                                let patternInput_4:
                                                                                (i32,
                                                                                 string) =
                                                                            Spiral::method91(concat(new_array(&[string("trunk build --release --minify --dist="),
                                                                                                                v671.clone(),
                                                                                                                string(" --public-url=./ --no-sri")])),
                                                                                             None::<CancellationToken>,
                                                                                             new_array(&[(string("TRUNK_TOOLS_WASM_BINDGEN"),
                                                                                                          string("0.2.93"))]),
                                                                                             None::<Func1<(i32,
                                                                                                           string,
                                                                                                           bool),
                                                                                                          Arc<Async<()>>>>,
                                                                                             None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                          ()>>,
                                                                                             true,
                                                                                             Some(v671));
                                                                let v1840: i32 =
                                                                    patternInput_4.0.clone();
                                                                if (v1840) != 0_i32 {
                                                                    let v1908: () = {
                                                                        Spiral::closure71(
                                                                            v114.clone(),
                                                                            patternInput_4
                                                                                .1
                                                                                .clone(),
                                                                            v1840,
                                                                            (),
                                                                        );
                                                                        ()
                                                                    };
                                                                    string("")
                                                                } else {
                                                                    let v1980: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(&*v1729);
                                                                    let v2025: Vec<u8> =
                                                                        Spiral::method25(
                                                                            v1980.unwrap(),
                                                                        );
                                                                    let v2027:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v2025);
                                                                    let v2031: std::string::String =
                                                                        v2027.unwrap();
                                                                    fable_library_rust::String_::fromString(v2031)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            };
                                            let v2081: &str = &*v2074.clone();
                                            let v2114: std::string::String = String::from(v2081);
                                            let result: LrcPtr<MutCell<Spiral::US5>> =
                                                refCell(Spiral::US5::US5_1);
                                            try_catch(
                                                || {
                                                    result.set(Spiral::closure72(
                                                        (),
                                                        Spiral::closure73(v2074, ()),
                                                    ))
                                                },
                                                |ex: LrcPtr<Exception>| {
                                                    result.set(Spiral::closure74(
                                                        v114.clone(),
                                                        v1105,
                                                        v2114,
                                                        ex.clone(),
                                                    ))
                                                },
                                            );
                                            {
                                                let v2146: Spiral::US5 = result.get().clone();
                                                let v2160: Option<string> = match &v2146 {
                                                    Spiral::US5::US5_0(v2146_0_0) => Some(
                                                        match &v2146 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    ),
                                                    _ => None::<string>,
                                                };
                                                (
                                                    Spiral::US5::US5_0(string("gleam")),
                                                    Spiral::US5::US5_0(v415),
                                                    Spiral::US5::US5_0(v114),
                                                    Spiral::US5::US5_0(v2160.unwrap()),
                                                )
                                            }
                                        };
                                        (
                                            patternInput_5.0.clone(),
                                            patternInput_5.1.clone(),
                                            patternInput_5.2.clone(),
                                            patternInput_5.3.clone(),
                                        )
                                    }
                                };
                                let v2174: Spiral::US5 = patternInput_6.3.clone();
                                let v2172: Spiral::US5 = patternInput_6.1.clone();
                                let v2171: Spiral::US5 = patternInput_6.0.clone();
                                let v2186: Array<(string, string)> = new_array(&[
                                    (
                                        string("extension"),
                                        match &v2171 {
                                            Spiral::US5::US5_0(v2171_0_0) => match &v2171 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v2172 {
                                            Spiral::US5::US5_0(v2172_0_0) => match &v2172 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v2174 {
                                            Spiral::US5::US5_0(v2174_0_0) => match &v2174 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                ]);
                                let v2188: Vec<(string, string)> = v2186.to_vec();
                                let v2191: bool = true;
                                let _func1_from_v2189 = Func1::from(move |value| {
                                    //;
                                    let patternInput_7: (string, string) = value;
                                    let v2201: &str = &*patternInput_7.0.clone();
                                    let v2234: std::string::String = String::from(v2201);
                                    let v2267: &str = &*patternInput_7.1.clone();
                                    let v2300: std::string::String = String::from(v2267);
                                    let v2333: bool = true;
                                    LrcPtr::new((v2234, v2300)) /*;
                                    let v2335: bool = */
                                }); //;
                                let v2337: Func1<
                                    (string, string),
                                    LrcPtr<(std::string::String, std::string::String)>,
                                > = _func1_from_v2189;
                                let v2340: Vec<LrcPtr<(std::string::String, std::string::String)>> =
                                    v2188
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v2337 = v2337.clone();
                                                move |arg10_0040_14: (string, string)| {
                                                    Spiral::closure76(v2337.clone(), arg10_0040_14)
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                let v2341: string = string(
                                    "std::collections::BTreeMap::from_iter(v2340.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))",
                                );
                                let v2342: std::collections::BTreeMap<
                                    std::string::String,
                                    std::string::String,
                                > = std::collections::BTreeMap::from_iter(
                                    v2340
                                        .iter()
                                        .map(|x| x.as_ref())
                                        .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                                );
                                let v2344: Result<std::string::String, serde_json::Error> =
                                    serde_json::to_string(&v2342);
                                let v2348: std::string::String = v2344.unwrap();
                                new_array(&[(
                                    string("command_result"),
                                    fable_library_rust::String_::fromString(v2348),
                                )])
                            }
                        } else {
                            if (fable_library_rust::String_::fromString(v40.clone()))
                                == string("cuda")
                            {
                                let v2367: string = Spiral::method163();
                                let v2374: &str = &*v2367;
                                let v2402: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v41.clone(), v2374).cloned();
                                let v2427: Spiral::US7 = defaultValue(
                                    Spiral::US7::US7_1,
                                    map(Spiral::method21(), v2402),
                                );
                                let v2434: std::string::String = match &v2427 {
                                    Spiral::US7::US7_0(v2427_0_0) => match &v2427 {
                                        Spiral::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => panic!("{}", string("Option does not have a value."),),
                                };
                                let v2436: string = fable_library_rust::String_::fromString(v2434);
                                let v2437: string = Spiral::method164();
                                let v2444: &str = &*v2437;
                                let v2472: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v41.clone(), v2444).cloned();
                                let v2497: Spiral::US7 = defaultValue(
                                    Spiral::US7::US7_1,
                                    map(Spiral::method21(), v2472),
                                );
                                let v2558: Spiral::US36 = match &v2497 {
                                    Spiral::US7::US7_0(v2497_0_0) => {
                                        let v2503: string = fable_library_rust::String_::fromString(
                                            match &v2497 {
                                                Spiral::US7::US7_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v2508: string = toLower(string("Poetry"));
                                        let v2515: string = toLower(string("Pip"));
                                        let v2522: Spiral::US37 =
                                            if string("Pip") == (v2503.clone()) {
                                                Spiral::US37::US37_0(Spiral::US38::US38_0)
                                            } else {
                                                Spiral::US37::US37_1
                                            };
                                        Spiral::US36::US36_0(match &v2522 {
                                            Spiral::US37::US37_0(v2522_0_0) => {
                                                Spiral::US37::US37_0(
                                                    match &v2522 {
                                                        Spiral::US37::US37_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                )
                                            }
                                            _ => {
                                                let v2529: Spiral::US37 =
                                                    if string("Poetry") == (v2503.clone()) {
                                                        Spiral::US37::US37_0(Spiral::US38::US38_1)
                                                    } else {
                                                        Spiral::US37::US37_1
                                                    };
                                                match &v2529 {
                                                    Spiral::US37::US37_0(v2529_0_0) => {
                                                        Spiral::US37::US37_0(
                                                            match &v2529 {
                                                                Spiral::US37::US37_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => {
                                                        let v2536: Spiral::US37 =
                                                            if (v2515.clone()) == (v2503.clone()) {
                                                                Spiral::US37::US37_0(
                                                                    Spiral::US38::US38_0,
                                                                )
                                                            } else {
                                                                Spiral::US37::US37_1
                                                            };
                                                        match &v2536 {
                                                            Spiral::US37::US37_0(v2536_0_0) => {
                                                                Spiral::US37::US37_0(
                                                                    match &v2536 {
                                                                        Spiral::US37::US37_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone(),
                                                                )
                                                            }
                                                            _ => {
                                                                let v2543: Spiral::US37 = if (v2508
                                                                    .clone())
                                                                    == (v2503.clone())
                                                                {
                                                                    Spiral::US37::US37_0(
                                                                        Spiral::US38::US38_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US37::US37_1
                                                                };
                                                                match &v2543
                                                                                         {
                                                                                         Spiral::US37::US37_0(v2543_0_0)
                                                                                         =>
                                                                                         Spiral::US37::US37_0(match &v2543
                                                                                                                  {
                                                                                                                  Spiral::US37::US37_0(x)
                                                                                                                  =>
                                                                                                                  x.clone(),
                                                                                                                  _
                                                                                                                  =>
                                                                                                                  unreachable!(),
                                                                                                              }.clone()),
                                                                                         _
                                                                                         =>
                                                                                         Spiral::US37::US37_1,
                                                                                     }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        })
                                    }
                                    _ => Spiral::US36::US36_1,
                                };
                                let v2565: Spiral::US37 =
                                    if let Spiral::US36::US36_0(v2558_0_0) = &v2558 {
                                        let v2559: Spiral::US37 = v2558_0_0.clone();
                                        if let Spiral::US37::US37_0(v2559_0_0) = &v2559 {
                                            Spiral::US37::US37_0(v2559_0_0.clone())
                                        } else {
                                            Spiral::US37::US37_1
                                        }
                                    } else {
                                        Spiral::US37::US37_1
                                    };
                                let v2569: Spiral::US38 = match &v2565 {
                                    Spiral::US37::US37_0(v2565_0_0) => match &v2565 {
                                        Spiral::US37::US37_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => Spiral::US38::US38_0,
                                };
                                let v2570: string = Spiral::method23();
                                let v2577: &str = &*v2570;
                                let v2605: Option<Vec<std::string::String>> =
                                    clap::ArgMatches::get_many(&v41.clone(), v2577)
                                        .map(|x| x.cloned().into_iter().collect());
                                let v2630: Spiral::US11 = defaultValue(
                                    Spiral::US11::US11_1,
                                    map(Spiral::method24(), v2605),
                                );
                                let v2636: Vec<std::string::String> =
                                    new_empty::<std::string::String>().to_vec();
                                let v2639: Vec<std::string::String> = match &v2630 {
                                    Spiral::US11::US11_0(v2630_0_0) => match &v2630 {
                                        Spiral::US11::US11_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => v2636.clone(),
                                };
                                let v2651: Result<Vec<u8>, std::io::Error> =
                                    std::fs::read(&*v2436.clone());
                                let v2696: Vec<u8> = Spiral::method25(v2651.unwrap());
                                let v2698: Result<std::string::String, std::string::FromUtf8Error> =
                                    std::string::String::from_utf8(v2696);
                                let v2702: std::string::String = v2698.unwrap();
                                let v2715: string = fable_library_rust::String_::fromString(v2702);
                                let v2744: Spiral::US5 = Spiral::method32(Spiral::method31());
                                let v2750: Spiral::US5 = match &v2744 {
                                    Spiral::US5::US5_0(v2744_0_0) => Spiral::US5::US5_0(
                                        match &v2744 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::method32(string(
                                        "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                    )),
                                };
                                let v2756: Spiral::US5 = match &v2750 {
                                    Spiral::US5::US5_0(v2750_0_0) => Spiral::US5::US5_0(
                                        match &v2750 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::method32(string("/workspaces")),
                                };
                                let v2760: string = match &v2756 {
                                    Spiral::US5::US5_0(v2756_0_0) => match &v2756 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => panic!("{}", string("Option does not have a value."),),
                                };
                                let v2775: string = Spiral::method33(
                                    if string("deps") == (Spiral::method50(v2760.clone())) {
                                        let v2768: Spiral::US5 = Spiral::method32(
                                            Spiral::method38(v2760.clone()).clone().unwrap(),
                                        );
                                        match &v2768 {
                                            Spiral::US5::US5_0(v2768_0_0) => match &v2768 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        }
                                    } else {
                                        v2760
                                    },
                                    string("polyglot"),
                                );
                                let v2779: string = toLower(Spiral::method31());
                                let v2784: string = toLower(v2775);
                                let v2793: Spiral::US13 =
                                    if startsWith3(v2779, v2784.clone(), false) {
                                        Spiral::US13::US13_1(v2784.clone())
                                    } else {
                                        Spiral::US13::US13_0(v2784)
                                    };
                                let v2805: Result<string, string> = match &v2793 {
                                    Spiral::US13::US13_0(v2793_0_0) => {
                                        Ok::<string, string>(v2793_0_0.clone())
                                    }
                                    Spiral::US13::US13_1(v2793_1_0) => {
                                        Err::<string, string>(v2793_1_0.clone())
                                    }
                                };
                                let v2807: bool = true;
                                let _result_unwrap_or_else = v2805.unwrap_or_else(|x| {
                                    //;
                                    let v2809: string = x;
                                    let v2811: bool = true;
                                    v2809
                                });
                                let v2813: string = _result_unwrap_or_else;
                                let v2818: string =
                                    defaultValue(string(""), Spiral::method38(v2436.clone()));
                                let v2826: string = match &v2569 {
                                    Spiral::US38::US38_1 => {
                                        Spiral::method33(v2818.clone(), string("pyproject.toml"))
                                    }
                                    _ => {
                                        Spiral::method33(v2818.clone(), string("requirements.txt"))
                                    }
                                };
                                let v2828: bool = true;
                                let _vec_map: Vec<_> = v2639
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2830: std::string::String = x;
                                        let v2832: string =
                                            fable_library_rust::String_::fromString(v2830);
                                        let v2851: string = if contains(v2832.clone(), string("="))
                                        {
                                            v2832.clone()
                                        } else {
                                            if endsWith3(v2832.clone(), string("]"), false) {
                                                concat(new_array(&[
                                                    replace(
                                                        v2832.clone(),
                                                        string("["),
                                                        string("={version=\'*\',features=["),
                                                    ),
                                                    string("}"),
                                                ]))
                                            } else {
                                                concat(new_array(&[v2832, string("=\'*\'")]))
                                            }
                                        };
                                        let v2853: bool = true;
                                        v2851
                                    })
                                    .collect::<Vec<_>>();
                                let v2855: Vec<string> = _vec_map;
                                let v2857: Array<string> =
                                    fable_library_rust::NativeArray_::array_from(v2855.clone());
                                let _let__v2862: LrcPtr<dyn IEnumerable_1<string>> =
                                    delay(Func0::new({
                                        let v2857 = v2857.clone();
                                        move || {
                                            map_1(
                                                Func1::new({
                                                    let v2857 = v2857.clone();
                                                    move |i_1: i32| v2857[i_1].clone()
                                                }),
                                                rangeNumeric(
                                                    0_i32,
                                                    1_i32,
                                                    (get_Count(v2857.clone())) - 1_i32,
                                                ),
                                            )
                                        }
                                    }));
                                let v2876: string =
                                    join(Spiral::method69(), toArray_1(_let__v2862));
                                let patternInput_8: (i32, string) = if (v2876.clone()) == string("")
                                {
                                    (0_i32, string(""))
                                } else {
                                    Spiral::method70(
                                        v2826,
                                        match &v2569 {
                                            Spiral::US38::US38_1 => append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(
                                                                                    "[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n",
                                                                                ),
                                                                                (v2876.clone()),
                                                                            )),
                                                                            string("\n"),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string("\n"),
                                                                )),
                                                                string("[build-system]"),
                                                            )),
                                                            string("\n"),
                                                        )),
                                                        string("requires = [\"poetry-core\"]"),
                                                    )),
                                                    string("\n"),
                                                )),
                                                string(
                                                    "build-backend = \"poetry.core.masonry.api\"",
                                                ),
                                            ),
                                            _ => v2876.clone(),
                                        },
                                    );
                                    Spiral::method91(
                                        match &v2569 {
                                            Spiral::US38::US38_1 => string("poetry install"),
                                            _ => string("pip install -r requirements.txt"),
                                        },
                                        None::<CancellationToken>,
                                        new_empty::<(string, string)>(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v2818.clone()),
                                    )
                                };
                                let v3022: i32 = patternInput_8.0.clone();
                                let patternInput_12: (
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                ) = if (v3022) != 0_i32 {
                                    let v3090: () = {
                                        Spiral::closure77(
                                            v2569.clone(),
                                            v2436.clone(),
                                            patternInput_8.1.clone(),
                                            v3022,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral::US5::US5_0(string("py")),
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                    )
                                } else {
                                    let v3159: string = match &v2569 {
                                        Spiral::US38::US38_1 => concat(new_array(&[
                                            string("poetry run python \""),
                                            v2436.clone(),
                                            string("\""),
                                        ])),
                                        _ => concat(new_array(&[
                                            string("python \""),
                                            v2436.clone(),
                                            string("\""),
                                        ])),
                                    };
                                    let v3162: Array<(string, string)> =
                                        new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                                    let patternInput_9: (i32, string) = Spiral::method91(
                                        v3159.clone(),
                                        None::<CancellationToken>,
                                        v3162.clone(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v2818.clone()),
                                    );
                                    let v3186: string = patternInput_9.1.clone();
                                    let v3185: i32 = patternInput_9.0.clone();
                                    let v3187: i32 = get_Count(v3162.clone());
                                    let v3188: Array<string> = new_init(&string(""), v3187);
                                    let v3189: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method29(v3187, v3189.clone()) {
                                        let v3191: i32 = v3189.l0.get().clone();
                                        let patternInput_10: (string, string) =
                                            v3162[v3191].clone();
                                        let v3194: string = sprintf!(
                                            "$env:{}=\'\'{}\'\'",
                                            patternInput_10.0.clone(),
                                            patternInput_10.1.clone()
                                        );
                                        v3188.get_mut()[v3191 as usize] = v3194;
                                        {
                                            let v3195: i32 = (v3191) + 1_i32;
                                            v3189.l0.set(v3195);
                                            ()
                                        }
                                    }
                                    {
                                        let v3208: string = sprintf!(
                                            "pwsh -c \'{}; {}\'",
                                            join(string(";"), toArray_1(ofArray_1(v3188.clone()))),
                                            v3159
                                        );
                                        let patternInput_11: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if if (v3185) == 0_i32 {
                                            true
                                        } else {
                                            contains(
                                                v3186.clone(),
                                                string(
                                                    "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver",
                                                ),
                                            )
                                        } {
                                            let result_1: LrcPtr<MutCell<Spiral::US5>> =
                                                refCell(Spiral::US5::US5_1);
                                            try_catch(
                                                || {
                                                    result_1.set(Spiral::closure72(
                                                        (),
                                                        Spiral::closure78(v3186.clone(), ()),
                                                    ))
                                                },
                                                |ex_1: LrcPtr<Exception>| {
                                                    result_1.set(Spiral::closure79(
                                                        v2436.clone(),
                                                        v3186.clone(),
                                                        v3208.clone(),
                                                        ex_1.clone(),
                                                    ))
                                                },
                                            );
                                            {
                                                let v3222: Spiral::US5 = result_1.get().clone();
                                                let v3236: Option<string> = match &v3222 {
                                                    Spiral::US5::US5_0(v3222_0_0) => Some(
                                                        match &v3222 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    ),
                                                    _ => None::<string>,
                                                };
                                                (
                                                    Spiral::US5::US5_0(string("py")),
                                                    Spiral::US5::US5_0(v2715),
                                                    Spiral::US5::US5_0(v2436.clone()),
                                                    Spiral::US5::US5_0(v3236.unwrap()),
                                                )
                                            }
                                        } else {
                                            let v3306: () = {
                                                Spiral::closure81(
                                                    v2436.clone(),
                                                    v3186,
                                                    v3185,
                                                    v3208,
                                                    (),
                                                );
                                                ()
                                            };
                                            (
                                                Spiral::US5::US5_0(string("py")),
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                            )
                                        };
                                        (
                                            patternInput_11.0.clone(),
                                            patternInput_11.1.clone(),
                                            patternInput_11.2.clone(),
                                            patternInput_11.3.clone(),
                                        )
                                    }
                                };
                                let v3379: Spiral::US5 = patternInput_12.3.clone();
                                let v3377: Spiral::US5 = patternInput_12.1.clone();
                                let v3376: Spiral::US5 = patternInput_12.0.clone();
                                let v3392: Array<(string, string)> = new_array(&[
                                    (
                                        string("extension"),
                                        match &v3376 {
                                            Spiral::US5::US5_0(v3376_0_0) => match &v3376 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v3377 {
                                            Spiral::US5::US5_0(v3377_0_0) => match &v3377 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v3379 {
                                            Spiral::US5::US5_0(v3379_0_0) => match &v3379 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                ]);
                                let v3394: Vec<(string, string)> = v3392.to_vec();
                                let v3397: bool = true;
                                let _func1_from_v3395 = Func1::from(move |value| {
                                    //;
                                    let patternInput_13: (string, string) = value;
                                    let v3407: &str = &*patternInput_13.0.clone();
                                    let v3440: std::string::String = String::from(v3407);
                                    let v3473: &str = &*patternInput_13.1.clone();
                                    let v3506: std::string::String = String::from(v3473);
                                    let v3539: bool = true;
                                    LrcPtr::new((v3440, v3506)) /*;
                                    let v3541: bool = */
                                }); //;
                                let v3543: Func1<
                                    (string, string),
                                    LrcPtr<(std::string::String, std::string::String)>,
                                > = _func1_from_v3395;
                                let v3546: Vec<LrcPtr<(std::string::String, std::string::String)>> =
                                    v3394
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v3543 = v3543.clone();
                                                move |arg10_0040_18: (string, string)| {
                                                    Spiral::closure76(v3543.clone(), arg10_0040_18)
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                let v3547: string = string(
                                    "std::collections::BTreeMap::from_iter(v3546.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))",
                                );
                                let v3548: std::collections::BTreeMap<
                                    std::string::String,
                                    std::string::String,
                                > = std::collections::BTreeMap::from_iter(
                                    v3546
                                        .iter()
                                        .map(|x| x.as_ref())
                                        .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                                );
                                let v3550: Result<std::string::String, serde_json::Error> =
                                    serde_json::to_string(&v3548);
                                let v3554: std::string::String = v3550.unwrap();
                                new_array(&[(
                                    string("command_result"),
                                    fable_library_rust::String_::fromString(v3554),
                                )])
                            } else {
                                if (fable_library_rust::String_::fromString(v40.clone()))
                                    == string("fable")
                                {
                                    let v3573: string = Spiral::method168();
                                    let v3580: &str = &*v3573;
                                    let v3608: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v41.clone(), v3580).cloned();
                                    let v3633: Spiral::US7 = defaultValue(
                                        Spiral::US7::US7_1,
                                        map(Spiral::method21(), v3608),
                                    );
                                    let v3640: std::string::String = match &v3633 {
                                        Spiral::US7::US7_0(v3633_0_0) => match &v3633 {
                                            Spiral::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v3642: string =
                                        fable_library_rust::String_::fromString(v3640);
                                    let v3643: string = Spiral::method169();
                                    let v3650: &str = &*v3643;
                                    let v3678: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v41.clone(), v3650).cloned();
                                    let v3703: Spiral::US7 = defaultValue(
                                        Spiral::US7::US7_1,
                                        map(Spiral::method21(), v3678),
                                    );
                                    let v3713: Spiral::US5 = match &v3703 {
                                        Spiral::US7::US7_0(v3703_0_0) => Spiral::US5::US5_0(
                                            fable_library_rust::String_::fromString(
                                                match &v3703 {
                                                    Spiral::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    };
                                    new_array(&[(
                                        string("command_result"),
                                        match &v3713 {
                                            Spiral::US5::US5_0(v3713_0_0) => {
                                                let v3715: clap::Command = Spiral::method0();
                                                let v3717: Spiral::US25 =
                                                    Spiral::method106(sprintf!(
                                                        "_ {} --fs-path \"{}\"",
                                                        match &v3713 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                        v3642.clone()
                                                    ));
                                                let v3726: Array<string> = match &v3717 {
                                                    Spiral::US25::US25_0(v3717_0_0) => {
                                                        v3717_0_0.clone()
                                                    }
                                                    Spiral::US25::US25_1(v3717_1_0) => panic!(
                                                        "{}",
                                                        concat(new_array(&[
                                                            string(
                                                                "resultm.get / Result value was Error: "
                                                            ),
                                                            v3717_1_0.clone()
                                                        ])),
                                                    ),
                                                };
                                                let v3728: Vec<string> = v3726.to_vec();
                                                let v3730: bool = true;
                                                let _vec_map: Vec<_> = v3728
                                                    .into_iter()
                                                    .map(|x| {
                                                        //;
                                                        let v3732: string = x;
                                                        let v3739: &str = &*v3732;
                                                        let v3772: std::string::String =
                                                            String::from(v3739);
                                                        let v3800: bool = true;
                                                        v3772
                                                    })
                                                    .collect::<Vec<_>>();
                                                let v3802: Vec<std::string::String> = _vec_map;
                                                let v3805: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                                Output = Result<string, string>,
                                                            >,
                                                    >,
                                                > = Spiral::method18(
                                                    v0_1.clone(),
                                                    clap::Command::get_matches_from(v3715, v3802),
                                                );
                                                let v3807: Result<string, string> = v3805.await;
                                                v3807.unwrap()
                                            }
                                            _ => string("{}"),
                                        },
                                    )])
                                } else {
                                    if (fable_library_rust::String_::fromString(v40.clone()))
                                        == string("dib")
                                    {
                                        let v3831: string = Spiral::method170();
                                        let v3838: &str = &*v3831;
                                        let v3866: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v41.clone(), v3838).cloned();
                                        let v3870: Option<string> = map(Spiral::method171(), v3866);
                                        let v3891: string = v3870.unwrap();
                                        let v3892: string = Spiral::method173();
                                        let v3899: &str = &*v3892;
                                        let v3929: u8 = defaultValue(
                                            1_u8,
                                            clap::ArgMatches::get_one(&v41.clone(), v3899).cloned(),
                                        );
                                        let v3932: string = Spiral::method174();
                                        let v3939: &str = &*v3932;
                                        let v3967: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v41.clone(), v3939).cloned();
                                        let v3992: Spiral::US7 = defaultValue(
                                            Spiral::US7::US7_1,
                                            map(Spiral::method21(), v3967),
                                        );
                                        let patternInput_14: (i32, string) = Spiral::method175(
                                            match &v3992 {
                                                Spiral::US7::US7_0(v3992_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v3992 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            },
                                            v3929,
                                            v3891.clone(),
                                            1_u8,
                                        );
                                        let v4005: string = patternInput_14.1.clone();
                                        let v4004: i32 = patternInput_14.0.clone();
                                        let patternInput_17: (i32, string) = if (v4004) != 0_i32 {
                                            (v4004, v4005.clone())
                                        } else {
                                            let patternInput_15: (i32, string) = Spiral::method91(
                                                concat(new_array(&[
                                                    string("jupyter nbconvert \""),
                                                    v3891.clone(),
                                                    string(
                                                        ".ipynb\" --to html --HTMLExporter.theme=dark",
                                                    ),
                                                ])),
                                                None::<CancellationToken>,
                                                new_empty::<(string, string)>(),
                                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                                None::<
                                                    Func1<
                                                        std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        >,
                                                        (),
                                                    >,
                                                >,
                                                true,
                                                None::<string>,
                                            );
                                            let v4030: string = patternInput_15.1.clone();
                                            let v4029: i32 = patternInput_15.0.clone();
                                            let v4094: () = {
                                                Spiral::closure84(v4030.clone(), v4029, ());
                                                ()
                                            };
                                            if (v4029) != 0_i32 {
                                                (
                                                    v4029,
                                                    concat(new_array(&[
                                                        string("repl_result: "),
                                                        v4005.clone(),
                                                        string("\n\njupyter_result: "),
                                                        v4030.clone(),
                                                    ])),
                                                )
                                            } else {
                                                let patternInput_16: (i32, string) =
                                                    Spiral::method91(
                                                        concat(new_array(&[
                                                            string(
                                                                "pwsh -c \"$counter = 1; $path = \'",
                                                            ),
                                                            replace(
                                                                v3891.clone(),
                                                                string("\'"),
                                                                string("\'\'"),
                                                            ),
                                                            string(
                                                                ".html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{8}\', { $_.Groups[1].Value + $counter++ } | Set-Content $path\"",
                                                            ),
                                                        ])),
                                                        None::<CancellationToken>,
                                                        new_empty::<(string, string)>(),
                                                        None::<
                                                            Func1<
                                                                (i32, string, bool),
                                                                Arc<Async<()>>,
                                                            >,
                                                        >,
                                                        None::<
                                                            Func1<
                                                                std::sync::Arc<
                                                                    std::sync::Mutex<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                >,
                                                                (),
                                                            >,
                                                        >,
                                                        true,
                                                        None::<string>,
                                                    );
                                                let v4184: string = patternInput_16.1.clone();
                                                let v4183: i32 = patternInput_16.0.clone();
                                                let v4248: () = {
                                                    Spiral::closure85(v4184.clone(), v4183, ());
                                                    ()
                                                };
                                                let v4310: string = concat(new_array(&[
                                                    v3891.clone(),
                                                    string(".html"),
                                                ]));
                                                let v4322: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v4310);
                                                let v4367: Vec<u8> =
                                                    Spiral::method25(v4322.unwrap());
                                                let v4369: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v4367);
                                                let v4373: std::string::String = v4369.unwrap();
                                                let v4416: string = replace(
                                                    fable_library_rust::String_::fromString(v4373),
                                                    string("\r\n"),
                                                    string("\n"),
                                                );
                                                let v4417: string = concat(new_array(&[
                                                    v3891.clone(),
                                                    string(".html"),
                                                ]));
                                                std::fs::write(&*v4417, &*v4416).unwrap();
                                                {
                                                    let v4420: string = concat(new_array(&[
                                                        v3891.clone(),
                                                        string(".ipynb"),
                                                    ]));
                                                    let v4432: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v4420);
                                                    let v4477: Vec<u8> =
                                                        Spiral::method25(v4432.unwrap());
                                                    let v4479: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v4477);
                                                    let v4483: std::string::String = v4479.unwrap();
                                                    let v4527: string = replace(
                                                        replace(
                                                            fable_library_rust::String_::fromString(
                                                                v4483,
                                                            ),
                                                            string("\r\n"),
                                                            string("\n"),
                                                        ),
                                                        string("\\r\\n"),
                                                        string("\\n"),
                                                    );
                                                    let v4528: string = concat(new_array(&[
                                                        v3891,
                                                        string(".ipynb"),
                                                    ]));
                                                    std::fs::write(&*v4528, &*v4527).unwrap();
                                                    (
                                                        v4183,
                                                        sprintf!(
                                                            "repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                            v4005,
                                                            v4030,
                                                            v4184
                                                        ),
                                                    )
                                                }
                                            }
                                        };
                                        let v4535: string = patternInput_17.1.clone();
                                        let v4534: i32 = patternInput_17.0.clone();
                                        let v4599: () = {
                                            Spiral::closure86(v4535.clone(), v4534, ());
                                            ()
                                        };
                                        if (v4534) != 0_i32 {
                                            panic!(
                                                "{}",
                                                sprintf!(
                                                    "spiral.run / dib / exit_code: {} / result: {}",
                                                    v4534,
                                                    v4535.clone()
                                                )
                                            );
                                        }
                                        new_array(&[(string("stdio"), v4535)])
                                    } else {
                                        let patternInput_40: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if (fable_library_rust::String_::fromString(
                                            v40.clone(),
                                        )) == string("rust")
                                        {
                                            let v4671: string = Spiral::method168();
                                            let v4678: &str = &*v4671;
                                            let v4706: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v4678)
                                                    .cloned();
                                            let v4731: Spiral::US7 = defaultValue(
                                                Spiral::US7::US7_1,
                                                map(Spiral::method21(), v4706),
                                            );
                                            let v4738: std::string::String = match &v4731 {
                                                Spiral::US7::US7_0(v4731_0_0) => match &v4731 {
                                                    Spiral::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v4740: string =
                                                fable_library_rust::String_::fromString(v4738);
                                            let v4741: string = Spiral::method23();
                                            let v4748: &str = &*v4741;
                                            let v4776: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v41.clone(), v4748)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let v4801: Spiral::US11 = defaultValue(
                                                Spiral::US11::US11_1,
                                                map(Spiral::method24(), v4776),
                                            );
                                            let v4807: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v4810: Vec<std::string::String> = match &v4801 {
                                                Spiral::US11::US11_0(v4801_0_0) => match &v4801 {
                                                    Spiral::US11::US11_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => v4807.clone(),
                                            };
                                            let v4811: string = Spiral::method180();
                                            let v4818: &str = &*v4811;
                                            let v4846: bool =
                                                clap::ArgMatches::get_flag(&v41.clone(), v4818);
                                            let v4847: string = Spiral::method181();
                                            let v4854: &str = &*v4847;
                                            let v4882: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v4854)
                                                    .cloned();
                                            let v4907: Spiral::US7 = defaultValue(
                                                Spiral::US7::US7_1,
                                                map(Spiral::method21(), v4882),
                                            );
                                            let v4917: Spiral::US5 = match &v4907 {
                                                Spiral::US7::US7_0(v4907_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v4907 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            };
                                            let v4918: string = Spiral::method182();
                                            let v4925: &str = &*v4918;
                                            let v4953: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v4925)
                                                    .cloned();
                                            let v4978: Spiral::US7 = defaultValue(
                                                Spiral::US7::US7_1,
                                                map(Spiral::method21(), v4953),
                                            );
                                            let v4988: Spiral::US5 = match &v4978 {
                                                Spiral::US7::US7_0(v4978_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v4978 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            };
                                            let v4997: Spiral::US39 =
                                                if let Spiral::US5::US5_0(v4917_0_0) = &v4917 {
                                                    Spiral::US39::US39_0(Spiral::US40::US40_0(
                                                        v4917_0_0.clone(),
                                                    ))
                                                } else {
                                                    if let Spiral::US5::US5_0(v4988_0_0) = &v4988 {
                                                        Spiral::US39::US39_0(Spiral::US40::US40_1(
                                                            v4988_0_0.clone(),
                                                        ))
                                                    } else {
                                                        Spiral::US39::US39_1
                                                    }
                                                };
                                            let v5009: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v4740);
                                            let v5054: Vec<u8> = Spiral::method25(v5009.unwrap());
                                            let v5056: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v5054);
                                            let v5060: std::string::String = v5056.unwrap();
                                            let v5095: string =
                                                fable_library_rust::String_::fromString(v5060);
                                            let v5102: LrcPtr<Spiral::Mut3> =
                                                LrcPtr::new(Spiral::Mut3 {
                                                    l0: MutCell::new(Spiral::method13()),
                                                });
                                            let v5116: () = {
                                                Spiral::closure7(v5102.clone(), string("{ "), ());
                                                ()
                                            };
                                            let v5135: () = {
                                                Spiral::closure7(
                                                    v5102.clone(),
                                                    string("extension"),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v5154: () = {
                                                Spiral::closure7(v5102.clone(), string(" = "), ());
                                                ()
                                            };
                                            let v5173: () = {
                                                Spiral::closure7(v5102.clone(), string("rs"), ());
                                                ()
                                            };
                                            let v5192: () = {
                                                Spiral::closure7(v5102.clone(), string("; "), ());
                                                ()
                                            };
                                            let v5211: () = {
                                                Spiral::closure7(v5102.clone(), string("code"), ());
                                                ()
                                            };
                                            let v5228: () = {
                                                Spiral::closure7(v5102.clone(), string(" = "), ());
                                                ()
                                            };
                                            let v5245: () = {
                                                Spiral::closure7(v5102.clone(), v5095.clone(), ());
                                                ()
                                            };
                                            let v5262: () = {
                                                Spiral::closure7(v5102.clone(), string("; "), ());
                                                ()
                                            };
                                            let v5281: () = {
                                                Spiral::closure7(
                                                    v5102.clone(),
                                                    string("runtime"),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v5298: () = {
                                                Spiral::closure7(v5102.clone(), string(" = "), ());
                                                ()
                                            };
                                            let v5319: () = {
                                                Spiral::closure7(
                                                    v5102.clone(),
                                                    sprintf!("{:?}", v4997.clone()),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v5338: () = {
                                                Spiral::closure7(v5102.clone(), string(" }"), ());
                                                ()
                                            };
                                            let v5345: string =
                                                Spiral::method26(v5102.l0.get().clone());
                                            let v5347: Spiral::US5 =
                                                Spiral::method32(Spiral::method31());
                                            let v5353: Spiral::US5 = match &v5347 {
                                                Spiral::US5::US5_0(v5347_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        match &v5347 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    )
                                                }
                                                _ => Spiral::method32(string(
                                                    "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                                )),
                                            };
                                            let v5359: Spiral::US5 = match &v5353 {
                                                Spiral::US5::US5_0(v5353_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        match &v5353 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    )
                                                }
                                                _ => Spiral::method32(string("/workspaces")),
                                            };
                                            let v5363: string = match &v5359 {
                                                Spiral::US5::US5_0(v5359_0_0) => match &v5359 {
                                                    Spiral::US5::US5_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v5378: string = Spiral::method33(
                                                if string("deps")
                                                    == (Spiral::method50(v5363.clone()))
                                                {
                                                    let v5371: Spiral::US5 = Spiral::method32(
                                                        Spiral::method38(v5363.clone())
                                                            .clone()
                                                            .unwrap(),
                                                    );
                                                    match &v5371 {
                                                        Spiral::US5::US5_0(v5371_0_0) => {
                                                            match &v5371 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    }
                                                } else {
                                                    v5363
                                                },
                                                string("polyglot"),
                                            );
                                            let v5382: string = toLower(Spiral::method31());
                                            let v5387: string = toLower(v5378);
                                            let v5396: Spiral::US13 =
                                                if startsWith3(v5382, v5387.clone(), false) {
                                                    Spiral::US13::US13_1(v5387.clone())
                                                } else {
                                                    Spiral::US13::US13_0(v5387)
                                                };
                                            let v5408: Result<string, string> = match &v5396 {
                                                Spiral::US13::US13_0(v5396_0_0) => {
                                                    Ok::<string, string>(v5396_0_0.clone())
                                                }
                                                Spiral::US13::US13_1(v5396_1_0) => {
                                                    Err::<string, string>(v5396_1_0.clone())
                                                }
                                            };
                                            let v5410: bool = true;
                                            let _result_unwrap_or_else =
                                                v5408.unwrap_or_else(|x| {
                                                    //;
                                                    let v5412: string = x;
                                                    let v5414: bool = true;
                                                    v5412
                                                });
                                            let v5416: string = _result_unwrap_or_else;
                                            let v5421: string = Spiral::method183(
                                                Spiral::US5::US5_0(v5345.clone()),
                                                string("spiral"),
                                                Spiral::US42::US42_0(Spiral::US41::US41_0),
                                                v5416.clone(),
                                            );
                                            let v5427: string = Spiral::method184(
                                                v5095,
                                                string("spiral"),
                                                LrcPtr::new(Spiral::UH2::UH2_0),
                                                LrcPtr::new(Spiral::UH4::UH4_1(
                                                    string("Fable.Core"),
                                                    string("4.3.0"),
                                                    LrcPtr::new(Spiral::UH4::UH4_0),
                                                )),
                                                v5421.clone(),
                                                v5416.clone(),
                                            );
                                            let v5429: string =
                                                Spiral::method33(v5421.clone(), string("../../.."));
                                            let v5431: string = Spiral::method33(
                                                v5429.clone(),
                                                string("Cargo.toml"),
                                            );
                                            if (Spiral::method35(v5431.clone())) == false {
                                                let v5441: DateTime = DateTime::now();
                                                let v5464: string =
                                                    toString(Spiral::method187(new_guid(), v5441));
                                                let v5530: string =
                                                    append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                               v5464.clone(),
                                                                                                                                                                               string("\"")]))))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("version = \"0.0.1\""))),
                                                                                                                                   string("\n"))),
                                                                                                                           string("edition = \"2021\""))),
                                                                                                                   string("\n"))),
                                                                                                           string(""))),
                                                                                                   string("\n"))),
                                                                                           string("[[bin]]"))),
                                                                                   string("\n"))),
                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                               v5464,
                                                                                               string("\"")]))))),
                                                                   string("\n"))),
                                                           string("path = \"spiral.rs\""));
                                                std::fs::write(&*v5431.clone(), &*v5530).unwrap();
                                                ()
                                            }
                                            {
                                                let v5535: string = Spiral::method33(
                                                    v5421.clone(),
                                                    string("Cargo.toml"),
                                                );
                                                if (Spiral::method35(v5535.clone())) == false {
                                                    let v5545: DateTime = DateTime::now();
                                                    let v5568: string = toString(
                                                        Spiral::method187(new_guid(), v5545),
                                                    );
                                                    let v5634: string =
                                                        append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                   v5568.clone(),
                                                                                                                                                                                   string("\"")]))))),
                                                                                                                                                       string("\n"))),
                                                                                                                                               string("version = \"0.0.1\""))),
                                                                                                                                       string("\n"))),
                                                                                                                               string("edition = \"2021\""))),
                                                                                                                       string("\n"))),
                                                                                                               string(""))),
                                                                                                       string("\n"))),
                                                                                               string("[[bin]]"))),
                                                                                       string("\n"))),
                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                   v5568,
                                                                                                   string("\"")]))))),
                                                                       string("\n"))),
                                                               string("path = \"spiral.rs\""));
                                                    std::fs::write(&*v5535.clone(), &*v5634)
                                                        .unwrap();
                                                    ()
                                                }
                                                {
                                                    let v5640: string = Spiral::method33(
                                                        v5416.clone(),
                                                        string(
                                                            "lib/rust/fable/fable_modules/fable-library-rust",
                                                        ),
                                                    );
                                                    let v5642: string = Spiral::method33(
                                                        v5421.clone(),
                                                        string("fable_modules/fable-library-rust"),
                                                    );
                                                    Spiral::method192(v5640, v5642.clone());
                                                    {
                                                        let patternInput_18: (i32, string) =
                                                            Spiral::method193(
                                                                v4997.clone(),
                                                                v5421.clone(),
                                                                string("rs"),
                                                                v5427,
                                                                v5396.clone(),
                                                            );
                                                        let v5644: string =
                                                            patternInput_18.1.clone();
                                                        let v5643: i32 = patternInput_18.0.clone();
                                                        let patternInput_27: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v5643) != 0_i32 {
                                                            let v5711: () = {
                                                                Spiral::closure89(
                                                                    v5644.clone(),
                                                                    v5643,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("rs")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v5644),
                                                            )
                                                        } else {
                                                            let v5876: Vec<std::string::String> =
                                                                if if let Spiral::US39::US39_1 =
                                                                    &v4997
                                                                {
                                                                    true
                                                                } else {
                                                                    false
                                                                } {
                                                                    v4810.clone()
                                                                } else {
                                                                    let v5777 = Spiral::method200();
                                                                    let v5778: Vec<
                                                                        std::string::String,
                                                                    > = Spiral::method201(
                                                                        v4810.clone(),
                                                                    );
                                                                    let v5780: Vec<
                                                                        std::string::String,
                                                                    > = v5778
                                                                        .into_iter()
                                                                        .filter(|x| {
                                                                            v5777(x.clone().clone())
                                                                        })
                                                                        .collect::<Vec<_>>();
                                                                    if (v5780.len() as i32) > 0_i32
                                                                    {
                                                                        v4810.clone()
                                                                    } else {
                                                                        let v5804: &str =
                                                                            &*string("near-sdk");
                                                                        let v5864: Array<
                                                                            std::string::String,
                                                                        > = new_array(&[
                                                                            String::from(v5804),
                                                                        ]);
                                                                        let v5867: Vec<
                                                                            std::string::String,
                                                                        > = Spiral::method67(
                                                                            v5864.to_vec(),
                                                                        );
                                                                        let v5868: Vec<
                                                                            std::string::String,
                                                                        > = Spiral::method68(v4810);
                                                                        let v5870: bool = true;
                                                                        let mut v5868 = v5868;
                                                                        let v5872: bool = true;
                                                                        v5868.extend(v5867);
                                                                        v5868
                                                                    }
                                                                };
                                                            let v5878: bool = true;
                                                            let _vec_map : Vec<_> = v5876.into_iter().map(|x| { //;
                                                                let v5880:
                                                                        std::string::String =
                                                                    x;
                                                                let v5882:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v5880);
                                                                let v5901:
                                                                        string =
                                                                    if contains(v5882.clone(),
                                                                                string("="))
                                                                       {
                                                                        v5882.clone()
                                                                    } else {
                                                                        if endsWith3(v5882.clone(),
                                                                                     string("]"),
                                                                                     false)
                                                                           {
                                                                            concat(new_array(&[replace(v5882.clone(),
                                                                                                       string("["),
                                                                                                       string("={version=\'*\',features=[")),
                                                                                               string("}")]))
                                                                        } else {
                                                                            concat(new_array(&[v5882,
                                                                                               string("=\'*\'")]))
                                                                        }
                                                                    };
                                                                let v5903:
                                                                        bool =
                                                                    true; v5901 }).collect::<Vec<_>>();
                                                            let v5905: Vec<string> = _vec_map;
                                                            let v5907:
                                                                        Array<string> =
                                                                    fable_library_rust::NativeArray_::array_from(v5905.clone());
                                                            let _let__v5912: LrcPtr<
                                                                dyn IEnumerable_1<string>,
                                                            > = delay(Func0::new({
                                                                let v5907 = v5907.clone();
                                                                move || {
                                                                    map_1(
                                                                        Func1::new({
                                                                            let v5907 =
                                                                                v5907.clone();
                                                                            move |i_2: i32| {
                                                                                v5907[i_2].clone()
                                                                            }
                                                                        }),
                                                                        rangeNumeric(
                                                                            0_i32,
                                                                            1_i32,
                                                                            (get_Count(
                                                                                v5907.clone(),
                                                                            )) - 1_i32,
                                                                        ),
                                                                    )
                                                                }
                                                            }));
                                                            let v5926: string = join(
                                                                Spiral::method69(),
                                                                toArray_1(_let__v5912),
                                                            );
                                                            let v5931: string = Spiral::method33(
                                                                v5421,
                                                                concat(new_array(&[
                                                                    string("spiral"),
                                                                    string("."),
                                                                    string("rs"),
                                                                ])),
                                                            );
                                                            let v5943: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v5931.clone());
                                                            let v5988: Vec<u8> =
                                                                Spiral::method25(v5943.unwrap());
                                                            let v5990: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v5988,
                                                            );
                                                            let v5994: std::string::String =
                                                                v5990.unwrap();
                                                            let v6029:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v5994);
                                                            let v6039: string = append(
                                                                string("on_startup!"),
                                                                (Spiral::method202()),
                                                            );
                                                            let v6046: string = append(
                                                                string(" method0"),
                                                                (Spiral::method203()),
                                                            );
                                                            let v6058: bool = if contains(
                                                                v6029.clone(),
                                                                v6039.clone(),
                                                            ) {
                                                                (contains(v6029, v6046)) == false
                                                            } else {
                                                                false
                                                            };
                                                            let v6218:
                                                                        string =
                                                                    append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("cargo-features = [\"edition2024\"]\n\n[package]\n"),
                                                                                                                                                                                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                                                                                               v5345.clone(),
                                                                                                                                                                                                                                                               string("\"")]))))),
                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                           string("version = \"0.0.1\""))),
                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                           string("edition = \"2024\""))),
                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                           string(""))),
                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                           string("[dependencies]"))),
                                                                                                                                                                   string("\n"))),
                                                                                                                                                           (if !((v4997.clone())
                                                                                                                                                                     ==
                                                                                                                                                                     Spiral::US39::US39_1)
                                                                                                                                                               {
                                                                                                                                                                string("fable_library_rust = { workspace = true }")
                                                                                                                                                            } else {
                                                                                                                                                                append((append((append(string("fable_library_rust = { workspace = true, features = ["),
                                                                                                                                                                                       (if v6058
                                                                                                                                                                                           {
                                                                                                                                                                                            string("\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                                        } else {
                                                                                                                                                                                            string("\"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                                        }))),
                                                                                                                                                                               string("]"))),
                                                                                                                                                                       string("}"))
                                                                                                                                                            }))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("inline_colorization = { workspace = true }"))),
                                                                                                                                   string("\n"))),
                                                                                                                           (v5926))),
                                                                                                                   string("\n"))),
                                                                                                           string(""))),
                                                                                                   string("\n"))),
                                                                                           (if if let Spiral::US39::US39_1
                                                                                                      =
                                                                                                      &v4997
                                                                                                  {
                                                                                                   true
                                                                                               } else {
                                                                                                   false
                                                                                               }
                                                                                               {
                                                                                                append(string("[[bin]]\n"),
                                                                                                       (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                           v5345.clone(),
                                                                                                                           string("\"")]))))
                                                                                            } else {
                                                                                                string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                            }))),
                                                                                   string("\n"))),
                                                                           string("path = \"spiral.rs\""));
                                                            let v6409:
                                                                        string =
                                                                    append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                                           (concat(new_array(&[string("path = \""),
                                                                                                                                                                                                                                                                                                                               Spiral::method42(v5416.clone()),
                                                                                                                                                                                                                                                                                                                               string("/lib/rust/fable/fable_modules/fable-library-rust\"")]))))),
                                                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                                                           string("default-features = false"))),
                                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                                           string("features = []"))),
                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                           string(""))),
                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                           string("[workspace.dependencies]"))),
                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                           string("inline_colorization = \"~0.1\""))),
                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                           string(""))),
                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                           string("[profile.release]"))),
                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                           string("codegen-units = 1"))),
                                                                                                                                                                   string("\n"))),
                                                                                                                                                           string("opt-level = \"z\""))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("lto = true"))),
                                                                                                                                   string("\n"))),
                                                                                                                           string("debug = false"))),
                                                                                                                   string("\n"))),
                                                                                                           string("panic = \"abort\""))),
                                                                                                   string("\n"))),
                                                                                           string("overflow-checks = true"))),
                                                                                   string("\n"))),
                                                                           string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                            Spiral::method70(v5535.clone(), v6218);
                                                            Spiral::method70(v5431, v6409);
                                                            {
                                                                let v6413: string =
                                                                    Spiral::method33(
                                                                        v5642,
                                                                        string("src/Range.rs"),
                                                                    );
                                                                if Spiral::method35(v6413.clone()) {
                                                                    let v6426: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(
                                                                        &*v6413.clone(),
                                                                    );
                                                                    let v6471: Vec<u8> =
                                                                        Spiral::method25(
                                                                            v6426.unwrap(),
                                                                        );
                                                                    let v6473:
                                                                                Result<std::string::String,
                                                                                       std::string::FromUtf8Error> =
                                                                            std::string::String::from_utf8(v6471);
                                                                    let v6477: std::string::String =
                                                                        v6473.unwrap();
                                                                    Spiral::method70(v6413,
                                                                                         replace(replace(fable_library_rust::String_::fromString(v6477),
                                                                                                         string("use crate::String_::fromCharCode;"),
                                                                                                         string("use crate::String_::fromChar;")),
                                                                                                 string("fromCharCode(c)"),
                                                                                                 string("std::char::from_u32(c).unwrap()")))
                                                                }
                                                                {
                                                                    let patternInput_19: (
                                                                        i32,
                                                                        string,
                                                                    ) = Spiral::method204(
                                                                        v5396.clone(),
                                                                        v5535.clone(),
                                                                        1_u8,
                                                                    );
                                                                    let v6525: i32 =
                                                                        patternInput_19.0.clone();
                                                                    if (v6525) != 0_i32 {
                                                                        let v6593: () = {
                                                                            Spiral::closure93(
                                                                                patternInput_19
                                                                                    .1
                                                                                    .clone(),
                                                                                v6525,
                                                                                (),
                                                                            );
                                                                            ()
                                                                        };
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v6665: Result<
                                                                            Vec<u8>,
                                                                            std::io::Error,
                                                                        > = std::fs::read(
                                                                            &*v5931.clone(),
                                                                        );
                                                                        let v6710: Vec<u8> =
                                                                            Spiral::method25(
                                                                                v6665.unwrap(),
                                                                            );
                                                                        let v6712:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v6710);
                                                                        let v6716:
                                                                                    std::string::String =
                                                                                v6712.unwrap();
                                                                        let v6751:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v6716);
                                                                        let v6761: string = append(
                                                                            string(
                                                                                "pub fn main() -> Result<(), String> ",
                                                                            ),
                                                                            (Spiral::method209()),
                                                                        );
                                                                        let v6878:
                                                                                    string =
                                                                                append((append((if if let Spiral::US39::US39_1
                                                                                                          =
                                                                                                          &v4997
                                                                                                      {
                                                                                                       true
                                                                                                   } else {
                                                                                                       false
                                                                                                   }
                                                                                                   {
                                                                                                    string("")
                                                                                                } else {
                                                                                                    string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral::method0();\n    }\n}")
                                                                                                }),
                                                                                               string("\n"))),
                                                                                       (if if if let Spiral::US39::US39_1
                                                                                                     =
                                                                                                     &v4997
                                                                                                 {
                                                                                                  true
                                                                                              } else {
                                                                                                  false
                                                                                              }
                                                                                              {
                                                                                               contains(v6751.clone(),
                                                                                                        append((v6039.clone()),
                                                                                                               string("Spiral::method0()")))
                                                                                           } else {
                                                                                               false
                                                                                           }
                                                                                           {
                                                                                            concat(new_array(&[v6761.clone(),
                                                                                                               string(" Ok(Spiral::method0()) }")]))
                                                                                        } else {
                                                                                            concat(new_array(&[v6761.clone(),
                                                                                                               string(" Ok(()) }")]))
                                                                                        }));
                                                                        let v6882: bool = contains(
                                                                            v6751.clone(),
                                                                            v6761,
                                                                        );
                                                                        let v7078: string = if v6882
                                                                        {
                                                                            v6751.clone()
                                                                        } else {
                                                                            (if (if let Spiral::US39::US39_0(v4997_0_0)
                                                                                                =
                                                                                                &v4997
                                                                                            {
                                                                                             if let Spiral::US40::US40_1(v4997_1_0)
                                                                                                    =
                                                                                                    &v4997_0_0
                                                                                                {
                                                                                                 true
                                                                                             } else {
                                                                                                 false
                                                                                             }
                                                                                         } else {
                                                                                             false
                                                                                         })
                                                                                            ==
                                                                                            false
                                                                                        {
                                                                                         Func1::new(move
                                                                                                        |v_7:
                                                                                                             string|
                                                                                                        Spiral::closure94((),
                                                                                                                          v_7))
                                                                                     } else {
                                                                                         let v7072:
                                                                                                 string =
                                                                                             string("use fable_library_rust::DateTime_::DateTime;");
                                                                                         Func1::new({
                                                                                                        let v7072
                                                                                                            =
                                                                                                            v7072.clone();
                                                                                                        move
                                                                                                            |v_8:
                                                                                                                 string|
                                                                                                            Spiral::closure96(v7072.clone(),
                                                                                                                              v_8)
                                                                                                    })
                                                                                     })((if v6058
                                                                                            {
                                                                                             Func1::new(move
                                                                                                            |v_5:
                                                                                                                 string|
                                                                                                            Spiral::closure94((),
                                                                                                                              v_5))
                                                                                         } else {
                                                                                             let v7059:
                                                                                                     string =
                                                                                                 append(string("// "),
                                                                                                        (v6039.clone()));
                                                                                             Func1::new({
                                                                                                            let v6039
                                                                                                                =
                                                                                                                v6039.clone();
                                                                                                            let v7059
                                                                                                                =
                                                                                                                v7059.clone();
                                                                                                            move
                                                                                                                |v_6:
                                                                                                                     string|
                                                                                                                Spiral::closure95(v6039.clone(),
                                                                                                                                  v7059.clone(),
                                                                                                                                  v_6)
                                                                                                        })
                                                                                         })(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(Spiral::method60(string("\\(gen,"),
                                                                                                                                                                                             string("(f,"),
                                                                                                                                                                                             Spiral::method60(string("\\(gen\\("),
                                                                                                                                                                                                              string("(f("),
                                                                                                                                                                                                              replace(Spiral::method60(string("\\s\\sfable_library_rust::Native_::getZero\\(\\);"),
                                                                                                                                                                                                                                       string(" fable_library_rust::Native_::getZero::<()>();"),
                                                                                                                                                                                                                                       Spiral::method60(string("null\\(\\)"),
                                                                                                                                                                                                                                                        string("fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                        Spiral::method60(string("unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"),
                                                                                                                                                                                                                                                                         string("0"),
                                                                                                                                                                                                                                                                         Spiral::method60(string("unbox::<i32>\\(null\\(\\)"),
                                                                                                                                                                                                                                                                                          string("0"),
                                                                                                                                                                                                                                                                                          Spiral::method60(string("unbox::<string>\\(null\\(\\)"),
                                                                                                                                                                                                                                                                                                           string("fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                           Spiral::method60(string("unbox::<bool>\\(null\\(\\)"),
                                                                                                                                                                                                                                                                                                                            string("false"),
                                                                                                                                                                                                                                                                                                                            Spiral::method60(string(" null::<\\(\\)>\\(\\)"),
                                                                                                                                                                                                                                                                                                                                             string(" fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                                                             Spiral::method60(string("\\(null::<\\(\\)>\\(\\)"),
                                                                                                                                                                                                                                                                                                                                                              string("(fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                                                                              Spiral::method60(string("null::<\\(\\)>\\(\\)"),
                                                                                                                                                                                                                                                                                                                                                                               string("fable_library_rust::Native_::getZero()"),
                                                                                                                                                                                                                                                                                                                                                                               replace(replace(replace(Spiral::method60(string("\\s\\sgetZero\\(\\);"),
                                                                                                                                                                                                                                                                                                                                                                                                                        string(" getZero::<()>();"),
                                                                                                                                                                                                                                                                                                                                                                                                                        Spiral::method60(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                                                                                                                                                                                                                                                                                                                                                         string(" defaultOf::<()>();"),
                                                                                                                                                                                                                                                                                                                                                                                                                                         replace(replace(concat(new_array(&[v6751,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            string("\n\n"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            v6878,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            string("\n")])),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         append(string("),)"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (";".into())),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         string("));")),
                                                                                                                                                                                                                                                                                                                                                                                                                                                 append(string("},)"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                        (";".into())),
                                                                                                                                                                                                                                                                                                                                                                                                                                                 string("});")))),
                                                                                                                                                                                                                                                                                                                                                                                                       append(string("(&e.get_Curren"),
                                                                                                                                                                                                                                                                                                                                                                                                              ("t".into())),
                                                                                                                                                                                                                                                                                                                                                                                                       string("(e.get_Current")),
                                                                                                                                                                                                                                                                                                                                                                                               append(string("getNull"),
                                                                                                                                                                                                                                                                                                                                                                                                      ("::<()>()".into())),
                                                                                                                                                                                                                                                                                                                                                                                               string("fable_library_rust::Native_::getZero()")),
                                                                                                                                                                                                                                                                                                                                                                                       append(string("null::<()>("),
                                                                                                                                                                                                                                                                                                                                                                                              (")".into())),
                                                                                                                                                                                                                                                                                                                                                                                       string("fable_library_rust::Native_::getZero()"))))))))))),
                                                                                                                                                                                                                      string(" gen:"),
                                                                                                                                                                                                                      string(" f:")))),
                                                                                                                                                                            string(" gen "),
                                                                                                                                                                            string(" f ")),
                                                                                                                                                                    string("::Slice\'_"),
                                                                                                                                                                    string("::Slice__")),
                                                                                                                                                            string(" Slice\'_"),
                                                                                                                                                            string(" Slice__")),
                                                                                                                                                    append(string("defaultOf()"),
                                                                                                                                                           (",".into())),
                                                                                                                                                    string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                            append(string("__self"),
                                                                                                                                                   ("__.".into())),
                                                                                                                                            string("self.")),
                                                                                                                                    append(string("_self"),
                                                                                                                                           ("_.".into())),
                                                                                                                                    string("self.")),
                                                                                                                            append(string("get_or_insert_wit"),
                                                                                                                                   ("h".into())),
                                                                                                                            string("get_or_init")),
                                                                                                                    append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                           (";".into())),
                                                                                                                    string("type ConcurrentStack_1<T> = T;")),
                                                                                                            append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                                   (";".into())),
                                                                                                            string("type TimeZoneInfo = i64;")),
                                                                                                    append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                           (";".into())),
                                                                                                    string("type TaskCanceledException = ();"))))
                                                                        };
                                                                        if (v6882) == false {
                                                                            Spiral::method70(
                                                                                v5931.clone(),
                                                                                v7078.clone(),
                                                                            );
                                                                        }
                                                                        {
                                                                            let v7084:
                                                                                        string =
                                                                                    if (if let Spiral::US39::US39_1
                                                                                               =
                                                                                               &v4997
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        concat(new_array(&[string("cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \""),
                                                                                                           v5535.clone(),
                                                                                                           string("\"")]))
                                                                                    } else {
                                                                                        concat(new_array(&[string("cargo run --manifest-path \""),
                                                                                                           v5535,
                                                                                                           string("\"")]))
                                                                                    };
                                                                            let v7097:
                                                                                        Array<(string,
                                                                                               string)> =
                                                                                    if (if let Spiral::US39::US39_1
                                                                                               =
                                                                                               &v4997
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        new_empty::<(string,
                                                                                                     string)>()
                                                                                    } else {
                                                                                        new_array(&[(string("TRACE_LEVEL"),
                                                                                                     string("Verbose")),
                                                                                                    (string("RUSTC_WRAPPER"),
                                                                                                     string("sccache")),
                                                                                                    (string("RUST_BACKTRACE"),
                                                                                                     string("full")),
                                                                                                    (string("RUSTFLAGS"),
                                                                                                     string("-C prefer-dynamic"))])
                                                                                    };
                                                                            let v7126:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v5396
                                                                                        {
                                                                                        Spiral::US13::US13_0(v5396_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v5396_0_0.clone()),
                                                                                        Spiral::US13::US13_1(v5396_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v5396_1_0.clone()),
                                                                                    };
                                                                            let patternInput_20:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method91(v7084.clone(),
                                                                                                     None::<CancellationToken>,
                                                                                                     v7097.clone(),
                                                                                                     None::<Func1<(i32,
                                                                                                                   string,
                                                                                                                   bool),
                                                                                                                  Arc<Async<()>>>>,
                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                  ()>>,
                                                                                                     true,
                                                                                                     v7126.ok());
                                                                            let v7144: string =
                                                                                patternInput_20
                                                                                    .1
                                                                                    .clone();
                                                                            let v7143: i32 =
                                                                                patternInput_20
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_26:
                                                                                        (Spiral::US5,
                                                                                         Spiral::US5,
                                                                                         Spiral::US5,
                                                                                         Spiral::US5) =
                                                                                    if if let Spiral::US39::US39_1
                                                                                              =
                                                                                              &v4997
                                                                                          {
                                                                                           true
                                                                                       } else {
                                                                                           false
                                                                                       }
                                                                                       {
                                                                                        let v7146:
                                                                                                i32 =
                                                                                            get_Count(v7097.clone());
                                                                                        let v7147:
                                                                                                Array<string> =
                                                                                            new_init(&string(""),
                                                                                                     v7146);
                                                                                        let v7148:
                                                                                                LrcPtr<Spiral::Mut5> =
                                                                                            LrcPtr::new(Spiral::Mut5{l0:
                                                                                                                         MutCell::new(0_i32),});
                                                                                        while Spiral::method29(v7146,
                                                                                                               v7148.clone())
                                                                                              {
                                                                                            let v7150:
                                                                                                    i32 =
                                                                                                v7148.l0.get().clone();
                                                                                            let patternInput_21:
                                                                                                    (string,
                                                                                                     string) =
                                                                                                v7097[v7150].clone();
                                                                                            let v7153:
                                                                                                    string =
                                                                                                sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                         patternInput_21.0.clone(),
                                                                                                         patternInput_21.1.clone());
                                                                                            v7147.get_mut()[v7150
                                                                                                                as
                                                                                                                usize]
                                                                                                =
                                                                                                v7153;
                                                                                            {
                                                                                                let v7154:
                                                                                                        i32 =
                                                                                                    (v7150)
                                                                                                        +
                                                                                                        1_i32;
                                                                                                v7148.l0.set(v7154);
                                                                                                ()
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            let v7178:
                                                                                                    string =
                                                                                                concat(new_array(&[string("pwsh -c \'"),
                                                                                                                   join(string(";"),
                                                                                                                        toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                             toArray_1(ofArray_1(v7147.clone()))),
                                                                                                                                                        v7084])))),
                                                                                                                   string("\'")]));
                                                                                            let patternInput_22:
                                                                                                    (Spiral::US5,
                                                                                                     Spiral::US5,
                                                                                                     Spiral::US5,
                                                                                                     Spiral::US5) =
                                                                                                if (v7143)
                                                                                                       !=
                                                                                                       0_i32
                                                                                                   {
                                                                                                    let v7245:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral::closure97(v4846,
                                                                                                                              v5931.clone(),
                                                                                                                              v7144.clone(),
                                                                                                                              v7143,
                                                                                                                              v7178.clone(),
                                                                                                                              ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral::US5::US5_0(string("rs")),
                                                                                                     Spiral::US5::US5_1,
                                                                                                     Spiral::US5::US5_1,
                                                                                                     Spiral::US5::US5_1)
                                                                                                } else {
                                                                                                    let result_2:
                                                                                                            LrcPtr<MutCell<Spiral::US5>> =
                                                                                                        refCell(Spiral::US5::US5_1);
                                                                                                    try_catch(||
                                                                                                                  result_2.set(Spiral::closure72((),
                                                                                                                                                 Spiral::closure98(v7144.clone(),
                                                                                                                                                                   ()))),
                                                                                                              |ex_2:
                                                                                                                   LrcPtr<Exception>|
                                                                                                                  result_2.set(Spiral::closure100(v5931.clone(),
                                                                                                                                                  v7144.clone(),
                                                                                                                                                  v7178,
                                                                                                                                                  ex_2.clone())));
                                                                                                    {
                                                                                                        let v7315:
                                                                                                                Spiral::US5 =
                                                                                                            result_2.get().clone();
                                                                                                        let v7329:
                                                                                                                Option<string> =
                                                                                                            match &v7315
                                                                                                                {
                                                                                                                Spiral::US5::US5_0(v7315_0_0)
                                                                                                                =>
                                                                                                                Some(match &v7315
                                                                                                                         {
                                                                                                                         Spiral::US5::US5_0(x)
                                                                                                                         =>
                                                                                                                         x.clone(),
                                                                                                                         _
                                                                                                                         =>
                                                                                                                         unreachable!(),
                                                                                                                     }.clone()),
                                                                                                                _
                                                                                                                =>
                                                                                                                None::<string>,
                                                                                                            };
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_0(v7078.clone()),
                                                                                                         Spiral::US5::US5_0(v5931.clone()),
                                                                                                         Spiral::US5::US5_0(v7329.unwrap()))
                                                                                                    }
                                                                                                };
                                                                                            (patternInput_22.0.clone(),
                                                                                             patternInput_22.1.clone(),
                                                                                             patternInput_22.2.clone(),
                                                                                             patternInput_22.3.clone())
                                                                                        }
                                                                                    } else {
                                                                                        let v7340:
                                                                                                string =
                                                                                            sprintf!("target/spiral/{}/target/wasm32-unknown-unknown/release/spiral_{}.wasm",
                                                                                                     string("spiral"),
                                                                                                     v5345.clone());
                                                                                        let v7352:
                                                                                                string =
                                                                                            sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables AUTOMATION={}`nNEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                     string("scripts/invoke-block.ps1"),
                                                                                                     sprintf!("\'deps/spiral/workspace/target/release/spiral_wasm -w {} -t debug {}\'",
                                                                                                              v7340.clone(),
                                                                                                              if let Spiral::US39::US39_0(v4997_0_0)
                                                                                                                     =
                                                                                                                     &v4997
                                                                                                                 {
                                                                                                                  let v7341:
                                                                                                                          Spiral::US40 =
                                                                                                                      v4997_0_0.clone();
                                                                                                                  match &v7341
                                                                                                                      {
                                                                                                                      Spiral::US40::US40_0(v7341_0_0)
                                                                                                                      =>
                                                                                                                      v7341_0_0.clone(),
                                                                                                                      Spiral::US40::US40_1(v7341_1_0)
                                                                                                                      =>
                                                                                                                      v7341_1_0.clone(),
                                                                                                                  }
                                                                                                              } else {
                                                                                                                  string("")
                                                                                                              }),
                                                                                                     Spiral::method3(string("AUTOMATION")));
                                                                                        let patternInput_25:
                                                                                                (Spiral::US5,
                                                                                                 Spiral::US5,
                                                                                                 Spiral::US5,
                                                                                                 Spiral::US5) =
                                                                                            if (v7143)
                                                                                                   ==
                                                                                                   0_i32
                                                                                               {
                                                                                                let patternInput_23:
                                                                                                        (i32,
                                                                                                         string) =
                                                                                                    Spiral::method91(v7352.clone(),
                                                                                                                     None::<CancellationToken>,
                                                                                                                     new_empty::<(string,
                                                                                                                                  string)>(),
                                                                                                                     None::<Func1<(i32,
                                                                                                                                   string,
                                                                                                                                   bool),
                                                                                                                                  Arc<Async<()>>>>,
                                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                  ()>>,
                                                                                                                     true,
                                                                                                                     Some(v5416));
                                                                                                let v7377:
                                                                                                        string =
                                                                                                    patternInput_23.1.clone();
                                                                                                let v7376:
                                                                                                        i32 =
                                                                                                    patternInput_23.0.clone();
                                                                                                let patternInput_24:
                                                                                                        (Spiral::US5,
                                                                                                         Spiral::US5,
                                                                                                         Spiral::US5,
                                                                                                         Spiral::US5) =
                                                                                                    if (v7376)
                                                                                                           ==
                                                                                                           0_i32
                                                                                                       {
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_0(v7078),
                                                                                                         Spiral::US5::US5_0(v5931.clone()),
                                                                                                         Spiral::US5::US5_0(v7377.clone()))
                                                                                                    } else {
                                                                                                        let v7446:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral::closure102(v4846,
                                                                                                                                   v5931.clone(),
                                                                                                                                   v7144.clone(),
                                                                                                                                   v7377,
                                                                                                                                   v7376,
                                                                                                                                   ());
                                                                                                                ()
                                                                                                            };
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_1,
                                                                                                         Spiral::US5::US5_1,
                                                                                                         Spiral::US5::US5_1)
                                                                                                    };
                                                                                                (patternInput_24.0.clone(),
                                                                                                 patternInput_24.1.clone(),
                                                                                                 patternInput_24.2.clone(),
                                                                                                 patternInput_24.3.clone())
                                                                                            } else {
                                                                                                let v7579:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral::closure103(v4846,
                                                                                                                           v5931.clone(),
                                                                                                                           v7144,
                                                                                                                           v7143,
                                                                                                                           v7340,
                                                                                                                           v7352,
                                                                                                                           ());
                                                                                                        ()
                                                                                                    };
                                                                                                (Spiral::US5::US5_0(string("rs")),
                                                                                                 Spiral::US5::US5_1,
                                                                                                 Spiral::US5::US5_1,
                                                                                                 Spiral::US5::US5_1)
                                                                                            };
                                                                                        (patternInput_25.0.clone(),
                                                                                         patternInput_25.1.clone(),
                                                                                         patternInput_25.2.clone(),
                                                                                         patternInput_25.3.clone())
                                                                                    };
                                                                            if v4846 {
                                                                                let v7657:
                                                                                            string =
                                                                                        if (if let Spiral::US39::US39_1
                                                                                                   =
                                                                                                   &v4997
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            string("wasm32-unknown-unknown/release")
                                                                                        } else {
                                                                                            string("debug")
                                                                                        };
                                                                                let v7660:
                                                                                            string =
                                                                                        Spiral::method33(v5429.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v7657.clone(),
                                                                                                                  v5345.clone(),
                                                                                                                  string("")));
                                                                                let v7663:
                                                                                            string =
                                                                                        Spiral::method33(v5429.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v7657.clone(),
                                                                                                                  v5345.clone(),
                                                                                                                  string(".wasm")));
                                                                                let v7666:
                                                                                            string =
                                                                                        Spiral::method33(v5429.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v7657.clone(),
                                                                                                                  v5345.clone(),
                                                                                                                  string(".pdb")));
                                                                                let v7669:
                                                                                            string =
                                                                                        Spiral::method33(v5429.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v7657.clone(),
                                                                                                                  v5345.clone(),
                                                                                                                  string(".exe")));
                                                                                let v7672: string =
                                                                                    Spiral::method33(
                                                                                        v5429,
                                                                                        sprintf!(
                                                                                            "target/{}/spiral_{}{}",
                                                                                            v7657,
                                                                                            v5345,
                                                                                            string(
                                                                                                ".d"
                                                                                            )
                                                                                        ),
                                                                                    );
                                                                                let v7673:
                                                                                            bool =
                                                                                        Spiral::method35(v7660.clone());
                                                                                let v7674:
                                                                                            bool =
                                                                                        Spiral::method35(v7663.clone());
                                                                                let v7675:
                                                                                            bool =
                                                                                        Spiral::method35(v7666.clone());
                                                                                let v7676:
                                                                                            bool =
                                                                                        Spiral::method35(v7669.clone());
                                                                                let v7677:
                                                                                            bool =
                                                                                        Spiral::method35(v7672.clone());
                                                                                let v7740: () = {
                                                                                    Spiral::closure104(v5931,
                                                                                                               v7672.clone(),
                                                                                                               v7677,
                                                                                                               v7669.clone(),
                                                                                                               v7676,
                                                                                                               v7666.clone(),
                                                                                                               v7675,
                                                                                                               v7663.clone(),
                                                                                                               v7674,
                                                                                                               v7660.clone(),
                                                                                                               v7673,
                                                                                                               ());
                                                                                    ()
                                                                                };
                                                                                let v7804: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v7673 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v7660,
                                                                                                                           v7673,
                                                                                                                           LrcPtr::new(Spiral::UH5::UH5_0)))
                                                                                } else {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_0)
                                                                                };
                                                                                let v7806: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v7674 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v7663,
                                                                                                                           v7674,
                                                                                                                           v7804.clone()))
                                                                                } else {
                                                                                    v7804
                                                                                };
                                                                                let v7808: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v7675 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v7666,
                                                                                                                           v7675,
                                                                                                                           v7806.clone()))
                                                                                } else {
                                                                                    v7806
                                                                                };
                                                                                let v7810: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v7676 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v7669,
                                                                                                                           v7676,
                                                                                                                           v7808.clone()))
                                                                                } else {
                                                                                    v7808
                                                                                };
                                                                                Spiral::method215(
                                                                                    if v7677 {
                                                                                        LrcPtr::new(Spiral::UH5::UH5_1(v7672,
                                                                                                                                         v7677,
                                                                                                                                         v7810.clone()))
                                                                                    } else {
                                                                                        v7810
                                                                                    },
                                                                                )
                                                                            }
                                                                            (
                                                                                patternInput_26
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .2
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .3
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_27.0.clone(),
                                                            patternInput_27.1.clone(),
                                                            patternInput_27.2.clone(),
                                                            patternInput_27.3.clone(),
                                                        )
                                                    }
                                                }
                                            }
                                        } else {
                                            let patternInput_39: (
                                                Spiral::US5,
                                                Spiral::US5,
                                                Spiral::US5,
                                                Spiral::US5,
                                            ) = if (fable_library_rust::String_::fromString(
                                                v40.clone(),
                                            )) == string("typescript")
                                            {
                                                let v7820: string = Spiral::method168();
                                                let v7827: &str = &*v7820;
                                                let v7855: Option<std::string::String> =
                                                    clap::ArgMatches::get_one(&v41.clone(), v7827)
                                                        .cloned();
                                                let v7880: Spiral::US7 = defaultValue(
                                                    Spiral::US7::US7_1,
                                                    map(Spiral::method21(), v7855),
                                                );
                                                let v7887: std::string::String = match &v7880 {
                                                    Spiral::US7::US7_0(v7880_0_0) => match &v7880 {
                                                        Spiral::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v7889: string =
                                                    fable_library_rust::String_::fromString(v7887);
                                                let v7890: string = Spiral::method23();
                                                let v7897: &str = &*v7890;
                                                let v7925: Option<Vec<std::string::String>> =
                                                    clap::ArgMatches::get_many(&v41.clone(), v7897)
                                                        .map(|x| x.cloned().into_iter().collect());
                                                let v7950: Spiral::US11 = defaultValue(
                                                    Spiral::US11::US11_1,
                                                    map(Spiral::method24(), v7925),
                                                );
                                                let v7956: Vec<std::string::String> =
                                                    new_empty::<std::string::String>().to_vec();
                                                let v7959: Vec<std::string::String> = match &v7950 {
                                                    Spiral::US11::US11_0(v7950_0_0) => match &v7950
                                                    {
                                                        Spiral::US11::US11_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => v7956.clone(),
                                                };
                                                let v7971: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v7889);
                                                let v8016: Vec<u8> =
                                                    Spiral::method25(v7971.unwrap());
                                                let v8018: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v8016);
                                                let v8022: std::string::String = v8018.unwrap();
                                                let v8057: string =
                                                    fable_library_rust::String_::fromString(v8022);
                                                let v8069: string = Spiral::method26(sprintf!(
                                                    "{:?}",
                                                    (string("ts"), v8057.clone())
                                                ));
                                                let v8071: Spiral::US5 =
                                                    Spiral::method32(Spiral::method31());
                                                let v8077: Spiral::US5 = match &v8071 {
                                                    Spiral::US5::US5_0(v8071_0_0) => {
                                                        Spiral::US5::US5_0(
                                                            match &v8071 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => Spiral::method32(string(
                                                        "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                                    )),
                                                };
                                                let v8083: Spiral::US5 = match &v8077 {
                                                    Spiral::US5::US5_0(v8077_0_0) => {
                                                        Spiral::US5::US5_0(
                                                            match &v8077 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => Spiral::method32(string("/workspaces")),
                                                };
                                                let v8087: string = match &v8083 {
                                                    Spiral::US5::US5_0(v8083_0_0) => match &v8083 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v8102: string = Spiral::method33(
                                                    if string("deps")
                                                        == (Spiral::method50(v8087.clone()))
                                                    {
                                                        let v8095: Spiral::US5 = Spiral::method32(
                                                            Spiral::method38(v8087.clone())
                                                                .clone()
                                                                .unwrap(),
                                                        );
                                                        match &v8095 {
                                                            Spiral::US5::US5_0(v8095_0_0) => {
                                                                match &v8095 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone()
                                                            }
                                                            _ => panic!(
                                                                "{}",
                                                                string(
                                                                    "Option does not have a value."
                                                                ),
                                                            ),
                                                        }
                                                    } else {
                                                        v8087
                                                    },
                                                    string("polyglot"),
                                                );
                                                let v8106: string = toLower(Spiral::method31());
                                                let v8111: string = toLower(v8102);
                                                let v8120: Spiral::US13 =
                                                    if startsWith3(v8106, v8111.clone(), false) {
                                                        Spiral::US13::US13_1(v8111.clone())
                                                    } else {
                                                        Spiral::US13::US13_0(v8111)
                                                    };
                                                let v8132: Result<string, string> = match &v8120 {
                                                    Spiral::US13::US13_0(v8120_0_0) => {
                                                        Ok::<string, string>(v8120_0_0.clone())
                                                    }
                                                    Spiral::US13::US13_1(v8120_1_0) => {
                                                        Err::<string, string>(v8120_1_0.clone())
                                                    }
                                                };
                                                let v8134: bool = true;
                                                let _result_unwrap_or_else =
                                                    v8132.unwrap_or_else(|x| {
                                                        //;
                                                        let v8136: string = x;
                                                        let v8138: bool = true;
                                                        v8136
                                                    });
                                                let v8140: string = _result_unwrap_or_else;
                                                let v8145: string = Spiral::method183(
                                                    Spiral::US5::US5_0(v8069.clone()),
                                                    string("spiral"),
                                                    Spiral::US42::US42_0(Spiral::US41::US41_1),
                                                    v8140.clone(),
                                                );
                                                let v8151: string = Spiral::method184(
                                                    v8057,
                                                    string("spiral"),
                                                    LrcPtr::new(Spiral::UH2::UH2_0),
                                                    LrcPtr::new(Spiral::UH4::UH4_1(
                                                        string("Fable.Core"),
                                                        string("4.3.0"),
                                                        LrcPtr::new(Spiral::UH4::UH4_0),
                                                    )),
                                                    v8145.clone(),
                                                    v8140.clone(),
                                                );
                                                let v8153: string = Spiral::method33(
                                                    v8140.clone(),
                                                    string("lib/typescript/fable/fable_modules"),
                                                );
                                                let v8154: string = concat(new_array(&[
                                                    string("fable-library-"),
                                                    string("ts"),
                                                ]));
                                                let v8155: string =
                                                    Spiral::method219(v8154.clone());
                                                let v8157: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::new(&*v8153.clone());
                                                let v8160: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::filter(
                                                        v8157,
                                                        move |x| {
                                                            Func1::new({
                                                                let v8154 = v8154.clone();
                                                                move
                                                                                                                          |v_11:
                                                                                                                               async_walkdir::DirEntry|
                                                                                                                          Spiral::closure108(v8154.clone(),
                                                                                                                                             v_11)
                                                            })(
                                                                x
                                                            )
                                                        },
                                                    );
                                                let v8161 = Spiral::method223(v8155);
                                                let v8163 = futures::stream::StreamExt::filter_map(
                                                    v8160,
                                                    |x| async { v8161(x) },
                                                );
                                                let v8165: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                                Output = Vec<(string, string)>,
                                                            >,
                                                    >,
                                                > = Box::pin(futures::stream::StreamExt::collect(
                                                    v8163,
                                                ));
                                                let v8167: Vec<(string, string)> = v8165.await;
                                                let v8169: rayon::vec::IntoIter<(string, string)> =
                                                    rayon::iter::IntoParallelIterator::into_par_iter(
                                                        v8167,
                                                    );
                                                let v8172: rayon::iter::Map<
                                                    rayon::vec::IntoIter<(string, string)>,
                                                    _,
                                                > = rayon::iter::ParallelIterator::map(
                                                    v8169,
                                                    |x| {
                                                        Func1::new(move
                                                                                                                     |arg10_0040_42:
                                                                                                                          (string,
                                                                                                                           string)|
                                                                                                                     Spiral::closure116((),
                                                                                                                                        arg10_0040_42))(x)
                                                    },
                                                );
                                                let v8174: Vec<(string, string)> =
                                                    rayon::iter::ParallelIterator::collect(v8172);
                                                let v8177: Option<(string, string)> = tryItem(
                                                    0_i32,
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v8174.clone(),
                                                    ),
                                                );
                                                let v8203: Spiral::US51 = defaultValue(
                                                    Spiral::US51::US51_1,
                                                    map(Spiral::method228(), v8177),
                                                );
                                                let v8269: () = {
                                                    Spiral::closure118(v8203.clone(), ());
                                                    ()
                                                };
                                                Spiral::method230(
                                                    v8145.clone(),
                                                    v8153.clone(),
                                                    v8203.clone(),
                                                );
                                                {
                                                    let patternInput_28: (i32, string) =
                                                        Spiral::method193(
                                                            Spiral::US39::US39_1,
                                                            v8145.clone(),
                                                            string("ts"),
                                                            v8151,
                                                            v8120.clone(),
                                                        );
                                                    let v8332: string = patternInput_28.1.clone();
                                                    let v8331: i32 = patternInput_28.0.clone();
                                                    Spiral::method230(
                                                        v8145.clone(),
                                                        v8153,
                                                        v8203.clone(),
                                                    );
                                                    {
                                                        let patternInput_32: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v8331) != 0_i32 {
                                                            let v8399: () = {
                                                                Spiral::closure119(
                                                                    v8332.clone(),
                                                                    v8331,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("ts")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v8332),
                                                            )
                                                        } else {
                                                            let v8465: bool = true;
                                                            let _vec_map : Vec<_> = v7959.into_iter().map(|x| { //;
                                                                    let v8467:
                                                                            std::string::String =
                                                                        x;
                                                                    let v8469:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v8467);
                                                                    let v8477:
                                                                            string =
                                                                        if contains(v8469.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v8469.clone()
                                                                        } else {
                                                                            concat(new_array(&[string("\""),
                                                                                               v8469,
                                                                                               string("\":\"*\"")]))
                                                                        };
                                                                    let v8479:
                                                                            bool =
                                                                        true; v8477 }).collect::<Vec<_>>();
                                                            let v8481: Vec<string> = _vec_map;
                                                            let v8483:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v8481.clone());
                                                            let v8502: string = join(
                                                                string(",\n"),
                                                                toArray_1(delay(Func0::new({
                                                                    let v8483 = v8483.clone();
                                                                    move || {
                                                                        map_1(
                                                                            Func1::new({
                                                                                let v8483 =
                                                                                    v8483.clone();
                                                                                move |i_3: i32| {
                                                                                    v8483[i_3]
                                                                                        .clone()
                                                                                }
                                                                            }),
                                                                            rangeNumeric(
                                                                                0_i32,
                                                                                1_i32,
                                                                                (get_Count(
                                                                                    v8483.clone(),
                                                                                )) - 1_i32,
                                                                            ),
                                                                        )
                                                                    }
                                                                }))),
                                                            );
                                                            let v8518:
                                                                            string =
                                                                        append((append((append((append((append((append((append(string("{"),
                                                                                                                               (concat(new_array(&[string("  \"name\": \"spiral_"),
                                                                                                                                                   v8069,
                                                                                                                                                   string("\",")]))))),
                                                                                                                       string("  \"dependencies\": {"))),
                                                                                                               (v8502))),
                                                                                                       string("  },"))),
                                                                                               string("    \"devDependencies\": {"))),
                                                                                       string("  },"))),
                                                                               string("}"));
                                                            let v8520: string = Spiral::method33(
                                                                v8145.clone(),
                                                                string("package.json"),
                                                            );
                                                            let v8523: string = Spiral::method33(
                                                                Spiral::method33(
                                                                    v8145.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                            Spiral::method70(v8520, v8518);
                                                            Spiral::method70(v8523, string(""));
                                                            {
                                                                let v8526: string =
                                                                    Spiral::method33(
                                                                        v8145,
                                                                        concat(new_array(&[
                                                                            string("spiral"),
                                                                            string("."),
                                                                            string("ts"),
                                                                        ])),
                                                                    );
                                                                let v8589: () = {
                                                                    Spiral::closure120(
                                                                        v8526.clone(),
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                let v8661: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v8526.clone());
                                                                let v8706: Vec<u8> =
                                                                    Spiral::method25(
                                                                        v8661.unwrap(),
                                                                    );
                                                                let v8708: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v8706,
                                                                );
                                                                let v8712: std::string::String =
                                                                    v8708.unwrap();
                                                                let v8747:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v8712);
                                                                let v8756: bool = contains(
                                                                    v8747.clone(),
                                                                    string(
                                                                        "// spiral.process_typescript",
                                                                    ),
                                                                );
                                                                let v8765: string = if v8756 {
                                                                    v8747.clone()
                                                                } else {
                                                                    Spiral::method60(
                                                                        string(
                                                                            "\\s\\sdefaultOf\\(\\);",
                                                                        ),
                                                                        string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                        replace(
                                                                            v8747,
                                                                            sprintf!(
                                                                                "\"./fable_modules/fable-library-ts.{}/",
                                                                                v8203.clone()
                                                                            ),
                                                                            sprintf!(
                                                                                "\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                v8140,
                                                                                v8203
                                                                            ),
                                                                        ),
                                                                    )
                                                                };
                                                                if (v8756) == false {
                                                                    Spiral::method70(
                                                                        v8526.clone(),
                                                                        concat(new_array(&[
                                                                            v8765.clone(),
                                                                            string("\n\n"),
                                                                            string(
                                                                                "// spiral.process_typescript",
                                                                            ),
                                                                            string("\n"),
                                                                        ])),
                                                                    );
                                                                }
                                                                {
                                                                    let v8768: string =
                                                                        concat(new_array(&[
                                                                            string(
                                                                                "bun --bun run \"",
                                                                            ),
                                                                            v8526.clone(),
                                                                            string("\""),
                                                                        ]));
                                                                    let v8770: string =
                                                                        Spiral::method3(string(
                                                                            "PATH",
                                                                        ));
                                                                    let v8807: Spiral::US5 =
                                                                        if (v8770.clone())
                                                                            == string("")
                                                                        {
                                                                            Spiral::US5::US5_1
                                                                        } else {
                                                                            Spiral::US5::US5_0(
                                                                                concat(new_array(
                                                                                    &[
                                                                                        string(
                                                                                            "~/.bun/bin",
                                                                                        ),
                                                                                        if cfg!(
                                                                                            windows
                                                                                        ) {
                                                                                            string(
                                                                                                ";",
                                                                                            )
                                                                                        } else {
                                                                                            string(
                                                                                                ":",
                                                                                            )
                                                                                        },
                                                                                        v8770,
                                                                                    ],
                                                                                )),
                                                                            )
                                                                        };
                                                                    let v8823:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                toArray(Spiral::method234(Spiral::method233(match &v8807
                                                                                                                                {
                                                                                                                                Spiral::US5::US5_0(v8807_0_0)
                                                                                                                                =>
                                                                                                                                LrcPtr::new(Spiral::UH4::UH4_1(string("PATH"),
                                                                                                                                                               match &v8807
                                                                                                                                                                   {
                                                                                                                                                                   Spiral::US5::US5_0(x)
                                                                                                                                                                   =>
                                                                                                                                                                   x.clone(),
                                                                                                                                                                   _
                                                                                                                                                                   =>
                                                                                                                                                                   unreachable!(),
                                                                                                                                                               }.clone(),
                                                                                                                                                               LrcPtr::new(Spiral::UH4::UH4_0))),
                                                                                                                                _
                                                                                                                                =>
                                                                                                                                LrcPtr::new(Spiral::UH4::UH4_0),
                                                                                                                            },
                                                                                                                            LrcPtr::new(Spiral::UH4::UH4_1(string("TRACE_LEVEL"),
                                                                                                                                                           string("Verbose"),
                                                                                                                                                           LrcPtr::new(Spiral::UH4::UH4_0)))),
                                                                                                          empty::<(string,
                                                                                                                   string)>()));
                                                                    let v8854: Result<
                                                                        string,
                                                                        string,
                                                                    > = match &v8120 {
                                                                        Spiral::US13::US13_0(
                                                                            v8120_0_0,
                                                                        ) => Ok::<string, string>(
                                                                            v8120_0_0.clone(),
                                                                        ),
                                                                        Spiral::US13::US13_1(
                                                                            v8120_1_0,
                                                                        ) => Err::<string, string>(
                                                                            v8120_1_0.clone(),
                                                                        ),
                                                                    };
                                                                    let patternInput_29:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral::method91(v8768.clone(),
                                                                                                 None::<CancellationToken>,
                                                                                                 v8823.clone(),
                                                                                                 None::<Func1<(i32,
                                                                                                               string,
                                                                                                               bool),
                                                                                                              Arc<Async<()>>>>,
                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                              ()>>,
                                                                                                 true,
                                                                                                 v8854.ok());
                                                                    let v8872: string =
                                                                        patternInput_29.1.clone();
                                                                    let v8871: i32 =
                                                                        patternInput_29.0.clone();
                                                                    let v8873: i32 =
                                                                        get_Count(v8823.clone());
                                                                    let v8874: Array<string> =
                                                                        new_init(
                                                                            &string(""),
                                                                            v8873,
                                                                        );
                                                                    let v8875: LrcPtr<
                                                                        Spiral::Mut5,
                                                                    > = LrcPtr::new(Spiral::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    });
                                                                    while Spiral::method29(
                                                                        v8873,
                                                                        v8875.clone(),
                                                                    ) {
                                                                        let v8877: i32 =
                                                                            v8875.l0.get().clone();
                                                                        let patternInput_30: (
                                                                            string,
                                                                            string,
                                                                        ) = v8823[v8877].clone();
                                                                        let v8880: string = sprintf!(
                                                                            "$env:{}=\'\'{}\'\'",
                                                                            patternInput_30
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_30
                                                                                .1
                                                                                .clone()
                                                                        );
                                                                        v8874.get_mut()
                                                                            [v8877 as usize] =
                                                                            v8880;
                                                                        {
                                                                            let v8881: i32 =
                                                                                (v8877) + 1_i32;
                                                                            v8875.l0.set(v8881);
                                                                            ()
                                                                        }
                                                                    }
                                                                    {
                                                                        let v8894: string = sprintf!(
                                                                            "pwsh -c \'{}; {}\'",
                                                                            join(
                                                                                string(";"),
                                                                                toArray_1(
                                                                                    ofArray_1(
                                                                                        v8874
                                                                                            .clone(
                                                                                            )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            v8768
                                                                        );
                                                                        let patternInput_31: (
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                        ) = if (v8871) == 0_i32 {
                                                                            let result_3: LrcPtr<
                                                                                MutCell<
                                                                                    Spiral::US5,
                                                                                >,
                                                                            > = refCell(
                                                                                Spiral::US5::US5_1,
                                                                            );
                                                                            try_catch(||
                                                                                                      result_3.set(Spiral::closure72((),
                                                                                                                                     Spiral::closure121(v8872.clone(),
                                                                                                                                                        ()))),
                                                                                                  |ex_3:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_3.set(Spiral::closure122(v8526.clone(),
                                                                                                                                      v8872.clone(),
                                                                                                                                      v8894.clone(),
                                                                                                                                      ex_3.clone())));
                                                                            {
                                                                                let v8901:
                                                                                                    Spiral::US5 =
                                                                                                result_3.get().clone();
                                                                                let v8915:
                                                                                                    Option<string> =
                                                                                                match &v8901
                                                                                                    {
                                                                                                    Spiral::US5::US5_0(v8901_0_0)
                                                                                                    =>
                                                                                                    Some(match &v8901
                                                                                                             {
                                                                                                             Spiral::US5::US5_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }.clone()),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                                (Spiral::US5::US5_0(string("ts")),
                                                                                             Spiral::US5::US5_0(v8765),
                                                                                             Spiral::US5::US5_0(v8526.clone()),
                                                                                             Spiral::US5::US5_0(v8915.unwrap()))
                                                                            }
                                                                        } else {
                                                                            let v8984: () = {
                                                                                Spiral::closure124(
                                                                                    v8526,
                                                                                    v8872,
                                                                                    v8871,
                                                                                    v8894,
                                                                                    (),
                                                                                );
                                                                                ()
                                                                            };
                                                                            (
                                                                                Spiral::US5::US5_0(
                                                                                    string("ts"),
                                                                                ),
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                            )
                                                                        };
                                                                        (
                                                                            patternInput_31
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .1
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .2
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .3
                                                                                .clone(),
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_32.0.clone(),
                                                            patternInput_32.1.clone(),
                                                            patternInput_32.2.clone(),
                                                            patternInput_32.3.clone(),
                                                        )
                                                    }
                                                }
                                            } else {
                                                let patternInput_38: (
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                ) = if (fable_library_rust::String_::fromString(
                                                    v40.clone(),
                                                )) == string("python")
                                                {
                                                    let v9060: string = Spiral::method168();
                                                    let v9067: &str = &*v9060;
                                                    let v9095: Option<std::string::String> =
                                                        clap::ArgMatches::get_one(
                                                            &v41.clone(),
                                                            v9067,
                                                        )
                                                        .cloned();
                                                    let v9120: Spiral::US7 = defaultValue(
                                                        Spiral::US7::US7_1,
                                                        map(Spiral::method21(), v9095),
                                                    );
                                                    let v9127: std::string::String = match &v9120 {
                                                        Spiral::US7::US7_0(v9120_0_0) => {
                                                            match &v9120 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v9129: string =
                                                        fable_library_rust::String_::fromString(
                                                            v9127,
                                                        );
                                                    let v9130: string = Spiral::method23();
                                                    let v9137: &str = &*v9130;
                                                    let v9165: Option<Vec<std::string::String>> =
                                                        clap::ArgMatches::get_many(
                                                            &v41.clone(),
                                                            v9137,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                    let v9190: Spiral::US11 = defaultValue(
                                                        Spiral::US11::US11_1,
                                                        map(Spiral::method24(), v9165),
                                                    );
                                                    let v9196: Vec<std::string::String> =
                                                        new_empty::<std::string::String>().to_vec();
                                                    let v9199: Vec<std::string::String> =
                                                        match &v9190 {
                                                            Spiral::US11::US11_0(v9190_0_0) => {
                                                                match &v9190 {
                                                                    Spiral::US11::US11_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone()
                                                            }
                                                            _ => v9196.clone(),
                                                        };
                                                    let v9200: bool =
                                                        if let Spiral::US0::US0_0 = &v0_1 {
                                                            true
                                                        } else {
                                                            false
                                                        };
                                                    let v9212: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v9129);
                                                    let v9257: Vec<u8> =
                                                        Spiral::method25(v9212.unwrap());
                                                    let v9259: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v9257);
                                                    let v9263: std::string::String = v9259.unwrap();
                                                    let v9298: string =
                                                        fable_library_rust::String_::fromString(
                                                            v9263,
                                                        );
                                                    let v9310: string = Spiral::method26(sprintf!(
                                                        "{:?}",
                                                        (string("py"), v9298.clone())
                                                    ));
                                                    let v9312: Spiral::US5 =
                                                        Spiral::method32(Spiral::method31());
                                                    let v9318: Spiral::US5 = match &v9312 {
                                                        Spiral::US5::US5_0(v9312_0_0) => {
                                                            Spiral::US5::US5_0(
                                                                match &v9312 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => Spiral::method32(string(
                                                            "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                                        )),
                                                    };
                                                    let v9324: Spiral::US5 = match &v9318 {
                                                        Spiral::US5::US5_0(v9318_0_0) => {
                                                            Spiral::US5::US5_0(
                                                                match &v9318 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => {
                                                            Spiral::method32(string("/workspaces"))
                                                        }
                                                    };
                                                    let v9328: string = match &v9324 {
                                                        Spiral::US5::US5_0(v9324_0_0) => {
                                                            match &v9324 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v9343: string = Spiral::method33(
                                                        if string("deps")
                                                            == (Spiral::method50(v9328.clone()))
                                                        {
                                                            let v9336: Spiral::US5 =
                                                                Spiral::method32(
                                                                    Spiral::method38(v9328.clone())
                                                                        .clone()
                                                                        .unwrap(),
                                                                );
                                                            match &v9336 {
                                                                Spiral::US5::US5_0(v9336_0_0) => {
                                                                    match &v9336 {
                                                                        Spiral::US5::US5_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone()
                                                                }
                                                                _ => panic!(
                                                                    "{}",
                                                                    string(
                                                                        "Option does not have a value."
                                                                    ),
                                                                ),
                                                            }
                                                        } else {
                                                            v9328
                                                        },
                                                        string("polyglot"),
                                                    );
                                                    let v9347: string = toLower(Spiral::method31());
                                                    let v9352: string = toLower(v9343);
                                                    let v9361: Spiral::US13 =
                                                        if startsWith3(v9347, v9352.clone(), false)
                                                        {
                                                            Spiral::US13::US13_1(v9352.clone())
                                                        } else {
                                                            Spiral::US13::US13_0(v9352)
                                                        };
                                                    let v9373: Result<string, string> = match &v9361
                                                    {
                                                        Spiral::US13::US13_0(v9361_0_0) => {
                                                            Ok::<string, string>(v9361_0_0.clone())
                                                        }
                                                        Spiral::US13::US13_1(v9361_1_0) => {
                                                            Err::<string, string>(v9361_1_0.clone())
                                                        }
                                                    };
                                                    let v9375: bool = true;
                                                    let _result_unwrap_or_else = v9373
                                                        .unwrap_or_else(|x| {
                                                            //;
                                                            let v9377: string = x;
                                                            let v9379: bool = true;
                                                            v9377
                                                        });
                                                    let v9381: string = _result_unwrap_or_else;
                                                    let v9386: string = Spiral::method183(
                                                        Spiral::US5::US5_0(v9310.clone()),
                                                        string("spiral"),
                                                        Spiral::US42::US42_0(Spiral::US41::US41_2),
                                                        v9381.clone(),
                                                    );
                                                    let v9392: string = Spiral::method184(
                                                        v9298,
                                                        string("spiral"),
                                                        LrcPtr::new(Spiral::UH2::UH2_0),
                                                        LrcPtr::new(Spiral::UH4::UH4_1(
                                                            string("Fable.Core"),
                                                            string("4.3.0"),
                                                            LrcPtr::new(Spiral::UH4::UH4_0),
                                                        )),
                                                        v9386.clone(),
                                                        v9381.clone(),
                                                    );
                                                    Spiral::method192(
                                                        Spiral::method33(
                                                            Spiral::method33(
                                                                v9381,
                                                                string(
                                                                    "lib/python/fable/fable_modules",
                                                                ),
                                                            ),
                                                            string("fable_library"),
                                                        ),
                                                        Spiral::method33(
                                                            v9386.clone(),
                                                            string("fable_modules/fable_library"),
                                                        ),
                                                    );
                                                    {
                                                        let patternInput_33: (i32, string) =
                                                            Spiral::method193(
                                                                Spiral::US39::US39_1,
                                                                v9386.clone(),
                                                                string("py"),
                                                                v9392,
                                                                v9361.clone(),
                                                            );
                                                        let v9401: string =
                                                            patternInput_33.1.clone();
                                                        let v9400: i32 = patternInput_33.0.clone();
                                                        let patternInput_37: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v9400) != 0_i32 {
                                                            let v9468: () = {
                                                                Spiral::closure125(
                                                                    v9401.clone(),
                                                                    v9400,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("py")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v9401),
                                                            )
                                                        } else {
                                                            let v9534: bool = true;
                                                            let _vec_map : Vec<_> = v9199.into_iter().map(|x| { //;
                                                                        let v9536:
                                                                                std::string::String =
                                                                            x;
                                                                        let v9538:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v9536);
                                                                        let v9546:
                                                                                string =
                                                                            if contains(v9538.clone(),
                                                                                        string("="))
                                                                               {
                                                                                v9538.clone()
                                                                            } else {
                                                                                concat(new_array(&[string("\""),
                                                                                                   v9538,
                                                                                                   string("\":\"*\"")]))
                                                                            };
                                                                        let v9548:
                                                                                bool =
                                                                            true; v9546 }).collect::<Vec<_>>();
                                                            let v9550: Vec<string> = _vec_map;
                                                            let v9552:
                                                                                Array<string> =
                                                                            fable_library_rust::NativeArray_::array_from(v9550.clone());
                                                            let v9571: string = join(
                                                                string(",\n"),
                                                                toArray_1(delay(Func0::new({
                                                                    let v9552 = v9552.clone();
                                                                    move || {
                                                                        map_1(
                                                                            Func1::new({
                                                                                let v9552 =
                                                                                    v9552.clone();
                                                                                move |i_4: i32| {
                                                                                    v9552[i_4]
                                                                                        .clone()
                                                                                }
                                                                            }),
                                                                            rangeNumeric(
                                                                                0_i32,
                                                                                1_i32,
                                                                                (get_Count(
                                                                                    v9552.clone(),
                                                                                )) - 1_i32,
                                                                            ),
                                                                        )
                                                                    }
                                                                }))),
                                                            );
                                                            let v9587:
                                                                                string =
                                                                            append((append((append((append((append((append((append(string("{"),
                                                                                                                                   (concat(new_array(&[string("  \"name\": \"spiral_"),
                                                                                                                                                       v9310,
                                                                                                                                                       string("\",")]))))),
                                                                                                                           string("  \"dependencies\": {"))),
                                                                                                                   (v9571))),
                                                                                                           string("  },"))),
                                                                                                   string("    \"devDependencies\": {"))),
                                                                                           string("  },"))),
                                                                                   string("}"));
                                                            let v9589: string = Spiral::method33(
                                                                v9386.clone(),
                                                                string("package.json"),
                                                            );
                                                            let v9592: string = Spiral::method33(
                                                                Spiral::method33(
                                                                    v9386.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                            Spiral::method70(v9589, v9587);
                                                            Spiral::method70(v9592, string(""));
                                                            {
                                                                let v9595: string =
                                                                    Spiral::method33(
                                                                        v9386,
                                                                        concat(new_array(&[
                                                                            string("spiral"),
                                                                            string("."),
                                                                            string("py"),
                                                                        ])),
                                                                    );
                                                                let v9658: () = {
                                                                    Spiral::closure126(
                                                                        v9595.clone(),
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                let v9730: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v9595.clone());
                                                                let v9775: Vec<u8> =
                                                                    Spiral::method25(
                                                                        v9730.unwrap(),
                                                                    );
                                                                let v9777: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v9775,
                                                                );
                                                                let v9781: std::string::String =
                                                                    v9777.unwrap();
                                                                let v9816:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v9781);
                                                                let v9825: bool = contains(
                                                                    v9816.clone(),
                                                                    string(
                                                                        "# spiral.process_python",
                                                                    ),
                                                                );
                                                                let v9837: string = if v9825 {
                                                                    v9816.clone()
                                                                } else {
                                                                    Spiral::method60(
                                                                        string(
                                                                            "\\s\\sdefaultOf\\(\\);",
                                                                        ),
                                                                        string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                        replace(
                                                                            v9816,
                                                                            append(
                                                                                string("),)"),
                                                                                (";".into()),
                                                                            ),
                                                                            string("));"),
                                                                        ),
                                                                    )
                                                                };
                                                                if (v9825) == false {
                                                                    Spiral::method70(
                                                                        v9595.clone(),
                                                                        concat(new_array(&[
                                                                            v9837.clone(),
                                                                            string("\n\n"),
                                                                            string(
                                                                                "# spiral.process_python",
                                                                            ),
                                                                            string("\n"),
                                                                        ])),
                                                                    );
                                                                }
                                                                {
                                                                    let v9840: string =
                                                                        concat(new_array(&[
                                                                            string("python \""),
                                                                            v9595.clone(),
                                                                            string("\""),
                                                                        ]));
                                                                    let v9843: Array<(
                                                                        string,
                                                                        string,
                                                                    )> = new_array(&[(
                                                                        string("TRACE_LEVEL"),
                                                                        string("Verbose"),
                                                                    )]);
                                                                    let v9872: Result<
                                                                        string,
                                                                        string,
                                                                    > = match &v9361 {
                                                                        Spiral::US13::US13_0(
                                                                            v9361_0_0,
                                                                        ) => Ok::<string, string>(
                                                                            v9361_0_0.clone(),
                                                                        ),
                                                                        Spiral::US13::US13_1(
                                                                            v9361_1_0,
                                                                        ) => Err::<string, string>(
                                                                            v9361_1_0.clone(),
                                                                        ),
                                                                    };
                                                                    let patternInput_34:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method91(v9840.clone(),
                                                                                                     None::<CancellationToken>,
                                                                                                     v9843.clone(),
                                                                                                     None::<Func1<(i32,
                                                                                                                   string,
                                                                                                                   bool),
                                                                                                                  Arc<Async<()>>>>,
                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                  ()>>,
                                                                                                     true,
                                                                                                     v9872.ok());
                                                                    let v9890: string =
                                                                        patternInput_34.1.clone();
                                                                    let v9889: i32 =
                                                                        patternInput_34.0.clone();
                                                                    let v9891: i32 =
                                                                        get_Count(v9843.clone());
                                                                    let v9892: Array<string> =
                                                                        new_init(
                                                                            &string(""),
                                                                            v9891,
                                                                        );
                                                                    let v9893: LrcPtr<
                                                                        Spiral::Mut5,
                                                                    > = LrcPtr::new(Spiral::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    });
                                                                    while Spiral::method29(
                                                                        v9891,
                                                                        v9893.clone(),
                                                                    ) {
                                                                        let v9895: i32 =
                                                                            v9893.l0.get().clone();
                                                                        let patternInput_35: (
                                                                            string,
                                                                            string,
                                                                        ) = v9843[v9895].clone();
                                                                        let v9898: string = sprintf!(
                                                                            "$env:{}=\'\'{}\'\'",
                                                                            patternInput_35
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_35
                                                                                .1
                                                                                .clone()
                                                                        );
                                                                        v9892.get_mut()
                                                                            [v9895 as usize] =
                                                                            v9898;
                                                                        {
                                                                            let v9899: i32 =
                                                                                (v9895) + 1_i32;
                                                                            v9893.l0.set(v9899);
                                                                            ()
                                                                        }
                                                                    }
                                                                    {
                                                                        let v9912: string = sprintf!(
                                                                            "pwsh -c \'{}; {}\'",
                                                                            join(
                                                                                string(";"),
                                                                                toArray_1(
                                                                                    ofArray_1(
                                                                                        v9892
                                                                                            .clone(
                                                                                            )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            v9840
                                                                        );
                                                                        let patternInput_36: (
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                        ) = if (v9889) == 0_i32 {
                                                                            let result_4: LrcPtr<
                                                                                MutCell<
                                                                                    Spiral::US5,
                                                                                >,
                                                                            > = refCell(
                                                                                Spiral::US5::US5_1,
                                                                            );
                                                                            try_catch(||
                                                                                                          result_4.set(Spiral::closure72((),
                                                                                                                                         Spiral::closure127(v9890.clone(),
                                                                                                                                                            ()))),
                                                                                                      |ex_4:
                                                                                                           LrcPtr<Exception>|
                                                                                                          result_4.set(Spiral::closure128(v9595.clone(),
                                                                                                                                          v9890.clone(),
                                                                                                                                          v9912.clone(),
                                                                                                                                          ex_4.clone())));
                                                                            {
                                                                                let v9919:
                                                                                                        Spiral::US5 =
                                                                                                    result_4.get().clone();
                                                                                let v9933:
                                                                                                        Option<string> =
                                                                                                    match &v9919
                                                                                                        {
                                                                                                        Spiral::US5::US5_0(v9919_0_0)
                                                                                                        =>
                                                                                                        Some(match &v9919
                                                                                                                 {
                                                                                                                 Spiral::US5::US5_0(x)
                                                                                                                 =>
                                                                                                                 x.clone(),
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 unreachable!(),
                                                                                                             }.clone()),
                                                                                                        _
                                                                                                        =>
                                                                                                        None::<string>,
                                                                                                    };
                                                                                (Spiral::US5::US5_0(string("py")),
                                                                                                 Spiral::US5::US5_0(v9837),
                                                                                                 Spiral::US5::US5_0(v9595.clone()),
                                                                                                 Spiral::US5::US5_0(v9933.unwrap()))
                                                                            }
                                                                        } else {
                                                                            let v10002: () = {
                                                                                Spiral::closure130(
                                                                                    v9595,
                                                                                    v9890,
                                                                                    v9889,
                                                                                    v9912,
                                                                                    (),
                                                                                );
                                                                                ()
                                                                            };
                                                                            (
                                                                                Spiral::US5::US5_0(
                                                                                    string("py"),
                                                                                ),
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                            )
                                                                        };
                                                                        (
                                                                            patternInput_36
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .1
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .2
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .3
                                                                                .clone(),
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_37.0.clone(),
                                                            patternInput_37.1.clone(),
                                                            patternInput_37.2.clone(),
                                                            patternInput_37.3.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v10137: () = {
                                                        Spiral::closure131(v41, v40, ());
                                                        ()
                                                    };
                                                    (
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                    )
                                                };
                                                (
                                                    patternInput_38.0.clone(),
                                                    patternInput_38.1.clone(),
                                                    patternInput_38.2.clone(),
                                                    patternInput_38.3.clone(),
                                                )
                                            };
                                            (
                                                patternInput_39.0.clone(),
                                                patternInput_39.1.clone(),
                                                patternInput_39.2.clone(),
                                                patternInput_39.3.clone(),
                                            )
                                        };
                                        let v10213: Spiral::US5 = patternInput_40.3.clone();
                                        let v10212: Spiral::US5 = patternInput_40.2.clone();
                                        let v10211: Spiral::US5 = patternInput_40.1.clone();
                                        let v10210: Spiral::US5 = patternInput_40.0.clone();
                                        new_array(&[
                                            (
                                                string("extension"),
                                                match &v10210 {
                                                    Spiral::US5::US5_0(v10210_0_0) => match &v10210
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code"),
                                                match &v10211 {
                                                    Spiral::US5::US5_0(v10211_0_0) => match &v10211
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code_path"),
                                                match &v10212 {
                                                    Spiral::US5::US5_0(v10212_0_0) => match &v10212
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("output"),
                                                match &v10213 {
                                                    Spiral::US5::US5_0(v10213_0_0) => match &v10213
                                                    {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                        ])
                                    }
                                }
                            }
                        }
                    } else {
                        new_array(&[
                            (string("extension"), string("")),
                            (string("code"), string("")),
                            (string("code_path"), string("")),
                            (string("output"), string("")),
                        ])
                    };
                    let v10247: Vec<(string, string)> = v10245.to_vec();
                    let v10250: bool = true;
                    let _func1_from_v10248 = Func1::from(move |value| {
                        //;
                        let patternInput_41: (string, string) = value;
                        let v10260: &str = &*patternInput_41.0.clone();
                        let v10293: std::string::String = String::from(v10260);
                        let v10326: &str = &*patternInput_41.1.clone();
                        let v10359: std::string::String = String::from(v10326);
                        let v10392: bool = true;
                        LrcPtr::new((v10293, v10359)) /*;
                        let v10394: bool = */
                    }); //;
                    let v10396: Func1<
                        (string, string),
                        LrcPtr<(std::string::String, std::string::String)>,
                    > = _func1_from_v10248;
                    let v10399: Vec<LrcPtr<(std::string::String, std::string::String)>> = v10247
                        .into_iter()
                        .map(|x| {
                            Func1::new({
                                let v10396 = v10396.clone();
                                move |arg10_0040_53: (string, string)| {
                                    Spiral::closure76(v10396.clone(), arg10_0040_53)
                                }
                            })(x.clone())
                        })
                        .collect::<Vec<_>>();
                    let v10400: string = string(
                        "std::collections::BTreeMap::from_iter(v10399.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))",
                    );
                    let v10401: std::collections::BTreeMap<
                        std::string::String,
                        std::string::String,
                    > = std::collections::BTreeMap::from_iter(
                        v10399
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                    let v10403: Result<std::string::String, serde_json::Error> =
                        serde_json::to_string(&v10401);
                    let v10404 = Spiral::method242();
                    let v10408: Result<std::string::String, string> = v10403.map_err(|x| v10404(x));
                    let v10421: bool = true;
                    let _result_map_ = v10408.map(|x| {
                        //;
                        let v10423: std::string::String = x;
                        let v10425: string = fable_library_rust::String_::fromString(v10423);
                        let v10427: bool = true;
                        v10425
                    });
                    let v10429: Result<string, string> = _result_map_;
                    let v10432: string = string("}");
                    let v10437: bool = true;
                    let _fix_closure_v10434 = v10429;
                    let v10444: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v10434 "), (v10432))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v10445: bool = true;
                    _fix_closure_v10434
                },
            ); // rust.fix_closure';
            let v10447 = __future_init;
            v10447
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v17: () = {
                Spiral::closure2((), ());
                ()
            };
            let v42: LrcPtr<Spiral::Mut4> =
                (Spiral::TraceState::trace_state().get().clone().unwrap())
                    .4
                    .clone();
            let v117: () = {
                Spiral::closure5(v0_1, ());
                ()
            };
            let v177: clap::Command = Spiral::method0();
            let v179: clap::ArgMatches = clap::Command::get_matches(v177);
            let v181: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral::method18(v42.l0.get().clone(), v179);
            let v183: Result<string, string> = futures::executor::block_on(v181);
            let v187: string = v183.unwrap();
            if if let Spiral::US0::US0_2 = &v42.l0.get().clone() {
                true
            } else {
                false
            } {
                let v204: () = {
                    Spiral::closure10(v187, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral::v1())(args)
        }
    }
}
pub use module_6ff740fe::*;
#[path = "../../lib/spiral/async_.rs"]
mod module_2335f2f5;
pub use module_2335f2f5::*;
#[path = "../../lib/spiral/common.rs"]
mod module_652e6d81;
pub use module_652e6d81::*;
#[path = "../../lib/spiral/crypto.rs"]
mod module_dd5f95ef;
pub use module_dd5f95ef::*;
#[path = "../../lib/spiral/date_time.rs"]
mod module_ca5e6cb2;
pub use module_ca5e6cb2::*;
#[path = "../../lib/spiral/file_system.rs"]
mod module_5ab1faf0;
pub use module_5ab1faf0::*;
#[path = "../../lib/spiral/lib.rs"]
mod module_b386774b;
pub use module_b386774b::*;
#[path = "../../lib/spiral/networking.rs"]
mod module_ce497f72;
pub use module_ce497f72::*;
#[path = "../../lib/spiral/platform.rs"]
mod module_9a61edd3;
pub use module_9a61edd3::*;
#[path = "../../lib/spiral/runtime.rs"]
mod module_502d7e30;
pub use module_502d7e30::*;
#[path = "../../lib/spiral/sm.rs"]
mod module_34f67952;
pub use module_34f67952::*;
#[path = "../../lib/spiral/threading.rs"]
mod module_11c0c5c2;
pub use module_11c0c5c2::*;
#[path = "../../lib/spiral/trace.rs"]
mod module_28ecba0d;
pub use module_28ecba0d::*;
#[path = "../../deps/polyglot/lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral::main(array_from(args));
}
